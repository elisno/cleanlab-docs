Search.setIndex({"docnames": ["cleanlab/benchmarking/index", "cleanlab/benchmarking/noise_generation", "cleanlab/classification", "cleanlab/count", "cleanlab/datalab/datalab", "cleanlab/datalab/guide/_templates/issue_types_tip", "cleanlab/datalab/guide/custom_issue_manager", "cleanlab/datalab/guide/generating_cluster_ids", "cleanlab/datalab/guide/index", "cleanlab/datalab/guide/issue_type_description", "cleanlab/datalab/index", "cleanlab/datalab/internal/data", "cleanlab/datalab/internal/data_issues", "cleanlab/datalab/internal/factory", "cleanlab/datalab/internal/index", "cleanlab/datalab/internal/issue_finder", "cleanlab/datalab/internal/issue_manager/_notices/not_registered", "cleanlab/datalab/internal/issue_manager/data_valuation", "cleanlab/datalab/internal/issue_manager/duplicate", "cleanlab/datalab/internal/issue_manager/imbalance", "cleanlab/datalab/internal/issue_manager/index", "cleanlab/datalab/internal/issue_manager/issue_manager", "cleanlab/datalab/internal/issue_manager/label", "cleanlab/datalab/internal/issue_manager/multilabel/index", "cleanlab/datalab/internal/issue_manager/multilabel/label", "cleanlab/datalab/internal/issue_manager/noniid", "cleanlab/datalab/internal/issue_manager/null", "cleanlab/datalab/internal/issue_manager/outlier", "cleanlab/datalab/internal/issue_manager/regression/index", "cleanlab/datalab/internal/issue_manager/regression/label", "cleanlab/datalab/internal/issue_manager/underperforming_group", "cleanlab/datalab/internal/model_outputs", "cleanlab/datalab/internal/report", "cleanlab/datalab/internal/task", "cleanlab/datalab/optional_dependencies", "cleanlab/dataset", "cleanlab/experimental/cifar_cnn", "cleanlab/experimental/coteaching", "cleanlab/experimental/index", "cleanlab/experimental/label_issues_batched", "cleanlab/experimental/mnist_pytorch", "cleanlab/experimental/span_classification", "cleanlab/filter", "cleanlab/internal/index", "cleanlab/internal/label_quality_utils", "cleanlab/internal/latent_algebra", "cleanlab/internal/multiannotator_utils", "cleanlab/internal/multilabel_scorer", "cleanlab/internal/multilabel_utils", "cleanlab/internal/outlier", "cleanlab/internal/token_classification_utils", "cleanlab/internal/util", "cleanlab/internal/validation", "cleanlab/models/fasttext", "cleanlab/models/index", "cleanlab/models/keras", "cleanlab/multiannotator", "cleanlab/multilabel_classification/dataset", "cleanlab/multilabel_classification/filter", "cleanlab/multilabel_classification/index", "cleanlab/multilabel_classification/rank", "cleanlab/object_detection/filter", "cleanlab/object_detection/index", "cleanlab/object_detection/rank", "cleanlab/object_detection/summary", "cleanlab/outlier", "cleanlab/rank", "cleanlab/regression/index", "cleanlab/regression/learn", "cleanlab/regression/rank", "cleanlab/segmentation/filter", "cleanlab/segmentation/index", "cleanlab/segmentation/rank", "cleanlab/segmentation/summary", "cleanlab/token_classification/filter", "cleanlab/token_classification/index", "cleanlab/token_classification/rank", "cleanlab/token_classification/summary", "index", "migrating/migrate_v2", "tutorials/audio", "tutorials/datalab/datalab_advanced", "tutorials/datalab/datalab_quickstart", "tutorials/datalab/index", "tutorials/datalab/tabular", "tutorials/datalab/text", "tutorials/dataset_health", "tutorials/faq", "tutorials/image", "tutorials/indepth_overview", "tutorials/index", "tutorials/multiannotator", "tutorials/multilabel_classification", "tutorials/object_detection", "tutorials/outliers", "tutorials/pred_probs_cross_val", "tutorials/regression", "tutorials/segmentation", "tutorials/tabular", "tutorials/text", "tutorials/token_classification"], "filenames": ["cleanlab/benchmarking/index.rst", "cleanlab/benchmarking/noise_generation.rst", "cleanlab/classification.rst", "cleanlab/count.rst", "cleanlab/datalab/datalab.rst", "cleanlab/datalab/guide/_templates/issue_types_tip.rst", "cleanlab/datalab/guide/custom_issue_manager.rst", "cleanlab/datalab/guide/generating_cluster_ids.rst", "cleanlab/datalab/guide/index.rst", "cleanlab/datalab/guide/issue_type_description.rst", "cleanlab/datalab/index.rst", "cleanlab/datalab/internal/data.rst", "cleanlab/datalab/internal/data_issues.rst", "cleanlab/datalab/internal/factory.rst", "cleanlab/datalab/internal/index.rst", "cleanlab/datalab/internal/issue_finder.rst", "cleanlab/datalab/internal/issue_manager/_notices/not_registered.rst", "cleanlab/datalab/internal/issue_manager/data_valuation.rst", "cleanlab/datalab/internal/issue_manager/duplicate.rst", "cleanlab/datalab/internal/issue_manager/imbalance.rst", "cleanlab/datalab/internal/issue_manager/index.rst", "cleanlab/datalab/internal/issue_manager/issue_manager.rst", "cleanlab/datalab/internal/issue_manager/label.rst", "cleanlab/datalab/internal/issue_manager/multilabel/index.rst", "cleanlab/datalab/internal/issue_manager/multilabel/label.rst", "cleanlab/datalab/internal/issue_manager/noniid.rst", "cleanlab/datalab/internal/issue_manager/null.rst", "cleanlab/datalab/internal/issue_manager/outlier.rst", "cleanlab/datalab/internal/issue_manager/regression/index.rst", "cleanlab/datalab/internal/issue_manager/regression/label.rst", "cleanlab/datalab/internal/issue_manager/underperforming_group.rst", "cleanlab/datalab/internal/model_outputs.rst", "cleanlab/datalab/internal/report.rst", "cleanlab/datalab/internal/task.rst", "cleanlab/datalab/optional_dependencies.rst", "cleanlab/dataset.rst", "cleanlab/experimental/cifar_cnn.rst", "cleanlab/experimental/coteaching.rst", "cleanlab/experimental/index.rst", "cleanlab/experimental/label_issues_batched.rst", "cleanlab/experimental/mnist_pytorch.rst", "cleanlab/experimental/span_classification.rst", "cleanlab/filter.rst", "cleanlab/internal/index.rst", "cleanlab/internal/label_quality_utils.rst", "cleanlab/internal/latent_algebra.rst", "cleanlab/internal/multiannotator_utils.rst", "cleanlab/internal/multilabel_scorer.rst", "cleanlab/internal/multilabel_utils.rst", "cleanlab/internal/outlier.rst", "cleanlab/internal/token_classification_utils.rst", "cleanlab/internal/util.rst", "cleanlab/internal/validation.rst", "cleanlab/models/fasttext.rst", "cleanlab/models/index.rst", "cleanlab/models/keras.rst", "cleanlab/multiannotator.rst", "cleanlab/multilabel_classification/dataset.rst", "cleanlab/multilabel_classification/filter.rst", "cleanlab/multilabel_classification/index.rst", "cleanlab/multilabel_classification/rank.rst", "cleanlab/object_detection/filter.rst", "cleanlab/object_detection/index.rst", "cleanlab/object_detection/rank.rst", "cleanlab/object_detection/summary.rst", "cleanlab/outlier.rst", "cleanlab/rank.rst", "cleanlab/regression/index.rst", "cleanlab/regression/learn.rst", "cleanlab/regression/rank.rst", "cleanlab/segmentation/filter.rst", "cleanlab/segmentation/index.rst", "cleanlab/segmentation/rank.rst", "cleanlab/segmentation/summary.rst", "cleanlab/token_classification/filter.rst", "cleanlab/token_classification/index.rst", "cleanlab/token_classification/rank.rst", "cleanlab/token_classification/summary.rst", "index.rst", "migrating/migrate_v2.rst", "tutorials/audio.ipynb", "tutorials/datalab/datalab_advanced.ipynb", "tutorials/datalab/datalab_quickstart.ipynb", "tutorials/datalab/index.rst", "tutorials/datalab/tabular.ipynb", "tutorials/datalab/text.ipynb", "tutorials/dataset_health.ipynb", "tutorials/faq.ipynb", "tutorials/image.ipynb", "tutorials/indepth_overview.ipynb", "tutorials/index.rst", "tutorials/multiannotator.ipynb", "tutorials/multilabel_classification.ipynb", "tutorials/object_detection.ipynb", "tutorials/outliers.ipynb", "tutorials/pred_probs_cross_val.rst", "tutorials/regression.ipynb", "tutorials/segmentation.ipynb", "tutorials/tabular.ipynb", "tutorials/text.ipynb", "tutorials/token_classification.ipynb"], "titles": ["benchmarking", "noise_generation", "classification", "count", "datalab", "&lt;no title&gt;", "Creating Your Own Issues Manager", "Generating Cluster IDs", "Datalab guides", "Datalab Issue Types", "datalab", "data", "data_issues", "factory", "internal", "issue_finder", "&lt;no title&gt;", "data_valuation", "duplicate", "imbalance", "issue_manager", "issue_manager", "label", "multilabel", "label", "noniid", "null", "outlier", "regression", "label", "underperforming_group", "model_outputs", "report", "task", "&lt;no title&gt;", "dataset", "cifar_cnn", "coteaching", "experimental", "label_issues_batched", "mnist_pytorch", "span_classification", "filter", "internal", "label_quality_utils", "latent_algebra", "multiannotator_utils", "multilabel_scorer", "multilabel_utils", "outlier", "token_classification_utils", "util", "validation", "fasttext", "models", "keras", "multiannotator", "dataset", "filter", "multilabel_classification", "rank", "filter", "object_detection", "rank", "summary", "outlier", "rank", "regression", "regression.learn", "regression.rank", "filter", "segmentation", "rank", "summary", "filter", "token_classification", "rank", "summary", "cleanlab open-source documentation", "How to migrate to versions &gt;= 2.0.0 from pre 1.0.1", "Audio Classification with SpeechBrain and Cleanlab", "Datalab: Advanced workflows to audit your data", "Datalab: A unified audit to detect all kinds of issues in data and labels", "Datalab Tutorials", "Detecting Issues in Tabular Data\u00a0(Numeric/Categorical columns) with Datalab", "Detecting Issues in a Text Dataset with Datalab", "Find Dataset-level Issues for Dataset Curation", "FAQ", "Image Classification with PyTorch and Cleanlab", "The Workflows of Data-centric AI for Classification with Noisy Labels", "Tutorials", "Estimate Consensus and Annotator Quality for Data Labeled by Multiple Annotators", "Find Label Errors in Multi-Label Classification Datasets", "Finding Label Errors in Object Detection Datasets", "Detect Outliers with Cleanlab and PyTorch Image Models (timm)", "Computing Out-of-Sample Predicted Probabilities with Cross-Validation", "Find Noisy Labels in Regression Datasets", "Find Label Errors in Semantic Segmentation Datasets", "Classification with Tabular Data using Scikit-Learn and Cleanlab", "Text Classification with Noisy Labels", "Find Label Errors in Token Classification (Text) Datasets"], "terms": {"noise_gener": [0, 79, 81, 82, 89, 91, 92], "noise_matrix_is_valid": [0, 1], "generate_noisy_label": [0, 1, 81, 82, 89, 91, 92], "generate_noise_matrix_from_trac": [0, 1, 81, 82, 89, 91, 92], "generate_n_rand_probabilities_that_sum_to_m": [0, 1], "randomly_distribute_n_balls_into_k_bin": [0, 1], "helper": [1, 15, 39, 44, 46, 47, 48, 49, 50, 51, 63, 86, 88, 100], "method": [1, 2, 3, 4, 6, 9, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 50, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 84, 85, 87, 88, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100], "ar": [1, 2, 3, 4, 6, 9, 11, 12, 13, 14, 15, 17, 19, 20, 21, 22, 23, 25, 28, 29, 31, 33, 35, 36, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 57, 58, 60, 61, 63, 64, 65, 66, 68, 69, 70, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 84, 85, 87, 88, 89, 91, 92, 93, 94, 95, 96, 98, 99, 100], "us": [1, 2, 3, 4, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 54, 55, 56, 57, 58, 60, 61, 63, 64, 65, 66, 68, 69, 70, 72, 73, 74, 76, 78, 79, 81, 86, 90, 95], "benchmark": [1, 36, 78, 79, 81, 82, 89, 91, 92], "cleanlab": [1, 2, 3, 4, 6, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 57, 58, 60, 61, 63, 64, 65, 66, 68, 69, 70, 72, 73, 74, 76, 77, 79, 81, 82, 86, 90, 95], "": [1, 2, 3, 9, 17, 31, 35, 36, 40, 44, 47, 49, 51, 56, 57, 61, 63, 64, 65, 66, 68, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100], "core": [1, 39, 42, 70, 72], "algorithm": [1, 2, 7, 9, 30, 37, 41, 51, 56, 65, 74, 76, 78, 87, 89, 91, 100], "These": [1, 2, 3, 4, 7, 9, 20, 36, 38, 40, 41, 42, 43, 54, 56, 57, 60, 64, 65, 69, 73, 74, 76, 77, 80, 82, 84, 85, 87, 88, 89, 91, 92, 93, 94, 96, 97, 98, 99, 100], "introduc": [1, 80, 87, 89], "synthet": [1, 91, 92, 97], "nois": [1, 2, 3, 35, 42, 45, 51, 57, 81, 82, 86, 91, 96], "label": [1, 2, 3, 4, 6, 7, 8, 11, 13, 14, 15, 19, 20, 21, 23, 28, 30, 33, 35, 36, 37, 39, 40, 41, 42, 44, 45, 46, 47, 48, 51, 52, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 81, 86, 90, 94, 95], "classif": [1, 3, 4, 6, 9, 11, 13, 15, 31, 33, 35, 39, 41, 42, 45, 47, 48, 51, 56, 57, 58, 59, 60, 65, 66, 74, 75, 76, 77, 78, 79, 81, 82, 90, 91, 94, 95, 96, 97], "dataset": [1, 2, 3, 4, 6, 9, 11, 12, 13, 15, 17, 18, 19, 21, 24, 25, 26, 27, 29, 30, 38, 39, 40, 41, 42, 45, 47, 51, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 83, 84, 90, 91, 95, 98], "specif": [1, 3, 4, 8, 13, 14, 15, 26, 32, 33, 38, 54, 58, 61, 64, 73, 77, 84, 85, 88, 89, 93, 100], "thi": [1, 2, 3, 4, 5, 6, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 47, 48, 50, 51, 52, 54, 55, 56, 57, 58, 60, 61, 63, 64, 65, 66, 68, 69, 70, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100], "modul": [1, 3, 12, 13, 14, 15, 20, 23, 28, 31, 32, 33, 35, 36, 37, 38, 39, 40, 42, 47, 49, 51, 54, 56, 61, 64, 65, 66, 78, 87, 88, 92], "provid": [1, 2, 3, 4, 6, 7, 9, 13, 15, 17, 22, 29, 33, 35, 36, 37, 39, 40, 42, 45, 51, 55, 56, 57, 58, 63, 64, 65, 66, 68, 70, 72, 73, 76, 77, 78, 80, 81, 82, 84, 85, 87, 88, 89, 91, 94, 95, 96, 97, 98, 99, 100], "gener": [1, 2, 3, 6, 9, 17, 22, 24, 32, 35, 47, 51, 52, 65, 66, 68, 73, 80, 81, 82, 85, 86, 87, 88, 89, 91, 92, 94, 95, 97, 99, 100], "valid": [1, 2, 3, 4, 9, 11, 31, 33, 35, 42, 43, 45, 46, 47, 49, 51, 56, 58, 61, 64, 66, 68, 69, 77, 79, 80, 81, 82, 84, 85, 86, 87, 89, 90, 92, 93, 96, 97, 98, 99, 100], "matric": [1, 3, 45, 87], "which": [1, 2, 3, 4, 6, 9, 11, 12, 13, 15, 17, 21, 25, 31, 32, 33, 35, 36, 40, 41, 42, 45, 47, 50, 51, 56, 57, 58, 61, 63, 64, 65, 66, 68, 69, 72, 73, 74, 76, 78, 79, 80, 81, 82, 84, 85, 87, 88, 89, 91, 92, 93, 94, 95, 96, 98, 99, 100], "learn": [1, 2, 3, 4, 9, 13, 15, 21, 29, 32, 37, 38, 39, 40, 42, 44, 46, 51, 54, 56, 58, 65, 67, 69, 72, 76, 78, 80, 81, 84, 85, 86, 88, 90, 91, 92, 96, 99], "i": [1, 2, 3, 4, 5, 6, 7, 9, 11, 12, 13, 15, 17, 18, 19, 21, 22, 24, 25, 26, 27, 29, 30, 31, 32, 33, 35, 36, 37, 39, 40, 41, 42, 44, 45, 46, 47, 49, 50, 51, 52, 55, 56, 57, 58, 60, 61, 63, 64, 65, 66, 68, 69, 70, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 88, 91, 92, 93, 94, 96, 97, 98, 99, 100], "possibl": [1, 2, 3, 6, 9, 35, 36, 40, 42, 44, 45, 47, 58, 59, 60, 61, 63, 64, 65, 66, 68, 74, 76, 77, 82, 87, 89, 91, 92, 93, 96, 97, 100], "noisi": [1, 2, 3, 9, 35, 37, 40, 42, 45, 51, 57, 58, 60, 66, 68, 69, 70, 72, 73, 79, 81, 82, 84, 85, 87, 90, 91], "given": [1, 2, 3, 4, 9, 13, 29, 35, 36, 37, 39, 40, 41, 42, 44, 45, 46, 47, 50, 51, 56, 57, 58, 61, 63, 64, 65, 66, 68, 69, 73, 74, 76, 77, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 91, 93, 94, 96, 97, 98, 99, 100], "matrix": [1, 2, 3, 4, 9, 15, 17, 30, 35, 42, 44, 45, 48, 51, 52, 58, 61, 63, 64, 65, 66, 84, 93, 94], "trace": [1, 81, 82, 89, 91, 92], "valu": [1, 2, 3, 4, 9, 11, 12, 15, 17, 21, 25, 26, 31, 33, 35, 36, 37, 39, 40, 42, 44, 45, 47, 49, 51, 56, 57, 58, 60, 61, 63, 64, 65, 66, 68, 69, 70, 72, 73, 74, 77, 80, 82, 84, 85, 87, 88, 89, 91, 92, 93, 94, 96, 97, 99, 100], "more": [1, 2, 3, 4, 6, 9, 12, 13, 15, 17, 25, 35, 36, 39, 40, 41, 44, 47, 49, 51, 56, 57, 58, 59, 60, 61, 63, 64, 66, 68, 69, 72, 73, 74, 76, 78, 80, 81, 84, 85, 86, 87, 88, 91, 92, 93, 94, 97, 100], "function": [1, 2, 3, 4, 6, 12, 13, 15, 22, 25, 29, 35, 36, 37, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 55, 56, 57, 58, 60, 61, 63, 64, 65, 66, 68, 69, 70, 72, 73, 74, 76, 77, 80, 82, 86, 87, 89, 91, 92, 93, 97, 98, 99, 100], "noise_matrix": [1, 2, 3, 9, 45, 51, 81, 82, 89, 91, 92], "py": [1, 3, 32, 36, 37, 42, 45, 47, 80, 81, 82, 85, 87, 89, 91, 92, 99], "verbos": [1, 2, 4, 6, 15, 17, 18, 19, 21, 22, 24, 25, 26, 27, 29, 30, 32, 35, 39, 42, 56, 57, 58, 63, 65, 66, 68, 70, 72, 73, 77, 81, 89, 91], "fals": [1, 2, 3, 4, 6, 11, 17, 18, 19, 21, 22, 24, 25, 27, 29, 30, 32, 33, 35, 36, 39, 40, 42, 46, 50, 51, 52, 56, 57, 58, 60, 61, 63, 64, 65, 66, 68, 70, 72, 73, 74, 80, 81, 82, 84, 85, 87, 88, 89, 91, 93, 94, 96, 97, 99], "sourc": [1, 2, 3, 4, 6, 8, 9, 10, 11, 12, 13, 15, 17, 18, 19, 21, 22, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 55, 56, 57, 58, 60, 61, 63, 64, 65, 66, 68, 69, 70, 72, 73, 74, 76, 77], "prior": [1, 2, 3, 35, 42, 45, 47], "repres": [1, 2, 3, 6, 9, 11, 15, 17, 25, 31, 33, 35, 39, 42, 45, 48, 49, 51, 56, 57, 58, 61, 63, 64, 65, 66, 68, 70, 72, 73, 77, 80, 81, 82, 84, 85, 87, 88, 89, 91, 92, 93, 94, 96, 98, 99, 100], "p": [1, 2, 3, 4, 9, 35, 42, 44, 45, 51, 56, 64, 65, 66, 70, 84, 85, 89, 91, 100], "true_label": [1, 2, 3, 35, 45, 51, 89, 91], "k": [1, 2, 3, 4, 7, 9, 11, 15, 17, 18, 22, 25, 27, 30, 35, 39, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 56, 57, 58, 59, 60, 61, 64, 65, 66, 68, 70, 72, 73, 74, 76, 77, 80, 81, 82, 87, 89, 91, 92, 93, 94, 97, 98, 100], "check": [1, 2, 4, 5, 8, 9, 11, 15, 26, 33, 36, 39, 40, 46, 52, 55, 61, 64, 68, 78, 80, 81, 82, 87, 88, 89, 91, 92, 96, 98, 99], "learnabl": 1, "mean": [1, 2, 6, 7, 11, 12, 21, 25, 37, 40, 45, 47, 49, 63, 68, 82, 85, 87, 89, 91, 92, 93, 94, 96, 99], "achiev": [1, 2, 36, 37, 40, 68, 87, 91, 100], "better": [1, 4, 42, 56, 58, 66, 68, 69, 78, 80, 82, 84, 85, 87, 89, 92, 93, 94, 99, 100], "than": [1, 2, 3, 6, 9, 25, 27, 30, 35, 42, 51, 55, 56, 61, 63, 65, 66, 68, 72, 76, 80, 82, 84, 85, 87, 88, 89, 91, 92, 93, 94, 95, 96, 97, 98, 100], "random": [1, 2, 3, 6, 9, 17, 30, 39, 47, 56, 66, 68, 80, 81, 82, 84, 87, 88, 89, 91, 92, 94, 98], "perform": [1, 2, 6, 9, 25, 27, 30, 36, 40, 47, 64, 68, 78, 81, 87, 89, 91, 92, 95, 96, 98, 99], "averag": [1, 3, 4, 9, 21, 27, 35, 36, 40, 47, 49, 56, 57, 64, 65, 66, 87, 91, 94], "amount": [1, 3, 88], "paramet": [1, 2, 3, 4, 8, 11, 12, 13, 15, 17, 18, 19, 21, 22, 24, 25, 26, 27, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 47, 48, 49, 50, 51, 52, 55, 56, 57, 58, 60, 61, 63, 64, 65, 66, 68, 69, 70, 72, 73, 74, 76, 77, 80, 82, 85, 88, 98, 99], "np": [1, 2, 3, 4, 6, 15, 17, 30, 35, 37, 39, 41, 42, 44, 45, 47, 48, 49, 50, 51, 52, 55, 56, 57, 58, 60, 61, 63, 64, 65, 66, 68, 69, 70, 73, 74, 76, 77, 80, 81, 82, 84, 86, 87, 88, 89, 91, 92, 93, 94, 96, 97, 98, 99, 100], "ndarrai": [1, 2, 3, 4, 15, 22, 24, 25, 29, 30, 31, 35, 37, 39, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 56, 57, 58, 60, 61, 63, 64, 65, 66, 68, 69, 70, 72, 73, 76, 100], "an": [1, 2, 3, 4, 6, 9, 11, 12, 13, 15, 17, 18, 19, 21, 22, 24, 25, 27, 29, 30, 31, 32, 33, 35, 36, 37, 39, 40, 41, 42, 44, 45, 46, 47, 49, 51, 52, 55, 56, 57, 58, 60, 61, 63, 64, 65, 66, 68, 70, 72, 73, 77, 78, 80, 81, 82, 84, 85, 86, 88, 89, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100], "arrai": [1, 2, 3, 4, 6, 9, 11, 15, 17, 25, 31, 35, 37, 39, 40, 41, 42, 45, 46, 47, 48, 49, 50, 51, 52, 55, 56, 57, 58, 60, 61, 63, 64, 65, 66, 68, 69, 70, 72, 73, 74, 76, 77, 80, 81, 82, 85, 87, 89, 91, 92, 93, 94, 96, 97, 98, 99, 100], "shape": [1, 2, 3, 4, 15, 17, 35, 37, 39, 41, 42, 44, 45, 46, 47, 49, 50, 51, 55, 56, 57, 58, 60, 61, 63, 64, 65, 66, 68, 69, 70, 72, 73, 74, 76, 77, 80, 86, 87, 89, 92, 93, 94, 97, 100], "condit": [1, 2, 3, 45, 50, 51, 66, 88, 89, 100], "probabl": [1, 2, 3, 4, 7, 9, 15, 22, 24, 27, 31, 35, 39, 40, 41, 42, 44, 45, 47, 48, 50, 51, 55, 56, 57, 58, 60, 61, 63, 64, 65, 66, 68, 70, 72, 73, 74, 76, 77, 78, 79, 86, 87, 89, 90, 92, 93, 94, 97, 100], "k_": [1, 2, 3, 45, 51], "k_y": [1, 2, 3, 45, 51], "contain": [1, 2, 3, 4, 9, 11, 12, 17, 18, 19, 21, 22, 24, 25, 26, 27, 29, 30, 31, 32, 33, 35, 36, 37, 39, 40, 42, 44, 45, 50, 51, 55, 56, 57, 58, 60, 61, 63, 64, 65, 66, 68, 69, 72, 73, 74, 76, 77, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 91, 92, 93, 94, 96, 97, 98, 99], "fraction": [1, 2, 3, 9, 19, 37, 45, 51, 56, 68, 84, 87], "exampl": [1, 2, 3, 4, 6, 7, 9, 11, 12, 13, 15, 17, 18, 19, 21, 22, 24, 25, 26, 27, 29, 30, 32, 33, 35, 36, 37, 39, 40, 41, 42, 44, 45, 47, 48, 49, 50, 51, 55, 56, 57, 58, 59, 60, 61, 63, 64, 65, 66, 68, 69, 70, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 91, 92, 93, 95, 96, 97, 98, 99, 100], "everi": [1, 2, 3, 4, 15, 36, 40, 42, 45, 50, 51, 58, 66, 68, 69, 80, 81, 82, 84, 85, 87, 88, 91, 93, 95, 97, 98, 100], "class": [1, 2, 3, 4, 6, 8, 11, 12, 13, 15, 17, 18, 19, 21, 22, 24, 25, 26, 27, 29, 30, 31, 32, 33, 35, 36, 37, 39, 40, 41, 42, 44, 45, 46, 47, 48, 50, 51, 55, 56, 57, 58, 59, 60, 61, 63, 64, 65, 66, 68, 70, 72, 73, 74, 76, 77, 78, 80, 81, 82, 84, 85, 86, 87, 88, 91, 92, 93, 94, 95, 96, 98, 99, 100], "other": [1, 2, 3, 4, 9, 15, 21, 26, 35, 36, 38, 39, 40, 42, 45, 48, 51, 52, 54, 56, 57, 60, 64, 65, 66, 68, 73, 80, 81, 82, 84, 85, 87, 88, 89, 92, 94, 97, 100], "assum": [1, 2, 3, 11, 42, 45, 50, 51, 66, 70, 73, 87, 92, 94, 96, 97, 100], "column": [1, 2, 3, 4, 9, 11, 12, 29, 35, 39, 42, 45, 47, 48, 50, 51, 56, 57, 58, 60, 61, 64, 65, 66, 68, 73, 74, 76, 77, 80, 81, 82, 85, 86, 87, 88, 89, 91, 92, 93, 96, 97, 98, 99, 100], "sum": [1, 2, 3, 25, 30, 31, 35, 45, 47, 51, 57, 58, 60, 63, 68, 81, 82, 87, 88, 89, 91, 92, 97, 100], "1": [1, 2, 3, 4, 6, 9, 11, 15, 17, 18, 19, 21, 22, 24, 25, 26, 27, 29, 30, 31, 32, 33, 35, 36, 37, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 56, 57, 58, 59, 60, 61, 63, 64, 65, 66, 68, 69, 70, 72, 73, 74, 76, 77, 86, 87, 95], "each": [1, 2, 3, 4, 6, 7, 8, 11, 12, 13, 15, 19, 21, 22, 24, 25, 30, 31, 32, 35, 36, 37, 39, 40, 41, 42, 44, 45, 47, 48, 49, 51, 56, 57, 58, 59, 60, 61, 63, 64, 65, 66, 68, 69, 70, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100], "true": [1, 2, 3, 4, 6, 9, 11, 17, 18, 19, 21, 22, 24, 25, 27, 29, 30, 32, 33, 35, 36, 37, 39, 40, 42, 45, 47, 50, 51, 52, 55, 56, 57, 58, 61, 63, 64, 65, 66, 68, 70, 72, 73, 77, 80, 81, 82, 84, 85, 86, 87, 88, 91, 92, 93, 94, 96, 97, 98, 99, 100], "return": [1, 2, 3, 4, 11, 12, 13, 15, 17, 18, 19, 21, 22, 24, 25, 26, 27, 29, 30, 32, 33, 35, 36, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 55, 56, 57, 58, 60, 61, 63, 64, 65, 66, 68, 69, 70, 72, 73, 74, 76, 77, 78, 80, 81, 82, 85, 86, 87, 88, 89, 91, 92, 93, 94, 96, 97, 99, 100], "type": [1, 2, 3, 4, 5, 6, 10, 11, 12, 13, 15, 17, 18, 19, 21, 22, 24, 25, 26, 27, 29, 30, 31, 32, 33, 35, 36, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 56, 57, 58, 60, 61, 63, 64, 65, 66, 68, 69, 70, 72, 73, 74, 76, 77, 79, 80, 81, 82, 83, 84, 85, 87, 88, 92, 93, 96, 97, 98, 100], "bool": [1, 2, 3, 4, 11, 17, 18, 19, 21, 22, 24, 25, 27, 29, 30, 32, 33, 35, 36, 39, 40, 42, 47, 50, 51, 56, 58, 60, 61, 63, 64, 65, 66, 68, 70, 72, 73, 77], "is_valid": 1, "whether": [1, 3, 4, 9, 11, 12, 17, 18, 19, 21, 22, 24, 25, 27, 29, 30, 32, 36, 39, 40, 42, 51, 56, 57, 58, 60, 61, 77, 80, 82, 84, 85, 86, 87, 88, 89, 96, 99, 100], "from": [1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 15, 17, 21, 22, 26, 29, 30, 31, 32, 34, 35, 36, 37, 39, 40, 41, 42, 45, 47, 48, 49, 50, 51, 56, 58, 60, 63, 64, 65, 66, 68, 69, 74, 76, 77, 78, 80, 84, 85, 86, 87, 88, 91, 92, 93, 94, 95, 97, 100], "perfect": [1, 2, 35, 68, 89, 93], "exactli": [1, 3, 9, 35, 36, 40, 42, 59, 65, 81, 82, 84, 85, 88, 89], "yield": [1, 36, 40], "between": [1, 4, 9, 14, 15, 20, 21, 23, 25, 28, 31, 35, 36, 37, 38, 39, 40, 42, 43, 44, 46, 49, 54, 56, 57, 60, 63, 65, 66, 68, 69, 72, 76, 77, 79, 80, 81, 82, 84, 85, 88, 89, 91, 92, 93, 94, 96, 97, 99, 100], "below": [1, 3, 4, 9, 35, 36, 39, 40, 42, 44, 47, 56, 57, 58, 63, 64, 72, 76, 79, 80, 81, 82, 84, 85, 86, 87, 88, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100], "we": [1, 2, 3, 4, 6, 9, 12, 21, 36, 39, 40, 42, 47, 51, 52, 56, 63, 64, 66, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100], "loop": [1, 3, 45, 51, 88, 93], "implement": [1, 2, 3, 8, 13, 21, 36, 37, 39, 40, 45, 51, 68, 78, 80, 81, 84, 94, 95, 98], "what": [1, 4, 8, 9, 15, 32, 35, 37, 39, 42, 56, 57, 61, 63, 80, 81, 82, 84, 85, 88, 91, 92, 93, 94, 96, 97, 98, 99, 100], "doe": [1, 2, 3, 6, 9, 39, 40, 42, 47, 52, 63, 64, 68, 70, 72, 76, 80, 81, 82, 84, 85, 88, 92, 96, 97, 99], "do": [1, 2, 4, 9, 35, 39, 40, 51, 52, 65, 66, 70, 80, 81, 82, 84, 85, 88, 91, 92, 93, 94, 96, 97, 98, 99, 100], "fast": 1, "explain": [1, 9], "python": [1, 2, 40, 55, 68, 80, 81, 82, 85, 86, 94, 99], "pseudocod": [1, 95], "happen": [1, 9, 42, 58, 85, 91, 97], "n": [1, 2, 3, 4, 6, 35, 36, 39, 40, 42, 44, 45, 46, 47, 49, 50, 51, 56, 57, 58, 60, 61, 63, 64, 65, 66, 68, 69, 70, 72, 73, 76, 80, 85, 86, 87, 88, 91, 92, 93, 96, 97, 98, 99, 100], "without": [1, 2, 4, 9, 11, 13, 19, 36, 40, 60, 68, 78, 80, 85, 89, 93, 94, 99], "ani": [1, 2, 3, 4, 6, 9, 11, 12, 13, 15, 17, 18, 19, 21, 22, 24, 25, 26, 27, 29, 30, 35, 36, 39, 40, 42, 44, 46, 49, 50, 51, 55, 56, 58, 60, 61, 63, 64, 66, 68, 70, 72, 73, 78, 80, 81, 82, 84, 85, 87, 88, 91, 92, 93, 94, 95, 96, 97, 98, 99], "distinct": [1, 17, 51, 100], "natur": [1, 9, 91, 94], "number": [1, 2, 3, 4, 6, 7, 9, 11, 12, 15, 17, 18, 19, 21, 22, 24, 25, 27, 29, 30, 32, 33, 35, 36, 37, 39, 40, 42, 45, 46, 47, 48, 49, 50, 51, 56, 57, 58, 60, 61, 63, 64, 65, 66, 68, 69, 70, 72, 73, 76, 77, 79, 80, 81, 82, 84, 85, 87, 88, 89, 91, 92, 93, 97, 100], "0": [1, 2, 3, 4, 6, 9, 11, 17, 18, 19, 21, 22, 24, 25, 26, 27, 29, 30, 31, 35, 36, 37, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 56, 57, 58, 60, 61, 63, 64, 65, 66, 68, 69, 70, 72, 73, 74, 76, 77, 80, 81, 82, 84, 85, 86, 87, 88, 89, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100], "count_joint": 1, "len": [1, 2, 3, 6, 35, 39, 45, 50, 51, 52, 65, 66, 68, 81, 82, 85, 86, 87, 88, 89, 91, 92, 93, 94, 96, 98, 99, 100], "y": [1, 2, 3, 4, 7, 17, 29, 30, 40, 45, 47, 51, 52, 55, 64, 68, 69, 80, 81, 82, 84, 87, 89, 91, 92, 94, 96, 99], "round": [1, 39, 42, 51, 68, 87, 96], "astyp": [1, 91], "int": [1, 2, 3, 4, 6, 15, 17, 18, 19, 21, 22, 24, 25, 26, 27, 29, 30, 32, 35, 36, 37, 39, 40, 42, 47, 48, 49, 50, 51, 52, 57, 58, 60, 64, 65, 66, 68, 70, 72, 73, 74, 77, 80, 81, 88, 93, 94], "rang": [1, 3, 4, 6, 11, 45, 47, 49, 51, 64, 68, 69, 86, 87, 88, 89, 91, 92, 93, 94, 96, 97, 100], "idx_flip": 1, "where": [1, 2, 3, 4, 6, 9, 11, 12, 15, 21, 35, 39, 42, 45, 46, 47, 48, 49, 50, 51, 52, 56, 57, 58, 60, 61, 63, 64, 65, 66, 68, 69, 70, 72, 73, 74, 76, 80, 84, 85, 87, 88, 89, 91, 92, 93, 94, 95, 96, 97, 99, 100], "pragma": 1, "cover": [1, 3, 79, 86], "choic": [1, 7, 42, 49, 87, 88, 92, 94], "replac": [1, 50, 55, 66, 81, 82, 85, 86, 87, 88, 91, 94, 98, 99], "max_trace_prob": 1, "min_trace_prob": 1, "1e": [1, 3, 66, 80, 81, 82], "05": [1, 9, 25, 29, 50, 64, 68, 74, 76, 84, 86, 87, 89, 93], "max_noise_r": 1, "99999": 1, "min_noise_r": 1, "valid_noise_matrix": [1, 81, 82, 89, 91, 92], "none": [1, 2, 3, 4, 6, 11, 12, 15, 17, 18, 19, 21, 22, 24, 25, 26, 27, 29, 30, 32, 33, 35, 36, 37, 39, 40, 41, 42, 44, 45, 46, 47, 48, 50, 51, 52, 55, 56, 57, 58, 59, 60, 63, 64, 65, 66, 68, 70, 72, 73, 76, 77, 81, 82, 87, 88, 89, 91, 92, 97], "frac_zero_noise_r": 1, "seed": [1, 2, 3, 9, 25, 38, 40, 47, 68, 80, 81, 82, 84, 86, 89, 91, 92, 98], "max_it": [1, 80, 85, 94, 99], "10000": [1, 39, 86, 87], "x": [1, 2, 3, 4, 9, 17, 18, 19, 21, 22, 24, 25, 27, 29, 30, 35, 36, 37, 40, 42, 44, 45, 47, 50, 51, 52, 55, 56, 58, 64, 65, 66, 68, 70, 80, 81, 82, 84, 86, 87, 88, 89, 91, 92, 94, 96, 98, 99], "diagon": [1, 3, 4, 42, 45, 51], "equal": [1, 3, 9, 11, 58, 63, 73, 95], "creat": [1, 2, 8, 15, 17, 36, 39, 40, 42, 51, 68, 78, 80, 84, 85, 87, 88, 97, 99, 100], "impli": [1, 9, 35, 57, 64], "float": [1, 2, 9, 17, 18, 19, 21, 22, 24, 25, 26, 27, 29, 30, 35, 36, 37, 38, 39, 40, 42, 44, 46, 47, 49, 50, 51, 56, 57, 58, 60, 63, 64, 68, 72, 76, 80, 81, 82, 89, 91, 92], "entri": [1, 3, 4, 35, 36, 40, 42, 44, 48, 49, 51, 56, 57, 58, 61, 84, 85, 89, 92, 93, 96, 98, 99], "maximum": [1, 9, 65, 73, 77, 97], "minimum": [1, 7, 9, 19, 42, 44, 58, 63, 76], "noise_r": 1, "non": [1, 2, 3, 4, 6, 8, 15, 25, 36, 40, 42, 63, 68, 81, 87, 89, 91, 93, 94], "default": [1, 2, 3, 4, 6, 9, 13, 15, 27, 29, 32, 35, 36, 37, 39, 40, 42, 44, 45, 47, 51, 55, 56, 57, 58, 60, 61, 63, 64, 65, 66, 68, 69, 70, 72, 73, 74, 76, 77, 81, 87, 88, 96, 97], "If": [1, 2, 3, 4, 9, 11, 12, 15, 25, 27, 33, 35, 36, 39, 40, 42, 44, 45, 47, 50, 51, 55, 56, 57, 58, 61, 63, 64, 65, 68, 69, 70, 72, 73, 76, 77, 78, 79, 80, 81, 84, 85, 87, 88, 89, 91, 92, 93, 94, 96, 97, 98, 99, 100], "have": [1, 2, 3, 4, 6, 9, 15, 20, 23, 25, 28, 35, 36, 38, 39, 40, 42, 45, 47, 51, 55, 56, 57, 58, 61, 63, 64, 65, 66, 68, 69, 73, 77, 78, 80, 81, 82, 84, 85, 86, 87, 88, 89, 91, 92, 93, 94, 96, 97, 98, 99, 100], "all": [1, 2, 3, 4, 6, 7, 9, 12, 13, 15, 21, 32, 35, 36, 39, 40, 41, 42, 45, 47, 48, 50, 51, 55, 56, 57, 58, 59, 60, 63, 64, 65, 66, 68, 70, 72, 73, 74, 76, 77, 78, 79, 80, 81, 84, 85, 86, 87, 88, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100], "necessari": [1, 2, 3, 6, 9, 11, 50, 81], "In": [1, 2, 3, 4, 9, 35, 36, 39, 40, 56, 57, 59, 80, 81, 82, 84, 85, 86, 87, 88, 89, 92, 93, 94, 95, 96, 97, 98, 99, 100], "particular": [1, 4, 5, 9, 12, 13, 15, 18, 19, 21, 25, 26, 27, 30, 36, 40, 51, 56, 60, 64, 68, 73, 77, 78, 80, 82, 85, 87, 91, 92, 94, 96, 98, 99], "satisfi": [1, 3, 35], "requir": [1, 2, 4, 6, 7, 8, 9, 10, 11, 29, 34, 36, 37, 38, 39, 40, 42, 45, 51, 54, 55, 58, 65, 66, 68, 70, 78, 79, 80, 86, 87, 89, 95], "argument": [1, 2, 3, 4, 9, 15, 22, 26, 29, 30, 31, 36, 39, 40, 41, 42, 47, 52, 55, 56, 57, 58, 60, 63, 64, 65, 66, 68, 72, 73, 74, 76, 82, 85, 86, 87, 88, 92, 93, 96, 99, 100], "when": [1, 2, 3, 4, 9, 11, 13, 22, 25, 36, 40, 42, 45, 47, 51, 55, 58, 60, 61, 63, 65, 66, 68, 69, 81, 82, 84, 85, 88, 91, 95, 96, 97, 98, 99, 100], "The": [1, 2, 3, 4, 6, 7, 9, 11, 12, 13, 15, 17, 18, 19, 21, 22, 24, 25, 26, 27, 29, 30, 31, 32, 33, 35, 36, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 51, 55, 56, 57, 58, 61, 63, 64, 65, 66, 68, 70, 73, 74, 76, 78, 80, 81, 82, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100], "rate": [1, 2, 3, 9, 37, 51, 80, 100], "set": [1, 2, 3, 4, 8, 9, 11, 12, 15, 16, 17, 18, 19, 21, 22, 24, 25, 26, 27, 29, 30, 32, 35, 36, 39, 40, 42, 46, 47, 49, 51, 55, 56, 58, 61, 63, 64, 65, 66, 68, 70, 72, 73, 81, 82, 84, 85, 87, 91, 92, 94, 95, 96, 97, 98, 99, 100], "note": [1, 2, 3, 6, 7, 9, 11, 26, 30, 33, 36, 39, 40, 41, 42, 47, 51, 56, 61, 63, 64, 65, 66, 68, 69, 73, 79, 80, 81, 82, 84, 85, 86, 88, 89, 91, 92, 93, 94, 96, 97, 98, 99, 100], "you": [1, 2, 3, 4, 6, 9, 13, 15, 35, 36, 38, 39, 40, 42, 47, 54, 55, 56, 58, 61, 63, 64, 65, 66, 68, 69, 70, 73, 74, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100], "high": [1, 2, 15, 39, 42, 51, 63, 66, 68, 81, 82, 86, 88, 89, 93, 96, 97, 98, 99, 100], "mai": [1, 2, 3, 4, 9, 12, 20, 21, 23, 28, 31, 35, 36, 38, 39, 40, 42, 45, 47, 51, 56, 57, 61, 63, 64, 65, 66, 68, 70, 73, 77, 79, 81, 82, 84, 85, 86, 87, 88, 89, 91, 92, 93, 95, 96, 97, 99, 100], "imposs": [1, 9, 89], "also": [1, 2, 3, 4, 6, 9, 21, 33, 35, 36, 39, 40, 42, 47, 50, 55, 56, 65, 68, 73, 76, 77, 78, 80, 81, 82, 84, 85, 87, 88, 89, 91, 92, 93, 95, 96, 97, 98, 99, 100], "low": [1, 9, 51, 56, 78, 81, 82, 85, 89, 93, 97], "zero": [1, 3, 4, 36, 40, 44, 51, 52, 81, 88, 92, 93, 94], "forc": [1, 2, 3, 4, 40, 81, 100], "instead": [1, 2, 3, 9, 12, 15, 32, 35, 36, 39, 40, 42, 45, 51, 55, 56, 58, 60, 64, 65, 66, 68, 69, 72, 74, 76, 79, 80, 84, 85, 87, 88, 89, 92, 93, 94, 96, 97, 98, 99, 100], "onli": [1, 2, 3, 4, 6, 9, 15, 22, 25, 29, 35, 36, 39, 40, 41, 42, 44, 45, 50, 51, 52, 55, 56, 65, 66, 68, 70, 72, 76, 77, 78, 80, 81, 82, 85, 88, 91, 92, 93, 94, 95, 96, 97, 99, 100], "guarante": [1, 3, 4, 14, 20, 23, 28, 36, 38, 40, 43, 45, 54, 79], "produc": [1, 2, 4, 9, 15, 47, 56, 66, 68, 70, 72, 78, 80, 84, 85, 87, 88, 89, 91, 92, 93, 94, 95, 97, 98, 99, 100], "higher": [1, 4, 9, 35, 42, 44, 45, 47, 49, 56, 57, 68, 82, 85, 87, 93], "opposit": [1, 100], "occur": [1, 3, 9, 35, 50, 63, 81, 82, 87, 88, 94], "small": [1, 3, 9, 35, 39, 47, 51, 57, 64, 85, 86, 88, 92, 94, 99], "numpi": [1, 3, 4, 6, 9, 11, 17, 30, 31, 39, 40, 41, 47, 49, 50, 52, 55, 60, 63, 68, 69, 74, 76, 80, 81, 82, 84, 85, 86, 87, 88, 89, 91, 92, 93, 94, 96, 97, 98, 99, 100], "max": [1, 42, 65, 66, 82, 88, 94], "tri": [1, 36, 40, 95], "befor": [1, 2, 3, 36, 40, 49, 51, 65, 68, 73, 85, 87, 89, 91, 94, 96, 98, 99], "option": [1, 2, 3, 4, 6, 7, 8, 11, 12, 15, 22, 25, 29, 35, 36, 39, 40, 42, 45, 47, 50, 51, 52, 55, 56, 57, 58, 60, 61, 63, 64, 65, 66, 68, 70, 72, 73, 76, 77, 78, 80, 81, 82, 84, 87, 88, 89, 92, 96, 97, 98], "left": [1, 2, 42, 44, 49, 51, 58, 61, 64, 81, 82, 92, 93, 94, 97], "stochast": 1, "exceed": 1, "m": [1, 4, 36, 40, 46, 47, 56, 61, 63, 64, 65, 81, 82, 86, 91, 92, 93, 100], "max_prob": 1, "min_prob": 1, "dirichlet": 1, "ones": [1, 36, 40, 55, 87, 89, 97], "length": [1, 4, 11, 25, 26, 35, 37, 42, 51, 58, 61, 65, 66, 68, 70, 73, 77, 80, 92, 94, 97, 98, 100], "must": [1, 2, 3, 4, 6, 15, 35, 36, 37, 38, 40, 42, 45, 47, 48, 51, 54, 55, 56, 57, 58, 65, 66, 68, 70, 72, 73, 74, 76, 77, 80, 91, 95, 97, 100], "max_balls_per_bin": 1, "min_balls_per_bin": 1, "uniformli": 1, "integ": [1, 2, 3, 9, 11, 35, 39, 42, 48, 51, 52, 56, 58, 64, 70, 72, 73, 74, 76, 77, 80, 87, 91, 92, 93, 97, 98, 99, 100], "ball": [1, 86], "bin": [1, 3, 58, 81, 82, 94], "ensur": [1, 2, 9, 36, 40, 51, 52, 63, 66, 68, 80, 81, 82, 85, 87, 88, 89, 94, 95, 96, 98, 99], "most": [1, 3, 4, 6, 9, 15, 35, 39, 42, 47, 55, 56, 57, 58, 61, 63, 64, 65, 66, 69, 72, 76, 77, 78, 79, 80, 81, 82, 84, 85, 87, 89, 91, 92, 93, 94, 96, 97, 98, 99], "least": [1, 9, 17, 30, 35, 39, 56, 57, 63, 66, 76, 82, 87, 88, 91, 94, 97], "int_arrai": [1, 51], "can": [2, 3, 4, 6, 7, 8, 12, 13, 15, 32, 33, 35, 36, 37, 38, 39, 40, 42, 46, 47, 48, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 63, 64, 65, 66, 68, 69, 70, 73, 74, 77, 78, 79, 80, 81, 84, 85, 88, 92, 93, 94, 95, 96, 97, 98, 99, 100], "model": [2, 3, 4, 9, 15, 17, 29, 31, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 46, 50, 55, 56, 57, 58, 60, 61, 63, 64, 65, 66, 68, 69, 70, 72, 73, 74, 76, 77, 79, 81, 82, 86, 90, 95, 97, 100], "For": [2, 3, 4, 6, 8, 9, 10, 15, 21, 34, 35, 36, 39, 40, 42, 45, 47, 51, 55, 56, 57, 58, 60, 61, 63, 64, 65, 66, 68, 70, 72, 74, 76, 77, 78, 80, 82, 84, 86, 87, 88, 89, 91, 92, 93, 94, 95, 97, 98, 99, 100], "regular": [2, 3, 39, 55], "multi": [2, 3, 9, 31, 35, 36, 39, 40, 42, 46, 47, 48, 51, 52, 57, 58, 59, 60, 65, 66, 78, 87, 89, 90], "task": [2, 4, 6, 9, 10, 11, 13, 14, 15, 24, 29, 32, 35, 39, 45, 47, 48, 49, 51, 56, 58, 66, 68, 78, 80, 85, 86, 87, 89, 92, 94, 96, 97, 99, 100], "cleanlearn": [2, 3, 9, 22, 29, 36, 51, 55, 67, 68, 69, 78, 79, 96, 98, 99], "wrap": [2, 36, 40, 55, 65, 68, 78, 81, 82, 84, 85, 89, 96, 98, 99], "instanc": [2, 3, 4, 5, 6, 9, 12, 15, 17, 18, 19, 21, 22, 24, 25, 26, 27, 29, 30, 32, 36, 40, 47, 55, 64, 65, 68, 73, 80, 81, 82, 84, 85, 88, 89, 93, 98, 99], "sklearn": [2, 3, 4, 7, 9, 17, 30, 35, 40, 47, 51, 55, 65, 68, 69, 78, 80, 81, 82, 84, 85, 87, 88, 89, 91, 92, 94, 95, 96, 98, 99], "classifi": [2, 3, 40, 47, 51, 56, 59, 65, 66, 78, 79, 80, 84, 85, 87, 91, 92, 94, 95, 97, 98, 99, 100], "adher": [2, 40, 68], "estim": [2, 3, 4, 8, 12, 21, 35, 39, 40, 42, 45, 51, 56, 57, 58, 63, 65, 68, 70, 72, 76, 78, 79, 80, 81, 82, 84, 85, 87, 88, 90, 93, 94, 95, 96, 97, 100], "api": [2, 3, 13, 55, 61, 64, 65, 68, 79, 87, 96], "defin": [2, 3, 4, 6, 9, 13, 21, 35, 36, 37, 39, 40, 42, 66, 68, 70, 80, 81, 82, 84, 87, 91, 94, 100], "four": [2, 9, 86, 89, 100], "clf": [2, 3, 4, 47, 68, 78, 84, 87, 89, 92, 98], "fit": [2, 3, 4, 7, 9, 17, 38, 40, 54, 55, 65, 67, 68, 78, 81, 82, 84, 85, 87, 88, 89, 91, 92, 94, 95, 96, 98, 99, 100], "sample_weight": [2, 40, 68, 89], "predict_proba": [2, 4, 35, 38, 40, 47, 54, 55, 80, 81, 82, 84, 85, 87, 89, 91, 92, 94, 98], "predict": [2, 3, 4, 7, 9, 15, 21, 22, 24, 27, 29, 31, 33, 35, 38, 39, 40, 41, 42, 44, 45, 47, 48, 50, 51, 54, 55, 56, 57, 58, 60, 61, 63, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 76, 77, 78, 79, 86, 87, 89, 90, 94, 96, 97, 99, 100], "score": [2, 3, 4, 6, 9, 12, 17, 18, 19, 21, 22, 24, 25, 26, 27, 29, 30, 35, 39, 41, 42, 44, 47, 49, 56, 57, 58, 60, 61, 63, 64, 65, 66, 67, 68, 69, 72, 74, 76, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 94, 96, 98, 99], "data": [2, 3, 4, 6, 7, 8, 10, 12, 13, 14, 15, 17, 18, 19, 21, 22, 24, 25, 26, 27, 29, 30, 31, 32, 35, 37, 38, 39, 40, 41, 42, 47, 48, 51, 54, 55, 56, 57, 58, 59, 63, 65, 66, 67, 68, 73, 74, 75, 76, 77, 79, 83, 88, 90, 95, 99], "e": [2, 3, 4, 9, 11, 21, 31, 35, 36, 39, 40, 42, 45, 47, 48, 51, 52, 56, 57, 58, 59, 61, 64, 65, 66, 68, 70, 78, 80, 81, 82, 84, 85, 86, 87, 88, 89, 91, 92, 93, 94, 95, 96, 98, 99], "featur": [2, 3, 4, 7, 9, 15, 17, 18, 22, 25, 26, 27, 29, 30, 47, 51, 65, 68, 78, 81, 82, 84, 85, 87, 89, 91, 92, 96, 98], "element": [2, 3, 4, 35, 41, 42, 44, 51, 56, 58, 66, 73, 74, 76, 80, 85, 87, 99, 100], "first": [2, 4, 9, 16, 25, 26, 35, 39, 47, 51, 56, 57, 61, 64, 66, 68, 80, 81, 84, 87, 88, 91, 92, 93, 94, 96, 97, 98, 99, 100], "index": [2, 9, 25, 35, 42, 50, 51, 52, 57, 66, 68, 73, 76, 77, 80, 81, 82, 84, 86, 87, 88, 89, 91, 92, 93, 94, 96, 97, 99, 100], "should": [2, 3, 4, 6, 9, 13, 21, 25, 30, 31, 35, 36, 39, 40, 42, 44, 45, 47, 49, 50, 51, 55, 56, 57, 60, 61, 63, 64, 65, 66, 68, 69, 73, 74, 76, 77, 80, 81, 82, 84, 85, 88, 89, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100], "correspond": [2, 3, 4, 9, 12, 13, 15, 17, 18, 19, 21, 22, 24, 25, 26, 27, 29, 30, 33, 35, 36, 39, 40, 41, 42, 44, 45, 47, 50, 51, 56, 57, 58, 60, 61, 63, 64, 65, 66, 68, 70, 73, 74, 76, 77, 80, 81, 82, 84, 85, 86, 87, 88, 89, 91, 92, 93, 94, 96, 97, 98, 99, 100], "differ": [2, 4, 6, 9, 12, 14, 20, 23, 25, 26, 28, 35, 36, 38, 39, 40, 42, 43, 47, 51, 52, 54, 56, 61, 63, 65, 68, 80, 81, 82, 84, 85, 88, 89, 91, 92, 94, 95, 96, 98], "sampl": [2, 3, 4, 7, 9, 15, 19, 42, 44, 47, 58, 61, 64, 66, 68, 69, 78, 79, 86, 87, 89, 90, 92, 93, 96, 97, 99, 100], "size": [2, 9, 30, 36, 39, 40, 42, 47, 58, 63, 64, 68, 70, 72, 84, 87, 88, 89, 91, 92, 93, 95, 97, 99], "here": [2, 4, 6, 9, 13, 39, 42, 45, 55, 56, 57, 58, 60, 61, 64, 65, 76, 78, 79, 80, 81, 82, 84, 85, 87, 88, 89, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100], "re": [2, 4, 36, 40, 50, 56, 68, 78, 80, 81, 84, 85, 87, 96, 97, 98, 99, 100], "weight": [2, 9, 36, 37, 40, 47, 56, 63, 66, 68, 80, 81, 82, 85, 99], "loss": [2, 37, 55, 66, 68, 88], "while": [2, 3, 9, 36, 39, 40, 46, 47, 51, 68, 78, 87, 88, 89, 91, 92, 96], "train": [2, 3, 4, 9, 15, 17, 31, 36, 37, 38, 40, 47, 51, 55, 56, 61, 64, 65, 68, 69, 79, 81, 82, 84, 85, 86, 88, 89, 91, 92, 93, 95, 97, 100], "support": [2, 3, 4, 11, 13, 32, 33, 39, 41, 47, 51, 52, 65, 66, 76, 78, 79, 80, 81, 82, 87, 88], "your": [2, 3, 4, 8, 9, 15, 35, 36, 38, 39, 40, 42, 47, 51, 54, 55, 56, 57, 58, 60, 65, 66, 68, 69, 70, 72, 73, 79, 80, 84, 86, 88, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100], "recommend": [2, 4, 6, 9, 12, 15, 39, 42, 56, 81, 82, 87, 88, 95, 96], "furthermor": 2, "correctli": [2, 3, 9, 35, 36, 40, 42, 45, 52, 57, 58, 63, 64, 68, 70, 85, 87, 92, 93, 96, 97, 99], "clonabl": [2, 68], "via": [2, 4, 6, 9, 12, 15, 17, 21, 35, 37, 39, 40, 47, 51, 56, 61, 64, 65, 66, 68, 69, 72, 76, 80, 81, 82, 84, 85, 86, 87, 88, 92, 93, 94, 95, 96, 97, 98, 99, 100], "base": [2, 3, 4, 6, 9, 11, 12, 15, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 29, 30, 31, 32, 33, 36, 39, 40, 41, 42, 45, 46, 47, 49, 50, 51, 52, 55, 56, 57, 58, 60, 63, 65, 66, 68, 69, 72, 74, 76, 80, 81, 82, 84, 85, 86, 88, 89, 91, 92, 93, 94, 96, 97, 98, 100], "clone": [2, 68, 92], "intern": [2, 3, 6, 9, 10, 11, 12, 13, 15, 17, 18, 19, 21, 22, 24, 25, 26, 27, 29, 30, 31, 32, 33, 39, 44, 45, 46, 47, 48, 49, 50, 51, 52, 60, 64, 68, 74, 79, 80, 81, 87, 89, 91, 92, 93, 94, 96, 100], "multipl": [2, 3, 4, 11, 12, 33, 35, 42, 50, 56, 57, 58, 60, 63, 64, 68, 78, 81, 82, 87, 88, 90, 92, 93, 96], "g": [2, 3, 4, 9, 11, 21, 31, 35, 36, 40, 42, 48, 51, 58, 59, 61, 64, 65, 66, 68, 78, 80, 81, 82, 84, 85, 86, 87, 88, 89, 91, 92, 93, 94, 95, 96, 98, 99], "manual": [2, 68, 80, 87, 94, 95, 96, 98, 99, 100], "pytorch": [2, 36, 37, 40, 68, 78, 80, 87, 90, 92, 97], "call": [2, 3, 4, 5, 9, 12, 13, 17, 18, 19, 21, 22, 24, 25, 26, 27, 29, 30, 36, 40, 47, 51, 55, 65, 68, 80, 81, 82, 85, 87, 89, 92, 94, 95, 96, 97, 99, 100], "__init__": [2, 37, 68, 88], "independ": [2, 3, 9, 57, 68, 85, 95, 96, 100], "compat": [2, 36, 39, 40, 55, 68, 69, 72, 76, 78, 87, 95, 96, 98, 99], "neural": [2, 37, 55, 65, 68, 80, 87, 88, 92, 94, 96], "network": [2, 36, 37, 40, 55, 65, 68, 80, 85, 87, 88, 92, 94, 96, 99], "typic": [2, 36, 40, 65, 68, 80, 82, 84, 85, 88, 94, 95, 98, 99], "initi": [2, 3, 12, 17, 36, 40, 56, 68, 85, 87, 98], "insid": [2, 40, 68, 87, 89], "There": [2, 3, 6, 78, 89, 91], "two": [2, 3, 9, 17, 25, 35, 36, 39, 40, 48, 51, 61, 63, 64, 79, 81, 82, 84, 85, 87, 88, 89, 92, 96, 97, 99, 100], "new": [2, 6, 13, 21, 36, 39, 40, 46, 50, 51, 56, 68, 80, 81, 85, 86, 87, 94, 95, 99, 100], "notion": 2, "confid": [2, 3, 9, 21, 35, 39, 42, 45, 47, 51, 56, 57, 58, 61, 63, 64, 65, 66, 68, 72, 76, 78, 84, 85, 88, 89, 91, 92, 93, 95, 97, 98, 100], "packag": [2, 4, 6, 8, 9, 10, 14, 34, 38, 42, 43, 51, 54, 61, 64, 68, 78, 80, 81, 82, 84, 85, 86, 87, 88, 89, 91, 92, 93, 94, 96, 97, 98, 99, 100], "prune": [2, 3, 42, 58, 68, 79, 93], "everyth": [2, 64, 89], "els": [2, 64, 81, 86, 87, 88, 91, 92, 93], "mathemat": [2, 3, 9, 45, 92], "keep": [2, 12, 13, 51, 78, 81, 86, 87, 97], "belong": [2, 3, 9, 35, 42, 44, 45, 57, 58, 59, 60, 65, 66, 70, 74, 76, 77, 82, 88, 89, 92, 94, 97, 100], "2": [2, 3, 4, 6, 11, 17, 18, 19, 21, 22, 24, 25, 26, 27, 29, 30, 35, 36, 37, 39, 40, 42, 44, 45, 46, 47, 48, 49, 50, 51, 55, 57, 58, 60, 61, 64, 65, 66, 68, 69, 73, 74, 76, 77, 86, 87, 95], "error": [2, 3, 4, 9, 36, 40, 41, 42, 44, 45, 51, 57, 58, 60, 61, 63, 64, 66, 68, 70, 72, 73, 76, 79, 80, 81, 82, 84, 85, 86, 90, 98], "erron": [2, 3, 35, 42, 45, 51, 57, 58, 66, 68, 69, 70, 94, 96], "import": [2, 3, 4, 6, 7, 9, 11, 12, 13, 17, 18, 19, 21, 22, 24, 25, 27, 29, 30, 32, 35, 39, 41, 47, 49, 50, 56, 60, 63, 68, 69, 74, 76, 77, 78, 84, 85, 87, 92, 93, 94, 96, 97, 98, 99, 100], "linear_model": [2, 4, 35, 51, 68, 78, 80, 81, 82, 85, 87, 89, 91, 94, 99], "logisticregress": [2, 3, 4, 35, 51, 78, 80, 81, 82, 85, 87, 89, 91, 94, 99], "logreg": 2, "cl": [2, 13, 29, 68, 78, 87, 89, 96, 98, 99], "pass": [2, 3, 4, 7, 9, 11, 12, 13, 15, 22, 29, 32, 36, 39, 40, 42, 46, 47, 51, 55, 56, 58, 65, 66, 68, 74, 78, 80, 81, 82, 85, 86, 87, 89, 91, 93, 94, 96, 99], "x_train": [2, 81, 82, 89, 91, 92, 96, 98], "labels_maybe_with_error": 2, "had": [2, 3, 68, 93], "issu": [2, 3, 4, 5, 7, 10, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 35, 36, 38, 39, 40, 41, 42, 54, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 83, 90, 91, 95, 96, 99], "pred": [2, 42, 51, 95, 96, 98, 99], "x_test": [2, 81, 82, 89, 92, 96, 98], "might": [2, 4, 56, 68, 73, 81, 82, 87, 88, 93, 98, 99], "case": [2, 3, 12, 35, 47, 56, 68, 80, 81, 82, 84, 86, 87, 88, 89, 94, 96, 98, 99, 100], "standard": [2, 3, 4, 29, 35, 42, 55, 57, 58, 60, 66, 68, 78, 81, 82, 84, 86, 89, 93, 98], "adapt": [2, 36, 38, 51, 54, 68, 94], "skorch": [2, 68, 78, 87], "kera": [2, 54, 61, 64, 68, 78, 87, 93], "scikera": [2, 55, 68, 87], "open": [2, 39, 86, 93, 100], "doesn": [2, 68, 78], "t": [2, 3, 6, 9, 16, 26, 36, 37, 39, 40, 41, 42, 47, 49, 50, 60, 65, 66, 68, 74, 76, 77, 78, 81, 82, 84, 85, 86, 88, 89, 92, 93, 96, 100], "alreadi": [2, 4, 9, 15, 36, 39, 40, 45, 55, 56, 68, 78, 80, 81, 82, 84, 85, 86, 87, 88, 89, 91, 93, 94, 96, 98, 99], "exist": [2, 4, 9, 11, 17, 36, 39, 40, 50, 55, 61, 63, 65, 68, 78, 79, 81, 82, 85, 91, 99, 100], "made": [2, 4, 15, 36, 40, 68, 85, 87, 88, 91, 93, 95, 96, 98, 99], "easi": [2, 45, 68, 81, 82, 86, 87, 89, 92], "inherit": [2, 6, 37, 68], "baseestim": [2, 40, 68], "yourmodel": [2, 68], "def": [2, 6, 13, 36, 40, 55, 68, 80, 81, 82, 86, 87, 88, 89, 91, 92, 94, 96, 99, 100], "self": [2, 3, 4, 6, 9, 11, 12, 13, 15, 30, 36, 37, 39, 40, 42, 47, 65, 66, 68, 81, 85, 86, 88, 92, 97, 98, 99, 100], "refer": [2, 9, 15, 36, 40, 41, 57, 58, 60, 61, 63, 64, 68, 72, 73, 81, 82, 84, 85, 87, 88, 89, 92, 95, 96], "origin": [2, 4, 9, 40, 41, 42, 50, 51, 55, 57, 58, 61, 64, 65, 68, 69, 72, 74, 76, 81, 84, 85, 87, 88, 89, 93, 94, 96, 98, 99, 100], "total": [2, 3, 35, 39, 51, 57, 77, 87, 88, 97], "state": [2, 3, 4, 36, 37, 40, 46, 68, 89, 92, 93, 100], "art": [2, 37, 89, 92], "northcutt": [2, 3, 35, 65, 66], "et": [2, 3, 35, 37, 65, 66], "al": [2, 3, 35, 37, 65, 66], "2021": [2, 3, 35, 65, 66], "weak": [2, 64], "supervis": [2, 9, 81, 82, 87, 91], "find": [2, 4, 9, 12, 13, 15, 18, 19, 21, 22, 24, 25, 26, 27, 30, 31, 35, 36, 38, 39, 40, 41, 42, 46, 50, 51, 54, 61, 64, 65, 66, 68, 70, 74, 76, 79, 81, 90, 95], "uncertainti": [2, 9, 44, 65, 68, 87, 94, 96], "It": [2, 3, 4, 6, 9, 11, 12, 15, 21, 26, 29, 31, 32, 33, 36, 40, 42, 45, 47, 56, 63, 64, 68, 78, 81, 82, 85, 87, 88, 89, 92, 95, 99], "work": [2, 3, 6, 9, 11, 29, 35, 36, 39, 40, 42, 45, 50, 51, 52, 55, 56, 66, 68, 78, 79, 81, 82, 86, 94, 96, 99], "includ": [2, 3, 4, 6, 9, 12, 17, 18, 19, 21, 22, 24, 25, 27, 29, 30, 32, 35, 36, 38, 39, 40, 50, 51, 54, 56, 57, 60, 61, 65, 66, 68, 72, 73, 74, 76, 78, 79, 81, 82, 84, 85, 87, 88, 89, 92, 93, 94, 100], "deep": [2, 38, 40, 54, 55, 68, 85], "see": [2, 3, 4, 6, 9, 12, 13, 32, 35, 36, 39, 40, 41, 42, 47, 51, 55, 57, 58, 60, 61, 64, 65, 66, 68, 74, 76, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 91, 92, 93, 94, 96, 97, 98, 99, 100], "subfield": 2, "theori": [2, 89], "machin": [2, 4, 13, 15, 32, 38, 54, 68, 81, 82, 86, 91], "across": [2, 3, 4, 6, 9, 12, 21, 35, 39, 47, 57, 64, 65, 81, 82, 84, 85, 86, 87, 88, 89, 92, 93, 95, 96], "varieti": [2, 87, 98, 99], "like": [2, 3, 4, 5, 6, 9, 13, 31, 35, 36, 39, 40, 42, 45, 51, 55, 56, 57, 60, 61, 63, 66, 68, 69, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 84, 85, 87, 89, 91, 92, 93, 94, 96, 97, 98, 99, 100], "pu": [2, 51], "input": [2, 3, 4, 9, 15, 25, 35, 36, 39, 40, 45, 47, 50, 51, 52, 55, 64, 68, 78, 79, 80, 82, 85, 86, 87, 88, 89, 91, 92, 93, 96, 97, 99, 100], "discret": [2, 33, 42, 45, 51, 65, 66, 70, 72, 73], "vector": [2, 3, 4, 9, 15, 42, 45, 47, 48, 51, 65, 66, 78, 80, 81, 82, 84, 85, 88, 89, 92, 93, 94, 97, 99, 100], "would": [2, 3, 4, 36, 39, 40, 42, 51, 58, 68, 78, 81, 87, 88, 89, 94, 96, 99, 100], "obtain": [2, 4, 7, 9, 15, 42, 56, 58, 61, 64, 66, 69, 80, 82, 85, 87, 91, 93, 95, 97, 100], "been": [2, 35, 42, 45, 50, 51, 56, 57, 61, 63, 65, 66, 68, 80, 81, 84, 87, 89, 91, 92, 93, 94, 97, 100], "dure": [2, 9, 15, 65, 68, 80, 84, 85, 87, 89, 92, 95, 96, 98, 99, 100], "denot": [2, 3, 45, 47, 51, 58, 65, 66, 76], "tild": 2, "paper": [2, 9, 56, 65, 74, 76, 86, 89, 91, 94, 96, 100], "cv_n_fold": [2, 3, 68, 99], "5": [2, 3, 4, 7, 17, 18, 19, 21, 22, 24, 25, 27, 29, 30, 32, 35, 40, 42, 44, 46, 47, 51, 56, 57, 60, 61, 64, 68, 69, 76, 81, 85, 86, 87, 92, 93, 94, 95, 97, 99, 100], "converge_latent_estim": [2, 3], "pulearn": [2, 51], "find_label_issues_kwarg": [2, 9, 68, 79, 87, 89], "label_quality_scores_kwarg": [2, 9], "low_memori": [2, 58, 74, 87], "clean": [2, 63, 66, 68, 69, 78, 81, 82, 86, 96, 98, 99], "even": [2, 3, 6, 35, 39, 44, 45, 51, 68, 80, 87, 89, 91, 92, 93], "messi": [2, 68, 89], "ridden": [2, 68], "autom": [2, 68, 78, 82, 86, 87], "robust": [2, 45, 68, 82, 87], "prone": [2, 68], "out": [2, 3, 4, 9, 15, 27, 36, 40, 42, 47, 55, 58, 59, 61, 64, 65, 66, 68, 69, 77, 78, 79, 86, 87, 89, 90, 92, 93, 94, 96, 97, 99, 100], "current": [2, 3, 6, 9, 12, 13, 21, 36, 40, 41, 42, 47, 56, 63, 68, 81, 82, 87, 91, 93], "intend": [2, 12, 13, 14, 15, 31, 32, 33, 43, 56, 72, 76, 80, 81, 82, 85, 89], "A": [2, 3, 4, 6, 9, 11, 12, 13, 17, 18, 19, 21, 22, 24, 25, 26, 27, 29, 30, 31, 32, 35, 36, 37, 40, 42, 45, 46, 47, 48, 49, 50, 51, 55, 56, 57, 60, 63, 64, 65, 66, 68, 70, 72, 73, 77, 79, 80, 81, 84, 85, 86, 87, 88, 89, 91, 93, 95, 98, 99, 100], "follow": [2, 3, 9, 13, 29, 33, 35, 36, 39, 40, 47, 49, 56, 57, 61, 63, 64, 65, 68, 80, 81, 82, 84, 85, 86, 87, 88, 89, 91, 92, 93, 94, 96, 97, 98, 99, 100], "experiment": [2, 36, 37, 39, 40, 41, 58, 79, 87], "wrapper": [2, 55, 80, 96, 98, 99], "around": [2, 63, 81, 82, 93, 94, 100], "fasttext": [2, 54], "store": [2, 4, 9, 11, 12, 17, 18, 19, 21, 22, 24, 25, 26, 27, 29, 30, 32, 36, 39, 40, 65, 68, 84, 85, 86, 87, 97, 98, 99, 100], "along": [2, 47, 58, 76, 81, 82, 87, 88, 94], "dimens": [2, 51, 70, 73, 87, 88, 94, 97], "select": [2, 8, 9, 25, 56, 66, 87, 88, 91, 94], "split": [2, 3, 4, 9, 11, 39, 47, 50, 51, 68, 80, 81, 82, 84, 85, 86, 88, 89, 92, 95, 98, 100], "cross": [2, 3, 9, 35, 42, 45, 46, 47, 58, 61, 64, 66, 68, 69, 79, 80, 81, 82, 84, 85, 86, 87, 89, 90, 92, 93, 96, 97, 98, 99, 100], "fold": [2, 3, 35, 42, 45, 68, 80, 84, 86, 87, 93, 97, 98], "By": [2, 35, 57, 58, 68, 81, 87, 97], "need": [2, 3, 9, 35, 36, 39, 40, 42, 57, 58, 60, 65, 68, 78, 80, 81, 82, 85, 87, 89, 91, 92, 93, 97, 99], "holdout": [2, 3, 68], "comput": [2, 3, 4, 6, 7, 9, 18, 19, 21, 22, 25, 26, 27, 30, 35, 36, 37, 39, 40, 42, 44, 45, 46, 47, 51, 56, 57, 58, 60, 63, 64, 65, 66, 68, 69, 70, 72, 78, 79, 81, 82, 86, 89, 90, 93, 94, 96, 97, 99], "them": [2, 3, 4, 6, 8, 9, 10, 11, 26, 31, 34, 36, 38, 39, 40, 42, 54, 56, 65, 68, 79, 81, 82, 84, 85, 87, 88, 91, 92, 94, 96, 97, 98, 99, 100], "numer": [2, 3, 4, 9, 12, 21, 29, 33, 47, 63, 65, 68, 73, 78, 79, 80, 81, 82, 83, 85, 88, 89, 91, 92, 94, 96, 98, 99], "consist": [2, 3, 36, 40, 51, 56, 97, 100], "latent": [2, 3, 45], "thei": [2, 3, 4, 14, 20, 23, 25, 28, 36, 37, 38, 40, 42, 43, 49, 51, 55, 58, 63, 66, 68, 69, 72, 76, 78, 80, 81, 82, 84, 85, 87, 88, 89, 91, 94, 96, 99, 100], "relat": [2, 3, 12, 18, 19, 25, 26, 27, 30, 45, 51, 57, 68, 82, 85], "close": [2, 3, 9, 39, 45, 65, 80, 81, 82, 84, 85, 87, 88, 89, 93], "form": [2, 3, 9, 36, 37, 40, 45, 50, 51, 66, 68, 87], "equival": [2, 3, 36, 40, 45, 65, 94, 96], "iter": [2, 3, 35, 36, 40, 42, 51, 57, 58, 68, 87, 91, 97], "enforc": [2, 36, 40, 51], "perfectli": [2, 35, 57, 89], "certain": [2, 3, 4, 36, 40, 55, 64, 68, 81, 82, 86, 93, 94], "dict": [2, 3, 4, 9, 11, 12, 13, 15, 17, 18, 19, 21, 22, 24, 25, 26, 27, 29, 30, 35, 36, 39, 40, 42, 46, 47, 51, 55, 56, 57, 58, 60, 61, 63, 64, 65, 66, 68, 76, 81, 82, 87, 88, 100], "keyword": [2, 3, 4, 9, 15, 22, 26, 29, 36, 39, 40, 42, 44, 47, 50, 55, 56, 58, 65, 66, 68, 74, 76, 81], "filter": [2, 3, 9, 39, 41, 50, 57, 59, 60, 62, 64, 71, 72, 73, 75, 76, 77, 78, 79, 80, 82, 85, 86, 87, 88, 92, 93, 96, 97, 98, 99, 100], "find_label_issu": [2, 3, 9, 29, 38, 39, 41, 42, 57, 58, 59, 60, 61, 62, 63, 64, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 87, 92, 93, 96, 97, 98, 99, 100], "particularli": [2, 78, 91, 94], "filter_bi": [2, 3, 39, 42, 58, 79, 87], "frac_nois": [2, 42, 58, 74, 87], "min_examples_per_class": [2, 42, 58, 82, 87, 89], "impact": [2, 9, 81, 82, 88], "ml": [2, 4, 9, 14, 68, 78, 81, 82, 84, 85, 88, 91, 92, 96, 98, 99], "accuraci": [2, 37, 66, 80, 87, 88, 89, 91, 94, 96, 97, 98, 99], "n_job": [2, 39, 42, 58, 70, 72, 74, 87, 94, 97], "disabl": [2, 36, 40, 42, 94], "process": [2, 3, 6, 12, 15, 31, 36, 39, 40, 42, 50, 56, 58, 64, 70, 72, 74, 80, 81, 87, 91, 95, 99], "caus": [2, 42, 47, 81, 82, 87], "rank": [2, 3, 9, 35, 39, 41, 42, 47, 57, 58, 59, 61, 62, 64, 65, 67, 71, 73, 74, 75, 77, 78, 79, 81, 82, 86, 87, 92, 93, 94, 97, 98, 99, 100], "get_label_quality_scor": [2, 38, 39, 41, 42, 43, 47, 56, 58, 59, 60, 61, 62, 63, 66, 67, 69, 71, 72, 74, 75, 76, 79, 89, 92, 93, 97, 100], "adjust_pred_prob": [2, 9, 60, 65, 66, 89], "control": [2, 4, 8, 9, 15, 39, 42, 56, 64, 65, 68, 74, 76, 81, 82, 86, 87], "how": [2, 3, 4, 9, 11, 12, 13, 15, 21, 35, 36, 37, 39, 40, 45, 51, 56, 57, 60, 61, 63, 65, 66, 68, 72, 76, 78, 81, 82, 84, 85, 86, 88, 93, 94, 95, 96, 97, 98, 99], "much": [2, 9, 35, 39, 42, 68, 87, 89, 91, 94], "output": [2, 3, 4, 9, 15, 31, 36, 37, 40, 45, 51, 55, 56, 57, 61, 63, 64, 65, 68, 72, 73, 76, 77, 78, 79, 80, 81, 85, 86, 87, 88, 93, 94, 95, 96, 99], "print": [2, 4, 6, 17, 18, 19, 21, 22, 24, 25, 26, 27, 29, 30, 32, 33, 35, 36, 39, 40, 42, 51, 56, 57, 58, 63, 65, 66, 68, 70, 72, 73, 77, 79, 80, 82, 85, 86, 87, 88, 89, 91, 92, 93, 94, 96, 97, 98, 99, 100], "suppress": [2, 39, 56, 63, 65, 66, 68, 70, 72, 73, 97, 100], "statement": [2, 39, 56, 63, 65, 66, 68, 70, 72, 73], "big": [2, 39, 58, 64, 68, 89], "limit": [2, 4, 15, 39, 58, 93, 97, 100], "memori": [2, 36, 39, 40, 58, 64, 70, 72, 81, 97], "label_issues_batch": [2, 38, 58, 87], "find_label_issues_batch": [2, 38, 39, 58, 87], "pred_prob": [2, 3, 4, 7, 9, 15, 22, 24, 25, 27, 30, 31, 35, 39, 41, 42, 44, 45, 46, 47, 48, 51, 52, 56, 57, 58, 60, 61, 64, 65, 66, 70, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 91, 92, 93, 96, 98, 99], "threshold": [2, 3, 6, 9, 17, 18, 19, 21, 27, 29, 30, 39, 63, 64, 65, 66, 72, 76, 81, 93, 94, 97, 100], "inverse_noise_matrix": [2, 3, 9, 45, 51, 79, 89], "label_issu": [2, 39, 42, 58, 61, 68, 70, 79, 80, 85, 87, 88, 89, 92, 96, 98, 99], "clf_kwarg": [2, 3, 9, 68], "clf_final_kwarg": [2, 68], "validation_func": [2, 3, 9], "correct": [2, 4, 9, 35, 39, 42, 44, 56, 57, 58, 60, 61, 63, 64, 66, 68, 69, 72, 76, 78, 80, 84, 85, 88, 89, 91, 93, 95, 96], "result": [2, 3, 9, 12, 15, 17, 18, 19, 21, 22, 24, 25, 26, 27, 29, 30, 36, 39, 40, 42, 44, 49, 51, 58, 60, 61, 64, 66, 68, 69, 70, 72, 76, 80, 81, 82, 84, 85, 87, 88, 89, 91, 92, 96, 97, 98, 99, 100], "identifi": [2, 3, 4, 6, 9, 11, 15, 26, 32, 35, 39, 41, 42, 58, 61, 64, 66, 68, 69, 70, 73, 74, 76, 77, 78, 80, 81, 82, 84, 85, 86, 88, 89, 92, 94, 96, 97, 98, 99, 100], "final": [2, 9, 68, 84, 93, 95, 96, 98], "remain": [2, 68, 79, 88, 92, 96, 98, 99, 100], "datasetlik": [2, 51, 68], "beyond": [2, 4, 6, 8, 10, 34, 78, 96, 97], "pd": [2, 3, 4, 6, 12, 17, 18, 19, 21, 22, 24, 25, 27, 29, 30, 35, 46, 55, 56, 57, 68, 76, 80, 81, 82, 84, 85, 87, 89, 91, 96, 98, 99, 100], "datafram": [2, 3, 4, 6, 11, 12, 17, 18, 19, 21, 22, 24, 25, 26, 27, 29, 30, 35, 39, 46, 51, 52, 55, 56, 57, 68, 73, 77, 79, 80, 81, 82, 84, 85, 87, 88, 89, 91, 96, 97, 99, 100], "scipi": [2, 4, 12, 51], "spars": [2, 4, 9, 12, 15, 17, 30, 51, 52, 84], "csr_matrix": [2, 4, 12, 15, 17, 30], "torch": [2, 36, 37, 40, 80, 85, 86, 88, 94, 99], "util": [2, 4, 9, 15, 32, 36, 37, 40, 43, 56, 61, 64, 68, 78, 79, 80, 81, 82, 87, 88, 89, 94], "tensorflow": [2, 51, 55, 78, 80, 87], "object": [2, 4, 9, 11, 12, 15, 31, 32, 36, 37, 39, 40, 47, 51, 52, 55, 58, 61, 62, 63, 64, 65, 68, 76, 78, 80, 82, 84, 88, 89, 90, 92, 96, 99], "list": [2, 3, 4, 11, 13, 17, 18, 19, 21, 22, 24, 25, 26, 27, 29, 30, 35, 36, 37, 39, 40, 41, 42, 48, 50, 51, 52, 55, 56, 57, 58, 60, 61, 63, 64, 65, 66, 68, 72, 73, 74, 76, 77, 79, 80, 81, 82, 86, 87, 88, 89, 92, 93, 96, 99, 100], "index_list": 2, "subset": [2, 3, 4, 15, 35, 39, 42, 51, 66, 73, 77, 80, 84, 85, 87, 88, 92, 93, 94, 95, 96, 98, 99, 100], "wa": [2, 3, 11, 13, 39, 51, 56, 57, 63, 65, 77, 80, 81, 82, 84, 85, 87, 89, 92, 93, 95, 97, 98, 99, 100], "abl": [2, 3, 9, 68, 80, 87, 89, 91, 92], "format": [2, 3, 4, 9, 11, 31, 36, 39, 40, 42, 45, 46, 47, 48, 51, 52, 55, 56, 57, 58, 61, 64, 65, 66, 68, 70, 72, 73, 76, 77, 80, 81, 82, 84, 86, 88, 91, 96, 97, 98, 100], "make": [2, 3, 4, 17, 36, 39, 40, 47, 55, 78, 80, 81, 82, 84, 85, 86, 87, 88, 89, 91, 92, 93, 94, 96, 98, 99], "sure": [2, 4, 39, 42, 47, 80, 81, 82, 84, 85, 86, 88, 91, 92, 93, 94, 96, 98, 99], "shuffl": [2, 9, 51, 80, 85, 88, 92, 94], "ha": [2, 3, 4, 5, 9, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 29, 30, 36, 40, 41, 45, 47, 50, 51, 56, 61, 63, 68, 74, 76, 77, 78, 80, 81, 82, 84, 85, 89, 91, 92, 93, 94, 95, 96, 98, 99, 100], "batch": [2, 39, 51, 55, 56, 70, 72, 87, 88, 94], "order": [2, 4, 9, 33, 35, 36, 40, 41, 42, 45, 46, 47, 51, 56, 57, 58, 61, 64, 65, 66, 70, 73, 74, 76, 77, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 92, 93, 96, 97, 99, 100], "destroi": [2, 51], "oper": [2, 36, 39, 40, 51, 55, 66, 78, 85, 87, 94, 98, 99], "eg": [2, 4, 9, 51, 61, 64, 81, 82, 87], "repeat": [2, 51, 56, 91, 94], "appli": [2, 33, 36, 38, 40, 42, 47, 48, 50, 51, 60, 65, 74, 80, 81, 82, 84, 87, 88, 91, 92, 94, 95, 96, 97, 98, 99], "array_lik": [2, 3, 35, 42, 51, 58, 65, 69], "some": [2, 3, 4, 9, 13, 21, 35, 36, 38, 40, 42, 45, 50, 51, 54, 56, 57, 58, 60, 61, 64, 65, 66, 68, 70, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 91, 92, 93, 95, 96, 97, 98, 99, 100], "seri": [2, 3, 39, 51, 52, 68, 76, 87], "row": [2, 3, 4, 9, 12, 26, 31, 35, 39, 42, 44, 45, 51, 56, 57, 58, 60, 65, 66, 68, 73, 74, 76, 77, 80, 81, 84, 85, 86, 87, 88, 91, 92, 94, 98, 100], "rather": [2, 3, 4, 25, 35, 51, 55, 56, 63, 72, 76, 91, 95, 96, 97, 99, 100], "leav": [2, 42], "per": [2, 3, 4, 6, 12, 35, 39, 42, 47, 50, 56, 57, 58, 60, 63, 64, 66, 69, 70, 72, 76, 82, 87, 93, 100], "determin": [2, 3, 9, 11, 15, 21, 25, 29, 35, 39, 42, 47, 51, 56, 58, 61, 63, 66, 72, 76, 81, 87, 91, 93, 94, 96], "cutoff": [2, 3, 94], "consid": [2, 3, 4, 9, 12, 15, 22, 25, 27, 30, 35, 36, 40, 42, 51, 56, 63, 65, 66, 69, 72, 76, 80, 84, 85, 87, 88, 89, 93, 94, 95, 96, 97, 98, 99], "section": [2, 3, 6, 9, 79, 84, 88, 93], "3": [2, 3, 4, 6, 9, 33, 35, 36, 40, 42, 45, 46, 47, 48, 49, 50, 51, 55, 58, 65, 66, 68, 69, 74, 76, 86, 87, 95], "equat": [2, 3, 45], "advanc": [2, 3, 4, 8, 9, 15, 63, 65, 76, 79, 82, 83, 89], "user": [2, 3, 4, 9, 13, 15, 26, 31, 32, 33, 36, 40, 42, 63, 65, 66, 68, 72, 76, 89], "specifi": [2, 3, 4, 7, 9, 12, 13, 15, 17, 30, 32, 36, 39, 40, 42, 47, 50, 56, 57, 58, 61, 63, 65, 66, 68, 69, 77, 79, 80, 82, 85, 88, 91, 93, 96, 99], "automat": [2, 3, 4, 25, 35, 78, 84, 85, 86, 87, 88, 91, 92, 93, 96, 97, 98, 99, 100], "greater": [2, 3, 4, 6, 8, 9, 27, 39, 51, 63, 82, 86, 87, 100], "count": [2, 21, 25, 35, 39, 42, 45, 51, 57, 58, 64, 79, 87, 88, 93], "observ": [2, 3, 45, 80, 81, 82, 91, 94, 96], "mislabel": [2, 9, 35, 39, 41, 42, 45, 56, 57, 58, 61, 63, 66, 72, 74, 76, 78, 80, 84, 85, 87, 88, 89, 93, 96, 98, 99], "one": [2, 3, 4, 6, 9, 25, 35, 36, 39, 40, 41, 42, 47, 51, 56, 57, 58, 60, 61, 63, 64, 65, 66, 68, 69, 70, 72, 73, 74, 76, 77, 78, 80, 81, 82, 84, 85, 88, 91, 94, 95, 96, 98, 99, 100], "get_label_issu": [2, 38, 39, 67, 68, 89, 96, 98, 99], "either": [2, 3, 6, 9, 36, 39, 40, 42, 56, 58, 63, 65, 66, 70, 72, 82, 87, 92, 93], "boolean": [2, 6, 9, 21, 39, 42, 50, 56, 58, 61, 66, 68, 70, 72, 73, 78, 80, 82, 85, 87, 88, 93, 96, 97, 99], "label_issues_mask": [2, 42, 66, 68, 79], "indic": [2, 3, 4, 6, 9, 12, 21, 35, 39, 40, 41, 42, 44, 47, 51, 55, 56, 57, 58, 60, 61, 63, 64, 65, 66, 68, 69, 72, 74, 76, 80, 81, 82, 84, 85, 86, 87, 88, 89, 91, 92, 93, 94, 96, 97, 98, 99, 100], "its": [2, 4, 6, 8, 9, 15, 36, 39, 40, 42, 49, 50, 58, 61, 64, 65, 66, 68, 70, 74, 76, 78, 80, 81, 82, 84, 85, 86, 87, 88, 89, 91, 93, 94, 95, 96, 97, 99, 100], "return_indices_ranked_bi": [2, 39, 42, 58, 74, 79, 87, 89, 98, 99], "significantli": [2, 88, 89, 91, 95], "reduc": [2, 39, 42, 51, 80, 87], "time": [2, 9, 36, 39, 40, 51, 56, 79, 81, 86, 87, 88, 89, 93, 94, 96, 97, 98, 99, 100], "take": [2, 4, 9, 35, 36, 40, 46, 47, 51, 55, 66, 84, 88, 91, 92, 93, 98, 100], "run": [2, 4, 5, 6, 8, 9, 10, 13, 15, 25, 26, 31, 34, 36, 39, 40, 68, 80, 81, 82, 84, 85, 86, 88, 89, 91, 92, 93, 94, 96, 98, 99, 100], "skip": [2, 9, 36, 40, 68, 80, 87, 92, 100], "slow": [2, 3], "step": [2, 6, 25, 47, 64, 87, 88, 89, 91, 95], "caution": [2, 4, 87], "previous": [2, 4, 12, 51, 65, 68, 79, 80, 81, 84, 85, 91, 95, 98], "assign": [2, 6, 9, 17, 18, 19, 21, 22, 24, 25, 26, 27, 29, 30, 31, 36, 40, 46, 47, 51, 68, 81, 84, 87, 88, 96, 97, 98, 100], "individu": [2, 6, 9, 12, 25, 36, 40, 41, 56, 60, 63, 66, 68, 74, 76, 79, 82, 84, 87, 91, 92, 93, 98, 100], "still": [2, 39, 40, 51, 65, 80, 87, 88, 94, 98], "extra": [2, 36, 40, 51, 55, 56, 57, 68, 85, 87, 88, 91, 94], "receiv": [2, 9, 36, 40, 41, 57, 60, 61, 68, 70, 74, 82, 93], "overwritten": [2, 68], "callabl": [2, 3, 36, 40, 47, 50, 55, 60, 87], "x_val": 2, "y_val": 2, "map": [2, 3, 11, 39, 40, 43, 46, 50, 51, 64, 66, 68, 73, 80, 81, 82, 87, 88, 89, 92, 100], "appropri": [2, 9, 15, 33, 58, 66, 81, 84, 92, 93], "earli": [2, 88], "stop": [2, 88], "x_valid": 2, "y_valid": 2, "could": [2, 6, 9, 21, 35, 51, 65, 81, 84, 88, 92, 96, 98, 100], "f": [2, 6, 80, 81, 84, 85, 86, 87, 88, 89, 91, 92, 93, 94, 96, 98, 99], "ignor": [2, 36, 40, 50, 55, 68, 73, 77, 80, 81, 82, 86, 88, 89, 91, 92, 94, 96, 100], "allow": [2, 35, 36, 39, 40, 44, 51, 56, 64, 65, 68, 70, 72, 80, 87, 88, 95, 97, 99], "access": [2, 9, 12, 36, 40, 68, 82, 85, 88, 92, 99], "hyperparamet": [2, 60, 65, 88], "purpos": [2, 81, 82, 87, 92, 96], "want": [2, 4, 9, 35, 39, 52, 56, 58, 68, 81, 85, 86, 88, 91, 93, 94, 95, 97, 99, 100], "explicitli": [2, 7, 9, 40, 68, 87], "yourself": [2, 4, 39, 82], "altern": [2, 6, 9, 47, 51, 55, 56, 66, 79, 80, 84, 85, 87, 88, 89, 91, 92, 94, 96, 99], "same": [2, 3, 4, 6, 9, 11, 13, 15, 25, 29, 36, 39, 40, 42, 51, 55, 56, 58, 65, 66, 68, 72, 73, 76, 77, 78, 81, 82, 84, 85, 87, 88, 92, 93, 94, 95, 96, 97, 98, 99], "effect": [2, 9, 26, 36, 40, 56, 65, 68, 84, 85, 87, 88, 94], "offer": [2, 4, 80, 81, 82, 85, 87, 89, 92, 99], "after": [2, 3, 4, 12, 17, 18, 19, 21, 22, 24, 25, 26, 27, 29, 30, 36, 40, 51, 56, 68, 81, 85, 87, 88, 89, 91, 93, 94, 95, 96, 97, 99], "attribut": [2, 4, 6, 9, 11, 12, 15, 17, 18, 19, 21, 22, 24, 25, 26, 27, 29, 30, 31, 32, 33, 36, 39, 40, 47, 65, 68, 81, 98], "label_issues_df": [2, 68, 88], "similar": [2, 9, 35, 36, 40, 51, 56, 60, 61, 63, 65, 68, 72, 76, 81, 82, 84, 85, 87, 88, 89, 93, 94, 97], "document": [2, 3, 4, 9, 13, 15, 35, 36, 39, 40, 41, 42, 47, 50, 55, 57, 58, 60, 63, 64, 65, 68, 72, 73, 74, 76, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 91, 92, 93, 94, 96, 98, 99, 100], "descript": [2, 4, 6, 9, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 35, 41, 51, 61, 68, 81, 82], "were": [2, 3, 4, 35, 40, 57, 63, 76, 80, 84, 87, 89, 91, 93, 95, 97, 98], "present": [2, 3, 4, 9, 11, 12, 19, 35, 51, 65, 73, 78, 84, 87, 88, 94], "actual": [2, 3, 4, 35, 56, 57, 66, 82, 87, 89, 100], "num_class": [2, 35, 39, 51, 55, 80, 81, 82, 84, 85, 87, 88, 89, 91, 92, 94, 98, 99], "uniqu": [2, 30, 51, 73, 81, 87, 92, 94], "given_label": [2, 4, 24, 29, 35, 45, 68, 73, 77, 80, 81, 82, 84, 85, 88, 89, 96, 97, 99, 100], "normal": [2, 3, 17, 25, 30, 42, 44, 47, 49, 50, 51, 66, 87, 89, 94], "trick": [2, 87], "distribut": [2, 3, 4, 9, 25, 27, 35, 40, 42, 46, 49, 56, 64, 65, 66, 78, 81, 82, 84, 85, 88, 93, 94], "account": [2, 35, 56, 60, 65, 66, 85, 87, 89, 91, 92, 94, 96, 99], "word": [2, 3, 50, 76, 77, 87], "remov": [2, 9, 30, 35, 36, 40, 42, 68, 78, 85, 86, 87, 88, 92, 94, 96, 98, 99], "so": [2, 3, 4, 5, 6, 9, 13, 25, 33, 35, 36, 39, 40, 42, 51, 56, 57, 63, 66, 68, 72, 76, 80, 81, 82, 85, 88, 89, 92, 94, 97], "proportion": [2, 9, 42], "just": [2, 3, 4, 9, 12, 31, 35, 37, 39, 51, 55, 66, 68, 70, 78, 79, 80, 82, 84, 85, 87, 88, 89, 92, 93, 94, 95, 96, 97, 98, 99], "procedur": 2, "get": [2, 3, 4, 7, 12, 30, 36, 37, 40, 42, 47, 50, 51, 56, 58, 60, 65, 66, 68, 69, 70, 78, 80, 85, 86, 87, 88, 89, 94, 95, 96, 98, 99], "detect": [2, 4, 6, 8, 12, 13, 15, 17, 21, 27, 41, 49, 59, 61, 62, 63, 64, 65, 66, 67, 68, 71, 75, 78, 81, 83, 88, 90, 92, 96, 97, 98, 99, 100], "arg": [2, 11, 21, 26, 30, 36, 37, 40, 47, 51, 66, 68], "kwarg": [2, 6, 9, 13, 15, 17, 18, 19, 21, 22, 24, 25, 26, 27, 29, 30, 32, 36, 39, 40, 41, 47, 55, 68, 70, 72, 74, 87], "test": [2, 4, 9, 25, 40, 47, 55, 68, 78, 81, 82, 84, 85, 88, 95, 96, 98, 99, 100], "expect": [2, 3, 36, 40, 42, 47, 56, 65, 66, 68, 87, 89, 91, 92, 93, 96, 98, 99, 100], "class_predict": 2, "evalu": [2, 9, 36, 37, 38, 39, 40, 64, 68, 80, 81, 82, 87, 88, 89, 91, 95, 96, 97, 98, 99], "simpli": [2, 35, 66, 81, 82, 84, 85, 87, 89, 92, 96, 97, 99, 100], "quantifi": [2, 4, 6, 9, 12, 42, 60, 65, 68, 78, 82, 84, 85, 88, 89, 93], "save_spac": [2, 9, 67, 68], "potenti": [2, 9, 35, 42, 50, 58, 61, 64, 66, 68, 70, 72, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 92, 93, 97, 98, 100], "cach": [2, 85, 99], "panda": [2, 4, 6, 11, 17, 18, 19, 21, 22, 24, 25, 27, 29, 30, 35, 51, 52, 55, 56, 57, 79, 80, 81, 82, 84, 85, 86, 87, 89, 91, 96, 97, 98, 99], "unlik": [2, 9, 42, 44, 47, 55, 57, 58, 60, 76, 81, 91, 92, 94, 96], "both": [2, 4, 9, 15, 25, 35, 36, 40, 42, 51, 56, 58, 66, 70, 72, 77, 78, 81, 87, 88, 89, 91, 100], "mask": [2, 39, 42, 50, 51, 58, 61, 66, 68, 70, 72, 73, 78, 86, 87, 91, 93, 97, 100], "prefer": [2, 66, 74, 92], "plan": 2, "subsequ": [2, 3, 36, 40, 85, 87, 89, 93, 99], "invok": [2, 36, 40, 89, 95], "scratch": [2, 68], "To": [2, 4, 6, 8, 9, 10, 12, 15, 25, 34, 36, 39, 40, 41, 42, 55, 56, 58, 60, 64, 65, 66, 68, 69, 70, 72, 78, 80, 81, 82, 84, 85, 87, 88, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100], "share": [2, 66, 68], "mostli": [2, 51, 63, 68, 92, 96], "longer": [2, 33, 46, 47, 50, 68, 79, 85, 87, 93, 99], "info": [2, 4, 6, 12, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 35, 57, 68, 76, 81, 82, 86, 87, 100], "about": [2, 3, 4, 6, 9, 12, 17, 18, 19, 21, 22, 24, 25, 26, 27, 29, 30, 32, 35, 37, 39, 44, 56, 57, 60, 64, 68, 73, 76, 80, 81, 84, 85, 86, 87, 88, 89, 91, 94], "docstr": [2, 35, 36, 40, 51, 68, 86, 89], "unless": [2, 36, 40, 68, 87], "our": [2, 3, 9, 55, 56, 66, 68, 78, 80, 81, 82, 84, 85, 87, 88, 89, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100], "is_label_issu": [2, 29, 68, 80, 81, 82, 84, 85, 88, 89, 92, 96, 99], "entir": [2, 9, 25, 39, 42, 45, 57, 58, 63, 66, 68, 70, 72, 73, 78, 81, 82, 87, 93, 94, 95, 97, 100], "accur": [2, 3, 4, 9, 15, 35, 39, 42, 56, 57, 58, 61, 64, 66, 68, 69, 70, 72, 73, 79, 82, 84, 85, 87, 88, 91, 96], "label_qu": [2, 56, 68, 89, 91, 96, 99], "measur": [2, 4, 35, 56, 57, 68, 78, 86, 87, 89, 91, 92, 96, 97, 98, 100], "qualiti": [2, 3, 4, 6, 9, 12, 29, 30, 35, 39, 41, 42, 44, 47, 56, 57, 58, 60, 61, 63, 66, 68, 69, 72, 74, 76, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 90, 96, 98, 99], "lower": [2, 4, 6, 9, 12, 27, 39, 47, 49, 56, 57, 60, 63, 64, 66, 68, 69, 72, 76, 80, 82, 84, 85, 88, 91, 92, 93, 94, 96, 97, 99, 100], "eas": 2, "comparison": [2, 36, 40, 64, 89, 91], "against": [2, 36, 40, 81, 84, 87, 91, 92], "predicted_label": [2, 4, 24, 29, 68, 73, 77, 80, 81, 82, 84, 85, 88, 89, 96, 97, 99], "ad": [2, 36, 40, 82, 91, 96], "precis": [2, 58, 61, 64, 87, 89, 97, 100], "definit": [2, 6, 33, 47, 68, 84, 98], "accessor": [2, 68], "describ": [2, 9, 17, 56, 65, 66, 68, 74, 76, 89, 91, 92, 93, 95, 100], "precomput": [2, 4, 45, 68, 86], "clear": [2, 36, 40, 68, 85, 96, 99], "save": [2, 4, 15, 36, 39, 40, 64, 68, 87, 93, 97, 100], "space": [2, 4, 9, 65, 68, 84, 86, 88], "place": [2, 36, 40, 51, 68, 91, 98], "larg": [2, 39, 68, 84, 85, 87, 88, 93, 94, 97, 100], "deploi": [2, 68, 84, 85, 87, 88], "care": [2, 9, 36, 40, 68, 85, 87, 89], "avail": [2, 4, 6, 11, 13, 32, 40, 68, 87, 89, 91, 93, 96], "cannot": [2, 4, 11, 13, 51, 95, 100], "anymor": 2, "classmethod": [2, 17, 18, 19, 21, 22, 24, 25, 26, 27, 29, 30, 33, 40, 47, 68], "__init_subclass__": [2, 38, 40, 67, 68], "set_": [2, 40, 68], "_request": [2, 40, 68], "pep": [2, 40, 68], "487": [2, 40, 68], "look": [2, 4, 6, 15, 36, 40, 51, 68, 73, 81, 82, 84, 85, 87, 89, 91, 92, 93, 94, 97, 98, 100], "inform": [2, 4, 6, 9, 12, 15, 32, 36, 40, 51, 56, 57, 61, 64, 68, 73, 76, 77, 78, 80, 81, 84, 85, 89, 91, 94, 97, 100], "__metadata_request__": [2, 40, 68], "infer": [2, 40, 51, 68, 73, 77, 88, 91, 92, 98, 99], "signatur": [2, 36, 40, 68], "accept": [2, 36, 40, 66, 68, 81, 82], "metadata": [2, 40, 68, 84, 85, 88, 100], "through": [2, 4, 6, 40, 68, 80, 82, 85, 86, 87, 91, 93, 94, 99], "develop": [2, 8, 40, 68, 87, 89, 100], "request": [2, 40, 68, 82, 85, 86, 92, 98, 99, 100], "those": [2, 3, 9, 39, 40, 42, 55, 56, 58, 64, 68, 72, 76, 77, 78, 80, 87, 88, 93, 97], "http": [2, 4, 6, 8, 9, 10, 17, 34, 36, 37, 39, 40, 44, 51, 61, 64, 65, 68, 78, 80, 81, 82, 84, 85, 86, 88, 89, 91, 92, 93, 94, 96, 97, 98, 99, 100], "www": [2, 40, 68, 94], "org": [2, 17, 36, 37, 40, 51, 65, 68, 87, 89, 100], "dev": [2, 40, 68], "0487": [2, 40, 68], "get_metadata_rout": [2, 38, 40, 67, 68], "rout": [2, 40, 68], "pleas": [2, 36, 40, 55, 68, 78, 80, 81, 82, 85, 86, 87, 88, 89, 91, 92, 94, 96, 99, 100], "guid": [2, 6, 40, 68, 79, 83, 88], "mechan": [2, 36, 40, 68], "metadatarequest": [2, 40, 68], "encapsul": [2, 15, 40, 63, 68], "get_param": [2, 38, 40, 54, 55, 67, 68], "subobject": [2, 40, 68], "param": [2, 9, 36, 40, 55, 65, 68, 87], "name": [2, 4, 5, 6, 9, 11, 12, 31, 33, 35, 36, 40, 46, 47, 51, 55, 56, 57, 64, 68, 73, 77, 80, 81, 82, 84, 85, 86, 87, 88, 89, 92, 96, 97, 99, 100], "set_fit_request": [2, 38, 40, 67, 68], "str": [2, 3, 4, 11, 12, 13, 15, 17, 18, 19, 21, 22, 24, 25, 26, 27, 29, 30, 32, 33, 35, 36, 39, 40, 42, 45, 47, 50, 51, 55, 56, 57, 61, 63, 64, 66, 68, 73, 77, 80, 81, 87, 91, 92, 93, 100], "unchang": [2, 36, 40, 68, 100], "relev": [2, 15, 25, 40, 68, 88], "enable_metadata_rout": [2, 40, 68], "set_config": [2, 40, 68], "meta": [2, 40, 68], "rais": [2, 4, 11, 12, 33, 36, 40, 44, 47, 68, 80, 87], "alia": [2, 36, 40, 68], "metadata_rout": [2, 40, 68], "retain": [2, 40, 51, 68], "chang": [2, 31, 33, 36, 39, 40, 44, 68, 76, 80, 81, 85, 87, 93, 94, 99, 100], "version": [2, 4, 6, 8, 9, 10, 14, 20, 23, 28, 34, 36, 38, 40, 43, 44, 51, 54, 55, 66, 68, 78, 80, 81, 82, 84, 85, 86, 87, 88, 89, 91, 92, 93, 94, 96, 98, 99, 100], "sub": [2, 40, 63, 68], "pipelin": [2, 40, 68, 96], "otherwis": [2, 6, 9, 33, 35, 36, 39, 40, 42, 48, 50, 51, 58, 65, 68, 70, 72, 73, 77, 85, 87, 99], "updat": [2, 12, 36, 39, 40, 68, 79, 81, 88], "set_param": [2, 38, 40, 54, 55, 67, 68], "simpl": [2, 36, 40, 42, 56, 66, 68, 81, 82, 84, 85, 88, 91, 94, 96, 98, 99], "well": [2, 3, 9, 36, 40, 44, 45, 56, 58, 64, 66, 68, 73, 76, 77, 79, 81, 82, 84, 85, 87, 88, 89, 91, 93, 94], "nest": [2, 36, 40, 41, 52, 68, 74, 76, 77, 100], "latter": [2, 36, 40, 68, 94], "compon": [2, 40, 68], "__": [2, 40, 68], "set_score_request": [2, 67, 68], "structur": [3, 65, 84, 98], "unobserv": 3, "less": [3, 4, 9, 30, 39, 47, 56, 65, 66, 70, 72, 76, 82, 84, 86, 87, 88, 89, 93, 100], "channel": [3, 80, 89], "character": 3, "flip": 3, "nm": 3, "invers": [3, 9, 35, 45, 51, 57, 82, 86, 99], "inv": 3, "confident_joint": [3, 21, 35, 42, 51, 57, 58, 79, 87, 89], "un": 3, "under": [3, 9, 36, 40, 57, 64, 65, 82, 94], "joint": [3, 35, 42, 45, 51, 57, 58, 86], "num_label_issu": [3, 39, 42, 58, 73, 77, 79], "estimation_method": [3, 39], "off_diagon": 3, "multi_label": [3, 35, 42, 51, 52, 58, 92], "don": [3, 78, 82, 84, 85, 88, 89, 93, 96], "statis": 3, "compute_confident_joint": [3, 35, 42, 51, 58, 89], "off": [3, 42, 51, 63, 88, 89, 93, 94], "j": [3, 4, 35, 36, 40, 41, 42, 58, 61, 64, 65, 74, 76, 77, 81, 82, 89, 97, 100], "confident_learn": [3, 42, 58, 89], "off_diagonal_calibr": 3, "calibr": [3, 42, 51, 56, 91], "cj": [3, 45, 51], "axi": [3, 30, 45, 47, 49, 70, 73, 80, 81, 82, 87, 88, 89, 91, 92, 94, 96, 97], "bincount": [3, 81, 82, 89, 91, 92], "alwai": [3, 9, 36, 40, 51, 80, 89, 96, 98, 99], "estimate_issu": 3, "over": [3, 4, 9, 36, 39, 40, 63, 64, 70, 72, 82, 84, 86, 87, 88, 89, 94, 96, 98], "As": [3, 6, 78, 81, 82, 85, 89, 96, 100], "add": [3, 4, 6, 11, 12, 36, 40, 55, 64, 80, 81, 82, 85, 87, 88, 89, 92, 99], "approach": [3, 35, 39, 42, 84, 89, 92, 94, 96, 98], "custom": [3, 6, 9, 10, 29, 36, 39, 40, 47, 50, 66, 82, 85, 89, 96, 99], "know": [3, 81, 82, 84, 85, 87, 88, 89, 91, 96], "cut": [3, 63, 78, 89], "off_diagonal_custom": 3, "tl": 3, "dr": 3, "sometim": [3, 31, 93, 94, 100], "underestim": 3, "few": [3, 64, 78, 82, 87, 91, 92, 93, 94, 100], "4": [3, 4, 17, 18, 19, 21, 22, 24, 25, 27, 29, 30, 46, 47, 50, 60, 61, 63, 64, 66, 69, 76, 86, 87, 92, 97, 100], "detail": [3, 4, 9, 13, 15, 32, 35, 36, 40, 41, 47, 51, 55, 56, 57, 58, 60, 61, 63, 64, 65, 72, 73, 74, 78, 79, 80, 92, 94, 100], "num_issu": [3, 6, 39, 80, 81, 82, 84, 85, 88, 89], "calibrate_confident_joint": 3, "up": [3, 6, 9, 16, 25, 26, 29, 42, 47, 56, 86, 87, 93, 96, 99, 100], "p_": [3, 35, 42], "pair": [3, 4, 9, 35, 42, 89], "v": [3, 9, 39, 57, 58, 60, 66, 81, 82, 92, 93, 94, 95], "rest": [3, 4, 6, 8, 9, 10, 34, 57, 58, 60, 68, 81, 82, 84, 85, 87, 88, 89, 91, 96, 98, 99], "fashion": [3, 4, 70, 98], "2x2": 3, "incorrectli": [3, 35, 57, 58, 61, 84, 100], "calibrated_cj": 3, "c": [3, 9, 50, 58, 66, 78, 80, 81, 82, 84, 85, 87, 89, 92, 93, 94, 95, 96, 98], "whose": [3, 4, 9, 27, 36, 40, 45, 50, 56, 60, 63, 69, 72, 76, 77, 80, 81, 82, 84, 85, 87, 88, 89, 92, 93, 94, 97, 100], "truli": [3, 94, 97], "estimate_joint": [3, 35, 89], "joint_estim": 3, "confident_joint_distribut": 3, "recal": [3, 58, 64, 89, 93, 95, 97, 100], "return_indices_of_off_diagon": 3, "frequenc": [3, 25, 56, 57, 64, 73, 93, 94], "done": [3, 9, 68, 81, 87, 89, 92, 94, 95], "overfit": [3, 9, 61, 64, 80, 81, 82, 84, 85, 88, 95, 98], "classifict": 3, "singl": [3, 4, 11, 25, 35, 36, 40, 41, 47, 48, 51, 56, 57, 63, 64, 65, 66, 76, 80, 81, 87, 89, 92, 93, 98], "baselin": [3, 36, 42, 94, 96, 99], "proxi": 3, "union": [3, 4, 11, 47, 51, 52, 58, 64, 68, 72, 76, 87], "tupl": [3, 30, 36, 40, 41, 45, 46, 48, 50, 51, 56, 58, 64, 72, 74, 76, 77, 80, 100], "confident_joint_count": 3, "indices_off_diagon": 3, "simplif": 3, "effici": [3, 4, 9, 39, 45, 56, 70, 72, 78, 87, 88, 97, 99], "practic": [3, 82, 88, 89, 94, 96, 98, 99], "complet": [3, 80, 81, 82, 84, 85, 87, 88, 89, 92, 93, 96], "gist": 3, "cj_ish": 3, "guess": [3, 45, 89, 91], "8": [3, 4, 6, 7, 46, 47, 48, 50, 60, 74, 76, 80, 81, 82, 84, 85, 87, 88, 91, 92, 93, 94, 96, 97, 98, 99, 100], "parallel": [3, 42, 64, 74, 86], "again": [3, 55, 87, 94, 98], "simplifi": [3, 13], "understand": [3, 8, 35, 57, 64, 82, 89, 96, 97, 100], "100": [3, 36, 40, 66, 81, 82, 84, 86, 87, 88, 89, 92, 93, 94, 98, 99, 100], "optim": [3, 36, 37, 40, 55, 88, 91], "speed": [3, 42, 86, 87, 96, 99], "dtype": [3, 22, 24, 25, 30, 36, 40, 50, 51, 60, 76, 80, 93], "enumer": [3, 36, 40, 80, 81, 82, 88, 100], "s_label": 3, "confident_bin": 3, "6": [3, 4, 40, 47, 51, 76, 80, 81, 82, 84, 85, 86, 87, 88, 91, 92, 93, 94, 96, 97, 98, 99, 100], "num_confident_bin": 3, "argmax": [3, 42, 66, 70, 73, 80, 87, 89, 93, 94, 97], "elif": 3, "estimate_lat": 3, "py_method": [3, 45], "cnt": [3, 45], "1d": [3, 4, 11, 15, 31, 39, 42, 47, 48, 51, 52, 60, 69, 80, 98], "eqn": [3, 45], "margin": [3, 42, 45, 47, 66], "marginal_p": [3, 45], "shorthand": [3, 12], "proport": [3, 9, 35, 57, 89, 95], "poorli": [3, 45, 98], "inv_noise_matrix": 3, "estimate_py_and_noise_matrices_from_prob": [3, 89], "variabl": [3, 6, 13, 26, 51, 68, 69, 80, 81, 84, 89, 92, 96], "exact": [3, 45, 81, 82, 84, 88, 98], "within": [3, 4, 9, 14, 31, 36, 37, 40, 41, 43, 58, 63, 72, 74, 76, 81, 82, 87, 88, 93, 97], "percent": 3, "often": [3, 35, 45, 57, 87, 89, 95, 97], "estimate_confident_joint_and_cv_pred_proba": 3, "mani": [3, 9, 51, 52, 64, 80, 81, 84, 85, 87, 88, 92, 93, 94, 96, 99], "wai": [3, 4, 55, 78, 79, 80, 81, 82, 84, 85, 87, 89, 91, 92, 93, 95, 98, 99], "pro": 3, "con": 3, "pred_proba": [3, 95], "combin": [3, 35, 81, 86, 87, 88, 89, 95, 96], "becaus": [3, 45, 51, 63, 85, 87, 89, 91, 93], "littl": [3, 39, 86, 93, 100], "uniform": [3, 66, 86, 87, 89], "20": [3, 6, 41, 77, 80, 85, 86, 87, 88, 89, 93, 96, 97, 100], "Such": [3, 88, 94], "bound": [3, 22, 24, 36, 40, 50, 60, 61, 63, 64, 93], "reason": [3, 21, 36, 40], "comment": [3, 50, 100], "end": [3, 4, 36, 40, 64], "file": [3, 4, 11, 38, 39, 54, 64, 80, 81, 84, 85, 86, 87, 93, 94, 97, 98, 100], "estimate_py_noise_matrices_and_cv_pred_proba": [3, 89], "handl": [3, 4, 6, 9, 15, 17, 18, 19, 21, 22, 24, 25, 26, 27, 29, 30, 32, 36, 39, 40, 79, 81, 82, 84, 85, 88, 89, 97, 98, 100], "five": [3, 61, 64, 89, 93], "estimate_cv_predicted_prob": [3, 89], "estimate_noise_matric": 3, "get_confident_threshold": [3, 38, 39], "amongst": [3, 9, 93], "confident_threshold": [3, 9, 21, 39, 65], "unifi": 4, "audit": [4, 8, 11, 12, 15, 80, 83, 84, 85, 87, 88, 89, 92, 93, 96], "kind": [4, 5, 6, 9, 80, 81, 84, 85, 86, 88, 89], "addit": [4, 6, 8, 9, 10, 12, 32, 34, 36, 40, 47, 52, 56, 64, 74, 80, 81, 84, 85, 89, 91, 94, 95, 98, 99], "depend": [4, 6, 8, 9, 10, 11, 12, 34, 38, 42, 44, 51, 54, 58, 65, 68, 69, 78], "instal": [4, 6, 8, 9, 10, 34, 36, 38, 39, 40, 42, 54, 55, 70, 72], "pip": [4, 6, 8, 10, 34, 78, 80, 81, 82, 84, 85, 86, 88, 89, 91, 92, 93, 94, 96, 97, 98, 99, 100], "development": [4, 6, 8, 10, 34], "git": [4, 6, 8, 10, 34, 78, 80, 81, 82, 84, 85, 86, 88, 89, 91, 92, 93, 94, 96, 98, 99], "github": [4, 6, 8, 10, 34, 36, 37, 51, 78, 80, 81, 82, 84, 85, 86, 87, 88, 89, 91, 92, 93, 94, 96, 98, 99], "com": [4, 6, 8, 10, 34, 36, 37, 39, 44, 51, 65, 78, 80, 81, 82, 84, 85, 86, 88, 89, 91, 92, 93, 94, 96, 97, 98, 99, 100], "egg": [4, 6, 8, 10, 34, 78, 86], "label_nam": [4, 6, 7, 9, 11, 17, 30, 78, 80, 81, 82, 84, 85, 87, 88, 89, 92, 93, 96], "image_kei": [4, 88], "interfac": [4, 78, 87, 89], "librari": [4, 9, 40, 61, 64, 65, 78, 81, 85, 86, 87, 99], "goal": [4, 96], "track": [4, 6, 12, 13, 78, 81, 86, 87, 89], "intermedi": [4, 8, 82], "statist": [4, 9, 12, 21, 25, 35, 56, 57, 64, 82, 84, 85, 89], "convert": [4, 11, 33, 36, 40, 48, 49, 52, 56, 63, 72, 76, 79, 80, 85, 86, 87, 88, 91, 92, 93, 99], "hug": [4, 11, 88], "face": [4, 11, 15, 86, 88, 92], "kei": [4, 6, 9, 11, 15, 17, 18, 19, 21, 22, 24, 25, 26, 27, 29, 30, 35, 36, 40, 47, 56, 57, 63, 65, 81, 82, 85, 87, 88, 89, 91, 93], "string": [4, 9, 11, 13, 17, 18, 19, 21, 22, 24, 25, 26, 27, 29, 30, 32, 33, 35, 36, 40, 51, 56, 57, 69, 73, 76, 77, 84, 85, 87, 91, 92, 99, 100], "dictionari": [4, 6, 9, 11, 12, 15, 17, 18, 19, 21, 22, 24, 25, 26, 27, 29, 30, 35, 36, 40, 46, 51, 56, 57, 60, 61, 63, 64, 81, 82, 84, 85, 89, 91, 92, 93], "path": [4, 11, 36, 39, 40, 64, 80, 81, 87, 93], "local": [4, 6, 11, 36, 37, 40, 80, 81, 82, 86, 87, 88, 89, 91, 92, 94, 96, 100], "text": [4, 6, 9, 11, 17, 18, 19, 21, 22, 24, 25, 26, 27, 29, 30, 41, 47, 65, 74, 76, 77, 78, 81, 82, 83, 86, 87, 89, 90, 91, 94], "txt": [4, 11, 100], "csv": [4, 11, 84, 85, 96, 98, 99], "json": [4, 11], "hub": [4, 11], "multiclass": [4, 11, 14, 47, 51, 56, 92], "regress": [4, 6, 9, 11, 13, 15, 20, 29, 31, 33, 81, 82, 85, 90, 91, 94, 99], "multilabel": [4, 11, 13, 14, 20, 24, 31, 33, 48, 92], "imag": [4, 8, 35, 40, 61, 63, 64, 65, 70, 72, 73, 78, 81, 82, 86, 87, 90, 91, 92, 93, 95, 97], "point": [4, 6, 9, 17, 25, 36, 40, 81, 82, 84, 85, 87, 88, 89, 91], "field": [4, 9, 36, 40], "themselv": [4, 96, 98, 99], "cleanvis": [4, 9], "level": [4, 15, 17, 18, 19, 21, 22, 24, 25, 26, 27, 29, 30, 32, 35, 50, 74, 76, 82, 88, 90, 92, 97], "load_dataset": [4, 11, 88], "glue": 4, "sst2": 4, "properti": [4, 11, 12, 33, 36, 40], "has_label": [4, 11], "class_nam": [4, 11, 19, 35, 41, 57, 64, 73, 77, 78, 86, 89, 93, 97, 100], "empti": [4, 11, 45, 56, 82, 87, 92], "find_issu": [4, 5, 6, 7, 9, 13, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 78, 80, 81, 82, 84, 85, 87, 88, 89, 92, 96], "knn_graph": [4, 9, 15, 17, 18, 25, 27, 30, 84], "issue_typ": [4, 5, 6, 7, 9, 12, 13, 15, 17, 18, 19, 21, 22, 24, 25, 27, 29, 30, 80, 81, 82, 84, 85, 87, 88, 89, 92, 96], "sort": [4, 15, 39, 42, 47, 56, 58, 61, 63, 64, 66, 72, 74, 76, 80, 81, 82, 84, 85, 87, 88, 89, 91, 92, 93, 96, 97, 98, 99, 100], "common": [4, 12, 15, 82, 83, 86, 87, 89, 92, 93, 97], "real": [4, 15, 78, 81, 82, 87, 89, 91, 96, 97], "world": [4, 15, 78, 81, 82, 87, 89, 91, 96, 97], "interact": [4, 15, 85, 87], "embed": [4, 9, 15, 65, 78, 80, 81, 82, 84, 85, 89, 92, 96, 99], "thereof": [4, 15], "insight": [4, 15, 64, 91], "best": [4, 15, 46, 56, 66, 81, 82, 84, 85, 87, 88, 91, 92, 94, 96, 98, 99, 100], "2d": [4, 15, 31, 39, 47, 48, 50, 51, 56, 80, 92, 98], "num_exampl": [4, 15, 17, 18, 19, 21, 22, 24, 25, 27, 29, 30, 32, 35, 57, 80, 81, 82, 84, 85, 88, 89], "properli": [4, 9, 39, 46, 51, 52, 70, 80, 81, 82, 84, 85, 87, 88, 89, 92, 94, 96, 97], "respect": [4, 36, 40, 61, 64, 80, 81, 82, 84, 85, 88, 89, 92, 93], "lexicograph": [4, 46, 51, 80, 81, 82, 84, 85, 88, 89, 92], "represent": [4, 9, 15, 33, 36, 40, 48, 58, 78, 80, 81, 82, 85, 87, 88, 89, 94, 99], "num_featur": [4, 15, 36, 40, 55], "distanc": [4, 9, 15, 17, 25, 27, 30, 49, 63, 65, 84, 94], "nearest": [4, 9, 15, 22, 25, 27, 49, 65, 82, 85, 94], "neighbor": [4, 9, 15, 17, 22, 25, 27, 49, 65, 81, 82, 84, 85, 87, 88, 94], "graph": [4, 9, 12, 15, 17, 25, 30], "squar": [4, 51, 68, 86, 96], "csr": 4, "evenli": 4, "omit": [4, 63, 64, 88, 93], "itself": [4, 31, 36, 40, 93], "three": [4, 9, 35, 56, 57, 68, 73, 80, 81, 82, 84, 86, 89, 91, 95, 96, 97, 98, 100], "indptr": 4, "wise": 4, "start": [4, 6, 9, 33, 36, 37, 40, 47, 78, 84, 92, 100], "th": [4, 41, 46, 50, 51, 56, 58, 61, 63, 64, 65, 74, 76, 77, 85, 92, 93, 100], "ascend": [4, 35, 57, 88, 89], "segment": [4, 70, 72, 73, 90], "reflect": [4, 84, 85, 91, 93, 94, 96, 98, 99], "maintain": 4, "posit": [4, 36, 40, 49, 51, 64, 86, 94], "nearestneighbor": [4, 9, 17, 65, 84, 94], "kneighbors_graph": [4, 17, 84], "illustr": 4, "todens": 4, "second": [4, 47, 51, 64, 66, 81, 87, 89, 100], "duplic": [4, 8, 20, 21, 36, 40, 78, 81, 89, 96], "explicit": 4, "precend": 4, "construct": [4, 6, 9, 13, 17, 18, 19, 21, 22, 24, 25, 26, 27, 29, 30, 32, 36, 40, 47, 55], "neither": [4, 9, 13, 93], "nor": [4, 9, 13], "collect": [4, 9, 12, 15, 17, 18, 19, 21, 22, 24, 25, 26, 27, 29, 30, 31, 56, 87, 91, 100], "unspecifi": [4, 15, 42, 58], "interest": [4, 15, 21, 73, 77, 85, 89, 96, 97, 98, 99, 100], "constructor": [4, 9, 15, 22, 29], "issuemanag": [4, 8, 12, 13, 15, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 29, 30, 32], "respons": [4, 15, 21, 68, 69, 86, 96, 100], "random_st": [4, 80, 81, 82, 88, 89, 92, 94, 98], "lab": [4, 5, 7, 9, 17, 18, 19, 21, 22, 24, 25, 26, 27, 29, 30, 39, 78, 80, 81, 82, 84, 85, 86, 87, 88, 89, 92, 96], "comprehens": [4, 78, 88, 92, 96], "nbr": 4, "n_neighbor": [4, 9, 17, 65], "metric": [4, 9, 17, 18, 25, 30, 51, 55, 64, 65, 80, 84, 85, 88, 89, 96, 98, 99], "euclidean": [4, 9, 63, 65, 84], "mode": [4, 17, 36, 39, 40, 94], "4x4": 4, "float64": [4, 25, 36, 40, 76], "compress": [4, 9, 51, 70, 72], "toarrai": 4, "NOT": [4, 39, 85], "23606798": 4, "41421356": 4, "configur": [4, 15, 47, 82], "suppos": [4, 9, 61, 94, 96, 98, 99], "who": [4, 63, 84, 89, 98, 100], "manag": [4, 7, 8, 9, 12, 13, 14, 15, 16, 18, 19, 21, 22, 24, 25, 26, 27, 29, 30, 81], "clean_learning_kwarg": [4, 9, 22, 29, 96], "labelissuemanag": [4, 9, 13, 20, 22], "prune_method": [4, 79], "prune_by_noise_r": [4, 42, 58, 89], "report": [4, 6, 10, 14, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 35, 57, 77, 78, 80, 81, 82, 84, 85, 89, 92, 96, 100], "include_descript": [4, 17, 18, 19, 21, 22, 24, 25, 27, 29, 30, 32], "show_summary_scor": [4, 32], "show_all_issu": [4, 32], "summari": [4, 6, 12, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 35, 41, 54, 55, 57, 62, 71, 72, 74, 75, 76, 79, 80, 81, 82, 84, 85, 86, 88, 89, 93, 96, 97, 100], "show": [4, 6, 25, 36, 40, 46, 51, 64, 73, 77, 82, 84, 85, 86, 87, 88, 89, 91, 94, 96, 97, 98, 100], "top": [4, 9, 35, 39, 41, 42, 51, 58, 61, 64, 66, 73, 77, 78, 80, 81, 82, 84, 85, 86, 87, 89, 93, 94, 96, 99, 100], "suffer": [4, 9, 12, 21, 58, 66, 77, 100], "onc": [4, 21, 35, 36, 40, 81, 87, 89, 92, 93, 98], "familiar": 4, "overal": [4, 6, 9, 12, 17, 18, 19, 21, 22, 24, 25, 26, 27, 29, 30, 35, 41, 47, 56, 57, 60, 63, 64, 68, 72, 73, 74, 76, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 91, 93, 100], "sever": [4, 6, 9, 11, 12, 21, 36, 39, 40, 42, 60, 63, 65, 66, 72, 76, 78, 80, 81, 82, 84, 85, 86, 87, 89, 93, 94, 98, 99, 100], "compar": [4, 56, 65, 76, 81, 82, 84, 89, 93], "issue_summari": [4, 6, 9, 12, 81], "With": [4, 39, 85, 89, 91, 96, 97, 99, 100], "usag": [4, 39, 55], "found": [4, 6, 9, 12, 13, 17, 18, 19, 21, 22, 24, 25, 26, 27, 29, 30, 36, 40, 51, 78, 80, 81, 82, 84, 85, 87, 88, 92, 94, 96, 98, 99, 100], "usual": [4, 11, 31, 32, 88, 91, 96], "directli": [4, 13, 15, 32, 33, 39, 55, 56, 82, 85, 92, 93, 96, 99], "ti": [4, 56], "exhibit": [4, 6, 9, 12, 73, 82, 84, 85, 88, 89, 93], "ie": [4, 68], "likelihood": [4, 9, 39, 41, 42, 58, 63, 65, 66, 70, 74], "wherea": [4, 51, 58, 95], "outlier": [4, 8, 13, 20, 21, 30, 43, 66, 78, 81, 82, 89, 90, 96], "fundament": [4, 9], "incompar": 4, "quantiti": [4, 89, 96], "global": [4, 6, 21, 36, 40], "non_iid": [4, 9, 13, 25, 82, 84, 85, 88, 89], "hypothesi": 4, "iid": [4, 6, 8, 25, 84, 89], "never": [4, 80, 89, 92, 94, 95], "someth": [4, 6, 36, 40, 66, 93], "123": [4, 81, 82], "456": [4, 80, 98, 99], "nearest_neighbor": 4, "7": [4, 47, 48, 55, 74, 76, 80, 81, 82, 84, 85, 86, 87, 91, 92, 93, 94, 96, 97, 98, 99, 100], "9": [4, 17, 18, 19, 21, 22, 24, 25, 27, 29, 30, 41, 47, 48, 60, 74, 76, 80, 81, 82, 84, 85, 86, 89, 91, 92, 93, 94, 96, 97, 98, 99, 100], "distance_to_nearest_neighbor": [4, 81, 82, 84, 85, 88, 89], "789": 4, "get_issu": [4, 9, 12, 80, 82, 84, 85, 87, 88, 92, 96], "issue_nam": [4, 5, 6, 9, 12, 13, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 81, 82], "focu": [4, 12, 85, 97, 100], "full": [4, 9, 12, 39, 64, 88, 100], "summar": [4, 12, 17, 18, 19, 21, 22, 24, 25, 26, 27, 29, 30, 35, 57, 73, 77, 78, 97], "valueerror": [4, 11, 12, 33, 44, 47, 87], "specific_issu": [4, 12], "lie": [4, 9, 65, 66, 80, 81, 82, 84, 85, 88, 89, 99], "get_issue_summari": [4, 12, 82], "get_info": [4, 12, 82, 85], "yet": [4, 16, 26, 86, 91], "list_possible_issue_typ": [4, 13, 14], "regist": [4, 6, 13, 14, 16, 26, 36, 40, 81], "rtype": [4, 13, 17, 18, 19, 21, 22, 24, 25, 26, 27, 29, 30, 36, 40], "registri": [4, 13, 14], "list_default_issue_typ": [4, 13, 14], "folder": [4, 80, 81, 88], "load": [4, 11, 39, 64, 86, 87, 88, 89, 93, 94, 97, 100], "futur": [4, 9, 21, 36, 40, 56, 78, 80, 81, 85, 87, 99], "overwrit": [4, 81], "separ": [4, 35, 47, 60, 81, 82, 87, 88, 93, 95], "static": 4, "rememb": [4, 85, 87, 89], "part": [4, 9, 36, 40, 42, 61, 63, 64, 80, 81, 86, 97, 100], "ident": [4, 9, 21, 51, 85], "datalab": [5, 7, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 78, 80, 87, 88, 91, 96, 98, 99], "walk": 6, "alongsid": [6, 36, 40, 81, 87], "pre": [6, 7, 9, 36, 40, 81, 82, 96], "runtim": [6, 36, 39, 40, 68, 70, 72, 80, 87, 88], "issue_manager_factori": [6, 13, 81], "myissuemanag": [6, 13], "myissuemanagerforregress": 6, "decor": [6, 13], "ll": [6, 47, 80, 81, 82, 84, 85, 87, 88, 89, 91, 92, 93, 94, 95, 96, 98, 99, 100], "thing": [6, 40, 89, 96, 99], "next": [6, 56, 78, 80, 84, 85, 87, 91, 93, 96, 98, 99, 100], "dummi": 6, "randint": [6, 30, 47, 81, 82, 87], "mark": [6, 9, 79, 93, 94, 96], "regard": [6, 82, 89], "rand": [6, 47, 81, 82], "is_": [6, 9, 81], "_issu": [6, 9, 81], "issue_score_kei": [6, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 81], "whole": [6, 25, 36, 40, 82], "make_summari": [6, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 81], "popul": [6, 82, 85], "verbosity_level": [6, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30], "std": [6, 93], "raw_scor": 6, "bit": 6, "involv": [6, 39, 73, 77, 87, 92], "intermediate_arg": 6, "min": [6, 47, 63, 76, 81, 87, 94], "sin_filt": 6, "sin": 6, "arang": 6, "kernel": 6, "affect": [6, 9, 36, 40, 70, 76, 85, 87], "easili": [6, 45, 79, 80, 82, 84, 85, 89, 91, 92, 94, 95, 96, 97, 98, 99], "hard": [6, 40, 86, 94], "sai": [6, 9, 36, 40, 92, 97], "anoth": [6, 21, 35, 39, 50, 63, 66, 84, 85, 87, 89, 91, 94, 99], "try": [6, 9, 39, 42, 55, 56, 70, 72, 78, 82, 84, 85, 87, 88, 89, 97], "won": [6, 36, 40, 81, 82, 87, 92], "issue_manag": [6, 9, 10, 12, 14, 17, 18, 19, 22, 24, 25, 26, 27, 29, 30, 81], "instanti": [6, 15, 39, 55, 65, 80, 82, 84, 99], "477762": 6, "286455": 6, "term": [6, 9, 45, 51, 64, 80, 81, 82, 84, 85, 88, 89], "4778": 6, "is_basic_issu": 6, "basic_scor": 6, "13": [6, 18, 27, 80, 81, 82, 84, 85, 86, 88, 89, 91, 93, 94, 96, 97, 98, 99, 100], "003042": 6, "058117": 6, "11": [6, 55, 80, 81, 82, 84, 85, 86, 87, 88, 89, 91, 92, 93, 94, 96, 97, 98, 99, 100], "121908": 6, "15": [6, 49, 68, 80, 81, 82, 84, 85, 86, 87, 88, 89, 91, 93, 94, 96, 97, 98, 99, 100], "169312": 6, "17": [6, 80, 82, 84, 85, 86, 87, 88, 89, 91, 93, 94, 96, 97, 99, 100], "229044": 6, "2865": 6, "is_intermediate_issu": 6, "intermediate_scor": 6, "000000": [6, 81, 82, 86, 89], "007059": 6, "009967": 6, "010995": 6, "087332": 6, "016296": 6, "03947": 6, "019459": 6, "794251": 6, "underperform": [7, 8, 30], "group": [7, 8, 25, 30, 86, 93, 100], "dbscan": [7, 9, 30, 87], "hdbscan": [7, 87], "etc": [7, 9, 21, 31, 36, 40, 45, 55, 56, 74, 78, 81, 82, 84, 85, 87, 89, 92, 96], "sensit": [7, 9, 49], "ep": [7, 30, 64], "radiu": 7, "min_sampl": [7, 30], "kmean": [7, 87], "your_data": 7, "get_pred_prob": 7, "n_cluster": [7, 30, 87], "cluster_id": [7, 9, 30, 87], "labels_": 7, "underperforming_group": [7, 9, 13, 20, 82, 84, 85, 87, 88, 89], "search": [8, 9, 19, 25, 26, 50, 68, 87, 95], "nondefault": 8, "Near": [8, 87], "imbal": [8, 20, 60, 65, 66, 82], "null": [8, 13, 20, 82, 85, 88, 89], "valuat": [8, 17], "togeth": [8, 9, 45, 81, 82, 84, 85, 88, 89, 96, 99, 100], "built": [8, 47], "own": [8, 36, 38, 40, 54, 60, 61, 64, 70, 74, 80, 82, 84, 85, 87, 88, 91, 92, 96, 97, 98, 99, 100], "prerequisit": 8, "basic": [8, 40, 55, 84, 85, 94], "page": [9, 82, 87, 89], "variou": [9, 12, 29, 38, 52, 54, 78, 81, 82, 84, 85, 86, 89, 91, 93, 98], "why": [9, 85], "matter": [9, 35, 57, 85, 99], "_score": 9, "flag": [9, 21, 25, 42, 47, 57, 58, 61, 68, 78, 80, 81, 82, 84, 85, 86, 88, 89, 93, 94, 96, 97, 99], "badli": [9, 63, 100], "code": [9, 36, 40, 45, 51, 55, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 91, 92, 93, 94, 96, 97, 98, 99, 100], "issue_scor": 9, "outlier_scor": [9, 27, 81, 82, 84, 85, 88, 89, 94], "atyp": [9, 65, 81, 82, 84, 85, 88, 89, 94], "datapoint": [9, 30, 42, 47, 51, 66, 69, 78, 80, 81, 82, 84, 85, 87, 95, 96, 98, 99], "is_issu": [9, 21], "is_outlier_issu": [9, 81, 82, 84, 85, 88, 89], "annot": [9, 35, 46, 56, 57, 58, 60, 61, 63, 64, 73, 76, 77, 78, 80, 81, 82, 84, 85, 87, 88, 89, 90, 93, 97], "transform": [9, 31, 47, 49, 51, 65, 66, 82, 85, 88, 94, 98, 99, 100], "dissimilar": [9, 84, 85], "preced": 9, "cosin": [9, 65, 94], "incorrect": [9, 63, 66, 69, 80, 81, 82, 84, 85, 88, 89, 93, 96, 98], "due": [9, 39, 42, 66, 70, 72, 80, 81, 82, 84, 85, 88, 89, 96], "appear": [9, 35, 46, 57, 58, 61, 69, 82, 84, 85, 88, 96, 97], "now": [9, 39, 79, 80, 82, 91, 93, 94, 96, 98, 99, 100], "u": [9, 80, 81, 84, 87, 88, 89, 91, 92, 95, 96, 97, 98, 99, 100], "token": [9, 41, 50, 72, 73, 74, 75, 76, 77, 87, 89, 90], "calcul": [9, 17, 25, 39, 47, 56, 60, 61, 63, 64, 65, 68, 72, 86, 88], "hamper": [9, 86, 88], "analyt": [9, 78, 87, 91], "lead": [9, 63, 66, 88, 93], "draw": [9, 81, 82], "conclus": [9, 85], "veri": [9, 35, 57, 61, 63, 81, 82, 84, 85, 87, 88, 89, 91, 94, 96, 99], "rare": [9, 42, 64, 81, 82, 84, 85, 87, 88, 89], "anomal": [9, 66, 81, 82, 84, 85, 88, 89], "articl": [9, 39, 87], "ai": [9, 78, 80, 81, 82, 84, 85, 86, 87, 88, 90, 91, 92, 94, 96, 98, 99, 100], "blog": 9, "unexpect": [9, 36, 40, 85], "consequ": 9, "inspect": [9, 80, 82, 88, 89, 93, 96, 99], "neg": [9, 63, 64, 81, 82, 86], "extrem": [9, 81, 82, 84, 85, 87, 88, 89], "rel": [9, 35, 56, 57, 65, 81, 82, 84, 85, 88, 89, 94], "record": [9, 36, 40, 80, 84, 96], "abbrevi": 9, "misspel": 9, "typo": [9, 77], "resolut": 9, "video": [9, 86], "audio": [9, 81, 82, 87, 90], "minor": [9, 50], "variat": 9, "translat": 9, "d": [9, 49, 84, 85, 89, 92, 96, 98, 100], "constant": [9, 30, 68], "median": [9, 29, 49], "question": [9, 21, 78, 89], "nearli": [9, 21, 82, 84, 85, 88], "awar": [9, 79, 89], "presenc": [9, 89], "near_dupl": [9, 13, 18, 81, 82, 84, 85, 87, 88, 89], "signific": [9, 84, 85, 89], "violat": [9, 84, 85, 89], "assumpt": [9, 84, 85, 89], "changepoint": [9, 84, 85, 89], "shift": [9, 84, 85, 89], "drift": [9, 82, 84, 89], "autocorrel": [9, 84, 85, 89], "almost": [9, 84, 85, 89], "adjac": [9, 84, 85, 89], "tend": [9, 35, 45, 84, 85, 89, 97, 100], "sequenti": [9, 36, 40, 55, 88], "gap": 9, "b": [9, 17, 18, 19, 21, 22, 24, 25, 27, 29, 30, 35, 50, 51, 76, 84, 85, 86, 89, 95, 98, 100], "x1": [9, 61, 64, 93], "x2": [9, 61, 64, 93], "10th": 9, "100th": 9, "90": [9, 76, 84, 89, 95, 96, 98], "similarli": [9, 36, 40, 81, 84, 87, 88, 93], "math": [9, 88], "behind": [9, 65, 89], "proper": [9, 51, 56, 61, 64, 85, 88, 91, 93, 98], "closer": [9, 63, 93], "scenario": [9, 66, 81, 82], "underli": [9, 41, 65, 74, 76, 100], "stem": [9, 65, 94], "evolv": 9, "influenc": 9, "act": [9, 63, 81], "accordingli": [9, 31], "emploi": [9, 92, 94], "partit": [9, 95], "ahead": 9, "good": [9, 36, 40, 49, 55, 57, 63, 66, 70, 72, 73, 78, 84, 85, 88], "fix": [9, 56, 85, 89, 96, 99], "problem": [9, 31, 39, 47, 73, 78, 81, 82, 85, 87, 88], "deploy": [9, 89, 96, 98, 99], "overlook": [9, 63, 93], "fact": 9, "thu": [9, 35, 40, 57, 80, 84, 85, 89, 95, 98, 100], "diagnos": [9, 82, 87], "rarest": [9, 82], "q": [9, 93], "fall": [9, 63, 72, 76, 89, 94], "subpar": 9, "special": [9, 50], "techniqu": [9, 93], "smote": 9, "asymmetr": [9, 35], "class_imbal": [9, 13, 19, 82, 84, 85, 88, 89], "too": [9, 42, 47, 65, 82, 87, 88, 93], "dark": [9, 97], "bright": [9, 100], "blurri": [9, 88], "abnorm": [9, 64, 88, 93], "cluster": [9, 17, 30], "slice": 9, "poor": 9, "subpopul": 9, "faq": [9, 78, 82, 84, 85, 88, 90], "lowest": [9, 56, 64, 82, 87, 88, 91, 92, 93, 97], "get_self_confidence_for_each_label": [9, 47, 66], "power": [9, 84, 85, 86, 88, 89, 100], "r": [9, 39, 68, 81, 82, 96, 97], "tabular": [9, 78, 81, 82, 83, 87, 90, 91], "categor": [9, 65, 81, 82, 83, 87, 96, 98], "encod": [9, 48, 64, 70, 73, 84, 85, 87, 96, 97, 98, 99], "miss": [9, 26, 36, 40, 51, 61, 63, 84, 87, 93, 96], "pattern": 9, "contribut": [9, 17, 93], "isn": [9, 16, 26], "approxim": [9, 17, 39, 65, 91], "shaplei": [9, 17], "knn": [9, 12, 17, 25, 30, 65, 84, 94], "scalabl": 9, "sacrific": 9, "One": [9, 51, 65, 87], "quantif": 9, "data_valu": [9, 13, 20], "exert": [9, 82], "possible_issue_typ": 9, "label_kwarg": 9, "outlier_kwarg": 9, "near_duplicate_kwarg": 9, "non_iid_kwarg": 9, "class_imbalance_kwarg": 9, "underperforming_group_kwarg": 9, "null_kwarg": 9, "data_valuation_kwarg": 9, "health_summary_paramet": [9, 20, 22, 29], "health_summari": [9, 22, 35, 78, 86], "health_summary_kwarg": 9, "tandem": [9, 86], "view": [9, 36, 40, 41, 42, 72, 74, 76, 78, 80, 81, 82, 84, 85, 86, 89, 91, 92, 93, 94, 95, 96, 98, 99, 100], "ood_kwarg": 9, "outofdistribut": [9, 27, 65, 94], "outsid": [9, 92], "outlierissuemanag": [9, 13, 20, 27, 81], "nearduplicateissuemanag": [9, 13, 18, 20], "noniidissuemanag": [9, 13, 20, 25], "num_permut": [9, 25], "permut": [9, 25], "significance_threshold": [9, 25], "signic": 9, "noniid": [9, 20], "classimbalanceissuemanag": [9, 13, 19, 20], "underperforminggroupissuemanag": [9, 13, 20, 30], "determinin": 9, "neighbour": 9, "min_cluster_sampl": [9, 30], "filter_cluster_id": [9, 20, 30], "clustering_kwarg": [9, 30], "nullissuemanag": [9, 13, 20, 26], "datavaluationissuemanag": [9, 13, 17, 20], "codeblock": 9, "demonstr": [9, 39, 81, 82, 85, 87, 88, 89, 91, 92, 93, 96, 97], "howev": [9, 36, 40, 51, 80, 84, 85, 88, 91, 95, 97, 98, 99], "mandatori": 9, "image_issue_types_kwarg": 9, "32": [9, 80, 81, 86, 91, 93], "fewer": [9, 42, 51, 93], "vice": [9, 57], "versa": [9, 57], "light": [9, 86, 88, 93, 97], "29": [9, 86, 88, 91, 92, 93, 97, 100], "low_inform": [9, 88], "odd_aspect_ratio": [9, 88], "35": [9, 81, 86, 91, 92, 93], "odd_siz": [9, 88], "10": [9, 17, 18, 22, 25, 30, 36, 37, 64, 65, 66, 77, 80, 81, 82, 84, 85, 86, 87, 88, 89, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100], "doc": [9, 36, 40, 78, 80, 81, 82, 86, 88, 89, 91, 92, 94, 96, 100], "data_issu": [10, 14, 15, 32, 81], "issue_find": [10, 14], "factori": [10, 14, 15], "model_output": [10, 14], "except": [11, 36, 40, 55, 66, 81, 82, 88, 91], "dataformaterror": [11, 14], "add_not": 11, "with_traceback": 11, "tb": 11, "__traceback__": 11, "datasetdicterror": [11, 14], "datasetdict": 11, "datasetloaderror": [11, 14], "dataset_typ": 11, "fail": 11, "hold": 11, "associ": [11, 15, 31, 33, 36, 40, 64, 91], "sublist": 11, "map_to_int": 11, "abc": [11, 21, 31], "is_avail": [11, 88], "dataissu": [12, 14, 15, 32], "serv": [12, 15, 91], "central": [12, 100], "repositori": 12, "strategi": [12, 47, 87], "being": [12, 35, 36, 40, 42, 47, 50, 51, 66, 84, 87, 89, 96, 97, 98], "_infostrategi": 12, "basi": 12, "collect_statist": 12, "reus": [12, 21], "avoid": [12, 36, 39, 40, 42, 51, 58, 61, 64, 68, 70, 72, 81, 82, 87], "recomput": [12, 99], "weighted_knn_graph": 12, "issue_manager_that_computes_knn_graph": 12, "collect_issues_from_issue_manag": 12, "collect_issues_from_imagelab": 12, "imagelab": 12, "set_health_scor": 12, "health": [12, 22, 35, 57, 78], "get_data_statist": [12, 14], "concret": 13, "subclass": [13, 36, 40, 65, 81], "regressionlabelissuemanag": [13, 20, 28, 29], "multilabelissuemanag": [13, 20, 23, 24], "from_str": [13, 33, 43, 47], "my_issu": 13, "logic": [13, 33, 39, 42, 70, 72], "stabl": [14, 20, 23, 28, 38, 43, 51, 54, 65, 79], "issuefind": [14, 15, 32], "modeloutput": [14, 31], "multiclasspredprob": [14, 31], "regressionpredict": [14, 31], "multilabelpredprob": [14, 31], "instati": 15, "public": [15, 89, 93, 97, 100], "creation": [15, 40], "execut": [15, 36, 40, 81, 87, 93], "coordin": [15, 61, 63, 64, 93, 100], "behavior": [15, 35, 36, 40, 64, 87], "At": [15, 64, 87], "get_available_issue_typ": 15, "direct": [16, 26, 36, 40], "valuabl": 17, "vstack": [17, 51, 86, 87, 88, 89, 91, 92], "25": [17, 25, 36, 47, 49, 82, 86, 88, 89, 91, 92, 93, 100], "classvar": [17, 18, 19, 21, 22, 24, 25, 26, 27, 29, 30], "short": [17, 18, 19, 21, 22, 24, 25, 26, 27, 29, 30, 50, 51], "data_valuation_scor": 17, "item": [17, 18, 19, 21, 22, 24, 25, 26, 27, 29, 30, 36, 40, 51, 81, 82, 87, 88, 89, 91, 92], "some_info_kei": [17, 18, 19, 21, 22, 24, 25, 26, 27, 29, 30], "additional_info_kei": [17, 18, 19, 21, 22, 24, 25, 26, 27, 29, 30], "default_threshold": [17, 20, 27], "arxiv": [17, 89], "ab": [17, 89, 93], "1911": 17, "07128": 17, "larger": [17, 68, 70, 72, 85, 86, 87, 88], "collect_info": [17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30], "info_to_omit": [17, 18, 19, 21, 22, 24, 25, 27, 29, 30], "compos": [17, 18, 19, 21, 22, 24, 25, 27, 29, 30, 36, 40, 85, 94, 99], "is_x_issu": [17, 18, 19, 21, 22, 24, 25, 27, 29, 30], "x_score": [17, 18, 19, 21, 22, 24, 25, 27, 29, 30], "val_a": [17, 18, 19, 21, 22, 24, 25, 27, 29, 30], "val_b1": [17, 18, 19, 21, 22, 24, 25, 27, 29, 30], "val_b2": [17, 18, 19, 21, 22, 24, 25, 27, 29, 30], "report_str": [17, 18, 19, 21, 22, 24, 25, 26, 27, 29, 30, 32], "_": [18, 21, 22, 24, 25, 26, 29, 30, 47, 50, 51, 80, 81, 86, 88, 89, 92, 98], "near_duplicate_set": [18, 20, 81, 82, 84, 85, 87, 88, 89], "occurr": [18, 19, 21, 25, 26, 27, 30, 50], "median_nn_dist": 18, "near_duplicate_scor": [18, 81, 82, 84, 85, 87, 88, 89], "class_imbalance_scor": [19, 82], "bleed": [20, 23, 28, 38], "edg": [20, 23, 28, 38, 63, 78, 89, 100], "sharp": [20, 23, 28, 38], "get_health_summari": [20, 22], "ood": [20, 27, 65, 66, 81, 82, 85, 88, 89, 94], "simplified_kolmogorov_smirnov_test": [20, 25], "outlier_cluster_label": [20, 30], "no_underperforming_cluster_id": [20, 30], "set_knn_graph": [20, 30], "perform_clust": [20, 30], "get_worst_clust": [20, 30], "find_issues_with_predict": [20, 28, 29], "find_issues_with_featur": [20, 28, 29], "believ": [21, 97], "priori": [21, 89], "abstract": [21, 31], "applic": [22, 56, 87, 89, 91, 100], "typevar": [22, 24, 36, 40, 50, 60, 63, 64], "scalartyp": [22, 24], "covari": [22, 24, 68, 96], "summary_dict": 22, "label_scor": [22, 24, 29, 80, 81, 82, 84, 85, 88, 89, 92, 96], "neighbor_histogram": 25, "non_neighbor_histogram": 25, "kolmogorov": 25, "smirnov": 25, "largest": [25, 39, 47, 66, 70, 72, 93, 97], "empir": [25, 46, 56], "cumul": 25, "ecdf": 25, "histogram": [25, 84, 96], "absolut": [25, 29], "dimension": [25, 51, 80, 89, 94], "trial": 25, "non_iid_scor": [25, 82, 84, 85, 89], "null_track": 26, "extend": [26, 48, 88, 93, 94, 100], "superclass": 26, "arbitrari": [26, 35, 72, 76, 81, 94, 96], "prompt": 26, "address": [26, 81, 82, 85, 87, 99], "enabl": [26, 40], "null_scor": [26, 82], "37037": 27, "q3_avg_dist": 27, "iqr_avg_dist": 27, "median_outlier_scor": 27, "multipli": 29, "deleg": 29, "confus": [30, 31, 35, 36, 40, 42, 51, 64, 99, 100], "50": [30, 40, 87, 89, 91, 93, 94, 96], "keepdim": [30, 87], "signifi": 30, "absenc": 30, "find_issues_kwarg": 30, "int64": [30, 80, 91], "npt": 30, "int_": 30, "id": [30, 56, 81, 87, 88, 91], "unique_cluster_id": 30, "_description_": 30, "performed_clust": 30, "worst_cluster_id": 30, "underperforming_group_scor": [30, 82], "convent": [31, 33], "subject": [31, 33], "meant": [31, 33], "Not": 31, "mainli": [31, 94, 100], "content": [31, 65, 80, 81, 82, 86, 88, 89, 91, 92, 94, 96, 100], "fetch": [31, 39, 80, 82], "datset": 32, "exclud": [32, 41, 73, 77, 81, 87, 100], "get_report": 32, "enum": [33, 47], "qualnam": [33, 47], "boundari": [33, 47, 81, 82], "continu": [33, 85, 87, 88, 91, 93, 96, 98, 99, 100], "binari": [33, 47, 51, 58, 60, 89, 100], "simultan": [33, 96], "task_str": 33, "is_classif": 33, "__contains__": [33, 43, 47], "member": [33, 36, 40, 47, 81, 82], "typeerror": [33, 47], "12": [33, 47, 80, 81, 82, 84, 85, 86, 87, 88, 89, 91, 93, 94, 96, 97, 98, 99, 100], "__getitem__": [33, 43, 47], "match": [33, 35, 36, 40, 42, 47, 56, 57, 66, 81, 82, 86, 88, 93, 95, 97], "__iter__": [33, 43, 47], "__len__": [33, 43, 47], "alias": [33, 47], "is_regress": 33, "is_multilabel": 33, "overview": [35, 80, 82, 84, 85, 88, 91, 93, 94, 96, 98, 99, 100], "modifi": [35, 36, 39, 40, 51, 87, 89], "help": [35, 36, 40, 64, 78, 79, 80, 81, 84, 85, 86, 87, 88, 91, 92, 96, 97, 98, 99, 100], "rank_classes_by_label_qu": [35, 82], "merg": [35, 50, 78, 86, 87, 100], "find_overlapping_class": [35, 87, 89], "problemat": [35, 57, 73, 77, 80, 93, 100], "unnorm": [35, 57, 89], "abov": [35, 36, 39, 40, 51, 56, 63, 64, 66, 72, 76, 80, 81, 82, 84, 85, 87, 88, 89, 91, 92, 93, 95, 96, 97, 98, 99, 100], "model_select": [35, 47, 80, 81, 82, 84, 85, 87, 88, 89, 91, 92, 94, 96, 98, 99], "cross_val_predict": [35, 40, 80, 81, 82, 84, 85, 87, 89, 91, 95, 96, 98, 99], "get_data_labels_from_dataset": 35, "yourfavoritemodel": [35, 89], "cv": [35, 47, 80, 81, 82, 84, 89, 91, 98], "df": [35, 51, 77, 80, 87], "overall_label_qu": [35, 57], "col": 35, "prob": [35, 50, 89, 95], "divid": [35, 57, 66], "label_nois": [35, 57], "human": [35, 86, 97, 100], "clearli": [35, 66, 88, 93, 97], "num": [35, 57, 86, 89], "overlap": [35, 78, 86, 87, 89], "ontolog": 35, "publish": [35, 100], "therefor": [35, 66], "vehicl": [35, 86], "truck": [35, 86, 94, 97], "intuit": [35, 57], "car": [35, 86, 93, 97], "frequent": [35, 56, 84, 87, 96], "characterist": 35, "l": [35, 36, 40, 61, 63, 64], "class1": 35, "class2": 35, "relationship": 35, "dog": [35, 51, 57, 59, 73, 86, 87, 94, 95, 100], "cat": [35, 51, 57, 59, 86, 87, 94, 95], "captur": [35, 80, 93, 94, 97], "co": [35, 36, 37], "noisy_label": [35, 81, 82, 92], "overlapping_class": 35, "descend": [35, 36, 40, 47, 57, 64], "overall_label_health_scor": [35, 57, 89], "suggest": [35, 56, 57, 63, 85, 87, 88, 96, 99], "half": [35, 36, 38, 40, 57, 86, 100], "health_scor": [35, 57], "classes_by_label_qu": [35, 82], "cnn": [36, 38, 40, 88], "cifar": [36, 37, 86, 94], "teach": [36, 37], "bhanml": 36, "blob": 36, "master": [36, 80, 81, 82, 84, 85, 86, 88, 89, 91, 92, 93, 94, 96, 98, 99], "call_bn": [36, 38], "bn": 36, "input_channel": 36, "n_output": 36, "dropout_r": 36, "top_bn": 36, "architectur": [36, 40], "shown": [36, 64, 81, 87, 91, 94, 95, 97, 100], "forward": [36, 37, 38, 40, 88, 91], "overridden": [36, 40], "although": [36, 40, 65, 84, 98], "recip": [36, 40], "afterward": [36, 40], "sinc": [36, 40, 44, 52, 57, 64, 72, 76, 87, 91, 92, 93, 95, 100], "former": [36, 40], "hook": [36, 40, 86], "silent": [36, 39, 40], "t_destin": [36, 38, 40], "__call__": [36, 38, 40, 43, 47], "add_modul": [36, 38, 40], "child": [36, 40], "fn": [36, 40, 64], "recurs": [36, 40, 47], "submodul": [36, 40], "children": [36, 38, 40, 100], "nn": [36, 37, 40, 88], "init": [36, 40, 89], "no_grad": [36, 40, 88, 94], "init_weight": [36, 40], "linear": [36, 40, 85, 88, 99], "fill_": [36, 40], "net": [36, 40, 80, 86, 88], "in_featur": [36, 40], "out_featur": [36, 40], "bia": [36, 40, 88], "tensor": [36, 37, 40, 80, 85, 88, 94, 99], "requires_grad": [36, 40], "bfloat16": [36, 38, 40], "cast": [36, 40, 80], "buffer": [36, 38, 40], "datatyp": [36, 40], "xdoctest": [36, 40], "undefin": [36, 40], "var": [36, 40], "buf": [36, 40], "20l": [36, 40], "1l": [36, 40], "5l": [36, 40], "call_super_init": [36, 38, 40], "immedi": [36, 40, 94], "compil": [36, 38, 40, 55], "cpu": [36, 38, 40, 42, 80, 88], "move": [36, 40, 47, 79, 86], "cuda": [36, 38, 40, 80, 88], "devic": [36, 40, 80, 88], "gpu": [36, 40, 80, 85, 99], "live": [36, 40], "copi": [36, 40, 68, 80, 81, 82, 84, 87, 92, 95, 96, 98], "doubl": [36, 38, 40], "dump_patch": [36, 38, 40], "eval": [36, 38, 40, 88, 92, 94], "dropout": [36, 40], "batchnorm": [36, 40], "grad": [36, 40], "extra_repr": [36, 38, 40], "line": [36, 40, 78, 81, 86, 91, 94, 100], "get_buff": [36, 38, 40], "target": [36, 37, 40, 68, 69, 94, 96], "throw": [36, 40], "get_submodul": [36, 38, 40], "explan": [36, 40], "fulli": [36, 40, 55, 87], "qualifi": [36, 40], "referenc": [36, 40], "attributeerror": [36, 40], "invalid": [36, 40, 85], "resolv": [36, 40, 100], "get_extra_st": [36, 38, 40], "state_dict": [36, 38, 40], "set_extra_st": [36, 38, 40], "build": [36, 40, 88, 97], "picklabl": [36, 40], "serial": [36, 40], "backward": [36, 40, 88], "break": [36, 40, 88, 93], "pickl": [36, 40, 93], "get_paramet": [36, 38, 40], "let": [36, 40, 65, 66, 80, 82, 84, 85, 87, 88, 91, 92, 93, 94, 96, 97, 98, 99, 100], "net_b": [36, 40], "net_c": [36, 40], "conv": [36, 40], "conv2d": [36, 40, 88], "16": [36, 40, 47, 72, 80, 81, 82, 84, 85, 86, 87, 88, 89, 91, 93, 94, 97, 99, 100], "33": [36, 40, 86, 93], "kernel_s": [36, 40], "stride": [36, 40], "200": [36, 40, 66, 86, 93, 100], "diagram": [36, 40, 95], "degre": [36, 40], "queri": [36, 40, 82, 87, 88, 92], "named_modul": [36, 38, 40], "o": [36, 40, 49, 50, 80, 81, 82, 86, 87, 89, 92, 93, 100], "transit": [36, 40], "ipu": [36, 38, 40], "load_state_dict": [36, 38, 40], "strict": [36, 40, 47], "persist": [36, 40], "strictli": [36, 40], "inplac": [36, 40, 91], "preserv": [36, 40, 51], "namedtupl": [36, 40], "missing_kei": [36, 40], "unexpected_kei": [36, 40], "runtimeerror": [36, 40], "idx": [36, 40, 51, 52, 64, 81, 87, 88, 89, 91, 93, 94], "named_buff": [36, 38, 40], "prefix": [36, 40, 80, 100], "remove_dupl": [36, 40], "prepend": [36, 40], "running_var": [36, 40], "named_children": [36, 38, 40], "conv4": [36, 40], "conv5": [36, 40], "memo": [36, 40], "named_paramet": [36, 38, 40], "register_backward_hook": [36, 38, 40], "deprec": [36, 40, 44, 80, 85, 87, 99], "favor": [36, 40], "register_full_backward_hook": [36, 38, 40], "removablehandl": [36, 40], "register_buff": [36, 38, 40], "running_mean": [36, 40], "register_forward_hook": [36, 38, 40], "with_kwarg": [36, 40], "always_cal": [36, 40], "possibli": [36, 40, 84, 98], "fire": [36, 40, 86], "register_module_forward_hook": [36, 40], "regardless": [36, 40, 81, 82], "register_forward_pre_hook": [36, 38, 40], "And": [36, 40], "forward_pr": [36, 40], "register_module_forward_pre_hook": [36, 40], "gradient": [36, 40, 84, 88, 96], "grad_input": [36, 40], "grad_output": [36, 40], "technic": [36, 40], "caller": [36, 40], "register_module_full_backward_hook": [36, 40], "register_full_backward_pre_hook": [36, 38, 40], "backward_pr": [36, 40], "register_module_full_backward_pre_hook": [36, 40], "register_load_state_dict_post_hook": [36, 38, 40], "post": [36, 40], "incompatible_kei": [36, 40], "modif": [36, 40], "thrown": [36, 40], "register_modul": [36, 38, 40], "register_paramet": [36, 38, 40], "register_state_dict_pre_hook": [36, 38, 40], "keep_var": [36, 40], "requires_grad_": [36, 38, 40], "autograd": [36, 40], "freez": [36, 40, 80, 85, 99], "finetun": [36, 40], "gan": [36, 40], "share_memori": [36, 38, 40], "share_memory_": [36, 40], "destin": [36, 40], "shallow": [36, 40], "releas": [36, 40, 79, 80, 87], "design": [36, 40], "ordereddict": [36, 40], "detach": [36, 40, 88], "non_block": [36, 40], "memory_format": [36, 40], "channels_last": [36, 40], "Its": [36, 40, 47, 57, 63], "complex": [36, 40, 80], "integr": [36, 40, 78], "asynchron": [36, 40], "host": [36, 40], "pin": [36, 40, 85, 86, 99], "desir": [36, 40, 50, 64], "4d": [36, 40], "ignore_w": [36, 40], "determinist": [36, 40, 80], "1913": [36, 40], "3420": [36, 40], "5113": [36, 40], "2325": [36, 40], "env": [36, 40], "torch_doctest_cuda1": [36, 40], "gpu1": [36, 40], "1914": [36, 40], "5112": [36, 40], "2324": [36, 40], "float16": [36, 40], "cdoubl": [36, 40], "3741": [36, 40], "2382": [36, 40], "5593": [36, 40], "4443": [36, 40], "complex128": [36, 40], "6122": [36, 40], "1150": [36, 40], "to_empti": [36, 38, 40], "storag": [36, 40, 85, 99], "dst_type": [36, 40], "xpu": [36, 38, 40], "zero_grad": [36, 38, 40, 88], "set_to_non": [36, 40], "reset": [36, 40], "context": [36, 40, 93], "noisili": [37, 89], "han": 37, "2018": 37, "cifar_cnn": [37, 38], "loss_coteach": [37, 38], "y_1": 37, "y_2": 37, "forget_r": 37, "class_weight": 37, "logit": [37, 55, 88], "decim": [37, 51], "quickli": [37, 80, 84, 85, 87, 88, 92, 94, 97, 98, 100], "forget": [37, 47, 100], "rate_schedul": 37, "epoch": [37, 38, 40, 87, 88], "initialize_lr_schedul": [37, 38], "lr": [37, 38, 40], "001": [37, 66, 87], "250": [37, 81, 82, 89, 93, 100], "epoch_decay_start": 37, "80": [37, 84, 92, 96, 98], "schedul": 37, "adjust": [37, 42, 60, 65, 66, 78, 89], "beta": 37, "adam": 37, "adjust_learning_r": [37, 38], "alpha_plan": 37, "beta1_plan": 37, "forget_rate_schedul": [37, 38], "num_gradu": 37, "expon": 37, "tell": [37, 85, 88, 89, 99], "train_load": [37, 40], "model1": [37, 89], "optimizer1": 37, "model2": [37, 89], "optimizer2": 37, "dataload": [37, 88, 94], "parser": 37, "parse_arg": 37, "num_iter_per_epoch": 37, "print_freq": 37, "topk": 37, "top1": 37, "top5": 37, "test_load": 37, "offici": [38, 54, 100], "wish": [38, 54, 94, 97, 100], "adj_confident_thresholds_shar": [38, 39], "labels_shar": [38, 39], "pred_probs_shar": [38, 39], "labelinspector": [38, 39, 87], "get_num_issu": [38, 39], "get_quality_scor": [38, 39], "update_confident_threshold": [38, 39], "score_label_qu": [38, 39], "split_arr": [38, 39], "span_classif": 38, "display_issu": [38, 41, 71, 72, 73, 74, 75, 76, 77, 97, 100], "mnist_pytorch": 38, "get_mnist_dataset": [38, 40], "get_sklearn_digits_dataset": [38, 40], "simplenet": [38, 40], "batch_siz": [38, 39, 40, 70, 72, 87, 88, 94, 97], "log_interv": [38, 40], "momentum": [38, 40], "no_cuda": [38, 40], "test_batch_s": [38, 40, 88], "loader": [38, 40, 88], "set_predict_proba_request": [38, 40], "set_predict_request": [38, 40], "coteach": [38, 79], "mini": [39, 70, 72, 87], "low_self_confid": [39, 42, 58], "self_confid": [39, 42, 43, 47, 58, 60, 66, 74, 76, 87, 89, 98, 99], "conveni": [39, 80, 85, 99], "script": 39, "labels_fil": [39, 87], "pred_probs_fil": [39, 87], "quality_score_kwarg": 39, "num_issue_kwarg": 39, "return_mask": 39, "variant": [39, 56, 97], "read": [39, 44, 82, 87, 89, 94, 100], "zarr": [39, 87], "memmap": [39, 97], "pythonspe": 39, "mmap": [39, 87], "hdf5": 39, "further": [39, 41, 57, 58, 60, 63, 64, 72, 73, 80, 87], "yourfil": 39, "npy": [39, 86, 87, 97], "mmap_mod": [39, 97], "tip": [39, 42, 55, 87], "save_arrai": 39, "your_arrai": 39, "disk": [39, 86, 87], "npz": [39, 100], "maxim": [39, 56, 70, 72, 97], "multiprocess": [39, 42, 58, 70, 72, 87, 88], "linux": [39, 70, 72], "physic": [39, 42, 70, 72, 93], "psutil": [39, 42, 70, 72], "labels_arrai": [39, 52], "predprob": 39, "pred_probs_arrai": 39, "back": [39, 64, 81, 87, 93, 94], "store_result": 39, "becom": [39, 94], "verifi": [39, 87, 91, 94], "long": [39, 56, 65, 91], "enough": [39, 51, 87], "chunk": [39, 95], "ram": [39, 86], "faster": [39, 65, 68, 70, 72, 87, 89], "end_index": 39, "labels_batch": 39, "pred_probs_batch": 39, "batch_result": 39, "indices_of_examples_with_issu": [39, 87], "shortcut": 39, "encount": [39, 42, 70], "1000": [39, 80, 85, 87, 94], "aggreg": [39, 43, 47, 56, 60, 63, 66, 76, 87, 89, 91], "seen": [39, 87, 94, 100], "far": [39, 56], "label_quality_scor": [39, 60, 63, 66, 69, 89, 93], "method1": 39, "method2": 39, "normalized_margin": [39, 42, 43, 47, 58, 60, 66, 74, 76], "low_normalized_margin": [39, 42, 58], "issue_indic": [39, 63, 88], "update_num_issu": 39, "arr": [39, 87], "chunksiz": 39, "convnet": 40, "bespok": [40, 55], "download": [40, 80, 87, 94], "mnist": [40, 78, 80, 86], "handwritten": 40, "digit": [40, 80, 86], "last": [40, 47, 61, 64, 81, 82, 87, 91, 93, 100], "sklearn_digits_test_s": 40, "64": [40, 84, 88, 89, 93, 98], "01": [40, 66, 68, 80, 89, 92, 93, 94, 100], "templat": 40, "flexibli": 40, "among": [40, 56, 89], "test_set": 40, "Be": 40, "overrid": 40, "train_idx": [40, 51, 94], "train_label": [40, 94, 99], "scikit": [40, 51, 65, 78, 80, 81, 82, 84, 85, 87, 90, 96, 99], "span": 41, "sentenc": [41, 50, 74, 76, 77, 85, 99], "token_classif": [41, 50, 74, 76, 77, 87], "encourag": [42, 58, 66, 69], "multilabel_classif": [42, 57, 58, 60, 66, 87, 92], "pred_probs_by_class": 42, "prune_count_matrix_col": 42, "rank_by_kwarg": [42, 58, 66, 89], "num_to_remove_per_class": [42, 58], "bad": [42, 58, 63, 66, 85, 87, 99], "seem": [42, 89, 92], "aren": 42, "confidence_weighted_entropi": [42, 43, 47, 58, 60, 66, 74, 76], "label_issues_idx": [42, 66], "entropi": [42, 44, 46, 47, 65, 66], "prune_by_class": [42, 58, 89], "predicted_neq_given": [42, 58, 89], "prune_counts_matrix": 42, "smallest": [42, 66], "unus": 42, "number_of_mislabeled_examples_in_class_k": 42, "delet": [42, 78, 87, 99], "thread": [42, 58], "window": [42, 80, 86], "shorter": [42, 61], "find_predicted_neq_given": 42, "find_label_issues_using_argmax_confusion_matrix": 42, "remove_noise_from_class": [43, 51], "clip_noise_r": [43, 51], "clip_valu": [43, 51], "value_count": [43, 51, 87], "value_counts_fill_missing_class": [43, 51], "get_missing_class": [43, 51], "round_preserving_sum": [43, 51], "round_preserving_row_tot": [43, 51], "estimate_pu_f1": [43, 51], "confusion_matrix": [43, 51], "print_square_matrix": [43, 51], "print_noise_matrix": [43, 51, 89], "print_inverse_noise_matrix": [43, 51], "print_joint_matrix": [43, 51, 89], "compress_int_arrai": [43, 51], "train_val_split": [43, 51], "subset_x_i": [43, 51], "subset_label": [43, 51], "subset_data": [43, 51], "extract_indices_tf": [43, 51], "unshuffle_tensorflow_dataset": [43, 51], "is_torch_dataset": [43, 51], "is_tensorflow_dataset": [43, 51], "csr_vstack": [43, 51], "append_extra_datapoint": [43, 51], "get_num_class": [43, 51], "num_unique_class": [43, 51], "get_unique_class": [43, 51], "format_label": [43, 51], "smart_display_datafram": [43, 51], "force_two_dimens": [43, 51], "latent_algebra": [43, 79], "compute_ps_py_inv_noise_matrix": [43, 45], "compute_py_inv_noise_matrix": [43, 45], "compute_inv_noise_matrix": [43, 45], "compute_noise_matrix_from_invers": [43, 45], "compute_pi": [43, 45], "compute_pyx": [43, 45], "label_quality_util": 43, "get_normalized_entropi": [43, 44], "multilabel_util": [43, 92], "stack_compl": [43, 48], "get_onehot_num_class": [43, 48], "int2onehot": [43, 48, 92], "onehot2int": [43, 48, 92], "multilabel_scor": [43, 60], "classlabelscor": [43, 47], "exponential_moving_averag": [43, 47, 60], "softmin": [43, 47, 60, 63, 72, 76], "possible_method": [43, 47], "multilabelscor": [43, 47], "get_class_label_quality_scor": [43, 47], "multilabel_pi": [43, 47], "get_cross_validated_multilabel_pred_prob": [43, 47], "transform_distances_to_scor": [43, 49], "token_classification_util": [43, 100], "get_sent": [43, 50, 100], "filter_sent": [43, 50, 100], "process_token": [43, 50], "merge_prob": [43, 50], "color_sent": [43, 50], "assert_valid_input": [43, 52], "assert_valid_class_label": [43, 52], "assert_nonempty_input": [43, 52], "assert_indexing_work": [43, 52], "labels_to_arrai": [43, 52], "labels_to_list_multilabel": [43, 52], "min_allowed_prob": 44, "wikipedia": 44, "activ": [44, 46, 56, 78, 91], "towardsdatasci": 44, "cheatsheet": 44, "ec57bc067c0b": 44, "clip": [44, 51, 80], "behav": 44, "unnecessari": [44, 87], "slightli": [44, 98, 99], "interv": [44, 47, 94], "herein": 45, "inexact": 45, "cours": 45, "propag": 45, "throughout": [45, 51, 68, 80, 91, 97, 100], "increas": [45, 63, 65, 66, 80, 81, 87, 91, 92, 100], "dot": [45, 76, 87], "true_labels_class_count": 45, "pyx": 45, "multiannot": 46, "assert_valid_inputs_multiannot": 46, "labels_multiannot": [46, 56], "ensembl": [46, 47, 56, 66, 84, 87, 92, 94, 96, 98], "allow_single_label": 46, "annotator_id": 46, "assert_valid_pred_prob": 46, "pred_probs_unlabel": [46, 56], "format_multiannotator_label": [46, 56, 91], "formatted_label": [46, 51], "old": [46, 51, 79, 80, 86], "check_consensus_label_class": 46, "consensus_label": [46, 56, 91], "consensus_method": [46, 56], "consensu": [46, 56, 78, 90, 100], "establish": [46, 96, 99], "compute_soft_cross_entropi": 46, "soft": [46, 86], "find_best_temp_scal": 46, "coarse_search_rang": [46, 68, 87], "fine_search_s": [46, 68, 87], "temperatur": [46, 47, 63, 72, 76], "scale": [46, 49, 86, 87, 94, 97, 98], "factor": [46, 47, 49, 70, 72], "minim": [46, 63, 94], "temp_scale_pred_prob": 46, "temp": 46, "sharpen": [46, 86], "smoothen": 46, "get_normalized_margin_for_each_label": [47, 66], "get_confidence_weighted_entropy_for_each_label": [47, 66], "75": [47, 81, 82, 86, 91, 92, 93, 96, 100], "scorer": 47, "alpha": [47, 60, 63, 81, 82, 89, 92, 96], "exponenti": 47, "ema": 47, "s_1": 47, "s_k": 47, "ema_k": 47, "accord": [47, 58, 84, 85, 89, 100], "formula": [47, 49], "_t": 47, "cdot": 47, "s_t": 47, "qquad": 47, "leq": 47, "_1": 47, "give": [47, 66, 89, 91, 97], "recent": [47, 100], "success": 47, "previou": [47, 87, 88, 93], "discount": 47, "s_ema": 47, "175": [47, 88, 89, 93], "underflow": 47, "nan": [47, 56, 84, 91, 96, 98], "aggregated_scor": 47, "base_scor": 47, "base_scorer_kwarg": 47, "aggregator_kwarg": [47, 60], "n_sampl": 47, "n_label": 47, "worst": [47, 91], "class_label_quality_scor": 47, "42": [47, 85, 86, 93, 100], "452": 47, "new_scor": 47, "575": 47, "get_label_quality_scores_per_class": [47, 59, 60], "ml_scorer": 47, "binar": [47, 48], "reformat": [47, 80], "wider": 47, "splitter": 47, "kfold": [47, 88], "onevsrestclassifi": [47, 92], "randomforestclassifi": [47, 89, 92], "n_split": [47, 82, 88, 92], "pred_prob_slic": 48, "onehot": 48, "hot": [48, 58, 64, 70, 73, 84, 86, 87, 96, 97, 98], "onehot_matrix": 48, "avg_dist": 49, "scaling_factor": 49, "exp": [49, 65, 66, 81], "dt": 49, "right": [49, 61, 64, 85, 92, 93, 94, 99], "strength": [49, 64], "pronounc": 49, "differenti": 49, "ly": 49, "rule": [49, 50, 86], "thumb": 49, "ood_features_scor": [49, 65, 94], "88988177": 49, "80519832": 49, "readabl": 50, "lambda": [50, 80, 81, 87, 91], "long_sent": 50, "headlin": 50, "charact": [50, 51], "s1": 50, "s2": 50, "processed_token": 50, "alecnlcb": 50, "entiti": [50, 78, 87, 100], "mapped_ent": 50, "unique_ident": 50, "loc": [50, 81, 82, 88, 100], "nbitbas": [50, 60], "probs_merg": 50, "55": [50, 86, 93, 96], "0125": [50, 76], "0375": 50, "075": 50, "025": 50, "color": [50, 73, 81, 82, 84, 89, 92, 94, 96, 97], "red": [50, 64, 81, 82, 86, 89, 92, 93, 94, 97], "colored_sent": 50, "termcolor": 50, "31msentenc": 50, "0m": 50, "ancillari": 51, "class_without_nois": 51, "any_other_class": 51, "choos": [51, 66, 84, 87, 89, 96, 98], "tradition": 51, "new_sum": 51, "fill": 51, "come": [51, 81, 82, 87, 97], "major": [51, 56, 79, 88, 94], "versu": [51, 89], "obviou": 51, "cgdeboer": 51, "iteround": 51, "reach": 51, "prob_s_eq_1": 51, "claesen": 51, "f1": [51, 64, 85, 89], "BE": 51, "left_nam": 51, "top_nam": 51, "titl": [51, 81, 82, 89, 92, 94], "short_titl": 51, "round_plac": 51, "pretti": [51, 89], "joint_matrix": 51, "num_possible_valu": 51, "holdout_idx": 51, "extract": [51, 65, 80, 85, 91, 94, 97, 99], "allow_shuffl": 51, "turn": [51, 78, 93], "shuffledataset": 51, "histori": 51, "pre_x": 51, "buffer_s": 51, "csr_matric": 51, "append": [51, 80, 86, 87, 88, 89, 91, 92, 93, 94, 100], "bottom": [51, 61, 64, 93], "to_data": 51, "from_data": 51, "taken": 51, "label_matrix": 51, "canon": 51, "displai": [51, 64, 73, 77, 80, 85, 89, 99, 100], "jupyt": [51, 80, 81, 82, 86, 87, 88, 89, 91, 92, 94, 96, 100], "notebook": [51, 56, 80, 82, 86, 87, 89, 91, 92, 93, 97, 100], "consol": 51, "html": [51, 61, 64, 65, 84, 87, 89], "allow_missing_class": 52, "allow_one_class": 52, "length_x": 52, "labellik": 52, "labels_list": [52, 58], "keraswrappermodel": [54, 55, 78], "keraswrappersequenti": [54, 55], "tf": [55, 80], "legaci": 55, "lack": 55, "keraswrapp": 55, "huggingface_keras_imdb": 55, "unit": [55, 100], "model_kwarg": [55, 68], "compile_kwarg": 55, "sparsecategoricalcrossentropi": 55, "layer": [55, 80, 85, 94, 99], "dens": 55, "my_keras_model": 55, "from_logit": 55, "declar": 55, "apply_softmax": 55, "analysi": 56, "analyz": [56, 78, 89, 91, 92], "get_label_quality_multiannot": [56, 91], "vote": 56, "crowdsourc": [56, 78, 91], "dawid": [56, 91], "skene": [56, 91], "analog": [56, 86, 91], "chosen": [56, 66, 87, 91], "crowdlab": [56, 91], "unlabel": [56, 84, 85, 88, 91, 94, 97], "decid": [56, 85, 86, 91, 96, 99, 100], "get_active_learning_scor": [56, 91], "activelab": [56, 91], "priorit": [56, 63, 93, 97, 100], "showcas": 56, "main": 56, "best_qual": 56, "quality_method": 56, "calibrate_prob": 56, "return_detailed_qu": 56, "return_annotator_stat": 56, "return_weight": 56, "label_quality_score_kwarg": 56, "necessarili": [56, 64, 85, 89], "did": [56, 57, 80, 84, 89, 91, 96, 98, 99], "majority_vot": 56, "broken": [56, 64, 86, 96], "highest": [56, 64, 81, 88, 95], "0th": 56, "consensus_quality_scor": [56, 91], "annotator_agr": [56, 91], "reman": 56, "1st": 56, "2nd": [56, 70], "3rd": 56, "consensus_label_suffix": 56, "consensus_quality_score_suffix": 56, "suffix": 56, "emsembl": 56, "weigh": [56, 86], "agreement": [56, 91], "agre": 56, "prevent": [56, 87], "overconfid": [56, 95], "wrong": [56, 61, 63, 79, 81, 82, 85, 87, 89, 93, 99], "detailed_label_qu": [56, 91], "annotator_stat": [56, 91], "model_weight": 56, "annotator_weight": 56, "warn": [56, 81, 82, 87], "labels_info": 56, "num_annot": [56, 91], "deriv": [56, 91], "quality_annotator_1": 56, "quality_annotator_2": 56, "quality_annotator_m": 56, "annotator_qu": [56, 91], "num_examples_label": [56, 91], "agreement_with_consensu": [56, 91], "worst_class": [56, 91], "trustworthi": [56, 91, 96], "get_label_quality_multiannotator_ensembl": 56, "weigtht": 56, "budget": 56, "retrain": [56, 96, 99], "active_learning_scor": 56, "improv": [56, 82, 86, 87, 88, 89, 96, 97, 98, 99], "active_learning_scores_unlabel": 56, "get_active_learning_scores_ensembl": 56, "henc": [56, 80, 81, 91], "get_majority_vote_label": [56, 91], "event": 56, "lastli": [56, 84], "convert_long_to_wide_dataset": 56, "labels_multiannotator_long": 56, "wide": [56, 80, 98, 99], "suitabl": [56, 84, 98], "labels_multiannotator_wid": 56, "common_multilabel_issu": [57, 59], "mutual": [57, 92], "exclus": [57, 92], "rank_classes_by_multilabel_qu": [57, 59], "overall_multilabel_health_scor": [57, 59], "multilabel_health_summari": [57, 59], "classes_by_multilabel_qu": 57, "inner": [58, 72], "find_multilabel_issues_per_class": [58, 59], "per_class_label_issu": 58, "label_issues_list": 58, "pred_probs_list": [58, 66, 88, 89], "anim": [59, 94], "rat": 59, "predat": 59, "pet": 59, "reptil": 59, "manner": [60, 91, 96, 98, 99], "box": [61, 63, 64, 86, 93], "object_detect": [61, 63, 64, 93], "return_indices_ranked_by_scor": [61, 93], "overlapping_label_check": [61, 63], "suboptim": [61, 63], "locat": [61, 63, 93, 97, 100], "bbox": [61, 64, 93], "image_nam": [61, 64], "y1": [61, 64, 93], "y2": [61, 64, 93], "later": [61, 64, 65, 99, 100], "corner": [61, 64, 93], "xyxi": [61, 64, 93], "io": [61, 64, 80, 86], "keras_cv": [61, 64], "bounding_box": [61, 64, 93], "detectron": [61, 64, 93], "detectron2": [61, 64, 93], "readthedoc": [61, 64], "en": [61, 64], "latest": [61, 64], "visual": [61, 62, 64, 81, 82, 88, 96, 98, 100], "draw_box": [61, 64], "mmdetect": [61, 64, 93], "swap": [61, 63, 73, 77], "penal": [61, 63], "concern": [61, 63, 78, 82], "issues_from_scor": [62, 63, 71, 72, 73, 75, 76, 77, 93, 97, 100], "compute_overlooked_box_scor": [62, 63], "compute_badloc_box_scor": [62, 63], "compute_swap_box_scor": [62, 63], "pool_box_scores_per_imag": [62, 63], "object_counts_per_imag": [62, 64, 93], "bounding_box_size_distribut": [62, 64, 93], "class_label_distribut": [62, 64, 93], "get_sorted_bbox_count_idx": [62, 64], "plot_class_size_distribut": [62, 64], "plot_class_distribut": [62, 64], "get_average_per_class_confusion_matrix": [62, 64], "calculate_per_class_metr": [62, 64], "aggregation_weight": 63, "imperfect": [63, 87], "chose": [63, 91, 93], "imperfectli": [63, 93], "dirti": [63, 66, 69, 96], "subtyp": 63, "badloc": 63, "nonneg": 63, "high_probability_threshold": 63, "auxiliary_input": [63, 64], "vari": [63, 82], "iou": [63, 64], "heavili": 63, "auxiliarytypesdict": 63, "pred_label": [63, 99], "pred_label_prob": 63, "pred_bbox": 63, "lab_label": 63, "lab_bbox": 63, "similarity_matrix": 63, "min_possible_similar": 63, "scores_overlook": 63, "low_probability_threshold": 63, "scores_badloc": 63, "accident": [63, 84, 85, 87, 99], "scores_swap": 63, "box_scor": 63, "image_scor": [63, 72, 97], "discov": [64, 82, 100], "auxiliari": [64, 94, 97], "_get_valid_inputs_for_compute_scor": 64, "object_count": 64, "down": 64, "bbox_siz": 64, "class_distribut": 64, "plot": [64, 81, 82, 89, 92, 94, 96, 97], "sorted_idx": [64, 94], "class_to_show": 64, "hidden": [64, 94], "max_class_to_show": 64, "prediction_threshold": 64, "overlai": [64, 93], "figsiz": [64, 81, 82, 88, 89, 92, 94], "save_path": [64, 93], "blue": [64, 86, 89, 93], "overlaid": 64, "side": [64, 86, 93], "figur": [64, 89, 92, 94, 96], "extens": [64, 89, 91], "png": [64, 93], "pdf": [64, 65], "svg": 64, "matplotlib": [64, 81, 82, 88, 89, 92, 93, 94, 96], "num_proc": [64, 88], "intersect": [64, 87], "tp": 64, "fp": 64, "ground": [64, 86, 89, 91, 96], "truth": [64, 89, 91, 96], "bias": 64, "avg_metr": 64, "distionari": 64, "95": [64, 74, 76, 84, 86, 89, 96], "per_class_metr": 64, "Of": 65, "li": 65, "smaller": [65, 92, 93], "find_top_issu": [65, 66, 94], "reli": [65, 80, 81, 82, 85, 93, 94, 96, 99], "dist_metr": 65, "dim": [65, 88, 97], "subtract": [65, 66], "renorm": [65, 66, 87], "least_confid": 65, "sum_": 65, "log": [65, 66, 79], "softmax": [65, 72, 76, 88], "literatur": 65, "gen": 65, "liu": 65, "lochman": 65, "zach": 65, "openaccess": 65, "thecvf": 65, "cvpr2023": 65, "liu_gen_pushing_the_limits_of_softmax": 65, "based_out": 65, "distribution_detection_cvpr_2023_pap": 65, "fit_scor": [65, 94], "ood_predictions_scor": 65, "pretrain": [65, 80, 85, 94, 99], "adjust_confident_threshold": 65, "probabilist": [65, 80, 81, 82, 84, 85, 94, 95, 98], "order_label_issu": [66, 79], "whichev": [66, 95], "argsort": [66, 85, 88, 89, 93, 94, 96, 99], "max_": 66, "get_label_quality_ensemble_scor": [66, 87, 89], "weight_ensemble_members_bi": 66, "custom_weight": 66, "log_loss_search_t_valu": 66, "0001": [66, 86], "scheme": 66, "log_loss_search": 66, "log_loss": [66, 85], "1e0": 66, "1e1": 66, "1e2": 66, "2e2": 66, "quality_scor": [66, 94], "forth": 66, "top_issue_indic": 66, "rank_bi": [66, 79], "weird": [66, 77], "minu": 66, "prob_label": 66, "max_prob_not_label": 66, "idea": [66, 93], "AND": [66, 85], "get_epistemic_uncertainti": [67, 68], "get_aleatoric_uncertainti": [67, 68], "corrupt": [68, 96], "linearregress": [68, 87, 96], "y_with_nois": 68, "n_boot": [68, 87], "include_aleatoric_uncertainti": [68, 87], "sole": [68, 81, 91, 94, 98], "bootstrap": [68, 87, 96], "resampl": [68, 80, 87], "epistem": [68, 87, 94, 96], "aleator": [68, 87, 96], "model_final_kwarg": 68, "coars": 68, "thorough": [68, 87], "fine": [68, 80, 85, 94, 99], "grain": 68, "grid": 68, "varianc": [68, 89], "epistemic_uncertainti": 68, "residu": [68, 69, 87], "deviat": [68, 93, 96], "aleatoric_uncertainti": 68, "outr": 69, "contin": 69, "raw": [69, 78, 79, 82, 86, 88, 91, 93, 94, 96], "aka": [69, 80, 89, 93, 96, 100], "00323821": 69, "33692597": 69, "00191686": 69, "semant": [70, 72, 73, 90], "pixel": [70, 72, 73, 94, 97], "h": [70, 72, 73, 97], "height": [70, 72, 73, 97], "w": [70, 72, 73, 97], "width": [70, 72, 73, 97], "labels_one_hot": [70, 73, 97], "stream": [70, 94, 100], "downsampl": [70, 72, 97], "shrink": [70, 72], "divis": [70, 72, 81], "common_label_issu": [71, 73, 75, 77, 97, 100], "filter_by_class": [71, 73, 97], "segmant": [72, 73], "num_pixel_issu": [72, 97], "product": [72, 87, 88], "pixel_scor": [72, 97], "highlight": [73, 77, 81, 82, 84, 97], "enter": 73, "legend": [73, 81, 82, 92, 93, 96, 97], "colormap": 73, "background": 73, "person": [73, 87, 93, 97, 100], "ambigu": [73, 77, 80, 85, 86, 89, 99, 100], "systemat": [73, 77, 91], "misunderstood": [73, 77], "issues_df": [73, 88], "class_index": 73, "issues_subset": [73, 77], "filter_by_token": [75, 77, 100], "token_score_method": 76, "sentence_score_method": 76, "sentence_score_kwarg": 76, "compris": [76, 77], "token_scor": [76, 100], "converg": 76, "toward": 76, "_softmin_sentence_scor": 76, "sentence_scor": [76, 100], "token_info": 76, "70": [76, 84], "02": [76, 81, 82, 89, 93], "03": [76, 84, 86, 89, 93, 100], "04": [76, 84, 93], "08": [76, 89, 93, 96, 100], "commonli": [77, 79, 81, 82, 92, 100], "But": [77, 85, 89, 96, 100], "restrict": [77, 87], "reliabl": [78, 80, 87, 91, 97, 98], "thousand": 78, "imagenet": [78, 86], "popular": [78, 91, 93], "centric": [78, 84, 85, 88, 90], "capabl": 78, "minut": [78, 80, 84, 85, 86, 91, 92, 93, 96, 97, 98, 99, 100], "conda": 78, "feature_embed": [78, 94], "Then": [78, 87, 88, 98, 99], "your_dataset": [78, 80, 81, 82, 84, 85, 87, 88], "column_name_of_label": [78, 80, 81, 82, 84, 85, 88], "plagu": [78, 82], "untrain": 78, "\u30c4": 78, "label_issues_info": [78, 82], "sklearn_compatible_model": 78, "framework": [78, 92, 93], "complianc": 78, "tag": [78, 92, 100], "sequenc": 78, "recognit": [78, 80, 87, 100], "train_data": [78, 94, 96, 98, 99], "gotten": 78, "test_data": [78, 89, 92, 94, 96, 98, 99], "deal": [78, 82], "tutori": [78, 80, 81, 82, 84, 85, 87, 88, 89, 91, 92, 93, 94, 96, 97, 98, 99, 100], "feel": [78, 80, 82, 87], "free": [78, 80, 82, 84, 85, 87, 88, 89], "ask": [78, 87], "slack": [78, 87], "project": [78, 96], "welcom": 78, "commun": [78, 87], "guidelin": [78, 93], "piec": 78, "studio": [78, 82, 84, 85, 87, 88], "platform": [78, 84, 85, 87, 88], "automl": [78, 87], "foundat": 78, "smart": [78, 84, 85, 87, 88], "edit": [78, 87], "easier": [78, 89], "unreli": [78, 80, 84, 85, 98], "link": [78, 80, 86, 93], "older": 79, "outlin": 79, "substitut": 79, "v2": [79, 84, 98], "get_noise_indic": 79, "psx": 79, "sorted_index_method": 79, "order_label_error": 79, "label_errors_bool": 79, "latent_estim": 79, "num_label_error": 79, "learningwithnoisylabel": 79, "neatli": 79, "organ": [79, 84, 86, 98, 100], "reorgan": 79, "baseline_method": 79, "incorpor": [79, 89], "research": [79, 89], "polyplex": 79, "terminologi": 79, "label_error": 79, "quickstart": [80, 81, 82, 84, 85, 86, 88, 91, 92, 93, 94, 96, 97, 98, 99, 100], "spoken": 80, "500": [80, 94, 100], "english": [80, 86], "pronunci": 80, "wav": 80, "huggingfac": [80, 81, 82, 88], "voxceleb": 80, "speech": [80, 100], "your_pred_prob": [80, 81, 82, 84, 85], "tensorflow_io": 80, "huggingface_hub": 80, "branch": [80, 81, 82, 84, 85, 86, 88, 89, 91, 92, 93, 94, 96, 98, 99], "reproduc": [80, 84, 89, 91], "command": 80, "wget": [80, 93, 97, 100], "navig": 80, "browser": 80, "jakobovski": 80, "archiv": [80, 100], "v1": 80, "tar": [80, 94], "gz": [80, 94], "mkdir": [80, 100], "spoken_digit": 80, "xf": 80, "6_nicolas_32": 80, "data_path": 80, "listdir": 80, "nondeterminist": 80, "file_nam": 80, "endswith": 80, "file_path": 80, "join": [80, 87, 88], "39": [80, 81, 85, 86, 87, 88, 93, 96, 97, 99, 100], "7_george_26": 80, "0_nicolas_24": 80, "0_nicolas_6": 80, "listen": 80, "display_exampl": 80, "click": [80, 81, 82, 86, 88, 89, 91, 92, 94, 96, 100], "expand": [80, 81, 82, 86, 88, 89, 91, 92, 94, 96, 100], "pulldown": [80, 81, 82, 86, 88, 89, 91, 92, 94, 96, 100], "colab": [80, 81, 82, 86, 87, 88, 89, 91, 92, 94, 96, 100], "tfio": 80, "pathlib": 80, "ipython": 80, "load_wav_16k_mono": 80, "filenam": 80, "khz": 80, "file_cont": 80, "read_fil": 80, "sample_r": 80, "decode_wav": 80, "desired_channel": 80, "squeez": 80, "rate_in": 80, "rate_out": 80, "16000": 80, "wav_file_nam": 80, "audio_r": 80, "wav_file_exampl": 80, "plai": [80, 86, 87], "button": 80, "wav_file_name_exampl": 80, "7_jackson_43": 80, "hear": 80, "extractor": 80, "encoderclassifi": 80, "spkrec": 80, "xvect": 80, "feature_extractor": 80, "from_hparam": 80, "run_opt": 80, "uncom": 80, "ffmpeg": 80, "system": [80, 84, 85, 88, 97], "backend": 80, "wav_audio_file_path": 80, "head": [80, 82, 84, 85, 86, 88, 89, 91, 96, 98, 99], "torchaudio": 80, "extract_audio_embed": 80, "emb": [80, 88], "signal": 80, "encode_batch": 80, "embeddings_list": [80, 88], "embeddings_arrai": 80, "opt": [80, 82, 85, 99], "hostedtoolcach": [80, 82, 85, 99], "x64": [80, 82, 85, 99], "lib": [80, 82, 85, 99], "python3": [80, 82, 85, 99], "site": [80, 82, 85, 99], "650": [80, 88], "userwarn": [80, 81, 82, 85, 99], "stft": 80, "return_complex": 80, "view_as_r": 80, "recov": 80, "trigger": 80, "aten": 80, "src": 80, "nativ": 80, "spectralop": 80, "cpp": 80, "863": [80, 99], "_vf": 80, "n_fft": 80, "hop_length": 80, "win_length": 80, "attr": 80, "512": [80, 88], "14": [80, 81, 82, 84, 85, 86, 87, 88, 89, 91, 92, 93, 94, 96, 97, 98, 99, 100], "196311": 80, "319459": 80, "478975": 80, "2890875": 80, "8170238": 80, "89265": 80, "24": [80, 86, 89, 91, 93, 96], "898056": 80, "256195": 80, "559641": 80, "559721": 80, "62067": 80, "285245": 80, "21": [80, 81, 86, 87, 89, 93, 96, 100], "709627": 80, "5033693": 80, "913803": 80, "819831": 80, "1831515": 80, "208763": 80, "084257": 80, "3210397": 80, "005453": 80, "216152": 80, "478235": 80, "6821785": 80, "053807": 80, "242471": 80, "091424": 80, "78334856": 80, "03954": 80, "23": [80, 86, 88, 89, 93, 96], "569176": 80, "19": [80, 85, 86, 87, 88, 89, 93, 94, 96, 97, 99], "761097": 80, "1258295": 80, "753237": 80, "3508866": 80, "598274": 80, "23712": 80, "2500": 80, "leverag": [80, 85, 87, 89, 91, 99], "tune": [80, 85, 86, 94, 99], "computation": [80, 85, 99], "intens": [80, 85, 99], "held": [80, 84, 85, 86, 93, 94, 95, 98], "straightforward": [80, 84, 98], "benefit": [80, 95, 97, 98], "tol": 80, "num_crossval_fold": [80, 84, 91, 98], "decreas": [80, 87], "accuracy_scor": [80, 85, 89, 98, 99], "cv_accuraci": 80, "9708": 80, "probabilit": [80, 99], "9976": 80, "986": 80, "002161": 80, "176": [80, 86, 89, 92], "002483": 80, "2318": 80, "004411": 80, "1005": 80, "004857": 80, "1871": 80, "007494": 80, "investig": 80, "040587": 80, "999207": 80, "999377": 80, "975220": 80, "999367": 80, "18": [80, 85, 86, 87, 89, 93, 94, 96, 97, 99], "identified_label_issu": [80, 85], "lowest_quality_label": [80, 85, 89, 96, 99], "sort_valu": [80, 82, 84, 85, 87, 88, 89, 91, 92, 96], "516": 80, "1946": 80, "469": 80, "2132": 80, "worth": [80, 89], "iloc": [80, 84, 85, 96, 98, 99], "6_yweweler_25": 80, "7_nicolas_43": 80, "6_theo_27": 80, "6_yweweler_36": 80, "6_yweweler_14": 80, "6_yweweler_35": 80, "6_nicolas_8": 80, "sound": 80, "quit": [80, 94], "22": [80, 81, 86, 88, 89, 92, 93, 100], "blindli": [80, 87, 96, 98, 99], "trust": [80, 87, 89, 91, 95, 96, 98, 99], "underneath": 81, "hood": 81, "alert": 81, "introduct": 81, "mayb": [81, 82, 85], "examin": [81, 82, 84, 93, 98], "your_feature_matrix": [81, 82], "toi": [81, 82, 86, 88, 89, 91], "train_test_split": [81, 82, 94, 98, 99], "inf": [81, 82], "mid": [81, 82], "bins_map": [81, 82], "create_data": [81, 82], "y_bin": [81, 82], "y_i": [81, 82], "y_bin_idx": [81, 82], "y_train": [81, 82, 89, 96], "y_test": [81, 82, 89, 96], "y_train_idx": [81, 82], "y_test_idx": [81, 82], "test_siz": [81, 82, 98, 99], "slide": [81, 82, 86], "decis": [81, 82, 98], "frame": [81, 82], "x_out": [81, 82], "tini": [81, 82], "concaten": [81, 82, 87, 95], "y_out": [81, 82], "y_out_bin": [81, 82], "y_out_bin_idx": [81, 82], "exact_duplicate_idx": [81, 82], "x_duplic": [81, 82], "y_duplic": [81, 82], "y_duplicate_idx": [81, 82], "noisy_labels_idx": [81, 82, 92], "scatter": [81, 82, 89, 92, 96], "black": [81, 82, 86, 96], "cyan": [81, 82], "pyplot": [81, 82, 88, 89, 92, 94, 96], "plt": [81, 82, 88, 89, 92, 94, 96], "plot_data": [81, 82, 89, 92, 96], "fig": [81, 82, 86, 88, 94, 96], "ax": [81, 82, 88, 94, 96], "subplot": [81, 82, 88, 94], "set_titl": [81, 82, 88, 94], "set_xlabel": [81, 82], "x_1": [81, 82], "fontsiz": [81, 82, 88, 89, 92], "set_ylabel": [81, 82], "x_2": [81, 82], "set_xlim": [81, 82], "set_ylim": [81, 82], "linestyl": [81, 82], "circl": [81, 82, 89, 92], "misclassifi": [81, 82], "zip": [81, 82, 88, 93, 100], "label_err": [81, 82], "180": [81, 82, 93], "marker": [81, 82], "facecolor": [81, 82], "edgecolor": [81, 82], "linewidth": [81, 82, 94], "dup": [81, 82], "first_legend": [81, 82], "align": [81, 82], "title_fontproperti": [81, 82], "semibold": [81, 82], "second_legend": [81, 82], "45": [81, 82, 86, 89, 93], "gca": [81, 82], "add_artist": [81, 82], "tight_layout": [81, 82], "ideal": [81, 82], "logist": [81, 82, 85, 91, 94, 99], "remaind": 81, "modal": [81, 82, 87, 91], "132": [81, 82, 89, 93], "9318": 81, "77": [81, 82, 84, 93, 98], "006940": 81, "007830": 81, "40": [81, 82, 85, 86], "014828": 81, "107": [81, 82, 89, 92], "021241": 81, "120": [81, 82, 98], "026407": 81, "notic": [81, 89, 91, 93], "3558": [81, 82], "126": [81, 82, 89, 93], "006636": [81, 82], "130": [81, 82], "012571": [81, 82], "129": [81, 82], "127": [81, 82], "014909": [81, 82], "128": [81, 82, 88], "017443": [81, 82], "6160": [81, 82], "is_near_duplicate_issu": [81, 82, 84, 85, 87, 88, 89], "131": [81, 82, 97], "000000e": [81, 82], "00": [81, 82, 84, 86, 94, 98], "000002": [81, 82], "463180e": [81, 82], "07": [81, 82, 84, 88, 89, 93, 96], "51": [81, 82, 84, 86, 89, 93], "161148": [81, 82], "859087e": [81, 82], "30": [81, 82, 86, 87, 88, 92, 97, 100], "3453": 81, "029542": 81, "031182": 81, "057961": 81, "058244": 81, "home": [81, 82, 85, 86, 99], "runner": [81, 82, 85, 99], "348": 81, "378": 81, "357": 81, "34": [81, 86, 89, 91, 93, 100], "54": [81, 86, 89, 93, 100], "039122": 81, "53": [81, 82, 84, 86, 92, 93, 98], "044598": 81, "105": [81, 93], "105196": 81, "133654": 81, "43": [81, 86, 89, 93], "168033": 81, "125": 81, "101107": 81, "37": [81, 86, 100], "183382": 81, "109": [81, 86, 93], "209259": 81, "211042": 81, "221316": 81, "average_ood_scor": 81, "34530442089193386": 81, "52": [81, 86, 93, 100], "169820": 81, "087324e": 81, "89": [81, 84, 93, 96, 99], "92": [81, 89, 93, 98], "259024": 81, "583757e": 81, "91": [81, 93], "346458": 81, "341292e": 81, "specfi": 81, "new_lab": 81, "scoring_funct": 81, "div": 81, "rem": 81, "inv_scal": 81, "49": [81, 86, 89, 93], "superstitionissuemanag": 81, "unlucki": 81, "superstit": 81, "to_seri": 81, "issues_mask": 81, "summary_scor": 81, "9242": 81, "is_superstition_issu": 81, "superstition_scor": 81, "26": [81, 86, 88, 89, 91, 93], "047581": 81, "090635": 81, "129591": 81, "65": [81, 93, 98], "164840": 81, "demo": [82, 84, 92, 98], "lurk": [82, 88, 89], "_split": 82, "737": 82, "thoroughli": 82, "preprocess": [82, 84, 94, 96, 98, 99], "904": 82, "review": [82, 84, 85, 86, 87, 89, 93, 96, 97, 98, 99, 100], "8561": 82, "001908": 82, "58": [82, 84, 86, 89, 93, 98], "003564": 82, "007331": 82, "008963": 82, "009664": 82, "0227": 82, "is_class_imbalance_issu": 82, "022727": 82, "86": [82, 84, 88, 89, 93, 96, 98], "87": [82, 88, 93, 96, 99], "auto": [82, 86, 87, 96, 98, 99], "conceptu": 82, "856061": 82, "355772": 82, "616034": 82, "821750": 82, "901562": 82, "betweeen": 82, "is_null_issu": 82, "is_non_iid_issu": [82, 84, 85, 89], "is_underperforming_group_issu": 82, "859131": 82, "417707": 82, "664083": 82, "970324": 82, "816953": 82, "375317": 82, "641516": 82, "890575": 82, "531021": 82, "460593": 82, "601188": 82, "826147": 82, "752808": 82, "321635": 82, "562539": 82, "948362": 82, "090243": 82, "472909": 82, "746763": 82, "878267": 82, "examples_w_issu": [82, 87], "013445": 82, "025184": 82, "026376": 82, "inde": [82, 85], "miscellan": [82, 100], "428571": 82, "111111": 82, "571429": 82, "407407": 82, "592593": 82, "337838": 82, "092593": 82, "662162": 82, "333333": [82, 86], "952381": 82, "666667": 82, "portion": 82, "huge": [82, 89], "worri": [82, 85], "critic": 82, "highli": [82, 88], "sql": [84, 98], "databas": [84, 98], "excel": [84, 98], "parquet": [84, 98], "student": [84, 96, 98, 100], "grade": [84, 96, 98], "900": [84, 96, 98], "exam": [84, 96, 98], "letter": [84, 98, 100], "hundr": [84, 98], "histgradientboostingclassifi": 84, "standardscal": [84, 94, 98], "grades_data": [84, 98], "read_csv": [84, 85, 96, 98, 99], "stud_id": [84, 98], "exam_1": [84, 96, 98], "exam_2": [84, 96, 98], "exam_3": [84, 96, 98], "letter_grad": [84, 98], "f48f73": [84, 98], "0bd4e7": [84, 98], "81": [84, 85, 93, 96, 98, 100], "great": [84, 86, 98], "particip": [84, 98], "cb9d7a": [84, 98], "61": [84, 89, 93, 96, 98], "94": [84, 86, 89, 93, 96, 98], "78": [84, 86, 89, 93, 96, 98], "9acca4": [84, 98], "48": [84, 86, 89, 93, 98], "x_raw": [84, 98], "cat_featur": 84, "x_encod": [84, 98], "get_dummi": [84, 96, 98], "drop_first": [84, 98], "numeric_featur": [84, 98], "scaler": [84, 94, 98], "x_process": [84, 98], "fit_transform": [84, 98], "bring": [84, 85, 88, 91, 96, 98, 99], "byod": [84, 85, 88, 91, 96, 98, 99], "boost": [84, 87, 91, 96], "xgboost": [84, 87, 96], "think": [84, 85, 87, 92, 97, 100], "carefulli": [84, 85, 88, 98], "nonzero": 84, "suspici": [84, 98], "tabl": [84, 86, 91, 98], "358": 84, "294": [84, 93], "46": [84, 86, 89, 93], "941": 84, "7109": 84, "000005": [84, 85, 96], "886": 84, "000059": 84, "709": 84, "000104": 84, "723": 84, "000169": 84, "689": 84, "000181": 84, "3590": 84, "051882e": 84, "683133e": 84, "536582e": 84, "406589e": 84, "324246e": 84, "6165": 84, "582": 84, "185": [84, 86, 93, 100], "187": [84, 86], "27": [84, 86, 89, 93, 100], "898": 84, "637": [84, 98], "0014": [84, 86], "595": 84, "702427": 84, "147": [84, 89, 93], "711186": 84, "157": [84, 89], "721394": 84, "771": 84, "731979": 84, "740335": 84, "0014153602099278074": 84, "issue_result": 84, "000842": 84, "555944": 84, "004374": 84, "sorted_issu": 84, "73": [84, 86, 92, 93, 96], "deserv": 84, "outlier_result": 84, "sorted_outli": 84, "56": [84, 86, 96], "96": [84, 86, 89, 92, 93, 96], "lt": [84, 85, 86, 91, 94], "style": [84, 97], "font": 84, "18px": 84, "ff00ff": 84, "bac": 84, "unintend": [84, 85], "mistak": [84, 85, 88, 98, 99], "duplicate_result": 84, "690": 84, "246": [84, 93], "perhap": [84, 89, 91], "twice": 84, "67": [84, 86, 93, 96], "wari": [84, 85, 87], "super": [84, 85, 88], "intent": [85, 99], "servic": [85, 87, 99], "onlin": [85, 99], "bank": [85, 86, 99], "banking77": [85, 99], "oo": [85, 99], "000": [85, 86, 88, 99, 100], "categori": [85, 88, 99], "scope": [85, 99], "dive": 85, "your_featur": 85, "sentence_transform": [85, 99], "sentencetransform": [85, 99], "payment": [85, 99], "cancel_transf": [85, 99], "transfer": [85, 99], "fund": [85, 99], "cancel": [85, 99], "transact": [85, 99], "my": [85, 99], "revert": [85, 99], "morn": [85, 99], "realis": [85, 99], "yesterdai": [85, 99], "rent": [85, 99], "realli": [85, 91, 97, 99], "tomorrow": [85, 99], "raw_text": [85, 99], "getting_spare_card": [85, 99], "supported_cards_and_curr": [85, 99], "card_payment_fee_charg": [85, 99], "visa_or_mastercard": [85, 99], "beneficiary_not_allow": [85, 99], "apple_pay_or_google_pai": [85, 99], "lost_or_stolen_phon": [85, 99], "change_pin": [85, 99], "card_about_to_expir": [85, 99], "utter": [85, 99], "suit": [85, 86, 87, 99], "electra": [85, 99], "discrimin": [85, 99], "googl": [85, 99], "text_embed": 85, "No": [85, 87, 99], "google_electra": [85, 99], "pool": [85, 87, 94, 99], "_util": [85, 99], "831": [85, 99], "typedstorag": [85, 99], "untypedstorag": [85, 99], "untyped_storag": [85, 99], "fget": [85, 99], "__get__": [85, 99], "owner": [85, 99], "400": [85, 99], "data_dict": [85, 89, 91], "85": [85, 93], "38": [85, 86, 93], "9710": 85, "981": 85, "974": 85, "000146": 85, "982": [85, 86], "000224": 85, "971": 85, "000507": 85, "980": [85, 86], "000960": 85, "3584": 85, "994": 85, "009642": 85, "999": 85, "013067": 85, "013841": 85, "433": 85, "014722": 85, "989": 85, "018224": 85, "6070": 85, "160": [85, 96], "095724": 85, "148": 85, "006237": 85, "546": 85, "099341": 85, "514": 85, "006485": 85, "481": 85, "123418": 85, "008165": 85, "0000": [85, 86, 89], "313": [85, 93], "564102": 85, "572258": 85, "28": [85, 86, 88, 89, 91, 100], "574915": 85, "31": [85, 86, 89, 91, 93], "575507": 85, "575874": 85, "792090": 85, "257611": 85, "698710": 85, "182121": 85, "771619": 85, "to_numpi": [85, 87, 96, 99], "data_with_suggested_label": 85, "suggested_label": 85, "charg": [85, 99], "cash": [85, 99], "holidai": [85, 99], "sent": [85, 99, 100], "card": [85, 86, 99], "mine": [85, 99], "expir": [85, 99], "me": [85, 99], "withdraw": 85, "monei": 85, "whoever": [85, 99], "outlier_issu": [85, 88], "lowest_quality_outli": 85, "OR": 85, "636c65616e6c616220697320617765736f6d6521": 85, "phone": [85, 86], "gone": 85, "gt": [85, 91, 100], "samp": 85, "br": 85, "press": [85, 100], "nonsens": 85, "sens": 85, "detriment": 85, "duplicate_issu": 85, "fee": 85, "pai": 85, "go": [85, 86, 89], "strongli": 85, "p_valu": 85, "benign": 85, "shortlist": [85, 96, 99], "curat": [85, 90], "mnist_test_set": 86, "imagenet_val_set": 86, "tench": 86, "goldfish": 86, "white": [86, 100], "shark": 86, "tiger": 86, "hammerhead": 86, "electr": 86, "rai": 86, "stingrai": 86, "cock": 86, "hen": 86, "ostrich": 86, "brambl": 86, "goldfinch": 86, "hous": 86, "finch": 86, "junco": 86, "indigo": 86, "bunt": 86, "american": [86, 100], "robin": 86, "bulbul": 86, "jai": 86, "magpi": 86, "chickade": 86, "dipper": 86, "kite": 86, "bald": 86, "eagl": 86, "vultur": 86, "grei": 86, "owl": 86, "salamand": 86, "smooth": 86, "newt": 86, "spot": [86, 93], "axolotl": 86, "bullfrog": 86, "tree": 86, "frog": [86, 94], "tail": 86, "loggerhead": 86, "sea": 86, "turtl": 86, "leatherback": 86, "mud": 86, "terrapin": 86, "band": 86, "gecko": 86, "green": [86, 100], "iguana": 86, "carolina": 86, "anol": 86, "desert": 86, "grassland": 86, "whiptail": 86, "lizard": 86, "agama": 86, "frill": 86, "neck": 86, "allig": 86, "gila": 86, "monster": 86, "european": 86, "chameleon": 86, "komodo": 86, "dragon": 86, "nile": 86, "crocodil": 86, "triceratop": 86, "worm": 86, "snake": 86, "ring": 86, "eastern": 86, "hog": 86, "nose": 86, "kingsnak": 86, "garter": 86, "water": 86, "vine": 86, "night": 86, "boa": 86, "constrictor": 86, "african": 86, "rock": 86, "indian": 86, "cobra": 86, "mamba": 86, "saharan": 86, "horn": 86, "viper": 86, "diamondback": 86, "rattlesnak": 86, "sidewind": 86, "trilobit": 86, "harvestman": 86, "scorpion": 86, "yellow": 86, "garden": 86, "spider": 86, "barn": 86, "southern": 86, "widow": 86, "tarantula": 86, "wolf": 86, "tick": 86, "centiped": 86, "grous": 86, "ptarmigan": 86, "ruf": 86, "prairi": 86, "peacock": 86, "quail": 86, "partridg": 86, "parrot": 86, "macaw": 86, "sulphur": 86, "crest": 86, "cockatoo": 86, "lorikeet": 86, "coucal": 86, "bee": 86, "eater": 86, "hornbil": 86, "hummingbird": 86, "jacamar": 86, "toucan": 86, "duck": [86, 99], "breast": 86, "mergans": 86, "goos": 86, "swan": 86, "tusker": 86, "echidna": 86, "platypu": 86, "wallabi": 86, "koala": 86, "wombat": 86, "jellyfish": 86, "anemon": 86, "brain": 86, "coral": 86, "flatworm": 86, "nematod": 86, "conch": 86, "snail": 86, "slug": 86, "chiton": 86, "chamber": 86, "nautilu": 86, "dung": 86, "crab": 86, "fiddler": 86, "king": 86, "lobster": 86, "spini": 86, "crayfish": 86, "hermit": 86, "isopod": 86, "stork": 86, "spoonbil": 86, "flamingo": 86, "heron": 86, "egret": 86, "bittern": 86, "crane": 86, "bird": [86, 94], "limpkin": 86, "gallinul": 86, "coot": 86, "bustard": 86, "ruddi": 86, "turnston": 86, "dunlin": 86, "redshank": 86, "dowitch": 86, "oystercatch": 86, "pelican": 86, "penguin": 86, "albatross": 86, "whale": 86, "killer": 86, "dugong": 86, "lion": 86, "chihuahua": 86, "japanes": 86, "chin": 86, "maltes": 86, "pekinges": 86, "shih": 86, "tzu": 86, "charl": 86, "spaniel": 86, "papillon": 86, "terrier": 86, "rhodesian": 86, "ridgeback": 86, "afghan": [86, 100], "hound": 86, "basset": 86, "beagl": 86, "bloodhound": 86, "bluetick": 86, "coonhound": 86, "tan": 86, "walker": 86, "foxhound": 86, "redbon": 86, "borzoi": 86, "irish": 86, "wolfhound": 86, "italian": 86, "greyhound": 86, "whippet": 86, "ibizan": 86, "norwegian": 86, "elkhound": 86, "otterhound": 86, "saluki": 86, "scottish": 86, "deerhound": 86, "weimaran": 86, "staffordshir": 86, "bull": 86, "bedlington": 86, "border": 86, "kerri": 86, "norfolk": 86, "norwich": 86, "yorkshir": 86, "wire": 86, "fox": 86, "lakeland": 86, "sealyham": 86, "airedal": 86, "cairn": 86, "australian": 86, "dandi": 86, "dinmont": 86, "boston": 86, "miniatur": 86, "schnauzer": 86, "giant": 86, "tibetan": 86, "silki": 86, "coat": [86, 88], "wheaten": 86, "west": 86, "highland": 86, "lhasa": 86, "apso": 86, "flat": 86, "retriev": 86, "curli": 86, "golden": 86, "labrador": 86, "chesapeak": 86, "bai": 86, "german": [86, 100], "shorthair": 86, "pointer": 86, "vizsla": 86, "setter": 86, "gordon": 86, "brittani": 86, "clumber": 86, "springer": 86, "welsh": 86, "cocker": 86, "sussex": 86, "kuvasz": 86, "schipperk": 86, "groenendael": 86, "malinoi": 86, "briard": 86, "kelpi": 86, "komondor": 86, "sheepdog": 86, "shetland": 86, "colli": 86, "bouvier": 86, "de": 86, "flandr": 86, "rottweil": 86, "shepherd": 86, "dobermann": 86, "pinscher": 86, "swiss": [86, 100], "mountain": 86, "bernes": 86, "appenzel": 86, "sennenhund": 86, "entlebuch": 86, "boxer": 86, "bullmastiff": 86, "mastiff": 86, "french": 86, "bulldog": 86, "dane": 86, "st": 86, "bernard": 86, "huski": 86, "alaskan": 86, "malamut": 86, "siberian": 86, "dalmatian": 86, "affenpinsch": 86, "basenji": 86, "pug": 86, "leonberg": 86, "newfoundland": 86, "pyrenean": 86, "samoi": 86, "pomeranian": 86, "chow": 86, "keeshond": 86, "griffon": 86, "bruxelloi": 86, "pembrok": 86, "corgi": 86, "cardigan": 86, "poodl": 86, "mexican": 86, "hairless": 86, "tundra": 86, "coyot": 86, "dingo": 86, "dhole": 86, "wild": 86, "hyena": 86, "kit": 86, "arctic": 86, "tabbi": 86, "persian": 86, "siames": 86, "egyptian": 86, "mau": 86, "cougar": 86, "lynx": 86, "leopard": 86, "snow": 86, "jaguar": 86, "cheetah": 86, "brown": [86, 97], "bear": 86, "polar": 86, "sloth": 86, "mongoos": 86, "meerkat": 86, "beetl": 86, "ladybug": 86, "longhorn": 86, "leaf": 86, "rhinocero": 86, "weevil": 86, "fly": 86, "ant": 86, "grasshopp": 86, "cricket": 86, "stick": 86, "insect": 86, "cockroach": 86, "manti": 86, "cicada": 86, "leafhopp": 86, "lacew": 86, "dragonfli": 86, "damselfli": 86, "admir": 86, "ringlet": 86, "monarch": 86, "butterfli": 86, "gossam": 86, "wing": 86, "starfish": 86, "urchin": 86, "cucumb": 86, "cottontail": 86, "rabbit": 86, "hare": 86, "angora": 86, "hamster": 86, "porcupin": 86, "squirrel": 86, "marmot": 86, "beaver": 86, "guinea": 86, "pig": 86, "sorrel": 86, "zebra": 86, "boar": 86, "warthog": 86, "hippopotamu": 86, "ox": 86, "buffalo": 86, "bison": 86, "bighorn": 86, "sheep": 86, "alpin": 86, "ibex": 86, "hartebeest": 86, "impala": 86, "gazel": 86, "dromedari": 86, "llama": 86, "weasel": 86, "mink": 86, "polecat": 86, "foot": 86, "ferret": 86, "otter": 86, "skunk": 86, "badger": 86, "armadillo": 86, "toed": 86, "orangutan": 86, "gorilla": 86, "chimpanze": 86, "gibbon": 86, "siamang": 86, "guenon": 86, "pata": 86, "monkei": 86, "baboon": 86, "macaqu": 86, "langur": 86, "colobu": 86, "probosci": 86, "marmoset": 86, "capuchin": 86, "howler": 86, "titi": 86, "geoffroi": 86, "lemur": 86, "indri": 86, "asian": 86, "eleph": 86, "bush": 86, "snoek": 86, "eel": 86, "coho": 86, "salmon": 86, "beauti": 86, "clownfish": 86, "sturgeon": 86, "garfish": 86, "lionfish": 86, "pufferfish": 86, "abacu": 86, "abaya": 86, "academ": 86, "gown": 86, "accordion": 86, "acoust": 86, "guitar": 86, "aircraft": 86, "carrier": 86, "airlin": 86, "airship": 86, "altar": 86, "ambul": 86, "amphibi": 86, "clock": [86, 100], "apiari": 86, "apron": 86, "wast": 86, "assault": 86, "rifl": 86, "backpack": 86, "bakeri": 86, "balanc": 86, "beam": 86, "balloon": 86, "ballpoint": 86, "pen": 86, "aid": 86, "banjo": 86, "balust": 86, "barbel": 86, "barber": 86, "chair": [86, 93], "barbershop": 86, "baromet": 86, "barrel": 86, "wheelbarrow": 86, "basebal": 86, "basketbal": 86, "bassinet": 86, "bassoon": 86, "swim": 86, "cap": 86, "bath": 86, "towel": 86, "bathtub": 86, "station": 86, "wagon": 86, "lighthous": 86, "beaker": 86, "militari": 86, "beer": 86, "bottl": 86, "glass": 86, "bell": 86, "cot": 86, "bib": 86, "bicycl": [86, 97], "bikini": 86, "binder": 86, "binocular": 86, "birdhous": 86, "boathous": 86, "bobsleigh": 86, "bolo": 86, "tie": 86, "poke": 86, "bonnet": 86, "bookcas": 86, "bookstor": 86, "bow": 86, "brass": 86, "bra": 86, "breakwat": 86, "breastplat": 86, "broom": 86, "bucket": 86, "buckl": 86, "bulletproof": 86, "vest": 86, "butcher": 86, "shop": 86, "taxicab": 86, "cauldron": 86, "candl": 86, "cannon": 86, "cano": 86, "mirror": [86, 93], "carousel": 86, "tool": [86, 89, 91], "carton": 86, "wheel": 86, "teller": 86, "cassett": 86, "player": 86, "castl": 86, "catamaran": 86, "cd": 86, "cello": 86, "mobil": [86, 100], "chain": 86, "fenc": [86, 97], "mail": 86, "chainsaw": 86, "chest": 86, "chiffoni": 86, "chime": 86, "china": 86, "cabinet": 86, "christma": 86, "stock": 86, "church": 86, "movi": 86, "theater": 86, "cleaver": 86, "cliff": 86, "dwell": 86, "cloak": 86, "clog": 86, "cocktail": 86, "shaker": 86, "coffe": 86, "mug": 86, "coffeemak": 86, "coil": 86, "lock": 86, "keyboard": 86, "confectioneri": 86, "ship": [86, 94], "corkscrew": 86, "cornet": 86, "cowboi": 86, "boot": 86, "hat": 86, "cradl": 86, "crash": 86, "helmet": 86, "crate": 86, "infant": 86, "bed": 86, "crock": 86, "pot": 86, "croquet": 86, "crutch": 86, "cuirass": 86, "dam": 86, "desk": 86, "desktop": 86, "rotari": 86, "dial": 86, "telephon": 86, "diaper": 86, "watch": 86, "dine": 86, "dishcloth": 86, "dishwash": 86, "disc": 86, "brake": 86, "dock": 86, "sled": 86, "dome": 86, "doormat": 86, "drill": 86, "rig": 86, "drum": 86, "drumstick": 86, "dumbbel": 86, "dutch": 86, "oven": 86, "fan": 86, "locomot": 86, "entertain": 86, "center": 86, "envelop": 86, "espresso": 86, "powder": 86, "feather": 86, "fireboat": 86, "engin": [86, 97], "screen": 86, "sheet": 86, "flagpol": 86, "flute": 86, "footbal": 86, "forklift": 86, "fountain": 86, "poster": 86, "freight": 86, "fry": 86, "pan": 86, "fur": 86, "garbag": 86, "ga": 86, "pump": 86, "goblet": 86, "kart": 86, "golf": 86, "cart": 86, "gondola": 86, "gong": 86, "grand": 86, "piano": 86, "greenhous": 86, "grill": 86, "groceri": 86, "guillotin": 86, "barrett": 86, "hair": 86, "sprai": 86, "hammer": 86, "dryer": 86, "hand": [86, 89], "handkerchief": 86, "drive": 86, "harmonica": 86, "harp": 86, "harvest": 86, "hatchet": 86, "holster": 86, "honeycomb": 86, "hoop": 86, "skirt": 86, "horizont": 86, "bar": 86, "hors": [86, 94, 99], "drawn": 86, "hourglass": 86, "ipod": 86, "cloth": 86, "iron": 86, "jack": 86, "lantern": 86, "jean": 86, "jeep": 86, "shirt": [86, 88], "jigsaw": 86, "puzzl": 86, "pull": 86, "rickshaw": 86, "joystick": 86, "kimono": 86, "knee": 86, "pad": 86, "knot": 86, "ladl": 86, "lampshad": 86, "laptop": 86, "lawn": 86, "mower": 86, "knife": 86, "lifeboat": 86, "lighter": 86, "limousin": 86, "ocean": 86, "liner": 86, "lipstick": 86, "slip": 86, "shoe": 86, "lotion": 86, "speaker": 86, "loup": 86, "sawmil": 86, "magnet": 86, "compass": 86, "bag": [86, 88, 94, 95], "mailbox": 86, "tight": 86, "tank": 86, "manhol": 86, "maraca": 86, "marimba": 86, "maypol": 86, "maze": 86, "cup": [86, 93], "medicin": 86, "megalith": 86, "microphon": 86, "microwav": 86, "milk": 86, "minibu": 86, "miniskirt": 86, "minivan": 86, "missil": 86, "mitten": 86, "mix": 86, "bowl": 86, "modem": 86, "monasteri": 86, "monitor": 86, "mope": 86, "mortar": 86, "mosqu": 86, "mosquito": 86, "scooter": 86, "bike": 86, "tent": 86, "mous": [86, 87], "mousetrap": 86, "van": 86, "muzzl": 86, "nail": 86, "brace": 86, "necklac": 86, "nippl": 86, "obelisk": 86, "obo": 86, "ocarina": 86, "odomet": 86, "oil": 86, "oscilloscop": 86, "overskirt": 86, "bullock": 86, "oxygen": 86, "packet": 86, "paddl": 86, "padlock": 86, "paintbrush": 86, "pajama": 86, "palac": [86, 100], "parachut": 86, "park": 86, "bench": 86, "meter": 86, "passeng": 86, "patio": 86, "payphon": 86, "pedest": 86, "pencil": 86, "perfum": 86, "petri": 86, "dish": 86, "photocopi": 86, "plectrum": 86, "pickelhaub": 86, "picket": 86, "pickup": 86, "pier": 86, "piggi": 86, "pill": 86, "pillow": 86, "ping": 86, "pong": 86, "pinwheel": 86, "pirat": 86, "pitcher": 86, "plane": 86, "planetarium": 86, "plastic": 86, "plate": 86, "rack": 86, "plow": 86, "plunger": 86, "polaroid": 86, "camera": 86, "pole": [86, 97], "polic": 86, "poncho": 86, "billiard": 86, "soda": 86, "potter": 86, "prayer": 86, "rug": 86, "printer": 86, "prison": 86, "projectil": 86, "projector": 86, "hockei": 86, "puck": 86, "punch": 86, "purs": 86, "quill": 86, "quilt": 86, "race": 86, "racket": 86, "radiat": 86, "radio": 86, "telescop": 86, "rain": 86, "recreat": 86, "reel": 86, "reflex": 86, "refriger": 86, "remot": 86, "restaur": 86, "revolv": 86, "rotisseri": 86, "eras": 86, "rugbi": 86, "ruler": 86, "safe": 86, "safeti": 86, "salt": 86, "sandal": [86, 88], "sarong": 86, "saxophon": 86, "scabbard": 86, "school": 86, "bu": [86, 97], "schooner": 86, "scoreboard": 86, "crt": 86, "screw": 86, "screwdriv": 86, "seat": 86, "belt": 86, "sew": 86, "shield": 86, "shoji": 86, "basket": 86, "shovel": 86, "shower": 86, "curtain": 86, "ski": 86, "sleep": 86, "door": 86, "slot": 86, "snorkel": 86, "snowmobil": 86, "snowplow": 86, "soap": 86, "dispens": 86, "soccer": [86, 100], "sock": 86, "solar": 86, "thermal": 86, "collector": 86, "sombrero": 86, "soup": 86, "heater": 86, "shuttl": 86, "spatula": 86, "motorboat": 86, "web": 86, "spindl": 86, "sport": [86, 100], "spotlight": 86, "stage": 86, "steam": 86, "arch": 86, "bridg": 86, "steel": 86, "stethoscop": 86, "scarf": 86, "stone": 86, "wall": [86, 97], "stopwatch": 86, "stove": 86, "strainer": 86, "tram": 86, "stretcher": 86, "couch": 86, "stupa": 86, "submarin": 86, "sundial": 86, "sunglass": 86, "sunscreen": 86, "suspens": 86, "mop": 86, "sweatshirt": 86, "swimsuit": 86, "swing": 86, "switch": 86, "syring": 86, "lamp": 86, "tape": 86, "teapot": 86, "teddi": 86, "televis": [86, 100], "tenni": 86, "thatch": 86, "roof": 86, "front": 86, "thimbl": 86, "thresh": 86, "throne": 86, "tile": 86, "toaster": 86, "tobacco": 86, "toilet": 86, "totem": 86, "tow": 86, "tractor": 86, "semi": 86, "trailer": 86, "trai": 86, "trench": 86, "tricycl": 86, "trimaran": 86, "tripod": 86, "triumphal": 86, "trolleybu": 86, "trombon": 86, "tub": 86, "turnstil": 86, "typewrit": 86, "umbrella": 86, "unicycl": 86, "upright": 86, "vacuum": 86, "cleaner": 86, "vase": 86, "vault": 86, "velvet": 86, "vend": 86, "vestment": 86, "viaduct": 86, "violin": 86, "volleybal": 86, "waffl": 86, "wallet": 86, "wardrob": 86, "sink": 86, "wash": 86, "jug": 86, "tower": 86, "whiskei": 86, "whistl": 86, "wig": 86, "shade": [86, 97], "windsor": 86, "wine": 86, "wok": 86, "wooden": 86, "spoon": 86, "wool": 86, "rail": 86, "shipwreck": 86, "yawl": 86, "yurt": 86, "websit": 86, "comic": 86, "book": 86, "crossword": 86, "traffic": [86, 93, 97], "sign": [86, 97, 100], "dust": 86, "jacket": [86, 93], "menu": 86, "guacamol": 86, "consomm": 86, "trifl": 86, "ic": 86, "cream": 86, "pop": 86, "baguett": 86, "bagel": 86, "pretzel": 86, "cheeseburg": 86, "mash": 86, "potato": 86, "cabbag": 86, "broccoli": 86, "cauliflow": 86, "zucchini": 86, "spaghetti": 86, "squash": 86, "acorn": 86, "butternut": 86, "artichok": 86, "pepper": 86, "cardoon": 86, "mushroom": 86, "granni": 86, "smith": 86, "strawberri": 86, "orang": 86, "lemon": 86, "pineappl": 86, "banana": 86, "jackfruit": 86, "custard": 86, "appl": 86, "pomegran": 86, "hai": 86, "carbonara": 86, "chocol": 86, "syrup": 86, "dough": 86, "meatloaf": 86, "pizza": 86, "pie": 86, "burrito": 86, "eggnog": 86, "alp": 86, "bubbl": 86, "reef": 86, "geyser": 86, "lakeshor": 86, "promontori": 86, "shoal": 86, "seashor": 86, "vallei": 86, "volcano": 86, "bridegroom": 86, "scuba": 86, "diver": 86, "rapese": 86, "daisi": 86, "ladi": 86, "slipper": 86, "corn": 86, "rose": 86, "hip": 86, "chestnut": 86, "fungu": 86, "agar": 86, "gyromitra": 86, "stinkhorn": 86, "earth": 86, "star": 86, "wood": 86, "bolet": 86, "ear": 86, "cifar10_test_set": 86, "airplan": [86, 94], "automobil": [86, 94], "deer": [86, 94], "cifar100_test_set": 86, "aquarium_fish": 86, "babi": 86, "boi": 86, "camel": 86, "caterpillar": 86, "cattl": [86, 100], "cloud": 86, "dinosaur": 86, "dolphin": 86, "flatfish": 86, "forest": 86, "girl": 86, "kangaroo": 86, "lawn_mow": 86, "man": 86, "maple_tre": 86, "motorcycl": [86, 97], "oak_tre": 86, "orchid": 86, "palm_tre": 86, "pear": 86, "pickup_truck": 86, "pine_tre": 86, "plain": 86, "poppi": 86, "possum": 86, "raccoon": 86, "road": [86, 97], "rocket": 86, "seal": 86, "shrew": 86, "skyscrap": 86, "streetcar": 86, "sunflow": 86, "sweet_pepp": 86, "trout": 86, "tulip": 86, "willow_tre": 86, "woman": [86, 93], "caltech256": 86, "ak47": 86, "bat": 86, "glove": 86, "birdbath": 86, "blimp": 86, "bonsai": 86, "boom": 86, "breadmak": 86, "buddha": 86, "bulldoz": 86, "cactu": 86, "cake": 86, "tire": 86, "cartman": 86, "cereal": 86, "chandeli": 86, "chess": 86, "board": 86, "chimp": 86, "chopstick": 86, "coffin": 86, "coin": 86, "comet": 86, "cormor": 86, "globe": 86, "diamond": 86, "dice": 86, "doorknob": 86, "drink": 86, "straw": 86, "dumb": 86, "eiffel": 86, "elk": 86, "ewer": 86, "eyeglass": 86, "fern": 86, "fighter": 86, "jet": [86, 96], "extinguish": 86, "hydrant": 86, "firework": 86, "flashlight": 86, "floppi": 86, "fri": 86, "frisbe": 86, "galaxi": 86, "giraff": 86, "goat": 86, "gate": 86, "grape": 86, "pick": [86, 87], "hamburg": 86, "hammock": 86, "harpsichord": 86, "hawksbil": 86, "helicopt": 86, "hibiscu": 86, "homer": 86, "simpson": 86, "horsesho": 86, "air": 86, "skeleton": 86, "ibi": 86, "cone": 86, "iri": 86, "jesu": 86, "christ": 86, "joi": 86, "kayak": 86, "ketch": 86, "ladder": 86, "lath": 86, "licens": 86, "lightbulb": 86, "lightn": 86, "mandolin": 86, "mar": 86, "mattress": 86, "megaphon": 86, "menorah": 86, "microscop": 86, "minaret": 86, "minotaur": 86, "motorbik": 86, "mussel": 86, "neckti": 86, "octopu": 86, "palm": 86, "pilot": 86, "paperclip": 86, "shredder": 86, "pci": 86, "peopl": [86, 93], "pez": 86, "picnic": 86, "pram": 86, "prai": 86, "pyramid": 86, "rainbow": 86, "roulett": 86, "saddl": 86, "saturn": 86, "segwai": 86, "propel": 86, "sextant": 86, "music": 86, "skateboard": 86, "smokestack": 86, "sneaker": 86, "boat": 86, "stain": 86, "steer": 86, "stirrup": 86, "superman": 86, "sushi": 86, "armi": [86, 100], "sword": 86, "tambourin": 86, "teepe": 86, "court": 86, "theodolit": 86, "tomato": 86, "tombston": 86, "tour": 86, "pisa": 86, "treadmil": 86, "fork": 86, "tweezer": 86, "unicorn": 86, "vcr": 86, "waterfal": 86, "watermelon": 86, "weld": 86, "windmil": 86, "xylophon": 86, "yarmulk": 86, "yo": 86, "toad": 86, "twenty_news_test_set": 86, "alt": 86, "atheism": 86, "comp": 86, "graphic": [86, 97], "misc": [86, 100], "sy": 86, "ibm": 86, "pc": 86, "hardwar": 86, "mac": 86, "forsal": 86, "rec": 86, "sci": 86, "crypt": 86, "electron": 86, "med": 86, "soc": 86, "religion": 86, "christian": [86, 100], "talk": [86, 100], "polit": 86, "gun": 86, "mideast": 86, "amazon": 86, "neutral": 86, "imdb_test_set": 86, "all_class": 86, "20news_test_set": 86, "_load_classes_predprobs_label": 86, "dataset_nam": 86, "labelerror": 86, "url_bas": 86, "5392f6c71473055060be3044becdde1cbc18284d": 86, "url_label": 86, "original_test_label": 86, "_original_label": 86, "url_prob": 86, "cross_validated_predicted_prob": 86, "_pyx": 86, "num_part": 86, "datatset": 86, "bytesio": 86, "allow_pickl": 86, "pred_probs_part": 86, "url": 86, "_of_": 86, "nload": 86, "imdb": 86, "ve": [86, 87, 89, 91, 93], "interpret": [86, 87, 89, 92, 96], "capit": 86, "29780": 86, "256": [86, 87, 93], "780": 86, "medic": [86, 100], "doctor": 86, "254": [86, 93], "359223": 86, "640777": 86, "184": [86, 89], "258427": 86, "341176": 86, "263158": 86, "658824": 86, "337349": 86, "246575": 86, "662651": 86, "248": 86, "330000": 86, "355769": 86, "670000": 86, "251": [86, 93], "167": [86, 89, 93], "252": 86, "112": 86, "253": [86, 93], "022989": 86, "255": [86, 88], "049505": 86, "190": [86, 89, 93], "66": 86, "002216": 86, "000974": 86, "59": [86, 93, 100], "88": [86, 87, 88, 89, 92, 93, 96], "000873": 86, "000739": 86, "79": [86, 93, 98], "32635": 86, "32636": 86, "47": [86, 93], "32637": 86, "32638": 86, "32639": 86, "32640": 86, "051": 86, "93": [86, 93, 96, 98, 100], "002242": 86, "997758": 86, "002088": 86, "001045": 86, "997912": 86, "002053": 86, "997947": 86, "001980": 86, "000991": 86, "998020": 86, "001946": 86, "002915": 86, "998054": 86, "001938": 86, "002904": 86, "998062": 86, "001020": 86, "998980": 86, "001018": 86, "002035": 86, "998982": 86, "999009": 86, "0003": 86, "0002": 86, "36": [86, 100], "41": [86, 93, 96], "44": [86, 92, 93, 99], "71": [86, 89, 93, 96], "071": 86, "067269": 86, "929": 86, "046": 86, "058243": 86, "954": 86, "035": 86, "032096": 86, "965": 86, "031": 86, "012232": 86, "969": 86, "022": 86, "025896": 86, "978": 86, "020": [86, 89], "013092": 86, "018": 86, "013065": 86, "016": 86, "030542": 86, "984": 86, "013": 86, "020833": 86, "987": 86, "012": 86, "010020": 86, "988": 86, "0073": 86, "0020": 86, "0016": 86, "0015": 86, "0013": 86, "0012": 86, "0010": 86, "0008": 86, "0007": 86, "0006": 86, "0005": 86, "0004": 86, "244": [86, 93], "98": [86, 87, 96], "452381": 86, "459770": 86, "72": [86, 89, 92, 96], "523364": 86, "460784": 86, "446602": 86, "57": [86, 89], "68": [86, 89, 93, 98], "103774": 86, "030612": 86, "97": [86, 87, 89, 93, 96, 98, 100], "110092": 86, "049020": 86, "99": [86, 89, 98], "0034": 86, "0032": 86, "0026": 86, "0025": 86, "4945": 86, "4946": 86, "4947": 86, "4948": 86, "4949": 86, "4950": 86, "846": 86, "82": [86, 89, 93, 96, 100], "7532": 86, "532": 86, "034483": 86, "009646": 86, "965517": 86, "030457": 86, "020513": 86, "969543": 86, "028061": 86, "035443": 86, "971939": 86, "025316": 86, "005168": 86, "974684": 86, "049751": 86, "979487": 86, "019920": 86, "042802": 86, "980080": 86, "017677": 86, "005115": 86, "982323": 86, "012987": 86, "005236": 86, "987013": 86, "012723": 86, "025126": 86, "987277": 86, "010989": 86, "008264": 86, "989011": 86, "010283": 86, "027778": 86, "989717": 86, "009677": 86, "990323": 86, "007614": 86, "010127": 86, "992386": 86, "005051": 86, "994949": 86, "005025": 86, "994975": 86, "005013": 86, "994987": 86, "001859": 86, "001328": 86, "000929": 86, "000664": 86, "186": [86, 89], "188": [86, 89, 92], "189": [86, 89], "snippet": 87, "nlp": [87, 100], "mind": [87, 89], "number_of_class": 87, "total_number_of_data_point": 87, "drop": [87, 91, 96, 99], "feed": 87, "alphabet": 87, "labels_proper_format": 87, "your_classifi": 87, "issues_datafram": 87, "class_predicted_for_flagged_exampl": 87, "class_predicted_for_all_exampl": 87, "grant": 87, "datataset": 87, "fair": [87, 89], "game": 87, "speedup": [87, 94], "flexibl": 87, "tempfil": 87, "mkdtemp": 87, "sped": 87, "anywai": 87, "pred_probs_merg": 87, "merge_rare_class": 87, "count_threshold": 87, "class_mapping_orig2new": 87, "heath_summari": 87, "num_examples_per_class": 87, "rare_class": 87, "num_classes_merg": 87, "other_class": 87, "labels_merg": 87, "new_c": 87, "merged_prob": 87, "hstack": [87, 88, 89, 91], "new_class": 87, "original_class": 87, "num_check": 87, "ones_array_ref": 87, "isclos": 87, "though": [87, 89, 100], "successfulli": 87, "meaning": [87, 94], "virtuou": [87, 91], "cycl": [87, 91], "jointli": 87, "junk": 87, "clutter": 87, "unknown": 87, "caltech": 87, "combined_boolean_mask": 87, "mask1": 87, "mask2": 87, "gradientboostingclassifi": [87, 89], "true_error": [87, 89, 92], "101": [87, 93], "102": [87, 92, 93], "104": [87, 89, 93], "model_to_find_error": 87, "model_to_return": 87, "cl0": 87, "randomizedsearchcv": 87, "expens": 87, "param_distribut": 87, "learning_r": [87, 89], "max_depth": [87, 89], "magnitud": 87, "coeffici": [87, 96], "optin": 87, "environ": [87, 89], "rerun": [87, 89], "cell": [87, 89], "On": [87, 89, 93], "unabl": [87, 89], "render": [87, 89], "nbviewer": [87, 89], "nbsp": [87, 89], "cleanlearninginot": [87, 89], "fittedcleanlearn": [87, 89], "linearregressionlinearregress": 87, "n_init": 87, "fit_predict": 87, "continuous_column": 87, "categorical_column": 87, "data_df": 87, "feature_a": 87, "feature_b": 87, "unexpectedli": 87, "emphas": 87, "especi": [87, 88, 96, 98, 99], "crucial": 87, "merge_duplicate_set": 87, "merge_kei": 87, "construct_group_kei": 87, "merged_set": 87, "consolidate_set": 87, "tolist": [87, 92], "issubset": 87, "frozenset": 87, "sets_list": 87, "mutabl": 87, "new_set": 87, "current_set": 87, "intersecting_set": 87, "lowest_score_strategi": 87, "sub_df": 87, "idxmin": 87, "filter_near_dupl": 87, "strategy_fn": 87, "strategy_kwarg": 87, "duplicate_row": 87, "group_kei": 87, "to_keep_indic": 87, "groupbi": 87, "explod": 87, "to_remov": 87, "isin": [87, 94], "kept": 87, "near_duplicate_issu": [87, 88], "ids_to_remove_seri": 87, "tmp": 87, "ipykernel_5920": 87, "1995098996": 87, "deprecationwarn": 87, "dataframegroupbi": 87, "include_group": 87, "silenc": 87, "assist": 87, "streamlin": 87, "ux": 87, "agpl": 87, "compani": 87, "commerci": 87, "alter": 87, "email": 87, "discuss": 87, "anywher": 87, "profession": 87, "expert": 87, "60": [88, 89, 96], "excess": 88, "torchvis": [88, 94], "tensordataset": 88, "stratifiedkfold": [88, 92], "tqdm": 88, "autonotebook": 88, "fashion_mnist": 88, "num_row": 88, "60000": 88, "pil": 88, "transformed_dataset": 88, "with_format": 88, "unsqueez": 88, "cpu_count": 88, "torch_dataset": 88, "quick": [88, 92], "relu": 88, "batchnorm2d": 88, "maxpool2d": 88, "lazylinear": 88, "flatten": 88, "get_test_accuraci": 88, "testload": [88, 94], "energi": 88, "trainload": [88, 94], "n_epoch": 88, "patienc": 88, "criterion": 88, "crossentropyloss": 88, "adamw": 88, "best_test_accuraci": 88, "start_epoch": 88, "running_loss": 88, "best_epoch": 88, "end_epoch": 88, "3f": [88, 96], "acc": [88, 89], "time_taken": 88, "compute_embed": 88, "compute_pred_prob": 88, "train_batch_s": 88, "num_work": 88, "worker": [88, 100], "train_id_list": 88, "test_id_list": 88, "train_id": 88, "test_id": 88, "embeddings_model": 88, "ntrain": 88, "trainset": 88, "testset": 88, "pin_memori": 88, "fold_embed": 88, "fold_pred_prob": 88, "finish": 88, "482": 88, "720": 88, "685": 88, "329": [88, 93], "195": [88, 100], "377": 88, "493": 88, "060": 88, "330": [88, 93], "505": 88, "408": 88, "476": 88, "340": 88, "668": 88, "328": [88, 93], "310": 88, "432": 88, "reorder": 88, "vision": 88, "grayscal": 88, "exce": 88, "max_preval": 88, "7714": 88, "3772": 88, "3585": 88, "166": 88, "3651": 88, "27080": 88, "873833e": 88, "40378": 88, "915575e": 88, "25316": 88, "390277e": 88, "06": [88, 89, 93, 100], "2090": 88, "751164e": 88, "14999": 88, "881301e": 88, "9569": 88, "11262": 88, "000003": 88, "19228": 88, "000010": 88, "dress": 88, "32657": 88, "000013": 88, "21282": 88, "000016": 88, "53564": 88, "000018": 88, "pullov": 88, "6321": 88, "30968": 88, "001267": 88, "30659": 88, "000022": [88, 100], "47824": 88, "001454": 88, "3370": 88, "000026": 88, "54565": 88, "001854": 88, "9762": 88, "258": 88, "47139": 88, "000033": 88, "166980": 88, "986195": 88, "997205": 88, "948781": 88, "999358": 88, "54078": 88, "17371": 88, "000025": 88, "plot_label_issue_exampl": 88, "ncol": [88, 94], "nrow": [88, 94], "ceil": 88, "axes_list": 88, "label_issue_indic": 88, "gl": 88, "sl": 88, "fontdict": 88, "imshow": [88, 94], "cmap": [88, 96], "grai": 88, "subplots_adjust": 88, "hspace": 88, "outsiz": 88, "outlier_issues_df": 88, "depict": [88, 92, 93, 94, 95, 97], "plot_outlier_issues_exampl": 88, "n_comparison_imag": 88, "sample_from_class": 88, "number_of_sampl": 88, "non_outlier_indic": 88, "isnul": 88, "non_outlier_indices_excluding_curr": 88, "sampled_indic": 88, "label_scores_of_sampl": 88, "top_score_indic": 88, "top_label_indic": 88, "sampled_imag": 88, "get_image_given_label_and_sampl": 88, "image_from_dataset": 88, "corresponding_label": 88, "comparison_imag": 88, "images_to_plot": 88, "idlist": 88, "iterrow": 88, "closest": 88, "counterpart": 88, "near_duplicate_issues_df": 88, "plot_near_duplicate_issue_exampl": 88, "seen_id_pair": 88, "get_image_and_given_label_and_predicted_label": 88, "duplicate_imag": 88, "nd_set": 88, "challeng": 88, "dark_issu": 88, "reveal": [88, 93, 97], "dark_scor": 88, "dark_issues_df": 88, "is_dark_issu": 88, "34848": 88, "203922": 88, "50270": 88, "204588": 88, "3936": 88, "213098": 88, "733": 88, "217686": 88, "8094": 88, "230118": 88, "plot_image_issue_exampl": 88, "difficult": 88, "disproportion": 88, "lowinfo_issu": 88, "low_information_scor": 88, "lowinfo_issues_df": 88, "is_low_information_issu": 88, "53050": 88, "067975": 88, "40875": 88, "089929": 88, "9594": 88, "092601": 88, "34825": 88, "107744": 88, "37530": 88, "108516": 88, "lot": 88, "depth": 89, "survei": [89, 100], "focus": [89, 91, 92, 96], "scienc": 89, "multivariate_norm": [89, 91, 92], "make_data": [89, 91], "cov": [89, 91, 92], "avg_trac": [89, 92], "test_label": [89, 92, 94, 99], "py_tru": 89, "noise_matrix_tru": 89, "noise_marix": 89, "s_test": 89, "noisy_test_label": 89, "purpl": 89, "val": 89, "namespac": 89, "exec": 89, "markerfacecolor": [89, 92], "markeredgecolor": [89, 92, 96], "markers": [89, 92, 96], "markeredgewidth": [89, 92, 96], "realist": 89, "7560": 89, "637318e": 89, "896262e": 89, "548391e": 89, "923417e": 89, "375075e": 89, "3454": 89, "014051": 89, "020451": 89, "249": [89, 93], "042594": 89, "043859": 89, "045954": 89, "6120": 89, "023714": 89, "007136": 89, "119": [89, 93], "107266": 89, "103": [89, 93], "033738": 89, "238": [89, 93, 100], "119505": 89, "236": [89, 93], "037843": 89, "222": 89, "614915": 89, "122": [89, 93], "624422": 89, "625965": 89, "626079": 89, "118": 89, "627675": 89, "695223": 89, "323529": 89, "523015": 89, "013720": 89, "675727": 89, "646521": 89, "anyth": 89, "enhanc": [89, 91, 93], "magic": 89, "83": [89, 93, 96, 98, 100], "liter": 89, "identif": 89, "x27": 89, "logisticregressionlogisticregress": 89, "ever": 89, "092": 89, "040": 89, "024": 89, "004": 89, "surpris": 89, "1705": 89, "01936": 89, "ton": 89, "yourfavoritemodel1": 89, "merged_label": 89, "merged_test_label": 89, "newli": [89, 91], "yourfavoritemodel2": 89, "yourfavoritemodel3": 89, "cl3": 89, "takeawai": 89, "That": [89, 92], "randomli": 89, "my_test_pred_prob": 89, "my_test_pr": 89, "issues_test": 89, "corrected_test_label": 89, "pretend": 89, "cl_test_pr": 89, "69": [89, 96], "fairli": 89, "label_acc": 89, "percentag": 89, "offset": 89, "nquestion": 89, "overestim": 89, "answer": 89, "experienc": 89, "76": [89, 92, 93, 96, 98], "knowledg": 89, "prioiri": 89, "known": 89, "versatil": 89, "label_issues_indic": 89, "213": [89, 93], "212": [89, 98], "218": [89, 93], "152": 89, "197": [89, 93], "196": [89, 93], "170": 89, "214": 89, "164": [89, 92], "198": [89, 93], "191": [89, 93], "63": [89, 93, 96], "121": [89, 99], "117": [89, 96], "62": [89, 93, 96], "206": [89, 93], "115": [89, 93], "193": 89, "194": 89, "201": [89, 93], "174": 89, "163": 89, "150": [89, 91, 93], "169": 89, "151": [89, 93], "168": 89, "precision_scor": 89, "recall_scor": 89, "f1_score": 89, "true_label_issu": 89, "filter_by_list": 89, "718750": [89, 91], "807018": 89, "912": 89, "733333": 89, "800000": 89, "721311": 89, "792793": 89, "908": 89, "676923": 89, "765217": 89, "892": 89, "567901": 89, "702290": 89, "844": 89, "gaug": 89, "label_issues_count": 89, "155": [89, 93], "156": 89, "172": [89, 92], "easiest": 89, "modular": 89, "penalti": 89, "l2": 89, "model3": 89, "n_estim": 89, "cv_pred_probs_1": 89, "cv_pred_probs_2": 89, "cv_pred_probs_3": 89, "label_quality_scores_best": 89, "cv_pred_probs_ensembl": 89, "label_quality_scores_bett": 89, "superior": [89, 95], "workflow": [90, 96], "speechbrain": 90, "timm": 90, "glad": 91, "multiannotator_label": 91, "300": [91, 100], "noisier": 91, "111": [91, 96], "local_data": [91, 92], "true_labels_train": [91, 92], "noise_matrix_bett": 91, "noise_matrix_wors": 91, "transpos": [91, 94], "dropna": 91, "zfill": 91, "row_na_check": 91, "notna": 91, "reset_index": 91, "a0001": 91, "a0002": 91, "a0003": 91, "a0004": 91, "a0005": 91, "a0006": 91, "a0007": 91, "a0008": 91, "a0009": 91, "a0010": 91, "a0041": 91, "a0042": 91, "a0043": 91, "a0044": 91, "a0045": 91, "a0046": 91, "a0047": 91, "a0048": 91, "a0049": 91, "a0050": 91, "na": 91, "60856743": 91, "41693214": 91, "40908785": 91, "87147629": 91, "64941785": 91, "10774851": 91, "0524466": 91, "71853246": 91, "37169848": 91, "66031048": 91, "multiannotator_util": 91, "crude": 91, "straight": 91, "majority_vote_label": 91, "736118": 91, "757751": 91, "782232": 91, "715565": 91, "824256": 91, "quality_annotator_a0001": 91, "quality_annotator_a0002": 91, "quality_annotator_a0003": 91, "quality_annotator_a0004": 91, "quality_annotator_a0005": 91, "quality_annotator_a0006": 91, "quality_annotator_a0007": 91, "quality_annotator_a0008": 91, "quality_annotator_a0009": 91, "quality_annotator_a0010": 91, "quality_annotator_a0041": 91, "quality_annotator_a0042": 91, "quality_annotator_a0043": 91, "quality_annotator_a0044": 91, "quality_annotator_a0045": 91, "quality_annotator_a0046": 91, "quality_annotator_a0047": 91, "quality_annotator_a0048": 91, "quality_annotator_a0049": 91, "quality_annotator_a0050": 91, "070564": 91, "216078": 91, "119188": 91, "alongisd": 91, "244981": 91, "208333": 91, "295979": 91, "294118": 91, "324197": 91, "310345": 91, "355316": 91, "346154": 91, "439732": 91, "480000": 91, "a0031": 91, "523205": 91, "580645": 91, "a0034": 91, "535313": 91, "607143": 91, "a0021": 91, "606999": 91, "a0015": 91, "609526": 91, "678571": 91, "a0011": 91, "621103": 91, "692308": 91, "wors": 91, "improved_consensus_label": 91, "majority_vote_accuraci": 91, "cleanlab_label_accuraci": 91, "8581081081081081": 91, "9797297297297297": 91, "besid": 91, "sorted_consensus_quality_scor": 91, "worst_qual": 91, "better_qu": 91, "worst_quality_accuraci": 91, "better_quality_accuraci": 91, "9893238434163701": 91, "improved_pred_prob": 91, "treat": [91, 92, 96, 100], "analzi": 91, "copyright": 92, "advertis": 92, "violenc": 92, "nsfw": 92, "suppli": [92, 93, 96], "celeba": 92, "make_multilabel_data": 92, "boxes_coordin": 92, "box_multilabel": 92, "make_multi": 92, "bx1": 92, "by1": 92, "bx2": 92, "by2": 92, "label_list": 92, "ur": 92, "upper": 92, "inidx": 92, "logical_and": 92, "inv_d": 92, "labels_idx": 92, "true_labels_test": 92, "dict_unique_label": 92, "get_color_arrai": 92, "dcolor": 92, "aa4400": 92, "55227f": 92, "55a100": 92, "00ff00": 92, "007f7f": 92, "386b55": 92, "0000ff": 92, "simplic": 92, "advis": 92, "y_onehot": 92, "single_class_label": 92, "stratifi": [92, 95], "kf": 92, "train_index": 92, "test_index": 92, "clf_cv": 92, "x_train_cv": 92, "x_test_cv": 92, "y_train_cv": 92, "y_test_cv": 92, "y_pred_cv": 92, "saw": 92, "num_to_displai": 92, "09": [92, 93, 96], "275": 92, "267": 92, "225": 92, "171": 92, "234": 92, "165": 92, "227": [92, 93], "262": [92, 93], "263": [92, 93], "266": [92, 93], "139": 92, "143": [92, 93], "216": [92, 93, 100], "265": 92, "159": [92, 93], "despit": [92, 100], "suspect": 92, "888": 92, "8224": 92, "9632": 92, "968": 92, "6512": 92, "0444": 92, "774": 92, "labels_binary_format": 92, "labels_list_format": 92, "surround": 93, "scene": 93, "coco": 93, "everydai": 93, "has_label_issu": 93, "insal": 93, "nc": [93, 97, 100], "s3": [93, 97, 100], "amazonaw": [93, 97, 100], "objectdetectionbenchmark": 93, "tutorial_obj": 93, "pkl": 93, "example_imag": 93, "unzip": [93, 100], "_separate_label": 93, "_separate_predict": 93, "begin": 93, "image_path": 93, "rb": 93, "image_to_visu": 93, "seg_map": 93, "334": 93, "float32": 93, "bboxes_ignor": 93, "290": 93, "286": 93, "285": 93, "224": 93, "231": [93, 100], "293": 93, "235": 93, "289": 93, "282": 93, "74": [93, 96, 98], "281": 93, "271": 93, "280": 93, "277": 93, "279": 93, "287": 93, "299": 93, "276": 93, "307": 93, "321": 93, "326": 93, "333": 93, "261": 93, "319": 93, "257": 93, "295": 93, "283": 93, "243": 93, "303": 93, "316": 93, "247": 93, "323": 93, "327": 93, "226": 93, "228": 93, "232": 93, "219": 93, "239": 93, "240": 93, "209": 93, "242": 93, "202": 93, "230": 93, "215": 93, "220": 93, "229": 93, "217": 93, "237": 93, "207": 93, "204": 93, "84": [93, 96], "205": 93, "223": 93, "153": [93, 100], "149": 93, "140": 93, "124": 93, "268": 93, "273": 93, "108": 93, "284": 93, "110": 93, "136": 93, "145": 93, "173": 93, "297": 93, "317": 93, "192": 93, "332": 93, "324": 93, "203": 93, "320": 93, "314": 93, "199": 93, "291": 93, "000000481413": 93, "jpg": 93, "42398": 93, "44503": 93, "337": [93, 99], "29968": 93, "336": 93, "21005": 93, "9978472": 93, "forgot": 93, "drew": 93, "label_issue_idx": 93, "num_examples_to_show": 93, "138": 93, "candid": 93, "97489622": 93, "70610878": 93, "98764951": 93, "88899237": 93, "99085805": 93, "issue_idx": 93, "95569726e": 93, "03354841e": 93, "57510169e": 93, "58447666e": 93, "39755858e": 93, "issue_to_visu": 93, "000000009483": 93, "95569726168054e": 93, "addition": [93, 97], "visibl": 93, "missmatch": 93, "likelei": 93, "agnost": 93, "vaidat": 93, "inconsist": 93, "000000395701": 93, "033548411774308e": 93, "armchair": 93, "tv": 93, "000000154004": 93, "38300759625496356": 93, "foreground": 93, "000000448410": 93, "0008575101690203273": 93, "crowd": 93, "alon": 93, "explor": [93, 94], "resembl": [93, 94], "000000499768": 93, "9748962231208227": 93, "000000521141": 93, "8889923658893665": 93, "000000143931": 93, "9876495074395956": 93, "bonu": 93, "uncov": 93, "irregular": 93, "anomali": 93, "unusu": [93, 94], "object_detection_util": 93, "calculate_bounding_box_area": 93, "num_imgs_to_show": 93, "lab_object_count": 93, "pred_object_count": 93, "000000430073": 93, "000000183709": 93, "000000189475": 93, "studi": 93, "label_norm": 93, "pred_norm": 93, "area": [93, 97], "assess": 93, "lab_area": 93, "pred_area": 93, "lab_area_mean": 93, "lab_area_std": 93, "max_deviation_valu": 93, "max_deviation_class": 93, "deviation_valu": 93, "deviation_class": 93, "mean_area": 93, "std_area": 93, "class_area": 93, "deviations_awai": 93, "max_deviation_index": 93, "num_imgs_to_show_per_class": 93, "class_num": 93, "sorted_indic": 93, "000000422886": 93, "000000341828": 93, "000000461009": 93, "train_feature_embed": 94, "ood_train_feature_scor": 94, "test_feature_embed": 94, "ood_test_feature_scor": 94, "ood_train_predictions_scor": 94, "train_pred_prob": 94, "ood_test_predictions_scor": 94, "test_pred_prob": 94, "pylab": 94, "rcparam": 94, "baggingclassifi": 94, "therebi": 94, "rescal": 94, "transform_norm": 94, "totensor": 94, "root": 94, "animal_class": 94, "non_animal_class": 94, "animal_idx": 94, "test_idx": 94, "toronto": 94, "edu": 94, "kriz": 94, "170498071": 94, "91181059": 94, "62it": 94, "5000": 94, "plot_imag": 94, "visualize_outli": 94, "txt_class": 94, "img": [94, 96], "npimg": 94, "show_label": 94, "data_subset": 94, "resnet50": 94, "corpu": 94, "2048": 94, "embed_imag": 94, "create_model": 94, "strang": 94, "odd": 94, "train_ood_features_scor": 94, "top_train_ood_features_idx": 94, "fun": 94, "negat": 94, "homogen": 94, "bottom_train_ood_features_idx": 94, "test_ood_features_scor": 94, "top_ood_features_idx": 94, "inevit": 94, "trade": 94, "5th": 94, "percentil": 94, "fifth_percentil": 94, "plt_rang": 94, "hist": 94, "train_outlier_scor": 94, "ylabel": 94, "axvlin": 94, "test_outlier_scor": 94, "ood_features_indic": 94, "revisit": 94, "return_invers": 94, "train_feature_embeddings_sc": 94, "test_feature_embeddings_sc": 94, "train_pred_label": 94, "9702": 94, "train_ood_predictions_scor": 94, "test_ood_predictions_scor": 94, "lost": 94, "unsuit": 95, "ok": [95, 100], "convention": 95, "aforement": 95, "hypothet": 95, "contrast": 95, "tradit": 95, "disjoint": 95, "out_of_sample_pred_probs_for_a": 95, "out_of_sample_pred_probs_for_b": 95, "out_of_sample_pred_probs_for_c": 95, "out_of_sample_pred_prob": 95, "price": 96, "incom": 96, "ag": 96, "sensor": 96, "histgradientboostingregressor": 96, "r2_score": 96, "student_grades_r": 96, "final_scor": 96, "true_final_scor": 96, "homework": 96, "3d": 96, "hue": 96, "mpl_toolkit": 96, "mplot3d": 96, "axes3d": 96, "errors_idx": 96, "add_subplot": 96, "z": 96, "colorbar": 96, "errors_mask": 96, "feature_column": 96, "predicted_column": 96, "x_train_raw": 96, "x_test_raw": 96, "categorical_featur": [96, 98], "randomforestregressor": 96, "636197": 96, "499503": 96, "843478": 96, "776647": 96, "350358": 96, "170547": 96, "706969": 96, "984759": 96, "812515": 96, "795928": 96, "identified_issu": [96, 99], "141": 96, "659": 96, "367": 96, "318": 96, "305": 96, "560": 96, "657": 96, "688": 96, "view_datapoint": 96, "concat": 96, "consum": [96, 99], "baseline_model": [96, 99], "preds_og": 96, "r2_og": 96, "838": 96, "robustli": [96, 98, 99], "acceler": [96, 99], "found_label_issu": 96, "preds_cl": 96, "r2_cl": 96, "926": 96, "effort": [96, 98, 99], "favorit": 96, "968627e": 96, "228799": 96, "646674e": 96, "402962": 96, "323818e": 96, "952758": 96, "422144e": 96, "456908": 96, "465815e": 96, "753968": 96, "110719": 96, "000044": 96, "670640": 96, "000060": 96, "749976": 96, "000066": 96, "947007": 96, "000314": 96, "648396": 96, "plu": 96, "synthia": 97, "imagesegment": 97, "given_mask": 97, "predicted_mask": 97, "set_printopt": [97, 100], "sky": 97, "sidewalk": 97, "veget": 97, "terrain": 97, "rider": 97, "pred_probs_filepath": 97, "1088": 97, "1920": 97, "label_filepath": 97, "synthia_class": 97, "maunal": 97, "100000": 97, "244800": 97, "leftmost": 97, "middl": [97, 100], "infact": 97, "rightmost": 97, "discrep": 97, "3263230": 97, "783379": 97, "275110": 97, "255792": 97, "78225": 97, "55990": 97, "54427": 97, "33591": 97, "24645": 97, "21308": 97, "15045": 97, "14171": 97, "13832": 97, "13498": 97, "11490": 97, "9164": 97, "8769": 97, "6999": 97, "6031": 97, "5011": 97, "mistakenli": 97, "class_issu": 97, "aim": [97, 100], "domin": 97, "extratreesclassifi": 98, "extratre": 98, "ranked_label_issu": [98, 99], "labelencod": [98, 99], "labels_raw": 98, "interg": [98, 99], "tress": 98, "827": 98, "cheat": 98, "0pt": 98, "233": 98, "labels_train": 98, "labels_test": 98, "acc_og": [98, 99], "783068783068783": 98, "acc_cl": [98, 99], "8095238095238095": 98, "earlier": [99, 100], "raw_label": 99, "raw_train_text": 99, "raw_test_text": 99, "raw_train_label": 99, "raw_test_label": 99, "encond": 99, "train_text": 99, "test_text": 99, "858371": 99, "547274": 99, "826228": 99, "966008": 99, "792449": 99, "646": 99, "390": 99, "628": 99, "702": 99, "135": 99, "735": 99, "print_as_df": 99, "inverse_transform": 99, "fight": 99, "bunch": 100, "conll": 100, "2003": 100, "love": 100, "n_i": 100, "optional_list_of_ordered_class_nam": 100, "deepai": 100, "conll2003": 100, "rm": 100, "tokenclassif": 100, "2024": 100, "2400": 100, "52e0": 100, "1a00": 100, "845": 100, "connect": 100, "443": 100, "await": 100, "982975": 100, "960k": 100, "959": 100, "94k": 100, "82mb": 100, "mb": 100, "directori": 100, "inflat": 100, "17045998": 100, "16m": 100, "octet": 100, "26m": 100, "kb": 100, "bert": 100, "read_npz": 100, "filepath": 100, "corrsespond": 100, "iob2": 100, "given_ent": 100, "entity_map": 100, "readfil": 100, "sep": 100, "startswith": 100, "docstart": 100, "isalpha": 100, "isupp": 100, "indices_to_preview": 100, "nsentenc": 100, "eu": 100, "reject": 100, "boycott": 100, "british": 100, "lamb": 100, "00030412": 100, "00023826": 100, "99936208": 100, "00007009": 100, "00002545": 100, "99998795": 100, "00000401": 100, "00000218": 100, "00000455": 100, "00000131": 100, "00000749": 100, "99996115": 100, "00001371": 100, "0000087": 100, "00000895": 100, "99998936": 100, "00000382": 100, "00000178": 100, "00000366": 100, "00000137": 100, "99999101": 100, "00000266": 100, "00000174": 100, "0000035": 100, "00000109": 100, "99998768": 100, "00000482": 100, "00000202": 100, "00000438": 100, "0000011": 100, "00000465": 100, "99996392": 100, "00001105": 100, "0000116": 100, "00000878": 100, "99998671": 100, "00000364": 100, "00000213": 100, "00000472": 100, "00000281": 100, "99999073": 100, "00000211": 100, "00000159": 100, "00000442": 100, "00000115": 100, "peter": 100, "blackburn": 100, "00000358": 100, "00000529": 100, "99995623": 100, "0000129": 100, "0000024": 100, "00001812": 100, "99994141": 100, "00001645": 100, "00002162": 100, "brussel": 100, "1996": 100, "00001172": 100, "00000821": 100, "00004661": 100, "0000618": 100, "99987167": 100, "99999061": 100, "00000201": 100, "00000195": 100, "00000408": 100, "00000135": 100, "2254": 100, "2907": 100, "19392": 100, "9962": 100, "8904": 100, "19303": 100, "12918": 100, "9256": 100, "11855": 100, "18392": 100, "20426": 100, "19402": 100, "14744": 100, "19371": 100, "4645": 100, "10331": 100, "9430": 100, "6143": 100, "18367": 100, "12914": 100, "todai": 100, "weather": 100, "march": 100, "scalfaro": 100, "northern": 100, "himself": 100, "said": 100, "germani": 100, "nastja": 100, "rysich": 100, "north": 100, "spla": 100, "fought": 100, "khartoum": 100, "govern": 100, "south": 100, "1983": 100, "autonomi": 100, "animist": 100, "region": 100, "moslem": 100, "arabis": 100, "mayor": 100, "antonio": 100, "gonzalez": 100, "garcia": 100, "revolutionari": 100, "parti": 100, "wednesdai": 100, "troop": 100, "raid": 100, "farm": 100, "stole": 100, "rape": 100, "women": 100, "spring": 100, "chg": 100, "hrw": 100, "12pct": 100, "princ": 100, "photo": 100, "moment": 100, "spokeswoman": 100, "rainier": 100, "told": 100, "reuter": 100, "danila": 100, "carib": 100, "w224": 100, "equip": 100, "radiomet": 100, "earn": 100, "19996": 100, "london": 100, "denom": 100, "sale": 100, "uk": 100, "jp": 100, "fr": 100, "maccabi": 100, "hapoel": 100, "haifa": 100, "tel": 100, "aviv": 100, "hospit": 100, "rever": 100, "roman": 100, "cathol": 100, "nun": 100, "admit": 100, "calcutta": 100, "week": 100, "ago": 100, "fever": 100, "vomit": 100, "allianc": 100, "embattl": 100, "kabul": 100, "salang": 100, "highwai": 100, "mondai": 100, "tuesdai": 100, "suprem": 100, "council": 100, "led": 100, "jumbish": 100, "milli": 100, "movement": 100, "warlord": 100, "abdul": 100, "rashid": 100, "dostum": 100, "dollar": 100, "exchang": 100, "3570": 100, "12049": 100, "born": 100, "1937": 100, "provinc": 100, "anhui": 100, "dai": 100, "came": 100, "shanghai": 100, "citi": 100, "prolif": 100, "author": 100, "teacher": 100, "chines": 100, "16764": 100, "1990": 100, "historian": 100, "alan": 100, "john": 100, "percival": 100, "taylor": 100, "di": 100, "20446": 100, "pace": 100, "bowler": 100, "ian": 100, "harvei": 100, "claim": 100, "victoria": 100, "15514": 100, "cotti": 100, "osc": 100, "foreign": 100, "minist": 100, "7525": 100, "sultan": 100, "specter": 100, "met": 100, "crown": 100, "abdullah": 100, "defenc": 100, "aviat": 100, "jeddah": 100, "saudi": 100, "agenc": 100, "2288": 100, "hi": 100, "customari": 100, "outfit": 100, "champion": 100, "damp": 100, "scalp": 100, "canada": 100, "reign": 100, "olymp": 100, "donovan": 100, "bailei": 100, "1992": 100, "linford": 100, "christi": 100, "britain": 100, "1984": 100, "1988": 100, "carl": 100, "lewi": 100, "ambigi": 100, "punctuat": 100, "chicago": 100, "digest": 100, "philadelphia": 100, "usda": 100, "york": 100, "token_issu": 100, "471": 100, "kean": 100, "year": 100, "contract": 100, "manchest": 100, "19072": 100, "societi": 100, "million": 100, "bite": 100, "deliv": 100, "19910": 100, "father": 100, "clarenc": 100, "woolmer": 100, "renam": 100, "uttar": 100, "pradesh": 100, "india": 100, "ranji": 100, "trophi": 100, "nation": 100, "championship": 100, "captain": 100, "1949": 100, "15658": 100, "19879": 100, "iii": 100, "brian": 100, "shimer": 100, "randi": 100, "jone": 100, "19104": 100}, "objects": {"cleanlab": [[0, 0, 0, "-", "benchmarking"], [2, 0, 0, "-", "classification"], [3, 0, 0, "-", "count"], [10, 0, 0, "-", "datalab"], [35, 0, 0, "-", "dataset"], [38, 0, 0, "-", "experimental"], [42, 0, 0, "-", "filter"], [43, 0, 0, "-", "internal"], [54, 0, 0, "-", "models"], [56, 0, 0, "-", "multiannotator"], [59, 0, 0, "-", "multilabel_classification"], [62, 0, 0, "-", "object_detection"], [65, 0, 0, "-", "outlier"], [66, 0, 0, "-", "rank"], [67, 0, 0, "-", "regression"], [71, 0, 0, "-", "segmentation"], [75, 0, 0, "-", "token_classification"]], "cleanlab.benchmarking": [[1, 0, 0, "-", "noise_generation"]], "cleanlab.benchmarking.noise_generation": [[1, 1, 1, "", "generate_n_rand_probabilities_that_sum_to_m"], [1, 1, 1, "", "generate_noise_matrix_from_trace"], [1, 1, 1, "", "generate_noisy_labels"], [1, 1, 1, "", "noise_matrix_is_valid"], [1, 1, 1, "", "randomly_distribute_N_balls_into_K_bins"]], "cleanlab.classification": [[2, 2, 1, "", "CleanLearning"]], "cleanlab.classification.CleanLearning": [[2, 3, 1, "", "__init_subclass__"], [2, 3, 1, "", "find_label_issues"], [2, 3, 1, "", "fit"], [2, 3, 1, "", "get_label_issues"], [2, 3, 1, "", "get_metadata_routing"], [2, 3, 1, "", "get_params"], [2, 3, 1, "", "predict"], [2, 3, 1, "", "predict_proba"], [2, 3, 1, "", "save_space"], [2, 3, 1, "", "score"], [2, 3, 1, "", "set_fit_request"], [2, 3, 1, "", "set_params"], [2, 3, 1, "", "set_score_request"]], "cleanlab.count": [[3, 1, 1, "", "calibrate_confident_joint"], [3, 1, 1, "", "compute_confident_joint"], [3, 1, 1, "", "estimate_confident_joint_and_cv_pred_proba"], [3, 1, 1, "", "estimate_cv_predicted_probabilities"], [3, 1, 1, "", "estimate_joint"], [3, 1, 1, "", "estimate_latent"], [3, 1, 1, "", "estimate_noise_matrices"], [3, 1, 1, "", "estimate_py_and_noise_matrices_from_probabilities"], [3, 1, 1, "", "estimate_py_noise_matrices_and_cv_pred_proba"], [3, 1, 1, "", "get_confident_thresholds"], [3, 1, 1, "", "num_label_issues"]], "cleanlab.datalab": [[4, 0, 0, "-", "datalab"], [14, 0, 0, "-", "internal"]], "cleanlab.datalab.datalab": [[4, 2, 1, "", "Datalab"]], "cleanlab.datalab.datalab.Datalab": [[4, 4, 1, "", "class_names"], [4, 3, 1, "", "find_issues"], [4, 3, 1, "", "get_info"], [4, 3, 1, "", "get_issue_summary"], [4, 3, 1, "", "get_issues"], [4, 4, 1, "", "has_labels"], [4, 4, 1, "", "info"], [4, 4, 1, "", "issue_summary"], [4, 4, 1, "", "issues"], [4, 4, 1, "", "labels"], [4, 3, 1, "", "list_default_issue_types"], [4, 3, 1, "", "list_possible_issue_types"], [4, 3, 1, "", "load"], [4, 3, 1, "", "report"], [4, 3, 1, "", "save"]], "cleanlab.datalab.internal": [[11, 0, 0, "-", "data"], [12, 0, 0, "-", "data_issues"], [15, 0, 0, "-", "issue_finder"], [13, 0, 0, "-", "issue_manager_factory"], [31, 0, 0, "-", "model_outputs"], [32, 0, 0, "-", "report"], [33, 0, 0, "-", "task"]], "cleanlab.datalab.internal.data": [[11, 2, 1, "", "Data"], [11, 5, 1, "", "DataFormatError"], [11, 5, 1, "", "DatasetDictError"], [11, 5, 1, "", "DatasetLoadError"], [11, 2, 1, "", "Label"], [11, 2, 1, "", "MultiClass"], [11, 2, 1, "", "MultiLabel"]], "cleanlab.datalab.internal.data.Data": [[11, 4, 1, "", "class_names"], [11, 4, 1, "", "has_labels"]], "cleanlab.datalab.internal.data.DataFormatError": [[11, 3, 1, "", "add_note"], [11, 6, 1, "", "args"], [11, 3, 1, "", "with_traceback"]], "cleanlab.datalab.internal.data.DatasetDictError": [[11, 3, 1, "", "add_note"], [11, 6, 1, "", "args"], [11, 3, 1, "", "with_traceback"]], "cleanlab.datalab.internal.data.DatasetLoadError": [[11, 3, 1, "", "add_note"], [11, 6, 1, "", "args"], [11, 3, 1, "", "with_traceback"]], "cleanlab.datalab.internal.data.Label": [[11, 4, 1, "", "class_names"], [11, 4, 1, "", "is_available"]], "cleanlab.datalab.internal.data.MultiClass": [[11, 4, 1, "", "class_names"], [11, 4, 1, "", "is_available"]], "cleanlab.datalab.internal.data.MultiLabel": [[11, 4, 1, "", "class_names"], [11, 4, 1, "", "is_available"]], "cleanlab.datalab.internal.data_issues": [[12, 2, 1, "", "DataIssues"], [12, 1, 1, "", "get_data_statistics"]], "cleanlab.datalab.internal.data_issues.DataIssues": [[12, 3, 1, "", "collect_issues_from_imagelab"], [12, 3, 1, "", "collect_issues_from_issue_manager"], [12, 3, 1, "", "collect_statistics"], [12, 3, 1, "", "get_info"], [12, 3, 1, "", "get_issue_summary"], [12, 3, 1, "", "get_issues"], [12, 6, 1, "", "info"], [12, 6, 1, "", "issue_summary"], [12, 6, 1, "", "issues"], [12, 3, 1, "", "set_health_score"], [12, 4, 1, "", "statistics"]], "cleanlab.datalab.internal.issue_finder": [[15, 2, 1, "", "IssueFinder"]], "cleanlab.datalab.internal.issue_finder.IssueFinder": [[15, 3, 1, "", "find_issues"], [15, 3, 1, "", "get_available_issue_types"]], "cleanlab.datalab.internal.issue_manager": [[17, 0, 0, "-", "data_valuation"], [18, 0, 0, "-", "duplicate"], [19, 0, 0, "-", "imbalance"], [21, 0, 0, "-", "issue_manager"], [22, 0, 0, "-", "label"], [25, 0, 0, "-", "noniid"], [26, 0, 0, "-", "null"], [27, 0, 0, "-", "outlier"], [30, 0, 0, "-", "underperforming_group"]], "cleanlab.datalab.internal.issue_manager.data_valuation": [[17, 2, 1, "", "DataValuationIssueManager"]], "cleanlab.datalab.internal.issue_manager.data_valuation.DataValuationIssueManager": [[17, 6, 1, "", "DEFAULT_THRESHOLD"], [17, 3, 1, "", "collect_info"], [17, 6, 1, "", "description"], [17, 3, 1, "", "find_issues"], [17, 6, 1, "", "info"], [17, 6, 1, "", "issue_name"], [17, 6, 1, "", "issue_score_key"], [17, 6, 1, "", "issues"], [17, 3, 1, "", "make_summary"], [17, 3, 1, "", "report"], [17, 6, 1, "", "summary"], [17, 6, 1, "", "verbosity_levels"]], "cleanlab.datalab.internal.issue_manager.duplicate": [[18, 2, 1, "", "NearDuplicateIssueManager"]], "cleanlab.datalab.internal.issue_manager.duplicate.NearDuplicateIssueManager": [[18, 3, 1, "", "collect_info"], [18, 6, 1, "", "description"], [18, 3, 1, "", "find_issues"], [18, 6, 1, "", "info"], [18, 6, 1, "", "issue_name"], [18, 6, 1, "", "issue_score_key"], [18, 6, 1, "", "issues"], [18, 3, 1, "", "make_summary"], [18, 6, 1, "", "near_duplicate_sets"], [18, 3, 1, "", "report"], [18, 6, 1, "", "summary"], [18, 6, 1, "", "verbosity_levels"]], "cleanlab.datalab.internal.issue_manager.imbalance": [[19, 2, 1, "", "ClassImbalanceIssueManager"]], "cleanlab.datalab.internal.issue_manager.imbalance.ClassImbalanceIssueManager": [[19, 3, 1, "", "collect_info"], [19, 6, 1, "", "description"], [19, 3, 1, "", "find_issues"], [19, 6, 1, "", "info"], [19, 6, 1, "", "issue_name"], [19, 6, 1, "", "issue_score_key"], [19, 6, 1, "", "issues"], [19, 3, 1, "", "make_summary"], [19, 3, 1, "", "report"], [19, 6, 1, "", "summary"], [19, 6, 1, "", "verbosity_levels"]], "cleanlab.datalab.internal.issue_manager.issue_manager": [[21, 2, 1, "", "IssueManager"]], "cleanlab.datalab.internal.issue_manager.issue_manager.IssueManager": [[21, 3, 1, "", "collect_info"], [21, 6, 1, "", "description"], [21, 3, 1, "", "find_issues"], [21, 6, 1, "", "info"], [21, 6, 1, "", "issue_name"], [21, 6, 1, "", "issue_score_key"], [21, 6, 1, "", "issues"], [21, 3, 1, "", "make_summary"], [21, 3, 1, "", "report"], [21, 6, 1, "", "summary"], [21, 6, 1, "", "verbosity_levels"]], "cleanlab.datalab.internal.issue_manager.label": [[22, 2, 1, "", "LabelIssueManager"]], "cleanlab.datalab.internal.issue_manager.label.LabelIssueManager": [[22, 3, 1, "", "collect_info"], [22, 6, 1, "", "description"], [22, 3, 1, "", "find_issues"], [22, 3, 1, "", "get_health_summary"], [22, 6, 1, "", "health_summary_parameters"], [22, 6, 1, "", "info"], [22, 6, 1, "", "issue_name"], [22, 6, 1, "", "issue_score_key"], [22, 6, 1, "", "issues"], [22, 3, 1, "", "make_summary"], [22, 3, 1, "", "report"], [22, 6, 1, "", "summary"], [22, 6, 1, "", "verbosity_levels"]], "cleanlab.datalab.internal.issue_manager.multilabel": [[24, 0, 0, "-", "label"]], "cleanlab.datalab.internal.issue_manager.multilabel.label": [[24, 2, 1, "", "MultilabelIssueManager"]], "cleanlab.datalab.internal.issue_manager.multilabel.label.MultilabelIssueManager": [[24, 3, 1, "", "collect_info"], [24, 6, 1, "", "description"], [24, 3, 1, "", "find_issues"], [24, 6, 1, "", "info"], [24, 6, 1, "", "issue_name"], [24, 6, 1, "", "issue_score_key"], [24, 6, 1, "", "issues"], [24, 3, 1, "", "make_summary"], [24, 3, 1, "", "report"], [24, 6, 1, "", "summary"], [24, 6, 1, "", "verbosity_levels"]], "cleanlab.datalab.internal.issue_manager.noniid": [[25, 2, 1, "", "NonIIDIssueManager"], [25, 1, 1, "", "simplified_kolmogorov_smirnov_test"]], "cleanlab.datalab.internal.issue_manager.noniid.NonIIDIssueManager": [[25, 3, 1, "", "collect_info"], [25, 6, 1, "", "description"], [25, 3, 1, "", "find_issues"], [25, 6, 1, "", "info"], [25, 6, 1, "", "issue_name"], [25, 6, 1, "", "issue_score_key"], [25, 6, 1, "", "issues"], [25, 3, 1, "", "make_summary"], [25, 3, 1, "", "report"], [25, 6, 1, "", "summary"], [25, 6, 1, "", "verbosity_levels"]], "cleanlab.datalab.internal.issue_manager.null": [[26, 2, 1, "", "NullIssueManager"]], "cleanlab.datalab.internal.issue_manager.null.NullIssueManager": [[26, 3, 1, "", "collect_info"], [26, 6, 1, "", "description"], [26, 3, 1, "", "find_issues"], [26, 6, 1, "", "info"], [26, 6, 1, "", "issue_name"], [26, 6, 1, "", "issue_score_key"], [26, 6, 1, "", "issues"], [26, 3, 1, "", "make_summary"], [26, 3, 1, "", "report"], [26, 6, 1, "", "summary"], [26, 6, 1, "", "verbosity_levels"]], "cleanlab.datalab.internal.issue_manager.outlier": [[27, 2, 1, "", "OutlierIssueManager"]], "cleanlab.datalab.internal.issue_manager.outlier.OutlierIssueManager": [[27, 6, 1, "", "DEFAULT_THRESHOLDS"], [27, 3, 1, "", "collect_info"], [27, 6, 1, "", "description"], [27, 3, 1, "", "find_issues"], [27, 6, 1, "", "info"], [27, 6, 1, "", "issue_name"], [27, 6, 1, "", "issue_score_key"], [27, 6, 1, "", "issues"], [27, 3, 1, "", "make_summary"], [27, 6, 1, "", "ood"], [27, 3, 1, "", "report"], [27, 6, 1, "", "summary"], [27, 6, 1, "", "verbosity_levels"]], "cleanlab.datalab.internal.issue_manager.regression": [[29, 0, 0, "-", "label"]], "cleanlab.datalab.internal.issue_manager.regression.label": [[29, 2, 1, "", "RegressionLabelIssueManager"], [29, 1, 1, "", "find_issues_with_features"], [29, 1, 1, "", "find_issues_with_predictions"]], "cleanlab.datalab.internal.issue_manager.regression.label.RegressionLabelIssueManager": [[29, 3, 1, "", "collect_info"], [29, 6, 1, "", "description"], [29, 3, 1, "", "find_issues"], [29, 6, 1, "", "info"], [29, 6, 1, "", "issue_name"], [29, 6, 1, "", "issue_score_key"], [29, 6, 1, "", "issues"], [29, 3, 1, "", "make_summary"], [29, 3, 1, "", "report"], [29, 6, 1, "", "summary"], [29, 6, 1, "", "verbosity_levels"]], "cleanlab.datalab.internal.issue_manager.underperforming_group": [[30, 2, 1, "", "UnderperformingGroupIssueManager"]], "cleanlab.datalab.internal.issue_manager.underperforming_group.UnderperformingGroupIssueManager": [[30, 6, 1, "", "NO_UNDERPERFORMING_CLUSTER_ID"], [30, 6, 1, "", "OUTLIER_CLUSTER_LABELS"], [30, 3, 1, "", "collect_info"], [30, 6, 1, "", "description"], [30, 3, 1, "", "filter_cluster_ids"], [30, 3, 1, "", "find_issues"], [30, 3, 1, "", "get_worst_cluster"], [30, 6, 1, "", "info"], [30, 6, 1, "", "issue_name"], [30, 6, 1, "", "issue_score_key"], [30, 6, 1, "", "issues"], [30, 3, 1, "", "make_summary"], [30, 3, 1, "", "perform_clustering"], [30, 3, 1, "", "report"], [30, 3, 1, "", "set_knn_graph"], [30, 6, 1, "", "summary"], [30, 6, 1, "", "verbosity_levels"]], "cleanlab.datalab.internal.issue_manager_factory": [[13, 7, 1, "", "REGISTRY"], [13, 1, 1, "", "list_default_issue_types"], [13, 1, 1, "", "list_possible_issue_types"], [13, 1, 1, "", "register"]], "cleanlab.datalab.internal.model_outputs": [[31, 2, 1, "", "ModelOutput"], [31, 2, 1, "", "MultiClassPredProbs"], [31, 2, 1, "", "MultiLabelPredProbs"], [31, 2, 1, "", "RegressionPredictions"]], "cleanlab.datalab.internal.model_outputs.ModelOutput": [[31, 3, 1, "", "collect"], [31, 6, 1, "", "data"], [31, 3, 1, "", "validate"]], "cleanlab.datalab.internal.model_outputs.MultiClassPredProbs": [[31, 6, 1, "", "argument"], [31, 3, 1, "", "collect"], [31, 6, 1, "", "data"], [31, 3, 1, "", "validate"]], "cleanlab.datalab.internal.model_outputs.MultiLabelPredProbs": [[31, 6, 1, "", "argument"], [31, 3, 1, "", "collect"], [31, 6, 1, "", "data"], [31, 3, 1, "", "validate"]], "cleanlab.datalab.internal.model_outputs.RegressionPredictions": [[31, 6, 1, "", "argument"], [31, 3, 1, "", "collect"], [31, 6, 1, "", "data"], [31, 3, 1, "", "validate"]], "cleanlab.datalab.internal.report": [[32, 2, 1, "", "Reporter"]], "cleanlab.datalab.internal.report.Reporter": [[32, 3, 1, "", "get_report"], [32, 3, 1, "", "report"]], "cleanlab.datalab.internal.task": [[33, 2, 1, "", "Task"]], "cleanlab.datalab.internal.task.Task": [[33, 6, 1, "", "CLASSIFICATION"], [33, 6, 1, "", "MULTILABEL"], [33, 6, 1, "", "REGRESSION"], [33, 3, 1, "", "__contains__"], [33, 3, 1, "", "__getitem__"], [33, 3, 1, "", "__iter__"], [33, 3, 1, "", "__len__"], [33, 3, 1, "", "from_str"], [33, 4, 1, "", "is_classification"], [33, 4, 1, "", "is_multilabel"], [33, 4, 1, "", "is_regression"]], "cleanlab.dataset": [[35, 1, 1, "", "find_overlapping_classes"], [35, 1, 1, "", "health_summary"], [35, 1, 1, "", "overall_label_health_score"], [35, 1, 1, "", "rank_classes_by_label_quality"]], "cleanlab.experimental": [[36, 0, 0, "-", "cifar_cnn"], [37, 0, 0, "-", "coteaching"], [39, 0, 0, "-", "label_issues_batched"], [40, 0, 0, "-", "mnist_pytorch"], [41, 0, 0, "-", "span_classification"]], "cleanlab.experimental.cifar_cnn": [[36, 2, 1, "", "CNN"], [36, 1, 1, "", "call_bn"]], "cleanlab.experimental.cifar_cnn.CNN": [[36, 6, 1, "", "T_destination"], [36, 3, 1, "", "__call__"], [36, 3, 1, "", "add_module"], [36, 3, 1, "", "apply"], [36, 3, 1, "", "bfloat16"], [36, 3, 1, "", "buffers"], [36, 6, 1, "", "call_super_init"], [36, 3, 1, "", "children"], [36, 3, 1, "", "compile"], [36, 3, 1, "", "cpu"], [36, 3, 1, "", "cuda"], [36, 3, 1, "", "double"], [36, 6, 1, "", "dump_patches"], [36, 3, 1, "", "eval"], [36, 3, 1, "", "extra_repr"], [36, 3, 1, "", "float"], [36, 3, 1, "id0", "forward"], [36, 3, 1, "", "get_buffer"], [36, 3, 1, "", "get_extra_state"], [36, 3, 1, "", "get_parameter"], [36, 3, 1, "", "get_submodule"], [36, 3, 1, "", "half"], [36, 3, 1, "", "ipu"], [36, 3, 1, "", "load_state_dict"], [36, 3, 1, "", "modules"], [36, 3, 1, "", "named_buffers"], [36, 3, 1, "", "named_children"], [36, 3, 1, "", "named_modules"], [36, 3, 1, "", "named_parameters"], [36, 3, 1, "", "parameters"], [36, 3, 1, "", "register_backward_hook"], [36, 3, 1, "", "register_buffer"], [36, 3, 1, "", "register_forward_hook"], [36, 3, 1, "", "register_forward_pre_hook"], [36, 3, 1, "", "register_full_backward_hook"], [36, 3, 1, "", "register_full_backward_pre_hook"], [36, 3, 1, "", "register_load_state_dict_post_hook"], [36, 3, 1, "", "register_module"], [36, 3, 1, "", "register_parameter"], [36, 3, 1, "", "register_state_dict_pre_hook"], [36, 3, 1, "", "requires_grad_"], [36, 3, 1, "", "set_extra_state"], [36, 3, 1, "", "share_memory"], [36, 3, 1, "", "state_dict"], [36, 3, 1, "", "to"], [36, 3, 1, "", "to_empty"], [36, 3, 1, "", "train"], [36, 6, 1, "", "training"], [36, 3, 1, "", "type"], [36, 3, 1, "", "xpu"], [36, 3, 1, "", "zero_grad"]], "cleanlab.experimental.coteaching": [[37, 1, 1, "", "adjust_learning_rate"], [37, 1, 1, "", "evaluate"], [37, 1, 1, "", "forget_rate_scheduler"], [37, 1, 1, "", "initialize_lr_scheduler"], [37, 1, 1, "", "loss_coteaching"], [37, 1, 1, "", "train"]], "cleanlab.experimental.label_issues_batched": [[39, 2, 1, "", "LabelInspector"], [39, 7, 1, "", "adj_confident_thresholds_shared"], [39, 1, 1, "", "find_label_issues_batched"], [39, 7, 1, "", "labels_shared"], [39, 7, 1, "", "pred_probs_shared"], [39, 1, 1, "", "split_arr"]], "cleanlab.experimental.label_issues_batched.LabelInspector": [[39, 3, 1, "", "get_confident_thresholds"], [39, 3, 1, "", "get_label_issues"], [39, 3, 1, "", "get_num_issues"], [39, 3, 1, "", "get_quality_scores"], [39, 3, 1, "", "score_label_quality"], [39, 3, 1, "", "update_confident_thresholds"]], "cleanlab.experimental.mnist_pytorch": [[40, 2, 1, "", "CNN"], [40, 2, 1, "", "SimpleNet"], [40, 1, 1, "", "get_mnist_dataset"], [40, 1, 1, "", "get_sklearn_digits_dataset"]], "cleanlab.experimental.mnist_pytorch.CNN": [[40, 3, 1, "", "__init_subclass__"], [40, 6, 1, "", "batch_size"], [40, 6, 1, "", "dataset"], [40, 6, 1, "", "epochs"], [40, 3, 1, "id0", "fit"], [40, 3, 1, "", "get_metadata_routing"], [40, 3, 1, "", "get_params"], [40, 6, 1, "", "loader"], [40, 6, 1, "", "log_interval"], [40, 6, 1, "", "lr"], [40, 6, 1, "", "momentum"], [40, 6, 1, "", "no_cuda"], [40, 3, 1, "id1", "predict"], [40, 3, 1, "id4", "predict_proba"], [40, 6, 1, "", "seed"], [40, 3, 1, "", "set_fit_request"], [40, 3, 1, "", "set_params"], [40, 3, 1, "", "set_predict_proba_request"], [40, 3, 1, "", "set_predict_request"], [40, 6, 1, "", "test_batch_size"]], "cleanlab.experimental.mnist_pytorch.SimpleNet": [[40, 6, 1, "", "T_destination"], [40, 3, 1, "", "__call__"], [40, 3, 1, "", "add_module"], [40, 3, 1, "", "apply"], [40, 3, 1, "", "bfloat16"], [40, 3, 1, "", "buffers"], [40, 6, 1, "", "call_super_init"], [40, 3, 1, "", "children"], [40, 3, 1, "", "compile"], [40, 3, 1, "", "cpu"], [40, 3, 1, "", "cuda"], [40, 3, 1, "", "double"], [40, 6, 1, "", "dump_patches"], [40, 3, 1, "", "eval"], [40, 3, 1, "", "extra_repr"], [40, 3, 1, "", "float"], [40, 3, 1, "", "forward"], [40, 3, 1, "", "get_buffer"], [40, 3, 1, "", "get_extra_state"], [40, 3, 1, "", "get_parameter"], [40, 3, 1, "", "get_submodule"], [40, 3, 1, "", "half"], [40, 3, 1, "", "ipu"], [40, 3, 1, "", "load_state_dict"], [40, 3, 1, "", "modules"], [40, 3, 1, "", "named_buffers"], [40, 3, 1, "", "named_children"], [40, 3, 1, "", "named_modules"], [40, 3, 1, "", "named_parameters"], [40, 3, 1, "", "parameters"], [40, 3, 1, "", "register_backward_hook"], [40, 3, 1, "", "register_buffer"], [40, 3, 1, "", "register_forward_hook"], [40, 3, 1, "", "register_forward_pre_hook"], [40, 3, 1, "", "register_full_backward_hook"], [40, 3, 1, "", "register_full_backward_pre_hook"], [40, 3, 1, "", "register_load_state_dict_post_hook"], [40, 3, 1, "", "register_module"], [40, 3, 1, "", "register_parameter"], [40, 3, 1, "", "register_state_dict_pre_hook"], [40, 3, 1, "", "requires_grad_"], [40, 3, 1, "", "set_extra_state"], [40, 3, 1, "", "share_memory"], [40, 3, 1, "", "state_dict"], [40, 3, 1, "", "to"], [40, 3, 1, "", "to_empty"], [40, 3, 1, "", "train"], [40, 6, 1, "", "training"], [40, 3, 1, "", "type"], [40, 3, 1, "", "xpu"], [40, 3, 1, "", "zero_grad"]], "cleanlab.experimental.span_classification": [[41, 1, 1, "", "display_issues"], [41, 1, 1, "", "find_label_issues"], [41, 1, 1, "", "get_label_quality_scores"]], "cleanlab.filter": [[42, 1, 1, "", "find_label_issues"], [42, 1, 1, "", "find_label_issues_using_argmax_confusion_matrix"], [42, 1, 1, "", "find_predicted_neq_given"], [42, 7, 1, "", "pred_probs_by_class"], [42, 7, 1, "", "prune_count_matrix_cols"]], "cleanlab.internal": [[44, 0, 0, "-", "label_quality_utils"], [45, 0, 0, "-", "latent_algebra"], [46, 0, 0, "-", "multiannotator_utils"], [47, 0, 0, "-", "multilabel_scorer"], [48, 0, 0, "-", "multilabel_utils"], [49, 0, 0, "-", "outlier"], [50, 0, 0, "-", "token_classification_utils"], [51, 0, 0, "-", "util"], [52, 0, 0, "-", "validation"]], "cleanlab.internal.label_quality_utils": [[44, 1, 1, "", "get_normalized_entropy"]], "cleanlab.internal.latent_algebra": [[45, 1, 1, "", "compute_inv_noise_matrix"], [45, 1, 1, "", "compute_noise_matrix_from_inverse"], [45, 1, 1, "", "compute_ps_py_inv_noise_matrix"], [45, 1, 1, "", "compute_py"], [45, 1, 1, "", "compute_py_inv_noise_matrix"], [45, 1, 1, "", "compute_pyx"]], "cleanlab.internal.multiannotator_utils": [[46, 1, 1, "", "assert_valid_inputs_multiannotator"], [46, 1, 1, "", "assert_valid_pred_probs"], [46, 1, 1, "", "check_consensus_label_classes"], [46, 1, 1, "", "compute_soft_cross_entropy"], [46, 1, 1, "", "find_best_temp_scaler"], [46, 1, 1, "", "format_multiannotator_labels"], [46, 1, 1, "", "temp_scale_pred_probs"]], "cleanlab.internal.multilabel_scorer": [[47, 2, 1, "", "Aggregator"], [47, 2, 1, "", "ClassLabelScorer"], [47, 2, 1, "", "MultilabelScorer"], [47, 1, 1, "", "exponential_moving_average"], [47, 1, 1, "", "get_cross_validated_multilabel_pred_probs"], [47, 1, 1, "", "get_label_quality_scores"], [47, 1, 1, "", "multilabel_py"], [47, 1, 1, "", "softmin"]], "cleanlab.internal.multilabel_scorer.Aggregator": [[47, 3, 1, "", "__call__"], [47, 6, 1, "", "possible_methods"]], "cleanlab.internal.multilabel_scorer.ClassLabelScorer": [[47, 6, 1, "", "CONFIDENCE_WEIGHTED_ENTROPY"], [47, 6, 1, "", "NORMALIZED_MARGIN"], [47, 6, 1, "", "SELF_CONFIDENCE"], [47, 3, 1, "", "__call__"], [47, 3, 1, "", "__contains__"], [47, 3, 1, "", "__getitem__"], [47, 3, 1, "", "__iter__"], [47, 3, 1, "", "__len__"], [47, 3, 1, "", "from_str"]], "cleanlab.internal.multilabel_scorer.MultilabelScorer": [[47, 3, 1, "", "__call__"], [47, 3, 1, "", "aggregate"], [47, 3, 1, "", "get_class_label_quality_scores"]], "cleanlab.internal.multilabel_utils": [[48, 1, 1, "", "get_onehot_num_classes"], [48, 1, 1, "", "int2onehot"], [48, 1, 1, "", "onehot2int"], [48, 1, 1, "", "stack_complement"]], "cleanlab.internal.outlier": [[49, 1, 1, "", "transform_distances_to_scores"]], "cleanlab.internal.token_classification_utils": [[50, 1, 1, "", "color_sentence"], [50, 1, 1, "", "filter_sentence"], [50, 1, 1, "", "get_sentence"], [50, 1, 1, "", "mapping"], [50, 1, 1, "", "merge_probs"], [50, 1, 1, "", "process_token"]], "cleanlab.internal.util": [[51, 1, 1, "", "append_extra_datapoint"], [51, 1, 1, "", "clip_noise_rates"], [51, 1, 1, "", "clip_values"], [51, 1, 1, "", "compress_int_array"], [51, 1, 1, "", "confusion_matrix"], [51, 1, 1, "", "csr_vstack"], [51, 1, 1, "", "estimate_pu_f1"], [51, 1, 1, "", "extract_indices_tf"], [51, 1, 1, "", "force_two_dimensions"], [51, 1, 1, "", "format_labels"], [51, 1, 1, "", "get_missing_classes"], [51, 1, 1, "", "get_num_classes"], [51, 1, 1, "", "get_unique_classes"], [51, 1, 1, "", "is_tensorflow_dataset"], [51, 1, 1, "", "is_torch_dataset"], [51, 1, 1, "", "num_unique_classes"], [51, 1, 1, "", "print_inverse_noise_matrix"], [51, 1, 1, "", "print_joint_matrix"], [51, 1, 1, "", "print_noise_matrix"], [51, 1, 1, "", "print_square_matrix"], [51, 1, 1, "", "remove_noise_from_class"], [51, 1, 1, "", "round_preserving_row_totals"], [51, 1, 1, "", "round_preserving_sum"], [51, 1, 1, "", "smart_display_dataframe"], [51, 1, 1, "", "subset_X_y"], [51, 1, 1, "", "subset_data"], [51, 1, 1, "", "subset_labels"], [51, 1, 1, "", "train_val_split"], [51, 1, 1, "", "unshuffle_tensorflow_dataset"], [51, 1, 1, "", "value_counts"], [51, 1, 1, "", "value_counts_fill_missing_classes"]], "cleanlab.internal.validation": [[52, 1, 1, "", "assert_indexing_works"], [52, 1, 1, "", "assert_nonempty_input"], [52, 1, 1, "", "assert_valid_class_labels"], [52, 1, 1, "", "assert_valid_inputs"], [52, 1, 1, "", "labels_to_array"], [52, 1, 1, "", "labels_to_list_multilabel"]], "cleanlab.models": [[55, 0, 0, "-", "keras"]], "cleanlab.models.keras": [[55, 2, 1, "", "KerasWrapperModel"], [55, 2, 1, "", "KerasWrapperSequential"]], "cleanlab.models.keras.KerasWrapperModel": [[55, 3, 1, "", "fit"], [55, 3, 1, "", "get_params"], [55, 3, 1, "", "predict"], [55, 3, 1, "", "predict_proba"], [55, 3, 1, "", "set_params"], [55, 3, 1, "", "summary"]], "cleanlab.models.keras.KerasWrapperSequential": [[55, 3, 1, "", "fit"], [55, 3, 1, "", "get_params"], [55, 3, 1, "", "predict"], [55, 3, 1, "", "predict_proba"], [55, 3, 1, "", "set_params"], [55, 3, 1, "", "summary"]], "cleanlab.multiannotator": [[56, 1, 1, "", "convert_long_to_wide_dataset"], [56, 1, 1, "", "get_active_learning_scores"], [56, 1, 1, "", "get_active_learning_scores_ensemble"], [56, 1, 1, "", "get_label_quality_multiannotator"], [56, 1, 1, "", "get_label_quality_multiannotator_ensemble"], [56, 1, 1, "", "get_majority_vote_label"]], "cleanlab.multilabel_classification": [[57, 0, 0, "-", "dataset"], [58, 0, 0, "-", "filter"], [60, 0, 0, "-", "rank"]], "cleanlab.multilabel_classification.dataset": [[57, 1, 1, "", "common_multilabel_issues"], [57, 1, 1, "", "multilabel_health_summary"], [57, 1, 1, "", "overall_multilabel_health_score"], [57, 1, 1, "", "rank_classes_by_multilabel_quality"]], "cleanlab.multilabel_classification.filter": [[58, 1, 1, "", "find_label_issues"], [58, 1, 1, "", "find_multilabel_issues_per_class"]], "cleanlab.multilabel_classification.rank": [[60, 1, 1, "", "get_label_quality_scores"], [60, 1, 1, "", "get_label_quality_scores_per_class"]], "cleanlab.object_detection": [[61, 0, 0, "-", "filter"], [63, 0, 0, "-", "rank"], [64, 0, 0, "-", "summary"]], "cleanlab.object_detection.filter": [[61, 1, 1, "", "find_label_issues"]], "cleanlab.object_detection.rank": [[63, 1, 1, "", "compute_badloc_box_scores"], [63, 1, 1, "", "compute_overlooked_box_scores"], [63, 1, 1, "", "compute_swap_box_scores"], [63, 1, 1, "", "get_label_quality_scores"], [63, 1, 1, "", "issues_from_scores"], [63, 1, 1, "", "pool_box_scores_per_image"]], "cleanlab.object_detection.summary": [[64, 1, 1, "", "bounding_box_size_distribution"], [64, 1, 1, "", "calculate_per_class_metrics"], [64, 1, 1, "", "class_label_distribution"], [64, 1, 1, "", "get_average_per_class_confusion_matrix"], [64, 1, 1, "", "get_sorted_bbox_count_idxs"], [64, 1, 1, "", "object_counts_per_image"], [64, 1, 1, "", "plot_class_distribution"], [64, 1, 1, "", "plot_class_size_distributions"], [64, 1, 1, "", "visualize"]], "cleanlab.outlier": [[65, 2, 1, "", "OutOfDistribution"]], "cleanlab.outlier.OutOfDistribution": [[65, 3, 1, "", "fit"], [65, 3, 1, "", "fit_score"], [65, 3, 1, "", "score"]], "cleanlab.rank": [[66, 1, 1, "", "find_top_issues"], [66, 1, 1, "", "get_confidence_weighted_entropy_for_each_label"], [66, 1, 1, "", "get_label_quality_ensemble_scores"], [66, 1, 1, "", "get_label_quality_scores"], [66, 1, 1, "", "get_normalized_margin_for_each_label"], [66, 1, 1, "", "get_self_confidence_for_each_label"], [66, 1, 1, "", "order_label_issues"]], "cleanlab.regression": [[68, 0, 0, "-", "learn"], [69, 0, 0, "-", "rank"]], "cleanlab.regression.learn": [[68, 2, 1, "", "CleanLearning"]], "cleanlab.regression.learn.CleanLearning": [[68, 3, 1, "", "__init_subclass__"], [68, 3, 1, "", "find_label_issues"], [68, 3, 1, "", "fit"], [68, 3, 1, "", "get_aleatoric_uncertainty"], [68, 3, 1, "", "get_epistemic_uncertainty"], [68, 3, 1, "", "get_label_issues"], [68, 3, 1, "", "get_metadata_routing"], [68, 3, 1, "", "get_params"], [68, 3, 1, "", "predict"], [68, 3, 1, "", "save_space"], [68, 3, 1, "", "score"], [68, 3, 1, "", "set_fit_request"], [68, 3, 1, "", "set_params"], [68, 3, 1, "", "set_score_request"]], "cleanlab.regression.rank": [[69, 1, 1, "", "get_label_quality_scores"]], "cleanlab.segmentation": [[70, 0, 0, "-", "filter"], [72, 0, 0, "-", "rank"], [73, 0, 0, "-", "summary"]], "cleanlab.segmentation.filter": [[70, 1, 1, "", "find_label_issues"]], "cleanlab.segmentation.rank": [[72, 1, 1, "", "get_label_quality_scores"], [72, 1, 1, "", "issues_from_scores"]], "cleanlab.segmentation.summary": [[73, 1, 1, "", "common_label_issues"], [73, 1, 1, "", "display_issues"], [73, 1, 1, "", "filter_by_class"]], "cleanlab.token_classification": [[74, 0, 0, "-", "filter"], [76, 0, 0, "-", "rank"], [77, 0, 0, "-", "summary"]], "cleanlab.token_classification.filter": [[74, 1, 1, "", "find_label_issues"]], "cleanlab.token_classification.rank": [[76, 1, 1, "", "get_label_quality_scores"], [76, 1, 1, "", "issues_from_scores"]], "cleanlab.token_classification.summary": [[77, 1, 1, "", "common_label_issues"], [77, 1, 1, "", "display_issues"], [77, 1, 1, "", "filter_by_token"]]}, "objtypes": {"0": "py:module", "1": "py:function", "2": "py:class", "3": "py:method", "4": "py:property", "5": "py:exception", "6": "py:attribute", "7": "py:data"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "function", "Python function"], "2": ["py", "class", "Python class"], "3": ["py", "method", "Python method"], "4": ["py", "property", "Python property"], "5": ["py", "exception", "Python exception"], "6": ["py", "attribute", "Python attribute"], "7": ["py", "data", "Python data"]}, "titleterms": {"benchmark": 0, "noise_gener": 1, "classif": [2, 80, 84, 85, 87, 88, 89, 92, 98, 99, 100], "count": [3, 89], "datalab": [4, 6, 8, 9, 10, 81, 82, 83, 84, 85, 89, 92], "creat": [6, 81, 82, 89, 91], "your": [6, 78, 81, 82, 85, 87, 89], "own": 6, "issu": [6, 8, 9, 20, 29, 78, 80, 81, 82, 84, 85, 86, 87, 88, 89, 92, 93, 97, 98, 100], "manag": [6, 20], "prerequisit": 6, "implement": 6, "issuemanag": [6, 81], "basic": 6, "check": 6, "intermedi": 6, "advanc": [6, 81], "us": [6, 80, 82, 84, 85, 87, 88, 89, 91, 92, 93, 94, 96, 97, 98, 99, 100], "gener": 7, "cluster": [7, 87], "id": 7, "guid": [8, 10], "type": [8, 9, 89], "custom": [8, 81], "can": [9, 82, 86, 87, 89, 91], "detect": [9, 82, 84, 85, 87, 89, 93, 94], "estim": [9, 89, 91, 92], "each": 9, "label": [9, 22, 24, 29, 78, 80, 82, 84, 85, 87, 88, 89, 91, 92, 93, 96, 97, 98, 99, 100], "outlier": [9, 27, 49, 65, 84, 85, 88, 92, 94], "Near": [9, 82, 84, 85, 88], "duplic": [9, 18, 82, 84, 85, 87, 88, 92], "non": [9, 85], "iid": [9, 85], "class": [9, 79, 89, 97], "imbal": [9, 19], "imag": [9, 88, 94], "specif": [9, 20, 97], "underperform": [9, 87], "group": [9, 87], "null": [9, 26], "data": [9, 11, 78, 80, 81, 82, 84, 85, 86, 87, 89, 91, 92, 93, 94, 96, 97, 98, 100], "valuat": 9, "option": 9, "paramet": [9, 89], "get": [10, 81, 82, 91, 92, 93, 97, 100], "start": [10, 86], "api": 10, "refer": 10, "data_issu": 12, "factori": 13, "intern": [14, 43], "issue_find": 15, "data_valu": 17, "issue_manag": [20, 21], "regist": 20, "ml": [20, 87, 89], "task": [20, 33], "multilabel": 23, "noniid": 25, "regress": [28, 67, 68, 69, 87, 96], "prioriti": 29, "order": 29, "find": [29, 78, 80, 82, 84, 85, 86, 87, 88, 89, 91, 92, 93, 94, 96, 97, 98, 99, 100], "underperforming_group": 30, "model_output": 31, "report": [32, 88], "dataset": [35, 57, 78, 82, 85, 86, 87, 88, 89, 92, 93, 94, 96, 97, 99, 100], "cifar_cnn": 36, "coteach": 37, "experiment": 38, "label_issues_batch": 39, "mnist_pytorch": 40, "span_classif": 41, "filter": [42, 58, 61, 70, 74, 89], "label_quality_util": 44, "latent_algebra": 45, "multiannotator_util": 46, "multilabel_scor": 47, "multilabel_util": 48, "token_classification_util": 50, "util": 51, "valid": [52, 88, 95], "fasttext": 53, "model": [54, 78, 80, 84, 85, 87, 88, 89, 91, 92, 93, 94, 96, 98, 99], "kera": 55, "multiannot": [56, 91], "multilabel_classif": 59, "rank": [60, 63, 66, 69, 72, 76, 89], "object_detect": 62, "summari": [64, 73, 77], "learn": [68, 82, 87, 89, 98], "segment": [71, 97], "token_classif": [75, 100], "cleanlab": [78, 80, 84, 85, 87, 88, 89, 91, 92, 93, 94, 96, 97, 98, 99, 100], "open": [78, 87], "sourc": [78, 87], "document": 78, "quickstart": 78, "1": [78, 79, 80, 81, 82, 84, 85, 88, 89, 91, 92, 93, 94, 96, 97, 98, 99, 100], "instal": [78, 80, 81, 82, 84, 85, 86, 88, 89, 91, 92, 93, 94, 96, 97, 98, 99, 100], "2": [78, 79, 80, 81, 82, 84, 85, 88, 89, 91, 92, 93, 94, 96, 97, 98, 99, 100], "common": [78, 79, 100], "3": [78, 80, 81, 82, 84, 85, 88, 89, 91, 92, 93, 94, 96, 97, 98, 99, 100], "handl": [78, 87], "error": [78, 87, 88, 89, 91, 92, 93, 96, 97, 99, 100], "train": [78, 80, 87, 94, 96, 98, 99], "robust": [78, 89, 96, 98, 99], "noisi": [78, 89, 96, 98, 99], "4": [78, 80, 81, 82, 84, 85, 88, 89, 91, 93, 94, 96, 98, 99], "curat": [78, 86], "fix": [78, 87], "level": [78, 86, 89, 100], "5": [78, 80, 82, 84, 88, 89, 91, 96, 98], "improv": [78, 91], "via": [78, 89, 91], "mani": [78, 89], "other": [78, 91, 93, 96], "techniqu": 78, "contribut": 78, "easi": [78, 84, 85, 88], "mode": [78, 84, 85, 88], "how": [79, 87, 89, 91, 92, 100], "migrat": 79, "version": 79, "0": 79, "from": [79, 81, 82, 89, 96, 98, 99], "pre": [79, 80, 87, 94], "function": [79, 81], "name": 79, "chang": 79, "modul": [79, 89], "new": 79, "remov": 79, "argument": [79, 81], "variabl": 79, "audio": 80, "speechbrain": 80, "depend": [80, 81, 82, 84, 85, 86, 88, 89, 91, 92, 93, 94, 96, 97, 98, 99, 100], "import": [80, 81, 82, 86, 88, 89, 91], "them": [80, 86, 89], "load": [80, 81, 82, 84, 85, 96, 98, 99], "featur": [80, 88, 94], "fit": 80, "linear": 80, "comput": [80, 84, 85, 87, 88, 91, 95, 98], "out": [80, 81, 82, 84, 85, 88, 91, 95, 98], "sampl": [80, 81, 82, 84, 85, 88, 91, 95, 98], "predict": [80, 81, 82, 84, 85, 88, 91, 92, 93, 95, 98], "probabl": [80, 81, 82, 84, 85, 88, 91, 95, 98], "workflow": [81, 89], "audit": [81, 82], "requir": [81, 82, 84, 85, 88, 91, 92, 93, 94, 96, 97, 98, 99, 100], "classifi": [81, 82], "instanti": 81, "object": [81, 93], "increment": 81, "search": 81, "specifi": [81, 87], "nondefault": 81, "save": 81, "ad": 81, "A": 82, "unifi": 82, "all": [82, 89], "kind": [82, 93], "skip": [82, 86, 89, 91], "detail": [82, 86, 89, 91], "more": [82, 89, 96, 98, 99], "about": 82, "addit": 82, "inform": [82, 88], "tutori": [83, 86, 90], "tabular": [84, 98], "numer": 84, "categor": 84, "column": 84, "process": [84, 94, 96, 98], "select": [84, 98], "construct": 84, "k": [84, 88, 95], "nearest": 84, "neighbour": 84, "graph": 84, "text": [85, 99, 100], "format": [85, 87, 92, 93, 99], "defin": [85, 88, 96, 99], "drift": [85, 92], "fetch": [86, 88], "evalu": 86, "health": [86, 89], "8": [86, 89], "popular": 86, "faq": 87, "what": [87, 89, 95], "do": [87, 89], "i": [87, 89, 95], "infer": 87, "correct": 87, "exampl": [87, 88, 89, 94], "ha": 87, "flag": 87, "should": 87, "v": 87, "test": [87, 89, 94], "big": 87, "limit": 87, "memori": 87, "why": 87, "isn": 87, "t": 87, "cleanlearn": [87, 89], "work": [87, 89, 91, 100], "me": 87, "differ": [87, 93], "clean": [87, 89], "final": 87, "hyperparamet": 87, "tune": 87, "onli": 87, "one": [87, 89, 92, 97], "doe": [87, 91, 100], "take": 87, "so": 87, "long": 87, "slice": 87, "when": [87, 89], "identifi": [87, 93], "run": 87, "licens": 87, "under": 87, "an": 87, "answer": 87, "question": 87, "pytorch": [88, 94], "normal": 88, "fashion": 88, "mnist": 88, "prepar": 88, "fold": [88, 95], "cross": [88, 95], "embed": [88, 94], "7": [88, 89], "view": 88, "most": [88, 100], "like": 88, "sever": 88, "set": [88, 89], "dark": 88, "top": [88, 97], "low": 88, "The": 89, "centric": 89, "ai": 89, "machin": 89, "find_label_issu": 89, "line": 89, "code": 89, "visual": [89, 93, 94, 97], "twenti": 89, "lowest": 89, "qualiti": [89, 91, 92, 93, 97, 100], "see": 89, "now": 89, "let": 89, "": 89, "happen": 89, "we": 89, "merg": 89, "seafoam": 89, "green": 89, "yellow": 89, "too": 89, "you": 89, "re": 89, "6": 89, "One": 89, "score": [89, 91, 92, 93, 97, 100], "rule": 89, "overal": [89, 97], "accur": 89, "thi": 89, "directli": 89, "fulli": 89, "character": 89, "nois": 89, "matrix": [89, 92], "joint": 89, "prior": 89, "true": 89, "distribut": 89, "flip": 89, "rate": 89, "ani": 89, "again": 89, "support": 89, "lot": 89, "method": 89, "filter_bi": 89, "automat": 89, "everi": 89, "uniqu": 89, "num_label_issu": 89, "threshold": 89, "found": 89, "Not": 89, "sure": 89, "ensembl": 89, "multipl": [89, 91], "predictor": 89, "consensu": 91, "annot": 91, "initi": 91, "major": 91, "vote": 91, "better": 91, "statist": 91, "compar": 91, "inspect": 91, "potenti": [91, 96, 99], "retrain": 91, "further": 91, "multi": 92, "beyond": 92, "mislabel": [92, 97, 100], "given": 92, "hot": 92, "binari": 92, "without": 92, "applic": 92, "real": 92, "download": [93, 97, 100], "objectlab": 93, "exploratori": 93, "analysi": 93, "timm": 94, "cifar10": 94, "some": 94, "pred_prob": [94, 97, 100], "wai": 96, "semant": 97, "which": 97, "ar": 97, "commonli": 97, "focus": 97, "scikit": 98, "token": 100, "word": 100, "sentenc": 100, "contain": 100, "particular": 100}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "nbsphinx": 4, "sphinx.ext.viewcode": 1, "sphinx.ext.todo": 2, "sphinx": 58}, "alltitles": {"benchmarking": [[0, "module-cleanlab.benchmarking"]], "noise_generation": [[1, "module-cleanlab.benchmarking.noise_generation"]], "classification": [[2, "module-cleanlab.classification"]], "count": [[3, "module-cleanlab.count"]], "datalab": [[4, "module-cleanlab.datalab.datalab"], [10, "module-cleanlab.datalab"]], "Creating Your Own Issues Manager": [[6, "creating-your-own-issues-manager"]], "Prerequisites": [[6, "prerequisites"]], "Implementing IssueManagers": [[6, "implementing-issuemanagers"]], "Basic Issue Check": [[6, "basic-issue-check"]], "Intermediate Issue Check": [[6, "intermediate-issue-check"]], "Advanced Issue Check": [[6, "advanced-issue-check"]], "Use with Datalab": [[6, "use-with-datalab"]], "Generating Cluster IDs": [[7, "generating-cluster-ids"]], "Datalab guides": [[8, "datalab-guides"]], "Types of issues": [[8, "types-of-issues"]], "Customizing issue types": [[8, "customizing-issue-types"]], "Datalab Issue Types": [[9, "datalab-issue-types"]], "Types of issues Datalab can detect": [[9, "types-of-issues-datalab-can-detect"]], "Estimates for Each Issue Type": [[9, "estimates-for-each-issue-type"]], "Label Issue": [[9, "label-issue"]], "Outlier Issue": [[9, "outlier-issue"]], "(Near) Duplicate Issue": [[9, "near-duplicate-issue"]], "Non-IID Issue": [[9, "non-iid-issue"]], "Class Imbalance Issue": [[9, "class-imbalance-issue"]], "Image-specific Issues": [[9, "image-specific-issues"]], "Underperforming Group Issue": [[9, "underperforming-group-issue"]], "Null Issue": [[9, "null-issue"]], "Data Valuation Issue": [[9, "data-valuation-issue"]], "Optional Issue Parameters": [[9, "optional-issue-parameters"]], "Label Issue Parameters": [[9, "label-issue-parameters"]], "Outlier Issue Parameters": [[9, "outlier-issue-parameters"]], "Duplicate Issue Parameters": [[9, "duplicate-issue-parameters"]], "Non-IID Issue Parameters": [[9, "non-iid-issue-parameters"]], "Imbalance Issue Parameters": [[9, "imbalance-issue-parameters"]], "Underperforming Group Issue Parameters": [[9, "underperforming-group-issue-parameters"]], "Null Issue Parameters": [[9, "null-issue-parameters"]], "Data Valuation Issue Parameters": [[9, "data-valuation-issue-parameters"]], "Image Issue Parameters": [[9, "image-issue-parameters"]], "Getting Started": [[10, "getting-started"]], "Guides": [[10, "guides"]], "API Reference": [[10, "api-reference"]], "data": [[11, "module-cleanlab.datalab.internal.data"]], "data_issues": [[12, "module-cleanlab.datalab.internal.data_issues"]], "factory": [[13, "module-cleanlab.datalab.internal.issue_manager_factory"]], "internal": [[14, "internal"], [43, "internal"]], "issue_finder": [[15, "issue-finder"]], "data_valuation": [[17, "data-valuation"]], "duplicate": [[18, "module-cleanlab.datalab.internal.issue_manager.duplicate"]], "imbalance": [[19, "module-cleanlab.datalab.internal.issue_manager.imbalance"]], "issue_manager": [[20, "issue-manager"], [21, "module-cleanlab.datalab.internal.issue_manager.issue_manager"]], "Registered issue managers": [[20, "registered-issue-managers"]], "ML task-specific issue managers": [[20, "ml-task-specific-issue-managers"]], "label": [[22, "module-cleanlab.datalab.internal.issue_manager.label"], [24, "module-cleanlab.datalab.internal.issue_manager.multilabel.label"], [29, "module-cleanlab.datalab.internal.issue_manager.regression.label"]], "multilabel": [[23, "multilabel"]], "noniid": [[25, "module-cleanlab.datalab.internal.issue_manager.noniid"]], "null": [[26, "null"]], "outlier": [[27, "module-cleanlab.datalab.internal.issue_manager.outlier"], [49, "module-cleanlab.internal.outlier"], [65, "module-cleanlab.outlier"]], "regression": [[28, "regression"], [67, "regression"]], "Priority Order for finding issues:": [[29, null]], "underperforming_group": [[30, "underperforming-group"]], "model_outputs": [[31, "module-cleanlab.datalab.internal.model_outputs"]], "report": [[32, "report"]], "task": [[33, "task"]], "dataset": [[35, "module-cleanlab.dataset"], [57, "module-cleanlab.multilabel_classification.dataset"]], "cifar_cnn": [[36, "module-cleanlab.experimental.cifar_cnn"]], "coteaching": [[37, "module-cleanlab.experimental.coteaching"]], "experimental": [[38, "experimental"]], "label_issues_batched": [[39, "module-cleanlab.experimental.label_issues_batched"]], "mnist_pytorch": [[40, "module-cleanlab.experimental.mnist_pytorch"]], "span_classification": [[41, "module-cleanlab.experimental.span_classification"]], "filter": [[42, "module-cleanlab.filter"], [58, "module-cleanlab.multilabel_classification.filter"], [61, "filter"], [70, "filter"], [74, "module-cleanlab.token_classification.filter"]], "label_quality_utils": [[44, "module-cleanlab.internal.label_quality_utils"]], "latent_algebra": [[45, "module-cleanlab.internal.latent_algebra"]], "multiannotator_utils": [[46, "module-cleanlab.internal.multiannotator_utils"]], "multilabel_scorer": [[47, "module-cleanlab.internal.multilabel_scorer"]], "multilabel_utils": [[48, "module-cleanlab.internal.multilabel_utils"]], "token_classification_utils": [[50, "module-cleanlab.internal.token_classification_utils"]], "util": [[51, "module-cleanlab.internal.util"]], "validation": [[52, "module-cleanlab.internal.validation"]], "fasttext": [[53, "fasttext"]], "models": [[54, "models"]], "keras": [[55, "module-cleanlab.models.keras"]], "multiannotator": [[56, "module-cleanlab.multiannotator"]], "multilabel_classification": [[59, "multilabel-classification"]], "rank": [[60, "module-cleanlab.multilabel_classification.rank"], [63, "module-cleanlab.object_detection.rank"], [66, "module-cleanlab.rank"], [72, "module-cleanlab.segmentation.rank"], [76, "module-cleanlab.token_classification.rank"]], "object_detection": [[62, "object-detection"]], "summary": [[64, "summary"], [73, "module-cleanlab.segmentation.summary"], [77, "module-cleanlab.token_classification.summary"]], "regression.learn": [[68, "module-cleanlab.regression.learn"]], "regression.rank": [[69, "module-cleanlab.regression.rank"]], "segmentation": [[71, "segmentation"]], "token_classification": [[75, "token-classification"]], "cleanlab open-source documentation": [[78, "cleanlab-open-source-documentation"]], "Quickstart": [[78, "quickstart"]], "1. Install cleanlab": [[78, "install-cleanlab"]], "2. Find common issues in your data": [[78, "find-common-issues-in-your-data"]], "3. Handle label errors and train robust models with noisy labels": [[78, "handle-label-errors-and-train-robust-models-with-noisy-labels"]], "4. Dataset curation: fix dataset-level issues": [[78, "dataset-curation-fix-dataset-level-issues"]], "5. Improve your data via many other techniques": [[78, "improve-your-data-via-many-other-techniques"]], "Contributing": [[78, "contributing"]], "Easy Mode": [[78, "easy-mode"], [84, "Easy-Mode"], [85, "Easy-Mode"], [88, "Easy-Mode"]], "How to migrate to versions >= 2.0.0 from pre 1.0.1": [[79, "how-to-migrate-to-versions-2-0-0-from-pre-1-0-1"]], "Function and class name changes": [[79, "function-and-class-name-changes"]], "Module name changes": [[79, "module-name-changes"]], "New modules": [[79, "new-modules"]], "Removed modules": [[79, "removed-modules"]], "Common argument and variable name changes": [[79, "common-argument-and-variable-name-changes"]], "Audio Classification with SpeechBrain and Cleanlab": [[80, "Audio-Classification-with-SpeechBrain-and-Cleanlab"]], "1. Install dependencies and import them": [[80, "1.-Install-dependencies-and-import-them"]], "2. Load the data": [[80, "2.-Load-the-data"]], "3. Use pre-trained SpeechBrain model to featurize audio": [[80, "3.-Use-pre-trained-SpeechBrain-model-to-featurize-audio"]], "4. Fit linear model and compute out-of-sample predicted probabilities": [[80, "4.-Fit-linear-model-and-compute-out-of-sample-predicted-probabilities"]], "5. Use cleanlab to find label issues": [[80, "5.-Use-cleanlab-to-find-label-issues"], [84, "5.-Use-cleanlab-to-find-label-issues"]], "Datalab: Advanced workflows to audit your data": [[81, "Datalab:-Advanced-workflows-to-audit-your-data"]], "Install and import required dependencies": [[81, "Install-and-import-required-dependencies"]], "Create and load the data": [[81, "Create-and-load-the-data"]], "Get out-of-sample predicted probabilities from a classifier": [[81, "Get-out-of-sample-predicted-probabilities-from-a-classifier"]], "Instantiate Datalab object": [[81, "Instantiate-Datalab-object"]], "Functionality 1: Incremental issue search": [[81, "Functionality-1:-Incremental-issue-search"]], "Functionality 2: Specifying nondefault arguments": [[81, "Functionality-2:-Specifying-nondefault-arguments"]], "Functionality 3: Save and load Datalab objects": [[81, "Functionality-3:-Save-and-load-Datalab-objects"]], "Functionality 4: Adding a custom IssueManager": [[81, "Functionality-4:-Adding-a-custom-IssueManager"]], "Datalab: A unified audit to detect all kinds of issues in data and labels": [[82, "Datalab:-A-unified-audit-to-detect-all-kinds-of-issues-in-data-and-labels"]], "1. Install and import required dependencies": [[82, "1.-Install-and-import-required-dependencies"], [88, "1.-Install-and-import-required-dependencies"], [91, "1.-Install-and-import-required-dependencies"]], "2. Create and load the data (can skip these details)": [[82, "2.-Create-and-load-the-data-(can-skip-these-details)"]], "3. Get out-of-sample predicted probabilities from a classifier": [[82, "3.-Get-out-of-sample-predicted-probabilities-from-a-classifier"]], "4. Use Datalab to find issues in the dataset": [[82, "4.-Use-Datalab-to-find-issues-in-the-dataset"]], "5. Learn more about the issues in your dataset": [[82, "5.-Learn-more-about-the-issues-in-your-dataset"]], "Get additional information": [[82, "Get-additional-information"]], "Near duplicate issues": [[82, "Near-duplicate-issues"], [88, "Near-duplicate-issues"]], "Datalab Tutorials": [[83, "datalab-tutorials"]], "Detecting Issues in Tabular Data\u00a0(Numeric/Categorical columns) with Datalab": [[84, "Detecting-Issues-in-Tabular-Data\u00a0(Numeric/Categorical-columns)-with-Datalab"]], "1. Install required dependencies": [[84, "1.-Install-required-dependencies"], [85, "1.-Install-required-dependencies"], [96, "1.-Install-required-dependencies"], [98, "1.-Install-required-dependencies"], [99, "1.-Install-required-dependencies"]], "2. Load and process the data": [[84, "2.-Load-and-process-the-data"], [96, "2.-Load-and-process-the-data"], [98, "2.-Load-and-process-the-data"]], "3. Select a classification model and compute out-of-sample predicted probabilities": [[84, "3.-Select-a-classification-model-and-compute-out-of-sample-predicted-probabilities"], [98, "3.-Select-a-classification-model-and-compute-out-of-sample-predicted-probabilities"]], "4. Construct K nearest neighbours graph": [[84, "4.-Construct-K-nearest-neighbours-graph"]], "Label issues": [[84, "Label-issues"], [85, "Label-issues"], [88, "Label-issues"]], "Outlier issues": [[84, "Outlier-issues"], [85, "Outlier-issues"], [88, "Outlier-issues"]], "Near-duplicate issues": [[84, "Near-duplicate-issues"], [85, "Near-duplicate-issues"]], "Detecting Issues in a Text Dataset with Datalab": [[85, "Detecting-Issues-in-a-Text-Dataset-with-Datalab"]], "2. Load and format the text dataset": [[85, "2.-Load-and-format-the-text-dataset"], [99, "2.-Load-and-format-the-text-dataset"]], "3. Define a classification model and compute out-of-sample predicted probabilities": [[85, "3.-Define-a-classification-model-and-compute-out-of-sample-predicted-probabilities"]], "4. Use cleanlab to find issues in your dataset": [[85, "4.-Use-cleanlab-to-find-issues-in-your-dataset"]], "Non-IID issues (data drift)": [[85, "Non-IID-issues-(data-drift)"]], "Find Dataset-level Issues for Dataset Curation": [[86, "Find-Dataset-level-Issues-for-Dataset-Curation"]], "Install dependencies and import them": [[86, "Install-dependencies-and-import-them"], [89, "Install-dependencies-and-import-them"]], "Fetch the data (can skip these details)": [[86, "Fetch-the-data-(can-skip-these-details)"]], "Start of tutorial: Evaluate the health of 8 popular datasets": [[86, "Start-of-tutorial:-Evaluate-the-health-of-8-popular-datasets"]], "FAQ": [[87, "FAQ"]], "What data can cleanlab detect issues in?": [[87, "What-data-can-cleanlab-detect-issues-in?"]], "How do I format classification labels for cleanlab?": [[87, "How-do-I-format-classification-labels-for-cleanlab?"]], "How do I infer the correct labels for examples cleanlab has flagged?": [[87, "How-do-I-infer-the-correct-labels-for-examples-cleanlab-has-flagged?"]], "How should I handle label errors in train vs. test data?": [[87, "How-should-I-handle-label-errors-in-train-vs.-test-data?"]], "How can I find label issues in big datasets with limited memory?": [[87, "How-can-I-find-label-issues-in-big-datasets-with-limited-memory?"]], "Why isn\u2019t CleanLearning working for me?": [[87, "Why-isn\u2019t-CleanLearning-working-for-me?"]], "How can I use different models for data cleaning vs. final training in CleanLearning?": [[87, "How-can-I-use-different-models-for-data-cleaning-vs.-final-training-in-CleanLearning?"]], "How do I hyperparameter tune only the final model trained (and not the one finding label issues) in CleanLearning?": [[87, "How-do-I-hyperparameter-tune-only-the-final-model-trained-(and-not-the-one-finding-label-issues)-in-CleanLearning?"]], "Why does regression.learn.CleanLearning take so long?": [[87, "Why-does-regression.learn.CleanLearning-take-so-long?"]], "How do I specify pre-computed data slices/clusters when detecting the Underperforming Group Issue?": [[87, "How-do-I-specify-pre-computed-data-slices/clusters-when-detecting-the-Underperforming-Group-Issue?"]], "How to handle near-duplicate data identified by cleanlab?": [[87, "How-to-handle-near-duplicate-data-identified-by-cleanlab?"]], "What ML models should I run cleanlab with? How do I fix the issues cleanlab has identified?": [[87, "What-ML-models-should-I-run-cleanlab-with?-How-do-I-fix-the-issues-cleanlab-has-identified?"]], "What license is cleanlab open-sourced under?": [[87, "What-license-is-cleanlab-open-sourced-under?"]], "Can\u2019t find an answer to your question?": [[87, "Can't-find-an-answer-to-your-question?"]], "Image Classification with PyTorch and Cleanlab": [[88, "Image-Classification-with-PyTorch-and-Cleanlab"]], "2. Fetch and normalize the Fashion-MNIST dataset": [[88, "2.-Fetch-and-normalize-the-Fashion-MNIST-dataset"]], "3. Define a classification model": [[88, "3.-Define-a-classification-model"]], "4. Prepare the dataset for K-fold cross-validation": [[88, "4.-Prepare-the-dataset-for-K-fold-cross-validation"]], "5. Compute out-of-sample predicted probabilities and feature embeddings": [[88, "5.-Compute-out-of-sample-predicted-probabilities-and-feature-embeddings"]], "7. Use cleanlab to find issues": [[88, "7.-Use-cleanlab-to-find-issues"]], "View report": [[88, "View-report"]], "View most likely examples with label errors": [[88, "View-most-likely-examples-with-label-errors"]], "View most severe outliers": [[88, "View-most-severe-outliers"]], "View sets of near duplicate images": [[88, "View-sets-of-near-duplicate-images"]], "Dark images": [[88, "Dark-images"]], "View top examples of dark images": [[88, "View-top-examples-of-dark-images"]], "Low information images": [[88, "Low-information-images"]], "The Workflows of Data-centric AI for Classification with Noisy Labels": [[89, "The-Workflows-of-Data-centric-AI-for-Classification-with-Noisy-Labels"]], "Create the data (can skip these details)": [[89, "Create-the-data-(can-skip-these-details)"]], "Workflow 1: Use Datalab to detect many types of issues": [[89, "Workflow-1:-Use-Datalab-to-detect-many-types-of-issues"]], "Workflow 2: Use CleanLearning for more robust Machine Learning": [[89, "Workflow-2:-Use-CleanLearning-for-more-robust-Machine-Learning"]], "Clean Learning = Machine Learning with cleaned data": [[89, "Clean-Learning-=-Machine-Learning-with-cleaned-data"]], "Workflow 3: Use CleanLearning to find_label_issues in one line of code": [[89, "Workflow-3:-Use-CleanLearning-to-find_label_issues-in-one-line-of-code"]], "Visualize the twenty examples with lowest label quality to see if Cleanlab works.": [[89, "Visualize-the-twenty-examples-with-lowest-label-quality-to-see-if-Cleanlab-works."]], "Workflow 4: Use cleanlab to find dataset-level and class-level issues": [[89, "Workflow-4:-Use-cleanlab-to-find-dataset-level-and-class-level-issues"]], "Now, let\u2019s see what happens if we merge classes \u201cseafoam green\u201d and \u201cyellow\u201d": [[89, "Now,-let's-see-what-happens-if-we-merge-classes-%22seafoam-green%22-and-%22yellow%22"]], "Workflow 5: Clean your test set too if you\u2019re doing ML with noisy labels!": [[89, "Workflow-5:-Clean-your-test-set-too-if-you're-doing-ML-with-noisy-labels!"]], "Workflow 6: One score to rule them all \u2013 use cleanlab\u2019s overall dataset health score": [[89, "Workflow-6:-One-score-to-rule-them-all----use-cleanlab's-overall-dataset-health-score"]], "How accurate is this dataset health score?": [[89, "How-accurate-is-this-dataset-health-score?"]], "Workflow(s) 7: Use count, rank, filter modules directly": [[89, "Workflow(s)-7:-Use-count,-rank,-filter-modules-directly"]], "Workflow 7.1 (count): Fully characterize label noise (noise matrix, joint, prior of true labels, \u2026)": [[89, "Workflow-7.1-(count):-Fully-characterize-label-noise-(noise-matrix,-joint,-prior-of-true-labels,-...)"]], "Use cleanlab to estimate and visualize the joint distribution of label noise and noise matrix of label flipping rates:": [[89, "Use-cleanlab-to-estimate-and-visualize-the-joint-distribution-of-label-noise-and-noise-matrix-of-label-flipping-rates:"]], "Workflow 7.2 (filter): Find label issues for any dataset and any model in one line of code": [[89, "Workflow-7.2-(filter):-Find-label-issues-for-any-dataset-and-any-model-in-one-line-of-code"]], "Again, we can visualize the twenty examples with lowest label quality to see if Cleanlab works.": [[89, "Again,-we-can-visualize-the-twenty-examples-with-lowest-label-quality-to-see-if-Cleanlab-works."]], "Workflow 7.2 supports lots of methods to find_label_issues() via the filter_by parameter.": [[89, "Workflow-7.2-supports-lots-of-methods-to-find_label_issues()-via-the-filter_by-parameter."]], "Workflow 7.3 (rank): Automatically rank every example by a unique label quality score. Find errors using cleanlab.count.num_label_issues as a threshold.": [[89, "Workflow-7.3-(rank):-Automatically-rank-every-example-by-a-unique-label-quality-score.-Find-errors-using-cleanlab.count.num_label_issues-as-a-threshold."]], "Again, we can visualize the label issues found to see if Cleanlab works.": [[89, "Again,-we-can-visualize-the-label-issues-found-to-see-if-Cleanlab-works."]], "Not sure when to use Workflow 7.2 or 7.3 to find label issues?": [[89, "Not-sure-when-to-use-Workflow-7.2-or-7.3-to-find-label-issues?"]], "Workflow 8: Ensembling label quality scores from multiple predictors": [[89, "Workflow-8:-Ensembling-label-quality-scores-from-multiple-predictors"]], "Tutorials": [[90, "tutorials"]], "Estimate Consensus and Annotator Quality for Data Labeled by Multiple Annotators": [[91, "Estimate-Consensus-and-Annotator-Quality-for-Data-Labeled-by-Multiple-Annotators"]], "2. Create the data (can skip these details)": [[91, "2.-Create-the-data-(can-skip-these-details)"]], "3. Get initial consensus labels via majority vote and compute out-of-sample predicted probabilities": [[91, "3.-Get-initial-consensus-labels-via-majority-vote-and-compute-out-of-sample-predicted-probabilities"]], "4. Use cleanlab to get better consensus labels and other statistics": [[91, "4.-Use-cleanlab-to-get-better-consensus-labels-and-other-statistics"]], "Comparing improved consensus labels": [[91, "Comparing-improved-consensus-labels"]], "Inspecting consensus quality scores to find potential consensus label errors": [[91, "Inspecting-consensus-quality-scores-to-find-potential-consensus-label-errors"]], "5. Retrain model using improved consensus labels": [[91, "5.-Retrain-model-using-improved-consensus-labels"]], "Further improvements": [[91, "Further-improvements"]], "How does cleanlab.multiannotator work?": [[91, "How-does-cleanlab.multiannotator-work?"]], "Find Label Errors in Multi-Label Classification Datasets": [[92, "Find-Label-Errors-in-Multi-Label-Classification-Datasets"]], "1. Install required dependencies and get dataset": [[92, "1.-Install-required-dependencies-and-get-dataset"]], "2. Format data, labels, and model predictions": [[92, "2.-Format-data,-labels,-and-model-predictions"], [93, "2.-Format-data,-labels,-and-model-predictions"]], "3. Use cleanlab to find label issues": [[92, "3.-Use-cleanlab-to-find-label-issues"], [93, "3.-Use-cleanlab-to-find-label-issues"], [97, "3.-Use-cleanlab-to-find-label-issues"], [100, "3.-Use-cleanlab-to-find-label-issues"]], "Label quality scores": [[92, "Label-quality-scores"]], "Data issues beyond mislabeling (outliers, duplicates, drift, \u2026)": [[92, "Data-issues-beyond-mislabeling-(outliers,-duplicates,-drift,-...)"]], "How to format labels given as a one-hot (multi-hot) binary matrix?": [[92, "How-to-format-labels-given-as-a-one-hot-(multi-hot)-binary-matrix?"]], "Estimate label issues without Datalab": [[92, "Estimate-label-issues-without-Datalab"]], "Application to Real Data": [[92, "Application-to-Real-Data"]], "Finding Label Errors in Object Detection Datasets": [[93, "Finding-Label-Errors-in-Object-Detection-Datasets"]], "1. Install required dependencies and download data": [[93, "1.-Install-required-dependencies-and-download-data"], [97, "1.-Install-required-dependencies-and-download-data"], [100, "1.-Install-required-dependencies-and-download-data"]], "Get label quality scores": [[93, "Get-label-quality-scores"], [97, "Get-label-quality-scores"]], "4. Use ObjectLab to visualize label issues": [[93, "4.-Use-ObjectLab-to-visualize-label-issues"]], "Different kinds of label issues identified by ObjectLab": [[93, "Different-kinds-of-label-issues-identified-by-ObjectLab"]], "Other uses of visualize": [[93, "Other-uses-of-visualize"]], "Exploratory data analysis": [[93, "Exploratory-data-analysis"]], "Detect Outliers with Cleanlab and PyTorch Image Models (timm)": [[94, "Detect-Outliers-with-Cleanlab-and-PyTorch-Image-Models-(timm)"]], "1. Install the required dependencies": [[94, "1.-Install-the-required-dependencies"]], "2. Pre-process the Cifar10 dataset": [[94, "2.-Pre-process-the-Cifar10-dataset"]], "Visualize some of the training and test examples": [[94, "Visualize-some-of-the-training-and-test-examples"]], "3. Use cleanlab and feature embeddings to find outliers in the data": [[94, "3.-Use-cleanlab-and-feature-embeddings-to-find-outliers-in-the-data"]], "4. Use cleanlab and pred_probs to find outliers in the data": [[94, "4.-Use-cleanlab-and-pred_probs-to-find-outliers-in-the-data"]], "Computing Out-of-Sample Predicted Probabilities with Cross-Validation": [[95, "computing-out-of-sample-predicted-probabilities-with-cross-validation"]], "Out-of-sample predicted probabilities?": [[95, "out-of-sample-predicted-probabilities"]], "What is K-fold cross-validation?": [[95, "what-is-k-fold-cross-validation"]], "Find Noisy Labels in Regression Datasets": [[96, "Find-Noisy-Labels-in-Regression-Datasets"]], "3. Define a regression model and use cleanlab to find potential label errors": [[96, "3.-Define-a-regression-model-and-use-cleanlab-to-find-potential-label-errors"]], "4. Train a more robust model from noisy labels": [[96, "4.-Train-a-more-robust-model-from-noisy-labels"], [99, "4.-Train-a-more-robust-model-from-noisy-labels"]], "5. Other ways to find noisy labels in regression datasets": [[96, "5.-Other-ways-to-find-noisy-labels-in-regression-datasets"]], "Find Label Errors in Semantic Segmentation Datasets": [[97, "Find-Label-Errors-in-Semantic-Segmentation-Datasets"]], "2. Get data, labels, and pred_probs": [[97, "2.-Get-data,-labels,-and-pred_probs"], [100, "2.-Get-data,-labels,-and-pred_probs"]], "Visualize top label issues": [[97, "Visualize-top-label-issues"]], "Classes which are commonly mislabeled overall": [[97, "Classes-which-are-commonly-mislabeled-overall"]], "Focusing on one specific class": [[97, "Focusing-on-one-specific-class"]], "Classification with Tabular Data using Scikit-Learn and Cleanlab": [[98, "Classification-with-Tabular-Data-using-Scikit-Learn-and-Cleanlab"]], "4. Use cleanlab to find label issues": [[98, "4.-Use-cleanlab-to-find-label-issues"]], "5. Train a more robust model from noisy labels": [[98, "5.-Train-a-more-robust-model-from-noisy-labels"]], "Text Classification with Noisy Labels": [[99, "Text-Classification-with-Noisy-Labels"]], "3. Define a classification model and use cleanlab to find potential label errors": [[99, "3.-Define-a-classification-model-and-use-cleanlab-to-find-potential-label-errors"]], "Find Label Errors in Token Classification (Text) Datasets": [[100, "Find-Label-Errors-in-Token-Classification-(Text)-Datasets"]], "Most common word-level token mislabels": [[100, "Most-common-word-level-token-mislabels"]], "Find sentences containing a particular mislabeled word": [[100, "Find-sentences-containing-a-particular-mislabeled-word"]], "Sentence label quality score": [[100, "Sentence-label-quality-score"]], "How does cleanlab.token_classification work?": [[100, "How-does-cleanlab.token_classification-work?"]]}, "indexentries": {"cleanlab.benchmarking": [[0, "module-cleanlab.benchmarking"]], "module": [[0, "module-cleanlab.benchmarking"], [1, "module-cleanlab.benchmarking.noise_generation"], [2, "module-cleanlab.classification"], [3, "module-cleanlab.count"], [4, "module-cleanlab.datalab.datalab"], [10, "module-cleanlab.datalab"], [11, "module-cleanlab.datalab.internal.data"], [12, "module-cleanlab.datalab.internal.data_issues"], [13, "module-cleanlab.datalab.internal.issue_manager_factory"], [14, "module-cleanlab.datalab.internal"], [15, "module-cleanlab.datalab.internal.issue_finder"], [17, "module-cleanlab.datalab.internal.issue_manager.data_valuation"], [18, "module-cleanlab.datalab.internal.issue_manager.duplicate"], [19, "module-cleanlab.datalab.internal.issue_manager.imbalance"], [21, "module-cleanlab.datalab.internal.issue_manager.issue_manager"], [22, "module-cleanlab.datalab.internal.issue_manager.label"], [24, "module-cleanlab.datalab.internal.issue_manager.multilabel.label"], [25, "module-cleanlab.datalab.internal.issue_manager.noniid"], [26, "module-cleanlab.datalab.internal.issue_manager.null"], [27, "module-cleanlab.datalab.internal.issue_manager.outlier"], [29, "module-cleanlab.datalab.internal.issue_manager.regression.label"], [30, "module-cleanlab.datalab.internal.issue_manager.underperforming_group"], [31, "module-cleanlab.datalab.internal.model_outputs"], [32, "module-cleanlab.datalab.internal.report"], [33, "module-cleanlab.datalab.internal.task"], [35, "module-cleanlab.dataset"], [36, "module-cleanlab.experimental.cifar_cnn"], [37, "module-cleanlab.experimental.coteaching"], [38, "module-cleanlab.experimental"], [39, "module-cleanlab.experimental.label_issues_batched"], [40, "module-cleanlab.experimental.mnist_pytorch"], [41, "module-cleanlab.experimental.span_classification"], [42, "module-cleanlab.filter"], [43, "module-cleanlab.internal"], [44, "module-cleanlab.internal.label_quality_utils"], [45, "module-cleanlab.internal.latent_algebra"], [46, "module-cleanlab.internal.multiannotator_utils"], [47, "module-cleanlab.internal.multilabel_scorer"], [48, "module-cleanlab.internal.multilabel_utils"], [49, "module-cleanlab.internal.outlier"], [50, "module-cleanlab.internal.token_classification_utils"], [51, "module-cleanlab.internal.util"], [52, "module-cleanlab.internal.validation"], [54, "module-cleanlab.models"], [55, "module-cleanlab.models.keras"], [56, "module-cleanlab.multiannotator"], [57, "module-cleanlab.multilabel_classification.dataset"], [58, "module-cleanlab.multilabel_classification.filter"], [59, "module-cleanlab.multilabel_classification"], [60, "module-cleanlab.multilabel_classification.rank"], [61, "module-cleanlab.object_detection.filter"], [62, "module-cleanlab.object_detection"], [63, "module-cleanlab.object_detection.rank"], [64, "module-cleanlab.object_detection.summary"], [65, "module-cleanlab.outlier"], [66, "module-cleanlab.rank"], [67, "module-cleanlab.regression"], [68, "module-cleanlab.regression.learn"], [69, "module-cleanlab.regression.rank"], [70, "module-cleanlab.segmentation.filter"], [71, "module-cleanlab.segmentation"], [72, "module-cleanlab.segmentation.rank"], [73, "module-cleanlab.segmentation.summary"], [74, "module-cleanlab.token_classification.filter"], [75, "module-cleanlab.token_classification"], [76, "module-cleanlab.token_classification.rank"], [77, "module-cleanlab.token_classification.summary"]], "cleanlab.benchmarking.noise_generation": [[1, "module-cleanlab.benchmarking.noise_generation"]], "generate_n_rand_probabilities_that_sum_to_m() (in module cleanlab.benchmarking.noise_generation)": [[1, "cleanlab.benchmarking.noise_generation.generate_n_rand_probabilities_that_sum_to_m"]], "generate_noise_matrix_from_trace() (in module cleanlab.benchmarking.noise_generation)": [[1, "cleanlab.benchmarking.noise_generation.generate_noise_matrix_from_trace"]], "generate_noisy_labels() (in module cleanlab.benchmarking.noise_generation)": [[1, "cleanlab.benchmarking.noise_generation.generate_noisy_labels"]], "noise_matrix_is_valid() (in module cleanlab.benchmarking.noise_generation)": [[1, "cleanlab.benchmarking.noise_generation.noise_matrix_is_valid"]], "randomly_distribute_n_balls_into_k_bins() (in module cleanlab.benchmarking.noise_generation)": [[1, "cleanlab.benchmarking.noise_generation.randomly_distribute_N_balls_into_K_bins"]], "cleanlearning (class in cleanlab.classification)": [[2, "cleanlab.classification.CleanLearning"]], "__init_subclass__() (cleanlab.classification.cleanlearning class method)": [[2, "cleanlab.classification.CleanLearning.__init_subclass__"]], "cleanlab.classification": [[2, "module-cleanlab.classification"]], "find_label_issues() (cleanlab.classification.cleanlearning method)": [[2, "cleanlab.classification.CleanLearning.find_label_issues"]], "fit() (cleanlab.classification.cleanlearning method)": [[2, "cleanlab.classification.CleanLearning.fit"]], "get_label_issues() (cleanlab.classification.cleanlearning method)": [[2, "cleanlab.classification.CleanLearning.get_label_issues"]], "get_metadata_routing() (cleanlab.classification.cleanlearning method)": [[2, "cleanlab.classification.CleanLearning.get_metadata_routing"]], "get_params() (cleanlab.classification.cleanlearning method)": [[2, "cleanlab.classification.CleanLearning.get_params"]], "predict() (cleanlab.classification.cleanlearning method)": [[2, "cleanlab.classification.CleanLearning.predict"]], "predict_proba() (cleanlab.classification.cleanlearning method)": [[2, "cleanlab.classification.CleanLearning.predict_proba"]], "save_space() (cleanlab.classification.cleanlearning method)": [[2, "cleanlab.classification.CleanLearning.save_space"]], "score() (cleanlab.classification.cleanlearning method)": [[2, "cleanlab.classification.CleanLearning.score"]], "set_fit_request() (cleanlab.classification.cleanlearning method)": [[2, "cleanlab.classification.CleanLearning.set_fit_request"]], "set_params() (cleanlab.classification.cleanlearning method)": [[2, "cleanlab.classification.CleanLearning.set_params"]], "set_score_request() (cleanlab.classification.cleanlearning method)": [[2, "cleanlab.classification.CleanLearning.set_score_request"]], "calibrate_confident_joint() (in module cleanlab.count)": [[3, "cleanlab.count.calibrate_confident_joint"]], "cleanlab.count": [[3, "module-cleanlab.count"]], "compute_confident_joint() (in module cleanlab.count)": [[3, "cleanlab.count.compute_confident_joint"]], "estimate_confident_joint_and_cv_pred_proba() (in module cleanlab.count)": [[3, "cleanlab.count.estimate_confident_joint_and_cv_pred_proba"]], "estimate_cv_predicted_probabilities() (in module cleanlab.count)": [[3, "cleanlab.count.estimate_cv_predicted_probabilities"]], "estimate_joint() (in module cleanlab.count)": [[3, "cleanlab.count.estimate_joint"]], "estimate_latent() (in module cleanlab.count)": [[3, "cleanlab.count.estimate_latent"]], "estimate_noise_matrices() (in module cleanlab.count)": [[3, "cleanlab.count.estimate_noise_matrices"]], "estimate_py_and_noise_matrices_from_probabilities() (in module cleanlab.count)": [[3, "cleanlab.count.estimate_py_and_noise_matrices_from_probabilities"]], "estimate_py_noise_matrices_and_cv_pred_proba() (in module cleanlab.count)": [[3, "cleanlab.count.estimate_py_noise_matrices_and_cv_pred_proba"]], "get_confident_thresholds() (in module cleanlab.count)": [[3, "cleanlab.count.get_confident_thresholds"]], "num_label_issues() (in module cleanlab.count)": [[3, "cleanlab.count.num_label_issues"]], "datalab (class in cleanlab.datalab.datalab)": [[4, "cleanlab.datalab.datalab.Datalab"]], "class_names (cleanlab.datalab.datalab.datalab property)": [[4, "cleanlab.datalab.datalab.Datalab.class_names"]], "cleanlab.datalab.datalab": [[4, "module-cleanlab.datalab.datalab"]], "find_issues() (cleanlab.datalab.datalab.datalab method)": [[4, "cleanlab.datalab.datalab.Datalab.find_issues"]], "get_info() (cleanlab.datalab.datalab.datalab method)": [[4, "cleanlab.datalab.datalab.Datalab.get_info"]], "get_issue_summary() (cleanlab.datalab.datalab.datalab method)": [[4, "cleanlab.datalab.datalab.Datalab.get_issue_summary"]], "get_issues() (cleanlab.datalab.datalab.datalab method)": [[4, "cleanlab.datalab.datalab.Datalab.get_issues"]], "has_labels (cleanlab.datalab.datalab.datalab property)": [[4, "cleanlab.datalab.datalab.Datalab.has_labels"]], "info (cleanlab.datalab.datalab.datalab property)": [[4, "cleanlab.datalab.datalab.Datalab.info"]], "issue_summary (cleanlab.datalab.datalab.datalab property)": [[4, "cleanlab.datalab.datalab.Datalab.issue_summary"]], "issues (cleanlab.datalab.datalab.datalab property)": [[4, "cleanlab.datalab.datalab.Datalab.issues"]], "labels (cleanlab.datalab.datalab.datalab property)": [[4, "cleanlab.datalab.datalab.Datalab.labels"]], "list_default_issue_types() (cleanlab.datalab.datalab.datalab method)": [[4, "cleanlab.datalab.datalab.Datalab.list_default_issue_types"]], "list_possible_issue_types() (cleanlab.datalab.datalab.datalab method)": [[4, "cleanlab.datalab.datalab.Datalab.list_possible_issue_types"]], "load() (cleanlab.datalab.datalab.datalab static method)": [[4, "cleanlab.datalab.datalab.Datalab.load"]], "report() (cleanlab.datalab.datalab.datalab method)": [[4, "cleanlab.datalab.datalab.Datalab.report"]], "save() (cleanlab.datalab.datalab.datalab method)": [[4, "cleanlab.datalab.datalab.Datalab.save"]], "cleanlab.datalab": [[10, "module-cleanlab.datalab"]], "data (class in cleanlab.datalab.internal.data)": [[11, "cleanlab.datalab.internal.data.Data"]], "dataformaterror": [[11, "cleanlab.datalab.internal.data.DataFormatError"]], "datasetdicterror": [[11, "cleanlab.datalab.internal.data.DatasetDictError"]], "datasetloaderror": [[11, "cleanlab.datalab.internal.data.DatasetLoadError"]], "label (class in cleanlab.datalab.internal.data)": [[11, "cleanlab.datalab.internal.data.Label"]], "multiclass (class in cleanlab.datalab.internal.data)": [[11, "cleanlab.datalab.internal.data.MultiClass"]], "multilabel (class in cleanlab.datalab.internal.data)": [[11, "cleanlab.datalab.internal.data.MultiLabel"]], "add_note() (cleanlab.datalab.internal.data.dataformaterror method)": [[11, "cleanlab.datalab.internal.data.DataFormatError.add_note"]], "add_note() (cleanlab.datalab.internal.data.datasetdicterror method)": [[11, "cleanlab.datalab.internal.data.DatasetDictError.add_note"]], "add_note() (cleanlab.datalab.internal.data.datasetloaderror method)": [[11, "cleanlab.datalab.internal.data.DatasetLoadError.add_note"]], "args (cleanlab.datalab.internal.data.dataformaterror attribute)": [[11, "cleanlab.datalab.internal.data.DataFormatError.args"]], "args (cleanlab.datalab.internal.data.datasetdicterror attribute)": [[11, "cleanlab.datalab.internal.data.DatasetDictError.args"]], "args (cleanlab.datalab.internal.data.datasetloaderror attribute)": [[11, "cleanlab.datalab.internal.data.DatasetLoadError.args"]], "class_names (cleanlab.datalab.internal.data.data property)": [[11, "cleanlab.datalab.internal.data.Data.class_names"]], "class_names (cleanlab.datalab.internal.data.label property)": [[11, "cleanlab.datalab.internal.data.Label.class_names"]], "class_names (cleanlab.datalab.internal.data.multiclass property)": [[11, "cleanlab.datalab.internal.data.MultiClass.class_names"]], "class_names (cleanlab.datalab.internal.data.multilabel property)": [[11, "cleanlab.datalab.internal.data.MultiLabel.class_names"]], "cleanlab.datalab.internal.data": [[11, "module-cleanlab.datalab.internal.data"]], "has_labels (cleanlab.datalab.internal.data.data property)": [[11, "cleanlab.datalab.internal.data.Data.has_labels"]], "is_available (cleanlab.datalab.internal.data.label property)": [[11, "cleanlab.datalab.internal.data.Label.is_available"]], "is_available (cleanlab.datalab.internal.data.multiclass property)": [[11, "cleanlab.datalab.internal.data.MultiClass.is_available"]], "is_available (cleanlab.datalab.internal.data.multilabel property)": [[11, "cleanlab.datalab.internal.data.MultiLabel.is_available"]], "with_traceback() (cleanlab.datalab.internal.data.dataformaterror method)": [[11, "cleanlab.datalab.internal.data.DataFormatError.with_traceback"]], "with_traceback() (cleanlab.datalab.internal.data.datasetdicterror method)": [[11, "cleanlab.datalab.internal.data.DatasetDictError.with_traceback"]], "with_traceback() (cleanlab.datalab.internal.data.datasetloaderror method)": [[11, "cleanlab.datalab.internal.data.DatasetLoadError.with_traceback"]], "dataissues (class in cleanlab.datalab.internal.data_issues)": [[12, "cleanlab.datalab.internal.data_issues.DataIssues"]], "cleanlab.datalab.internal.data_issues": [[12, "module-cleanlab.datalab.internal.data_issues"]], "collect_issues_from_imagelab() (cleanlab.datalab.internal.data_issues.dataissues method)": [[12, "cleanlab.datalab.internal.data_issues.DataIssues.collect_issues_from_imagelab"]], "collect_issues_from_issue_manager() (cleanlab.datalab.internal.data_issues.dataissues method)": [[12, "cleanlab.datalab.internal.data_issues.DataIssues.collect_issues_from_issue_manager"]], "collect_statistics() (cleanlab.datalab.internal.data_issues.dataissues method)": [[12, "cleanlab.datalab.internal.data_issues.DataIssues.collect_statistics"]], "get_data_statistics() (in module cleanlab.datalab.internal.data_issues)": [[12, "cleanlab.datalab.internal.data_issues.get_data_statistics"]], "get_info() (cleanlab.datalab.internal.data_issues.dataissues method)": [[12, "cleanlab.datalab.internal.data_issues.DataIssues.get_info"]], "get_issue_summary() (cleanlab.datalab.internal.data_issues.dataissues method)": [[12, "cleanlab.datalab.internal.data_issues.DataIssues.get_issue_summary"]], "get_issues() (cleanlab.datalab.internal.data_issues.dataissues method)": [[12, "cleanlab.datalab.internal.data_issues.DataIssues.get_issues"]], "info (cleanlab.datalab.internal.data_issues.dataissues attribute)": [[12, "cleanlab.datalab.internal.data_issues.DataIssues.info"]], "issue_summary (cleanlab.datalab.internal.data_issues.dataissues attribute)": [[12, "cleanlab.datalab.internal.data_issues.DataIssues.issue_summary"]], "issues (cleanlab.datalab.internal.data_issues.dataissues attribute)": [[12, "cleanlab.datalab.internal.data_issues.DataIssues.issues"]], "set_health_score() (cleanlab.datalab.internal.data_issues.dataissues method)": [[12, "cleanlab.datalab.internal.data_issues.DataIssues.set_health_score"]], "statistics (cleanlab.datalab.internal.data_issues.dataissues property)": [[12, "cleanlab.datalab.internal.data_issues.DataIssues.statistics"]], "registry (in module cleanlab.datalab.internal.issue_manager_factory)": [[13, "cleanlab.datalab.internal.issue_manager_factory.REGISTRY"]], "cleanlab.datalab.internal.issue_manager_factory": [[13, "module-cleanlab.datalab.internal.issue_manager_factory"]], "list_default_issue_types() (in module cleanlab.datalab.internal.issue_manager_factory)": [[13, "cleanlab.datalab.internal.issue_manager_factory.list_default_issue_types"]], "list_possible_issue_types() (in module cleanlab.datalab.internal.issue_manager_factory)": [[13, "cleanlab.datalab.internal.issue_manager_factory.list_possible_issue_types"]], "register() (in module cleanlab.datalab.internal.issue_manager_factory)": [[13, "cleanlab.datalab.internal.issue_manager_factory.register"]], "cleanlab.datalab.internal": [[14, "module-cleanlab.datalab.internal"]], "issuefinder (class in cleanlab.datalab.internal.issue_finder)": [[15, "cleanlab.datalab.internal.issue_finder.IssueFinder"]], "cleanlab.datalab.internal.issue_finder": [[15, "module-cleanlab.datalab.internal.issue_finder"]], "find_issues() (cleanlab.datalab.internal.issue_finder.issuefinder method)": [[15, "cleanlab.datalab.internal.issue_finder.IssueFinder.find_issues"]], "get_available_issue_types() (cleanlab.datalab.internal.issue_finder.issuefinder method)": [[15, "cleanlab.datalab.internal.issue_finder.IssueFinder.get_available_issue_types"]], "default_threshold (cleanlab.datalab.internal.issue_manager.data_valuation.datavaluationissuemanager attribute)": [[17, "cleanlab.datalab.internal.issue_manager.data_valuation.DataValuationIssueManager.DEFAULT_THRESHOLD"]], "datavaluationissuemanager (class in cleanlab.datalab.internal.issue_manager.data_valuation)": [[17, "cleanlab.datalab.internal.issue_manager.data_valuation.DataValuationIssueManager"]], "cleanlab.datalab.internal.issue_manager.data_valuation": [[17, "module-cleanlab.datalab.internal.issue_manager.data_valuation"]], "collect_info() (cleanlab.datalab.internal.issue_manager.data_valuation.datavaluationissuemanager method)": [[17, "cleanlab.datalab.internal.issue_manager.data_valuation.DataValuationIssueManager.collect_info"]], "description (cleanlab.datalab.internal.issue_manager.data_valuation.datavaluationissuemanager attribute)": [[17, "cleanlab.datalab.internal.issue_manager.data_valuation.DataValuationIssueManager.description"]], "find_issues() (cleanlab.datalab.internal.issue_manager.data_valuation.datavaluationissuemanager method)": [[17, "cleanlab.datalab.internal.issue_manager.data_valuation.DataValuationIssueManager.find_issues"]], "info (cleanlab.datalab.internal.issue_manager.data_valuation.datavaluationissuemanager attribute)": [[17, "cleanlab.datalab.internal.issue_manager.data_valuation.DataValuationIssueManager.info"]], "issue_name (cleanlab.datalab.internal.issue_manager.data_valuation.datavaluationissuemanager attribute)": [[17, "cleanlab.datalab.internal.issue_manager.data_valuation.DataValuationIssueManager.issue_name"]], "issue_score_key (cleanlab.datalab.internal.issue_manager.data_valuation.datavaluationissuemanager attribute)": [[17, "cleanlab.datalab.internal.issue_manager.data_valuation.DataValuationIssueManager.issue_score_key"]], "issues (cleanlab.datalab.internal.issue_manager.data_valuation.datavaluationissuemanager attribute)": [[17, "cleanlab.datalab.internal.issue_manager.data_valuation.DataValuationIssueManager.issues"]], "make_summary() (cleanlab.datalab.internal.issue_manager.data_valuation.datavaluationissuemanager class method)": [[17, "cleanlab.datalab.internal.issue_manager.data_valuation.DataValuationIssueManager.make_summary"]], "report() (cleanlab.datalab.internal.issue_manager.data_valuation.datavaluationissuemanager class method)": [[17, "cleanlab.datalab.internal.issue_manager.data_valuation.DataValuationIssueManager.report"]], "summary (cleanlab.datalab.internal.issue_manager.data_valuation.datavaluationissuemanager attribute)": [[17, "cleanlab.datalab.internal.issue_manager.data_valuation.DataValuationIssueManager.summary"]], "verbosity_levels (cleanlab.datalab.internal.issue_manager.data_valuation.datavaluationissuemanager attribute)": [[17, "cleanlab.datalab.internal.issue_manager.data_valuation.DataValuationIssueManager.verbosity_levels"]], "nearduplicateissuemanager (class in cleanlab.datalab.internal.issue_manager.duplicate)": [[18, "cleanlab.datalab.internal.issue_manager.duplicate.NearDuplicateIssueManager"]], "cleanlab.datalab.internal.issue_manager.duplicate": [[18, "module-cleanlab.datalab.internal.issue_manager.duplicate"]], "collect_info() (cleanlab.datalab.internal.issue_manager.duplicate.nearduplicateissuemanager method)": [[18, "cleanlab.datalab.internal.issue_manager.duplicate.NearDuplicateIssueManager.collect_info"]], "description (cleanlab.datalab.internal.issue_manager.duplicate.nearduplicateissuemanager attribute)": [[18, "cleanlab.datalab.internal.issue_manager.duplicate.NearDuplicateIssueManager.description"]], "find_issues() (cleanlab.datalab.internal.issue_manager.duplicate.nearduplicateissuemanager method)": [[18, "cleanlab.datalab.internal.issue_manager.duplicate.NearDuplicateIssueManager.find_issues"]], "info (cleanlab.datalab.internal.issue_manager.duplicate.nearduplicateissuemanager attribute)": [[18, "cleanlab.datalab.internal.issue_manager.duplicate.NearDuplicateIssueManager.info"]], "issue_name (cleanlab.datalab.internal.issue_manager.duplicate.nearduplicateissuemanager attribute)": [[18, "cleanlab.datalab.internal.issue_manager.duplicate.NearDuplicateIssueManager.issue_name"]], "issue_score_key (cleanlab.datalab.internal.issue_manager.duplicate.nearduplicateissuemanager attribute)": [[18, "cleanlab.datalab.internal.issue_manager.duplicate.NearDuplicateIssueManager.issue_score_key"]], "issues (cleanlab.datalab.internal.issue_manager.duplicate.nearduplicateissuemanager attribute)": [[18, "cleanlab.datalab.internal.issue_manager.duplicate.NearDuplicateIssueManager.issues"]], "make_summary() (cleanlab.datalab.internal.issue_manager.duplicate.nearduplicateissuemanager class method)": [[18, "cleanlab.datalab.internal.issue_manager.duplicate.NearDuplicateIssueManager.make_summary"]], "near_duplicate_sets (cleanlab.datalab.internal.issue_manager.duplicate.nearduplicateissuemanager attribute)": [[18, "cleanlab.datalab.internal.issue_manager.duplicate.NearDuplicateIssueManager.near_duplicate_sets"]], "report() (cleanlab.datalab.internal.issue_manager.duplicate.nearduplicateissuemanager class method)": [[18, "cleanlab.datalab.internal.issue_manager.duplicate.NearDuplicateIssueManager.report"]], "summary (cleanlab.datalab.internal.issue_manager.duplicate.nearduplicateissuemanager attribute)": [[18, "cleanlab.datalab.internal.issue_manager.duplicate.NearDuplicateIssueManager.summary"]], "verbosity_levels (cleanlab.datalab.internal.issue_manager.duplicate.nearduplicateissuemanager attribute)": [[18, "cleanlab.datalab.internal.issue_manager.duplicate.NearDuplicateIssueManager.verbosity_levels"]], "classimbalanceissuemanager (class in cleanlab.datalab.internal.issue_manager.imbalance)": [[19, "cleanlab.datalab.internal.issue_manager.imbalance.ClassImbalanceIssueManager"]], "cleanlab.datalab.internal.issue_manager.imbalance": [[19, "module-cleanlab.datalab.internal.issue_manager.imbalance"]], "collect_info() (cleanlab.datalab.internal.issue_manager.imbalance.classimbalanceissuemanager method)": [[19, "cleanlab.datalab.internal.issue_manager.imbalance.ClassImbalanceIssueManager.collect_info"]], "description (cleanlab.datalab.internal.issue_manager.imbalance.classimbalanceissuemanager attribute)": [[19, "cleanlab.datalab.internal.issue_manager.imbalance.ClassImbalanceIssueManager.description"]], "find_issues() (cleanlab.datalab.internal.issue_manager.imbalance.classimbalanceissuemanager method)": [[19, "cleanlab.datalab.internal.issue_manager.imbalance.ClassImbalanceIssueManager.find_issues"]], "info (cleanlab.datalab.internal.issue_manager.imbalance.classimbalanceissuemanager attribute)": [[19, "cleanlab.datalab.internal.issue_manager.imbalance.ClassImbalanceIssueManager.info"]], "issue_name (cleanlab.datalab.internal.issue_manager.imbalance.classimbalanceissuemanager attribute)": [[19, "cleanlab.datalab.internal.issue_manager.imbalance.ClassImbalanceIssueManager.issue_name"]], "issue_score_key (cleanlab.datalab.internal.issue_manager.imbalance.classimbalanceissuemanager attribute)": [[19, "cleanlab.datalab.internal.issue_manager.imbalance.ClassImbalanceIssueManager.issue_score_key"]], "issues (cleanlab.datalab.internal.issue_manager.imbalance.classimbalanceissuemanager attribute)": [[19, "cleanlab.datalab.internal.issue_manager.imbalance.ClassImbalanceIssueManager.issues"]], "make_summary() (cleanlab.datalab.internal.issue_manager.imbalance.classimbalanceissuemanager class method)": [[19, "cleanlab.datalab.internal.issue_manager.imbalance.ClassImbalanceIssueManager.make_summary"]], "report() (cleanlab.datalab.internal.issue_manager.imbalance.classimbalanceissuemanager class method)": [[19, "cleanlab.datalab.internal.issue_manager.imbalance.ClassImbalanceIssueManager.report"]], "summary (cleanlab.datalab.internal.issue_manager.imbalance.classimbalanceissuemanager attribute)": [[19, "cleanlab.datalab.internal.issue_manager.imbalance.ClassImbalanceIssueManager.summary"]], "verbosity_levels (cleanlab.datalab.internal.issue_manager.imbalance.classimbalanceissuemanager attribute)": [[19, "cleanlab.datalab.internal.issue_manager.imbalance.ClassImbalanceIssueManager.verbosity_levels"]], "issuemanager (class in cleanlab.datalab.internal.issue_manager.issue_manager)": [[21, "cleanlab.datalab.internal.issue_manager.issue_manager.IssueManager"]], "cleanlab.datalab.internal.issue_manager.issue_manager": [[21, "module-cleanlab.datalab.internal.issue_manager.issue_manager"]], "collect_info() (cleanlab.datalab.internal.issue_manager.issue_manager.issuemanager method)": [[21, "cleanlab.datalab.internal.issue_manager.issue_manager.IssueManager.collect_info"]], "description (cleanlab.datalab.internal.issue_manager.issue_manager.issuemanager attribute)": [[21, "cleanlab.datalab.internal.issue_manager.issue_manager.IssueManager.description"]], "find_issues() (cleanlab.datalab.internal.issue_manager.issue_manager.issuemanager method)": [[21, "cleanlab.datalab.internal.issue_manager.issue_manager.IssueManager.find_issues"]], "info (cleanlab.datalab.internal.issue_manager.issue_manager.issuemanager attribute)": [[21, "cleanlab.datalab.internal.issue_manager.issue_manager.IssueManager.info"]], "issue_name (cleanlab.datalab.internal.issue_manager.issue_manager.issuemanager attribute)": [[21, "cleanlab.datalab.internal.issue_manager.issue_manager.IssueManager.issue_name"]], "issue_score_key (cleanlab.datalab.internal.issue_manager.issue_manager.issuemanager attribute)": [[21, "cleanlab.datalab.internal.issue_manager.issue_manager.IssueManager.issue_score_key"]], "issues (cleanlab.datalab.internal.issue_manager.issue_manager.issuemanager attribute)": [[21, "cleanlab.datalab.internal.issue_manager.issue_manager.IssueManager.issues"]], "make_summary() (cleanlab.datalab.internal.issue_manager.issue_manager.issuemanager class method)": [[21, "cleanlab.datalab.internal.issue_manager.issue_manager.IssueManager.make_summary"]], "report() (cleanlab.datalab.internal.issue_manager.issue_manager.issuemanager class method)": [[21, "cleanlab.datalab.internal.issue_manager.issue_manager.IssueManager.report"]], "summary (cleanlab.datalab.internal.issue_manager.issue_manager.issuemanager attribute)": [[21, "cleanlab.datalab.internal.issue_manager.issue_manager.IssueManager.summary"]], "verbosity_levels (cleanlab.datalab.internal.issue_manager.issue_manager.issuemanager attribute)": [[21, "cleanlab.datalab.internal.issue_manager.issue_manager.IssueManager.verbosity_levels"]], "labelissuemanager (class in cleanlab.datalab.internal.issue_manager.label)": [[22, "cleanlab.datalab.internal.issue_manager.label.LabelIssueManager"]], "cleanlab.datalab.internal.issue_manager.label": [[22, "module-cleanlab.datalab.internal.issue_manager.label"]], "collect_info() (cleanlab.datalab.internal.issue_manager.label.labelissuemanager method)": [[22, "cleanlab.datalab.internal.issue_manager.label.LabelIssueManager.collect_info"]], "description (cleanlab.datalab.internal.issue_manager.label.labelissuemanager attribute)": [[22, "cleanlab.datalab.internal.issue_manager.label.LabelIssueManager.description"]], "find_issues() (cleanlab.datalab.internal.issue_manager.label.labelissuemanager method)": [[22, "cleanlab.datalab.internal.issue_manager.label.LabelIssueManager.find_issues"]], "get_health_summary() (cleanlab.datalab.internal.issue_manager.label.labelissuemanager method)": [[22, "cleanlab.datalab.internal.issue_manager.label.LabelIssueManager.get_health_summary"]], "health_summary_parameters (cleanlab.datalab.internal.issue_manager.label.labelissuemanager attribute)": [[22, "cleanlab.datalab.internal.issue_manager.label.LabelIssueManager.health_summary_parameters"]], "info (cleanlab.datalab.internal.issue_manager.label.labelissuemanager attribute)": [[22, "cleanlab.datalab.internal.issue_manager.label.LabelIssueManager.info"]], "issue_name (cleanlab.datalab.internal.issue_manager.label.labelissuemanager attribute)": [[22, "cleanlab.datalab.internal.issue_manager.label.LabelIssueManager.issue_name"]], "issue_score_key (cleanlab.datalab.internal.issue_manager.label.labelissuemanager attribute)": [[22, "cleanlab.datalab.internal.issue_manager.label.LabelIssueManager.issue_score_key"]], "issues (cleanlab.datalab.internal.issue_manager.label.labelissuemanager attribute)": [[22, "cleanlab.datalab.internal.issue_manager.label.LabelIssueManager.issues"]], "make_summary() (cleanlab.datalab.internal.issue_manager.label.labelissuemanager class method)": [[22, "cleanlab.datalab.internal.issue_manager.label.LabelIssueManager.make_summary"]], "report() (cleanlab.datalab.internal.issue_manager.label.labelissuemanager class method)": [[22, "cleanlab.datalab.internal.issue_manager.label.LabelIssueManager.report"]], "summary (cleanlab.datalab.internal.issue_manager.label.labelissuemanager attribute)": [[22, "cleanlab.datalab.internal.issue_manager.label.LabelIssueManager.summary"]], "verbosity_levels (cleanlab.datalab.internal.issue_manager.label.labelissuemanager attribute)": [[22, "cleanlab.datalab.internal.issue_manager.label.LabelIssueManager.verbosity_levels"]], "multilabelissuemanager (class in cleanlab.datalab.internal.issue_manager.multilabel.label)": [[24, "cleanlab.datalab.internal.issue_manager.multilabel.label.MultilabelIssueManager"]], "cleanlab.datalab.internal.issue_manager.multilabel.label": [[24, "module-cleanlab.datalab.internal.issue_manager.multilabel.label"]], "collect_info() (cleanlab.datalab.internal.issue_manager.multilabel.label.multilabelissuemanager method)": [[24, "cleanlab.datalab.internal.issue_manager.multilabel.label.MultilabelIssueManager.collect_info"]], "description (cleanlab.datalab.internal.issue_manager.multilabel.label.multilabelissuemanager attribute)": [[24, "cleanlab.datalab.internal.issue_manager.multilabel.label.MultilabelIssueManager.description"]], "find_issues() (cleanlab.datalab.internal.issue_manager.multilabel.label.multilabelissuemanager method)": [[24, "cleanlab.datalab.internal.issue_manager.multilabel.label.MultilabelIssueManager.find_issues"]], "info (cleanlab.datalab.internal.issue_manager.multilabel.label.multilabelissuemanager attribute)": [[24, "cleanlab.datalab.internal.issue_manager.multilabel.label.MultilabelIssueManager.info"]], "issue_name (cleanlab.datalab.internal.issue_manager.multilabel.label.multilabelissuemanager attribute)": [[24, "cleanlab.datalab.internal.issue_manager.multilabel.label.MultilabelIssueManager.issue_name"]], "issue_score_key (cleanlab.datalab.internal.issue_manager.multilabel.label.multilabelissuemanager attribute)": [[24, "cleanlab.datalab.internal.issue_manager.multilabel.label.MultilabelIssueManager.issue_score_key"]], "issues (cleanlab.datalab.internal.issue_manager.multilabel.label.multilabelissuemanager attribute)": [[24, "cleanlab.datalab.internal.issue_manager.multilabel.label.MultilabelIssueManager.issues"]], "make_summary() (cleanlab.datalab.internal.issue_manager.multilabel.label.multilabelissuemanager class method)": [[24, "cleanlab.datalab.internal.issue_manager.multilabel.label.MultilabelIssueManager.make_summary"]], "report() (cleanlab.datalab.internal.issue_manager.multilabel.label.multilabelissuemanager class method)": [[24, "cleanlab.datalab.internal.issue_manager.multilabel.label.MultilabelIssueManager.report"]], "summary (cleanlab.datalab.internal.issue_manager.multilabel.label.multilabelissuemanager attribute)": [[24, "cleanlab.datalab.internal.issue_manager.multilabel.label.MultilabelIssueManager.summary"]], "verbosity_levels (cleanlab.datalab.internal.issue_manager.multilabel.label.multilabelissuemanager attribute)": [[24, "cleanlab.datalab.internal.issue_manager.multilabel.label.MultilabelIssueManager.verbosity_levels"]], "noniidissuemanager (class in cleanlab.datalab.internal.issue_manager.noniid)": [[25, "cleanlab.datalab.internal.issue_manager.noniid.NonIIDIssueManager"]], "cleanlab.datalab.internal.issue_manager.noniid": [[25, "module-cleanlab.datalab.internal.issue_manager.noniid"]], "collect_info() (cleanlab.datalab.internal.issue_manager.noniid.noniidissuemanager method)": [[25, "cleanlab.datalab.internal.issue_manager.noniid.NonIIDIssueManager.collect_info"]], "description (cleanlab.datalab.internal.issue_manager.noniid.noniidissuemanager attribute)": [[25, "cleanlab.datalab.internal.issue_manager.noniid.NonIIDIssueManager.description"]], "find_issues() (cleanlab.datalab.internal.issue_manager.noniid.noniidissuemanager method)": [[25, "cleanlab.datalab.internal.issue_manager.noniid.NonIIDIssueManager.find_issues"]], "info (cleanlab.datalab.internal.issue_manager.noniid.noniidissuemanager attribute)": [[25, "cleanlab.datalab.internal.issue_manager.noniid.NonIIDIssueManager.info"]], "issue_name (cleanlab.datalab.internal.issue_manager.noniid.noniidissuemanager attribute)": [[25, "cleanlab.datalab.internal.issue_manager.noniid.NonIIDIssueManager.issue_name"]], "issue_score_key (cleanlab.datalab.internal.issue_manager.noniid.noniidissuemanager attribute)": [[25, "cleanlab.datalab.internal.issue_manager.noniid.NonIIDIssueManager.issue_score_key"]], "issues (cleanlab.datalab.internal.issue_manager.noniid.noniidissuemanager attribute)": [[25, "cleanlab.datalab.internal.issue_manager.noniid.NonIIDIssueManager.issues"]], "make_summary() (cleanlab.datalab.internal.issue_manager.noniid.noniidissuemanager class method)": [[25, "cleanlab.datalab.internal.issue_manager.noniid.NonIIDIssueManager.make_summary"]], "report() (cleanlab.datalab.internal.issue_manager.noniid.noniidissuemanager class method)": [[25, "cleanlab.datalab.internal.issue_manager.noniid.NonIIDIssueManager.report"]], "simplified_kolmogorov_smirnov_test() (in module cleanlab.datalab.internal.issue_manager.noniid)": [[25, "cleanlab.datalab.internal.issue_manager.noniid.simplified_kolmogorov_smirnov_test"]], "summary (cleanlab.datalab.internal.issue_manager.noniid.noniidissuemanager attribute)": [[25, "cleanlab.datalab.internal.issue_manager.noniid.NonIIDIssueManager.summary"]], "verbosity_levels (cleanlab.datalab.internal.issue_manager.noniid.noniidissuemanager attribute)": [[25, "cleanlab.datalab.internal.issue_manager.noniid.NonIIDIssueManager.verbosity_levels"]], "nullissuemanager (class in cleanlab.datalab.internal.issue_manager.null)": [[26, "cleanlab.datalab.internal.issue_manager.null.NullIssueManager"]], "cleanlab.datalab.internal.issue_manager.null": [[26, "module-cleanlab.datalab.internal.issue_manager.null"]], "collect_info() (cleanlab.datalab.internal.issue_manager.null.nullissuemanager method)": [[26, "cleanlab.datalab.internal.issue_manager.null.NullIssueManager.collect_info"]], "description (cleanlab.datalab.internal.issue_manager.null.nullissuemanager attribute)": [[26, "cleanlab.datalab.internal.issue_manager.null.NullIssueManager.description"]], "find_issues() (cleanlab.datalab.internal.issue_manager.null.nullissuemanager method)": [[26, "cleanlab.datalab.internal.issue_manager.null.NullIssueManager.find_issues"]], "info (cleanlab.datalab.internal.issue_manager.null.nullissuemanager attribute)": [[26, "cleanlab.datalab.internal.issue_manager.null.NullIssueManager.info"]], "issue_name (cleanlab.datalab.internal.issue_manager.null.nullissuemanager attribute)": [[26, "cleanlab.datalab.internal.issue_manager.null.NullIssueManager.issue_name"]], "issue_score_key (cleanlab.datalab.internal.issue_manager.null.nullissuemanager attribute)": [[26, "cleanlab.datalab.internal.issue_manager.null.NullIssueManager.issue_score_key"]], "issues (cleanlab.datalab.internal.issue_manager.null.nullissuemanager attribute)": [[26, "cleanlab.datalab.internal.issue_manager.null.NullIssueManager.issues"]], "make_summary() (cleanlab.datalab.internal.issue_manager.null.nullissuemanager class method)": [[26, "cleanlab.datalab.internal.issue_manager.null.NullIssueManager.make_summary"]], "report() (cleanlab.datalab.internal.issue_manager.null.nullissuemanager class method)": [[26, "cleanlab.datalab.internal.issue_manager.null.NullIssueManager.report"]], "summary (cleanlab.datalab.internal.issue_manager.null.nullissuemanager attribute)": [[26, "cleanlab.datalab.internal.issue_manager.null.NullIssueManager.summary"]], "verbosity_levels (cleanlab.datalab.internal.issue_manager.null.nullissuemanager attribute)": [[26, "cleanlab.datalab.internal.issue_manager.null.NullIssueManager.verbosity_levels"]], "default_thresholds (cleanlab.datalab.internal.issue_manager.outlier.outlierissuemanager attribute)": [[27, "cleanlab.datalab.internal.issue_manager.outlier.OutlierIssueManager.DEFAULT_THRESHOLDS"]], "outlierissuemanager (class in cleanlab.datalab.internal.issue_manager.outlier)": [[27, "cleanlab.datalab.internal.issue_manager.outlier.OutlierIssueManager"]], "cleanlab.datalab.internal.issue_manager.outlier": [[27, "module-cleanlab.datalab.internal.issue_manager.outlier"]], "collect_info() (cleanlab.datalab.internal.issue_manager.outlier.outlierissuemanager method)": [[27, "cleanlab.datalab.internal.issue_manager.outlier.OutlierIssueManager.collect_info"]], "description (cleanlab.datalab.internal.issue_manager.outlier.outlierissuemanager attribute)": [[27, "cleanlab.datalab.internal.issue_manager.outlier.OutlierIssueManager.description"]], "find_issues() (cleanlab.datalab.internal.issue_manager.outlier.outlierissuemanager method)": [[27, "cleanlab.datalab.internal.issue_manager.outlier.OutlierIssueManager.find_issues"]], "info (cleanlab.datalab.internal.issue_manager.outlier.outlierissuemanager attribute)": [[27, "cleanlab.datalab.internal.issue_manager.outlier.OutlierIssueManager.info"]], "issue_name (cleanlab.datalab.internal.issue_manager.outlier.outlierissuemanager attribute)": [[27, "cleanlab.datalab.internal.issue_manager.outlier.OutlierIssueManager.issue_name"]], "issue_score_key (cleanlab.datalab.internal.issue_manager.outlier.outlierissuemanager attribute)": [[27, "cleanlab.datalab.internal.issue_manager.outlier.OutlierIssueManager.issue_score_key"]], "issues (cleanlab.datalab.internal.issue_manager.outlier.outlierissuemanager attribute)": [[27, "cleanlab.datalab.internal.issue_manager.outlier.OutlierIssueManager.issues"]], "make_summary() (cleanlab.datalab.internal.issue_manager.outlier.outlierissuemanager class method)": [[27, "cleanlab.datalab.internal.issue_manager.outlier.OutlierIssueManager.make_summary"]], "ood (cleanlab.datalab.internal.issue_manager.outlier.outlierissuemanager attribute)": [[27, "cleanlab.datalab.internal.issue_manager.outlier.OutlierIssueManager.ood"]], "report() (cleanlab.datalab.internal.issue_manager.outlier.outlierissuemanager class method)": [[27, "cleanlab.datalab.internal.issue_manager.outlier.OutlierIssueManager.report"]], "summary (cleanlab.datalab.internal.issue_manager.outlier.outlierissuemanager attribute)": [[27, "cleanlab.datalab.internal.issue_manager.outlier.OutlierIssueManager.summary"]], "verbosity_levels (cleanlab.datalab.internal.issue_manager.outlier.outlierissuemanager attribute)": [[27, "cleanlab.datalab.internal.issue_manager.outlier.OutlierIssueManager.verbosity_levels"]], "regressionlabelissuemanager (class in cleanlab.datalab.internal.issue_manager.regression.label)": [[29, "cleanlab.datalab.internal.issue_manager.regression.label.RegressionLabelIssueManager"]], "cleanlab.datalab.internal.issue_manager.regression.label": [[29, "module-cleanlab.datalab.internal.issue_manager.regression.label"]], "collect_info() (cleanlab.datalab.internal.issue_manager.regression.label.regressionlabelissuemanager method)": [[29, "cleanlab.datalab.internal.issue_manager.regression.label.RegressionLabelIssueManager.collect_info"]], "description (cleanlab.datalab.internal.issue_manager.regression.label.regressionlabelissuemanager attribute)": [[29, "cleanlab.datalab.internal.issue_manager.regression.label.RegressionLabelIssueManager.description"]], "find_issues() (cleanlab.datalab.internal.issue_manager.regression.label.regressionlabelissuemanager method)": [[29, "cleanlab.datalab.internal.issue_manager.regression.label.RegressionLabelIssueManager.find_issues"]], "find_issues_with_features() (in module cleanlab.datalab.internal.issue_manager.regression.label)": [[29, "cleanlab.datalab.internal.issue_manager.regression.label.find_issues_with_features"]], "find_issues_with_predictions() (in module cleanlab.datalab.internal.issue_manager.regression.label)": [[29, "cleanlab.datalab.internal.issue_manager.regression.label.find_issues_with_predictions"]], "info (cleanlab.datalab.internal.issue_manager.regression.label.regressionlabelissuemanager attribute)": [[29, "cleanlab.datalab.internal.issue_manager.regression.label.RegressionLabelIssueManager.info"]], "issue_name (cleanlab.datalab.internal.issue_manager.regression.label.regressionlabelissuemanager attribute)": [[29, "cleanlab.datalab.internal.issue_manager.regression.label.RegressionLabelIssueManager.issue_name"]], "issue_score_key (cleanlab.datalab.internal.issue_manager.regression.label.regressionlabelissuemanager attribute)": [[29, "cleanlab.datalab.internal.issue_manager.regression.label.RegressionLabelIssueManager.issue_score_key"]], "issues (cleanlab.datalab.internal.issue_manager.regression.label.regressionlabelissuemanager attribute)": [[29, "cleanlab.datalab.internal.issue_manager.regression.label.RegressionLabelIssueManager.issues"]], "make_summary() (cleanlab.datalab.internal.issue_manager.regression.label.regressionlabelissuemanager class method)": [[29, "cleanlab.datalab.internal.issue_manager.regression.label.RegressionLabelIssueManager.make_summary"]], "report() (cleanlab.datalab.internal.issue_manager.regression.label.regressionlabelissuemanager class method)": [[29, "cleanlab.datalab.internal.issue_manager.regression.label.RegressionLabelIssueManager.report"]], "summary (cleanlab.datalab.internal.issue_manager.regression.label.regressionlabelissuemanager attribute)": [[29, "cleanlab.datalab.internal.issue_manager.regression.label.RegressionLabelIssueManager.summary"]], "verbosity_levels (cleanlab.datalab.internal.issue_manager.regression.label.regressionlabelissuemanager attribute)": [[29, "cleanlab.datalab.internal.issue_manager.regression.label.RegressionLabelIssueManager.verbosity_levels"]], "no_underperforming_cluster_id (cleanlab.datalab.internal.issue_manager.underperforming_group.underperforminggroupissuemanager attribute)": [[30, "cleanlab.datalab.internal.issue_manager.underperforming_group.UnderperformingGroupIssueManager.NO_UNDERPERFORMING_CLUSTER_ID"]], "outlier_cluster_labels (cleanlab.datalab.internal.issue_manager.underperforming_group.underperforminggroupissuemanager attribute)": [[30, "cleanlab.datalab.internal.issue_manager.underperforming_group.UnderperformingGroupIssueManager.OUTLIER_CLUSTER_LABELS"]], "underperforminggroupissuemanager (class in cleanlab.datalab.internal.issue_manager.underperforming_group)": [[30, "cleanlab.datalab.internal.issue_manager.underperforming_group.UnderperformingGroupIssueManager"]], "cleanlab.datalab.internal.issue_manager.underperforming_group": [[30, "module-cleanlab.datalab.internal.issue_manager.underperforming_group"]], "collect_info() (cleanlab.datalab.internal.issue_manager.underperforming_group.underperforminggroupissuemanager method)": [[30, "cleanlab.datalab.internal.issue_manager.underperforming_group.UnderperformingGroupIssueManager.collect_info"]], "description (cleanlab.datalab.internal.issue_manager.underperforming_group.underperforminggroupissuemanager attribute)": [[30, "cleanlab.datalab.internal.issue_manager.underperforming_group.UnderperformingGroupIssueManager.description"]], "filter_cluster_ids() (cleanlab.datalab.internal.issue_manager.underperforming_group.underperforminggroupissuemanager method)": [[30, "cleanlab.datalab.internal.issue_manager.underperforming_group.UnderperformingGroupIssueManager.filter_cluster_ids"]], "find_issues() (cleanlab.datalab.internal.issue_manager.underperforming_group.underperforminggroupissuemanager method)": [[30, "cleanlab.datalab.internal.issue_manager.underperforming_group.UnderperformingGroupIssueManager.find_issues"]], "get_worst_cluster() (cleanlab.datalab.internal.issue_manager.underperforming_group.underperforminggroupissuemanager method)": [[30, "cleanlab.datalab.internal.issue_manager.underperforming_group.UnderperformingGroupIssueManager.get_worst_cluster"]], "info (cleanlab.datalab.internal.issue_manager.underperforming_group.underperforminggroupissuemanager attribute)": [[30, "cleanlab.datalab.internal.issue_manager.underperforming_group.UnderperformingGroupIssueManager.info"]], "issue_name (cleanlab.datalab.internal.issue_manager.underperforming_group.underperforminggroupissuemanager attribute)": [[30, "cleanlab.datalab.internal.issue_manager.underperforming_group.UnderperformingGroupIssueManager.issue_name"]], "issue_score_key (cleanlab.datalab.internal.issue_manager.underperforming_group.underperforminggroupissuemanager attribute)": [[30, "cleanlab.datalab.internal.issue_manager.underperforming_group.UnderperformingGroupIssueManager.issue_score_key"]], "issues (cleanlab.datalab.internal.issue_manager.underperforming_group.underperforminggroupissuemanager attribute)": [[30, "cleanlab.datalab.internal.issue_manager.underperforming_group.UnderperformingGroupIssueManager.issues"]], "make_summary() (cleanlab.datalab.internal.issue_manager.underperforming_group.underperforminggroupissuemanager class method)": [[30, "cleanlab.datalab.internal.issue_manager.underperforming_group.UnderperformingGroupIssueManager.make_summary"]], "perform_clustering() (cleanlab.datalab.internal.issue_manager.underperforming_group.underperforminggroupissuemanager method)": [[30, "cleanlab.datalab.internal.issue_manager.underperforming_group.UnderperformingGroupIssueManager.perform_clustering"]], "report() (cleanlab.datalab.internal.issue_manager.underperforming_group.underperforminggroupissuemanager class method)": [[30, "cleanlab.datalab.internal.issue_manager.underperforming_group.UnderperformingGroupIssueManager.report"]], "set_knn_graph() (cleanlab.datalab.internal.issue_manager.underperforming_group.underperforminggroupissuemanager method)": [[30, "cleanlab.datalab.internal.issue_manager.underperforming_group.UnderperformingGroupIssueManager.set_knn_graph"]], "summary (cleanlab.datalab.internal.issue_manager.underperforming_group.underperforminggroupissuemanager attribute)": [[30, "cleanlab.datalab.internal.issue_manager.underperforming_group.UnderperformingGroupIssueManager.summary"]], "verbosity_levels (cleanlab.datalab.internal.issue_manager.underperforming_group.underperforminggroupissuemanager attribute)": [[30, "cleanlab.datalab.internal.issue_manager.underperforming_group.UnderperformingGroupIssueManager.verbosity_levels"]], "modeloutput (class in cleanlab.datalab.internal.model_outputs)": [[31, "cleanlab.datalab.internal.model_outputs.ModelOutput"]], "multiclasspredprobs (class in cleanlab.datalab.internal.model_outputs)": [[31, "cleanlab.datalab.internal.model_outputs.MultiClassPredProbs"]], "multilabelpredprobs (class in cleanlab.datalab.internal.model_outputs)": [[31, "cleanlab.datalab.internal.model_outputs.MultiLabelPredProbs"]], "regressionpredictions (class in cleanlab.datalab.internal.model_outputs)": [[31, "cleanlab.datalab.internal.model_outputs.RegressionPredictions"]], "argument (cleanlab.datalab.internal.model_outputs.multiclasspredprobs attribute)": [[31, "cleanlab.datalab.internal.model_outputs.MultiClassPredProbs.argument"]], "argument (cleanlab.datalab.internal.model_outputs.multilabelpredprobs attribute)": [[31, "cleanlab.datalab.internal.model_outputs.MultiLabelPredProbs.argument"]], "argument (cleanlab.datalab.internal.model_outputs.regressionpredictions attribute)": [[31, "cleanlab.datalab.internal.model_outputs.RegressionPredictions.argument"]], "cleanlab.datalab.internal.model_outputs": [[31, "module-cleanlab.datalab.internal.model_outputs"]], "collect() (cleanlab.datalab.internal.model_outputs.modeloutput method)": [[31, "cleanlab.datalab.internal.model_outputs.ModelOutput.collect"]], "collect() (cleanlab.datalab.internal.model_outputs.multiclasspredprobs method)": [[31, "cleanlab.datalab.internal.model_outputs.MultiClassPredProbs.collect"]], "collect() (cleanlab.datalab.internal.model_outputs.multilabelpredprobs method)": [[31, "cleanlab.datalab.internal.model_outputs.MultiLabelPredProbs.collect"]], "collect() (cleanlab.datalab.internal.model_outputs.regressionpredictions method)": [[31, "cleanlab.datalab.internal.model_outputs.RegressionPredictions.collect"]], "data (cleanlab.datalab.internal.model_outputs.modeloutput attribute)": [[31, "cleanlab.datalab.internal.model_outputs.ModelOutput.data"]], "data (cleanlab.datalab.internal.model_outputs.multiclasspredprobs attribute)": [[31, "cleanlab.datalab.internal.model_outputs.MultiClassPredProbs.data"]], "data (cleanlab.datalab.internal.model_outputs.multilabelpredprobs attribute)": [[31, "cleanlab.datalab.internal.model_outputs.MultiLabelPredProbs.data"]], "data (cleanlab.datalab.internal.model_outputs.regressionpredictions attribute)": [[31, "cleanlab.datalab.internal.model_outputs.RegressionPredictions.data"]], "validate() (cleanlab.datalab.internal.model_outputs.modeloutput method)": [[31, "cleanlab.datalab.internal.model_outputs.ModelOutput.validate"]], "validate() (cleanlab.datalab.internal.model_outputs.multiclasspredprobs method)": [[31, "cleanlab.datalab.internal.model_outputs.MultiClassPredProbs.validate"]], "validate() (cleanlab.datalab.internal.model_outputs.multilabelpredprobs method)": [[31, "cleanlab.datalab.internal.model_outputs.MultiLabelPredProbs.validate"]], "validate() (cleanlab.datalab.internal.model_outputs.regressionpredictions method)": [[31, "cleanlab.datalab.internal.model_outputs.RegressionPredictions.validate"]], "reporter (class in cleanlab.datalab.internal.report)": [[32, "cleanlab.datalab.internal.report.Reporter"]], "cleanlab.datalab.internal.report": [[32, "module-cleanlab.datalab.internal.report"]], "get_report() (cleanlab.datalab.internal.report.reporter method)": [[32, "cleanlab.datalab.internal.report.Reporter.get_report"]], "report() (cleanlab.datalab.internal.report.reporter method)": [[32, "cleanlab.datalab.internal.report.Reporter.report"]], "classification (cleanlab.datalab.internal.task.task attribute)": [[33, "cleanlab.datalab.internal.task.Task.CLASSIFICATION"]], "multilabel (cleanlab.datalab.internal.task.task attribute)": [[33, "cleanlab.datalab.internal.task.Task.MULTILABEL"]], "regression (cleanlab.datalab.internal.task.task attribute)": [[33, "cleanlab.datalab.internal.task.Task.REGRESSION"]], "task (class in cleanlab.datalab.internal.task)": [[33, "cleanlab.datalab.internal.task.Task"]], "__contains__() (cleanlab.datalab.internal.task.task class method)": [[33, "cleanlab.datalab.internal.task.Task.__contains__"]], "__getitem__() (cleanlab.datalab.internal.task.task class method)": [[33, "cleanlab.datalab.internal.task.Task.__getitem__"]], "__iter__() (cleanlab.datalab.internal.task.task class method)": [[33, "cleanlab.datalab.internal.task.Task.__iter__"]], "__len__() (cleanlab.datalab.internal.task.task class method)": [[33, "cleanlab.datalab.internal.task.Task.__len__"]], "cleanlab.datalab.internal.task": [[33, "module-cleanlab.datalab.internal.task"]], "from_str() (cleanlab.datalab.internal.task.task class method)": [[33, "cleanlab.datalab.internal.task.Task.from_str"]], "is_classification (cleanlab.datalab.internal.task.task property)": [[33, "cleanlab.datalab.internal.task.Task.is_classification"]], "is_multilabel (cleanlab.datalab.internal.task.task property)": [[33, "cleanlab.datalab.internal.task.Task.is_multilabel"]], "is_regression (cleanlab.datalab.internal.task.task property)": [[33, "cleanlab.datalab.internal.task.Task.is_regression"]], "cleanlab.dataset": [[35, "module-cleanlab.dataset"]], "find_overlapping_classes() (in module cleanlab.dataset)": [[35, "cleanlab.dataset.find_overlapping_classes"]], "health_summary() (in module cleanlab.dataset)": [[35, "cleanlab.dataset.health_summary"]], "overall_label_health_score() (in module cleanlab.dataset)": [[35, "cleanlab.dataset.overall_label_health_score"]], "rank_classes_by_label_quality() (in module cleanlab.dataset)": [[35, "cleanlab.dataset.rank_classes_by_label_quality"]], "cnn (class in cleanlab.experimental.cifar_cnn)": [[36, "cleanlab.experimental.cifar_cnn.CNN"]], "t_destination (cleanlab.experimental.cifar_cnn.cnn attribute)": [[36, "cleanlab.experimental.cifar_cnn.CNN.T_destination"]], "__call__() (cleanlab.experimental.cifar_cnn.cnn method)": [[36, "cleanlab.experimental.cifar_cnn.CNN.__call__"]], "add_module() (cleanlab.experimental.cifar_cnn.cnn method)": [[36, "cleanlab.experimental.cifar_cnn.CNN.add_module"]], "apply() (cleanlab.experimental.cifar_cnn.cnn method)": [[36, "cleanlab.experimental.cifar_cnn.CNN.apply"]], "bfloat16() (cleanlab.experimental.cifar_cnn.cnn method)": [[36, "cleanlab.experimental.cifar_cnn.CNN.bfloat16"]], "buffers() (cleanlab.experimental.cifar_cnn.cnn method)": [[36, "cleanlab.experimental.cifar_cnn.CNN.buffers"]], "call_bn() (in module cleanlab.experimental.cifar_cnn)": [[36, "cleanlab.experimental.cifar_cnn.call_bn"]], "call_super_init (cleanlab.experimental.cifar_cnn.cnn attribute)": [[36, "cleanlab.experimental.cifar_cnn.CNN.call_super_init"]], "children() (cleanlab.experimental.cifar_cnn.cnn method)": [[36, "cleanlab.experimental.cifar_cnn.CNN.children"]], "cleanlab.experimental.cifar_cnn": [[36, "module-cleanlab.experimental.cifar_cnn"]], "compile() (cleanlab.experimental.cifar_cnn.cnn method)": [[36, "cleanlab.experimental.cifar_cnn.CNN.compile"]], "cpu() (cleanlab.experimental.cifar_cnn.cnn method)": [[36, "cleanlab.experimental.cifar_cnn.CNN.cpu"]], "cuda() (cleanlab.experimental.cifar_cnn.cnn method)": [[36, "cleanlab.experimental.cifar_cnn.CNN.cuda"]], "double() (cleanlab.experimental.cifar_cnn.cnn method)": [[36, "cleanlab.experimental.cifar_cnn.CNN.double"]], "dump_patches (cleanlab.experimental.cifar_cnn.cnn attribute)": [[36, "cleanlab.experimental.cifar_cnn.CNN.dump_patches"]], "eval() (cleanlab.experimental.cifar_cnn.cnn method)": [[36, "cleanlab.experimental.cifar_cnn.CNN.eval"]], "extra_repr() (cleanlab.experimental.cifar_cnn.cnn method)": [[36, "cleanlab.experimental.cifar_cnn.CNN.extra_repr"]], "float() (cleanlab.experimental.cifar_cnn.cnn method)": [[36, "cleanlab.experimental.cifar_cnn.CNN.float"]], "forward() (cleanlab.experimental.cifar_cnn.cnn method)": [[36, "cleanlab.experimental.cifar_cnn.CNN.forward"], [36, "id0"]], "get_buffer() (cleanlab.experimental.cifar_cnn.cnn method)": [[36, "cleanlab.experimental.cifar_cnn.CNN.get_buffer"]], "get_extra_state() (cleanlab.experimental.cifar_cnn.cnn method)": [[36, "cleanlab.experimental.cifar_cnn.CNN.get_extra_state"]], "get_parameter() (cleanlab.experimental.cifar_cnn.cnn method)": [[36, "cleanlab.experimental.cifar_cnn.CNN.get_parameter"]], "get_submodule() (cleanlab.experimental.cifar_cnn.cnn method)": [[36, "cleanlab.experimental.cifar_cnn.CNN.get_submodule"]], "half() (cleanlab.experimental.cifar_cnn.cnn method)": [[36, "cleanlab.experimental.cifar_cnn.CNN.half"]], "ipu() (cleanlab.experimental.cifar_cnn.cnn method)": [[36, "cleanlab.experimental.cifar_cnn.CNN.ipu"]], "load_state_dict() (cleanlab.experimental.cifar_cnn.cnn method)": [[36, "cleanlab.experimental.cifar_cnn.CNN.load_state_dict"]], "modules() (cleanlab.experimental.cifar_cnn.cnn method)": [[36, "cleanlab.experimental.cifar_cnn.CNN.modules"]], "named_buffers() (cleanlab.experimental.cifar_cnn.cnn method)": [[36, "cleanlab.experimental.cifar_cnn.CNN.named_buffers"]], "named_children() (cleanlab.experimental.cifar_cnn.cnn method)": [[36, "cleanlab.experimental.cifar_cnn.CNN.named_children"]], "named_modules() (cleanlab.experimental.cifar_cnn.cnn method)": [[36, "cleanlab.experimental.cifar_cnn.CNN.named_modules"]], "named_parameters() (cleanlab.experimental.cifar_cnn.cnn method)": [[36, "cleanlab.experimental.cifar_cnn.CNN.named_parameters"]], "parameters() (cleanlab.experimental.cifar_cnn.cnn method)": [[36, "cleanlab.experimental.cifar_cnn.CNN.parameters"]], "register_backward_hook() (cleanlab.experimental.cifar_cnn.cnn method)": [[36, "cleanlab.experimental.cifar_cnn.CNN.register_backward_hook"]], "register_buffer() (cleanlab.experimental.cifar_cnn.cnn method)": [[36, "cleanlab.experimental.cifar_cnn.CNN.register_buffer"]], "register_forward_hook() (cleanlab.experimental.cifar_cnn.cnn method)": [[36, "cleanlab.experimental.cifar_cnn.CNN.register_forward_hook"]], "register_forward_pre_hook() (cleanlab.experimental.cifar_cnn.cnn method)": [[36, "cleanlab.experimental.cifar_cnn.CNN.register_forward_pre_hook"]], "register_full_backward_hook() (cleanlab.experimental.cifar_cnn.cnn method)": [[36, "cleanlab.experimental.cifar_cnn.CNN.register_full_backward_hook"]], "register_full_backward_pre_hook() (cleanlab.experimental.cifar_cnn.cnn method)": [[36, "cleanlab.experimental.cifar_cnn.CNN.register_full_backward_pre_hook"]], "register_load_state_dict_post_hook() (cleanlab.experimental.cifar_cnn.cnn method)": [[36, "cleanlab.experimental.cifar_cnn.CNN.register_load_state_dict_post_hook"]], "register_module() (cleanlab.experimental.cifar_cnn.cnn method)": [[36, "cleanlab.experimental.cifar_cnn.CNN.register_module"]], "register_parameter() (cleanlab.experimental.cifar_cnn.cnn method)": [[36, "cleanlab.experimental.cifar_cnn.CNN.register_parameter"]], "register_state_dict_pre_hook() (cleanlab.experimental.cifar_cnn.cnn method)": [[36, "cleanlab.experimental.cifar_cnn.CNN.register_state_dict_pre_hook"]], "requires_grad_() (cleanlab.experimental.cifar_cnn.cnn method)": [[36, "cleanlab.experimental.cifar_cnn.CNN.requires_grad_"]], "set_extra_state() (cleanlab.experimental.cifar_cnn.cnn method)": [[36, "cleanlab.experimental.cifar_cnn.CNN.set_extra_state"]], "share_memory() (cleanlab.experimental.cifar_cnn.cnn method)": [[36, "cleanlab.experimental.cifar_cnn.CNN.share_memory"]], "state_dict() (cleanlab.experimental.cifar_cnn.cnn method)": [[36, "cleanlab.experimental.cifar_cnn.CNN.state_dict"]], "to() (cleanlab.experimental.cifar_cnn.cnn method)": [[36, "cleanlab.experimental.cifar_cnn.CNN.to"]], "to_empty() (cleanlab.experimental.cifar_cnn.cnn method)": [[36, "cleanlab.experimental.cifar_cnn.CNN.to_empty"]], "train() (cleanlab.experimental.cifar_cnn.cnn method)": [[36, "cleanlab.experimental.cifar_cnn.CNN.train"]], "training (cleanlab.experimental.cifar_cnn.cnn attribute)": [[36, "cleanlab.experimental.cifar_cnn.CNN.training"]], "type() (cleanlab.experimental.cifar_cnn.cnn method)": [[36, "cleanlab.experimental.cifar_cnn.CNN.type"]], "xpu() (cleanlab.experimental.cifar_cnn.cnn method)": [[36, "cleanlab.experimental.cifar_cnn.CNN.xpu"]], "zero_grad() (cleanlab.experimental.cifar_cnn.cnn method)": [[36, "cleanlab.experimental.cifar_cnn.CNN.zero_grad"]], "adjust_learning_rate() (in module cleanlab.experimental.coteaching)": [[37, "cleanlab.experimental.coteaching.adjust_learning_rate"]], "cleanlab.experimental.coteaching": [[37, "module-cleanlab.experimental.coteaching"]], "evaluate() (in module cleanlab.experimental.coteaching)": [[37, "cleanlab.experimental.coteaching.evaluate"]], "forget_rate_scheduler() (in module cleanlab.experimental.coteaching)": [[37, "cleanlab.experimental.coteaching.forget_rate_scheduler"]], "initialize_lr_scheduler() (in module cleanlab.experimental.coteaching)": [[37, "cleanlab.experimental.coteaching.initialize_lr_scheduler"]], "loss_coteaching() (in module cleanlab.experimental.coteaching)": [[37, "cleanlab.experimental.coteaching.loss_coteaching"]], "train() (in module cleanlab.experimental.coteaching)": [[37, "cleanlab.experimental.coteaching.train"]], "cleanlab.experimental": [[38, "module-cleanlab.experimental"]], "labelinspector (class in cleanlab.experimental.label_issues_batched)": [[39, "cleanlab.experimental.label_issues_batched.LabelInspector"]], "adj_confident_thresholds_shared (in module cleanlab.experimental.label_issues_batched)": [[39, "cleanlab.experimental.label_issues_batched.adj_confident_thresholds_shared"]], "cleanlab.experimental.label_issues_batched": [[39, "module-cleanlab.experimental.label_issues_batched"]], "find_label_issues_batched() (in module cleanlab.experimental.label_issues_batched)": [[39, "cleanlab.experimental.label_issues_batched.find_label_issues_batched"]], "get_confident_thresholds() (cleanlab.experimental.label_issues_batched.labelinspector method)": [[39, "cleanlab.experimental.label_issues_batched.LabelInspector.get_confident_thresholds"]], "get_label_issues() (cleanlab.experimental.label_issues_batched.labelinspector method)": [[39, "cleanlab.experimental.label_issues_batched.LabelInspector.get_label_issues"]], "get_num_issues() (cleanlab.experimental.label_issues_batched.labelinspector method)": [[39, "cleanlab.experimental.label_issues_batched.LabelInspector.get_num_issues"]], "get_quality_scores() (cleanlab.experimental.label_issues_batched.labelinspector method)": [[39, "cleanlab.experimental.label_issues_batched.LabelInspector.get_quality_scores"]], "labels_shared (in module cleanlab.experimental.label_issues_batched)": [[39, "cleanlab.experimental.label_issues_batched.labels_shared"]], "pred_probs_shared (in module cleanlab.experimental.label_issues_batched)": [[39, "cleanlab.experimental.label_issues_batched.pred_probs_shared"]], "score_label_quality() (cleanlab.experimental.label_issues_batched.labelinspector method)": [[39, "cleanlab.experimental.label_issues_batched.LabelInspector.score_label_quality"]], "split_arr() (in module cleanlab.experimental.label_issues_batched)": [[39, "cleanlab.experimental.label_issues_batched.split_arr"]], "update_confident_thresholds() (cleanlab.experimental.label_issues_batched.labelinspector method)": [[39, "cleanlab.experimental.label_issues_batched.LabelInspector.update_confident_thresholds"]], "cnn (class in cleanlab.experimental.mnist_pytorch)": [[40, "cleanlab.experimental.mnist_pytorch.CNN"]], "simplenet (class in cleanlab.experimental.mnist_pytorch)": [[40, "cleanlab.experimental.mnist_pytorch.SimpleNet"]], "t_destination (cleanlab.experimental.mnist_pytorch.simplenet attribute)": [[40, "cleanlab.experimental.mnist_pytorch.SimpleNet.T_destination"]], "__call__() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[40, "cleanlab.experimental.mnist_pytorch.SimpleNet.__call__"]], "__init_subclass__() (cleanlab.experimental.mnist_pytorch.cnn class method)": [[40, "cleanlab.experimental.mnist_pytorch.CNN.__init_subclass__"]], "add_module() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[40, "cleanlab.experimental.mnist_pytorch.SimpleNet.add_module"]], "apply() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[40, "cleanlab.experimental.mnist_pytorch.SimpleNet.apply"]], "batch_size (cleanlab.experimental.mnist_pytorch.cnn attribute)": [[40, "cleanlab.experimental.mnist_pytorch.CNN.batch_size"]], "bfloat16() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[40, "cleanlab.experimental.mnist_pytorch.SimpleNet.bfloat16"]], "buffers() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[40, "cleanlab.experimental.mnist_pytorch.SimpleNet.buffers"]], "call_super_init (cleanlab.experimental.mnist_pytorch.simplenet attribute)": [[40, "cleanlab.experimental.mnist_pytorch.SimpleNet.call_super_init"]], "children() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[40, "cleanlab.experimental.mnist_pytorch.SimpleNet.children"]], "cleanlab.experimental.mnist_pytorch": [[40, "module-cleanlab.experimental.mnist_pytorch"]], "compile() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[40, "cleanlab.experimental.mnist_pytorch.SimpleNet.compile"]], "cpu() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[40, "cleanlab.experimental.mnist_pytorch.SimpleNet.cpu"]], "cuda() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[40, "cleanlab.experimental.mnist_pytorch.SimpleNet.cuda"]], "dataset (cleanlab.experimental.mnist_pytorch.cnn attribute)": [[40, "cleanlab.experimental.mnist_pytorch.CNN.dataset"]], "double() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[40, "cleanlab.experimental.mnist_pytorch.SimpleNet.double"]], "dump_patches (cleanlab.experimental.mnist_pytorch.simplenet attribute)": [[40, "cleanlab.experimental.mnist_pytorch.SimpleNet.dump_patches"]], "epochs (cleanlab.experimental.mnist_pytorch.cnn attribute)": [[40, "cleanlab.experimental.mnist_pytorch.CNN.epochs"]], "eval() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[40, "cleanlab.experimental.mnist_pytorch.SimpleNet.eval"]], "extra_repr() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[40, "cleanlab.experimental.mnist_pytorch.SimpleNet.extra_repr"]], "fit() (cleanlab.experimental.mnist_pytorch.cnn method)": [[40, "cleanlab.experimental.mnist_pytorch.CNN.fit"], [40, "id0"]], "float() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[40, "cleanlab.experimental.mnist_pytorch.SimpleNet.float"]], "forward() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[40, "cleanlab.experimental.mnist_pytorch.SimpleNet.forward"]], "get_buffer() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[40, "cleanlab.experimental.mnist_pytorch.SimpleNet.get_buffer"]], "get_extra_state() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[40, "cleanlab.experimental.mnist_pytorch.SimpleNet.get_extra_state"]], "get_metadata_routing() (cleanlab.experimental.mnist_pytorch.cnn method)": [[40, "cleanlab.experimental.mnist_pytorch.CNN.get_metadata_routing"]], "get_mnist_dataset() (in module cleanlab.experimental.mnist_pytorch)": [[40, "cleanlab.experimental.mnist_pytorch.get_mnist_dataset"]], "get_parameter() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[40, "cleanlab.experimental.mnist_pytorch.SimpleNet.get_parameter"]], "get_params() (cleanlab.experimental.mnist_pytorch.cnn method)": [[40, "cleanlab.experimental.mnist_pytorch.CNN.get_params"]], "get_sklearn_digits_dataset() (in module cleanlab.experimental.mnist_pytorch)": [[40, "cleanlab.experimental.mnist_pytorch.get_sklearn_digits_dataset"]], "get_submodule() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[40, "cleanlab.experimental.mnist_pytorch.SimpleNet.get_submodule"]], "half() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[40, "cleanlab.experimental.mnist_pytorch.SimpleNet.half"]], "ipu() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[40, "cleanlab.experimental.mnist_pytorch.SimpleNet.ipu"]], "load_state_dict() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[40, "cleanlab.experimental.mnist_pytorch.SimpleNet.load_state_dict"]], "loader (cleanlab.experimental.mnist_pytorch.cnn attribute)": [[40, "cleanlab.experimental.mnist_pytorch.CNN.loader"]], "log_interval (cleanlab.experimental.mnist_pytorch.cnn attribute)": [[40, "cleanlab.experimental.mnist_pytorch.CNN.log_interval"]], "lr (cleanlab.experimental.mnist_pytorch.cnn attribute)": [[40, "cleanlab.experimental.mnist_pytorch.CNN.lr"]], "modules() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[40, "cleanlab.experimental.mnist_pytorch.SimpleNet.modules"]], "momentum (cleanlab.experimental.mnist_pytorch.cnn attribute)": [[40, "cleanlab.experimental.mnist_pytorch.CNN.momentum"]], "named_buffers() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[40, "cleanlab.experimental.mnist_pytorch.SimpleNet.named_buffers"]], "named_children() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[40, "cleanlab.experimental.mnist_pytorch.SimpleNet.named_children"]], "named_modules() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[40, "cleanlab.experimental.mnist_pytorch.SimpleNet.named_modules"]], "named_parameters() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[40, "cleanlab.experimental.mnist_pytorch.SimpleNet.named_parameters"]], "no_cuda (cleanlab.experimental.mnist_pytorch.cnn attribute)": [[40, "cleanlab.experimental.mnist_pytorch.CNN.no_cuda"]], "parameters() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[40, "cleanlab.experimental.mnist_pytorch.SimpleNet.parameters"]], "predict() (cleanlab.experimental.mnist_pytorch.cnn method)": [[40, "cleanlab.experimental.mnist_pytorch.CNN.predict"], [40, "id1"]], "predict_proba() (cleanlab.experimental.mnist_pytorch.cnn method)": [[40, "cleanlab.experimental.mnist_pytorch.CNN.predict_proba"], [40, "id4"]], "register_backward_hook() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[40, "cleanlab.experimental.mnist_pytorch.SimpleNet.register_backward_hook"]], "register_buffer() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[40, "cleanlab.experimental.mnist_pytorch.SimpleNet.register_buffer"]], "register_forward_hook() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[40, "cleanlab.experimental.mnist_pytorch.SimpleNet.register_forward_hook"]], "register_forward_pre_hook() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[40, "cleanlab.experimental.mnist_pytorch.SimpleNet.register_forward_pre_hook"]], "register_full_backward_hook() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[40, "cleanlab.experimental.mnist_pytorch.SimpleNet.register_full_backward_hook"]], "register_full_backward_pre_hook() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[40, "cleanlab.experimental.mnist_pytorch.SimpleNet.register_full_backward_pre_hook"]], "register_load_state_dict_post_hook() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[40, "cleanlab.experimental.mnist_pytorch.SimpleNet.register_load_state_dict_post_hook"]], "register_module() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[40, "cleanlab.experimental.mnist_pytorch.SimpleNet.register_module"]], "register_parameter() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[40, "cleanlab.experimental.mnist_pytorch.SimpleNet.register_parameter"]], "register_state_dict_pre_hook() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[40, "cleanlab.experimental.mnist_pytorch.SimpleNet.register_state_dict_pre_hook"]], "requires_grad_() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[40, "cleanlab.experimental.mnist_pytorch.SimpleNet.requires_grad_"]], "seed (cleanlab.experimental.mnist_pytorch.cnn attribute)": [[40, "cleanlab.experimental.mnist_pytorch.CNN.seed"]], "set_extra_state() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[40, "cleanlab.experimental.mnist_pytorch.SimpleNet.set_extra_state"]], "set_fit_request() (cleanlab.experimental.mnist_pytorch.cnn method)": [[40, "cleanlab.experimental.mnist_pytorch.CNN.set_fit_request"]], "set_params() (cleanlab.experimental.mnist_pytorch.cnn method)": [[40, "cleanlab.experimental.mnist_pytorch.CNN.set_params"]], "set_predict_proba_request() (cleanlab.experimental.mnist_pytorch.cnn method)": [[40, "cleanlab.experimental.mnist_pytorch.CNN.set_predict_proba_request"]], "set_predict_request() (cleanlab.experimental.mnist_pytorch.cnn method)": [[40, "cleanlab.experimental.mnist_pytorch.CNN.set_predict_request"]], "share_memory() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[40, "cleanlab.experimental.mnist_pytorch.SimpleNet.share_memory"]], "state_dict() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[40, "cleanlab.experimental.mnist_pytorch.SimpleNet.state_dict"]], "test_batch_size (cleanlab.experimental.mnist_pytorch.cnn attribute)": [[40, "cleanlab.experimental.mnist_pytorch.CNN.test_batch_size"]], "to() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[40, "cleanlab.experimental.mnist_pytorch.SimpleNet.to"]], "to_empty() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[40, "cleanlab.experimental.mnist_pytorch.SimpleNet.to_empty"]], "train() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[40, "cleanlab.experimental.mnist_pytorch.SimpleNet.train"]], "training (cleanlab.experimental.mnist_pytorch.simplenet attribute)": [[40, "cleanlab.experimental.mnist_pytorch.SimpleNet.training"]], "type() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[40, "cleanlab.experimental.mnist_pytorch.SimpleNet.type"]], "xpu() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[40, "cleanlab.experimental.mnist_pytorch.SimpleNet.xpu"]], "zero_grad() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[40, "cleanlab.experimental.mnist_pytorch.SimpleNet.zero_grad"]], "cleanlab.experimental.span_classification": [[41, "module-cleanlab.experimental.span_classification"]], "display_issues() (in module cleanlab.experimental.span_classification)": [[41, "cleanlab.experimental.span_classification.display_issues"]], "find_label_issues() (in module cleanlab.experimental.span_classification)": [[41, "cleanlab.experimental.span_classification.find_label_issues"]], "get_label_quality_scores() (in module cleanlab.experimental.span_classification)": [[41, "cleanlab.experimental.span_classification.get_label_quality_scores"]], "cleanlab.filter": [[42, "module-cleanlab.filter"]], "find_label_issues() (in module cleanlab.filter)": [[42, "cleanlab.filter.find_label_issues"]], "find_label_issues_using_argmax_confusion_matrix() (in module cleanlab.filter)": [[42, "cleanlab.filter.find_label_issues_using_argmax_confusion_matrix"]], "find_predicted_neq_given() (in module cleanlab.filter)": [[42, "cleanlab.filter.find_predicted_neq_given"]], "pred_probs_by_class (in module cleanlab.filter)": [[42, "cleanlab.filter.pred_probs_by_class"]], "prune_count_matrix_cols (in module cleanlab.filter)": [[42, "cleanlab.filter.prune_count_matrix_cols"]], "cleanlab.internal": [[43, "module-cleanlab.internal"]], "cleanlab.internal.label_quality_utils": [[44, "module-cleanlab.internal.label_quality_utils"]], "get_normalized_entropy() (in module cleanlab.internal.label_quality_utils)": [[44, "cleanlab.internal.label_quality_utils.get_normalized_entropy"]], "cleanlab.internal.latent_algebra": [[45, "module-cleanlab.internal.latent_algebra"]], "compute_inv_noise_matrix() (in module cleanlab.internal.latent_algebra)": [[45, "cleanlab.internal.latent_algebra.compute_inv_noise_matrix"]], "compute_noise_matrix_from_inverse() (in module cleanlab.internal.latent_algebra)": [[45, "cleanlab.internal.latent_algebra.compute_noise_matrix_from_inverse"]], "compute_ps_py_inv_noise_matrix() (in module cleanlab.internal.latent_algebra)": [[45, "cleanlab.internal.latent_algebra.compute_ps_py_inv_noise_matrix"]], "compute_py() (in module cleanlab.internal.latent_algebra)": [[45, "cleanlab.internal.latent_algebra.compute_py"]], "compute_py_inv_noise_matrix() (in module cleanlab.internal.latent_algebra)": [[45, "cleanlab.internal.latent_algebra.compute_py_inv_noise_matrix"]], "compute_pyx() (in module cleanlab.internal.latent_algebra)": [[45, "cleanlab.internal.latent_algebra.compute_pyx"]], "assert_valid_inputs_multiannotator() (in module cleanlab.internal.multiannotator_utils)": [[46, "cleanlab.internal.multiannotator_utils.assert_valid_inputs_multiannotator"]], "assert_valid_pred_probs() (in module cleanlab.internal.multiannotator_utils)": [[46, "cleanlab.internal.multiannotator_utils.assert_valid_pred_probs"]], "check_consensus_label_classes() (in module cleanlab.internal.multiannotator_utils)": [[46, "cleanlab.internal.multiannotator_utils.check_consensus_label_classes"]], "cleanlab.internal.multiannotator_utils": [[46, "module-cleanlab.internal.multiannotator_utils"]], "compute_soft_cross_entropy() (in module cleanlab.internal.multiannotator_utils)": [[46, "cleanlab.internal.multiannotator_utils.compute_soft_cross_entropy"]], "find_best_temp_scaler() (in module cleanlab.internal.multiannotator_utils)": [[46, "cleanlab.internal.multiannotator_utils.find_best_temp_scaler"]], "format_multiannotator_labels() (in module cleanlab.internal.multiannotator_utils)": [[46, "cleanlab.internal.multiannotator_utils.format_multiannotator_labels"]], "temp_scale_pred_probs() (in module cleanlab.internal.multiannotator_utils)": [[46, "cleanlab.internal.multiannotator_utils.temp_scale_pred_probs"]], "aggregator (class in cleanlab.internal.multilabel_scorer)": [[47, "cleanlab.internal.multilabel_scorer.Aggregator"]], "confidence_weighted_entropy (cleanlab.internal.multilabel_scorer.classlabelscorer attribute)": [[47, "cleanlab.internal.multilabel_scorer.ClassLabelScorer.CONFIDENCE_WEIGHTED_ENTROPY"]], "classlabelscorer (class in cleanlab.internal.multilabel_scorer)": [[47, "cleanlab.internal.multilabel_scorer.ClassLabelScorer"]], "multilabelscorer (class in cleanlab.internal.multilabel_scorer)": [[47, "cleanlab.internal.multilabel_scorer.MultilabelScorer"]], "normalized_margin (cleanlab.internal.multilabel_scorer.classlabelscorer attribute)": [[47, "cleanlab.internal.multilabel_scorer.ClassLabelScorer.NORMALIZED_MARGIN"]], "self_confidence (cleanlab.internal.multilabel_scorer.classlabelscorer attribute)": [[47, "cleanlab.internal.multilabel_scorer.ClassLabelScorer.SELF_CONFIDENCE"]], "__call__() (cleanlab.internal.multilabel_scorer.aggregator method)": [[47, "cleanlab.internal.multilabel_scorer.Aggregator.__call__"]], "__call__() (cleanlab.internal.multilabel_scorer.classlabelscorer method)": [[47, "cleanlab.internal.multilabel_scorer.ClassLabelScorer.__call__"]], "__call__() (cleanlab.internal.multilabel_scorer.multilabelscorer method)": [[47, "cleanlab.internal.multilabel_scorer.MultilabelScorer.__call__"]], "__contains__() (cleanlab.internal.multilabel_scorer.classlabelscorer class method)": [[47, "cleanlab.internal.multilabel_scorer.ClassLabelScorer.__contains__"]], "__getitem__() (cleanlab.internal.multilabel_scorer.classlabelscorer class method)": [[47, "cleanlab.internal.multilabel_scorer.ClassLabelScorer.__getitem__"]], "__iter__() (cleanlab.internal.multilabel_scorer.classlabelscorer class method)": [[47, "cleanlab.internal.multilabel_scorer.ClassLabelScorer.__iter__"]], "__len__() (cleanlab.internal.multilabel_scorer.classlabelscorer class method)": [[47, "cleanlab.internal.multilabel_scorer.ClassLabelScorer.__len__"]], "aggregate() (cleanlab.internal.multilabel_scorer.multilabelscorer method)": [[47, "cleanlab.internal.multilabel_scorer.MultilabelScorer.aggregate"]], "cleanlab.internal.multilabel_scorer": [[47, "module-cleanlab.internal.multilabel_scorer"]], "exponential_moving_average() (in module cleanlab.internal.multilabel_scorer)": [[47, "cleanlab.internal.multilabel_scorer.exponential_moving_average"]], "from_str() (cleanlab.internal.multilabel_scorer.classlabelscorer class method)": [[47, "cleanlab.internal.multilabel_scorer.ClassLabelScorer.from_str"]], "get_class_label_quality_scores() (cleanlab.internal.multilabel_scorer.multilabelscorer method)": [[47, "cleanlab.internal.multilabel_scorer.MultilabelScorer.get_class_label_quality_scores"]], "get_cross_validated_multilabel_pred_probs() (in module cleanlab.internal.multilabel_scorer)": [[47, "cleanlab.internal.multilabel_scorer.get_cross_validated_multilabel_pred_probs"]], "get_label_quality_scores() (in module cleanlab.internal.multilabel_scorer)": [[47, "cleanlab.internal.multilabel_scorer.get_label_quality_scores"]], "multilabel_py() (in module cleanlab.internal.multilabel_scorer)": [[47, "cleanlab.internal.multilabel_scorer.multilabel_py"]], "possible_methods (cleanlab.internal.multilabel_scorer.aggregator attribute)": [[47, "cleanlab.internal.multilabel_scorer.Aggregator.possible_methods"]], "softmin() (in module cleanlab.internal.multilabel_scorer)": [[47, "cleanlab.internal.multilabel_scorer.softmin"]], "cleanlab.internal.multilabel_utils": [[48, "module-cleanlab.internal.multilabel_utils"]], "get_onehot_num_classes() (in module cleanlab.internal.multilabel_utils)": [[48, "cleanlab.internal.multilabel_utils.get_onehot_num_classes"]], "int2onehot() (in module cleanlab.internal.multilabel_utils)": [[48, "cleanlab.internal.multilabel_utils.int2onehot"]], "onehot2int() (in module cleanlab.internal.multilabel_utils)": [[48, "cleanlab.internal.multilabel_utils.onehot2int"]], "stack_complement() (in module cleanlab.internal.multilabel_utils)": [[48, "cleanlab.internal.multilabel_utils.stack_complement"]], "cleanlab.internal.outlier": [[49, "module-cleanlab.internal.outlier"]], "transform_distances_to_scores() (in module cleanlab.internal.outlier)": [[49, "cleanlab.internal.outlier.transform_distances_to_scores"]], "cleanlab.internal.token_classification_utils": [[50, "module-cleanlab.internal.token_classification_utils"]], "color_sentence() (in module cleanlab.internal.token_classification_utils)": [[50, "cleanlab.internal.token_classification_utils.color_sentence"]], "filter_sentence() (in module cleanlab.internal.token_classification_utils)": [[50, "cleanlab.internal.token_classification_utils.filter_sentence"]], "get_sentence() (in module cleanlab.internal.token_classification_utils)": [[50, "cleanlab.internal.token_classification_utils.get_sentence"]], "mapping() (in module cleanlab.internal.token_classification_utils)": [[50, "cleanlab.internal.token_classification_utils.mapping"]], "merge_probs() (in module cleanlab.internal.token_classification_utils)": [[50, "cleanlab.internal.token_classification_utils.merge_probs"]], "process_token() (in module cleanlab.internal.token_classification_utils)": [[50, "cleanlab.internal.token_classification_utils.process_token"]], "append_extra_datapoint() (in module cleanlab.internal.util)": [[51, "cleanlab.internal.util.append_extra_datapoint"]], "cleanlab.internal.util": [[51, "module-cleanlab.internal.util"]], "clip_noise_rates() (in module cleanlab.internal.util)": [[51, "cleanlab.internal.util.clip_noise_rates"]], "clip_values() (in module cleanlab.internal.util)": [[51, "cleanlab.internal.util.clip_values"]], "compress_int_array() (in module cleanlab.internal.util)": [[51, "cleanlab.internal.util.compress_int_array"]], "confusion_matrix() (in module cleanlab.internal.util)": [[51, "cleanlab.internal.util.confusion_matrix"]], "csr_vstack() (in module cleanlab.internal.util)": [[51, "cleanlab.internal.util.csr_vstack"]], "estimate_pu_f1() (in module cleanlab.internal.util)": [[51, "cleanlab.internal.util.estimate_pu_f1"]], "extract_indices_tf() (in module cleanlab.internal.util)": [[51, "cleanlab.internal.util.extract_indices_tf"]], "force_two_dimensions() (in module cleanlab.internal.util)": [[51, "cleanlab.internal.util.force_two_dimensions"]], "format_labels() (in module cleanlab.internal.util)": [[51, "cleanlab.internal.util.format_labels"]], "get_missing_classes() (in module cleanlab.internal.util)": [[51, "cleanlab.internal.util.get_missing_classes"]], "get_num_classes() (in module cleanlab.internal.util)": [[51, "cleanlab.internal.util.get_num_classes"]], "get_unique_classes() (in module cleanlab.internal.util)": [[51, "cleanlab.internal.util.get_unique_classes"]], "is_tensorflow_dataset() (in module cleanlab.internal.util)": [[51, "cleanlab.internal.util.is_tensorflow_dataset"]], "is_torch_dataset() (in module cleanlab.internal.util)": [[51, "cleanlab.internal.util.is_torch_dataset"]], "num_unique_classes() (in module cleanlab.internal.util)": [[51, "cleanlab.internal.util.num_unique_classes"]], "print_inverse_noise_matrix() (in module cleanlab.internal.util)": [[51, "cleanlab.internal.util.print_inverse_noise_matrix"]], "print_joint_matrix() (in module cleanlab.internal.util)": [[51, "cleanlab.internal.util.print_joint_matrix"]], "print_noise_matrix() (in module cleanlab.internal.util)": [[51, "cleanlab.internal.util.print_noise_matrix"]], "print_square_matrix() (in module cleanlab.internal.util)": [[51, "cleanlab.internal.util.print_square_matrix"]], "remove_noise_from_class() (in module cleanlab.internal.util)": [[51, "cleanlab.internal.util.remove_noise_from_class"]], "round_preserving_row_totals() (in module cleanlab.internal.util)": [[51, "cleanlab.internal.util.round_preserving_row_totals"]], "round_preserving_sum() (in module cleanlab.internal.util)": [[51, "cleanlab.internal.util.round_preserving_sum"]], "smart_display_dataframe() (in module cleanlab.internal.util)": [[51, "cleanlab.internal.util.smart_display_dataframe"]], "subset_x_y() (in module cleanlab.internal.util)": [[51, "cleanlab.internal.util.subset_X_y"]], "subset_data() (in module cleanlab.internal.util)": [[51, "cleanlab.internal.util.subset_data"]], "subset_labels() (in module cleanlab.internal.util)": [[51, "cleanlab.internal.util.subset_labels"]], "train_val_split() (in module cleanlab.internal.util)": [[51, "cleanlab.internal.util.train_val_split"]], "unshuffle_tensorflow_dataset() (in module cleanlab.internal.util)": [[51, "cleanlab.internal.util.unshuffle_tensorflow_dataset"]], "value_counts() (in module cleanlab.internal.util)": [[51, "cleanlab.internal.util.value_counts"]], "value_counts_fill_missing_classes() (in module cleanlab.internal.util)": [[51, "cleanlab.internal.util.value_counts_fill_missing_classes"]], "assert_indexing_works() (in module cleanlab.internal.validation)": [[52, "cleanlab.internal.validation.assert_indexing_works"]], "assert_nonempty_input() (in module cleanlab.internal.validation)": [[52, "cleanlab.internal.validation.assert_nonempty_input"]], "assert_valid_class_labels() (in module cleanlab.internal.validation)": [[52, "cleanlab.internal.validation.assert_valid_class_labels"]], "assert_valid_inputs() (in module cleanlab.internal.validation)": [[52, "cleanlab.internal.validation.assert_valid_inputs"]], "cleanlab.internal.validation": [[52, "module-cleanlab.internal.validation"]], "labels_to_array() (in module cleanlab.internal.validation)": [[52, "cleanlab.internal.validation.labels_to_array"]], "labels_to_list_multilabel() (in module cleanlab.internal.validation)": [[52, "cleanlab.internal.validation.labels_to_list_multilabel"]], "cleanlab.models": [[54, "module-cleanlab.models"]], "keraswrappermodel (class in cleanlab.models.keras)": [[55, "cleanlab.models.keras.KerasWrapperModel"]], "keraswrappersequential (class in cleanlab.models.keras)": [[55, "cleanlab.models.keras.KerasWrapperSequential"]], "cleanlab.models.keras": [[55, "module-cleanlab.models.keras"]], "fit() (cleanlab.models.keras.keraswrappermodel method)": [[55, "cleanlab.models.keras.KerasWrapperModel.fit"]], "fit() (cleanlab.models.keras.keraswrappersequential method)": [[55, "cleanlab.models.keras.KerasWrapperSequential.fit"]], "get_params() (cleanlab.models.keras.keraswrappermodel method)": [[55, "cleanlab.models.keras.KerasWrapperModel.get_params"]], "get_params() (cleanlab.models.keras.keraswrappersequential method)": [[55, "cleanlab.models.keras.KerasWrapperSequential.get_params"]], "predict() (cleanlab.models.keras.keraswrappermodel method)": [[55, "cleanlab.models.keras.KerasWrapperModel.predict"]], "predict() (cleanlab.models.keras.keraswrappersequential method)": [[55, "cleanlab.models.keras.KerasWrapperSequential.predict"]], "predict_proba() (cleanlab.models.keras.keraswrappermodel method)": [[55, "cleanlab.models.keras.KerasWrapperModel.predict_proba"]], "predict_proba() (cleanlab.models.keras.keraswrappersequential method)": [[55, "cleanlab.models.keras.KerasWrapperSequential.predict_proba"]], "set_params() (cleanlab.models.keras.keraswrappermodel method)": [[55, "cleanlab.models.keras.KerasWrapperModel.set_params"]], "set_params() (cleanlab.models.keras.keraswrappersequential method)": [[55, "cleanlab.models.keras.KerasWrapperSequential.set_params"]], "summary() (cleanlab.models.keras.keraswrappermodel method)": [[55, "cleanlab.models.keras.KerasWrapperModel.summary"]], "summary() (cleanlab.models.keras.keraswrappersequential method)": [[55, "cleanlab.models.keras.KerasWrapperSequential.summary"]], "cleanlab.multiannotator": [[56, "module-cleanlab.multiannotator"]], "convert_long_to_wide_dataset() (in module cleanlab.multiannotator)": [[56, "cleanlab.multiannotator.convert_long_to_wide_dataset"]], "get_active_learning_scores() (in module cleanlab.multiannotator)": [[56, "cleanlab.multiannotator.get_active_learning_scores"]], "get_active_learning_scores_ensemble() (in module cleanlab.multiannotator)": [[56, "cleanlab.multiannotator.get_active_learning_scores_ensemble"]], "get_label_quality_multiannotator() (in module cleanlab.multiannotator)": [[56, "cleanlab.multiannotator.get_label_quality_multiannotator"]], "get_label_quality_multiannotator_ensemble() (in module cleanlab.multiannotator)": [[56, "cleanlab.multiannotator.get_label_quality_multiannotator_ensemble"]], "get_majority_vote_label() (in module cleanlab.multiannotator)": [[56, "cleanlab.multiannotator.get_majority_vote_label"]], "cleanlab.multilabel_classification.dataset": [[57, "module-cleanlab.multilabel_classification.dataset"]], "common_multilabel_issues() (in module cleanlab.multilabel_classification.dataset)": [[57, "cleanlab.multilabel_classification.dataset.common_multilabel_issues"]], "multilabel_health_summary() (in module cleanlab.multilabel_classification.dataset)": [[57, "cleanlab.multilabel_classification.dataset.multilabel_health_summary"]], "overall_multilabel_health_score() (in module cleanlab.multilabel_classification.dataset)": [[57, "cleanlab.multilabel_classification.dataset.overall_multilabel_health_score"]], "rank_classes_by_multilabel_quality() (in module cleanlab.multilabel_classification.dataset)": [[57, "cleanlab.multilabel_classification.dataset.rank_classes_by_multilabel_quality"]], "cleanlab.multilabel_classification.filter": [[58, "module-cleanlab.multilabel_classification.filter"]], "find_label_issues() (in module cleanlab.multilabel_classification.filter)": [[58, "cleanlab.multilabel_classification.filter.find_label_issues"]], "find_multilabel_issues_per_class() (in module cleanlab.multilabel_classification.filter)": [[58, "cleanlab.multilabel_classification.filter.find_multilabel_issues_per_class"]], "cleanlab.multilabel_classification": [[59, "module-cleanlab.multilabel_classification"]], "cleanlab.multilabel_classification.rank": [[60, "module-cleanlab.multilabel_classification.rank"]], "get_label_quality_scores() (in module cleanlab.multilabel_classification.rank)": [[60, "cleanlab.multilabel_classification.rank.get_label_quality_scores"]], "get_label_quality_scores_per_class() (in module cleanlab.multilabel_classification.rank)": [[60, "cleanlab.multilabel_classification.rank.get_label_quality_scores_per_class"]], "cleanlab.object_detection.filter": [[61, "module-cleanlab.object_detection.filter"]], "find_label_issues() (in module cleanlab.object_detection.filter)": [[61, "cleanlab.object_detection.filter.find_label_issues"]], "cleanlab.object_detection": [[62, "module-cleanlab.object_detection"]], "cleanlab.object_detection.rank": [[63, "module-cleanlab.object_detection.rank"]], "compute_badloc_box_scores() (in module cleanlab.object_detection.rank)": [[63, "cleanlab.object_detection.rank.compute_badloc_box_scores"]], "compute_overlooked_box_scores() (in module cleanlab.object_detection.rank)": [[63, "cleanlab.object_detection.rank.compute_overlooked_box_scores"]], "compute_swap_box_scores() (in module cleanlab.object_detection.rank)": [[63, "cleanlab.object_detection.rank.compute_swap_box_scores"]], "get_label_quality_scores() (in module cleanlab.object_detection.rank)": [[63, "cleanlab.object_detection.rank.get_label_quality_scores"]], "issues_from_scores() (in module cleanlab.object_detection.rank)": [[63, "cleanlab.object_detection.rank.issues_from_scores"]], "pool_box_scores_per_image() (in module cleanlab.object_detection.rank)": [[63, "cleanlab.object_detection.rank.pool_box_scores_per_image"]], "bounding_box_size_distribution() (in module cleanlab.object_detection.summary)": [[64, "cleanlab.object_detection.summary.bounding_box_size_distribution"]], "calculate_per_class_metrics() (in module cleanlab.object_detection.summary)": [[64, "cleanlab.object_detection.summary.calculate_per_class_metrics"]], "class_label_distribution() (in module cleanlab.object_detection.summary)": [[64, "cleanlab.object_detection.summary.class_label_distribution"]], "cleanlab.object_detection.summary": [[64, "module-cleanlab.object_detection.summary"]], "get_average_per_class_confusion_matrix() (in module cleanlab.object_detection.summary)": [[64, "cleanlab.object_detection.summary.get_average_per_class_confusion_matrix"]], "get_sorted_bbox_count_idxs() (in module cleanlab.object_detection.summary)": [[64, "cleanlab.object_detection.summary.get_sorted_bbox_count_idxs"]], "object_counts_per_image() (in module cleanlab.object_detection.summary)": [[64, "cleanlab.object_detection.summary.object_counts_per_image"]], "plot_class_distribution() (in module cleanlab.object_detection.summary)": [[64, "cleanlab.object_detection.summary.plot_class_distribution"]], "plot_class_size_distributions() (in module cleanlab.object_detection.summary)": [[64, "cleanlab.object_detection.summary.plot_class_size_distributions"]], "visualize() (in module cleanlab.object_detection.summary)": [[64, "cleanlab.object_detection.summary.visualize"]], "outofdistribution (class in cleanlab.outlier)": [[65, "cleanlab.outlier.OutOfDistribution"]], "cleanlab.outlier": [[65, "module-cleanlab.outlier"]], "fit() (cleanlab.outlier.outofdistribution method)": [[65, "cleanlab.outlier.OutOfDistribution.fit"]], "fit_score() (cleanlab.outlier.outofdistribution method)": [[65, "cleanlab.outlier.OutOfDistribution.fit_score"]], "score() (cleanlab.outlier.outofdistribution method)": [[65, "cleanlab.outlier.OutOfDistribution.score"]], "cleanlab.rank": [[66, "module-cleanlab.rank"]], "find_top_issues() (in module cleanlab.rank)": [[66, "cleanlab.rank.find_top_issues"]], "get_confidence_weighted_entropy_for_each_label() (in module cleanlab.rank)": [[66, "cleanlab.rank.get_confidence_weighted_entropy_for_each_label"]], "get_label_quality_ensemble_scores() (in module cleanlab.rank)": [[66, "cleanlab.rank.get_label_quality_ensemble_scores"]], "get_label_quality_scores() (in module cleanlab.rank)": [[66, "cleanlab.rank.get_label_quality_scores"]], "get_normalized_margin_for_each_label() (in module cleanlab.rank)": [[66, "cleanlab.rank.get_normalized_margin_for_each_label"]], "get_self_confidence_for_each_label() (in module cleanlab.rank)": [[66, "cleanlab.rank.get_self_confidence_for_each_label"]], "order_label_issues() (in module cleanlab.rank)": [[66, "cleanlab.rank.order_label_issues"]], "cleanlab.regression": [[67, "module-cleanlab.regression"]], "cleanlearning (class in cleanlab.regression.learn)": [[68, "cleanlab.regression.learn.CleanLearning"]], "__init_subclass__() (cleanlab.regression.learn.cleanlearning class method)": [[68, "cleanlab.regression.learn.CleanLearning.__init_subclass__"]], "cleanlab.regression.learn": [[68, "module-cleanlab.regression.learn"]], "find_label_issues() (cleanlab.regression.learn.cleanlearning method)": [[68, "cleanlab.regression.learn.CleanLearning.find_label_issues"]], "fit() (cleanlab.regression.learn.cleanlearning method)": [[68, "cleanlab.regression.learn.CleanLearning.fit"]], "get_aleatoric_uncertainty() (cleanlab.regression.learn.cleanlearning method)": [[68, "cleanlab.regression.learn.CleanLearning.get_aleatoric_uncertainty"]], "get_epistemic_uncertainty() (cleanlab.regression.learn.cleanlearning method)": [[68, "cleanlab.regression.learn.CleanLearning.get_epistemic_uncertainty"]], "get_label_issues() (cleanlab.regression.learn.cleanlearning method)": [[68, "cleanlab.regression.learn.CleanLearning.get_label_issues"]], "get_metadata_routing() (cleanlab.regression.learn.cleanlearning method)": [[68, "cleanlab.regression.learn.CleanLearning.get_metadata_routing"]], "get_params() (cleanlab.regression.learn.cleanlearning method)": [[68, "cleanlab.regression.learn.CleanLearning.get_params"]], "predict() (cleanlab.regression.learn.cleanlearning method)": [[68, "cleanlab.regression.learn.CleanLearning.predict"]], "save_space() (cleanlab.regression.learn.cleanlearning method)": [[68, "cleanlab.regression.learn.CleanLearning.save_space"]], "score() (cleanlab.regression.learn.cleanlearning method)": [[68, "cleanlab.regression.learn.CleanLearning.score"]], "set_fit_request() (cleanlab.regression.learn.cleanlearning method)": [[68, "cleanlab.regression.learn.CleanLearning.set_fit_request"]], "set_params() (cleanlab.regression.learn.cleanlearning method)": [[68, "cleanlab.regression.learn.CleanLearning.set_params"]], "set_score_request() (cleanlab.regression.learn.cleanlearning method)": [[68, "cleanlab.regression.learn.CleanLearning.set_score_request"]], "cleanlab.regression.rank": [[69, "module-cleanlab.regression.rank"]], "get_label_quality_scores() (in module cleanlab.regression.rank)": [[69, "cleanlab.regression.rank.get_label_quality_scores"]], "cleanlab.segmentation.filter": [[70, "module-cleanlab.segmentation.filter"]], "find_label_issues() (in module cleanlab.segmentation.filter)": [[70, "cleanlab.segmentation.filter.find_label_issues"]], "cleanlab.segmentation": [[71, "module-cleanlab.segmentation"]], "cleanlab.segmentation.rank": [[72, "module-cleanlab.segmentation.rank"]], "get_label_quality_scores() (in module cleanlab.segmentation.rank)": [[72, "cleanlab.segmentation.rank.get_label_quality_scores"]], "issues_from_scores() (in module cleanlab.segmentation.rank)": [[72, "cleanlab.segmentation.rank.issues_from_scores"]], "cleanlab.segmentation.summary": [[73, "module-cleanlab.segmentation.summary"]], "common_label_issues() (in module cleanlab.segmentation.summary)": [[73, "cleanlab.segmentation.summary.common_label_issues"]], "display_issues() (in module cleanlab.segmentation.summary)": [[73, "cleanlab.segmentation.summary.display_issues"]], "filter_by_class() (in module cleanlab.segmentation.summary)": [[73, "cleanlab.segmentation.summary.filter_by_class"]], "cleanlab.token_classification.filter": [[74, "module-cleanlab.token_classification.filter"]], "find_label_issues() (in module cleanlab.token_classification.filter)": [[74, "cleanlab.token_classification.filter.find_label_issues"]], "cleanlab.token_classification": [[75, "module-cleanlab.token_classification"]], "cleanlab.token_classification.rank": [[76, "module-cleanlab.token_classification.rank"]], "get_label_quality_scores() (in module cleanlab.token_classification.rank)": [[76, "cleanlab.token_classification.rank.get_label_quality_scores"]], "issues_from_scores() (in module cleanlab.token_classification.rank)": [[76, "cleanlab.token_classification.rank.issues_from_scores"]], "cleanlab.token_classification.summary": [[77, "module-cleanlab.token_classification.summary"]], "common_label_issues() (in module cleanlab.token_classification.summary)": [[77, "cleanlab.token_classification.summary.common_label_issues"]], "display_issues() (in module cleanlab.token_classification.summary)": [[77, "cleanlab.token_classification.summary.display_issues"]], "filter_by_token() (in module cleanlab.token_classification.summary)": [[77, "cleanlab.token_classification.summary.filter_by_token"]]}})