Search.setIndex({"docnames": ["cleanlab/benchmarking/index", "cleanlab/benchmarking/noise_generation", "cleanlab/classification", "cleanlab/count", "cleanlab/data_valuation", "cleanlab/datalab/datalab", "cleanlab/datalab/guide/_templates/issue_types_tip", "cleanlab/datalab/guide/custom_issue_manager", "cleanlab/datalab/guide/generating_cluster_ids", "cleanlab/datalab/guide/index", "cleanlab/datalab/guide/issue_type_description", "cleanlab/datalab/guide/table", "cleanlab/datalab/index", "cleanlab/datalab/internal/data", "cleanlab/datalab/internal/data_issues", "cleanlab/datalab/internal/factory", "cleanlab/datalab/internal/index", "cleanlab/datalab/internal/issue_finder", "cleanlab/datalab/internal/issue_manager/_notices/not_registered", "cleanlab/datalab/internal/issue_manager/data_valuation", "cleanlab/datalab/internal/issue_manager/duplicate", "cleanlab/datalab/internal/issue_manager/imbalance", "cleanlab/datalab/internal/issue_manager/index", "cleanlab/datalab/internal/issue_manager/issue_manager", "cleanlab/datalab/internal/issue_manager/label", "cleanlab/datalab/internal/issue_manager/multilabel/index", "cleanlab/datalab/internal/issue_manager/multilabel/label", "cleanlab/datalab/internal/issue_manager/noniid", "cleanlab/datalab/internal/issue_manager/null", "cleanlab/datalab/internal/issue_manager/outlier", "cleanlab/datalab/internal/issue_manager/regression/index", "cleanlab/datalab/internal/issue_manager/regression/label", "cleanlab/datalab/internal/issue_manager/underperforming_group", "cleanlab/datalab/internal/model_outputs", "cleanlab/datalab/internal/report", "cleanlab/datalab/internal/task", "cleanlab/datalab/optional_dependencies", "cleanlab/dataset", "cleanlab/experimental/cifar_cnn", "cleanlab/experimental/coteaching", "cleanlab/experimental/index", "cleanlab/experimental/label_issues_batched", "cleanlab/experimental/mnist_pytorch", "cleanlab/experimental/span_classification", "cleanlab/filter", "cleanlab/internal/index", "cleanlab/internal/label_quality_utils", "cleanlab/internal/latent_algebra", "cleanlab/internal/multiannotator_utils", "cleanlab/internal/multilabel_scorer", "cleanlab/internal/multilabel_utils", "cleanlab/internal/neighbor/index", "cleanlab/internal/neighbor/knn_graph", "cleanlab/internal/neighbor/metric", "cleanlab/internal/neighbor/search", "cleanlab/internal/outlier", "cleanlab/internal/token_classification_utils", "cleanlab/internal/util", "cleanlab/internal/validation", "cleanlab/models/fasttext", "cleanlab/models/index", "cleanlab/models/keras", "cleanlab/multiannotator", "cleanlab/multilabel_classification/dataset", "cleanlab/multilabel_classification/filter", "cleanlab/multilabel_classification/index", "cleanlab/multilabel_classification/rank", "cleanlab/object_detection/filter", "cleanlab/object_detection/index", "cleanlab/object_detection/rank", "cleanlab/object_detection/summary", "cleanlab/outlier", "cleanlab/rank", "cleanlab/regression/index", "cleanlab/regression/learn", "cleanlab/regression/rank", "cleanlab/segmentation/filter", "cleanlab/segmentation/index", "cleanlab/segmentation/rank", "cleanlab/segmentation/summary", "cleanlab/token_classification/filter", "cleanlab/token_classification/index", "cleanlab/token_classification/rank", "cleanlab/token_classification/summary", "index", "migrating/migrate_v2", "tutorials/clean_learning/index", "tutorials/clean_learning/tabular", "tutorials/clean_learning/text", "tutorials/datalab/audio", "tutorials/datalab/data_monitor", "tutorials/datalab/datalab_advanced", "tutorials/datalab/datalab_quickstart", "tutorials/datalab/image", "tutorials/datalab/index", "tutorials/datalab/tabular", "tutorials/datalab/text", "tutorials/datalab/workflows", "tutorials/dataset_health", "tutorials/faq", "tutorials/indepth_overview", "tutorials/index", "tutorials/multiannotator", "tutorials/multilabel_classification", "tutorials/object_detection", "tutorials/outliers", "tutorials/pred_probs_cross_val", "tutorials/regression", "tutorials/segmentation", "tutorials/token_classification"], "filenames": ["cleanlab/benchmarking/index.rst", "cleanlab/benchmarking/noise_generation.rst", "cleanlab/classification.rst", "cleanlab/count.rst", "cleanlab/data_valuation.rst", "cleanlab/datalab/datalab.rst", "cleanlab/datalab/guide/_templates/issue_types_tip.rst", "cleanlab/datalab/guide/custom_issue_manager.rst", "cleanlab/datalab/guide/generating_cluster_ids.rst", "cleanlab/datalab/guide/index.rst", "cleanlab/datalab/guide/issue_type_description.rst", "cleanlab/datalab/guide/table.rst", "cleanlab/datalab/index.rst", "cleanlab/datalab/internal/data.rst", "cleanlab/datalab/internal/data_issues.rst", "cleanlab/datalab/internal/factory.rst", "cleanlab/datalab/internal/index.rst", "cleanlab/datalab/internal/issue_finder.rst", "cleanlab/datalab/internal/issue_manager/_notices/not_registered.rst", "cleanlab/datalab/internal/issue_manager/data_valuation.rst", "cleanlab/datalab/internal/issue_manager/duplicate.rst", "cleanlab/datalab/internal/issue_manager/imbalance.rst", "cleanlab/datalab/internal/issue_manager/index.rst", "cleanlab/datalab/internal/issue_manager/issue_manager.rst", "cleanlab/datalab/internal/issue_manager/label.rst", "cleanlab/datalab/internal/issue_manager/multilabel/index.rst", "cleanlab/datalab/internal/issue_manager/multilabel/label.rst", "cleanlab/datalab/internal/issue_manager/noniid.rst", "cleanlab/datalab/internal/issue_manager/null.rst", "cleanlab/datalab/internal/issue_manager/outlier.rst", "cleanlab/datalab/internal/issue_manager/regression/index.rst", "cleanlab/datalab/internal/issue_manager/regression/label.rst", "cleanlab/datalab/internal/issue_manager/underperforming_group.rst", "cleanlab/datalab/internal/model_outputs.rst", "cleanlab/datalab/internal/report.rst", "cleanlab/datalab/internal/task.rst", "cleanlab/datalab/optional_dependencies.rst", "cleanlab/dataset.rst", "cleanlab/experimental/cifar_cnn.rst", "cleanlab/experimental/coteaching.rst", "cleanlab/experimental/index.rst", "cleanlab/experimental/label_issues_batched.rst", "cleanlab/experimental/mnist_pytorch.rst", "cleanlab/experimental/span_classification.rst", "cleanlab/filter.rst", "cleanlab/internal/index.rst", "cleanlab/internal/label_quality_utils.rst", "cleanlab/internal/latent_algebra.rst", "cleanlab/internal/multiannotator_utils.rst", "cleanlab/internal/multilabel_scorer.rst", "cleanlab/internal/multilabel_utils.rst", "cleanlab/internal/neighbor/index.rst", "cleanlab/internal/neighbor/knn_graph.rst", "cleanlab/internal/neighbor/metric.rst", "cleanlab/internal/neighbor/search.rst", "cleanlab/internal/outlier.rst", "cleanlab/internal/token_classification_utils.rst", "cleanlab/internal/util.rst", "cleanlab/internal/validation.rst", "cleanlab/models/fasttext.rst", "cleanlab/models/index.rst", "cleanlab/models/keras.rst", "cleanlab/multiannotator.rst", "cleanlab/multilabel_classification/dataset.rst", "cleanlab/multilabel_classification/filter.rst", "cleanlab/multilabel_classification/index.rst", "cleanlab/multilabel_classification/rank.rst", "cleanlab/object_detection/filter.rst", "cleanlab/object_detection/index.rst", "cleanlab/object_detection/rank.rst", "cleanlab/object_detection/summary.rst", "cleanlab/outlier.rst", "cleanlab/rank.rst", "cleanlab/regression/index.rst", "cleanlab/regression/learn.rst", "cleanlab/regression/rank.rst", "cleanlab/segmentation/filter.rst", "cleanlab/segmentation/index.rst", "cleanlab/segmentation/rank.rst", "cleanlab/segmentation/summary.rst", "cleanlab/token_classification/filter.rst", "cleanlab/token_classification/index.rst", "cleanlab/token_classification/rank.rst", "cleanlab/token_classification/summary.rst", "index.rst", "migrating/migrate_v2.rst", "tutorials/clean_learning/index.rst", "tutorials/clean_learning/tabular.ipynb", "tutorials/clean_learning/text.ipynb", "tutorials/datalab/audio.ipynb", "tutorials/datalab/data_monitor.ipynb", "tutorials/datalab/datalab_advanced.ipynb", "tutorials/datalab/datalab_quickstart.ipynb", "tutorials/datalab/image.ipynb", "tutorials/datalab/index.rst", "tutorials/datalab/tabular.ipynb", "tutorials/datalab/text.ipynb", "tutorials/datalab/workflows.ipynb", "tutorials/dataset_health.ipynb", "tutorials/faq.ipynb", "tutorials/indepth_overview.ipynb", "tutorials/index.rst", "tutorials/multiannotator.ipynb", "tutorials/multilabel_classification.ipynb", "tutorials/object_detection.ipynb", "tutorials/outliers.ipynb", "tutorials/pred_probs_cross_val.rst", "tutorials/regression.ipynb", "tutorials/segmentation.ipynb", "tutorials/token_classification.ipynb"], "titles": ["benchmarking", "noise_generation", "classification", "count", "data_valuation", "datalab", "&lt;no title&gt;", "Creating Your Own Issues Manager", "Generating Cluster IDs", "Datalab guides", "Datalab Issue Types", "&lt;no title&gt;", "datalab", "data", "data_issues", "factory", "internal", "issue_finder", "&lt;no title&gt;", "data_valuation", "duplicate", "imbalance", "issue_manager", "issue_manager", "label", "multilabel", "label", "noniid", "null", "outlier", "regression", "label", "underperforming_group", "model_outputs", "report", "task", "&lt;no title&gt;", "dataset", "cifar_cnn", "coteaching", "experimental", "label_issues_batched", "mnist_pytorch", "span_classification", "filter", "internal", "label_quality_utils", "latent_algebra", "multiannotator_utils", "multilabel_scorer", "multilabel_utils", "neighbor", "knn_graph", "metric", "search", "outlier", "token_classification_utils", "util", "validation", "fasttext", "models", "keras", "multiannotator", "dataset", "filter", "multilabel_classification", "rank", "filter", "object_detection", "rank", "summary", "outlier", "rank", "regression", "regression.learn", "regression.rank", "filter", "segmentation", "rank", "summary", "filter", "token_classification", "rank", "summary", "cleanlab open-source documentation", "How to migrate to versions &gt;= 2.0.0 from pre 1.0.1", "CleanLearning Tutorials", "Classification with Structured/Tabular Data and Noisy Labels", "Text Classification with Noisy Labels", "Detecting Issues in an Audio Dataset with Datalab", "DataMonitor: Leverage statistics from Datalab to audit new data", "Datalab: Advanced workflows to audit your data", "Datalab: A unified audit to detect all kinds of issues in data and labels", "Detecting Issues in an Image Dataset with Datalab", "Datalab Tutorials", "Detecting Issues in Tabular Data\u00a0(Numeric/Categorical columns) with Datalab", "Detecting Issues in a Text Dataset with Datalab", "Miscellaneous workflows with Datalab", "Understanding Dataset-level Labeling Issues", "FAQ", "The Workflows of Data-centric AI for Classification with Noisy Labels", "Tutorials", "Estimate Consensus and Annotator Quality for Data Labeled by Multiple Annotators", "Find Label Errors in Multi-Label Classification Datasets", "Finding Label Errors in Object Detection Datasets", "Detect Outliers with Cleanlab and PyTorch Image Models (timm)", "Computing Out-of-Sample Predicted Probabilities with Cross-Validation", "Find Noisy Labels in Regression Datasets", "Find Label Errors in Semantic Segmentation Datasets", "Find Label Errors in Token Classification (Text) Datasets"], "terms": {"noise_gener": [0, 85, 90, 91, 92, 100, 102, 103], "noise_matrix_is_valid": [0, 1], "generate_noisy_label": [0, 1, 90, 91, 92, 100, 102, 103], "generate_noise_matrix_from_trac": [0, 1, 90, 91, 92, 100, 102, 103], "generate_n_rand_probabilities_that_sum_to_m": [0, 1], "randomly_distribute_n_balls_into_k_bin": [0, 1], "helper": [1, 17, 41, 46, 48, 49, 50, 51, 55, 56, 57, 69, 93, 97, 98, 109], "method": [1, 2, 3, 4, 5, 7, 10, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 54, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 99, 102, 103, 104, 105, 106, 107, 108, 109], "ar": [1, 2, 3, 4, 5, 7, 10, 13, 14, 15, 16, 17, 19, 21, 22, 23, 24, 25, 27, 30, 31, 33, 35, 37, 38, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 63, 64, 66, 67, 69, 70, 71, 72, 74, 75, 76, 78, 79, 80, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 99, 100, 102, 103, 104, 105, 106, 107, 109], "us": [1, 2, 3, 4, 5, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 60, 61, 62, 63, 64, 66, 67, 69, 70, 71, 72, 74, 75, 76, 78, 79, 80, 82, 84, 85, 91, 98, 106], "benchmark": [1, 38, 84, 85, 90, 91, 92, 100, 102, 103], "cleanlab": [1, 2, 3, 4, 5, 7, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 63, 64, 66, 67, 69, 70, 71, 72, 74, 75, 76, 78, 79, 80, 82, 83, 85, 90, 91, 92, 97, 98, 101, 106], "": [1, 2, 3, 4, 10, 19, 33, 37, 38, 42, 46, 49, 52, 54, 55, 57, 62, 63, 67, 69, 70, 71, 72, 74, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109], "core": [1, 41, 44, 76, 78], "algorithm": [1, 2, 8, 10, 32, 39, 43, 54, 55, 57, 62, 71, 80, 82, 84, 97, 99, 100, 102, 109], "These": [1, 2, 3, 4, 5, 8, 10, 22, 38, 40, 42, 43, 44, 45, 52, 60, 62, 63, 66, 70, 71, 75, 79, 80, 82, 83, 87, 88, 89, 90, 92, 93, 95, 96, 97, 99, 100, 102, 103, 104, 105, 107, 108, 109], "introduc": [1, 89, 99, 100], "synthet": [1, 102, 103, 108], "nois": [1, 2, 3, 37, 44, 47, 57, 63, 90, 91, 92, 97, 98, 102, 107], "label": [1, 2, 3, 4, 5, 7, 8, 9, 11, 13, 15, 16, 17, 21, 22, 23, 25, 30, 32, 35, 37, 38, 39, 41, 42, 43, 44, 46, 47, 48, 49, 50, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 91, 97, 101, 105, 106], "classif": [1, 3, 4, 5, 7, 10, 11, 13, 15, 17, 33, 35, 37, 41, 43, 44, 47, 49, 50, 57, 62, 63, 64, 65, 66, 71, 72, 80, 81, 82, 83, 84, 85, 86, 89, 90, 91, 92, 97, 101, 102, 105, 106, 107, 108], "dataset": [1, 2, 3, 4, 5, 7, 9, 10, 13, 14, 15, 17, 19, 20, 21, 23, 26, 27, 28, 29, 31, 32, 40, 41, 42, 43, 44, 47, 49, 53, 57, 61, 62, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 87, 91, 95, 101, 102, 106], "specif": [1, 3, 5, 9, 15, 16, 17, 28, 34, 35, 40, 52, 53, 54, 60, 64, 67, 70, 79, 83, 93, 95, 96, 97, 100, 104, 109], "thi": [1, 2, 3, 4, 5, 6, 7, 9, 10, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 63, 64, 66, 67, 69, 70, 71, 72, 74, 75, 76, 78, 79, 80, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109], "modul": [1, 3, 14, 15, 16, 17, 22, 25, 30, 33, 34, 35, 37, 38, 39, 40, 41, 42, 44, 49, 51, 52, 54, 55, 57, 60, 62, 67, 70, 71, 72, 84, 93, 99, 103], "provid": [1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 15, 17, 19, 24, 31, 35, 37, 38, 39, 41, 42, 44, 47, 51, 52, 54, 55, 57, 61, 62, 63, 64, 69, 70, 71, 72, 74, 76, 78, 79, 82, 83, 84, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 99, 100, 102, 105, 106, 107, 108, 109], "gener": [1, 2, 3, 7, 10, 19, 24, 26, 34, 37, 49, 52, 54, 57, 58, 71, 72, 74, 79, 88, 89, 90, 91, 92, 93, 96, 98, 99, 100, 102, 103, 105, 106, 108, 109], "valid": [1, 2, 3, 5, 10, 13, 33, 35, 37, 44, 45, 47, 48, 49, 52, 54, 55, 57, 62, 64, 67, 70, 72, 74, 75, 83, 85, 87, 88, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 103, 104, 107, 108, 109], "matric": [1, 3, 47, 99], "which": [1, 2, 3, 5, 7, 10, 13, 14, 15, 17, 19, 23, 27, 33, 34, 35, 37, 38, 42, 43, 44, 47, 49, 53, 54, 56, 57, 62, 63, 64, 67, 69, 70, 71, 72, 74, 75, 78, 79, 80, 82, 84, 85, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 99, 100, 102, 103, 104, 105, 106, 107, 109], "learn": [1, 2, 3, 4, 5, 9, 10, 15, 17, 23, 31, 34, 39, 40, 41, 42, 44, 46, 48, 53, 54, 57, 60, 62, 64, 71, 73, 75, 78, 82, 84, 87, 88, 89, 91, 93, 95, 96, 97, 98, 102, 103, 107], "i": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 17, 19, 20, 21, 23, 24, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 41, 42, 43, 44, 46, 47, 48, 49, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 66, 67, 69, 70, 71, 72, 74, 75, 76, 78, 79, 80, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 95, 96, 98, 102, 103, 104, 105, 107, 108, 109], "possibl": [1, 2, 3, 7, 10, 37, 38, 42, 44, 46, 47, 49, 64, 65, 66, 67, 69, 70, 71, 72, 74, 80, 82, 83, 90, 92, 97, 99, 100, 102, 103, 104, 107, 108, 109], "noisi": [1, 2, 3, 10, 37, 39, 42, 44, 47, 57, 63, 64, 66, 72, 74, 75, 76, 78, 79, 85, 90, 91, 92, 95, 96, 97, 99, 101, 102], "given": [1, 2, 3, 5, 10, 15, 31, 37, 38, 39, 41, 42, 43, 44, 46, 47, 48, 49, 56, 57, 62, 63, 64, 67, 69, 70, 71, 72, 74, 75, 79, 80, 82, 83, 85, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 102, 104, 105, 107, 108, 109], "matrix": [1, 2, 3, 5, 10, 17, 19, 32, 37, 44, 46, 47, 50, 52, 57, 58, 64, 67, 69, 70, 71, 72, 95, 97, 104, 105], "trace": [1, 90, 91, 92, 100, 102, 103], "valu": [1, 2, 3, 4, 5, 10, 13, 14, 17, 19, 23, 27, 28, 33, 35, 37, 38, 39, 41, 42, 44, 46, 47, 49, 52, 53, 54, 55, 57, 62, 63, 64, 66, 67, 69, 70, 71, 72, 74, 75, 76, 78, 79, 80, 83, 88, 89, 90, 92, 93, 95, 96, 99, 100, 102, 103, 104, 105, 107, 108, 109], "more": [1, 2, 3, 4, 5, 7, 9, 10, 14, 15, 17, 19, 27, 37, 38, 41, 42, 43, 46, 49, 52, 53, 54, 55, 57, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 74, 75, 78, 79, 80, 82, 84, 89, 91, 93, 95, 96, 97, 98, 99, 102, 103, 104, 105, 108, 109], "function": [1, 2, 3, 4, 5, 7, 10, 14, 15, 17, 24, 27, 31, 37, 38, 39, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 66, 67, 69, 70, 71, 72, 74, 75, 76, 78, 79, 80, 82, 83, 87, 88, 89, 90, 92, 93, 95, 96, 97, 98, 99, 100, 102, 103, 104, 108, 109], "noise_matrix": [1, 2, 3, 10, 47, 57, 90, 91, 92, 100, 102, 103], "py": [1, 3, 34, 38, 39, 44, 47, 49, 88, 89, 90, 91, 92, 93, 95, 96, 97, 99, 100, 102, 103], "verbos": [1, 2, 5, 7, 17, 19, 20, 21, 23, 24, 26, 27, 28, 29, 31, 32, 34, 37, 41, 44, 62, 63, 64, 69, 71, 72, 74, 76, 78, 79, 83, 91, 100, 102], "fals": [1, 2, 3, 5, 7, 10, 13, 19, 20, 21, 23, 24, 26, 27, 29, 31, 32, 34, 35, 37, 38, 41, 42, 44, 48, 56, 57, 58, 62, 63, 64, 66, 67, 69, 70, 71, 72, 74, 76, 78, 79, 80, 88, 89, 90, 91, 92, 93, 95, 96, 97, 99, 100, 102, 104, 105, 107, 108], "sourc": [1, 2, 3, 4, 5, 7, 9, 10, 12, 13, 14, 15, 17, 19, 20, 21, 23, 24, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 66, 67, 69, 70, 71, 72, 74, 75, 76, 78, 79, 80, 82, 83, 90], "prior": [1, 2, 3, 37, 44, 47, 49], "repres": [1, 2, 3, 7, 10, 13, 17, 19, 27, 33, 35, 37, 41, 44, 47, 50, 52, 53, 55, 57, 62, 63, 64, 67, 69, 70, 71, 72, 74, 76, 78, 79, 83, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 99, 100, 102, 103, 104, 105, 107, 109], "p": [1, 2, 3, 5, 10, 37, 44, 46, 47, 55, 57, 62, 70, 71, 72, 76, 95, 96, 97, 100, 102, 109], "true_label": [1, 2, 3, 37, 47, 57, 100, 102], "k": [1, 2, 3, 4, 5, 8, 10, 13, 17, 19, 20, 24, 27, 29, 32, 37, 41, 43, 44, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 62, 63, 64, 65, 66, 67, 70, 71, 72, 74, 76, 78, 79, 80, 82, 83, 87, 89, 90, 91, 92, 97, 99, 100, 102, 103, 104, 105, 108, 109], "check": [1, 2, 5, 6, 9, 10, 13, 17, 28, 35, 38, 41, 42, 48, 58, 61, 67, 70, 74, 84, 87, 88, 89, 90, 91, 92, 93, 99, 100, 102, 103, 107], "learnabl": 1, "mean": [1, 2, 7, 8, 10, 13, 14, 23, 27, 39, 42, 47, 49, 55, 69, 74, 88, 92, 96, 97, 99, 100, 102, 103, 104, 105, 107], "achiev": [1, 2, 38, 39, 42, 74, 99, 102, 109], "better": [1, 5, 10, 44, 53, 62, 64, 72, 74, 75, 84, 88, 89, 92, 95, 96, 97, 99, 100, 103, 104, 105, 109], "than": [1, 2, 3, 4, 7, 9, 10, 27, 29, 32, 37, 44, 53, 57, 61, 62, 67, 69, 71, 72, 74, 78, 82, 87, 89, 90, 92, 93, 95, 96, 97, 99, 100, 102, 103, 104, 105, 106, 107, 108, 109], "random": [1, 2, 3, 7, 10, 19, 32, 41, 49, 52, 62, 72, 74, 87, 89, 90, 91, 92, 93, 95, 97, 99, 100, 102, 103, 105], "perform": [1, 2, 4, 7, 10, 27, 29, 32, 38, 42, 49, 51, 52, 53, 70, 74, 84, 87, 88, 91, 99, 100, 102, 103, 106, 107], "averag": [1, 3, 5, 10, 23, 29, 37, 38, 42, 49, 55, 62, 63, 70, 71, 72, 99, 102, 105], "amount": [1, 3, 93], "paramet": [1, 2, 3, 4, 5, 9, 13, 14, 15, 17, 19, 20, 21, 23, 24, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 49, 50, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 66, 67, 69, 70, 71, 72, 74, 75, 76, 78, 79, 80, 82, 83, 87, 88, 89, 92, 93, 96, 97], "np": [1, 2, 3, 4, 5, 7, 17, 19, 32, 37, 39, 41, 43, 44, 46, 47, 49, 50, 52, 54, 55, 56, 57, 58, 61, 62, 63, 64, 66, 67, 69, 70, 71, 72, 74, 75, 76, 79, 80, 82, 83, 87, 88, 89, 90, 91, 92, 93, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109], "ndarrai": [1, 2, 3, 4, 5, 17, 24, 26, 27, 31, 32, 33, 37, 39, 41, 43, 44, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 62, 63, 64, 66, 67, 69, 70, 71, 72, 74, 75, 76, 78, 79, 82, 97, 109], "an": [1, 2, 3, 4, 5, 7, 9, 10, 13, 14, 15, 17, 19, 20, 21, 23, 24, 26, 27, 29, 31, 32, 33, 34, 35, 37, 38, 39, 41, 42, 43, 44, 46, 47, 48, 49, 52, 54, 55, 57, 58, 61, 62, 63, 64, 66, 67, 69, 70, 71, 72, 74, 76, 78, 79, 83, 84, 87, 88, 90, 91, 92, 95, 96, 97, 98, 100, 102, 103, 104, 105, 106, 107, 108, 109], "arrai": [1, 2, 3, 4, 5, 7, 10, 13, 17, 19, 27, 33, 37, 39, 41, 42, 43, 44, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 66, 67, 69, 70, 71, 72, 74, 75, 76, 78, 79, 80, 82, 83, 87, 88, 89, 90, 91, 92, 96, 97, 99, 100, 102, 103, 104, 105, 107, 108, 109], "shape": [1, 2, 3, 4, 5, 17, 19, 37, 39, 41, 43, 44, 46, 47, 48, 49, 52, 53, 55, 56, 57, 61, 62, 63, 64, 66, 67, 69, 70, 71, 72, 74, 75, 76, 78, 79, 80, 82, 83, 89, 97, 98, 99, 100, 103, 104, 105, 108, 109], "condit": [1, 2, 3, 47, 53, 56, 57, 72, 93, 100, 109], "probabl": [1, 2, 3, 5, 8, 10, 17, 24, 26, 29, 33, 37, 41, 42, 43, 44, 46, 47, 49, 50, 56, 57, 61, 62, 63, 64, 66, 67, 69, 70, 71, 72, 74, 76, 78, 79, 80, 82, 83, 84, 85, 98, 99, 100, 101, 103, 104, 105, 108, 109], "k_": [1, 2, 3, 47, 57], "k_y": [1, 2, 3, 47, 57], "contain": [1, 2, 3, 5, 10, 13, 14, 19, 20, 21, 23, 24, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 41, 42, 44, 46, 47, 51, 52, 56, 57, 61, 62, 63, 64, 66, 67, 69, 70, 71, 72, 74, 75, 78, 79, 80, 82, 83, 85, 87, 88, 89, 91, 92, 93, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108], "fraction": [1, 2, 3, 10, 21, 39, 47, 57, 62, 74, 95, 99], "exampl": [1, 2, 3, 4, 5, 7, 8, 10, 13, 14, 15, 17, 19, 20, 21, 23, 24, 26, 27, 28, 29, 31, 32, 34, 35, 37, 38, 39, 41, 42, 43, 44, 46, 47, 49, 50, 52, 55, 56, 57, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 74, 75, 76, 78, 79, 80, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 95, 96, 97, 98, 102, 103, 104, 106, 107, 108, 109], "everi": [1, 2, 3, 4, 5, 10, 17, 38, 42, 44, 47, 56, 57, 64, 72, 74, 75, 87, 89, 90, 91, 92, 93, 95, 96, 99, 102, 104, 106, 108, 109], "class": [1, 2, 3, 4, 5, 7, 9, 13, 14, 15, 17, 19, 20, 21, 23, 24, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 41, 42, 43, 44, 46, 47, 48, 49, 50, 54, 56, 57, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 74, 76, 78, 79, 80, 82, 83, 84, 87, 88, 89, 90, 91, 92, 93, 95, 96, 98, 99, 102, 103, 104, 105, 106, 107, 109], "other": [1, 2, 3, 5, 10, 17, 23, 28, 37, 38, 40, 41, 42, 44, 47, 50, 52, 57, 58, 60, 62, 63, 66, 70, 71, 72, 74, 79, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 99, 100, 103, 105, 108, 109], "assum": [1, 2, 3, 13, 44, 47, 52, 56, 57, 72, 76, 79, 99, 103, 105, 107, 108, 109], "column": [1, 2, 3, 5, 10, 11, 13, 14, 31, 37, 41, 44, 47, 49, 50, 53, 56, 57, 62, 63, 64, 66, 67, 70, 71, 72, 74, 79, 80, 82, 83, 87, 88, 89, 90, 91, 92, 93, 96, 97, 98, 99, 100, 102, 103, 104, 107, 108, 109], "sum": [1, 2, 3, 27, 32, 33, 37, 47, 49, 57, 63, 64, 66, 69, 74, 90, 91, 92, 93, 99, 100, 102, 103, 108, 109], "1": [1, 2, 3, 4, 5, 7, 10, 11, 13, 17, 19, 20, 21, 23, 24, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 41, 42, 43, 44, 46, 47, 48, 49, 50, 52, 55, 56, 57, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 74, 75, 76, 78, 79, 80, 82, 83, 98, 99, 106], "each": [1, 2, 3, 4, 5, 7, 8, 9, 13, 14, 15, 17, 21, 23, 24, 26, 27, 32, 33, 34, 37, 38, 39, 41, 42, 43, 44, 46, 47, 49, 50, 52, 54, 55, 57, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 74, 75, 76, 78, 79, 80, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 108, 109], "true": [1, 2, 3, 5, 7, 10, 13, 19, 20, 21, 23, 24, 26, 27, 29, 31, 32, 34, 35, 37, 38, 39, 41, 42, 44, 47, 49, 52, 56, 57, 58, 61, 62, 63, 64, 67, 69, 70, 71, 72, 74, 76, 78, 79, 83, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 102, 103, 104, 105, 107, 108, 109], "return": [1, 2, 3, 4, 5, 10, 13, 14, 15, 17, 19, 20, 21, 23, 24, 26, 27, 28, 29, 31, 32, 34, 35, 37, 38, 41, 42, 43, 44, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 66, 67, 69, 70, 71, 72, 74, 75, 76, 78, 79, 80, 82, 83, 84, 88, 89, 90, 91, 92, 93, 96, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109], "type": [1, 2, 3, 4, 5, 6, 7, 12, 13, 14, 15, 17, 19, 20, 21, 23, 24, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 60, 62, 63, 64, 66, 67, 69, 70, 71, 72, 74, 75, 76, 78, 79, 80, 82, 83, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 99, 103, 104, 107, 108, 109], "bool": [1, 2, 3, 5, 13, 19, 20, 21, 23, 24, 26, 27, 29, 31, 32, 34, 35, 37, 38, 41, 42, 44, 49, 52, 56, 57, 62, 64, 66, 67, 69, 70, 71, 72, 74, 76, 78, 79, 83], "is_valid": 1, "whether": [1, 3, 5, 10, 13, 14, 19, 20, 21, 23, 24, 26, 27, 29, 31, 32, 34, 38, 41, 42, 44, 52, 57, 62, 63, 64, 66, 67, 83, 88, 89, 92, 93, 95, 96, 98, 99, 100, 107, 109], "from": [1, 2, 3, 4, 5, 7, 8, 9, 10, 12, 13, 14, 15, 17, 19, 23, 24, 28, 31, 32, 33, 34, 36, 37, 38, 39, 41, 42, 43, 44, 47, 49, 50, 52, 53, 55, 56, 57, 62, 64, 66, 69, 70, 71, 72, 74, 75, 80, 82, 83, 84, 89, 93, 95, 96, 97, 98, 99, 102, 103, 104, 105, 106, 108, 109], "perfect": [1, 2, 37, 74, 100, 104], "exactli": [1, 3, 10, 37, 38, 42, 44, 65, 71, 91, 92, 93, 95, 96, 100], "yield": [1, 38, 42, 90], "between": [1, 5, 10, 16, 17, 22, 23, 25, 27, 30, 33, 37, 38, 39, 40, 41, 42, 44, 45, 46, 48, 52, 53, 54, 55, 60, 62, 63, 66, 69, 71, 72, 74, 75, 78, 82, 83, 85, 88, 89, 91, 92, 93, 95, 96, 97, 98, 100, 102, 103, 104, 105, 107, 108, 109], "below": [1, 3, 4, 5, 10, 37, 38, 41, 42, 44, 46, 49, 55, 62, 63, 64, 69, 70, 78, 82, 85, 87, 88, 89, 90, 91, 92, 93, 95, 96, 98, 99, 100, 102, 103, 104, 105, 106, 107, 108, 109], "we": [1, 2, 3, 5, 7, 10, 14, 23, 38, 41, 42, 44, 49, 57, 58, 61, 62, 69, 70, 72, 84, 85, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109], "loop": [1, 3, 47, 57, 93, 104], "implement": [1, 2, 3, 4, 9, 15, 23, 38, 39, 41, 42, 47, 51, 53, 54, 57, 71, 74, 84, 87, 89, 91, 95, 105, 106], "what": [1, 5, 9, 10, 17, 34, 37, 39, 41, 44, 62, 63, 67, 69, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 102, 103, 104, 105, 107, 108, 109], "doe": [1, 2, 3, 7, 10, 41, 42, 44, 49, 52, 55, 58, 69, 70, 74, 76, 78, 82, 88, 89, 91, 92, 93, 95, 96, 98, 103, 107, 108], "do": [1, 2, 5, 9, 10, 37, 41, 42, 57, 58, 71, 72, 76, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 102, 103, 104, 105, 107, 108, 109], "fast": 1, "explain": [1, 10, 97], "python": [1, 2, 42, 61, 74, 88, 89, 91, 92, 93, 95, 96, 97, 98, 100, 105], "pseudocod": [1, 106], "happen": [1, 10, 44, 64, 90, 96, 102, 108], "n": [1, 2, 3, 5, 7, 37, 38, 41, 42, 44, 46, 47, 48, 49, 52, 53, 55, 56, 57, 62, 63, 64, 66, 67, 69, 70, 71, 72, 74, 75, 76, 78, 79, 82, 87, 88, 89, 90, 93, 96, 97, 98, 99, 102, 103, 104, 107, 108, 109], "without": [1, 2, 5, 9, 10, 13, 15, 21, 38, 42, 54, 66, 74, 84, 88, 89, 90, 96, 97, 99, 100, 104, 105], "ani": [1, 2, 3, 5, 7, 9, 10, 13, 14, 15, 17, 19, 20, 21, 23, 24, 26, 27, 28, 29, 31, 32, 37, 38, 41, 42, 44, 46, 48, 55, 56, 57, 61, 62, 64, 66, 67, 69, 70, 72, 74, 76, 78, 79, 84, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 99, 102, 103, 104, 105, 106, 107, 108], "distinct": [1, 19, 57, 109], "natur": [1, 10, 102, 105], "number": [1, 2, 3, 4, 5, 7, 8, 10, 13, 14, 17, 19, 20, 21, 23, 24, 26, 27, 29, 31, 32, 34, 35, 37, 38, 39, 41, 42, 44, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 62, 63, 64, 66, 67, 69, 70, 71, 72, 74, 75, 76, 78, 79, 82, 83, 85, 89, 90, 91, 92, 93, 95, 96, 97, 99, 100, 102, 103, 104, 108, 109], "0": [1, 2, 3, 4, 5, 7, 10, 13, 19, 20, 21, 23, 24, 26, 27, 28, 29, 31, 32, 33, 37, 38, 39, 41, 42, 43, 44, 46, 47, 48, 49, 50, 52, 55, 56, 57, 62, 63, 64, 66, 67, 69, 70, 71, 72, 74, 75, 76, 78, 79, 80, 82, 83, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 108, 109], "count_joint": 1, "len": [1, 2, 3, 7, 37, 41, 47, 56, 57, 58, 71, 72, 74, 87, 88, 90, 91, 92, 93, 96, 97, 98, 99, 100, 102, 103, 104, 105, 107, 109], "y": [1, 2, 3, 5, 8, 19, 31, 32, 42, 47, 49, 57, 58, 61, 70, 74, 75, 88, 89, 90, 91, 92, 95, 97, 99, 100, 102, 103, 105, 107], "round": [1, 41, 44, 57, 74, 97, 99, 107], "astyp": [1, 102], "int": [1, 2, 3, 4, 5, 7, 17, 19, 20, 21, 23, 24, 26, 27, 28, 29, 31, 32, 34, 37, 38, 39, 41, 42, 44, 49, 50, 52, 53, 54, 55, 56, 57, 58, 63, 64, 66, 70, 71, 72, 74, 76, 78, 79, 80, 83, 89, 91, 93, 97, 104, 105], "rang": [1, 3, 5, 7, 13, 47, 49, 55, 57, 70, 74, 75, 90, 93, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109], "idx_flip": 1, "where": [1, 2, 3, 5, 7, 10, 13, 14, 17, 23, 37, 41, 44, 47, 48, 49, 50, 52, 53, 55, 56, 57, 58, 62, 63, 64, 66, 67, 69, 70, 71, 72, 74, 75, 76, 78, 79, 80, 82, 88, 89, 93, 95, 96, 97, 99, 100, 102, 103, 104, 105, 106, 107, 108, 109], "pragma": 1, "cover": [1, 3, 85, 97, 98, 99], "choic": [1, 8, 44, 53, 55, 93, 99, 103, 105], "replac": [1, 56, 61, 72, 87, 88, 90, 91, 92, 93, 96, 97, 98, 99, 102, 105], "max_trace_prob": 1, "min_trace_prob": 1, "1e": [1, 3, 52, 72, 89, 90, 91, 92], "05": [1, 10, 27, 31, 56, 70, 74, 80, 82, 95, 98, 99, 100, 104], "max_noise_r": 1, "99999": 1, "min_noise_r": 1, "valid_noise_matrix": [1, 90, 91, 92, 100, 102, 103], "none": [1, 2, 3, 4, 5, 7, 10, 11, 13, 14, 17, 19, 20, 21, 23, 24, 26, 27, 28, 29, 31, 32, 34, 35, 37, 38, 39, 41, 42, 43, 44, 46, 47, 48, 49, 50, 52, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 69, 70, 71, 72, 74, 76, 78, 79, 82, 83, 90, 91, 92, 93, 97, 99, 100, 102, 103, 108], "frac_zero_noise_r": 1, "seed": [1, 2, 3, 10, 27, 40, 42, 49, 74, 87, 89, 90, 91, 92, 95, 97, 98, 100, 102, 103], "max_it": [1, 88, 89, 96, 105], "10000": [1, 41, 98, 99], "x": [1, 2, 3, 5, 10, 19, 20, 21, 23, 24, 26, 27, 29, 31, 32, 37, 38, 39, 42, 44, 46, 47, 49, 52, 54, 56, 57, 58, 61, 62, 64, 70, 71, 72, 74, 76, 87, 88, 89, 90, 91, 92, 93, 95, 97, 98, 99, 100, 102, 103, 105, 107], "diagon": [1, 3, 5, 44, 47, 57], "equal": [1, 3, 10, 13, 52, 64, 69, 79, 106], "creat": [1, 2, 9, 17, 19, 38, 41, 42, 44, 57, 74, 84, 88, 89, 93, 95, 96, 97, 99, 108, 109], "impli": [1, 10, 37, 63, 70], "float": [1, 2, 10, 19, 20, 21, 23, 24, 26, 27, 28, 29, 31, 32, 37, 38, 39, 40, 41, 42, 44, 46, 48, 49, 55, 56, 57, 62, 63, 64, 66, 69, 70, 74, 78, 82, 89, 90, 91, 92, 100, 102, 103], "entri": [1, 3, 5, 10, 37, 38, 42, 44, 46, 50, 52, 55, 57, 62, 63, 64, 67, 87, 88, 95, 96, 100, 103, 104, 107], "maximum": [1, 10, 71, 79, 83, 108], "minimum": [1, 8, 10, 21, 44, 46, 64, 69, 82], "noise_r": 1, "non": [1, 2, 3, 5, 7, 9, 17, 27, 38, 42, 44, 52, 69, 74, 91, 99, 100, 102, 104, 105], "default": [1, 2, 3, 4, 5, 7, 10, 11, 15, 17, 29, 31, 34, 37, 38, 39, 41, 42, 44, 46, 47, 49, 51, 52, 53, 54, 55, 57, 61, 62, 63, 64, 66, 67, 69, 70, 71, 72, 74, 75, 76, 78, 79, 80, 82, 83, 91, 93, 97, 99, 107, 108], "If": [1, 2, 3, 4, 5, 10, 13, 14, 17, 27, 29, 35, 37, 38, 41, 42, 44, 46, 47, 49, 52, 53, 56, 57, 61, 62, 63, 64, 67, 69, 70, 71, 74, 75, 76, 78, 79, 82, 83, 84, 85, 87, 88, 89, 91, 93, 95, 96, 97, 99, 100, 102, 103, 104, 105, 107, 108, 109], "have": [1, 2, 3, 4, 5, 7, 9, 10, 17, 22, 25, 27, 30, 37, 38, 40, 41, 42, 44, 47, 49, 52, 57, 61, 62, 63, 64, 67, 69, 70, 71, 72, 74, 75, 79, 83, 84, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109], "all": [1, 2, 3, 5, 7, 8, 9, 10, 14, 15, 17, 23, 34, 37, 38, 41, 42, 43, 44, 47, 49, 50, 52, 56, 57, 61, 62, 63, 64, 65, 66, 69, 70, 71, 72, 74, 76, 78, 79, 80, 82, 83, 84, 85, 87, 88, 89, 90, 91, 93, 95, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109], "necessari": [1, 2, 3, 4, 7, 10, 13, 56, 90, 91, 97], "In": [1, 2, 3, 5, 10, 37, 38, 41, 42, 52, 61, 62, 63, 65, 87, 88, 89, 91, 92, 93, 95, 96, 97, 98, 99, 100, 103, 104, 105, 106, 107, 108, 109], "particular": [1, 5, 6, 10, 14, 15, 17, 20, 21, 23, 27, 28, 29, 32, 38, 42, 57, 62, 66, 70, 74, 79, 83, 84, 87, 88, 89, 90, 92, 96, 99, 102, 103, 105, 107], "satisfi": [1, 3, 37], "requir": [1, 2, 5, 7, 8, 9, 10, 11, 12, 13, 31, 36, 38, 39, 40, 41, 42, 44, 47, 52, 54, 57, 60, 61, 64, 71, 72, 74, 76, 84, 85, 89, 97, 98, 99, 100, 106], "argument": [1, 2, 3, 5, 10, 11, 17, 24, 28, 31, 32, 33, 38, 41, 42, 43, 44, 49, 52, 54, 58, 61, 62, 63, 64, 66, 69, 70, 71, 72, 74, 78, 79, 80, 82, 88, 90, 92, 93, 96, 97, 98, 99, 103, 104, 107, 109], "when": [1, 2, 3, 4, 5, 10, 13, 15, 24, 27, 38, 42, 44, 47, 49, 52, 54, 55, 57, 61, 64, 66, 67, 69, 71, 72, 74, 75, 87, 88, 90, 91, 92, 93, 95, 96, 97, 98, 102, 106, 107, 108, 109], "The": [1, 2, 3, 4, 5, 7, 8, 10, 13, 14, 15, 17, 19, 20, 21, 23, 24, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 61, 62, 63, 64, 67, 69, 70, 71, 72, 74, 76, 79, 80, 82, 84, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109], "rate": [1, 2, 3, 10, 39, 57, 89, 109], "set": [1, 2, 3, 5, 9, 10, 13, 14, 17, 18, 19, 20, 21, 23, 24, 26, 27, 28, 29, 31, 32, 34, 37, 38, 41, 42, 44, 48, 49, 51, 52, 53, 55, 57, 61, 62, 64, 67, 69, 70, 71, 72, 74, 76, 78, 79, 87, 88, 90, 91, 92, 95, 96, 97, 99, 102, 103, 105, 106, 107, 108, 109], "note": [1, 2, 3, 7, 8, 10, 11, 13, 28, 32, 35, 38, 41, 42, 43, 44, 49, 52, 57, 61, 62, 67, 69, 70, 71, 72, 74, 75, 79, 85, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 100, 102, 103, 104, 105, 107, 108, 109], "you": [1, 2, 3, 5, 7, 9, 10, 15, 17, 37, 38, 40, 41, 42, 44, 49, 54, 60, 61, 62, 64, 67, 69, 70, 71, 72, 74, 75, 76, 79, 80, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109], "high": [1, 2, 17, 41, 44, 52, 53, 57, 69, 72, 74, 87, 88, 90, 91, 92, 93, 97, 98, 100, 104, 107, 108, 109], "mai": [1, 2, 3, 4, 5, 10, 14, 22, 23, 25, 30, 33, 37, 38, 40, 41, 42, 44, 47, 49, 52, 57, 62, 63, 67, 69, 70, 71, 72, 74, 76, 79, 83, 85, 88, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 102, 103, 104, 106, 107, 108, 109], "imposs": [1, 10, 100], "also": [1, 2, 3, 5, 7, 9, 10, 23, 35, 37, 38, 41, 42, 44, 49, 56, 61, 62, 71, 74, 79, 82, 83, 84, 87, 88, 89, 91, 92, 93, 95, 96, 98, 99, 100, 102, 103, 104, 106, 107, 108, 109], "low": [1, 10, 57, 62, 84, 90, 91, 92, 96, 97, 100, 104, 108], "zero": [1, 3, 5, 38, 42, 46, 52, 57, 58, 91, 93, 103, 104, 105], "forc": [1, 2, 3, 5, 42, 91, 109], "instead": [1, 2, 3, 10, 14, 17, 34, 37, 38, 41, 42, 44, 47, 57, 61, 62, 64, 66, 70, 71, 72, 74, 75, 78, 80, 82, 85, 87, 88, 89, 93, 95, 96, 97, 99, 100, 103, 104, 105, 107, 108, 109], "onli": [1, 2, 3, 4, 5, 7, 10, 11, 17, 24, 27, 31, 37, 38, 41, 42, 43, 44, 46, 47, 52, 53, 55, 56, 57, 58, 61, 62, 71, 72, 74, 76, 78, 82, 83, 84, 88, 89, 91, 92, 93, 96, 97, 102, 103, 104, 105, 106, 107, 108, 109], "guarante": [1, 3, 5, 16, 22, 25, 30, 38, 40, 42, 45, 47, 60, 85], "produc": [1, 2, 5, 9, 10, 17, 49, 62, 72, 74, 76, 78, 84, 87, 88, 89, 93, 95, 96, 97, 99, 100, 102, 103, 104, 105, 106, 108, 109], "higher": [1, 5, 10, 37, 44, 46, 47, 49, 55, 61, 62, 63, 74, 92, 96, 97, 99, 104], "opposit": [1, 109], "occur": [1, 3, 10, 37, 56, 69, 91, 92, 93, 99, 105], "small": [1, 3, 10, 37, 41, 49, 52, 55, 57, 63, 70, 88, 93, 96, 98, 103, 105], "numpi": [1, 3, 4, 5, 7, 10, 13, 19, 32, 33, 41, 42, 43, 49, 52, 55, 56, 58, 61, 66, 69, 74, 75, 80, 82, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109], "max": [1, 44, 71, 72, 92, 93, 97, 105], "tri": [1, 38, 42, 106], "befor": [1, 2, 3, 38, 42, 55, 57, 71, 74, 79, 87, 88, 90, 96, 97, 99, 100, 102, 105, 107], "option": [1, 2, 3, 4, 5, 7, 8, 9, 13, 14, 17, 24, 31, 37, 38, 41, 42, 44, 47, 49, 52, 54, 55, 56, 57, 58, 61, 62, 63, 64, 66, 67, 69, 70, 71, 72, 74, 76, 78, 79, 82, 83, 84, 87, 89, 91, 92, 93, 95, 99, 100, 103, 107, 108], "left": [1, 2, 44, 46, 55, 57, 64, 67, 70, 90, 91, 92, 103, 104, 105, 108], "stochast": 1, "exceed": 1, "m": [1, 5, 38, 42, 48, 49, 52, 53, 62, 67, 69, 70, 71, 90, 91, 92, 98, 102, 103, 104, 109], "max_prob": 1, "min_prob": 1, "dirichlet": 1, "ones": [1, 38, 42, 61, 99, 100, 108], "length": [1, 5, 13, 27, 28, 37, 39, 44, 57, 64, 67, 71, 72, 74, 76, 79, 83, 87, 89, 103, 105, 108, 109], "must": [1, 2, 3, 4, 5, 7, 17, 37, 38, 39, 40, 42, 44, 47, 49, 50, 55, 57, 60, 61, 62, 63, 64, 71, 72, 74, 76, 78, 79, 80, 82, 83, 89, 93, 97, 102, 106, 108, 109], "max_balls_per_bin": 1, "min_balls_per_bin": 1, "uniformli": 1, "integ": [1, 2, 3, 10, 13, 37, 41, 44, 50, 57, 58, 62, 64, 70, 76, 78, 79, 80, 82, 83, 87, 88, 89, 99, 102, 103, 104, 108, 109], "ball": [1, 98], "bin": [1, 3, 64, 90, 91, 92, 97, 105], "ensur": [1, 2, 10, 38, 42, 52, 54, 55, 57, 58, 61, 69, 72, 74, 87, 88, 89, 91, 92, 93, 96, 97, 99, 100, 105, 106, 107], "most": [1, 3, 5, 7, 10, 17, 37, 41, 44, 49, 61, 62, 63, 64, 67, 69, 70, 71, 72, 75, 78, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 95, 96, 97, 99, 100, 102, 103, 104, 105, 107, 108], "least": [1, 4, 10, 19, 32, 37, 41, 62, 63, 69, 72, 82, 92, 93, 99, 102, 105, 108], "int_arrai": [1, 57], "can": [2, 3, 4, 5, 7, 8, 9, 14, 15, 17, 34, 35, 37, 38, 39, 40, 41, 42, 44, 48, 49, 50, 52, 53, 54, 57, 58, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 74, 75, 76, 79, 80, 83, 84, 85, 87, 88, 89, 91, 93, 95, 96, 97, 103, 104, 105, 106, 107, 108, 109], "model": [2, 3, 4, 5, 9, 10, 11, 17, 19, 31, 33, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 54, 56, 61, 62, 63, 64, 66, 67, 69, 70, 71, 72, 74, 75, 76, 78, 79, 80, 82, 83, 85, 90, 91, 92, 97, 98, 101, 106, 108, 109], "For": [2, 3, 5, 7, 9, 10, 12, 17, 23, 36, 37, 38, 41, 42, 44, 47, 49, 52, 55, 57, 61, 62, 63, 64, 66, 67, 69, 70, 71, 72, 74, 76, 78, 80, 82, 83, 84, 87, 88, 89, 90, 92, 93, 95, 97, 98, 99, 100, 102, 103, 104, 105, 106, 108, 109], "regular": [2, 3, 41, 61], "multi": [2, 3, 4, 10, 33, 37, 38, 41, 42, 44, 48, 49, 50, 57, 58, 63, 64, 65, 66, 71, 72, 84, 97, 99, 100, 101], "task": [2, 5, 7, 10, 11, 12, 13, 15, 16, 17, 26, 31, 34, 37, 41, 47, 49, 50, 55, 57, 62, 64, 72, 74, 84, 88, 89, 90, 96, 97, 98, 99, 100, 103, 105, 107, 108, 109], "cleanlearn": [2, 3, 10, 24, 31, 38, 57, 61, 73, 74, 75, 84, 85, 87, 88, 107], "wrap": [2, 38, 42, 51, 61, 71, 74, 84, 87, 88, 90, 91, 92, 95, 96, 100, 107], "instanc": [2, 3, 5, 6, 7, 10, 14, 17, 19, 20, 21, 23, 24, 26, 27, 28, 29, 31, 32, 34, 38, 42, 49, 61, 70, 71, 74, 79, 87, 88, 89, 90, 91, 92, 93, 95, 96, 99, 100, 104], "sklearn": [2, 3, 4, 5, 8, 10, 19, 32, 37, 42, 49, 53, 54, 57, 61, 71, 74, 75, 84, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 99, 100, 102, 103, 105, 106, 107], "classifi": [2, 3, 42, 49, 57, 62, 65, 71, 72, 84, 85, 87, 88, 89, 95, 96, 99, 102, 103, 105, 106, 108, 109], "adher": [2, 42, 74], "estim": [2, 3, 4, 5, 9, 14, 23, 37, 41, 42, 44, 47, 57, 62, 63, 64, 69, 71, 74, 76, 78, 82, 84, 85, 89, 90, 91, 92, 93, 95, 96, 97, 99, 101, 104, 105, 106, 107, 108, 109], "api": [2, 3, 15, 61, 67, 70, 71, 74, 85, 97, 99, 107], "defin": [2, 3, 5, 7, 10, 15, 23, 37, 38, 39, 41, 42, 44, 72, 74, 76, 89, 91, 92, 95, 98, 99, 102, 105, 109], "four": [2, 10, 98, 100, 109], "clf": [2, 3, 5, 49, 74, 84, 87, 95, 97, 99, 100, 103], "fit": [2, 3, 5, 8, 10, 19, 40, 42, 52, 54, 60, 61, 71, 73, 74, 84, 87, 88, 90, 91, 92, 93, 95, 96, 97, 99, 100, 102, 103, 105, 106, 107, 109], "sample_weight": [2, 42, 74, 100], "predict_proba": [2, 5, 37, 40, 42, 49, 60, 61, 87, 89, 90, 91, 92, 95, 96, 97, 99, 100, 102, 103, 105], "predict": [2, 3, 4, 5, 8, 9, 10, 11, 17, 23, 24, 26, 29, 31, 33, 35, 37, 40, 41, 42, 43, 44, 46, 47, 49, 50, 56, 57, 60, 61, 62, 63, 64, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 82, 83, 84, 85, 88, 98, 99, 100, 101, 105, 107, 108, 109], "score": [2, 3, 4, 5, 7, 10, 14, 19, 20, 21, 23, 24, 26, 27, 28, 29, 31, 32, 37, 41, 43, 44, 46, 49, 55, 62, 63, 64, 66, 67, 69, 70, 71, 72, 73, 74, 75, 78, 80, 82, 84, 85, 87, 88, 89, 90, 91, 92, 93, 95, 96, 98, 99, 105, 107], "data": [2, 3, 4, 5, 7, 8, 9, 12, 14, 15, 16, 17, 19, 20, 21, 23, 24, 26, 27, 28, 29, 31, 32, 33, 34, 37, 39, 40, 41, 42, 43, 44, 49, 50, 52, 53, 54, 57, 60, 61, 62, 63, 64, 65, 69, 71, 72, 73, 74, 79, 80, 81, 82, 83, 85, 88, 93, 94, 101, 106], "e": [2, 3, 5, 10, 13, 23, 33, 37, 38, 41, 42, 44, 47, 49, 50, 52, 57, 58, 62, 63, 64, 65, 67, 70, 71, 72, 74, 76, 84, 87, 88, 89, 90, 91, 92, 93, 95, 96, 98, 99, 100, 102, 103, 104, 105, 106, 107], "featur": [2, 3, 4, 5, 8, 10, 11, 17, 19, 20, 24, 27, 28, 29, 31, 32, 49, 52, 53, 54, 57, 71, 74, 84, 87, 90, 91, 92, 95, 96, 97, 99, 100, 102, 103, 107], "element": [2, 3, 5, 37, 43, 44, 46, 57, 62, 64, 72, 79, 80, 82, 88, 89, 96, 97, 99, 109], "first": [2, 5, 10, 18, 27, 28, 37, 41, 49, 52, 57, 62, 63, 67, 70, 72, 74, 87, 88, 89, 91, 93, 95, 97, 99, 102, 103, 104, 105, 107, 108, 109], "index": [2, 10, 27, 37, 44, 51, 52, 54, 56, 57, 58, 63, 72, 74, 79, 82, 83, 88, 89, 91, 92, 93, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109], "should": [2, 3, 5, 7, 10, 15, 23, 27, 32, 33, 37, 38, 41, 42, 44, 46, 47, 49, 52, 54, 55, 56, 57, 61, 62, 63, 66, 67, 69, 70, 71, 72, 74, 75, 79, 80, 82, 83, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 100, 102, 103, 104, 105, 106, 107, 108, 109], "correspond": [2, 3, 5, 10, 14, 15, 17, 19, 20, 21, 23, 24, 26, 27, 28, 29, 31, 32, 35, 37, 38, 41, 42, 43, 44, 46, 47, 49, 52, 56, 57, 62, 63, 64, 66, 67, 69, 70, 71, 72, 74, 76, 79, 80, 82, 83, 87, 88, 89, 90, 91, 92, 93, 95, 96, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109], "differ": [2, 5, 7, 10, 14, 16, 22, 25, 27, 28, 30, 37, 38, 40, 41, 42, 44, 45, 49, 52, 55, 57, 58, 60, 62, 67, 69, 71, 74, 87, 89, 90, 91, 92, 93, 95, 96, 97, 98, 100, 102, 103, 105, 106, 107], "sampl": [2, 3, 5, 8, 10, 17, 21, 44, 46, 49, 52, 53, 54, 64, 67, 70, 72, 74, 75, 84, 85, 88, 97, 98, 99, 100, 101, 103, 104, 107, 108, 109], "size": [2, 10, 32, 38, 41, 42, 44, 49, 52, 53, 64, 69, 70, 74, 76, 78, 88, 90, 93, 95, 99, 100, 102, 103, 104, 106, 108], "here": [2, 5, 7, 10, 15, 41, 44, 47, 61, 62, 63, 64, 66, 67, 70, 71, 82, 84, 85, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 108, 109], "re": [2, 5, 38, 42, 54, 56, 62, 74, 84, 87, 88, 89, 90, 91, 95, 96, 99, 107, 108, 109], "weight": [2, 10, 38, 39, 42, 49, 52, 62, 69, 72, 74, 88, 89, 90, 91, 92, 96], "loss": [2, 39, 61, 72, 74, 93], "while": [2, 3, 10, 38, 41, 42, 48, 49, 57, 74, 84, 93, 97, 99, 100, 102, 103, 107], "train": [2, 3, 4, 5, 9, 10, 17, 19, 33, 38, 39, 40, 42, 49, 57, 61, 62, 67, 70, 71, 74, 75, 85, 90, 91, 92, 93, 95, 96, 98, 100, 102, 103, 104, 106, 108, 109], "support": [2, 3, 4, 5, 13, 15, 34, 35, 41, 43, 49, 57, 58, 61, 71, 72, 82, 84, 85, 89, 90, 91, 92, 93, 97, 99], "your": [2, 3, 5, 9, 10, 17, 37, 38, 40, 41, 42, 44, 49, 54, 57, 60, 61, 62, 63, 64, 66, 71, 72, 74, 75, 76, 78, 79, 85, 87, 88, 89, 90, 93, 95, 98, 102, 103, 104, 105, 106, 107, 108, 109], "recommend": [2, 5, 7, 10, 14, 17, 41, 44, 62, 91, 92, 93, 97, 99, 106, 107], "furthermor": 2, "correctli": [2, 3, 10, 37, 38, 42, 44, 47, 52, 58, 63, 64, 69, 70, 74, 76, 88, 93, 96, 97, 99, 103, 104, 107, 108], "clonabl": [2, 74], "via": [2, 5, 7, 10, 11, 14, 17, 19, 23, 37, 39, 41, 42, 49, 53, 57, 62, 67, 70, 71, 72, 74, 75, 78, 82, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 103, 104, 105, 106, 107, 108, 109], "base": [2, 3, 4, 5, 7, 10, 13, 14, 17, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 31, 32, 33, 34, 35, 38, 41, 42, 43, 44, 47, 48, 49, 52, 53, 55, 56, 57, 58, 61, 62, 63, 64, 66, 69, 71, 72, 74, 75, 78, 80, 82, 87, 89, 90, 91, 92, 93, 95, 96, 97, 98, 100, 102, 103, 104, 105, 107, 108, 109], "clone": [2, 74, 103], "intern": [2, 3, 7, 10, 11, 12, 13, 14, 15, 17, 19, 20, 21, 23, 24, 26, 27, 28, 29, 31, 32, 33, 34, 35, 41, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 66, 70, 74, 80, 85, 89, 91, 97, 99, 100, 102, 103, 104, 105, 107, 109], "multipl": [2, 3, 5, 10, 13, 14, 35, 37, 44, 55, 56, 62, 63, 64, 66, 69, 70, 74, 84, 91, 92, 93, 95, 97, 99, 101, 103, 104, 107], "g": [2, 3, 5, 10, 13, 23, 33, 37, 38, 42, 44, 50, 52, 57, 64, 65, 67, 70, 71, 72, 74, 84, 87, 88, 89, 90, 91, 92, 93, 95, 96, 98, 99, 100, 102, 103, 104, 105, 106, 107], "manual": [2, 74, 87, 88, 89, 97, 99, 105, 106, 107, 109], "pytorch": [2, 38, 39, 42, 74, 84, 89, 93, 99, 101, 103, 108], "call": [2, 3, 5, 6, 10, 14, 15, 19, 20, 21, 23, 24, 26, 27, 28, 29, 31, 32, 38, 42, 49, 57, 61, 71, 74, 88, 89, 90, 91, 92, 96, 99, 100, 103, 105, 106, 107, 108, 109], "__init__": [2, 39, 74, 93], "independ": [2, 3, 10, 63, 74, 96, 97, 106, 107, 109], "compat": [2, 38, 41, 42, 54, 61, 74, 75, 78, 82, 84, 87, 88, 97, 99, 106, 107], "neural": [2, 39, 61, 71, 74, 89, 93, 99, 103, 105, 107], "network": [2, 38, 39, 42, 61, 71, 74, 88, 89, 93, 96, 99, 103, 105, 107], "typic": [2, 10, 38, 42, 54, 71, 74, 87, 88, 89, 92, 93, 95, 96, 105, 106], "initi": [2, 3, 14, 19, 38, 42, 52, 62, 74, 87, 96, 99], "insid": [2, 42, 74, 99, 100], "There": [2, 3, 7, 52, 84, 100, 102], "two": [2, 3, 10, 19, 27, 37, 38, 41, 42, 50, 52, 53, 54, 57, 67, 69, 70, 85, 88, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 103, 107, 108, 109], "new": [2, 7, 9, 10, 15, 23, 38, 41, 42, 48, 52, 56, 57, 62, 74, 88, 89, 91, 96, 98, 99, 105, 106, 109], "notion": 2, "confid": [2, 3, 10, 23, 37, 41, 44, 47, 49, 57, 62, 63, 64, 67, 69, 70, 71, 72, 74, 78, 82, 84, 87, 93, 95, 96, 100, 102, 103, 104, 106, 108, 109], "packag": [2, 5, 7, 9, 10, 12, 16, 36, 40, 44, 45, 57, 60, 61, 67, 70, 74, 84, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109], "prune": [2, 3, 44, 64, 74, 85, 104], "everyth": [2, 70, 100], "els": [2, 70, 90, 91, 93, 97, 98, 99, 102, 103, 104], "mathemat": [2, 3, 10, 47, 103], "keep": [2, 14, 15, 57, 84, 90, 91, 97, 98, 99, 108], "belong": [2, 3, 10, 37, 44, 46, 47, 52, 63, 64, 65, 66, 71, 72, 76, 80, 82, 83, 92, 93, 100, 103, 105, 108, 109], "2": [2, 3, 4, 5, 7, 10, 11, 13, 19, 20, 21, 23, 24, 26, 27, 28, 29, 31, 32, 37, 38, 39, 41, 42, 44, 46, 47, 48, 49, 50, 52, 54, 55, 56, 57, 61, 63, 64, 66, 67, 70, 71, 72, 74, 75, 79, 80, 82, 83, 98, 99, 106], "error": [2, 3, 5, 10, 38, 42, 43, 44, 46, 47, 57, 63, 64, 66, 67, 69, 70, 72, 74, 76, 78, 79, 82, 85, 87, 89, 90, 91, 92, 95, 96, 97, 98, 101], "erron": [2, 3, 37, 44, 47, 57, 63, 64, 72, 74, 75, 76, 105, 107], "import": [2, 3, 4, 5, 7, 8, 10, 13, 14, 15, 19, 20, 21, 23, 24, 26, 27, 29, 31, 32, 34, 37, 41, 43, 49, 52, 55, 56, 62, 66, 69, 74, 75, 80, 82, 83, 84, 87, 88, 95, 96, 97, 99, 103, 104, 105, 107, 108, 109], "linear_model": [2, 5, 37, 57, 74, 84, 88, 89, 90, 91, 92, 96, 97, 99, 100, 102, 105], "logisticregress": [2, 3, 5, 37, 57, 84, 88, 89, 90, 91, 92, 96, 97, 99, 100, 102, 105], "logreg": 2, "cl": [2, 15, 31, 74, 84, 87, 88, 99, 100, 107], "pass": [2, 3, 5, 8, 10, 11, 13, 14, 15, 17, 24, 31, 34, 38, 41, 42, 44, 48, 49, 52, 54, 57, 61, 62, 64, 70, 71, 72, 74, 79, 80, 84, 88, 89, 90, 91, 92, 93, 96, 97, 98, 99, 100, 102, 104, 105, 107], "x_train": [2, 87, 90, 91, 92, 100, 102, 103, 107], "labels_maybe_with_error": 2, "had": [2, 3, 74, 104], "issu": [2, 3, 4, 5, 6, 8, 11, 12, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 37, 38, 40, 41, 42, 43, 44, 52, 60, 63, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 88, 94, 101, 102, 106, 107], "pred": [2, 44, 57, 87, 88, 106, 107], "x_test": [2, 87, 90, 91, 92, 100, 103, 107], "might": [2, 5, 10, 52, 62, 74, 79, 87, 88, 91, 92, 93, 97, 99, 104], "case": [2, 3, 10, 14, 37, 49, 52, 62, 74, 87, 88, 89, 91, 92, 93, 95, 97, 98, 99, 100, 105, 107, 109], "standard": [2, 3, 5, 31, 37, 44, 61, 63, 64, 66, 72, 74, 84, 87, 91, 92, 95, 98, 100, 104], "adapt": [2, 38, 40, 57, 60, 74, 105], "skorch": [2, 74, 84, 99], "kera": [2, 60, 67, 70, 74, 84, 99, 104], "scikera": [2, 61, 74, 99], "open": [2, 41, 98, 104, 109], "doesn": [2, 10, 74, 84], "t": [2, 3, 4, 7, 10, 18, 28, 38, 39, 41, 42, 43, 44, 49, 55, 56, 66, 71, 72, 74, 80, 82, 83, 84, 91, 92, 93, 95, 96, 97, 98, 100, 103, 104, 107, 109], "alreadi": [2, 5, 10, 17, 38, 41, 42, 47, 52, 61, 62, 74, 84, 87, 88, 89, 90, 91, 92, 93, 95, 96, 98, 99, 100, 102, 104, 105, 107], "exist": [2, 5, 10, 13, 19, 38, 41, 42, 54, 56, 61, 67, 69, 71, 74, 84, 85, 87, 88, 91, 92, 96, 102, 109], "made": [2, 5, 17, 38, 42, 53, 74, 87, 88, 93, 96, 97, 99, 102, 104, 106, 107], "easi": [2, 12, 47, 74, 91, 92, 98, 99, 100, 103], "inherit": [2, 7, 39, 74], "baseestim": [2, 42, 74], "yourmodel": [2, 74], "def": [2, 7, 15, 38, 42, 61, 74, 88, 89, 90, 91, 92, 93, 97, 98, 99, 100, 102, 103, 105, 107, 109], "self": [2, 3, 5, 7, 10, 13, 14, 15, 17, 32, 38, 39, 41, 42, 44, 49, 71, 72, 74, 87, 88, 91, 93, 96, 97, 98, 103, 108, 109], "refer": [2, 10, 17, 38, 42, 43, 63, 64, 66, 67, 69, 70, 71, 74, 78, 79, 91, 92, 93, 95, 96, 97, 99, 100, 103, 106, 107], "origin": [2, 5, 10, 42, 43, 44, 56, 57, 61, 63, 64, 67, 70, 71, 74, 75, 78, 80, 82, 87, 88, 91, 93, 95, 96, 97, 99, 100, 104, 105, 107, 109], "total": [2, 3, 4, 37, 41, 57, 63, 83, 90, 93, 99, 108], "state": [2, 3, 5, 38, 39, 42, 48, 74, 100, 103, 104, 109], "art": [2, 39, 100, 103], "northcutt": [2, 3, 37, 71, 72], "et": [2, 3, 37, 39, 71, 72], "al": [2, 3, 37, 39, 71, 72], "2021": [2, 3, 37, 71, 72], "weak": [2, 70], "supervis": [2, 10, 91, 92, 99, 102], "find": [2, 5, 9, 10, 14, 15, 17, 20, 21, 23, 24, 26, 27, 28, 29, 32, 33, 37, 38, 40, 41, 42, 43, 44, 48, 54, 56, 57, 60, 67, 70, 71, 72, 74, 76, 80, 82, 85, 91, 101, 106], "uncertainti": [2, 10, 46, 71, 74, 99, 105, 107], "It": [2, 3, 5, 7, 10, 13, 14, 17, 23, 28, 31, 33, 34, 35, 38, 42, 44, 47, 49, 52, 53, 55, 62, 69, 70, 74, 84, 88, 91, 92, 93, 96, 99, 100, 103, 106], "work": [2, 3, 7, 10, 13, 31, 37, 38, 41, 42, 44, 47, 56, 57, 58, 61, 62, 72, 74, 84, 85, 88, 90, 91, 92, 97, 98, 105, 107], "includ": [2, 3, 5, 7, 10, 14, 19, 20, 21, 23, 24, 26, 27, 29, 31, 32, 34, 37, 38, 40, 41, 42, 52, 56, 57, 60, 62, 63, 66, 67, 71, 72, 74, 78, 79, 80, 82, 84, 85, 91, 92, 93, 95, 96, 97, 99, 100, 103, 104, 105, 109], "deep": [2, 40, 42, 60, 61, 74, 96], "see": [2, 3, 5, 7, 10, 14, 15, 34, 37, 38, 41, 42, 43, 44, 49, 54, 57, 61, 63, 64, 66, 67, 70, 71, 72, 74, 80, 82, 84, 85, 87, 88, 89, 90, 91, 92, 93, 95, 96, 98, 99, 102, 103, 104, 105, 107, 108, 109], "subfield": 2, "theori": [2, 100], "machin": [2, 4, 5, 9, 10, 15, 17, 34, 40, 55, 60, 74, 87, 88, 91, 92, 97, 98, 102], "across": [2, 3, 5, 7, 10, 14, 23, 37, 41, 49, 63, 70, 71, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 103, 104, 106, 107], "varieti": [2, 87, 88, 99], "like": [2, 3, 5, 6, 7, 10, 15, 33, 37, 38, 41, 42, 44, 47, 57, 61, 62, 63, 66, 67, 69, 72, 74, 75, 78, 79, 80, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 95, 96, 97, 99, 100, 102, 103, 104, 105, 107, 108, 109], "pu": [2, 57], "input": [2, 3, 5, 9, 17, 27, 37, 38, 41, 42, 47, 49, 52, 53, 56, 57, 58, 61, 70, 74, 84, 85, 88, 89, 90, 92, 93, 95, 96, 97, 98, 99, 100, 102, 103, 104, 107, 108, 109], "discret": [2, 35, 44, 47, 57, 71, 72, 76, 78, 79], "vector": [2, 3, 4, 5, 10, 17, 44, 47, 49, 50, 52, 57, 71, 72, 84, 88, 89, 91, 92, 93, 95, 96, 100, 103, 104, 105, 108, 109], "would": [2, 3, 5, 10, 38, 41, 42, 44, 53, 57, 64, 74, 84, 88, 90, 91, 93, 99, 100, 105, 107, 109], "obtain": [2, 5, 8, 10, 17, 44, 62, 64, 67, 70, 72, 75, 89, 92, 96, 99, 102, 104, 106, 108, 109], "been": [2, 4, 37, 44, 47, 52, 56, 57, 62, 63, 67, 69, 71, 72, 74, 89, 91, 95, 99, 100, 102, 103, 104, 105, 108, 109], "dure": [2, 10, 17, 52, 54, 71, 74, 87, 88, 89, 90, 95, 96, 97, 99, 100, 103, 106, 107, 109], "denot": [2, 3, 47, 49, 57, 64, 71, 72, 82], "tild": 2, "paper": [2, 4, 10, 62, 71, 80, 82, 98, 100, 102, 105, 107, 109], "cv_n_fold": [2, 3, 74, 88], "5": [2, 3, 4, 5, 8, 10, 19, 20, 21, 23, 24, 26, 27, 29, 31, 32, 34, 37, 42, 44, 46, 48, 49, 57, 62, 63, 66, 67, 70, 74, 75, 82, 88, 91, 96, 98, 99, 103, 104, 105, 106, 108, 109], "converge_latent_estim": [2, 3], "pulearn": [2, 57], "find_label_issues_kwarg": [2, 10, 74, 85, 99, 100], "label_quality_scores_kwarg": [2, 10], "low_memori": [2, 64, 80, 99], "clean": [2, 69, 72, 74, 75, 84, 87, 88, 90, 91, 92, 98, 107], "even": [2, 3, 7, 9, 10, 37, 41, 46, 47, 57, 74, 89, 97, 99, 100, 102, 103, 104], "messi": [2, 74, 100], "ridden": [2, 74], "autom": [2, 9, 10, 74, 84, 92, 98, 99], "robust": [2, 47, 52, 74, 92, 99], "prone": [2, 74], "out": [2, 3, 5, 10, 17, 29, 38, 42, 44, 49, 52, 61, 64, 65, 67, 70, 71, 72, 74, 75, 83, 84, 85, 88, 97, 98, 99, 100, 101, 103, 104, 105, 107, 108, 109], "current": [2, 3, 5, 7, 10, 11, 14, 15, 23, 38, 42, 43, 44, 49, 62, 69, 74, 90, 91, 92, 99, 102, 104], "intend": [2, 14, 15, 16, 17, 33, 34, 35, 45, 52, 62, 78, 82, 89, 91, 92, 96, 100], "A": [2, 3, 4, 5, 7, 10, 13, 14, 15, 19, 20, 21, 23, 24, 26, 27, 28, 29, 31, 32, 33, 34, 37, 38, 39, 42, 44, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 61, 62, 63, 66, 69, 70, 71, 72, 74, 76, 78, 79, 83, 85, 87, 88, 89, 91, 93, 95, 96, 97, 98, 99, 100, 102, 104, 106, 109], "follow": [2, 3, 10, 15, 31, 35, 37, 38, 41, 42, 49, 51, 55, 62, 63, 67, 69, 70, 71, 74, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109], "experiment": [2, 38, 39, 41, 42, 43, 64, 85, 90, 99], "wrapper": [2, 61, 87, 88, 89, 107], "around": [2, 69, 90, 91, 92, 104, 105, 109], "fasttext": [2, 60], "store": [2, 4, 5, 10, 13, 14, 19, 20, 21, 23, 24, 26, 27, 28, 29, 31, 32, 34, 38, 41, 42, 71, 74, 87, 88, 90, 95, 96, 97, 98, 99, 108, 109], "along": [2, 49, 64, 82, 90, 91, 92, 93, 97, 99, 105], "dimens": [2, 57, 76, 79, 93, 99, 105, 108], "select": [2, 9, 10, 27, 51, 62, 72, 93, 99, 102, 105], "split": [2, 3, 5, 10, 13, 41, 49, 56, 57, 74, 87, 89, 90, 91, 92, 93, 95, 96, 97, 98, 100, 103, 106, 109], "cross": [2, 3, 10, 37, 44, 47, 48, 49, 64, 67, 70, 72, 74, 75, 85, 87, 88, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 103, 104, 107, 108, 109], "fold": [2, 3, 37, 44, 47, 74, 87, 89, 95, 98, 99, 104, 108], "By": [2, 37, 63, 64, 74, 91, 97, 99, 108], "need": [2, 3, 10, 11, 37, 38, 41, 42, 44, 52, 54, 63, 64, 66, 71, 74, 84, 88, 89, 91, 92, 96, 97, 99, 100, 102, 103, 104, 108], "holdout": [2, 3, 74], "comput": [2, 3, 4, 5, 7, 8, 10, 20, 21, 23, 24, 27, 28, 29, 32, 37, 38, 39, 41, 42, 44, 46, 47, 48, 49, 52, 53, 54, 57, 62, 63, 64, 66, 69, 70, 71, 72, 74, 75, 76, 78, 84, 85, 88, 91, 92, 98, 100, 101, 104, 105, 107, 108], "them": [2, 3, 5, 7, 9, 10, 12, 13, 28, 33, 36, 38, 40, 41, 42, 44, 54, 60, 62, 71, 74, 85, 87, 88, 90, 91, 92, 93, 95, 96, 97, 99, 102, 103, 105, 107, 108, 109], "numer": [2, 3, 4, 5, 10, 14, 23, 31, 35, 49, 52, 53, 69, 71, 74, 79, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 100, 102, 103, 105, 107], "consist": [2, 3, 38, 42, 51, 57, 62, 97, 108, 109], "latent": [2, 3, 47], "thei": [2, 3, 5, 16, 22, 25, 27, 30, 38, 39, 40, 42, 44, 45, 52, 55, 57, 61, 64, 69, 72, 74, 75, 78, 82, 84, 88, 89, 90, 91, 92, 93, 95, 96, 99, 100, 102, 105, 107, 109], "relat": [2, 3, 10, 14, 20, 21, 27, 28, 29, 32, 47, 57, 63, 74, 92, 96, 97], "close": [2, 3, 10, 41, 47, 71, 89, 91, 92, 93, 95, 96, 97, 99, 100, 104], "form": [2, 3, 10, 38, 39, 42, 47, 56, 57, 72, 74, 99], "equival": [2, 3, 38, 42, 47, 71, 105, 107], "iter": [2, 3, 37, 38, 42, 44, 57, 63, 64, 74, 90, 99, 102, 108], "enforc": [2, 38, 42, 57], "perfectli": [2, 37, 63, 100], "certain": [2, 3, 5, 38, 42, 61, 70, 74, 90, 91, 92, 97, 98, 104, 105], "dict": [2, 3, 5, 10, 13, 14, 15, 17, 19, 20, 21, 23, 24, 26, 27, 28, 29, 31, 32, 37, 38, 41, 42, 44, 48, 49, 57, 61, 62, 63, 64, 66, 67, 69, 70, 71, 72, 74, 82, 90, 91, 92, 93, 99, 109], "keyword": [2, 3, 5, 10, 11, 17, 24, 28, 31, 38, 41, 42, 44, 46, 49, 52, 54, 56, 61, 62, 64, 70, 71, 72, 74, 79, 80, 82, 91], "filter": [2, 3, 10, 41, 43, 56, 63, 65, 66, 68, 70, 77, 78, 79, 81, 82, 83, 84, 85, 87, 88, 89, 92, 93, 96, 98, 99, 103, 104, 107, 108, 109], "find_label_issu": [2, 3, 10, 31, 40, 41, 43, 44, 63, 64, 65, 66, 67, 68, 69, 70, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 99, 103, 104, 107, 108, 109], "particularli": [2, 84, 102, 105], "filter_bi": [2, 3, 41, 44, 64, 85, 99], "frac_nois": [2, 44, 64, 80, 99], "min_examples_per_class": [2, 44, 64, 92, 99, 100], "impact": [2, 4, 10, 91, 92, 93, 97], "ml": [2, 4, 5, 9, 10, 16, 74, 84, 87, 88, 91, 92, 93, 95, 96, 97, 102, 103, 107], "accuraci": [2, 39, 72, 87, 88, 89, 93, 99, 100, 102, 105, 107, 108], "n_job": [2, 41, 44, 64, 76, 78, 80, 99, 105, 108], "disabl": [2, 38, 42, 44, 105], "process": [2, 3, 7, 14, 17, 33, 38, 41, 42, 44, 52, 56, 62, 64, 70, 76, 78, 80, 88, 89, 90, 91, 97, 99, 102, 106], "caus": [2, 44, 49, 91, 92, 97, 99], "rank": [2, 3, 10, 37, 41, 43, 44, 49, 63, 64, 65, 67, 68, 70, 71, 73, 77, 79, 80, 81, 83, 84, 85, 87, 88, 91, 92, 98, 99, 103, 104, 105, 108, 109], "get_label_quality_scor": [2, 40, 41, 43, 44, 45, 49, 62, 64, 65, 66, 67, 68, 69, 72, 73, 75, 77, 78, 80, 81, 82, 85, 99, 100, 103, 104, 108, 109], "adjust_pred_prob": [2, 10, 66, 71, 72, 100], "control": [2, 5, 9, 10, 17, 41, 44, 62, 70, 71, 74, 80, 82, 91, 92, 97, 98, 99], "how": [2, 3, 5, 10, 13, 14, 15, 17, 23, 37, 38, 39, 41, 42, 47, 57, 62, 63, 66, 67, 69, 71, 72, 74, 78, 82, 84, 87, 88, 90, 91, 92, 93, 95, 96, 97, 98, 104, 105, 106, 107, 108], "much": [2, 10, 37, 41, 44, 74, 90, 97, 98, 99, 100, 102, 105], "output": [2, 3, 5, 10, 17, 33, 38, 39, 42, 47, 57, 61, 62, 63, 67, 69, 70, 71, 74, 78, 79, 82, 83, 84, 85, 88, 89, 91, 93, 96, 98, 99, 104, 105, 106, 107], "print": [2, 5, 7, 19, 20, 21, 23, 24, 26, 27, 28, 29, 31, 32, 34, 35, 37, 38, 41, 42, 44, 57, 62, 63, 64, 69, 71, 72, 74, 76, 78, 79, 83, 85, 87, 88, 89, 90, 92, 93, 96, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109], "suppress": [2, 41, 62, 69, 71, 72, 74, 76, 78, 79, 108, 109], "statement": [2, 41, 62, 69, 71, 72, 74, 76, 78, 79], "big": [2, 41, 64, 70, 74, 100], "limit": [2, 5, 17, 41, 52, 64, 90, 97, 104, 108, 109], "memori": [2, 38, 41, 42, 64, 70, 76, 78, 90, 91, 108], "label_issues_batch": [2, 40, 64, 99], "find_label_issues_batch": [2, 40, 41, 64, 99], "pred_prob": [2, 3, 5, 8, 10, 11, 17, 24, 26, 27, 29, 32, 33, 37, 41, 43, 44, 46, 47, 48, 49, 50, 57, 58, 62, 63, 64, 66, 67, 70, 71, 72, 76, 78, 79, 80, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 102, 103, 104, 107], "threshold": [2, 3, 4, 7, 10, 19, 20, 21, 23, 29, 31, 32, 41, 55, 69, 70, 71, 72, 78, 82, 91, 97, 104, 105, 108, 109], "inverse_noise_matrix": [2, 3, 10, 47, 57, 85, 100], "label_issu": [2, 41, 44, 64, 67, 74, 76, 85, 87, 88, 89, 93, 96, 99, 100, 103, 107], "clf_kwarg": [2, 3, 10, 74], "clf_final_kwarg": [2, 74], "validation_func": [2, 3, 10], "correct": [2, 5, 9, 10, 37, 41, 44, 46, 52, 62, 63, 64, 66, 67, 69, 70, 72, 74, 75, 78, 82, 84, 89, 93, 95, 96, 100, 102, 104, 106, 107], "result": [2, 3, 9, 10, 14, 17, 19, 20, 21, 23, 24, 26, 27, 28, 29, 31, 32, 38, 41, 42, 44, 46, 55, 57, 64, 66, 67, 70, 72, 74, 75, 76, 78, 82, 87, 88, 89, 90, 91, 92, 93, 95, 96, 99, 100, 102, 103, 107, 108, 109], "identifi": [2, 3, 5, 7, 9, 10, 13, 17, 28, 34, 37, 41, 43, 44, 52, 64, 67, 70, 72, 74, 75, 76, 79, 80, 82, 83, 84, 87, 88, 89, 91, 92, 93, 95, 96, 98, 100, 103, 105, 107, 108, 109], "final": [2, 10, 74, 87, 95, 97, 104, 106, 107], "remain": [2, 74, 85, 87, 88, 93, 103, 107, 109], "datasetlik": [2, 57, 74], "beyond": [2, 5, 7, 9, 10, 12, 36, 84, 87, 88, 107, 108], "pd": [2, 3, 5, 7, 14, 19, 20, 21, 23, 24, 26, 27, 29, 31, 32, 37, 48, 61, 62, 63, 74, 82, 87, 88, 89, 91, 92, 95, 96, 97, 99, 100, 102, 107, 109], "datafram": [2, 3, 5, 7, 13, 14, 19, 20, 21, 23, 24, 26, 27, 28, 29, 31, 32, 37, 41, 48, 57, 58, 61, 62, 63, 74, 79, 83, 85, 88, 89, 90, 91, 92, 93, 95, 96, 97, 99, 100, 102, 107, 108, 109], "scipi": [2, 4, 5, 14, 53, 57, 71, 97], "spars": [2, 4, 5, 10, 14, 17, 19, 32, 52, 57, 58, 92, 93, 95, 96, 97, 100], "csr_matrix": [2, 4, 5, 14, 17, 19, 32, 52, 97], "torch": [2, 38, 39, 42, 88, 89, 93, 96, 98, 105], "util": [2, 5, 10, 17, 34, 38, 39, 42, 45, 52, 61, 62, 67, 70, 74, 84, 85, 89, 91, 92, 93, 99, 100, 105], "tensorflow": [2, 57, 61, 84, 89, 99], "object": [2, 5, 10, 13, 14, 17, 33, 34, 38, 39, 41, 42, 49, 52, 54, 57, 58, 61, 64, 67, 68, 69, 70, 71, 74, 82, 84, 88, 89, 92, 93, 95, 99, 100, 101, 103, 107], "list": [2, 3, 5, 10, 13, 15, 19, 20, 21, 23, 24, 26, 27, 28, 29, 31, 32, 37, 38, 39, 41, 42, 43, 44, 50, 52, 56, 57, 58, 61, 62, 63, 64, 66, 67, 69, 70, 71, 72, 74, 78, 79, 80, 82, 83, 85, 88, 89, 90, 91, 92, 93, 98, 99, 100, 103, 104, 107, 109], "index_list": 2, "subset": [2, 3, 5, 17, 37, 41, 44, 57, 72, 79, 83, 87, 88, 89, 93, 95, 96, 97, 99, 103, 104, 105, 106, 107, 109], "wa": [2, 3, 13, 15, 41, 55, 57, 62, 63, 69, 71, 83, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 99, 100, 103, 104, 106, 108, 109], "abl": [2, 3, 10, 74, 89, 99, 100, 102, 103], "format": [2, 3, 5, 10, 13, 33, 38, 41, 42, 44, 47, 48, 49, 50, 52, 57, 58, 61, 62, 63, 64, 67, 70, 71, 72, 74, 76, 78, 79, 82, 83, 87, 89, 91, 92, 93, 95, 97, 98, 102, 107, 108, 109], "make": [2, 3, 5, 19, 38, 41, 42, 49, 61, 84, 87, 88, 89, 90, 91, 92, 93, 95, 96, 98, 99, 100, 102, 103, 104, 105, 107], "sure": [2, 5, 41, 44, 49, 87, 88, 89, 90, 91, 92, 93, 95, 96, 98, 102, 103, 104, 105, 107], "shuffl": [2, 10, 57, 89, 93, 96, 97, 103, 105], "ha": [2, 3, 5, 6, 10, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 31, 32, 38, 42, 43, 47, 49, 52, 56, 57, 62, 67, 69, 74, 80, 82, 83, 84, 87, 88, 89, 90, 91, 92, 95, 96, 97, 100, 102, 103, 104, 105, 106, 107, 109], "batch": [2, 41, 57, 61, 62, 76, 78, 90, 93, 99, 105], "order": [2, 5, 10, 35, 37, 38, 42, 43, 44, 47, 48, 49, 55, 57, 62, 63, 64, 67, 70, 71, 72, 76, 79, 80, 82, 83, 85, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 103, 104, 107, 108, 109], "destroi": [2, 57], "oper": [2, 38, 41, 42, 52, 57, 61, 72, 84, 87, 88, 96, 99, 105], "eg": [2, 5, 10, 57, 67, 70, 91, 92, 99], "repeat": [2, 57, 62, 102, 105], "appli": [2, 35, 38, 40, 42, 44, 49, 50, 52, 56, 57, 66, 71, 80, 87, 88, 89, 90, 91, 92, 93, 95, 97, 99, 102, 103, 105, 106, 107, 108], "array_lik": [2, 3, 37, 44, 57, 64, 71, 75], "some": [2, 3, 5, 10, 15, 23, 37, 38, 40, 42, 44, 47, 52, 56, 57, 60, 62, 63, 64, 66, 67, 70, 71, 72, 74, 76, 85, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 102, 103, 104, 106, 107, 108, 109], "seri": [2, 3, 41, 57, 58, 74, 82, 99], "row": [2, 3, 5, 10, 14, 28, 33, 37, 41, 44, 46, 47, 52, 53, 57, 62, 63, 64, 66, 71, 72, 74, 79, 80, 82, 83, 87, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 102, 103, 105, 109], "rather": [2, 3, 5, 10, 27, 37, 57, 61, 62, 69, 78, 82, 88, 98, 102, 106, 107, 108, 109], "leav": [2, 44], "per": [2, 3, 5, 7, 10, 14, 37, 41, 44, 49, 56, 62, 63, 64, 66, 69, 70, 72, 75, 76, 78, 82, 92, 99, 104, 109], "determin": [2, 3, 10, 13, 17, 23, 27, 31, 37, 41, 44, 49, 52, 57, 62, 64, 67, 69, 72, 78, 82, 91, 97, 99, 102, 104, 105, 107], "cutoff": [2, 3, 53, 105], "consid": [2, 3, 4, 5, 10, 14, 17, 24, 27, 29, 32, 37, 38, 42, 44, 52, 54, 57, 62, 69, 71, 72, 75, 78, 82, 87, 88, 89, 93, 95, 96, 97, 99, 100, 104, 105, 106, 107, 108], "section": [2, 3, 7, 10, 85, 93, 95, 97, 99, 104], "3": [2, 3, 4, 5, 7, 10, 11, 35, 37, 38, 42, 44, 47, 48, 49, 50, 53, 55, 56, 57, 61, 64, 71, 72, 74, 75, 80, 82, 98, 99, 106], "equat": [2, 3, 47], "advanc": [2, 3, 5, 9, 10, 17, 69, 71, 82, 85, 92, 94, 97, 99, 100], "user": [2, 3, 5, 9, 10, 15, 17, 28, 33, 34, 35, 38, 42, 44, 52, 61, 69, 71, 72, 74, 78, 82, 90, 100], "specifi": [2, 3, 4, 5, 8, 10, 14, 15, 17, 19, 32, 34, 38, 41, 42, 44, 49, 52, 54, 56, 61, 62, 63, 64, 67, 69, 71, 72, 74, 75, 83, 85, 88, 89, 92, 93, 96, 102, 104, 107], "automat": [2, 3, 5, 27, 37, 84, 87, 88, 93, 95, 96, 97, 98, 99, 102, 103, 104, 107, 108, 109], "greater": [2, 3, 4, 5, 7, 9, 10, 29, 41, 53, 57, 69, 92, 98, 99, 109], "count": [2, 23, 27, 37, 41, 44, 47, 57, 63, 64, 70, 85, 93, 97, 99, 104], "observ": [2, 3, 47, 54, 89, 90, 91, 92, 102, 105, 107], "mislabel": [2, 10, 37, 41, 43, 44, 47, 62, 63, 64, 67, 69, 72, 78, 80, 82, 83, 84, 87, 88, 89, 93, 95, 96, 99, 100, 104, 107], "one": [2, 3, 5, 7, 10, 27, 37, 38, 41, 42, 43, 44, 49, 55, 57, 62, 63, 64, 66, 67, 69, 70, 71, 72, 74, 75, 76, 78, 79, 80, 82, 83, 84, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 102, 105, 106, 107, 109], "get_label_issu": [2, 40, 41, 73, 74, 87, 88, 100, 107], "either": [2, 3, 4, 7, 10, 38, 41, 42, 44, 53, 62, 64, 69, 71, 72, 76, 78, 90, 92, 97, 99, 103, 104], "boolean": [2, 7, 10, 23, 41, 44, 54, 56, 62, 64, 67, 72, 74, 76, 78, 79, 84, 88, 89, 92, 93, 96, 99, 104, 107, 108], "label_issues_mask": [2, 44, 72, 74, 85], "indic": [2, 3, 4, 5, 7, 10, 14, 23, 37, 41, 42, 43, 44, 46, 49, 52, 54, 57, 61, 62, 63, 64, 66, 67, 69, 70, 71, 72, 74, 75, 78, 80, 82, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109], "its": [2, 5, 7, 9, 10, 17, 38, 41, 42, 44, 52, 54, 55, 56, 64, 67, 70, 71, 72, 74, 76, 80, 82, 84, 88, 89, 91, 92, 93, 95, 96, 97, 98, 99, 100, 102, 104, 105, 106, 107, 108, 109], "return_indices_ranked_bi": [2, 41, 44, 64, 80, 85, 87, 88, 99, 100], "significantli": [2, 10, 93, 97, 100, 102, 106], "reduc": [2, 41, 44, 57, 89, 99], "time": [2, 10, 38, 41, 42, 57, 62, 83, 85, 87, 88, 90, 91, 93, 95, 98, 99, 100, 104, 105, 107, 108, 109], "take": [2, 5, 10, 37, 38, 42, 48, 49, 52, 54, 57, 61, 72, 87, 90, 93, 95, 102, 103, 104, 109], "run": [2, 5, 6, 7, 9, 10, 11, 12, 15, 17, 27, 28, 33, 36, 38, 41, 42, 54, 74, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 100, 102, 103, 104, 105, 107, 109], "skip": [2, 10, 38, 42, 74, 89, 97, 99, 103, 109], "slow": [2, 3], "step": [2, 7, 27, 49, 70, 90, 93, 97, 100, 102, 106], "caution": [2, 5, 99], "previous": [2, 5, 14, 57, 71, 74, 85, 87, 89, 91, 95, 96, 102, 106], "assign": [2, 7, 10, 19, 20, 21, 23, 24, 26, 27, 28, 29, 31, 32, 33, 38, 42, 48, 49, 57, 74, 87, 91, 93, 95, 97, 99, 107, 108, 109], "individu": [2, 4, 7, 10, 14, 27, 38, 42, 43, 62, 66, 69, 72, 74, 80, 82, 85, 87, 92, 95, 97, 98, 99, 102, 103, 104, 109], "still": [2, 41, 42, 57, 71, 87, 89, 93, 99, 105], "extra": [2, 38, 42, 57, 61, 62, 63, 74, 93, 96, 99, 102, 105], "receiv": [2, 10, 38, 42, 43, 63, 66, 67, 74, 76, 80, 92, 104], "overwritten": [2, 74], "callabl": [2, 3, 4, 10, 27, 38, 42, 49, 52, 53, 54, 56, 61, 66, 99], "x_val": 2, "y_val": 2, "map": [2, 3, 13, 41, 42, 45, 48, 56, 57, 70, 72, 74, 79, 89, 90, 91, 92, 93, 97, 99, 100, 103, 109], "appropri": [2, 10, 17, 35, 53, 64, 72, 91, 95, 103, 104], "earli": [2, 93], "stop": [2, 93], "x_valid": 2, "y_valid": 2, "could": [2, 7, 10, 23, 37, 57, 71, 87, 91, 93, 95, 103, 107, 109], "f": [2, 7, 87, 88, 89, 90, 91, 93, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 107], "ignor": [2, 38, 42, 56, 61, 74, 79, 83, 89, 90, 91, 92, 93, 98, 100, 102, 103, 105, 107, 109], "allow": [2, 37, 38, 41, 42, 46, 54, 57, 62, 70, 71, 74, 76, 78, 88, 89, 90, 93, 97, 99, 106, 108], "access": [2, 10, 14, 38, 42, 74, 88, 92, 93, 96, 98, 103], "hyperparamet": [2, 66, 71, 93], "purpos": [2, 52, 91, 92, 97, 99, 103, 107], "want": [2, 5, 10, 37, 41, 52, 58, 62, 64, 74, 88, 90, 91, 93, 96, 98, 102, 104, 105, 106, 108, 109], "explicitli": [2, 8, 10, 42, 52, 74, 99], "yourself": [2, 5, 41, 92, 97], "altern": [2, 7, 10, 49, 54, 57, 61, 62, 72, 85, 88, 89, 93, 95, 96, 98, 99, 100, 102, 103, 105, 107], "same": [2, 3, 5, 7, 9, 10, 13, 15, 17, 27, 31, 38, 41, 42, 44, 52, 57, 61, 62, 64, 71, 72, 74, 78, 79, 82, 83, 84, 87, 88, 90, 91, 92, 93, 95, 96, 97, 99, 103, 104, 105, 106, 107, 108], "effect": [2, 10, 28, 38, 42, 62, 71, 74, 93, 95, 96, 97, 99, 105], "offer": [2, 5, 9, 10, 88, 89, 91, 92, 96, 99, 100, 103], "after": [2, 3, 5, 14, 19, 20, 21, 23, 24, 26, 27, 28, 29, 31, 32, 38, 42, 57, 62, 74, 88, 91, 93, 96, 97, 99, 100, 102, 104, 105, 106, 107, 108], "attribut": [2, 5, 7, 10, 13, 14, 17, 19, 20, 21, 23, 24, 26, 27, 28, 29, 31, 32, 33, 34, 35, 38, 41, 42, 49, 54, 71, 74, 87, 91, 97], "label_issues_df": [2, 74, 93], "similar": [2, 10, 37, 38, 42, 54, 57, 62, 66, 67, 69, 71, 74, 78, 82, 90, 91, 92, 93, 95, 96, 97, 99, 100, 104, 105, 108], "document": [2, 3, 5, 15, 17, 37, 38, 41, 42, 43, 44, 49, 56, 61, 63, 64, 66, 69, 70, 71, 74, 78, 79, 80, 82, 85, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 107, 109], "descript": [2, 5, 7, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 37, 43, 57, 67, 74, 91, 92], "were": [2, 3, 5, 10, 37, 42, 52, 63, 69, 82, 87, 89, 95, 97, 99, 100, 102, 104, 106, 108], "present": [2, 3, 5, 10, 13, 14, 21, 37, 57, 71, 79, 84, 93, 97, 99, 105], "actual": [2, 3, 5, 10, 37, 52, 62, 63, 72, 92, 99, 100, 109], "num_class": [2, 37, 41, 57, 61, 87, 88, 89, 90, 91, 92, 93, 95, 96, 99, 100, 102, 103, 105], "uniqu": [2, 32, 57, 79, 91, 97, 99, 103, 105], "given_label": [2, 5, 11, 26, 31, 37, 47, 74, 79, 83, 88, 89, 90, 91, 92, 93, 95, 96, 97, 100, 107, 108, 109], "normal": [2, 3, 19, 27, 32, 44, 46, 49, 55, 56, 57, 72, 97, 99, 100, 105], "trick": [2, 99], "distribut": [2, 3, 5, 10, 27, 29, 37, 42, 44, 48, 55, 62, 70, 71, 72, 84, 90, 91, 92, 93, 95, 96, 97, 104, 105], "account": [2, 37, 62, 66, 71, 72, 88, 96, 99, 100, 102, 103, 105, 107], "word": [2, 3, 56, 82, 83, 99], "remov": [2, 10, 32, 37, 38, 42, 44, 74, 84, 87, 88, 92, 93, 95, 96, 97, 98, 99, 100, 103, 105, 107], "so": [2, 3, 5, 6, 7, 10, 15, 27, 35, 37, 38, 41, 42, 44, 52, 57, 62, 63, 69, 72, 74, 78, 82, 89, 91, 92, 93, 96, 97, 100, 103, 105, 108], "proportion": [2, 10, 44], "just": [2, 3, 5, 10, 14, 33, 37, 39, 41, 57, 61, 72, 74, 76, 84, 85, 87, 88, 89, 92, 93, 95, 96, 97, 99, 100, 103, 104, 105, 106, 107, 108], "procedur": 2, "get": [2, 3, 5, 8, 10, 11, 14, 32, 38, 39, 42, 44, 49, 55, 56, 57, 62, 64, 66, 71, 72, 74, 75, 76, 84, 87, 88, 89, 93, 96, 97, 98, 99, 100, 105, 106, 107], "detect": [2, 5, 7, 9, 14, 15, 17, 19, 23, 29, 43, 52, 55, 65, 67, 68, 69, 70, 71, 72, 73, 74, 77, 81, 84, 87, 88, 90, 91, 94, 98, 101, 103, 107, 108, 109], "arg": [2, 13, 23, 28, 32, 38, 39, 42, 49, 57, 72, 74], "kwarg": [2, 7, 10, 15, 17, 19, 20, 21, 23, 24, 26, 27, 28, 29, 31, 32, 34, 38, 41, 42, 43, 49, 52, 61, 70, 74, 76, 78, 79, 80, 99], "test": [2, 5, 10, 27, 42, 49, 52, 61, 74, 84, 87, 88, 90, 91, 92, 93, 95, 96, 106, 107, 109], "expect": [2, 3, 10, 38, 42, 44, 49, 52, 62, 71, 72, 74, 87, 88, 99, 100, 102, 103, 104, 107, 109], "class_predict": 2, "evalu": [2, 10, 38, 39, 40, 41, 42, 70, 74, 87, 88, 89, 91, 92, 93, 99, 100, 102, 106, 107, 108], "simpli": [2, 10, 37, 72, 88, 91, 92, 95, 96, 99, 100, 103, 107, 108, 109], "quantifi": [2, 4, 5, 7, 10, 14, 44, 66, 71, 74, 84, 92, 93, 95, 96, 97, 100, 104], "save_spac": [2, 10, 73, 74], "potenti": [2, 10, 37, 44, 56, 64, 67, 70, 72, 74, 76, 78, 83, 85, 87, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 103, 104, 108, 109], "cach": [2, 88, 96], "panda": [2, 5, 7, 13, 19, 20, 21, 23, 24, 26, 27, 29, 31, 32, 37, 57, 58, 61, 62, 63, 85, 87, 88, 89, 91, 92, 95, 96, 97, 98, 99, 100, 102, 107, 108], "unlik": [2, 10, 44, 46, 49, 61, 63, 64, 66, 82, 91, 102, 103, 105, 107], "both": [2, 5, 10, 17, 27, 37, 38, 42, 44, 52, 57, 62, 64, 72, 76, 78, 83, 84, 91, 93, 97, 99, 100, 102, 109], "mask": [2, 41, 44, 56, 57, 64, 67, 72, 74, 76, 78, 79, 84, 90, 98, 99, 102, 104, 108, 109], "prefer": [2, 72, 80, 97, 103], "plan": 2, "subsequ": [2, 3, 38, 42, 54, 88, 96, 99, 100, 104], "invok": [2, 38, 42, 100, 106], "scratch": [2, 52, 74], "To": [2, 5, 7, 9, 10, 12, 14, 17, 27, 36, 38, 41, 42, 43, 44, 61, 62, 64, 66, 70, 71, 72, 74, 75, 76, 78, 84, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 99, 102, 103, 104, 105, 106, 107, 108, 109], "share": [2, 10, 72, 74], "mostli": [2, 57, 69, 74, 103, 107], "longer": [2, 35, 48, 49, 56, 74, 85, 88, 96, 99, 104], "info": [2, 5, 7, 14, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 37, 63, 74, 82, 91, 92, 98, 109], "about": [2, 3, 5, 7, 10, 14, 19, 20, 21, 23, 24, 26, 27, 28, 29, 31, 32, 34, 37, 39, 41, 46, 62, 63, 66, 70, 74, 79, 82, 89, 91, 93, 95, 96, 97, 98, 99, 100, 102, 105], "docstr": [2, 37, 38, 42, 57, 74, 98, 100], "unless": [2, 38, 42, 52, 74, 99], "our": [2, 3, 10, 61, 62, 72, 74, 84, 87, 88, 89, 91, 92, 93, 95, 96, 97, 99, 100, 102, 103, 104, 105, 106, 107, 108, 109], "is_label_issu": [2, 11, 31, 74, 88, 89, 90, 91, 92, 93, 95, 96, 97, 100, 103, 107], "entir": [2, 10, 27, 41, 44, 47, 63, 64, 69, 72, 74, 76, 78, 79, 84, 90, 91, 92, 97, 99, 104, 105, 106, 108, 109], "accur": [2, 3, 5, 9, 10, 17, 37, 41, 44, 53, 62, 63, 64, 67, 70, 72, 74, 75, 76, 78, 79, 85, 92, 93, 95, 96, 97, 99, 102, 107], "label_qu": [2, 62, 74, 88, 100, 102, 107], "measur": [2, 5, 37, 62, 63, 74, 84, 87, 98, 99, 100, 102, 103, 107, 108, 109], "qualiti": [2, 3, 5, 7, 9, 10, 14, 31, 32, 37, 41, 43, 44, 46, 49, 62, 63, 64, 66, 67, 69, 72, 74, 75, 78, 80, 82, 84, 85, 87, 88, 89, 90, 91, 92, 93, 95, 96, 98, 99, 101, 107], "lower": [2, 4, 5, 7, 10, 14, 29, 41, 49, 55, 62, 63, 66, 69, 70, 72, 74, 75, 78, 82, 88, 89, 92, 93, 95, 96, 97, 99, 102, 103, 104, 105, 107, 108, 109], "eas": 2, "comparison": [2, 38, 42, 70, 100, 102], "against": [2, 38, 42, 91, 95, 97, 99, 102, 103], "predicted_label": [2, 5, 11, 26, 31, 74, 79, 83, 88, 89, 90, 91, 92, 93, 95, 96, 97, 100, 107, 108], "ad": [2, 38, 42, 90, 92, 102, 107], "precis": [2, 53, 55, 64, 67, 70, 97, 98, 99, 100, 108, 109], "definit": [2, 7, 35, 49, 74, 87, 95], "accessor": [2, 74], "describ": [2, 10, 19, 62, 71, 72, 74, 80, 82, 100, 102, 103, 104, 106, 109], "precomput": [2, 4, 5, 47, 52, 74, 92, 93, 95, 96, 97, 98, 100], "clear": [2, 38, 42, 54, 74, 88, 96, 107], "save": [2, 5, 17, 38, 41, 42, 70, 74, 99, 104, 108, 109], "space": [2, 5, 10, 71, 74, 93, 95, 97, 98], "place": [2, 38, 42, 52, 57, 74, 87, 102], "larg": [2, 9, 10, 41, 52, 74, 93, 95, 96, 99, 104, 105, 108, 109], "deploi": [2, 9, 10, 74, 93, 95, 96, 99], "care": [2, 10, 38, 42, 52, 74, 96, 97, 99, 100], "avail": [2, 4, 5, 7, 10, 13, 15, 34, 42, 54, 74, 90, 99, 100, 102, 104, 107], "cannot": [2, 5, 13, 15, 57, 106, 109], "anymor": 2, "classmethod": [2, 19, 20, 21, 23, 24, 26, 27, 28, 29, 31, 32, 35, 42, 49, 74], "__init_subclass__": [2, 40, 42, 73, 74], "set_": [2, 42, 74], "_request": [2, 42, 74], "pep": [2, 42, 74], "487": [2, 42, 74], "look": [2, 5, 7, 10, 17, 38, 42, 57, 74, 79, 87, 91, 92, 95, 96, 99, 100, 102, 103, 104, 105, 108, 109], "inform": [2, 5, 7, 10, 14, 17, 34, 38, 42, 54, 57, 62, 63, 67, 70, 74, 79, 82, 83, 84, 89, 90, 91, 95, 96, 97, 98, 100, 102, 105, 108, 109], "__metadata_request__": [2, 42, 74], "infer": [2, 42, 57, 74, 79, 83, 87, 88, 93, 102, 103], "signatur": [2, 38, 42, 74], "accept": [2, 38, 42, 54, 55, 72, 74, 91, 92, 99], "metadata": [2, 10, 42, 74, 93, 95, 96, 109], "through": [2, 5, 7, 42, 74, 88, 89, 90, 92, 96, 97, 98, 99, 102, 104, 105], "develop": [2, 9, 42, 54, 74, 99, 100, 109], "request": [2, 42, 74, 87, 88, 92, 96, 97, 98, 103, 109], "those": [2, 3, 4, 10, 41, 42, 44, 51, 61, 62, 64, 70, 74, 78, 82, 83, 84, 89, 93, 97, 99, 104, 108], "http": [2, 4, 5, 7, 9, 10, 12, 19, 36, 38, 39, 41, 42, 46, 54, 57, 67, 70, 71, 74, 84, 87, 88, 89, 90, 91, 92, 93, 95, 96, 98, 100, 102, 103, 104, 105, 107, 108, 109], "www": [2, 42, 74, 105], "org": [2, 4, 19, 38, 39, 42, 54, 57, 71, 74, 99, 100, 109], "dev": [2, 42, 74], "0487": [2, 42, 74], "get_metadata_rout": [2, 40, 42, 73, 74], "rout": [2, 42, 74], "pleas": [2, 38, 42, 61, 74, 84, 88, 89, 90, 91, 92, 93, 96, 97, 98, 99, 100, 102, 103, 105, 107, 109], "guid": [2, 7, 10, 42, 74, 85, 89, 90, 91, 92, 93, 94, 95, 96, 100], "mechan": [2, 38, 42, 74], "metadatarequest": [2, 42, 74], "encapsul": [2, 17, 42, 69, 74], "get_param": [2, 40, 42, 60, 61, 73, 74], "subobject": [2, 42, 74], "param": [2, 10, 38, 42, 61, 71, 74, 99], "name": [2, 5, 6, 7, 10, 11, 13, 14, 33, 35, 37, 38, 42, 48, 49, 53, 57, 61, 62, 63, 70, 74, 79, 83, 88, 89, 90, 91, 92, 93, 95, 96, 98, 99, 100, 103, 107, 108, 109], "set_fit_request": [2, 40, 42, 73, 74], "str": [2, 3, 4, 5, 13, 14, 15, 17, 19, 20, 21, 23, 24, 26, 27, 28, 29, 31, 32, 34, 35, 37, 38, 41, 42, 44, 47, 49, 52, 53, 54, 55, 56, 57, 61, 62, 63, 67, 69, 70, 72, 74, 79, 83, 89, 90, 91, 99, 102, 103, 104, 109], "unchang": [2, 38, 42, 74, 109], "relev": [2, 17, 27, 42, 74, 93, 95, 97], "enable_metadata_rout": [2, 42, 74], "set_config": [2, 42, 74], "meta": [2, 42, 74], "rais": [2, 4, 5, 13, 14, 35, 38, 42, 46, 49, 52, 55, 74, 89, 99], "alia": [2, 38, 42, 74], "metadata_rout": [2, 42, 74], "retain": [2, 42, 57, 74], "chang": [2, 33, 35, 38, 41, 42, 46, 74, 82, 87, 88, 89, 91, 96, 99, 104, 105, 109], "version": [2, 4, 5, 7, 9, 10, 12, 16, 22, 25, 30, 36, 38, 40, 42, 45, 46, 57, 60, 61, 72, 74, 84, 87, 88, 89, 90, 91, 92, 93, 95, 96, 98, 99, 100, 102, 103, 104, 105, 107, 109], "sub": [2, 42, 69, 74], "pipelin": [2, 42, 74, 107], "otherwis": [2, 4, 7, 10, 35, 37, 38, 41, 42, 44, 50, 53, 55, 56, 57, 64, 74, 76, 78, 79, 83, 88, 96, 99], "updat": [2, 14, 38, 41, 42, 52, 61, 74, 85, 90, 91, 93], "set_param": [2, 40, 42, 60, 61, 73, 74], "simpl": [2, 38, 42, 44, 62, 72, 74, 87, 88, 90, 91, 92, 93, 95, 96, 102, 105, 107], "well": [2, 3, 9, 10, 38, 42, 46, 47, 62, 64, 70, 72, 74, 79, 82, 83, 85, 91, 92, 93, 95, 96, 99, 100, 102, 104, 105], "nest": [2, 38, 42, 43, 58, 74, 80, 82, 83, 109], "latter": [2, 38, 42, 74, 105], "compon": [2, 42, 74], "__": [2, 42, 74], "set_score_request": [2, 73, 74], "structur": [3, 71, 90, 95, 97, 99], "unobserv": 3, "less": [3, 4, 5, 10, 32, 41, 49, 62, 71, 72, 76, 78, 82, 92, 93, 95, 97, 98, 99, 100, 104, 109], "channel": [3, 89, 100], "character": 3, "flip": 3, "nm": 3, "invers": [3, 10, 37, 47, 57, 63, 88, 92, 98], "inv": 3, "confident_joint": [3, 23, 37, 44, 57, 63, 64, 85, 99, 100], "un": 3, "under": [3, 10, 38, 42, 63, 70, 71, 92, 97, 105], "joint": [3, 37, 44, 47, 57, 63, 64, 98], "num_label_issu": [3, 41, 44, 64, 79, 83, 85], "estimation_method": [3, 41], "off_diagon": 3, "multi_label": [3, 37, 44, 57, 58, 64, 103], "don": [3, 84, 92, 93, 95, 96, 100, 104, 107], "statis": 3, "compute_confident_joint": [3, 37, 44, 57, 64, 100], "off": [3, 44, 57, 69, 93, 100, 104, 105], "j": [3, 5, 37, 38, 42, 43, 44, 64, 67, 70, 71, 80, 82, 83, 90, 91, 92, 100, 108, 109], "confident_learn": [3, 44, 64, 100], "off_diagonal_calibr": 3, "calibr": [3, 4, 44, 57, 62, 102], "cj": [3, 47, 57], "axi": [3, 32, 47, 49, 55, 76, 79, 89, 90, 91, 92, 93, 97, 99, 100, 102, 103, 105, 107, 108], "bincount": [3, 90, 91, 92, 100, 102, 103], "alwai": [3, 10, 38, 42, 57, 87, 88, 89, 100, 107], "estimate_issu": 3, "over": [3, 5, 10, 38, 41, 42, 69, 70, 76, 78, 87, 92, 93, 95, 97, 98, 99, 100, 105, 107], "As": [3, 7, 84, 91, 92, 96, 100, 107, 109], "add": [3, 5, 7, 13, 14, 38, 42, 61, 70, 88, 89, 90, 91, 92, 93, 96, 97, 99, 100, 103], "approach": [3, 37, 41, 44, 61, 87, 90, 95, 97, 100, 103, 105, 107], "custom": [3, 7, 10, 12, 31, 38, 41, 42, 49, 56, 72, 88, 92, 93, 96, 97, 100, 107], "know": [3, 10, 91, 92, 93, 95, 96, 99, 100, 102, 107], "cut": [3, 69, 84, 100], "off_diagonal_custom": 3, "tl": 3, "dr": 3, "sometim": [3, 33, 104, 105, 109], "underestim": 3, "few": [3, 9, 10, 70, 84, 92, 97, 99, 102, 103, 104, 105, 109], "4": [3, 4, 5, 10, 11, 19, 20, 21, 23, 24, 26, 27, 29, 31, 32, 48, 49, 56, 66, 67, 69, 70, 72, 75, 82, 98, 99, 103, 108, 109], "detail": [3, 4, 5, 10, 15, 17, 34, 37, 38, 42, 43, 49, 54, 57, 61, 62, 63, 64, 66, 67, 69, 70, 71, 78, 79, 80, 84, 85, 89, 99, 103, 105, 109], "num_issu": [3, 7, 41, 89, 90, 91, 92, 93, 95, 96, 97, 100], "calibrate_confident_joint": 3, "up": [3, 7, 10, 18, 27, 28, 31, 44, 49, 51, 61, 62, 88, 90, 98, 99, 104, 107, 109], "p_": [3, 37, 44], "pair": [3, 5, 10, 37, 44, 100], "v": [3, 10, 41, 63, 64, 66, 72, 90, 91, 92, 103, 104, 105, 106], "rest": [3, 5, 7, 9, 10, 12, 36, 63, 64, 66, 74, 87, 88, 90, 91, 92, 93, 95, 96, 99, 100, 102, 107], "fashion": [3, 5, 76, 87], "2x2": 3, "incorrectli": [3, 37, 63, 64, 67, 95, 109], "calibrated_cj": 3, "c": [3, 10, 55, 56, 64, 72, 84, 87, 89, 91, 92, 95, 96, 97, 99, 100, 103, 104, 105, 106, 107], "whose": [3, 4, 5, 10, 29, 38, 42, 47, 52, 56, 62, 66, 69, 75, 78, 82, 83, 89, 90, 91, 92, 93, 95, 96, 99, 100, 103, 104, 105, 108, 109], "truli": [3, 105, 108], "estimate_joint": [3, 37, 100], "joint_estim": 3, "confident_joint_distribut": 3, "recal": [3, 64, 70, 100, 104, 106, 108, 109], "return_indices_of_off_diagon": 3, "frequenc": [3, 27, 62, 63, 70, 79, 104, 105], "done": [3, 10, 61, 74, 91, 99, 100, 103, 105, 106], "overfit": [3, 10, 67, 70, 87, 89, 90, 91, 92, 93, 95, 96, 106], "classifict": 3, "singl": [3, 5, 9, 10, 13, 27, 37, 38, 42, 43, 49, 50, 57, 62, 63, 69, 70, 71, 72, 82, 87, 89, 90, 91, 97, 99, 100, 103, 104], "baselin": [3, 38, 44, 88, 105, 107], "proxi": 3, "union": [3, 5, 13, 27, 49, 52, 53, 54, 57, 58, 64, 70, 74, 82, 99], "tupl": [3, 32, 38, 42, 43, 47, 48, 50, 52, 56, 57, 62, 64, 70, 78, 80, 82, 83, 89, 109], "confident_joint_count": 3, "indices_off_diagon": 3, "simplif": 3, "effici": [3, 4, 5, 10, 41, 47, 52, 53, 62, 71, 76, 78, 84, 88, 90, 93, 97, 99, 108], "practic": [3, 87, 88, 92, 93, 100, 105, 107], "complet": [3, 89, 90, 91, 92, 93, 95, 96, 97, 99, 100, 103, 104, 107], "gist": 3, "cj_ish": 3, "guess": [3, 47, 100, 102], "8": [3, 5, 7, 8, 48, 49, 50, 56, 66, 80, 82, 87, 88, 89, 91, 92, 93, 95, 96, 97, 99, 102, 103, 104, 105, 107, 108, 109], "parallel": [3, 44, 70, 80, 98], "again": [3, 61, 87, 99, 105], "simplifi": [3, 15, 99], "understand": [3, 9, 10, 37, 63, 70, 92, 97, 100, 101, 107, 108, 109], "100": [3, 4, 38, 42, 52, 53, 55, 71, 72, 87, 88, 91, 92, 93, 95, 97, 98, 99, 100, 103, 104, 105, 109], "optim": [3, 38, 39, 42, 61, 93, 97, 102], "speed": [3, 44, 88, 98, 99, 107], "dtype": [3, 24, 26, 27, 32, 38, 42, 56, 57, 66, 82, 89, 97, 104], "enumer": [3, 38, 42, 89, 90, 91, 92, 93, 97, 109], "s_label": 3, "confident_bin": 3, "6": [3, 5, 10, 42, 49, 57, 82, 87, 88, 89, 91, 92, 93, 95, 96, 98, 99, 102, 103, 104, 105, 107, 108, 109], "num_confident_bin": 3, "argmax": [3, 44, 72, 76, 79, 89, 97, 99, 100, 104, 105, 108], "elif": 3, "estimate_lat": 3, "py_method": [3, 47], "cnt": [3, 47], "1d": [3, 5, 13, 17, 33, 41, 44, 49, 50, 52, 57, 58, 66, 75, 87, 89, 97], "eqn": [3, 47], "margin": [3, 44, 47, 49, 72], "marginal_p": [3, 47], "shorthand": [3, 14], "proport": [3, 10, 37, 63, 100, 106], "poorli": [3, 47, 87, 97], "inv_noise_matrix": 3, "estimate_py_and_noise_matrices_from_prob": [3, 100], "variabl": [3, 7, 15, 28, 57, 74, 75, 89, 91, 95, 100, 103, 107], "exact": [3, 10, 47, 52, 87, 90, 91, 92, 93, 95, 97], "within": [3, 4, 5, 10, 16, 33, 38, 39, 42, 43, 45, 64, 69, 78, 80, 82, 91, 92, 93, 99, 104, 108], "percent": 3, "often": [3, 37, 47, 63, 99, 100, 106, 108], "estimate_confident_joint_and_cv_pred_proba": 3, "mani": [3, 9, 10, 57, 58, 70, 87, 88, 89, 90, 91, 93, 95, 96, 99, 103, 104, 105, 107], "wai": [3, 5, 10, 52, 61, 84, 85, 87, 88, 89, 90, 91, 92, 95, 96, 99, 100, 102, 103, 104, 106], "pro": 3, "con": 3, "pred_proba": [3, 106], "combin": [3, 37, 91, 93, 97, 98, 99, 100, 106, 107], "becaus": [3, 47, 53, 57, 69, 96, 97, 99, 100, 102, 104], "littl": [3, 41, 98, 104, 109], "uniform": [3, 72, 98, 99, 100], "20": [3, 7, 43, 83, 89, 90, 93, 96, 97, 98, 99, 100, 104, 107, 108, 109], "Such": [3, 93, 105], "bound": [3, 24, 26, 38, 42, 56, 66, 67, 69, 70, 104], "reason": [3, 23, 38, 42, 53, 71], "comment": [3, 56, 97, 109], "end": [3, 5, 38, 42, 54, 70], "file": [3, 5, 13, 40, 41, 60, 70, 87, 89, 91, 95, 96, 98, 99, 104, 105, 108, 109], "estimate_py_noise_matrices_and_cv_pred_proba": [3, 100], "handl": [3, 5, 7, 10, 17, 19, 20, 21, 23, 24, 26, 27, 28, 29, 31, 32, 34, 38, 41, 42, 52, 53, 54, 85, 87, 88, 90, 91, 92, 93, 95, 96, 97, 100, 108, 109], "five": [3, 67, 70, 100, 104], "estimate_cv_predicted_prob": [3, 100], "estimate_noise_matric": 3, "get_confident_threshold": [3, 40, 41], "amongst": [3, 10, 104], "confident_threshold": [3, 10, 23, 24, 41, 71], "point": [4, 5, 7, 9, 10, 19, 27, 38, 42, 52, 54, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 102], "valuat": [4, 9, 19], "help": [4, 37, 38, 42, 70, 84, 85, 87, 88, 89, 91, 93, 95, 96, 97, 98, 99, 102, 103, 107, 108, 109], "u": [4, 87, 88, 89, 91, 93, 95, 97, 99, 100, 102, 103, 106, 107, 108, 109], "assess": [4, 10, 97, 104], "contribut": [4, 10, 19, 97, 104], "data_shapley_knn": 4, "knn_graph": [4, 5, 10, 11, 17, 19, 20, 27, 29, 32, 45, 51, 95, 97], "metric": [4, 5, 10, 19, 20, 27, 32, 45, 51, 52, 54, 55, 57, 61, 70, 71, 87, 88, 89, 93, 95, 96, 97, 100, 107], "10": [4, 10, 19, 20, 24, 27, 32, 38, 39, 52, 70, 71, 72, 83, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 108, 109], "shaplei": [4, 10, 19], "nearest": [4, 5, 10, 17, 24, 27, 29, 51, 52, 53, 54, 55, 71, 92, 96, 97, 105], "neighbor": [4, 5, 10, 17, 19, 24, 27, 29, 45, 52, 53, 54, 55, 71, 91, 92, 93, 95, 96, 97, 99, 100, 105], "knn": [4, 10, 14, 19, 27, 32, 51, 52, 53, 54, 55, 71, 95, 105], "graph": [4, 5, 10, 14, 17, 19, 27, 32, 51, 52], "calcul": [4, 10, 19, 27, 41, 49, 51, 52, 55, 62, 66, 67, 69, 70, 71, 74, 78, 93, 98], "directli": [4, 5, 10, 15, 17, 34, 35, 41, 54, 61, 62, 88, 92, 96, 97, 99, 103, 104, 107], "lowest": [4, 10, 62, 70, 92, 93, 95, 97, 99, 102, 103, 104, 108], "fall": [4, 10, 69, 78, 82, 100, 105], "flag": [4, 10, 23, 27, 44, 49, 63, 64, 67, 74, 84, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 100, 104, 105, 107, 108], "approxim": [4, 10, 19, 41, 54, 71, 97, 102], "top": [4, 5, 10, 37, 41, 43, 44, 57, 64, 67, 70, 72, 79, 83, 84, 88, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 104, 105, 107, 109], "found": [4, 5, 7, 10, 14, 15, 19, 20, 21, 23, 24, 26, 27, 28, 29, 31, 32, 38, 42, 57, 84, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 99, 103, 105, 107, 109], "arxiv": [4, 19, 100], "ab": [4, 19, 100, 104], "1908": 4, "08619": 4, "1911": [4, 19], "07128": [4, 19], "embed": [4, 5, 10, 17, 71, 84, 88, 89, 91, 92, 95, 96, 97, 100, 103, 107], "represent": [4, 5, 10, 17, 35, 38, 42, 50, 52, 64, 84, 88, 89, 91, 92, 93, 96, 99, 100, 105], "suppli": [4, 103, 104, 107], "2d": [4, 5, 17, 33, 41, 49, 50, 52, 56, 57, 62, 87, 89, 97, 103], "num_exampl": [4, 5, 17, 19, 20, 21, 23, 24, 26, 27, 29, 31, 32, 34, 37, 63, 89, 90, 91, 92, 93, 95, 96, 100], "num_featur": [4, 5, 17, 38, 42, 61], "distanc": [4, 5, 10, 17, 19, 27, 29, 32, 51, 52, 53, 54, 55, 69, 71, 95, 97, 105], "construct": [4, 5, 7, 10, 15, 19, 20, 21, 23, 24, 26, 27, 28, 29, 31, 32, 34, 38, 42, 49, 51, 52, 54, 61, 97], "nearestneighbor": [4, 5, 10, 19, 52, 54, 71, 95, 105], "cosin": [4, 10, 52, 53, 55, 71, 97, 105], "dim": [4, 71, 93, 108], "euclidean": [4, 5, 10, 52, 53, 55, 69, 71, 95], "dimension": [4, 27, 53, 57, 89, 100, 105], "scikit": [4, 42, 53, 54, 57, 71, 84, 87, 88, 89, 90, 91, 92, 95, 96, 97, 99, 107], "fewer": [4, 10, 44, 57, 71, 97, 104], "stabl": [4, 16, 22, 25, 30, 40, 45, 54, 57, 60, 71, 85, 89, 90, 91, 92, 93, 95, 96, 100], "exce": [4, 52, 90, 93, 97], "transform": [4, 10, 33, 49, 52, 55, 57, 71, 72, 87, 88, 92, 93, 96, 97, 105, 109], "rel": [4, 10, 37, 52, 62, 63, 71, 91, 92, 93, 95, 96, 100, 105], "adjust": [4, 39, 44, 52, 66, 71, 72, 84, 97, 100], "closer": [4, 10, 69, 104], "highli": [4, 92, 93], "influenti": 4, "posit": [4, 5, 10, 38, 42, 55, 57, 70, 97, 98, 105], "convers": 4, "neg": [4, 10, 69, 70, 91, 92, 97, 98], "valueerror": [4, 5, 13, 14, 35, 46, 49, 52, 55, 99], "neither": [4, 5, 10, 15, 53, 104], "nor": [4, 5, 10, 15], "larger": [4, 19, 53, 74, 76, 78, 90, 93, 96, 98, 99], "55": [4, 56, 97, 98, 104, 107, 109], "525": 4, "unifi": 5, "audit": [5, 9, 13, 14, 17, 89, 93, 94, 95, 96, 97, 99, 100, 103, 104, 107], "kind": [5, 6, 7, 10, 97, 98], "addit": [5, 7, 9, 12, 14, 34, 36, 38, 42, 49, 52, 54, 58, 62, 70, 79, 80, 87, 88, 89, 91, 95, 96, 97, 100, 102, 105, 106], "depend": [5, 7, 9, 12, 13, 14, 36, 40, 44, 46, 57, 60, 64, 71, 74, 75, 84, 97], "instal": [5, 7, 9, 12, 36, 38, 40, 41, 42, 44, 60, 61, 76, 78], "pip": [5, 7, 9, 12, 36, 61, 84, 87, 88, 89, 90, 91, 92, 93, 95, 96, 98, 100, 102, 103, 104, 105, 107, 108, 109], "development": [5, 7, 9, 12, 36], "git": [5, 7, 9, 12, 36, 84, 87, 88, 89, 90, 91, 92, 93, 95, 96, 98, 100, 102, 103, 104, 105, 107], "github": [5, 7, 9, 12, 36, 38, 39, 57, 84, 87, 88, 89, 90, 91, 92, 93, 95, 96, 98, 99, 100, 102, 103, 104, 105, 107], "com": [5, 7, 9, 12, 36, 38, 39, 41, 46, 57, 71, 84, 87, 88, 89, 90, 91, 92, 93, 95, 96, 98, 100, 102, 103, 104, 105, 107, 108, 109], "egg": [5, 7, 9, 12, 36, 84, 98], "label_nam": [5, 7, 8, 10, 11, 13, 19, 32, 84, 89, 90, 91, 92, 93, 95, 96, 97, 99, 100, 103, 104, 107], "image_kei": [5, 10, 93], "interfac": [5, 9, 10, 54, 84, 99, 100], "librari": [5, 10, 42, 54, 67, 70, 71, 84, 88, 91, 96, 97, 98, 99], "goal": [5, 107], "track": [5, 7, 14, 15, 84, 90, 91, 98, 99, 100], "intermedi": [5, 9, 92], "statist": [5, 10, 14, 23, 27, 37, 62, 63, 70, 92, 95, 96, 97, 100], "convert": [5, 10, 13, 35, 38, 42, 50, 55, 58, 62, 69, 78, 82, 85, 88, 89, 93, 96, 97, 98, 99, 102, 103, 104], "hug": [5, 10, 13, 93], "face": [5, 10, 13, 17, 93, 98, 103], "kei": [5, 7, 10, 13, 17, 19, 20, 21, 23, 24, 26, 27, 28, 29, 31, 32, 37, 38, 42, 49, 62, 63, 69, 71, 90, 91, 92, 93, 96, 99, 100, 102, 104], "string": [5, 10, 13, 15, 19, 20, 21, 23, 24, 26, 27, 28, 29, 31, 32, 34, 35, 37, 38, 42, 53, 57, 62, 63, 75, 79, 82, 83, 88, 95, 96, 97, 99, 102, 103, 109], "dictionari": [5, 7, 10, 13, 14, 17, 19, 20, 21, 23, 24, 26, 27, 28, 29, 31, 32, 37, 38, 42, 48, 57, 62, 63, 66, 67, 69, 70, 91, 92, 95, 96, 100, 102, 103, 104], "path": [5, 13, 38, 41, 42, 70, 89, 91, 99, 104], "local": [5, 7, 10, 13, 38, 39, 42, 89, 90, 91, 92, 93, 98, 99, 100, 102, 103, 105, 107, 109], "text": [5, 7, 10, 13, 19, 20, 21, 23, 24, 26, 27, 28, 29, 31, 32, 43, 49, 71, 80, 82, 83, 84, 86, 91, 92, 94, 98, 99, 100, 101, 102, 105], "txt": [5, 13, 109], "csv": [5, 13, 87, 88, 95, 96, 107], "json": [5, 13], "hub": [5, 13], "multiclass": [5, 13, 16, 49, 57, 62, 103], "regress": [5, 7, 10, 11, 13, 15, 17, 22, 31, 33, 35, 88, 90, 91, 92, 96, 101, 102, 105], "multilabel": [5, 10, 11, 13, 15, 16, 22, 26, 33, 35, 50, 103], "imag": [5, 9, 37, 42, 67, 69, 70, 71, 76, 78, 79, 84, 91, 92, 94, 98, 99, 101, 102, 103, 104, 106, 108], "field": [5, 10, 38, 42], "themselv": [5, 87, 88, 97, 107], "pil": [5, 93], "cleanvis": [5, 10], "level": [5, 10, 17, 19, 20, 21, 23, 24, 26, 27, 28, 29, 31, 32, 34, 37, 52, 56, 80, 82, 92, 93, 99, 101, 103, 108], "load_dataset": [5, 13, 93], "glue": 5, "sst2": 5, "properti": [5, 13, 14, 35, 38, 42, 90], "has_label": [5, 13], "class_nam": [5, 13, 21, 37, 43, 63, 70, 79, 83, 84, 98, 100, 104, 108, 109], "empti": [5, 13, 47, 62, 92, 97, 99, 103], "find_issu": [5, 6, 7, 8, 10, 11, 15, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 84, 89, 90, 91, 92, 93, 95, 96, 97, 99, 100, 103, 107], "issue_typ": [5, 6, 7, 8, 10, 11, 14, 15, 17, 19, 20, 21, 23, 24, 26, 27, 29, 31, 32, 89, 90, 91, 92, 93, 95, 96, 97, 99, 100, 103, 107], "sort": [5, 17, 41, 44, 49, 62, 64, 67, 69, 70, 72, 78, 80, 82, 87, 88, 89, 90, 91, 92, 93, 95, 96, 99, 100, 102, 103, 104, 107, 108, 109], "common": [5, 10, 14, 17, 92, 94, 97, 98, 99, 100, 103, 104, 108], "real": [5, 17, 84, 91, 92, 99, 100, 102, 107, 108], "world": [5, 17, 84, 91, 92, 99, 100, 102, 107, 108], "interact": [5, 17, 96, 99], "thereof": [5, 17], "insight": [5, 17, 70, 102], "best": [5, 9, 10, 17, 48, 62, 72, 87, 88, 91, 92, 93, 95, 96, 97, 99, 102, 103, 105, 107, 109], "properli": [5, 10, 41, 48, 52, 57, 58, 76, 89, 90, 91, 92, 93, 95, 96, 99, 100, 103, 105, 107, 108], "respect": [5, 38, 42, 67, 70, 89, 90, 91, 92, 93, 95, 96, 100, 103, 104], "lexicograph": [5, 48, 57, 89, 90, 91, 92, 93, 95, 96, 100, 103], "squar": [5, 57, 74, 98, 107], "csr": [5, 52, 97], "evenli": 5, "omit": [5, 69, 70, 93, 97, 104], "itself": [5, 33, 38, 42, 52, 97, 104], "three": [5, 10, 37, 62, 63, 74, 79, 87, 89, 90, 91, 92, 95, 98, 100, 102, 106, 107, 108, 109], "indptr": [5, 97], "wise": 5, "start": [5, 7, 10, 35, 38, 39, 42, 49, 84, 103, 109], "th": [5, 10, 43, 48, 56, 57, 62, 64, 67, 69, 70, 71, 80, 82, 83, 96, 103, 104, 109], "ascend": [5, 37, 63, 93, 100], "segment": [5, 76, 78, 79, 101], "reflect": [5, 10, 52, 87, 88, 95, 96, 102, 104, 105, 107], "maintain": [5, 61], "kneighbors_graph": [5, 19, 54, 95], "illustr": [5, 97], "todens": 5, "second": [5, 49, 57, 70, 72, 91, 95, 99, 100, 109], "duplic": [5, 9, 22, 23, 38, 42, 52, 84, 90, 91, 97, 100, 107], "explicit": 5, "precend": 5, "collect": [5, 10, 14, 17, 19, 20, 21, 23, 24, 26, 27, 28, 29, 31, 32, 33, 62, 97, 99, 102, 109], "unspecifi": [5, 17, 44, 64], "interest": [5, 17, 23, 79, 83, 87, 88, 96, 97, 100, 107, 108, 109], "constructor": [5, 10, 11, 17, 24, 31, 52, 54], "issuemanag": [5, 9, 14, 15, 17, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 31, 32, 34], "respons": [5, 17, 23, 54, 74, 75, 98, 107, 109], "random_st": [5, 87, 89, 90, 91, 92, 93, 97, 100, 103, 105], "lab": [5, 6, 8, 10, 19, 20, 21, 23, 24, 26, 27, 28, 29, 31, 32, 41, 84, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 103, 107], "comprehens": [5, 84, 93, 103, 107], "nbr": 5, "n_neighbor": [5, 10, 19, 52, 54, 71, 97], "mode": [5, 12, 19, 38, 41, 42, 105], "4x4": 5, "float64": [5, 27, 38, 42, 82], "compress": [5, 10, 52, 57, 76, 78, 97], "toarrai": [5, 52, 97], "NOT": [5, 41, 96], "23606798": 5, "41421356": [5, 52], "configur": [5, 17, 49, 92], "suppos": [5, 10, 67, 87, 88, 105, 107], "who": [5, 69, 87, 95, 97, 100, 109], "manag": [5, 8, 9, 10, 14, 15, 16, 17, 18, 20, 21, 23, 24, 26, 27, 28, 29, 31, 32, 61, 91, 97, 99], "clean_learning_kwarg": [5, 10, 11, 24, 31, 99, 107], "labelissuemanag": [5, 10, 15, 22, 24], "prune_method": [5, 85], "prune_by_noise_r": [5, 44, 64, 100], "report": [5, 7, 12, 16, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 37, 63, 83, 84, 89, 90, 91, 92, 95, 96, 99, 100, 103, 107, 109], "include_descript": [5, 19, 20, 21, 23, 24, 26, 27, 29, 31, 32, 34], "show_summary_scor": [5, 34], "show_all_issu": [5, 34], "summari": [5, 7, 14, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 37, 43, 60, 61, 63, 68, 77, 78, 80, 81, 82, 85, 89, 90, 91, 92, 93, 95, 96, 97, 98, 100, 104, 107, 108, 109], "show": [5, 7, 27, 38, 42, 48, 57, 70, 79, 83, 87, 90, 92, 93, 95, 96, 97, 98, 99, 100, 102, 105, 107, 108, 109], "suffer": [5, 10, 14, 23, 64, 72, 83, 97, 109], "onc": [5, 23, 37, 38, 42, 87, 90, 91, 99, 100, 103, 104], "familiar": [5, 97], "overal": [5, 7, 10, 14, 19, 20, 21, 23, 24, 26, 27, 28, 29, 31, 32, 37, 43, 49, 62, 63, 66, 69, 70, 74, 78, 79, 80, 82, 84, 85, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 102, 104, 109], "sever": [5, 7, 10, 13, 14, 23, 38, 41, 42, 44, 66, 69, 71, 72, 78, 82, 84, 87, 88, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 104, 105, 109], "compar": [5, 62, 71, 82, 91, 92, 95, 97, 100, 104], "issue_summari": [5, 7, 10, 14, 90, 91, 97], "With": [5, 9, 10, 41, 88, 96, 99, 100, 102, 107, 108, 109], "usag": [5, 41, 61], "usual": [5, 13, 33, 34, 93, 102, 107], "ti": [5, 62], "exhibit": [5, 7, 10, 14, 79, 89, 90, 91, 92, 93, 95, 96, 100, 104], "ie": [5, 74], "likelihood": [5, 10, 41, 43, 44, 64, 69, 71, 72, 76, 80, 97], "wherea": [5, 10, 57, 64, 87, 88, 106], "outlier": [5, 9, 11, 15, 22, 23, 32, 45, 52, 72, 84, 91, 92, 97, 100, 101, 107], "fundament": [5, 10], "incompar": 5, "quantiti": [5, 100, 107], "global": [5, 7, 10, 23, 38, 42, 98], "non_iid": [5, 10, 11, 15, 27, 92, 93, 95, 96, 97, 100], "hypothesi": [5, 97], "iid": [5, 7, 9, 27, 95, 100], "never": [5, 89, 100, 103, 105, 106], "someth": [5, 7, 10, 38, 42, 72, 104], "123": [5, 90, 91, 92], "456": [5, 87, 88, 89], "nearest_neighbor": 5, "7": [5, 10, 49, 50, 61, 80, 82, 87, 88, 89, 91, 92, 95, 96, 97, 98, 99, 102, 103, 104, 105, 107, 108, 109], "9": [5, 19, 20, 21, 23, 24, 26, 27, 29, 31, 32, 43, 49, 50, 66, 80, 82, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 100, 102, 103, 104, 105, 107, 108, 109], "distance_to_nearest_neighbor": [5, 11, 91, 92, 93, 95, 96, 100], "789": 5, "get_issu": [5, 10, 14, 89, 90, 91, 92, 93, 95, 96, 97, 99, 100, 103, 107], "issue_nam": [5, 6, 7, 10, 14, 15, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 89, 90, 91, 92, 93, 95, 96, 100], "focu": [5, 10, 14, 96, 97, 108, 109], "full": [5, 10, 14, 41, 61, 70, 90, 93, 109], "summar": [5, 14, 19, 20, 21, 23, 24, 26, 27, 28, 29, 31, 32, 37, 63, 79, 83, 84, 108], "specific_issu": [5, 14], "lie": [5, 10, 71, 72, 88, 89, 91, 92, 93, 95, 96, 97, 100], "get_issue_summari": [5, 10, 14, 90, 92, 97], "get_info": [5, 14, 92, 96, 97, 98], "yet": [5, 18, 28, 61, 98, 102], "list_possible_issue_typ": [5, 15, 16], "regist": [5, 7, 15, 16, 18, 28, 38, 42, 91], "rtype": [5, 15, 19, 20, 21, 23, 24, 26, 27, 28, 29, 31, 32, 38, 42], "registri": [5, 15, 16], "list_default_issue_typ": [5, 15, 16], "folder": [5, 89, 91, 93], "load": [5, 13, 41, 70, 93, 98, 99, 100, 104, 105, 108, 109], "futur": [5, 10, 23, 38, 42, 62, 84, 88, 89, 91, 93, 96, 99], "overwrit": [5, 91], "separ": [5, 37, 49, 66, 91, 92, 93, 97, 99, 104, 106], "static": 5, "rememb": [5, 96, 99, 100], "part": [5, 10, 38, 42, 44, 67, 69, 70, 89, 91, 97, 98, 108, 109], "ident": [5, 10, 23, 57, 90, 96, 97], "datalab": [6, 8, 11, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 84, 87, 88, 98, 102, 107], "walk": 7, "alongsid": [7, 38, 42, 91, 99], "pre": [7, 8, 10, 38, 42, 91, 92, 107], "runtim": [7, 38, 41, 42, 74, 76, 78, 89, 93, 99], "issue_manager_factori": [7, 15, 91], "myissuemanag": [7, 15], "myissuemanagerforregress": 7, "decor": [7, 15], "ll": [7, 49, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 99, 100, 102, 103, 104, 105, 106, 107, 109], "thing": [7, 42, 88, 97, 100, 107], "next": [7, 62, 84, 87, 88, 89, 90, 93, 95, 96, 97, 99, 102, 104, 107, 109], "dummi": 7, "randint": [7, 32, 49, 90, 91, 92, 97, 99], "mark": [7, 10, 85, 104, 105, 107], "regard": [7, 92, 100], "rand": [7, 49, 52, 90, 91, 92, 97], "is_": [7, 10, 91], "_issu": [7, 10, 91], "issue_score_kei": [7, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 91], "whole": [7, 10, 27, 38, 42, 92, 97], "make_summari": [7, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 91], "popul": [7, 92, 96], "verbosity_level": [7, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32], "std": [7, 104], "raw_scor": 7, "bit": 7, "involv": [7, 41, 79, 83, 90, 97, 99, 103], "intermediate_arg": 7, "min": [7, 49, 69, 82, 91, 99, 105], "sin_filt": 7, "sin": 7, "arang": [7, 97], "kernel": [7, 97], "affect": [7, 10, 38, 42, 53, 76, 82, 96, 97, 99], "easili": [7, 47, 85, 87, 88, 89, 90, 92, 95, 96, 100, 102, 103, 105, 106, 107, 108], "hard": [7, 42, 98, 105], "sai": [7, 10, 38, 42, 97, 103, 108], "anoth": [7, 10, 23, 37, 41, 53, 56, 69, 72, 88, 95, 96, 97, 99, 100, 102, 105], "try": [7, 9, 10, 41, 44, 61, 62, 76, 78, 84, 90, 92, 93, 95, 96, 99, 100, 108], "won": [7, 38, 42, 91, 92, 99, 103], "issue_manag": [7, 10, 12, 14, 16, 19, 20, 21, 24, 26, 27, 28, 29, 31, 32, 91], "instanti": [7, 17, 41, 61, 71, 88, 89, 92, 95], "477762": 7, "286455": 7, "term": [7, 10, 47, 57, 70, 89, 90, 91, 92, 93, 95, 96, 100], "4778": 7, "is_basic_issu": 7, "basic_scor": 7, "13": [7, 20, 29, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 100, 102, 104, 105, 107, 108, 109], "003042": 7, "058117": 7, "11": [7, 10, 61, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109], "121908": 7, "15": [7, 55, 61, 74, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 102, 104, 105, 107, 108, 109], "169312": 7, "17": [7, 88, 89, 90, 92, 93, 95, 96, 97, 98, 99, 100, 102, 104, 105, 107, 108, 109], "229044": 7, "2865": 7, "is_intermediate_issu": 7, "intermediate_scor": 7, "000000": [7, 91, 92, 97, 98, 100], "007059": 7, "009967": 7, "010995": 7, "087332": 7, "016296": 7, "03947": 7, "019459": 7, "794251": 7, "underperform": [8, 9, 32], "group": [8, 9, 27, 32, 98, 104, 109], "dbscan": [8, 10, 32, 99], "hdbscan": [8, 99], "etc": [8, 10, 23, 33, 38, 42, 47, 61, 62, 80, 84, 91, 92, 95, 96, 99, 100, 103, 107], "sensit": [8, 10, 55, 97], "ep": [8, 32, 70], "radiu": 8, "min_sampl": [8, 32], "kmean": [8, 97, 99], "your_data": 8, "get_pred_prob": [8, 90], "n_cluster": [8, 32, 97, 99], "cluster_id": [8, 10, 11, 32, 97, 99], "labels_": 8, "underperforming_group": [8, 10, 11, 15, 22, 92, 93, 95, 96, 97, 99, 100], "search": [9, 10, 21, 27, 28, 45, 51, 52, 53, 56, 74, 97, 99, 106], "nondefault": 9, "Near": [9, 99], "imbal": [9, 22, 66, 71, 72, 92], "null": [9, 11, 15, 22, 92, 93, 96, 100], "togeth": [9, 10, 47, 88, 91, 92, 93, 95, 96, 100, 107, 109], "built": [9, 49], "own": [9, 38, 40, 42, 54, 60, 66, 67, 70, 76, 80, 87, 88, 89, 92, 93, 95, 96, 97, 99, 102, 103, 107, 108, 109], "prerequisit": 9, "basic": [9, 42, 61, 95, 96, 97, 105], "fulli": [9, 10, 38, 42, 61, 99], "platform": [9, 10, 84, 93, 95, 96, 99], "write": [9, 10], "code": [9, 10, 38, 42, 47, 57, 61, 84, 85, 87, 88, 89, 90, 91, 92, 93, 95, 96, 98, 99, 102, 103, 104, 105, 107, 108, 109], "being": [9, 10, 14, 37, 38, 42, 44, 49, 56, 57, 72, 87, 95, 99, 100, 107, 108], "100x": [9, 10], "faster": [9, 10, 41, 71, 74, 76, 78, 99, 100], "intellig": [9, 10], "quickli": [9, 10, 39, 87, 89, 93, 95, 96, 99, 103, 105, 108, 109], "fix": [9, 10, 62, 88, 90, 96, 97, 100, 107], "scientist": [9, 10], "million": [9, 10, 109], "thank": [9, 10], "ai": [9, 10, 84, 87, 88, 89, 90, 91, 92, 93, 95, 96, 98, 99, 101, 102, 103, 105, 107, 109], "suggest": [9, 10, 37, 62, 63, 69, 88, 93, 96, 99, 107], "power": [9, 10, 93, 95, 96, 98, 100, 109], "automl": [9, 10, 84, 99], "system": [9, 10, 89, 90, 93, 95, 96, 108], "foundat": [9, 10, 84, 97], "improv": [9, 10, 62, 87, 88, 92, 93, 98, 99, 100, 107, 108], "click": [9, 10, 89, 90, 91, 92, 93, 98, 100, 102, 103, 105, 107, 109], "tune": [9, 10, 88, 89, 96, 98, 105], "serv": [9, 10, 14, 17, 102], "auto": [9, 10, 87, 88, 90, 92, 98, 99, 107], "free": [9, 10, 84, 89, 92, 93, 95, 96, 99, 100], "page": [10, 92, 99, 100], "variou": [10, 14, 31, 40, 58, 60, 84, 87, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 102, 104], "why": [10, 90, 96], "matter": [10, 37, 63, 88, 96], "didn": [10, 97], "plu": [10, 107], "ye": [10, 11], "near_dupl": [10, 11, 15, 20, 90, 91, 92, 93, 95, 96, 97, 99, 100], "class_imbal": [10, 11, 15, 21, 92, 93, 95, 96, 97, 100], "data_valu": [10, 11, 15, 22, 97], "No": [10, 11, 87, 88, 96, 97, 99], "reinterpret": [10, 11], "your_regression_model": [10, 11], "_score": 10, "badli": [10, 69, 87, 88, 109], "issue_scor": 10, "atyp": [10, 71, 91, 92, 93, 95, 96, 100, 105], "datapoint": [10, 32, 44, 49, 57, 72, 75, 84, 87, 88, 89, 91, 92, 95, 96, 99, 106, 107], "is_issu": [10, 23], "primarili": 10, "former": [10, 38, 42], "investig": [10, 89, 90], "expertis": 10, "interpret": [10, 98, 99, 100, 103, 107], "annot": [10, 37, 48, 62, 63, 64, 66, 67, 69, 70, 79, 82, 83, 84, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 104, 108], "dissimilar": [10, 95, 96], "preced": 10, "incorrect": [10, 69, 72, 75, 87, 89, 90, 91, 92, 93, 95, 96, 97, 100, 104, 107], "due": [10, 41, 44, 72, 76, 78, 89, 90, 91, 92, 93, 95, 96, 100, 107], "appear": [10, 37, 48, 63, 64, 67, 75, 92, 93, 95, 96, 97, 107, 108], "now": [10, 41, 85, 87, 88, 89, 90, 92, 97, 102, 104, 105, 107, 109], "token": [10, 43, 56, 78, 79, 80, 81, 82, 83, 99, 100, 101], "hamper": [10, 93, 98], "analyt": [10, 84, 97, 99, 102], "lead": [10, 69, 72, 93, 97, 104], "draw": [10, 90, 91, 92], "conclus": [10, 96], "let": [10, 38, 42, 71, 72, 87, 88, 89, 90, 92, 93, 95, 96, 99, 102, 103, 104, 105, 107, 108, 109], "sort_valu": [10, 89, 90, 92, 93, 95, 96, 97, 99, 100, 102, 103, 107], "head": [10, 87, 88, 89, 92, 93, 95, 96, 97, 98, 100, 102, 107], "97": [10, 87, 98, 99, 100, 104, 107, 109], "064045": 10, "58": [10, 87, 92, 97, 98, 100, 104], "680894": 10, "41": [10, 97, 98, 104, 107, 109], "746043": 10, "794894": 10, "98": [10, 98, 99, 107], "802911": 10, "give": [10, 49, 72, 100, 102, 108], "li": [10, 71], "especi": [10, 87, 88, 90, 93, 97, 99, 107], "veri": [10, 37, 63, 67, 69, 88, 90, 91, 92, 93, 95, 96, 99, 100, 102, 105, 107], "rare": [10, 44, 70, 90, 91, 92, 93, 95, 96, 99, 100], "anomal": [10, 72, 90, 91, 92, 93, 95, 96, 100], "articl": [10, 41, 99], "blog": 10, "unexpect": [10, 38, 42, 96], "consequ": 10, "inspect": [10, 88, 89, 90, 92, 93, 100, 104, 107], "011562": 10, "62": [10, 97, 100, 104, 107], "019657": 10, "22": [10, 89, 90, 91, 93, 97, 98, 99, 100, 103, 104, 109], "035243": 10, "040907": 10, "42": [10, 49, 96, 97, 98, 104, 109], "056865": 10, "smaller": [10, 71, 90, 103, 104], "extrem": [10, 91, 92, 93, 95, 96, 97, 99, 100], "record": [10, 38, 42, 89, 95, 107], "abbrevi": 10, "misspel": 10, "typo": [10, 83], "resolut": 10, "video": [10, 98], "audio": [10, 91, 92, 94, 99], "minor": [10, 56], "variat": 10, "translat": 10, "d": [10, 55, 87, 95, 96, 97, 99, 100, 103, 107, 109], "constant": [10, 32, 74], "median": [10, 31, 55], "question": [10, 23, 84, 100], "nearli": [10, 23, 92, 93, 95, 96], "awar": [10, 85, 100], "presenc": [10, 52, 54, 100], "36": [10, 97, 98, 109], "066009": 10, "80": [10, 39, 87, 95, 103, 107], "003906": 10, "093245": 10, "005599": 10, "27": [10, 90, 95, 97, 98, 100, 104, 105, 109], "156720": 10, "009751": 10, "72": [10, 97, 98, 100, 103, 107], "signific": [10, 95, 96, 100], "violat": [10, 95, 96, 97, 100], "assumpt": [10, 95, 96, 97, 100], "changepoint": [10, 95, 96, 100], "shift": [10, 52, 54, 95, 96, 100], "drift": [10, 92, 95, 97, 100], "autocorrel": [10, 95, 96, 100], "almost": [10, 95, 96, 100], "adjac": [10, 52, 95, 96, 100], "tend": [10, 37, 47, 95, 96, 100, 108, 109], "sequenti": [10, 38, 42, 61, 93], "pai": [10, 96], "attent": [10, 97], "realli": [10, 88, 96, 102, 108], "mere": 10, "highlight": [10, 79, 83, 90, 91, 92, 95, 97, 108], "necessarili": [10, 62, 70, 96, 100], "wrong": [10, 62, 67, 69, 85, 88, 90, 91, 92, 96, 99, 100, 104], "gap": 10, "b": [10, 19, 20, 21, 23, 24, 26, 27, 29, 31, 32, 37, 56, 57, 82, 87, 95, 96, 97, 98, 99, 100, 106, 109], "x1": [10, 67, 70, 104], "x2": [10, 67, 70, 104], "10th": 10, "100th": 10, "90": [10, 82, 87, 95, 100, 106, 107], "similarli": [10, 38, 42, 91, 93, 95, 99, 104], "associ": [10, 13, 17, 33, 35, 38, 42, 70, 102], "blogpost": 10, "proper": [10, 57, 62, 67, 70, 87, 93, 96, 99, 102, 104], "scenario": [10, 52, 54, 72, 90, 91, 92], "underli": [10, 43, 54, 71, 80, 82, 109], "stem": [10, 71, 105], "evolv": 10, "influenc": 10, "act": [10, 69, 91], "accordingli": [10, 33, 52], "emploi": [10, 103, 105], "partit": [10, 106], "ahead": 10, "good": [10, 38, 42, 55, 61, 63, 69, 72, 76, 78, 79, 84, 90, 93, 95, 96], "problem": [10, 33, 41, 49, 79, 84, 91, 92, 93, 96, 99], "deploy": [10, 87, 88, 100, 107], "overlook": [10, 69, 104], "fact": 10, "thu": [10, 37, 42, 63, 87, 89, 95, 96, 100, 106, 109], "diagnos": [10, 92, 99], "24": [10, 89, 90, 97, 98, 100, 102, 104, 107], "681458": 10, "37": [10, 91, 97, 98], "804582": 10, "64": [10, 42, 87, 93, 95, 97, 100, 104], "810646": 10, "815691": 10, "78": [10, 87, 95, 98, 100, 104, 107], "834293": 10, "Be": [10, 42], "cautiou": 10, "behavior": [10, 17, 37, 38, 42, 70, 90, 99], "rarest": [10, 92], "q": [10, 104], "subpar": 10, "special": [10, 52, 56], "techniqu": [10, 104], "smote": 10, "asymmetr": [10, 37], "28": [10, 93, 96, 97, 98, 100, 102, 109], "75": [10, 49, 90, 91, 92, 97, 98, 102, 103, 104, 107, 109], "33": [10, 38, 42, 97, 98, 104], "68": [10, 87, 98, 100, 104], "excess": [10, 93], "dark": [10, 108], "bright": [10, 109], "blurri": [10, 93], "lack": [10, 61, 97], "unusu": [10, 104, 105], "cluster": [10, 19, 32], "slice": 10, "poor": 10, "subpopul": 10, "faq": [10, 84, 92, 93, 95, 96, 101], "get_self_confidence_for_each_label": [10, 49, 72], "r": [10, 41, 74, 90, 91, 92, 97, 107, 108], "tabular": [10, 84, 86, 91, 92, 94, 97, 99, 102], "categor": [10, 71, 86, 87, 91, 92, 94, 99, 107], "encod": [10, 50, 70, 76, 79, 87, 88, 95, 96, 99, 107, 108], "71": [10, 97, 98, 100, 104, 107], "70": [10, 82, 95, 97, 109], "69": [10, 100, 107], "subgroup": [10, 97], "wors": [10, 97, 102], "ratio": 10, "miss": [10, 28, 38, 42, 57, 67, 69, 90, 99, 104, 107], "pattern": [10, 97], "isn": [10, 18, 28], "scalabl": 10, "sacrific": 10, "One": [10, 57, 71, 99], "quantif": 10, "39": [10, 88, 89, 91, 93, 96, 97, 98, 99, 104, 107, 108, 109], "32": [10, 89, 91, 97, 98, 102, 104], "valuabl": [10, 19, 97], "exert": [10, 92], "possible_issue_typ": 10, "label_kwarg": 10, "outlier_kwarg": 10, "near_duplicate_kwarg": 10, "non_iid_kwarg": 10, "class_imbalance_kwarg": 10, "underperforming_group_kwarg": 10, "null_kwarg": 10, "data_valuation_kwarg": 10, "health_summary_paramet": [10, 22, 24, 31], "health_summari": [10, 24, 37, 84, 98], "health_summary_kwarg": 10, "tandem": [10, 98], "view": [10, 38, 42, 43, 44, 78, 80, 82, 84, 87, 88, 89, 90, 91, 92, 95, 96, 98, 100, 102, 103, 104, 105, 106, 107, 109], "ood_kwarg": 10, "outofdistribut": [10, 29, 71, 105], "outsid": [10, 99, 103], "outlierissuemanag": [10, 15, 22, 29, 91], "nearduplicateissuemanag": [10, 15, 20, 22], "noniidissuemanag": [10, 15, 22, 27], "num_permut": [10, 27], "permut": [10, 27], "significance_threshold": [10, 27], "signic": 10, "noniid": [10, 22], "classimbalanceissuemanag": [10, 15, 21, 22], "underperforminggroupissuemanag": [10, 15, 22, 32], "determinin": 10, "neighbour": 10, "min_cluster_sampl": [10, 32], "filter_cluster_id": [10, 22, 32], "clustering_kwarg": [10, 32], "nullissuemanag": [10, 15, 22, 28], "datavaluationissuemanag": [10, 15, 19, 22], "codeblock": 10, "demonstr": [10, 41, 52, 91, 92, 93, 96, 97, 98, 99, 100, 102, 103, 104, 107, 108], "howev": [10, 38, 42, 52, 57, 87, 88, 89, 93, 95, 96, 97, 102, 106, 108], "mandatori": [10, 93], "image_issue_types_kwarg": 10, "vice": [10, 63], "versa": [10, 63], "light": [10, 93, 98, 104, 108], "29": [10, 90, 93, 97, 98, 102, 103, 104, 108, 109], "low_inform": [10, 93], "odd_aspect_ratio": [10, 93], "35": [10, 90, 91, 97, 98, 102, 103, 104], "odd_siz": [10, 93], "doc": [10, 38, 42, 71, 84, 89, 90, 91, 92, 93, 95, 96, 98, 100, 102, 103, 105, 107, 109], "label_scor": [11, 24, 26, 31, 89, 90, 91, 92, 93, 95, 96, 97, 100, 103, 107], "is_outlier_issu": [11, 90, 91, 92, 93, 95, 96, 97, 100], "outlier_scor": [11, 29, 90, 91, 92, 93, 95, 96, 97, 100, 105], "is_near_duplicate_issu": [11, 91, 92, 93, 95, 96, 97, 99, 100], "near_duplicate_scor": [11, 20, 91, 92, 93, 95, 96, 97, 99, 100], "near_duplicate_set": [11, 20, 22, 91, 92, 93, 95, 96, 99, 100], "is_non_iid_issu": [11, 92, 95, 96, 97, 100], "non_iid_scor": [11, 27, 92, 95, 96, 97, 100], "is_class_imbalance_issu": [11, 92, 97], "class_imbalance_scor": [11, 21, 92, 97], "is_underperforming_group_issu": [11, 92, 97], "underperforming_group_scor": [11, 32, 92, 97], "is_null_issu": [11, 92, 97], "null_scor": [11, 28, 92, 97], "is_data_valuation_issu": [11, 97], "data_valuation_scor": [11, 19, 97], "studio": [12, 84, 92, 93, 95, 96, 99], "data_issu": [12, 16, 17, 34, 91], "issue_find": [12, 16, 97], "factori": [12, 16, 17], "model_output": [12, 16], "except": [13, 38, 42, 61, 72, 90, 91, 92, 93, 102], "dataformaterror": [13, 16], "add_not": 13, "with_traceback": 13, "tb": 13, "__traceback__": 13, "datasetdicterror": [13, 16], "datasetdict": 13, "datasetloaderror": [13, 16], "dataset_typ": 13, "fail": 13, "hold": 13, "sublist": 13, "map_to_int": 13, "abc": [13, 23, 33], "is_avail": [13, 93], "dataissu": [14, 16, 17, 34], "central": [14, 109], "repositori": [14, 93], "strategi": [14, 49, 97, 99], "_infostrategi": 14, "basi": 14, "collect_statist": 14, "reus": [14, 23], "avoid": [14, 38, 41, 42, 44, 52, 57, 64, 67, 70, 74, 76, 78, 90, 91, 92, 93, 99], "recomput": [14, 88], "weighted_knn_graph": 14, "issue_manager_that_computes_knn_graph": 14, "collect_issues_from_issue_manag": 14, "collect_issues_from_imagelab": 14, "imagelab": 14, "set_health_scor": 14, "health": [14, 24, 37, 63, 84], "get_data_statist": [14, 16], "concret": 15, "subclass": [15, 38, 42, 71, 91], "regressionlabelissuemanag": [15, 22, 30, 31], "multilabelissuemanag": [15, 22, 25, 26], "from_str": [15, 35, 45, 49], "my_issu": 15, "logic": [15, 35, 41, 44, 76, 78], "issuefind": [16, 17, 34], "modeloutput": [16, 33], "multiclasspredprob": [16, 33], "regressionpredict": [16, 33], "multilabelpredprob": [16, 33], "instati": 17, "public": [17, 97, 100, 104, 108, 109], "creation": [17, 42, 97], "execut": [17, 38, 42, 91, 93, 99, 104], "coordin": [17, 67, 69, 70, 104, 109], "At": [17, 70, 99], "get_available_issue_typ": 17, "direct": [18, 28, 38, 42, 54, 61], "vstack": [19, 57, 93, 98, 99, 100, 102, 103], "25": [19, 27, 38, 49, 55, 90, 92, 93, 97, 98, 100, 102, 103, 104, 109], "classvar": [19, 20, 21, 23, 24, 26, 27, 28, 29, 31, 32], "short": [19, 20, 21, 23, 24, 26, 27, 28, 29, 31, 32, 56, 57], "item": [19, 20, 21, 23, 24, 26, 27, 28, 29, 31, 32, 38, 42, 57, 90, 91, 92, 93, 99, 100, 102, 103], "some_info_kei": [19, 20, 21, 23, 24, 26, 27, 28, 29, 31, 32], "additional_info_kei": [19, 20, 21, 23, 24, 26, 27, 28, 29, 31, 32], "default_threshold": [19, 22, 29], "collect_info": [19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32], "info_to_omit": [19, 20, 21, 23, 24, 26, 27, 29, 31, 32], "compos": [19, 20, 21, 23, 24, 26, 27, 29, 31, 32, 38, 42, 88, 96, 105], "is_x_issu": [19, 20, 21, 23, 24, 26, 27, 29, 31, 32], "x_score": [19, 20, 21, 23, 24, 26, 27, 29, 31, 32], "val_a": [19, 20, 21, 23, 24, 26, 27, 29, 31, 32], "val_b1": [19, 20, 21, 23, 24, 26, 27, 29, 31, 32], "val_b2": [19, 20, 21, 23, 24, 26, 27, 29, 31, 32], "report_str": [19, 20, 21, 23, 24, 26, 27, 28, 29, 31, 32, 34], "_": [20, 21, 23, 24, 26, 27, 28, 31, 32, 49, 56, 57, 87, 89, 91, 93, 97, 98, 100, 103], "occurr": [20, 21, 23, 27, 28, 29, 32, 56], "median_nn_dist": 20, "bleed": [22, 25, 30, 40], "edg": [22, 25, 30, 40, 69, 84, 100, 109], "sharp": [22, 25, 30, 40], "get_health_summari": [22, 24], "ood": [22, 29, 71, 72, 90, 91, 92, 93, 96, 100, 105], "simplified_kolmogorov_smirnov_test": [22, 27], "outlier_cluster_label": [22, 32], "no_underperforming_cluster_id": [22, 32], "set_knn_graph": [22, 32], "perform_clust": [22, 32], "get_worst_clust": [22, 32], "find_issues_with_predict": [22, 30, 31], "find_issues_with_featur": [22, 30, 31], "believ": [23, 108], "priori": [23, 100], "abstract": [23, 33], "applic": [24, 62, 99, 100, 102, 109], "typevar": [24, 26, 38, 42, 56, 66, 69, 70], "scalartyp": [24, 26], "covari": [24, 26, 74, 107], "summary_dict": 24, "neighbor_histogram": 27, "non_neighbor_histogram": 27, "kolmogorov": 27, "smirnov": 27, "largest": [27, 41, 49, 52, 72, 76, 78, 104, 108], "empir": [27, 48, 62], "cumul": 27, "ecdf": 27, "histogram": [27, 95, 97, 107], "absolut": [27, 31], "trial": 27, "null_track": 28, "extend": [28, 50, 61, 93, 97, 104, 105, 109], "superclass": 28, "arbitrari": [28, 37, 78, 82, 91, 105, 107], "prompt": 28, "address": [28, 88, 91, 92, 96, 99], "enabl": [28, 42, 54], "37037": 29, "q3_avg_dist": 29, "iqr_avg_dist": 29, "median_outlier_scor": 29, "issue_threshold": 29, "multipli": [31, 55], "deleg": 31, "confus": [32, 33, 37, 38, 42, 44, 57, 70, 88, 109], "50": [32, 42, 90, 97, 99, 100, 102, 104, 105, 107], "keepdim": [32, 99], "signifi": 32, "absenc": 32, "find_issues_kwarg": 32, "int64": [32, 89, 102], "npt": 32, "int_": 32, "id": [32, 62, 91, 93, 97, 99, 102], "unique_cluster_id": 32, "_description_": 32, "performed_clust": 32, "worst_cluster_id": 32, "convent": [33, 35], "subject": [33, 35], "meant": [33, 35], "Not": [33, 54], "mainli": [33, 105, 109], "content": [33, 71, 89, 90, 91, 92, 93, 98, 100, 102, 103, 105, 107, 109], "fetch": [33, 41, 89, 92, 99], "datset": 34, "exclud": [34, 43, 79, 83, 91, 99, 109], "get_report": 34, "enum": [35, 49], "qualnam": [35, 49], "boundari": [35, 49, 90, 91, 92], "continu": [35, 61, 87, 88, 93, 96, 99, 102, 104, 107, 109], "binari": [35, 49, 57, 64, 66, 100, 109], "simultan": [35, 107], "task_str": 35, "is_classif": 35, "__contains__": [35, 45, 49], "member": [35, 38, 42, 49, 91, 92], "typeerror": [35, 49], "12": [35, 49, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 102, 104, 105, 107, 108, 109], "__getitem__": [35, 45, 49], "match": [35, 37, 38, 42, 44, 49, 62, 63, 72, 90, 91, 92, 93, 98, 104, 106, 108], "__iter__": [35, 45, 49], "__len__": [35, 45, 49], "alias": [35, 49], "is_regress": 35, "is_multilabel": 35, "overview": [37, 52, 87, 88, 89, 92, 93, 95, 96, 102, 104, 105, 107, 109], "modifi": [37, 38, 41, 42, 52, 54, 57, 99, 100], "rank_classes_by_label_qu": [37, 92], "merg": [37, 52, 56, 84, 98, 99, 109], "find_overlapping_class": [37, 99, 100], "problemat": [37, 63, 79, 83, 89, 104, 109], "unnorm": [37, 63, 100], "abov": [37, 38, 41, 42, 54, 57, 62, 69, 70, 72, 78, 82, 87, 88, 89, 91, 92, 93, 95, 96, 99, 100, 102, 103, 104, 106, 107, 108, 109], "model_select": [37, 49, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 99, 100, 102, 103, 105, 107], "cross_val_predict": [37, 42, 87, 88, 89, 90, 91, 92, 95, 96, 97, 99, 100, 102, 106, 107], "get_data_labels_from_dataset": 37, "yourfavoritemodel": [37, 100], "cv": [37, 49, 87, 89, 90, 91, 92, 95, 97, 100, 102], "df": [37, 57, 83, 89, 97, 99], "overall_label_qu": [37, 63], "col": 37, "prob": [37, 56, 100, 106], "divid": [37, 63, 72], "label_nois": [37, 63], "human": [37, 98, 108, 109], "clearli": [37, 72, 93, 104, 108], "num": [37, 63, 98, 100], "overlap": [37, 84, 98, 99, 100], "ontolog": 37, "publish": [37, 109], "therefor": [37, 72, 97], "vehicl": [37, 98], "truck": [37, 98, 105, 108], "intuit": [37, 63, 90], "car": [37, 98, 104, 108], "frequent": [37, 62, 97, 99, 107], "characterist": 37, "l": [37, 38, 42, 67, 69, 70], "class1": 37, "class2": 37, "relationship": 37, "dog": [37, 57, 63, 65, 79, 98, 99, 105, 106, 109], "cat": [37, 57, 63, 65, 98, 99, 105, 106], "captur": [37, 89, 104, 105, 108], "co": [37, 38, 39, 93], "noisy_label": [37, 90, 91, 92, 103], "overlapping_class": 37, "descend": [37, 38, 42, 49, 63, 70], "overall_label_health_scor": [37, 63, 100], "half": [37, 38, 40, 42, 63, 98, 109], "health_scor": [37, 63], "classes_by_label_qu": [37, 92], "cnn": [38, 40, 42, 93], "cifar": [38, 39, 98, 105], "teach": [38, 39], "bhanml": 38, "blob": [38, 97], "master": [38, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 100, 102, 103, 104, 105, 107], "call_bn": [38, 40], "bn": 38, "input_channel": 38, "n_output": 38, "dropout_r": 38, "top_bn": 38, "architectur": [38, 42], "shown": [38, 70, 89, 90, 91, 92, 93, 95, 96, 99, 100, 102, 105, 106, 108, 109], "forward": [38, 39, 40, 42, 93, 102], "overridden": [38, 42], "although": [38, 42, 71, 87, 95], "recip": [38, 42], "afterward": [38, 42], "sinc": [38, 42, 46, 58, 63, 70, 78, 82, 99, 102, 103, 104, 106, 109], "hook": [38, 42, 98], "silent": [38, 41, 42], "t_destin": [38, 40, 42], "__call__": [38, 40, 42, 45, 49], "add_modul": [38, 40, 42], "child": [38, 42], "fn": [38, 42, 70], "recurs": [38, 42, 49], "submodul": [38, 42, 51], "children": [38, 40, 42, 109], "nn": [38, 39, 42, 52, 93], "init": [38, 42, 100], "no_grad": [38, 42, 93, 105], "init_weight": [38, 42], "linear": [38, 42, 88, 93, 96], "fill_": [38, 42], "net": [38, 42, 89, 93, 98], "in_featur": [38, 42], "out_featur": [38, 42], "bia": [38, 42, 93], "tensor": [38, 39, 42, 88, 89, 93, 96, 105], "requires_grad": [38, 42], "bfloat16": [38, 40, 42], "cast": [38, 42, 89], "buffer": [38, 40, 42], "datatyp": [38, 42], "xdoctest": [38, 42], "undefin": [38, 42], "var": [38, 42], "buf": [38, 42], "20l": [38, 42], "1l": [38, 42], "5l": [38, 42], "call_super_init": [38, 40, 42], "immedi": [38, 42, 105], "compil": [38, 40, 42, 61], "cpu": [38, 40, 42, 44, 89, 93], "move": [38, 42, 49, 85, 98], "cuda": [38, 40, 42, 89, 93], "devic": [38, 42, 89, 93], "gpu": [38, 42, 88, 89, 96], "live": [38, 42], "copi": [38, 42, 74, 87, 89, 90, 91, 92, 95, 97, 99, 103, 106, 107], "doubl": [38, 40, 42], "dump_patch": [38, 40, 42], "eval": [38, 40, 42, 93, 103, 105], "dropout": [38, 42], "batchnorm": [38, 42], "grad": [38, 42], "extra_repr": [38, 40, 42], "line": [38, 42, 84, 91, 97, 98, 102, 105, 109], "get_buff": [38, 40, 42], "target": [38, 39, 42, 74, 75, 97, 105, 107], "throw": [38, 42], "get_submodul": [38, 40, 42], "explan": [38, 42], "qualifi": [38, 42], "referenc": [38, 42], "attributeerror": [38, 42], "invalid": [38, 42, 96], "resolv": [38, 42, 90, 109], "get_extra_st": [38, 40, 42], "state_dict": [38, 40, 42], "set_extra_st": [38, 40, 42], "build": [38, 42, 52, 93, 97, 108], "picklabl": [38, 42], "serial": [38, 42], "backward": [38, 42, 93], "break": [38, 42, 93, 104], "pickl": [38, 42, 104], "get_paramet": [38, 40, 42], "net_b": [38, 42], "net_c": [38, 42], "conv": [38, 42], "conv2d": [38, 42, 93], "16": [38, 42, 49, 52, 61, 78, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 102, 104, 105, 108, 109], "kernel_s": [38, 42], "stride": [38, 42], "200": [38, 42, 72, 90, 98, 104, 109], "diagram": [38, 42, 106], "degre": [38, 42], "queri": [38, 42, 52, 54, 92, 93, 97, 99, 103], "named_modul": [38, 40, 42], "o": [38, 42, 55, 56, 89, 90, 91, 92, 98, 99, 100, 103, 104, 109], "transit": [38, 42], "ipu": [38, 40, 42], "load_state_dict": [38, 40, 42], "strict": [38, 42, 49], "persist": [38, 42], "strictli": [38, 42], "inplac": [38, 42, 97, 102], "preserv": [38, 42, 57], "namedtupl": [38, 42], "missing_kei": [38, 42], "unexpected_kei": [38, 42], "runtimeerror": [38, 42], "idx": [38, 42, 57, 58, 70, 91, 93, 97, 99, 100, 102, 104, 105], "named_buff": [38, 40, 42], "prefix": [38, 42, 89, 109], "remove_dupl": [38, 42], "prepend": [38, 42], "running_var": [38, 42], "named_children": [38, 40, 42], "conv4": [38, 42], "conv5": [38, 42], "memo": [38, 42], "named_paramet": [38, 40, 42], "register_backward_hook": [38, 40, 42], "deprec": [38, 42, 46, 88, 89, 96, 99], "favor": [38, 42], "register_full_backward_hook": [38, 40, 42], "removablehandl": [38, 42], "register_buff": [38, 40, 42], "running_mean": [38, 42], "register_forward_hook": [38, 40, 42], "with_kwarg": [38, 42], "always_cal": [38, 42], "possibli": [38, 42, 87, 95], "fire": [38, 42, 98], "register_module_forward_hook": [38, 42], "regardless": [38, 42, 91, 92], "register_forward_pre_hook": [38, 40, 42], "And": [38, 42], "forward_pr": [38, 42], "register_module_forward_pre_hook": [38, 42], "gradient": [38, 42, 93, 95, 107], "grad_input": [38, 42], "grad_output": [38, 42], "technic": [38, 42], "caller": [38, 42], "register_module_full_backward_hook": [38, 42], "register_full_backward_pre_hook": [38, 40, 42], "backward_pr": [38, 42], "register_module_full_backward_pre_hook": [38, 42], "register_load_state_dict_post_hook": [38, 40, 42], "post": [38, 42, 52], "incompatible_kei": [38, 42], "modif": [38, 42, 52], "thrown": [38, 42], "register_modul": [38, 40, 42], "register_paramet": [38, 40, 42], "register_state_dict_pre_hook": [38, 40, 42], "keep_var": [38, 42], "requires_grad_": [38, 40, 42], "autograd": [38, 42], "freez": [38, 42, 88, 89, 96], "finetun": [38, 42], "gan": [38, 42], "share_memori": [38, 40, 42], "share_memory_": [38, 42], "destin": [38, 42], "shallow": [38, 42], "releas": [38, 42, 61, 85, 89, 93, 99], "design": [38, 42, 52, 90], "ordereddict": [38, 42], "detach": [38, 42, 93], "non_block": [38, 42], "memory_format": [38, 42], "channels_last": [38, 42], "Its": [38, 42, 49, 63, 69], "complex": [38, 42, 89], "integr": [38, 42, 54, 84, 99], "asynchron": [38, 42], "host": [38, 42], "pin": [38, 42, 88, 96, 98], "desir": [38, 42, 52, 56, 70], "4d": [38, 42], "ignore_w": [38, 42], "determinist": [38, 42, 89], "1913": [38, 42], "3420": [38, 42], "5113": [38, 42], "2325": [38, 42], "env": [38, 42], "torch_doctest_cuda1": [38, 42], "gpu1": [38, 42], "1914": [38, 42], "5112": [38, 42], "2324": [38, 42], "float16": [38, 42], "cdoubl": [38, 42], "3741": [38, 42], "2382": [38, 42], "5593": [38, 42], "4443": [38, 42], "complex128": [38, 42], "6122": [38, 42], "1150": [38, 42], "to_empti": [38, 40, 42], "storag": [38, 42, 88, 96], "dst_type": [38, 42], "xpu": [38, 40, 42], "zero_grad": [38, 40, 42, 93], "set_to_non": [38, 42], "reset": [38, 42], "context": [38, 42, 104], "noisili": [39, 100], "han": 39, "2018": 39, "cifar_cnn": [39, 40], "loss_coteach": [39, 40], "y_1": 39, "y_2": 39, "forget_r": 39, "class_weight": 39, "logit": [39, 61, 93], "decim": [39, 57], "forget": [39, 49, 109], "rate_schedul": 39, "epoch": [39, 40, 42, 93, 99], "initialize_lr_schedul": [39, 40], "lr": [39, 40, 42], "001": [39, 72, 97, 99], "250": [39, 91, 92, 100, 104], "epoch_decay_start": 39, "schedul": 39, "beta": 39, "adam": 39, "adjust_learning_r": [39, 40], "alpha_plan": 39, "beta1_plan": 39, "forget_rate_schedul": [39, 40], "num_gradu": 39, "expon": 39, "tell": [39, 88, 93, 96, 100], "train_load": [39, 42], "model1": [39, 100], "optimizer1": 39, "model2": [39, 100], "optimizer2": 39, "dataload": [39, 93, 105], "parser": 39, "parse_arg": 39, "num_iter_per_epoch": 39, "print_freq": 39, "topk": 39, "top1": 39, "top5": 39, "test_load": 39, "offici": [40, 60, 97, 109], "wish": [40, 60, 105, 108, 109], "adj_confident_thresholds_shar": [40, 41], "labels_shar": [40, 41], "pred_probs_shar": [40, 41], "labelinspector": [40, 41, 99], "get_num_issu": [40, 41], "get_quality_scor": [40, 41], "update_confident_threshold": [40, 41], "score_label_qu": [40, 41], "split_arr": [40, 41], "span_classif": 40, "display_issu": [40, 43, 77, 78, 79, 80, 81, 82, 83, 108, 109], "mnist_pytorch": 40, "get_mnist_dataset": [40, 42], "get_sklearn_digits_dataset": [40, 42], "simplenet": [40, 42], "batch_siz": [40, 41, 42, 76, 78, 90, 93, 99, 105, 108], "log_interv": [40, 42], "momentum": [40, 42], "no_cuda": [40, 42], "test_batch_s": [40, 42, 93], "loader": [40, 42, 93], "set_predict_proba_request": [40, 42], "set_predict_request": [40, 42], "coteach": [40, 85], "mini": [41, 76, 78, 99], "low_self_confid": [41, 44, 64], "self_confid": [41, 44, 45, 49, 64, 66, 72, 80, 82, 87, 88, 99, 100], "conveni": [41, 54, 87, 88, 89, 96], "script": 41, "labels_fil": [41, 99], "pred_probs_fil": [41, 99], "quality_score_kwarg": 41, "num_issue_kwarg": 41, "return_mask": 41, "variant": [41, 62, 108], "read": [41, 46, 92, 99, 100, 105, 109], "zarr": [41, 99], "memmap": [41, 108], "pythonspe": 41, "mmap": [41, 99], "hdf5": 41, "further": [41, 43, 63, 64, 66, 69, 70, 78, 79, 89, 99], "yourfil": 41, "npy": [41, 98, 99, 108], "mmap_mod": [41, 108], "tip": [41, 44, 61, 99], "save_arrai": 41, "your_arrai": 41, "disk": [41, 98, 99], "npz": [41, 109], "maxim": [41, 62, 76, 78, 108], "multiprocess": [41, 44, 64, 76, 78, 93, 99], "linux": [41, 76, 78], "physic": [41, 44, 76, 78, 104], "psutil": [41, 44, 76, 78], "labels_arrai": [41, 58], "predprob": 41, "pred_probs_arrai": 41, "back": [41, 52, 70, 91, 99, 104, 105], "store_result": 41, "becom": [41, 97, 105], "verifi": [41, 54, 99, 102, 105], "long": [41, 62, 71, 102], "enough": [41, 57, 97, 99], "chunk": [41, 106], "ram": [41, 98], "end_index": 41, "labels_batch": 41, "pred_probs_batch": 41, "batch_result": 41, "indices_of_examples_with_issu": [41, 99], "shortcut": 41, "encount": [41, 44, 76], "1000": [41, 89, 96, 99, 105], "aggreg": [41, 45, 49, 62, 66, 69, 72, 82, 99, 100, 102], "seen": [41, 90, 99, 105, 109], "far": [41, 62], "label_quality_scor": [41, 66, 69, 72, 75, 100, 104], "method1": 41, "method2": 41, "normalized_margin": [41, 44, 45, 49, 64, 66, 72, 80, 82], "low_normalized_margin": [41, 44, 64], "issue_indic": [41, 69, 93], "update_num_issu": 41, "arr": [41, 99], "chunksiz": 41, "convnet": 42, "bespok": [42, 61], "download": [42, 89, 99, 105], "mnist": [42, 84, 89, 98], "handwritten": 42, "digit": [42, 89, 98], "last": [42, 49, 67, 70, 90, 91, 92, 99, 102, 104, 109], "sklearn_digits_test_s": 42, "01": [42, 72, 74, 89, 97, 100, 103, 104], "templat": 42, "flexibli": 42, "among": [42, 62, 100], "test_set": 42, "overrid": 42, "train_idx": [42, 57, 105], "train_label": [42, 88, 105], "span": 43, "sentenc": [43, 56, 80, 82, 83, 88, 96], "token_classif": [43, 56, 80, 82, 83, 99], "encourag": [44, 64, 72, 75], "multilabel_classif": [44, 63, 64, 66, 72, 99, 103], "pred_probs_by_class": 44, "prune_count_matrix_col": 44, "rank_by_kwarg": [44, 64, 72, 100], "num_to_remove_per_class": [44, 64], "bad": [44, 52, 64, 69, 72, 96, 99], "seem": [44, 100, 103], "aren": 44, "confidence_weighted_entropi": [44, 45, 49, 64, 66, 72, 80, 82], "label_issues_idx": [44, 72], "entropi": [44, 46, 48, 49, 71, 72], "prune_by_class": [44, 64, 100], "predicted_neq_given": [44, 64, 100], "prune_counts_matrix": 44, "smallest": [44, 72], "unus": 44, "number_of_mislabeled_examples_in_class_k": 44, "delet": [44, 84, 88, 99], "too": [44, 49, 52, 71, 92, 93, 99, 104], "thread": [44, 64], "window": [44, 89, 98], "shorter": [44, 67], "find_predicted_neq_given": 44, "find_label_issues_using_argmax_confusion_matrix": 44, "remove_noise_from_class": [45, 57], "clip_noise_r": [45, 57], "clip_valu": [45, 57], "value_count": [45, 57, 99], "value_counts_fill_missing_class": [45, 57], "get_missing_class": [45, 57], "round_preserving_sum": [45, 57], "round_preserving_row_tot": [45, 57], "estimate_pu_f1": [45, 57], "confusion_matrix": [45, 57], "print_square_matrix": [45, 57], "print_noise_matrix": [45, 57, 100], "print_inverse_noise_matrix": [45, 57], "print_joint_matrix": [45, 57, 100], "compress_int_arrai": [45, 57], "train_val_split": [45, 57], "subset_x_i": [45, 57], "subset_label": [45, 57], "subset_data": [45, 57], "extract_indices_tf": [45, 57], "unshuffle_tensorflow_dataset": [45, 57], "is_torch_dataset": [45, 57], "is_tensorflow_dataset": [45, 57], "csr_vstack": [45, 57], "append_extra_datapoint": [45, 57], "get_num_class": [45, 57], "num_unique_class": [45, 57], "get_unique_class": [45, 57], "format_label": [45, 57], "smart_display_datafram": [45, 57], "force_two_dimens": [45, 57], "latent_algebra": [45, 85], "compute_ps_py_inv_noise_matrix": [45, 47], "compute_py_inv_noise_matrix": [45, 47], "compute_inv_noise_matrix": [45, 47], "compute_noise_matrix_from_invers": [45, 47], "compute_pi": [45, 47], "compute_pyx": [45, 47], "label_quality_util": 45, "get_normalized_entropi": [45, 46], "multilabel_util": [45, 103], "stack_compl": [45, 50], "get_onehot_num_class": [45, 50], "int2onehot": [45, 50, 103], "onehot2int": [45, 50, 103], "multilabel_scor": [45, 66], "classlabelscor": [45, 49], "exponential_moving_averag": [45, 49, 66], "softmin": [45, 49, 66, 69, 78, 82], "possible_method": [45, 49], "multilabelscor": [45, 49], "get_class_label_quality_scor": [45, 49], "multilabel_pi": [45, 49], "get_cross_validated_multilabel_pred_prob": [45, 49], "default_k": [45, 51, 52], "features_to_knn": [45, 51, 52], "construct_knn_graph_from_index": [45, 51, 52, 54], "create_knn_graph_and_index": [45, 51, 52], "correct_knn_graph": [45, 51, 52, 97], "correct_knn_distances_and_indices_with_exact_duplicate_sets_inplac": [45, 51, 52], "correct_knn_distances_and_indic": [45, 51, 52], "high_dimension_cutoff": [45, 51, 53], "row_count_cutoff": [45, 51, 53], "decide_euclidean_metr": [45, 51, 53], "decide_default_metr": [45, 51, 53], "construct_knn": [45, 51, 54], "transform_distances_to_scor": [45, 55], "correct_precision_error": [45, 55], "token_classification_util": [45, 109], "get_sent": [45, 56, 109], "filter_sent": [45, 56, 109], "process_token": [45, 56], "merge_prob": [45, 56], "color_sent": [45, 56], "assert_valid_input": [45, 58], "assert_valid_class_label": [45, 58], "assert_nonempty_input": [45, 58], "assert_indexing_work": [45, 58], "labels_to_arrai": [45, 58], "labels_to_list_multilabel": [45, 58], "min_allowed_prob": 46, "wikipedia": 46, "activ": [46, 48, 61, 62, 84, 102], "towardsdatasci": 46, "cheatsheet": 46, "ec57bc067c0b": 46, "clip": [46, 57, 89, 97], "behav": 46, "unnecessari": [46, 99], "slightli": [46, 87, 88, 90], "interv": [46, 49, 105], "herein": 47, "inexact": 47, "cours": 47, "propag": 47, "throughout": [47, 57, 74, 83, 89, 102, 108, 109], "increas": [47, 55, 69, 71, 72, 89, 91, 97, 99, 102, 103, 109], "dot": [47, 82, 99], "true_labels_class_count": 47, "pyx": 47, "multiannot": 48, "assert_valid_inputs_multiannot": 48, "labels_multiannot": [48, 62], "ensembl": [48, 49, 62, 72, 87, 95, 99, 103, 105, 107], "allow_single_label": 48, "annotator_id": 48, "assert_valid_pred_prob": 48, "pred_probs_unlabel": [48, 62], "format_multiannotator_label": [48, 62, 102], "formatted_label": [48, 57], "old": [48, 57, 85, 89, 98], "check_consensus_label_class": 48, "consensus_label": [48, 62, 102], "consensus_method": [48, 62], "consensu": [48, 62, 84, 101, 109], "establish": [48, 61, 88, 107], "compute_soft_cross_entropi": 48, "soft": [48, 98], "find_best_temp_scal": 48, "coarse_search_rang": [48, 74, 99], "fine_search_s": [48, 74, 99], "temperatur": [48, 49, 69, 78, 82], "scale": [48, 55, 87, 97, 98, 99, 105, 108], "factor": [48, 49, 55, 76, 78], "minim": [48, 69, 105], "temp_scale_pred_prob": 48, "temp": 48, "sharpen": [48, 98], "smoothen": 48, "get_normalized_margin_for_each_label": [49, 72], "get_confidence_weighted_entropy_for_each_label": [49, 72], "scorer": 49, "alpha": [49, 66, 69, 90, 91, 92, 97, 100, 103, 107], "exponenti": 49, "ema": 49, "s_1": 49, "s_k": 49, "ema_k": 49, "accord": [49, 64, 95, 96, 100, 109], "formula": [49, 55], "_t": 49, "cdot": 49, "s_t": 49, "qquad": 49, "leq": 49, "_1": 49, "recent": [49, 109], "success": 49, "previou": [49, 52, 93, 95, 99, 104], "discount": 49, "s_ema": 49, "175": [49, 93, 100, 104], "underflow": 49, "nan": [49, 62, 87, 95, 97, 102, 107], "aggregated_scor": 49, "base_scor": 49, "base_scorer_kwarg": 49, "aggregator_kwarg": [49, 66], "n_sampl": [49, 97], "n_label": 49, "worst": [49, 102], "class_label_quality_scor": 49, "452": 49, "new_scor": 49, "575": 49, "get_label_quality_scores_per_class": [49, 65, 66], "ml_scorer": 49, "binar": [49, 50], "reformat": [49, 89], "wider": 49, "splitter": 49, "kfold": [49, 93], "onevsrestclassifi": [49, 103], "randomforestclassifi": [49, 100, 103], "n_split": [49, 92, 93, 103], "pred_prob_slic": 50, "onehot": 50, "hot": [50, 64, 70, 76, 79, 87, 95, 98, 99, 107, 108], "onehot_matrix": 50, "pairwis": [51, 53, 71], "reli": [52, 71, 88, 89, 90, 91, 92, 96, 104, 105, 107], "sklearn_knn_kwarg": 52, "correction_featur": 52, "discourag": 52, "flexibl": [52, 99], "manner": [52, 66, 87, 88, 97, 102, 107], "701": 52, "900": [52, 87, 95, 107], "436": 52, "000": [52, 88, 93, 96, 98, 109], "idea": [52, 72, 90, 104], "dens": [52, 61, 97], "33140006": 52, "76210367": 52, "correct_exact_dupl": 52, "mutual": [52, 63, 103], "vari": [52, 69, 92], "exact_duplicate_set": 52, "main": [52, 62, 90], "front": [52, 98], "consider": 52, "capabl": [52, 84], "come": [52, 57, 90, 91, 92, 99, 108], "misidentif": 52, "corrected_dist": 52, "corrected_indic": 52, "sqrt": 52, "distant": 52, "suitabl": [53, 62, 87, 95, 97], "slower": 53, "decid": [53, 62, 88, 96, 98, 102, 107, 109], "predefin": 53, "met": [53, 109], "euclidean_dist": [53, 71], "spatial": [53, 71], "decis": [53, 87, 90, 91, 92], "That": [53, 100, 103], "cosine_dist": 53, "knn_kwarg": 54, "html": [54, 57, 67, 70, 71, 89, 90, 91, 92, 93, 95, 96, 99, 100], "kneighbor": 54, "metric_param": 54, "n_features_in_": 54, "effective_metric_params_": 54, "effective_metric_": 54, "n_samples_fit_": 54, "__sklearn_is_fitted__": 54, "conduct": 54, "is_fit": 54, "trail": 54, "underscor": 54, "avg_dist": 55, "scaling_factor": 55, "exp": [55, 71, 72, 91], "dt": 55, "right": [55, 67, 70, 88, 96, 103, 104, 105], "strength": [55, 70, 97], "pronounc": 55, "differenti": 55, "ly": 55, "rule": [55, 56, 98], "thumb": 55, "ood_features_scor": [55, 71, 105], "88988177": 55, "80519832": 55, "toler": 55, "minkowski": 55, "noth": 55, "epsilon": 55, "sensibl": 55, "fixed_scor": 55, "readabl": 56, "lambda": [56, 89, 91, 99, 102], "long_sent": 56, "headlin": 56, "charact": [56, 57], "s1": 56, "s2": 56, "processed_token": 56, "alecnlcb": 56, "entiti": [56, 84, 99, 109], "mapped_ent": 56, "unique_ident": 56, "loc": [56, 90, 91, 92, 93, 95, 97, 109], "nbitbas": [56, 66], "probs_merg": 56, "0125": [56, 82], "0375": 56, "075": 56, "025": 56, "color": [56, 79, 90, 91, 92, 95, 97, 100, 103, 105, 107, 108], "red": [56, 70, 90, 91, 92, 97, 98, 100, 103, 104, 105, 108], "colored_sent": 56, "termcolor": 56, "31msentenc": 56, "0m": 56, "ancillari": 57, "class_without_nois": 57, "any_other_class": 57, "choos": [57, 72, 87, 95, 99, 100, 107], "tradition": 57, "new_sum": 57, "fill": 57, "major": [57, 62, 85, 90, 93, 105], "versu": [57, 100], "obviou": 57, "cgdeboer": 57, "iteround": 57, "reach": 57, "prob_s_eq_1": 57, "claesen": 57, "f1": [57, 70, 96, 100], "BE": 57, "left_nam": 57, "top_nam": 57, "titl": [57, 90, 91, 92, 97, 100, 103, 105], "short_titl": 57, "round_plac": 57, "pretti": [57, 90, 100], "joint_matrix": 57, "num_possible_valu": 57, "holdout_idx": 57, "extract": [57, 71, 88, 89, 95, 96, 102, 105, 108], "allow_shuffl": 57, "turn": [57, 84, 104], "shuffledataset": 57, "histori": 57, "pre_x": 57, "buffer_s": 57, "csr_matric": 57, "append": [57, 89, 90, 93, 98, 99, 100, 102, 103, 104, 105, 109], "bottom": [57, 67, 70, 97, 104], "to_data": 57, "from_data": 57, "taken": 57, "label_matrix": 57, "canon": 57, "displai": [57, 70, 79, 83, 88, 89, 90, 95, 96, 97, 100, 109], "jupyt": [57, 89, 90, 91, 92, 93, 98, 99, 100, 102, 103, 105, 107, 109], "notebook": [57, 62, 89, 90, 92, 98, 99, 100, 102, 103, 104, 108, 109], "consol": 57, "allow_missing_class": 58, "allow_one_class": 58, "length_x": 58, "labellik": 58, "labels_list": [58, 64], "keraswrappermodel": [60, 61, 84], "keraswrappersequenti": [60, 61], "tf": [61, 89], "legaci": 61, "newer": 61, "interim": 61, "advis": [61, 103], "stabil": [61, 71], "until": 61, "accommod": 61, "keraswrapp": 61, "huggingface_keras_imdb": 61, "unit": [61, 109], "model_kwarg": [61, 74], "compile_kwarg": 61, "sparsecategoricalcrossentropi": 61, "layer": [61, 88, 89, 96, 105], "my_keras_model": 61, "from_logit": 61, "declar": 61, "apply_softmax": 61, "analysi": 62, "analyz": [62, 84, 100, 102, 103], "get_label_quality_multiannot": [62, 102], "vote": 62, "crowdsourc": [62, 84, 102], "dawid": [62, 102], "skene": [62, 102], "analog": [62, 90, 98, 102], "chosen": [62, 72, 99, 102], "crowdlab": [62, 102], "unlabel": [62, 93, 95, 96, 102, 105, 108], "get_active_learning_scor": [62, 102], "activelab": [62, 102], "priorit": [62, 69, 104, 108, 109], "showcas": 62, "best_qual": 62, "quality_method": 62, "calibrate_prob": 62, "return_detailed_qu": 62, "return_annotator_stat": 62, "return_weight": 62, "label_quality_score_kwarg": 62, "did": [62, 63, 87, 88, 89, 95, 100, 102, 107], "majority_vot": 62, "broken": [62, 70, 98, 107], "highest": [62, 70, 91, 93, 106], "0th": 62, "consensus_quality_scor": [62, 102], "annotator_agr": [62, 102], "reman": 62, "1st": 62, "2nd": [62, 76], "3rd": 62, "consensus_label_suffix": 62, "consensus_quality_score_suffix": 62, "suffix": 62, "emsembl": 62, "weigh": [62, 98], "agreement": [62, 102], "agre": 62, "prevent": [62, 99], "overconfid": [62, 106], "detailed_label_qu": [62, 102], "annotator_stat": [62, 102], "model_weight": 62, "annotator_weight": 62, "warn": [62, 91, 92, 93, 95, 96, 97, 99, 100], "labels_info": 62, "num_annot": [62, 102], "deriv": [62, 102], "quality_annotator_1": 62, "quality_annotator_2": 62, "quality_annotator_m": 62, "annotator_qu": [62, 102], "num_examples_label": [62, 102], "agreement_with_consensu": [62, 102], "worst_class": [62, 102], "trustworthi": [62, 102, 107], "get_label_quality_multiannotator_ensembl": 62, "weigtht": 62, "budget": 62, "retrain": [62, 88, 107], "active_learning_scor": 62, "active_learning_scores_unlabel": 62, "get_active_learning_scores_ensembl": 62, "henc": [62, 89, 91, 102], "get_majority_vote_label": [62, 102], "event": 62, "lastli": [62, 95], "convert_long_to_wide_dataset": 62, "labels_multiannotator_long": 62, "wide": [62, 87, 88, 89, 97], "labels_multiannotator_wid": 62, "common_multilabel_issu": [63, 65], "exclus": [63, 103], "rank_classes_by_multilabel_qu": [63, 65], "overall_multilabel_health_scor": [63, 65], "multilabel_health_summari": [63, 65], "classes_by_multilabel_qu": 63, "inner": [64, 78, 97], "find_multilabel_issues_per_class": [64, 65], "per_class_label_issu": 64, "label_issues_list": 64, "pred_probs_list": [64, 72, 93, 100], "anim": [65, 105], "rat": 65, "predat": 65, "pet": 65, "reptil": 65, "box": [67, 69, 70, 98, 104], "object_detect": [67, 69, 70, 104], "return_indices_ranked_by_scor": [67, 104], "overlapping_label_check": [67, 69], "suboptim": [67, 69], "locat": [67, 69, 97, 104, 108, 109], "bbox": [67, 70, 104], "image_nam": [67, 70], "y1": [67, 70, 104], "y2": [67, 70, 104], "later": [67, 70, 71, 88, 109], "corner": [67, 70, 104], "xyxi": [67, 70, 104], "io": [67, 70, 89, 97, 98], "keras_cv": [67, 70], "bounding_box": [67, 70, 104], "detectron": [67, 70, 104], "detectron2": [67, 70, 104], "readthedoc": [67, 70], "en": [67, 70], "latest": [67, 70], "visual": [67, 68, 70, 87, 90, 91, 92, 93, 107, 109], "draw_box": [67, 70], "mmdetect": [67, 70, 104], "swap": [67, 69, 79, 83], "penal": [67, 69], "concern": [67, 69, 84, 92], "issues_from_scor": [68, 69, 77, 78, 79, 81, 82, 83, 104, 108, 109], "compute_overlooked_box_scor": [68, 69], "compute_badloc_box_scor": [68, 69], "compute_swap_box_scor": [68, 69], "pool_box_scores_per_imag": [68, 69], "object_counts_per_imag": [68, 70, 104], "bounding_box_size_distribut": [68, 70, 104], "class_label_distribut": [68, 70, 104], "get_sorted_bbox_count_idx": [68, 70], "plot_class_size_distribut": [68, 70], "plot_class_distribut": [68, 70], "get_average_per_class_confusion_matrix": [68, 70], "calculate_per_class_metr": [68, 70], "aggregation_weight": 69, "imperfect": [69, 99], "chose": [69, 102, 104], "imperfectli": [69, 104], "dirti": [69, 72, 75, 107], "subtyp": 69, "badloc": 69, "nonneg": 69, "high_probability_threshold": 69, "auxiliary_input": [69, 70], "iou": [69, 70], "heavili": 69, "auxiliarytypesdict": 69, "pred_label": [69, 88], "pred_label_prob": 69, "pred_bbox": 69, "lab_label": 69, "lab_bbox": 69, "similarity_matrix": 69, "min_possible_similar": 69, "scores_overlook": 69, "low_probability_threshold": 69, "scores_badloc": 69, "accident": [69, 88, 95, 96, 99], "scores_swap": 69, "box_scor": 69, "image_scor": [69, 78, 108], "discov": [70, 92, 97, 109], "abnorm": [70, 93, 104], "auxiliari": [70, 105, 108], "_get_valid_inputs_for_compute_scor": 70, "object_count": 70, "down": 70, "bbox_siz": 70, "class_distribut": 70, "plot": [70, 90, 91, 92, 97, 100, 103, 105, 107, 108], "sorted_idx": [70, 105], "class_to_show": 70, "hidden": [70, 90, 105], "max_class_to_show": 70, "plt": [70, 79, 90, 91, 92, 93, 97, 100, 103, 105, 107], "matplotlib": [70, 79, 90, 91, 92, 93, 97, 100, 103, 104, 105, 107], "pyplot": [70, 79, 90, 91, 92, 93, 97, 100, 103, 105, 107], "prediction_threshold": 70, "overlai": [70, 104], "figsiz": [70, 90, 91, 92, 93, 97, 100, 103, 105], "save_path": [70, 104], "blue": [70, 98, 100, 104], "overlaid": 70, "side": [70, 98, 104], "figur": [70, 97, 100, 103, 105, 107], "extens": [70, 100, 102], "png": [70, 104], "pdf": [70, 71], "svg": 70, "num_proc": [70, 93], "intersect": [70, 99], "tp": 70, "fp": 70, "ground": [70, 98, 100, 102, 107], "truth": [70, 100, 102, 107], "bias": [70, 97], "avg_metr": 70, "distionari": 70, "95": [70, 80, 82, 95, 98, 100, 107], "per_class_metr": 70, "Of": 71, "find_top_issu": [71, 72, 105], "behind": [71, 100], "dist_metr": 71, "subtract": [71, 72], "renorm": [71, 72, 99], "least_confid": 71, "sum_": 71, "log": [71, 72, 85, 97], "softmax": [71, 78, 82, 93], "literatur": 71, "gen": 71, "liu": 71, "lochman": 71, "zach": 71, "openaccess": 71, "thecvf": 71, "cvpr2023": 71, "liu_gen_pushing_the_limits_of_softmax": 71, "based_out": 71, "distribution_detection_cvpr_2023_pap": 71, "fit_scor": [71, 105], "ood_predictions_scor": 71, "pretrain": [71, 88, 89, 96, 105], "adjust_confident_threshold": 71, "probabilist": [71, 87, 89, 91, 92, 95, 96, 105, 106], "order_label_issu": [72, 85], "whichev": [72, 106], "argsort": [72, 88, 93, 96, 100, 104, 105, 107], "max_": 72, "get_label_quality_ensemble_scor": [72, 99, 100], "weight_ensemble_members_bi": 72, "custom_weight": 72, "log_loss_search_t_valu": 72, "0001": [72, 98], "scheme": 72, "log_loss_search": 72, "log_loss": [72, 96], "1e0": 72, "1e1": 72, "1e2": 72, "2e2": 72, "quality_scor": [72, 105], "forth": 72, "top_issue_indic": 72, "rank_bi": [72, 85], "weird": [72, 83], "minu": 72, "prob_label": 72, "max_prob_not_label": 72, "AND": [72, 96], "get_epistemic_uncertainti": [73, 74], "get_aleatoric_uncertainti": [73, 74], "corrupt": [74, 107], "linearregress": [74, 99, 107], "y_with_nois": 74, "n_boot": [74, 99], "include_aleatoric_uncertainti": [74, 99], "sole": [74, 87, 91, 102, 105], "bootstrap": [74, 99, 107], "resampl": [74, 89, 99], "epistem": [74, 99, 105, 107], "aleator": [74, 99, 107], "model_final_kwarg": 74, "coars": 74, "thorough": [74, 99], "fine": [74, 88, 89, 96, 105], "grain": 74, "grid": 74, "varianc": [74, 100], "epistemic_uncertainti": 74, "residu": [74, 75, 99], "deviat": [74, 104, 107], "aleatoric_uncertainti": 74, "outr": 75, "contin": 75, "raw": [75, 84, 85, 92, 93, 98, 99, 102, 104, 105, 107], "aka": [75, 89, 100, 104, 107, 109], "00323821": 75, "33692597": 75, "00191686": 75, "semant": [76, 78, 79, 101], "pixel": [76, 78, 79, 93, 105, 108], "h": [76, 78, 79, 108], "height": [76, 78, 79, 108], "w": [76, 78, 79, 108], "width": [76, 78, 79, 108], "labels_one_hot": [76, 79, 108], "stream": [76, 90, 105, 109], "downsampl": [76, 78, 108], "shrink": [76, 78], "divis": [76, 78, 91], "common_label_issu": [77, 79, 81, 83, 108, 109], "filter_by_class": [77, 79, 108], "segmant": [78, 79], "num_pixel_issu": [78, 108], "product": [78, 93, 97, 99], "pixel_scor": [78, 108], "enter": 79, "legend": [79, 90, 91, 92, 97, 103, 104, 107, 108], "colormap": 79, "background": [79, 97], "person": [79, 99, 104, 108, 109], "ambigu": [79, 83, 88, 89, 96, 98, 100, 109], "systemat": [79, 83, 102], "misunderstood": [79, 83], "issues_df": [79, 93], "class_index": 79, "issues_subset": [79, 83], "filter_by_token": [81, 83, 109], "token_score_method": 82, "sentence_score_method": 82, "sentence_score_kwarg": 82, "compris": [82, 83], "token_scor": [82, 109], "converg": 82, "toward": [82, 97], "_softmin_sentence_scor": 82, "sentence_scor": [82, 109], "token_info": 82, "02": [82, 91, 92, 97, 100, 104], "03": [82, 95, 97, 98, 100, 104, 105, 109], "04": [82, 95, 97, 104], "08": [82, 97, 100, 104, 107, 109], "commonli": [83, 85, 91, 92, 103, 109], "But": [83, 96, 100, 107, 109], "restrict": [83, 99], "reliabl": [84, 87, 89, 97, 99, 102, 108], "thousand": 84, "imagenet": [84, 98], "popular": [84, 102, 104], "centric": [84, 93, 95, 96, 101], "minut": [84, 87, 88, 89, 95, 96, 98, 102, 103, 104, 107, 108, 109], "conda": 84, "feature_embed": [84, 105], "Then": [84, 87, 88, 93, 99], "your_dataset": [84, 89, 91, 92, 93, 95, 96, 99], "column_name_of_label": [84, 89, 91, 92, 93, 95, 96], "plagu": [84, 92], "untrain": 84, "\u30c4": 84, "label_issues_info": [84, 92], "sklearn_compatible_model": 84, "framework": [84, 103, 104], "complianc": 84, "tag": [84, 103, 109], "sequenc": 84, "recognit": [84, 89, 99, 109], "train_data": [84, 87, 88, 105, 107], "gotten": 84, "test_data": [84, 87, 88, 90, 100, 103, 105, 107], "deal": [84, 92, 97], "tutori": [84, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 99, 100, 102, 103, 104, 105, 107, 108, 109], "feel": [84, 89, 92, 99], "ask": [84, 99], "slack": [84, 99], "project": [84, 107], "welcom": 84, "commun": [84, 99], "guidelin": [84, 104], "piec": 84, "smart": [84, 93, 95, 96, 99], "edit": [84, 99], "easier": [84, 97, 100], "unreli": [84, 87, 89, 95, 96], "link": [84, 89, 98, 104], "older": 85, "outlin": 85, "substitut": 85, "v2": [85, 87, 95], "get_noise_indic": 85, "psx": 85, "sorted_index_method": 85, "order_label_error": 85, "label_errors_bool": 85, "latent_estim": 85, "num_label_error": 85, "learningwithnoisylabel": 85, "neatli": 85, "organ": [85, 87, 95, 98, 109], "reorgan": 85, "baseline_method": 85, "incorpor": [85, 100], "research": [85, 100], "polyplex": 85, "terminologi": 85, "label_error": 85, "quickstart": [87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 102, 103, 104, 105, 107, 108, 109], "sql": [87, 95], "databas": [87, 95], "excel": [87, 95], "parquet": [87, 95], "student": [87, 95, 107, 109], "grade": [87, 95, 107], "exam": [87, 95, 107], "letter": [87, 95, 109], "hundr": [87, 95], "mistak": [87, 88, 93, 95, 96], "extratreesclassifi": 87, "extratre": 87, "ranked_label_issu": [87, 88], "branch": [87, 88, 89, 90, 91, 92, 93, 95, 96, 98, 100, 102, 103, 104, 105, 107], "preprocess": [87, 88, 92, 95, 97, 105, 107], "standardscal": [87, 95, 105], "labelencod": [87, 88], "train_test_split": [87, 88, 90, 91, 92, 105], "accuracy_scor": [87, 88, 89, 96, 100], "grades_data": [87, 95], "read_csv": [87, 88, 95, 96, 97, 107], "demo": [87, 92, 95, 103], "stud_id": [87, 95], "exam_1": [87, 95, 107], "exam_2": [87, 95, 107], "exam_3": [87, 95, 107], "letter_grad": [87, 95], "f48f73": [87, 95], "53": [87, 90, 91, 92, 95, 97, 98, 103, 104], "00": [87, 91, 92, 95, 97, 98, 105], "77": [87, 91, 92, 95, 104], "0bd4e7": [87, 95], "81": [87, 95, 96, 104, 107, 109], "great": [87, 90, 95, 98], "particip": [87, 95], "cb9d7a": [87, 95], "61": [87, 95, 97, 100, 104, 107], "94": [87, 95, 98, 100, 104, 107], "9acca4": [87, 95], "48": [87, 95, 97, 98, 100, 104], "x_raw": [87, 95], "labels_raw": 87, "interg": [87, 88], "categorical_featur": [87, 107], "x_encod": [87, 95], "get_dummi": [87, 95, 107], "drop_first": [87, 95], "numeric_featur": [87, 95], "scaler": [87, 95, 105], "x_process": [87, 95], "fit_transform": [87, 95, 97], "bring": [87, 88, 93, 95, 96, 102, 107], "byod": [87, 88, 93, 95, 96, 102, 107], "tress": 87, "held": [87, 89, 95, 96, 98, 104, 105, 106], "straightforward": [87, 89, 95], "benefit": [87, 89, 106, 108], "num_crossval_fold": [87, 89, 95, 102], "tabl": [87, 95, 98, 102], "212": [87, 100], "review": [87, 88, 92, 95, 96, 98, 99, 100, 104, 107, 108, 109], "iloc": [87, 88, 89, 95, 96, 107], "92": [87, 91, 100, 104], "93": [87, 98, 104, 107], "827": 87, "99": [87, 97, 98, 100], "86": [87, 92, 93, 95, 100, 104, 107], "74": [87, 97, 104, 107], "637": [87, 95], "79": [87, 98, 104], "65": [87, 91, 97, 104], "cheat": 87, "0pt": 87, "120": [87, 91, 92], "233": 87, "83": [87, 100, 104, 107, 109], "76": [87, 90, 100, 103, 104, 107], "suspici": [87, 95], "carefulli": [87, 93, 95, 96], "examin": [87, 90, 91, 92, 95, 104], "labels_train": 87, "labels_test": 87, "test_siz": [87, 88, 90, 91, 92], "acc_og": [87, 88], "783068783068783": 87, "robustli": [87, 88, 107], "14": [87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109], "acc_cl": [87, 88], "8095238095238095": 87, "blindli": [87, 88, 89, 99, 107], "trust": [87, 88, 89, 99, 100, 102, 106, 107], "effort": [87, 88, 107], "intent": [88, 96], "servic": [88, 96, 99], "onlin": [88, 96], "bank": [88, 96, 98], "banking77": [88, 96], "oo": [88, 96], "categori": [88, 93, 96, 97], "shortlist": [88, 96, 107], "scope": [88, 96], "logist": [88, 90, 91, 92, 96, 102, 105], "probabilit": [88, 89], "drop": [88, 95, 97, 99, 102, 107], "earlier": [88, 109], "sentence_transform": [88, 96], "sentencetransform": [88, 96], "payment": [88, 96], "cancel_transf": [88, 96], "transfer": [88, 96], "fund": [88, 96], "cancel": [88, 96], "transact": [88, 96], "my": [88, 96], "revert": [88, 96], "morn": [88, 96], "realis": [88, 96], "yesterdai": [88, 96], "rent": [88, 96], "tomorrow": [88, 96], "raw_text": [88, 96], "raw_label": 88, "raw_train_text": 88, "raw_test_text": 88, "raw_train_label": 88, "raw_test_label": 88, "getting_spare_card": [88, 96], "supported_cards_and_curr": [88, 96], "apple_pay_or_google_pai": [88, 96], "beneficiary_not_allow": [88, 96], "change_pin": [88, 96], "lost_or_stolen_phon": [88, 96], "visa_or_mastercard": [88, 96], "card_payment_fee_charg": [88, 96], "card_about_to_expir": [88, 96], "card": [88, 96, 98], "utter": [88, 96], "encond": 88, "test_label": [88, 100, 103, 105], "suit": [88, 96, 97, 98, 99], "electra": [88, 96], "discrimin": [88, 96], "googl": [88, 90, 96], "train_text": 88, "test_text": 88, "home": [88, 91, 92, 96, 97, 98], "runner": [88, 91, 92, 96, 97], "google_electra": [88, 96], "pool": [88, 96, 99, 105], "opt": [88, 89, 92, 93, 95, 96, 97, 100], "hostedtoolcach": [88, 89, 92, 93, 95, 96, 97, 100], "x64": [88, 89, 92, 93, 95, 96, 97, 100], "lib": [88, 89, 92, 93, 95, 96, 97, 100], "python3": [88, 89, 92, 93, 95, 96, 97, 100], "site": [88, 89, 92, 93, 95, 96, 97, 100], "_util": [88, 96], "831": [88, 96], "userwarn": [88, 89, 91, 92, 96, 97], "typedstorag": [88, 96], "untypedstorag": [88, 96], "untyped_storag": [88, 96], "fget": [88, 96], "__get__": [88, 96], "owner": [88, 96], "leverag": [88, 89, 96, 99, 100, 102], "computation": [88, 89, 96], "intens": [88, 89, 96], "400": [88, 90, 96], "858371": 88, "547274": 88, "826228": 88, "966008": 88, "792449": 88, "identified_issu": [88, 107], "lowest_quality_label": [88, 89, 96, 100, 107], "to_numpi": [88, 96, 97, 99, 107], "44": [88, 97, 98, 103, 104], "646": 88, "390": 88, "628": 88, "121": [88, 90, 100], "702": 88, "863": [88, 89], "135": 88, "337": [88, 104], "735": [88, 93], "print_as_df": 88, "inverse_transform": 88, "charg": [88, 96], "cash": [88, 96], "holidai": [88, 96], "sent": [88, 96, 109], "mine": [88, 96], "expir": [88, 96], "fight": 88, "hors": [88, 98, 105], "duck": [88, 98], "me": [88, 96, 97], "whoever": [88, 96], "consum": [88, 107], "18": [88, 89, 90, 96, 97, 98, 99, 100, 104, 105, 107, 108], "baseline_model": [88, 107], "87": [88, 92, 93, 104, 107], "acceler": [88, 107], "19": [88, 89, 90, 93, 96, 97, 98, 99, 100, 104, 105, 107, 108], "89": [88, 90, 91, 95, 104, 107], "spoken": 89, "500": [89, 105, 109], "english": [89, 98], "pronunci": 89, "wav": 89, "huggingfac": [89, 91, 92, 93, 99], "voxceleb": 89, "speech": [89, 109], "your_pred_prob": [89, 90, 91, 92, 95, 96], "tensorflow_io": 89, "huggingface_hub": 89, "reproduc": [89, 95, 97, 100, 102], "command": 89, "wget": [89, 104, 108, 109], "navig": 89, "browser": 89, "jakobovski": 89, "archiv": [89, 109], "v1": 89, "tar": [89, 105], "gz": [89, 105], "mkdir": [89, 109], "spoken_digit": 89, "xf": 89, "6_nicolas_32": 89, "data_path": 89, "listdir": 89, "nondeterminist": 89, "file_nam": 89, "endswith": 89, "file_path": 89, "join": [89, 90, 93, 97, 99], "7_george_26": 89, "0_nicolas_24": 89, "0_nicolas_6": 89, "listen": 89, "display_exampl": 89, "expand": [89, 90, 91, 92, 93, 98, 100, 102, 103, 105, 107, 109], "pulldown": [89, 90, 91, 92, 93, 98, 100, 102, 103, 105, 107, 109], "colab": [89, 90, 91, 92, 93, 98, 99, 100, 102, 103, 105, 107, 109], "tfio": 89, "pathlib": 89, "ipython": 89, "load_wav_16k_mono": 89, "filenam": 89, "khz": 89, "file_cont": 89, "read_fil": 89, "sample_r": 89, "decode_wav": 89, "desired_channel": 89, "squeez": 89, "rate_in": 89, "rate_out": 89, "16000": 89, "wav_file_nam": 89, "audio_r": 89, "wav_file_exampl": 89, "plai": [89, 98, 99], "button": 89, "wav_file_name_exampl": 89, "7_jackson_43": 89, "hear": 89, "extractor": 89, "encoderclassifi": 89, "spkrec": 89, "xvect": 89, "feature_extractor": 89, "from_hparam": 89, "run_opt": 89, "uncom": [89, 97], "ffmpeg": 89, "backend": 89, "wav_audio_file_path": 89, "torchaudio": 89, "extract_audio_embed": 89, "emb": [89, 93], "signal": 89, "encode_batch": 89, "embeddings_list": [89, 93], "embeddings_arrai": 89, "650": 89, "stft": 89, "return_complex": 89, "view_as_r": 89, "recov": 89, "trigger": 89, "aten": 89, "src": 89, "nativ": 89, "spectralop": 89, "cpp": 89, "_vf": 89, "n_fft": 89, "hop_length": 89, "win_length": 89, "attr": 89, "512": [89, 93], "196311": 89, "319459": 89, "478975": 89, "2890875": 89, "8170238": 89, "89265": 89, "898056": 89, "256195": 89, "559641": 89, "559721": 89, "62067": 89, "285245": 89, "21": [89, 90, 91, 97, 98, 99, 100, 104, 107, 109], "709627": 89, "5033693": 89, "913803": 89, "819831": 89, "1831515": 89, "208763": 89, "084257": 89, "3210397": 89, "005453": 89, "216152": 89, "478235": 89, "6821785": 89, "053807": 89, "242471": 89, "091424": 89, "78334856": 89, "03954": 89, "23": [89, 90, 93, 97, 98, 100, 104, 107], "569176": 89, "761097": 89, "1258295": 89, "753237": 89, "3508866": 89, "598274": 89, "23712": 89, "2500": 89, "tol": 89, "decreas": [89, 99], "cv_accuraci": 89, "9708": 89, "issue_type_descript": [89, 90, 91, 92, 93, 95, 96, 100], "lt": [89, 90, 91, 92, 93, 95, 96, 97, 98, 100, 102, 105], "gt": [89, 90, 91, 92, 93, 95, 96, 97, 100, 102, 109], "9976": 89, "986": 89, "002161": 89, "176": [89, 98, 100, 103], "002483": 89, "2318": 89, "004411": 89, "1005": 89, "004857": 89, "1871": 89, "007494": 89, "040587": 89, "999207": 89, "999377": 89, "975220": 89, "999367": 89, "identified_label_issu": [89, 96], "516": 89, "1946": 89, "469": 89, "2132": 89, "worth": [89, 100], "6_yweweler_25": 89, "7_nicolas_43": 89, "6_theo_27": 89, "6_yweweler_36": 89, "6_yweweler_14": 89, "6_yweweler_35": 89, "6_nicolas_8": 89, "sound": 89, "quit": [89, 105], "load_ext": 90, "autoreload": 90, "ve": [90, 98, 99, 100, 102, 104], "prove": 90, "monitor": [90, 98], "ran": 90, "data_monitor": 90, "your_datalab": 90, "new_data_batch": 90, "your_label": 90, "get_your_label": 90, "your_featur": [90, 96], "get_featur": 90, "websit": [90, 98], "todo": 90, "get_ipython": 90, "elisno": 90, "b0ca6e5ca84b14ac115c247b500b4f231df963a3": 90, "cmd": 90, "dep": 90, "dependencies_test": 90, "missing_depend": 90, "__import__": 90, "importerror": 90, "sep": [90, 97, 109], "npleas": 90, "toi": [90, 91, 92, 93, 97, 98, 100, 102], "mid": [90, 91, 92], "workflow": [90, 94, 101, 107], "unseen": 90, "inf": [90, 91, 92], "bins_map": [90, 91, 92], "create_data": [90, 91, 92], "800": 90, "y_bin": [90, 91, 92], "y_i": [90, 91, 92], "y_bin_idx": [90, 91, 92], "y_train": [90, 91, 92, 100, 107], "y_test": [90, 91, 92, 100, 107], "y_train_idx": [90, 91, 92], "y_test_idx": [90, 91, 92], "slide": [90, 91, 92, 98], "frame": [90, 91, 92], "x_out": [90, 91, 92], "tini": [90, 91, 92], "concaten": [90, 91, 92, 99, 106], "y_out": [90, 91, 92], "y_out_bin": [90, 91, 92], "y_out_bin_idx": [90, 91, 92], "exact_duplicate_idx": [90, 91, 92], "x_duplic": [90, 91, 92], "y_duplic": [90, 91, 92], "y_duplicate_idx": [90, 91, 92], "noisy_labels_idx": [90, 91, 92, 103], "train_x": 90, "test_x": 90, "train_y_tru": 90, "test_y_tru": 90, "train_i": 90, "test_i": 90, "train_y_idx": 90, "test_y_idx": 90, "scatter": [90, 91, 92, 97, 100, 103, 107], "black": [90, 91, 92, 98, 107], "cyan": [90, 91, 92], "plot_data": [90, 91, 92, 97, 100, 103, 107], "fig": [90, 91, 92, 93, 98, 105, 107], "ax": [90, 91, 92, 93, 97, 105, 107], "subplot": [90, 91, 92, 93, 105], "set_titl": [90, 91, 92, 93, 105], "set_xlabel": [90, 91, 92], "x_1": [90, 91, 92], "fontsiz": [90, 91, 92, 93, 97, 100, 103], "set_ylabel": [90, 91, 92], "x_2": [90, 91, 92], "set_xlim": [90, 91, 92], "set_ylim": [90, 91, 92], "linestyl": [90, 91, 92], "circl": [90, 91, 92, 100, 103], "misclassifi": [90, 91, 92], "zip": [90, 91, 92, 93, 104, 109], "label_err": [90, 91, 92], "180": [90, 91, 92, 104], "marker": [90, 91, 92], "facecolor": [90, 91, 92, 97], "edgecolor": [90, 91, 92, 97], "linewidth": [90, 91, 92, 97, 105], "title_fontproperti": [90, 91, 92], "semibold": [90, 91, 92], "first_legend": [90, 91, 92], "align": [90, 91, 92], "markerscal": 90, "second_legend": [90, 91, 92], "46": [90, 95, 97, 98, 100, 104], "gca": [90, 91, 92], "add_artist": [90, 91, 92], "tight_layout": [90, 91, 92, 97], "ideal": [90, 91, 92], "simplic": [90, 97, 103], "327": [90, 104], "9297": 90, "000124": 90, "259": 90, "000725": 90, "269": 90, "000794": 90, "002061": 90, "125": [90, 91], "002908": 90, "fly": [90, 98], "feed": [90, 99], "simul": 90, "tqdm": [90, 93], "sleep": [90, 98], "generate_stream": 90, "sleep_tim": 90, "desc": 90, "singleton_stream": 90, "seamless": [90, 99], "singleton": 90, "batched_stream": 90, "processed_singleton": 90, "suggested_label": [90, 96], "250997": 90, "285757": 90, "43": [90, 91, 97, 98, 100, 104, 109], "120906": 90, "principl": 90, "processed_batch": 90, "51": [90, 91, 92, 95, 97, 98, 100, 104], "002748": 90, "189996": 90, "093505": 90, "037250": 90, "149": [90, 104], "076397": 90, "154": 90, "294010": 90, "160": [90, 96, 107], "073622": 90, "166": [90, 93], "140832": 90, "167": [90, 98, 100, 104], "041743": 90, "181": 90, "169429": 90, "127304": 90, "235": [90, 104], "090310": 90, "254": [90, 98, 104], "183343": 90, "256": [90, 98, 99, 104], "048720": 90, "263": [90, 103, 104], "138820": 90, "292": 90, "239609": 90, "295": [90, 104], "022075": 90, "306": 90, "103040": 90, "343": 90, "234755": 90, "354": 90, "001612": 90, "359": 90, "068359": 90, "367": [90, 107], "015793": 90, "368": 90, "029022": 90, "391": 90, "106761": 90, "troublesom": 90, "623844": 90, "812647": 90, "816854": 90, "661968": 90, "632244": 90, "395": 90, "474599": 90, "396": 90, "653901": 90, "397": 90, "584554": 90, "398": 90, "817287": 90, "399": 90, "881545": 90, "183": 90, "937927": 90, "309": 90, "939505": 90, "133": 90, "947290": 90, "177": 90, "952187": 90, "314": [90, 104], "997293": 90, "655501": 90, "3603": 90, "173": [90, 104], "000330": 90, "000626": 90, "296": 90, "002004": 90, "304": 90, "165496": 90, "275": [90, 103], "179811": 90, "001317": 90, "005943": 90, "001426": 90, "320": [90, 104], "186355": 90, "349": 90, "187305": 90, "393": 90, "169838": 90, "185770": 90, "369889": 90, "285297": 90, "406162": 90, "516543": 90, "440142": 90, "476283": 90, "382757": 90, "466786": 90, "522078": 90, "276298": 90, "328181": 90, "409633": 90, "281425": 90, "518102": 90, "360596": 90, "underneath": 91, "hood": [91, 97, 99], "alert": 91, "introduct": 91, "mayb": [91, 92, 96], "your_feature_matrix": [91, 92], "dup": [91, 92], "45": [91, 92, 97, 98, 100, 104], "remaind": 91, "modal": [91, 92, 99, 102], "132": [91, 92, 100, 104], "9318": 91, "006940": 91, "007830": 91, "40": [91, 92, 96, 97, 98], "014828": 91, "107": [91, 92, 100, 103], "021241": 91, "026407": 91, "notic": [91, 100, 102, 104], "3558": [91, 92], "126": [91, 92, 100, 104], "006636": [91, 92], "130": [91, 92], "012571": [91, 92], "129": [91, 92, 109], "127": [91, 92], "014909": [91, 92], "128": [91, 92, 93], "017443": [91, 92], "6160": [91, 92], "131": [91, 92, 108], "000000e": [91, 92], "000002": [91, 92], "463180e": [91, 92], "07": [91, 92, 93, 95, 97, 100, 104, 107], "161148": [91, 92], "859087e": [91, 92], "30": [91, 92, 93, 97, 98, 99, 103, 108, 109], "3453": 91, "029542": 91, "031182": 91, "057961": 91, "058244": 91, "348": 91, "378": 91, "357": 91, "34": [91, 97, 98, 100, 102, 104, 109], "54": [91, 97, 98, 100, 104], "039122": 91, "044598": 91, "105": [91, 104], "105196": 91, "133654": 91, "168033": 91, "101107": 91, "183382": 91, "109": [91, 98, 104], "209259": 91, "211042": 91, "221316": 91, "average_ood_scor": 91, "34530442089193386": 91, "52": [91, 97, 98, 104, 109], "169820": 91, "087324e": 91, "259024": 91, "583757e": 91, "91": [91, 104], "346458": 91, "341292e": 91, "specfi": 91, "new_lab": 91, "scoring_funct": 91, "div": 91, "rem": 91, "inv_scal": 91, "49": [91, 97, 98, 100, 104], "superstitionissuemanag": 91, "unlucki": 91, "superstit": 91, "to_seri": 91, "issues_mask": 91, "summary_scor": 91, "9242": 91, "is_superstition_issu": 91, "superstition_scor": 91, "26": [91, 93, 97, 98, 100, 102, 104], "047581": 91, "090635": 91, "129591": 91, "164840": 91, "lurk": [92, 93, 100], "_split": 92, "776": 92, "thoroughli": 92, "904": 92, "_base": [92, 93, 95, 96, 97, 100], "246": [92, 93, 95, 96, 97, 100, 104], "efficiencywarn": [92, 93, 95, 96, 97, 100], "sort_graph_by_row_valu": [92, 93, 95, 96, 97, 100], "warn_when_not_sort": [92, 93, 95, 96, 97, 100], "8561": 92, "001908": 92, "003564": 92, "007331": 92, "008963": 92, "009664": 92, "0227": 92, "022727": 92, "conceptu": 92, "856061": 92, "355772": 92, "616034": 92, "821750": 92, "901562": 92, "betweeen": 92, "859131": 92, "417707": 92, "664083": 92, "970324": 92, "816953": 92, "375317": 92, "641516": 92, "890575": 92, "531021": 92, "460593": 92, "601188": 92, "826147": 92, "752808": 92, "321635": 92, "562539": 92, "948362": 92, "090243": 92, "472909": 92, "746763": 92, "878267": 92, "examples_w_issu": [92, 99], "013445": 92, "025184": 92, "026376": 92, "inde": [92, 96], "miscellan": [92, 94, 109], "428571": 92, "111111": 92, "571429": 92, "407407": 92, "592593": 92, "337838": 92, "092593": 92, "662162": 92, "333333": [92, 98], "952381": 92, "666667": [92, 97], "portion": 92, "huge": [92, 100], "worri": [92, 96], "critic": 92, "60": [93, 97, 100, 107], "torchvis": [93, 105], "tensordataset": 93, "stratifiedkfold": [93, 103], "autonotebook": 93, "math": 93, "fashion_mnist": 93, "1486": 93, "futurewarn": 93, "hf": 93, "messag": 93, "trust_remote_cod": 93, "num_row": 93, "60000": 93, "transformed_dataset": 93, "with_format": 93, "255": [93, 98], "cpu_count": 93, "torch_dataset": 93, "quick": [93, 103, 105], "super": [93, 95, 96], "relu": 93, "batchnorm2d": 93, "maxpool2d": 93, "lazylinear": 93, "flatten": 93, "get_test_accuraci": 93, "testload": [93, 105], "energi": 93, "trainload": [93, 105], "n_epoch": 93, "patienc": 93, "criterion": 93, "crossentropyloss": 93, "adamw": 93, "best_test_accuraci": 93, "start_epoch": 93, "running_loss": 93, "best_epoch": 93, "end_epoch": 93, "3f": [93, 107], "acc": [93, 100], "time_taken": 93, "compute_embed": 93, "compute_pred_prob": 93, "train_batch_s": 93, "num_work": 93, "worker": [93, 109], "train_id_list": 93, "test_id_list": 93, "train_id": 93, "test_id": 93, "embeddings_model": 93, "ntrain": 93, "trainset": 93, "testset": 93, "pin_memori": 93, "fold_embed": 93, "fold_pred_prob": 93, "finish": 93, "482": 93, "720": 93, "850": 93, "329": [93, 104], "88": [93, 98, 99, 100, 103, 104, 107], "195": 93, "655": 93, "493": 93, "060": 93, "916": 93, "330": [93, 104], "505": 93, "721": 93, "476": 93, "340": 93, "024": [93, 100], "328": [93, 104], "310": 93, "reorder": 93, "hstack": [93, 99, 100, 102], "vision": 93, "grayscal": 93, "max_preval": 93, "7714": 93, "3772": 93, "3585": 93, "3651": 93, "27080": 93, "873833e": 93, "40378": 93, "915575e": 93, "25316": 93, "390277e": 93, "06": [93, 100, 104, 109], "2090": 93, "751164e": 93, "14999": 93, "881301e": 93, "9569": 93, "11262": 93, "000003": 93, "coat": [93, 98], "shirt": [93, 98], "19228": 93, "000010": 93, "dress": 93, "32657": 93, "000013": 93, "bag": [93, 98, 105, 106], "21282": 93, "000016": 93, "53564": 93, "000018": 93, "pullov": 93, "6321": 93, "30968": 93, "001267": 93, "30659": 93, "000022": [93, 109], "47824": 93, "001454": 93, "3370": 93, "000026": 93, "54565": 93, "001854": 93, "9762": 93, "258": 93, "47139": 93, "000033": 93, "166980": 93, "986195": 93, "997205": 93, "sandal": [93, 98], "948781": 93, "999358": 93, "54078": 93, "17371": 93, "000025": 93, "plot_label_issue_exampl": 93, "ncol": [93, 105], "nrow": [93, 105], "ceil": 93, "axes_list": 93, "label_issue_indic": 93, "gl": 93, "sl": 93, "fontdict": 93, "imshow": [93, 105], "cmap": [93, 97, 107], "grai": 93, "subplots_adjust": 93, "hspace": 93, "outsiz": 93, "outlier_issu": [93, 96], "outlier_issues_df": 93, "depict": [93, 103, 104, 105, 106, 108], "plot_outlier_issues_exampl": 93, "n_comparison_imag": 93, "sample_from_class": 93, "number_of_sampl": 93, "non_outlier_indic": 93, "isnul": [93, 97], "non_outlier_indices_excluding_curr": 93, "sampled_indic": 93, "label_scores_of_sampl": 93, "top_score_indic": 93, "top_label_indic": 93, "sampled_imag": 93, "get_image_given_label_and_sampl": 93, "image_from_dataset": 93, "corresponding_label": 93, "comparison_imag": 93, "images_to_plot": 93, "idlist": 93, "iterrow": 93, "near_duplicate_issu": [93, 99], "closest": 93, "counterpart": 93, "near_duplicate_issues_df": 93, "plot_near_duplicate_issue_exampl": 93, "seen_id_pair": 93, "get_image_and_given_label_and_predicted_label": 93, "duplicate_imag": 93, "nd_set": 93, "challeng": 93, "dark_issu": 93, "reveal": [93, 104, 108], "dark_scor": 93, "dark_issues_df": 93, "is_dark_issu": 93, "34848": 93, "203922": 93, "50270": 93, "204588": 93, "3936": 93, "213098": 93, "733": 93, "217686": 93, "8094": 93, "230118": 93, "plot_image_issue_exampl": 93, "difficult": 93, "disproportion": 93, "lowinfo_issu": 93, "low_information_scor": 93, "lowinfo_issues_df": 93, "is_low_information_issu": 93, "53050": 93, "067975": 93, "40875": 93, "089929": 93, "9594": 93, "092601": 93, "34825": 93, "107744": 93, "37530": 93, "108516": 93, "lot": 93, "histgradientboostingclassifi": 95, "cat_featur": 95, "boost": [95, 99, 102, 107], "xgboost": [95, 99, 107], "think": [95, 96, 99, 103, 108, 109], "nonzero": 95, "358": 95, "941": 95, "294": [95, 104], "7109": 95, "000005": [95, 96], "886": 95, "000059": 95, "709": 95, "000104": 95, "723": 95, "000169": 95, "689": 95, "000181": 95, "3590": 95, "051882e": 95, "683133e": 95, "536582e": 95, "406589e": 95, "324246e": 95, "6165": 95, "582": 95, "185": [95, 98, 104], "187": [95, 98], "898": 95, "0014": [95, 98], "595": 95, "702427": 95, "147": [95, 100, 104], "711186": 95, "157": [95, 100], "721394": 95, "771": 95, "731979": 95, "740335": 95, "0014153602099278074": 95, "issue_result": 95, "000842": 95, "555944": 95, "004374": 95, "sorted_issu": 95, "73": [95, 97, 98, 103, 104, 107], "deserv": 95, "outlier_result": 95, "sorted_outli": 95, "56": [95, 97, 98, 107], "96": [95, 97, 98, 100, 103, 104, 107, 109], "style": [95, 97, 108], "font": 95, "18px": 95, "ff00ff": 95, "bac": 95, "unintend": [95, 96], "duplicate_result": 95, "lowest_scoring_dupl": 95, "idxmin": [95, 99], "indices_to_displai": 95, "tolist": [95, 99, 103], "perhap": [95, 100, 102], "second_lowest_scoring_dupl": 95, "next_indices_to_displai": 95, "wari": [95, 96, 99], "dive": [96, 97], "text_embed": 96, "data_dict": [96, 100, 102], "85": [96, 104], "38": [96, 97, 98, 104], "9710": 96, "981": 96, "974": 96, "000146": 96, "982": [96, 98], "000224": 96, "971": 96, "000507": 96, "980": [96, 98], "000960": 96, "3584": 96, "994": 96, "009642": 96, "999": 96, "013067": 96, "013841": 96, "433": 96, "014722": 96, "989": 96, "018224": 96, "6070": 96, "095724": 96, "148": 96, "006237": 96, "546": 96, "099341": 96, "514": 96, "006485": 96, "481": 96, "123418": 96, "008165": 96, "0000": [96, 98, 100], "313": [96, 104], "564102": 96, "572258": 96, "574915": 96, "31": [96, 97, 98, 100, 102, 104], "575507": 96, "575874": 96, "792090": 96, "257611": 96, "698710": 96, "182121": 96, "771619": 96, "data_with_suggested_label": 96, "withdraw": 96, "monei": 96, "lowest_quality_outli": 96, "OR": 96, "636c65616e6c616220697320617765736f6d6521": 96, "phone": [96, 98], "gone": 96, "samp": 96, "br": 96, "press": [96, 109], "nonsens": 96, "sens": 96, "detriment": 96, "duplicate_issu": 96, "fee": 96, "go": [96, 97, 98, 100], "strongli": 96, "p_valu": 96, "benign": 96, "curat": 96, "bigger": 97, "make_classif": 97, "5000": [97, 105], "n_featur": 97, "n_inform": 97, "n_redund": 97, "n_repeat": 97, "n_class": 97, "n_clusters_per_class": 97, "flip_i": 97, "class_sep": 97, "faiss": 97, "x_faiss": 97, "float32": [97, 104], "normalize_l2": 97, "index_factori": 97, "hnsw32": 97, "flat": [97, 98], "metric_inner_product": 97, "a_min": 97, "a_max": 97, "create_knn_graph": 97, "assert": 97, "indices_1d": 97, "ravel": 97, "distances_1d": 97, "5000x5000": 97, "50000": 97, "116": 97, "523": 97, "991400": 97, "356958": 97, "362": 97, "619565": 97, "108": [97, 104], "500000": 97, "651929": 97, "999827": 97, "031217": 97, "933716": 97, "627345": 97, "998540": 97, "530909": 97, "296974": 97, "646765": 97, "942721": 97, "332824": 97, "803246": 97, "625202": 97, "999816": 97, "474031": 97, "706253": 97, "655108": 97, "997703": 97, "131466": 97, "912389": 97, "639200": 97, "4995": 97, "998646": 97, "504755": 97, "746777": 97, "680033": 97, "4996": 97, "894230": 97, "340986": 97, "816472": 97, "640711": 97, "4997": 97, "999100": 97, "428545": 97, "592421": 97, "658949": 97, "4998": 97, "986792": 97, "273710": 97, "618033": 97, "4999": 97, "986776": 97, "273524": 97, "618084": 97, "instabl": 97, "proxim": 97, "analys": 97, "comfort": 97, "explor": [97, 104, 105], "third": 97, "parti": [97, 109], "newsgroup": 97, "alt": [97, 98], "atheism": [97, 98], "sci": [97, 98], "fetch_20newsgroup": 97, "newsgroups_train": 97, "header": 97, "footer": 97, "quot": 97, "df_text": 97, "target_nam": 97, "enlighten": 97, "omnipot": 97, "19apr199320262420": 97, "kelvin": 97, "jpl": 97, "nasa": 97, "gov": 97, "baa": 97, "nhenri": 97, "he": 97, "nno": 97, "ge": 97, "nlucki": 97, "babi": [97, 98], "tfidfvector": 97, "feature_extract": 97, "x_vector": 97, "data_valuation_issu": 97, "500140": 97, "500233": 97, "500186": 97, "1068": 97, "500047": 97, "1069": 97, "1070": 97, "1071": 97, "500373": 97, "1072": 97, "1073": 97, "seaborn": 97, "sn": 97, "distinguish": 97, "histplot": 97, "hue": [97, 107], "stack": 97, "logarithm": 97, "yscale": 97, "xlabel": 97, "ylabel": [97, 105], "ourselv": 97, "make_blob": 97, "center": [97, 98], "cluster_std": 97, "n_noisy_label": 97, "meaning": [97, 99, 105], "silhouette_scor": 97, "gridsearchcv": 97, "silhouett": 97, "cluster_label": 97, "fit_predict": [97, 99], "param_grid": 97, "grid_search": 97, "best_kmean": 97, "best_estimator_": 97, "underperforming_group_issu": 97, "270508": 97, "tab10": 97, "domain": 97, "knowledg": [97, 100], "dataset_tsv": 97, "ag": [97, 107], "gender": 97, "educ": 97, "experi": 97, "highsalari": 97, "indiana": 97, "phd": 97, "male": 97, "bachelor": 97, "femal": 97, "kansa": 97, "school": [97, 98], "ohio": 97, "57": [97, 98, 100], "california": 97, "59": [97, 98, 104], "63": [97, 100, 104, 107], "47": [97, 98, 104], "stringio": 97, "ordinalencod": 97, "columns_to_encod": 97, "encoded_df": 97, "salari": 97, "573681": 97, "underpin": 97, "caught": 97, "whenev": 97, "generate_data_depend": 97, "num_sampl": 97, "a1": 97, "a2": 97, "a3": 97, "375": 97, "975": 97, "non_iid_issu": 97, "796474": 97, "842432": 97, "922562": 97, "820759": 97, "873136": 97, "887373": 97, "825101": 97, "855875": 97, "751795": 97, "835796": 97, "coolwarm": 97, "colorbar": [97, 107], "strong": 97, "evid": 97, "inter": 97, "mitig": 97, "risk": 97, "deeper": 97, "tsv": 97, "tab": 97, "pars": 97, "annual_spend": 97, "number_of_transact": 97, "last_purchase_d": 97, "rural": 97, "4099": 97, "2024": [97, 109], "6421": 97, "nat": 97, "suburban": 97, "5436": 97, "4046": 97, "66": [97, 98], "3467": 97, "67": [97, 98, 104, 107], "4757": 97, "4199": 97, "4991": 97, "4655": 97, "82": [97, 98, 100, 104, 107], "5584": 97, "urban": 97, "3102": 97, "6637": 97, "9167": 97, "6790": 97, "5327": 97, "parse_d": 97, "lose": 97, "intact": 97, "encode_categorical_column": 97, "placehold": 97, "dropna": [97, 102], "category_to_numb": 97, "_encod": 97, "gender_encod": 97, "location_encod": 97, "focus": [97, 100, 102, 103, 107], "null_issu": 97, "833333": 97, "sorted_indic": [97, 104], "sorted_df": 97, "nice": 97, "styler": 97, "combined_df": 97, "concat": [97, 107], "highlight_null_valu": 97, "val": [97, 100], "yellow": [97, 98], "highlight_datalab_column": 97, "lightblu": 97, "highlight_is_null_issu": 97, "orang": [97, 98], "styled_df": 97, "nbsp": [97, 99, 100], "160000": 97, "820000": 97, "460000": 97, "470000": 97, "960000": 97, "620000": 97, "550000": 97, "660000": 97, "670000": [97, 98], "370000": 97, "530000": 97, "710000": 97, "020000": 97, "320000": 97, "990000": 97, "rarer": 97, "fairer": 97, "randomli": [97, 100], "class_imbalance_issu": 97, "countplot": 97, "xtick": 97, "rotat": 97, "ytick": 97, "filtered_df": 97, "xy": 97, "va": 97, "textual": 97, "get_ytick": 97, "nbar": 97, "nimbal": 97, "get_legend_handles_label": 97, "title_fonts": 97, "refin": 98, "instruct": 98, "studi": [98, 104], "mnist_test_set": 98, "imagenet_val_set": 98, "tench": 98, "goldfish": 98, "white": [98, 109], "shark": 98, "tiger": 98, "hammerhead": 98, "electr": 98, "rai": 98, "stingrai": 98, "cock": 98, "hen": 98, "ostrich": 98, "brambl": 98, "goldfinch": 98, "hous": 98, "finch": 98, "junco": 98, "indigo": 98, "bunt": 98, "american": [98, 109], "robin": 98, "bulbul": 98, "jai": 98, "magpi": 98, "chickade": 98, "dipper": 98, "kite": 98, "bald": 98, "eagl": 98, "vultur": 98, "grei": 98, "owl": 98, "salamand": 98, "smooth": 98, "newt": 98, "spot": [98, 99, 104], "axolotl": 98, "bullfrog": 98, "tree": 98, "frog": [98, 105], "tail": 98, "loggerhead": 98, "sea": 98, "turtl": 98, "leatherback": 98, "mud": 98, "terrapin": 98, "band": 98, "gecko": 98, "green": [98, 109], "iguana": 98, "carolina": 98, "anol": 98, "desert": 98, "grassland": 98, "whiptail": 98, "lizard": 98, "agama": 98, "frill": 98, "neck": 98, "allig": 98, "gila": 98, "monster": 98, "european": 98, "chameleon": 98, "komodo": 98, "dragon": 98, "nile": 98, "crocodil": 98, "triceratop": 98, "worm": 98, "snake": 98, "ring": 98, "eastern": 98, "hog": 98, "nose": 98, "kingsnak": 98, "garter": 98, "water": 98, "vine": 98, "night": 98, "boa": 98, "constrictor": 98, "african": 98, "rock": 98, "indian": 98, "cobra": 98, "mamba": 98, "saharan": 98, "horn": 98, "viper": 98, "diamondback": 98, "rattlesnak": 98, "sidewind": 98, "trilobit": 98, "harvestman": 98, "scorpion": 98, "garden": 98, "spider": 98, "barn": 98, "southern": 98, "widow": 98, "tarantula": 98, "wolf": 98, "tick": 98, "centiped": 98, "grous": 98, "ptarmigan": 98, "ruf": 98, "prairi": 98, "peacock": 98, "quail": 98, "partridg": 98, "parrot": 98, "macaw": 98, "sulphur": 98, "crest": 98, "cockatoo": 98, "lorikeet": 98, "coucal": 98, "bee": 98, "eater": 98, "hornbil": 98, "hummingbird": 98, "jacamar": 98, "toucan": 98, "breast": 98, "mergans": 98, "goos": 98, "swan": 98, "tusker": 98, "echidna": 98, "platypu": 98, "wallabi": 98, "koala": 98, "wombat": 98, "jellyfish": 98, "anemon": 98, "brain": 98, "coral": 98, "flatworm": 98, "nematod": 98, "conch": 98, "snail": 98, "slug": 98, "chiton": 98, "chamber": 98, "nautilu": 98, "dung": 98, "crab": 98, "fiddler": 98, "king": 98, "lobster": 98, "spini": 98, "crayfish": 98, "hermit": 98, "isopod": 98, "stork": 98, "spoonbil": 98, "flamingo": 98, "heron": 98, "egret": 98, "bittern": 98, "crane": 98, "bird": [98, 105], "limpkin": 98, "gallinul": 98, "coot": 98, "bustard": 98, "ruddi": 98, "turnston": 98, "dunlin": 98, "redshank": 98, "dowitch": 98, "oystercatch": 98, "pelican": 98, "penguin": 98, "albatross": 98, "whale": 98, "killer": 98, "dugong": 98, "lion": 98, "chihuahua": 98, "japanes": 98, "chin": 98, "maltes": 98, "pekinges": 98, "shih": 98, "tzu": 98, "charl": 98, "spaniel": 98, "papillon": 98, "terrier": 98, "rhodesian": 98, "ridgeback": 98, "afghan": [98, 109], "hound": 98, "basset": 98, "beagl": 98, "bloodhound": 98, "bluetick": 98, "coonhound": 98, "tan": 98, "walker": 98, "foxhound": 98, "redbon": 98, "borzoi": 98, "irish": 98, "wolfhound": 98, "italian": 98, "greyhound": 98, "whippet": 98, "ibizan": 98, "norwegian": 98, "elkhound": 98, "otterhound": 98, "saluki": 98, "scottish": 98, "deerhound": 98, "weimaran": 98, "staffordshir": 98, "bull": 98, "bedlington": 98, "border": 98, "kerri": 98, "norfolk": 98, "norwich": 98, "yorkshir": 98, "wire": 98, "fox": 98, "lakeland": 98, "sealyham": 98, "airedal": 98, "cairn": 98, "australian": 98, "dandi": 98, "dinmont": 98, "boston": 98, "miniatur": 98, "schnauzer": 98, "giant": 98, "tibetan": 98, "silki": 98, "wheaten": 98, "west": 98, "highland": 98, "lhasa": 98, "apso": 98, "retriev": 98, "curli": 98, "golden": 98, "labrador": 98, "chesapeak": 98, "bai": 98, "german": [98, 109], "shorthair": 98, "pointer": 98, "vizsla": 98, "setter": 98, "gordon": 98, "brittani": 98, "clumber": 98, "springer": 98, "welsh": 98, "cocker": 98, "sussex": 98, "kuvasz": 98, "schipperk": 98, "groenendael": 98, "malinoi": 98, "briard": 98, "kelpi": 98, "komondor": 98, "sheepdog": 98, "shetland": 98, "colli": 98, "bouvier": 98, "de": 98, "flandr": 98, "rottweil": 98, "shepherd": 98, "dobermann": 98, "pinscher": 98, "swiss": [98, 109], "mountain": 98, "bernes": 98, "appenzel": 98, "sennenhund": 98, "entlebuch": 98, "boxer": 98, "bullmastiff": 98, "mastiff": 98, "french": 98, "bulldog": 98, "dane": 98, "st": 98, "bernard": 98, "huski": 98, "alaskan": 98, "malamut": 98, "siberian": 98, "dalmatian": 98, "affenpinsch": 98, "basenji": 98, "pug": 98, "leonberg": 98, "newfoundland": 98, "pyrenean": 98, "samoi": 98, "pomeranian": 98, "chow": 98, "keeshond": 98, "griffon": 98, "bruxelloi": 98, "pembrok": 98, "corgi": 98, "cardigan": 98, "poodl": 98, "mexican": 98, "hairless": 98, "tundra": 98, "coyot": 98, "dingo": 98, "dhole": 98, "wild": 98, "hyena": 98, "kit": 98, "arctic": 98, "tabbi": 98, "persian": 98, "siames": 98, "egyptian": 98, "mau": 98, "cougar": 98, "lynx": 98, "leopard": 98, "snow": 98, "jaguar": 98, "cheetah": 98, "brown": [98, 108], "bear": 98, "polar": 98, "sloth": 98, "mongoos": 98, "meerkat": 98, "beetl": 98, "ladybug": 98, "longhorn": 98, "leaf": 98, "rhinocero": 98, "weevil": 98, "ant": 98, "grasshopp": 98, "cricket": 98, "stick": 98, "insect": 98, "cockroach": 98, "manti": 98, "cicada": 98, "leafhopp": 98, "lacew": 98, "dragonfli": 98, "damselfli": 98, "admir": 98, "ringlet": 98, "monarch": 98, "butterfli": 98, "gossam": 98, "wing": 98, "starfish": 98, "urchin": 98, "cucumb": 98, "cottontail": 98, "rabbit": 98, "hare": 98, "angora": 98, "hamster": 98, "porcupin": 98, "squirrel": 98, "marmot": 98, "beaver": 98, "guinea": 98, "pig": 98, "sorrel": 98, "zebra": 98, "boar": 98, "warthog": 98, "hippopotamu": 98, "ox": 98, "buffalo": 98, "bison": 98, "bighorn": 98, "sheep": 98, "alpin": 98, "ibex": 98, "hartebeest": 98, "impala": 98, "gazel": 98, "dromedari": 98, "llama": 98, "weasel": 98, "mink": 98, "polecat": 98, "foot": 98, "ferret": 98, "otter": 98, "skunk": 98, "badger": 98, "armadillo": 98, "toed": 98, "orangutan": 98, "gorilla": 98, "chimpanze": 98, "gibbon": 98, "siamang": 98, "guenon": 98, "pata": 98, "monkei": 98, "baboon": 98, "macaqu": 98, "langur": 98, "colobu": 98, "probosci": 98, "marmoset": 98, "capuchin": 98, "howler": 98, "titi": 98, "geoffroi": 98, "lemur": 98, "indri": 98, "asian": 98, "eleph": 98, "bush": 98, "snoek": 98, "eel": 98, "coho": 98, "salmon": 98, "beauti": 98, "clownfish": 98, "sturgeon": 98, "garfish": 98, "lionfish": 98, "pufferfish": 98, "abacu": 98, "abaya": 98, "academ": 98, "gown": 98, "accordion": 98, "acoust": 98, "guitar": 98, "aircraft": 98, "carrier": 98, "airlin": 98, "airship": 98, "altar": 98, "ambul": 98, "amphibi": 98, "clock": [98, 109], "apiari": 98, "apron": 98, "wast": 98, "assault": 98, "rifl": 98, "backpack": 98, "bakeri": 98, "balanc": 98, "beam": 98, "balloon": 98, "ballpoint": 98, "pen": 98, "aid": 98, "banjo": 98, "balust": 98, "barbel": 98, "barber": 98, "chair": [98, 104], "barbershop": 98, "baromet": 98, "barrel": 98, "wheelbarrow": 98, "basebal": 98, "basketbal": 98, "bassinet": 98, "bassoon": 98, "swim": 98, "cap": 98, "bath": 98, "towel": 98, "bathtub": 98, "station": 98, "wagon": 98, "lighthous": 98, "beaker": 98, "militari": 98, "beer": 98, "bottl": 98, "glass": 98, "bell": 98, "cot": 98, "bib": 98, "bicycl": [98, 108], "bikini": 98, "binder": 98, "binocular": 98, "birdhous": 98, "boathous": 98, "bobsleigh": 98, "bolo": 98, "tie": 98, "poke": 98, "bonnet": 98, "bookcas": 98, "bookstor": 98, "bow": 98, "brass": 98, "bra": 98, "breakwat": 98, "breastplat": 98, "broom": 98, "bucket": 98, "buckl": 98, "bulletproof": 98, "vest": 98, "butcher": 98, "shop": 98, "taxicab": 98, "cauldron": 98, "candl": 98, "cannon": 98, "cano": 98, "mirror": [98, 104], "carousel": 98, "tool": [98, 100, 102], "carton": 98, "wheel": 98, "teller": 98, "cassett": 98, "player": 98, "castl": 98, "catamaran": 98, "cd": 98, "cello": 98, "mobil": [98, 109], "chain": 98, "fenc": [98, 108], "mail": 98, "chainsaw": 98, "chest": 98, "chiffoni": 98, "chime": 98, "china": 98, "cabinet": 98, "christma": 98, "stock": 98, "church": 98, "movi": 98, "theater": 98, "cleaver": 98, "cliff": 98, "dwell": 98, "cloak": 98, "clog": 98, "cocktail": 98, "shaker": 98, "coffe": 98, "mug": 98, "coffeemak": 98, "coil": 98, "lock": 98, "keyboard": 98, "confectioneri": 98, "ship": [98, 105], "corkscrew": 98, "cornet": 98, "cowboi": 98, "boot": 98, "hat": 98, "cradl": 98, "crash": 98, "helmet": 98, "crate": 98, "infant": 98, "bed": 98, "crock": 98, "pot": 98, "croquet": 98, "crutch": 98, "cuirass": 98, "dam": 98, "desk": 98, "desktop": 98, "rotari": 98, "dial": 98, "telephon": 98, "diaper": 98, "watch": 98, "dine": 98, "dishcloth": 98, "dishwash": 98, "disc": 98, "brake": 98, "dock": 98, "sled": 98, "dome": 98, "doormat": 98, "drill": 98, "rig": 98, "drum": 98, "drumstick": 98, "dumbbel": 98, "dutch": 98, "oven": 98, "fan": 98, "locomot": 98, "entertain": 98, "envelop": 98, "espresso": 98, "powder": 98, "feather": 98, "fireboat": 98, "engin": [98, 108], "screen": 98, "sheet": 98, "flagpol": 98, "flute": 98, "footbal": 98, "forklift": 98, "fountain": 98, "poster": 98, "freight": 98, "fry": 98, "pan": 98, "fur": 98, "garbag": 98, "ga": 98, "pump": 98, "goblet": 98, "kart": 98, "golf": 98, "cart": 98, "gondola": 98, "gong": 98, "grand": 98, "piano": 98, "greenhous": 98, "grill": 98, "groceri": 98, "guillotin": 98, "barrett": 98, "hair": 98, "sprai": 98, "hammer": 98, "dryer": 98, "hand": [98, 100], "handkerchief": 98, "drive": 98, "harmonica": 98, "harp": 98, "harvest": 98, "hatchet": 98, "holster": 98, "honeycomb": 98, "hoop": 98, "skirt": 98, "horizont": 98, "bar": 98, "drawn": 98, "hourglass": 98, "ipod": 98, "cloth": 98, "iron": 98, "jack": 98, "lantern": 98, "jean": 98, "jeep": 98, "jigsaw": 98, "puzzl": 98, "pull": 98, "rickshaw": 98, "joystick": 98, "kimono": 98, "knee": 98, "pad": 98, "knot": 98, "ladl": 98, "lampshad": 98, "laptop": 98, "lawn": 98, "mower": 98, "knife": 98, "lifeboat": 98, "lighter": 98, "limousin": 98, "ocean": 98, "liner": 98, "lipstick": 98, "slip": 98, "shoe": 98, "lotion": 98, "speaker": 98, "loup": 98, "sawmil": 98, "magnet": 98, "compass": 98, "mailbox": 98, "tight": 98, "tank": 98, "manhol": 98, "maraca": 98, "marimba": 98, "maypol": 98, "maze": 98, "cup": [98, 104], "medicin": 98, "megalith": 98, "microphon": 98, "microwav": 98, "milk": 98, "minibu": 98, "miniskirt": 98, "minivan": 98, "missil": 98, "mitten": [98, 99], "mix": 98, "bowl": 98, "modem": 98, "monasteri": 98, "mope": 98, "mortar": 98, "mosqu": 98, "mosquito": 98, "scooter": 98, "bike": 98, "tent": 98, "mous": [98, 99], "mousetrap": 98, "van": 98, "muzzl": 98, "nail": 98, "brace": 98, "necklac": 98, "nippl": 98, "obelisk": 98, "obo": 98, "ocarina": 98, "odomet": 98, "oil": 98, "oscilloscop": 98, "overskirt": 98, "bullock": 98, "oxygen": 98, "packet": 98, "paddl": 98, "padlock": 98, "paintbrush": 98, "pajama": 98, "palac": [98, 109], "parachut": 98, "park": 98, "bench": 98, "meter": 98, "passeng": 98, "patio": 98, "payphon": 98, "pedest": 98, "pencil": 98, "perfum": 98, "petri": 98, "dish": 98, "photocopi": 98, "plectrum": 98, "pickelhaub": 98, "picket": 98, "pickup": 98, "pier": 98, "piggi": 98, "pill": 98, "pillow": 98, "ping": 98, "pong": 98, "pinwheel": 98, "pirat": 98, "pitcher": 98, "plane": 98, "planetarium": 98, "plastic": 98, "plate": 98, "rack": 98, "plow": 98, "plunger": 98, "polaroid": 98, "camera": 98, "pole": [98, 108], "polic": 98, "poncho": 98, "billiard": 98, "soda": 98, "potter": 98, "prayer": 98, "rug": 98, "printer": 98, "prison": 98, "projectil": 98, "projector": 98, "hockei": 98, "puck": 98, "punch": 98, "purs": 98, "quill": 98, "quilt": 98, "race": 98, "racket": 98, "radiat": 98, "radio": 98, "telescop": 98, "rain": 98, "recreat": 98, "reel": 98, "reflex": 98, "refriger": 98, "remot": 98, "restaur": 98, "revolv": 98, "rotisseri": 98, "eras": 98, "rugbi": 98, "ruler": 98, "safe": 98, "safeti": 98, "salt": 98, "sarong": 98, "saxophon": 98, "scabbard": 98, "bu": [98, 108], "schooner": 98, "scoreboard": 98, "crt": 98, "screw": 98, "screwdriv": 98, "seat": 98, "belt": 98, "sew": 98, "shield": 98, "shoji": 98, "basket": 98, "shovel": 98, "shower": 98, "curtain": 98, "ski": 98, "door": 98, "slot": 98, "snorkel": 98, "snowmobil": 98, "snowplow": 98, "soap": 98, "dispens": 98, "soccer": [98, 109], "sock": [98, 99], "solar": 98, "thermal": 98, "collector": 98, "sombrero": 98, "soup": 98, "heater": 98, "shuttl": 98, "spatula": 98, "motorboat": 98, "web": 98, "spindl": 98, "sport": [98, 109], "spotlight": 98, "stage": 98, "steam": 98, "arch": 98, "bridg": 98, "steel": 98, "stethoscop": 98, "scarf": 98, "stone": 98, "wall": [98, 108], "stopwatch": 98, "stove": 98, "strainer": 98, "tram": 98, "stretcher": 98, "couch": 98, "stupa": 98, "submarin": 98, "sundial": 98, "sunglass": 98, "sunscreen": 98, "suspens": 98, "mop": 98, "sweatshirt": 98, "swimsuit": 98, "swing": 98, "switch": 98, "syring": 98, "lamp": 98, "tape": 98, "teapot": 98, "teddi": 98, "televis": [98, 109], "tenni": 98, "thatch": 98, "roof": 98, "thimbl": 98, "thresh": 98, "throne": 98, "tile": 98, "toaster": 98, "tobacco": 98, "toilet": 98, "totem": 98, "tow": 98, "tractor": 98, "semi": 98, "trailer": 98, "trai": 98, "trench": 98, "tricycl": 98, "trimaran": 98, "tripod": 98, "triumphal": 98, "trolleybu": 98, "trombon": 98, "tub": 98, "turnstil": 98, "typewrit": 98, "umbrella": 98, "unicycl": 98, "upright": 98, "vacuum": 98, "cleaner": 98, "vase": 98, "vault": 98, "velvet": 98, "vend": 98, "vestment": 98, "viaduct": 98, "violin": 98, "volleybal": 98, "waffl": 98, "wallet": 98, "wardrob": 98, "sink": 98, "wash": 98, "jug": 98, "tower": 98, "whiskei": 98, "whistl": 98, "wig": 98, "shade": [98, 108], "windsor": 98, "wine": 98, "wok": 98, "wooden": 98, "spoon": 98, "wool": 98, "rail": 98, "shipwreck": 98, "yawl": 98, "yurt": 98, "comic": 98, "book": 98, "crossword": 98, "traffic": [98, 104, 108], "sign": [98, 108, 109], "dust": 98, "jacket": [98, 104], "menu": 98, "guacamol": 98, "consomm": 98, "trifl": 98, "ic": 98, "cream": 98, "pop": 98, "baguett": 98, "bagel": 98, "pretzel": 98, "cheeseburg": 98, "mash": 98, "potato": 98, "cabbag": 98, "broccoli": 98, "cauliflow": 98, "zucchini": 98, "spaghetti": 98, "squash": 98, "acorn": 98, "butternut": 98, "artichok": 98, "pepper": [98, 99], "cardoon": 98, "mushroom": 98, "granni": 98, "smith": 98, "strawberri": 98, "lemon": 98, "pineappl": 98, "banana": 98, "jackfruit": 98, "custard": 98, "appl": 98, "pomegran": 98, "hai": 98, "carbonara": 98, "chocol": 98, "syrup": 98, "dough": 98, "meatloaf": 98, "pizza": 98, "pie": 98, "burrito": 98, "eggnog": 98, "alp": 98, "bubbl": 98, "reef": 98, "geyser": 98, "lakeshor": 98, "promontori": 98, "shoal": 98, "seashor": 98, "vallei": 98, "volcano": 98, "bridegroom": 98, "scuba": 98, "diver": 98, "rapese": 98, "daisi": 98, "ladi": 98, "slipper": 98, "corn": 98, "rose": 98, "hip": 98, "chestnut": 98, "fungu": 98, "agar": 98, "gyromitra": 98, "stinkhorn": 98, "earth": 98, "star": 98, "wood": 98, "bolet": 98, "ear": 98, "cifar10_test_set": 98, "airplan": [98, 105], "automobil": [98, 105], "deer": [98, 105], "cifar100_test_set": 98, "aquarium_fish": 98, "boi": 98, "camel": 98, "caterpillar": 98, "cattl": [98, 109], "cloud": 98, "dinosaur": 98, "dolphin": 98, "flatfish": 98, "forest": 98, "girl": 98, "kangaroo": 98, "lawn_mow": 98, "man": 98, "maple_tre": 98, "motorcycl": [98, 108], "oak_tre": 98, "orchid": 98, "palm_tre": 98, "pear": 98, "pickup_truck": 98, "pine_tre": 98, "plain": 98, "poppi": 98, "possum": 98, "raccoon": 98, "road": [98, 108], "rocket": 98, "seal": 98, "shrew": 98, "skyscrap": 98, "streetcar": 98, "sunflow": 98, "sweet_pepp": 98, "trout": 98, "tulip": 98, "willow_tre": 98, "woman": [98, 104], "caltech256": 98, "ak47": 98, "bat": 98, "glove": 98, "birdbath": 98, "blimp": 98, "bonsai": 98, "boom": 98, "breadmak": 98, "buddha": 98, "bulldoz": 98, "cactu": 98, "cake": 98, "tire": 98, "cartman": 98, "cereal": 98, "chandeli": 98, "chess": 98, "board": 98, "chimp": 98, "chopstick": 98, "coffin": 98, "coin": 98, "comet": 98, "cormor": 98, "globe": 98, "diamond": 98, "dice": 98, "doorknob": 98, "drink": 98, "straw": 98, "dumb": 98, "eiffel": 98, "elk": 98, "ewer": 98, "eyeglass": 98, "fern": 98, "fighter": 98, "jet": [98, 107], "extinguish": 98, "hydrant": 98, "firework": 98, "flashlight": 98, "floppi": 98, "fri": 98, "frisbe": 98, "galaxi": 98, "giraff": 98, "goat": 98, "gate": 98, "grape": 98, "pick": [98, 99], "hamburg": 98, "hammock": 98, "harpsichord": 98, "hawksbil": 98, "helicopt": 98, "hibiscu": 98, "homer": 98, "simpson": 98, "horsesho": 98, "air": 98, "skeleton": 98, "ibi": 98, "cone": 98, "iri": 98, "jesu": 98, "christ": 98, "joi": 98, "kayak": 98, "ketch": 98, "ladder": 98, "lath": 98, "licens": 98, "lightbulb": 98, "lightn": 98, "mandolin": 98, "mar": 98, "mattress": 98, "megaphon": 98, "menorah": 98, "microscop": 98, "minaret": 98, "minotaur": 98, "motorbik": 98, "mussel": 98, "neckti": 98, "octopu": 98, "palm": 98, "pilot": 98, "paperclip": 98, "shredder": 98, "pci": 98, "peopl": [98, 104], "pez": 98, "picnic": 98, "pram": 98, "prai": 98, "pyramid": 98, "rainbow": 98, "roulett": 98, "saddl": 98, "saturn": 98, "segwai": 98, "propel": 98, "sextant": 98, "music": 98, "skateboard": 98, "smokestack": 98, "sneaker": 98, "boat": 98, "stain": 98, "steer": 98, "stirrup": 98, "superman": 98, "sushi": 98, "armi": [98, 109], "sword": 98, "tambourin": 98, "teepe": 98, "court": 98, "theodolit": 98, "tomato": 98, "tombston": 98, "tour": 98, "pisa": 98, "treadmil": 98, "fork": 98, "tweezer": 98, "unicorn": 98, "vcr": 98, "waterfal": 98, "watermelon": 98, "weld": 98, "windmil": 98, "xylophon": 98, "yarmulk": 98, "yo": 98, "toad": 98, "twenty_news_test_set": 98, "comp": 98, "graphic": [98, 108], "misc": [98, 109], "sy": 98, "ibm": 98, "pc": 98, "hardwar": 98, "mac": 98, "forsal": 98, "rec": 98, "crypt": 98, "electron": 98, "med": 98, "soc": 98, "religion": 98, "christian": [98, 109], "talk": [98, 109], "polit": 98, "gun": 98, "mideast": 98, "amazon": 98, "neutral": 98, "imdb_test_set": 98, "all_class": 98, "20news_test_set": 98, "_load_classes_predprobs_label": 98, "dataset_nam": 98, "labelerror": 98, "url_bas": 98, "5392f6c71473055060be3044becdde1cbc18284d": 98, "url_label": 98, "original_test_label": 98, "_original_label": 98, "url_prob": 98, "cross_validated_predicted_prob": 98, "_pyx": 98, "num_part": 98, "datatset": 98, "bytesio": 98, "allow_pickl": 98, "pred_probs_part": 98, "url": 98, "_of_": 98, "nload": 98, "imdb": 98, "capit": 98, "29780": 98, "780": 98, "medic": [98, 109], "doctor": 98, "359223": 98, "640777": 98, "184": [98, 100], "258427": 98, "341176": 98, "263158": 98, "658824": 98, "337349": 98, "246575": 98, "662651": 98, "248": 98, "330000": 98, "355769": 98, "251": [98, 104], "252": 98, "112": 98, "253": [98, 104], "022989": 98, "049505": 98, "190": [98, 100, 104], "002216": 98, "000974": 98, "000873": 98, "000739": 98, "32635": 98, "32636": 98, "32637": 98, "32638": 98, "32639": 98, "32640": 98, "051": 98, "002242": 98, "997758": 98, "002088": 98, "001045": 98, "997912": 98, "002053": 98, "997947": 98, "001980": 98, "000991": 98, "998020": 98, "001946": 98, "002915": 98, "998054": 98, "001938": 98, "002904": 98, "998062": 98, "001020": 98, "998980": 98, "001018": 98, "002035": 98, "998982": 98, "999009": 98, "0003": 98, "0002": 98, "071": 98, "067269": 98, "929": 98, "046": 98, "058243": 98, "954": 98, "035": 98, "032096": 98, "965": 98, "031": 98, "012232": 98, "969": 98, "022": 98, "025896": 98, "978": 98, "020": [98, 100], "013092": 98, "018": 98, "013065": 98, "016": 98, "030542": 98, "984": 98, "013": 98, "020833": 98, "987": 98, "012": 98, "010020": 98, "988": 98, "0073": 98, "0020": 98, "0016": 98, "0015": 98, "0013": 98, "0012": 98, "0010": 98, "0008": 98, "0007": 98, "0006": 98, "0005": 98, "0004": 98, "244": [98, 104], "452381": 98, "459770": 98, "523364": 98, "460784": 98, "446602": 98, "103774": 98, "030612": 98, "110092": 98, "049020": 98, "0034": 98, "0032": 98, "0026": 98, "0025": 98, "4945": 98, "4946": 98, "4947": 98, "4948": 98, "4949": 98, "4950": 98, "846": 98, "7532": 98, "532": 98, "034483": 98, "009646": 98, "965517": 98, "030457": 98, "020513": 98, "969543": 98, "028061": 98, "035443": 98, "971939": 98, "025316": 98, "005168": 98, "974684": 98, "049751": 98, "979487": 98, "019920": 98, "042802": 98, "980080": 98, "017677": 98, "005115": 98, "982323": 98, "012987": 98, "005236": 98, "987013": 98, "012723": 98, "025126": 98, "987277": 98, "010989": 98, "008264": 98, "989011": 98, "010283": 98, "027778": 98, "989717": 98, "009677": 98, "990323": 98, "007614": 98, "010127": 98, "992386": 98, "005051": 98, "994949": 98, "005025": 98, "994975": 98, "005013": 98, "994987": 98, "001859": 98, "001328": 98, "000929": 98, "000664": 98, "186": [98, 100], "188": [98, 100, 103], "189": [98, 100], "snippet": 99, "nlp": [99, 109], "mind": [99, 100], "alphanumer": 99, "facilit": 99, "classlabel": 99, "guidanc": 99, "labels_str": 99, "datalab_str": 99, "labels_int": 99, "remap": 99, "datalab_int": 99, "my_dict": 99, "pet_nam": 99, "rover": 99, "rocki": 99, "speci": 99, "from_dict": 99, "datalab_dataset": 99, "number_of_class": 99, "total_number_of_data_point": 99, "alphabet": 99, "labels_proper_format": 99, "your_classifi": 99, "issues_datafram": 99, "class_predicted_for_flagged_exampl": 99, "class_predicted_for_all_exampl": 99, "grant": 99, "On": [99, 100, 104], "merged_dataset": 99, "label_column_nam": 99, "datataset": 99, "fair": [99, 100], "game": 99, "speedup": [99, 105], "tempfil": 99, "mkdtemp": 99, "sped": 99, "anywai": 99, "pred_probs_merg": 99, "merge_rare_class": 99, "count_threshold": 99, "class_mapping_orig2new": 99, "heath_summari": 99, "num_examples_per_class": 99, "rare_class": 99, "num_classes_merg": 99, "other_class": 99, "labels_merg": 99, "new_c": 99, "merged_prob": 99, "new_class": 99, "original_class": 99, "num_check": 99, "ones_array_ref": 99, "isclos": 99, "though": [99, 100, 109], "successfulli": 99, "virtuou": [99, 102], "cycl": [99, 102], "jointli": 99, "junk": 99, "clutter": 99, "unknown": 99, "caltech": 99, "combined_boolean_mask": 99, "mask1": 99, "mask2": 99, "gradientboostingclassifi": [99, 100], "true_error": [99, 100, 103], "101": [99, 104], "102": [99, 103, 104], "104": [99, 100, 104], "model_to_find_error": 99, "model_to_return": 99, "cl0": 99, "randomizedsearchcv": 99, "expens": 99, "param_distribut": 99, "learning_r": [99, 100], "max_depth": [99, 100], "magnitud": 99, "coeffici": [99, 107], "optin": 99, "environ": [99, 100], "rerun": [99, 100], "cell": [99, 100], "unabl": [99, 100], "render": [99, 100], "nbviewer": [99, 100], "cleanlearninginot": [99, 100], "fittedcleanlearn": [99, 100], "linearregressionlinearregress": 99, "n_init": 99, "continuous_column": 99, "categorical_column": 99, "data_df": 99, "feature_a": 99, "feature_b": 99, "unexpectedli": 99, "emphas": 99, "crucial": 99, "merge_duplicate_set": 99, "merge_kei": 99, "construct_group_kei": 99, "merged_set": 99, "consolidate_set": 99, "issubset": 99, "frozenset": 99, "sets_list": 99, "mutabl": 99, "new_set": 99, "current_set": 99, "intersecting_set": 99, "lowest_score_strategi": 99, "sub_df": 99, "filter_near_dupl": 99, "strategy_fn": 99, "strategy_kwarg": 99, "duplicate_row": 99, "group_kei": 99, "to_keep_indic": 99, "groupbi": 99, "explod": 99, "to_remov": 99, "isin": [99, 105], "kept": 99, "ids_to_remove_seri": 99, "tmp": 99, "ipykernel_8334": 99, "1995098996": 99, "deprecationwarn": 99, "dataframegroupbi": 99, "include_group": 99, "silenc": 99, "assist": 99, "streamlin": 99, "ux": 99, "agpl": 99, "compani": 99, "commerci": 99, "alter": 99, "email": 99, "team": 99, "discuss": 99, "anywher": 99, "profession": 99, "expert": 99, "depth": 100, "survei": [100, 109], "scienc": 100, "multivariate_norm": [100, 102, 103], "make_data": [100, 102], "cov": [100, 102, 103], "avg_trac": [100, 103], "py_tru": 100, "noise_matrix_tru": 100, "noise_marix": 100, "s_test": 100, "noisy_test_label": 100, "purpl": 100, "namespac": 100, "exec": 100, "markerfacecolor": [100, 103], "markeredgecolor": [100, 103, 107], "markers": [100, 103, 107], "markeredgewidth": [100, 103, 107], "realist": 100, "7560": 100, "637318e": 100, "896262e": 100, "548391e": 100, "923417e": 100, "375075e": 100, "3454": 100, "014051": 100, "020451": 100, "249": [100, 104, 109], "042594": 100, "043859": 100, "045954": 100, "6120": 100, "023714": 100, "007136": 100, "119": [100, 104], "107266": 100, "103": [100, 104], "033738": 100, "238": [100, 104], "119505": 100, "236": [100, 104], "037843": 100, "222": 100, "614915": 100, "122": [100, 104], "624422": 100, "625965": 100, "626079": 100, "118": 100, "627675": 100, "695223": 100, "323529": 100, "523015": 100, "013720": 100, "675727": 100, "646521": 100, "anyth": 100, "enhanc": [100, 102, 104], "magic": 100, "liter": 100, "identif": 100, "x27": 100, "logisticregressionlogisticregress": 100, "ever": 100, "092": 100, "040": 100, "004": 100, "surpris": 100, "1705": 100, "01936": 100, "ton": 100, "yourfavoritemodel1": 100, "merged_label": 100, "merged_test_label": 100, "newli": [100, 102], "yourfavoritemodel2": 100, "yourfavoritemodel3": 100, "cl3": 100, "takeawai": 100, "my_test_pred_prob": 100, "my_test_pr": 100, "issues_test": 100, "corrected_test_label": 100, "pretend": 100, "cl_test_pr": 100, "fairli": 100, "label_acc": 100, "percentag": 100, "offset": 100, "nquestion": 100, "overestim": 100, "answer": 100, "experienc": 100, "prioiri": 100, "known": 100, "versatil": 100, "label_issues_indic": 100, "213": [100, 104], "218": [100, 104], "152": 100, "197": [100, 104], "196": [100, 104], "170": 100, "214": 100, "164": [100, 103], "198": [100, 104], "191": [100, 104], "117": [100, 107], "206": [100, 104], "115": [100, 104], "193": 100, "194": 100, "201": [100, 104], "174": 100, "163": 100, "150": [100, 102, 104, 109], "169": [100, 109], "151": [100, 104], "168": 100, "precision_scor": 100, "recall_scor": 100, "f1_score": 100, "true_label_issu": 100, "filter_by_list": 100, "718750": [100, 102], "807018": 100, "912": [100, 109], "733333": 100, "800000": 100, "721311": 100, "792793": 100, "908": 100, "676923": 100, "765217": 100, "892": 100, "567901": 100, "702290": 100, "844": 100, "gaug": 100, "label_issues_count": 100, "155": [100, 104], "156": 100, "172": [100, 103], "easiest": 100, "modular": 100, "penalti": 100, "l2": 100, "model3": 100, "n_estim": 100, "cv_pred_probs_1": 100, "cv_pred_probs_2": 100, "cv_pred_probs_3": 100, "label_quality_scores_best": 100, "cv_pred_probs_ensembl": 100, "label_quality_scores_bett": 100, "superior": [100, 106], "timm": 101, "glad": 102, "multiannotator_label": 102, "300": [102, 109], "noisier": 102, "111": [102, 107], "local_data": [102, 103], "true_labels_train": [102, 103], "noise_matrix_bett": 102, "noise_matrix_wors": 102, "transpos": [102, 105], "zfill": 102, "row_na_check": 102, "notna": 102, "reset_index": 102, "a0001": 102, "a0002": 102, "a0003": 102, "a0004": 102, "a0005": 102, "a0006": 102, "a0007": 102, "a0008": 102, "a0009": 102, "a0010": 102, "a0041": 102, "a0042": 102, "a0043": 102, "a0044": 102, "a0045": 102, "a0046": 102, "a0047": 102, "a0048": 102, "a0049": 102, "a0050": 102, "na": 102, "60856743": 102, "41693214": 102, "40908785": 102, "87147629": 102, "64941785": 102, "10774851": 102, "0524466": 102, "71853246": 102, "37169848": 102, "66031048": 102, "multiannotator_util": 102, "crude": 102, "straight": 102, "majority_vote_label": 102, "736118": 102, "757751": 102, "782232": 102, "715565": 102, "824256": 102, "quality_annotator_a0001": 102, "quality_annotator_a0002": 102, "quality_annotator_a0003": 102, "quality_annotator_a0004": 102, "quality_annotator_a0005": 102, "quality_annotator_a0006": 102, "quality_annotator_a0007": 102, "quality_annotator_a0008": 102, "quality_annotator_a0009": 102, "quality_annotator_a0010": 102, "quality_annotator_a0041": 102, "quality_annotator_a0042": 102, "quality_annotator_a0043": 102, "quality_annotator_a0044": 102, "quality_annotator_a0045": 102, "quality_annotator_a0046": 102, "quality_annotator_a0047": 102, "quality_annotator_a0048": 102, "quality_annotator_a0049": 102, "quality_annotator_a0050": 102, "070564": 102, "216078": 102, "119188": 102, "alongisd": 102, "244981": 102, "208333": 102, "295979": 102, "294118": 102, "324197": 102, "310345": 102, "355316": 102, "346154": 102, "439732": 102, "480000": 102, "a0031": 102, "523205": 102, "580645": 102, "a0034": 102, "535313": 102, "607143": 102, "a0021": 102, "606999": 102, "a0015": 102, "609526": 102, "678571": 102, "a0011": 102, "621103": 102, "692308": 102, "improved_consensus_label": 102, "majority_vote_accuraci": 102, "cleanlab_label_accuraci": 102, "8581081081081081": 102, "9797297297297297": 102, "besid": 102, "sorted_consensus_quality_scor": 102, "worst_qual": 102, "better_qu": 102, "worst_quality_accuraci": 102, "better_quality_accuraci": 102, "9893238434163701": 102, "improved_pred_prob": 102, "treat": [102, 103, 107, 109], "analzi": 102, "copyright": 103, "advertis": 103, "violenc": 103, "nsfw": 103, "celeba": 103, "make_multilabel_data": 103, "boxes_coordin": 103, "box_multilabel": 103, "make_multi": 103, "bx1": 103, "by1": 103, "bx2": 103, "by2": 103, "label_list": 103, "ur": 103, "upper": 103, "inidx": 103, "logical_and": 103, "inv_d": 103, "labels_idx": 103, "true_labels_test": 103, "dict_unique_label": 103, "get_color_arrai": 103, "dcolor": 103, "aa4400": 103, "55227f": 103, "55a100": 103, "00ff00": 103, "007f7f": 103, "386b55": 103, "0000ff": 103, "y_onehot": 103, "single_class_label": 103, "stratifi": [103, 106], "kf": 103, "train_index": 103, "test_index": 103, "clf_cv": 103, "x_train_cv": 103, "x_test_cv": 103, "y_train_cv": 103, "y_test_cv": 103, "y_pred_cv": 103, "saw": 103, "num_to_displai": 103, "09": [103, 104, 107], "267": 103, "225": 103, "171": 103, "234": 103, "165": 103, "227": [103, 104], "262": [103, 104], "266": [103, 104], "139": 103, "143": [103, 104], "216": [103, 104], "265": 103, "159": [103, 104], "despit": [103, 109], "suspect": 103, "888": 103, "8224": 103, "9632": 103, "968": 103, "6512": 103, "0444": 103, "774": 103, "labels_binary_format": 103, "labels_list_format": 103, "surround": 104, "scene": 104, "coco": 104, "everydai": 104, "has_label_issu": 104, "nc": [104, 108, 109], "s3": [104, 108, 109], "amazonaw": [104, 108, 109], "objectdetectionbenchmark": 104, "tutorial_obj": 104, "pkl": 104, "example_imag": 104, "unzip": [104, 109], "_separate_label": 104, "_separate_predict": 104, "begin": 104, "image_path": 104, "rb": 104, "image_to_visu": 104, "seg_map": 104, "334": 104, "bboxes_ignor": 104, "290": 104, "286": 104, "285": 104, "224": 104, "231": 104, "293": 104, "289": 104, "282": 104, "281": 104, "271": 104, "280": 104, "277": 104, "279": 104, "287": 104, "299": 104, "276": 104, "307": 104, "321": 104, "326": 104, "333": 104, "261": 104, "319": 104, "257": 104, "283": 104, "243": 104, "303": 104, "316": 104, "247": 104, "323": 104, "226": 104, "228": 104, "232": 104, "219": 104, "239": 104, "240": 104, "209": 104, "242": 104, "202": 104, "230": 104, "215": 104, "220": 104, "229": 104, "217": [104, 109], "237": 104, "207": 104, "204": 104, "84": [104, 107], "205": 104, "223": 104, "153": 104, "140": 104, "124": 104, "268": 104, "273": 104, "284": 104, "110": 104, "136": 104, "145": 104, "297": 104, "317": 104, "192": 104, "332": 104, "324": 104, "203": 104, "199": 104, "291": 104, "000000481413": 104, "jpg": 104, "42398": 104, "44503": 104, "29968": 104, "336": 104, "21005": 104, "9978472": 104, "forgot": 104, "drew": 104, "label_issue_idx": 104, "num_examples_to_show": 104, "138": [104, 109], "candid": 104, "97489622": 104, "70610878": 104, "98764951": 104, "88899237": 104, "99085805": 104, "issue_idx": 104, "95569726e": 104, "03354841e": 104, "57510169e": 104, "58447666e": 104, "39755858e": 104, "issue_to_visu": 104, "000000009483": 104, "95569726168054e": 104, "addition": [104, 108], "visibl": 104, "missmatch": 104, "likelei": 104, "agnost": 104, "vaidat": 104, "inconsist": 104, "000000395701": 104, "033548411774308e": 104, "armchair": 104, "tv": 104, "000000154004": 104, "38300759625496356": 104, "foreground": 104, "000000448410": 104, "0008575101690203273": 104, "crowd": 104, "alon": 104, "resembl": [104, 105], "000000499768": 104, "9748962231208227": 104, "000000521141": 104, "8889923658893665": 104, "000000143931": 104, "9876495074395956": 104, "bonu": 104, "uncov": 104, "irregular": 104, "anomali": 104, "object_detection_util": 104, "calculate_bounding_box_area": 104, "num_imgs_to_show": 104, "lab_object_count": 104, "pred_object_count": 104, "000000430073": 104, "000000183709": 104, "000000189475": 104, "label_norm": 104, "pred_norm": 104, "area": [104, 108], "lab_area": 104, "pred_area": 104, "lab_area_mean": 104, "lab_area_std": 104, "max_deviation_valu": 104, "max_deviation_class": 104, "deviation_valu": 104, "deviation_class": 104, "mean_area": 104, "std_area": 104, "class_area": 104, "deviations_awai": 104, "max_deviation_index": 104, "num_imgs_to_show_per_class": 104, "class_num": 104, "000000422886": 104, "000000341828": 104, "000000461009": 104, "train_feature_embed": 105, "ood_train_feature_scor": 105, "test_feature_embed": 105, "ood_test_feature_scor": 105, "ood_train_predictions_scor": 105, "train_pred_prob": 105, "ood_test_predictions_scor": 105, "test_pred_prob": 105, "pylab": 105, "rcparam": 105, "baggingclassifi": 105, "therebi": 105, "rescal": 105, "transform_norm": 105, "totensor": 105, "root": 105, "animal_class": 105, "non_animal_class": 105, "animal_idx": 105, "test_idx": 105, "toronto": 105, "edu": 105, "kriz": 105, "170498071": 105, "819746": 105, "54it": 105, "plot_imag": 105, "visualize_outli": 105, "txt_class": 105, "img": [105, 107], "npimg": 105, "show_label": 105, "data_subset": 105, "resnet50": 105, "corpu": 105, "2048": 105, "embed_imag": 105, "create_model": 105, "strang": 105, "odd": 105, "train_ood_features_scor": 105, "top_train_ood_features_idx": 105, "fun": 105, "negat": 105, "homogen": 105, "bottom_train_ood_features_idx": 105, "test_ood_features_scor": 105, "top_ood_features_idx": 105, "inevit": 105, "trade": 105, "5th": 105, "percentil": 105, "fifth_percentil": 105, "plt_rang": 105, "hist": 105, "train_outlier_scor": 105, "axvlin": 105, "test_outlier_scor": 105, "ood_features_indic": 105, "revisit": 105, "return_invers": 105, "train_feature_embeddings_sc": 105, "test_feature_embeddings_sc": 105, "train_pred_label": 105, "9702": 105, "train_ood_predictions_scor": 105, "test_ood_predictions_scor": 105, "lost": 105, "unsuit": 106, "ok": [106, 109], "convention": 106, "aforement": 106, "hypothet": 106, "contrast": 106, "tradit": 106, "disjoint": 106, "out_of_sample_pred_probs_for_a": 106, "out_of_sample_pred_probs_for_b": 106, "out_of_sample_pred_probs_for_c": 106, "out_of_sample_pred_prob": 106, "price": 107, "incom": 107, "sensor": 107, "histgradientboostingregressor": 107, "r2_score": 107, "student_grades_r": 107, "final_scor": 107, "true_final_scor": 107, "homework": 107, "3d": 107, "mpl_toolkit": 107, "mplot3d": 107, "axes3d": 107, "errors_idx": 107, "add_subplot": 107, "z": 107, "errors_mask": 107, "feature_column": 107, "predicted_column": 107, "x_train_raw": 107, "x_test_raw": 107, "randomforestregressor": 107, "385101": 107, "499503": 107, "698255": 107, "776647": 107, "109373": 107, "170547": 107, "481096": 107, "984759": 107, "645270": 107, "795928": 107, "141": 107, "659": 107, "318": 107, "305": 107, "560": 107, "657": 107, "688": 107, "view_datapoint": 107, "preds_og": 107, "r2_og": 107, "838": 107, "found_label_issu": 107, "preds_cl": 107, "r2_cl": 107, "926": 107, "favorit": 107, "968627e": 107, "228799": 107, "646674e": 107, "402962": 107, "323818e": 107, "952758": 107, "422144e": 107, "456908": 107, "465815e": 107, "753968": 107, "791186e": 107, "110719": 107, "485156e": 107, "670640": 107, "225300e": 107, "749976": 107, "499679e": 107, "947007": 107, "067882e": 107, "648396": 107, "synthia": 108, "imagesegment": 108, "given_mask": 108, "predicted_mask": 108, "set_printopt": [108, 109], "sky": 108, "sidewalk": 108, "veget": 108, "terrain": 108, "rider": 108, "pred_probs_filepath": 108, "1088": 108, "1920": 108, "label_filepath": 108, "synthia_class": 108, "maunal": 108, "100000": 108, "244800": 108, "leftmost": 108, "middl": [108, 109], "infact": 108, "rightmost": 108, "discrep": 108, "3263230": 108, "783381": 108, "275110": 108, "255917": 108, "78225": 108, "55990": 108, "54315": 108, "33591": 108, "24645": 108, "21054": 108, "15045": 108, "14171": 108, "13832": 108, "13498": 108, "11490": 108, "9164": 108, "8769": 108, "6999": 108, "6031": 108, "5011": 108, "mistakenli": 108, "class_issu": 108, "aim": [108, 109], "domin": 108, "bunch": 109, "conll": 109, "2003": 109, "love": 109, "n_i": 109, "optional_list_of_ordered_class_nam": 109, "deepai": 109, "conll2003": 109, "rm": 109, "tokenclassif": 109, "162": 109, "2400": 109, "52e0": 109, "1a01": 109, "connect": 109, "443": 109, "await": 109, "982975": 109, "960k": 109, "959": 109, "94k": 109, "22mb": 109, "mb": 109, "directori": 109, "inflat": 109, "182": 109, "17045998": 109, "16m": 109, "octet": 109, "26m": 109, "9mb": 109, "bert": 109, "read_npz": 109, "filepath": 109, "corrsespond": 109, "iob2": 109, "given_ent": 109, "entity_map": 109, "readfil": 109, "startswith": 109, "docstart": 109, "isalpha": 109, "isupp": 109, "indices_to_preview": 109, "nsentenc": 109, "eu": 109, "reject": 109, "boycott": 109, "british": 109, "lamb": 109, "00030412": 109, "00023826": 109, "99936208": 109, "00007009": 109, "00002545": 109, "99998795": 109, "00000401": 109, "00000218": 109, "00000455": 109, "00000131": 109, "00000749": 109, "99996115": 109, "00001371": 109, "0000087": 109, "00000895": 109, "99998936": 109, "00000382": 109, "00000178": 109, "00000366": 109, "00000137": 109, "99999101": 109, "00000266": 109, "00000174": 109, "0000035": 109, "00000109": 109, "99998768": 109, "00000482": 109, "00000202": 109, "00000438": 109, "0000011": 109, "00000465": 109, "99996392": 109, "00001105": 109, "0000116": 109, "00000878": 109, "99998671": 109, "00000364": 109, "00000213": 109, "00000472": 109, "00000281": 109, "99999073": 109, "00000211": 109, "00000159": 109, "00000442": 109, "00000115": 109, "peter": 109, "blackburn": 109, "00000358": 109, "00000529": 109, "99995623": 109, "0000129": 109, "0000024": 109, "00001812": 109, "99994141": 109, "00001645": 109, "00002162": 109, "brussel": 109, "1996": 109, "00001172": 109, "00000821": 109, "00004661": 109, "0000618": 109, "99987167": 109, "99999061": 109, "00000201": 109, "00000195": 109, "00000408": 109, "00000135": 109, "2254": 109, "2907": 109, "19392": 109, "9962": 109, "8904": 109, "19303": 109, "12918": 109, "9256": 109, "11855": 109, "18392": 109, "20426": 109, "19402": 109, "14744": 109, "19371": 109, "4645": 109, "10331": 109, "9430": 109, "6143": 109, "18367": 109, "12914": 109, "todai": 109, "weather": 109, "march": 109, "scalfaro": 109, "northern": 109, "himself": 109, "said": 109, "germani": 109, "nastja": 109, "rysich": 109, "north": 109, "spla": 109, "fought": 109, "khartoum": 109, "govern": 109, "south": 109, "1983": 109, "autonomi": 109, "animist": 109, "region": 109, "moslem": 109, "arabis": 109, "mayor": 109, "antonio": 109, "gonzalez": 109, "garcia": 109, "revolutionari": 109, "wednesdai": 109, "troop": 109, "raid": 109, "farm": 109, "stole": 109, "rape": 109, "women": 109, "spring": 109, "chg": 109, "hrw": 109, "12pct": 109, "princ": 109, "photo": 109, "moment": 109, "spokeswoman": 109, "rainier": 109, "told": 109, "reuter": 109, "danila": 109, "carib": 109, "w224": 109, "equip": 109, "radiomet": 109, "earn": 109, "19996": 109, "london": 109, "denom": 109, "sale": 109, "uk": 109, "jp": 109, "fr": 109, "maccabi": 109, "hapoel": 109, "haifa": 109, "tel": 109, "aviv": 109, "hospit": 109, "rever": 109, "roman": 109, "cathol": 109, "nun": 109, "admit": 109, "calcutta": 109, "week": 109, "ago": 109, "fever": 109, "vomit": 109, "allianc": 109, "embattl": 109, "kabul": 109, "salang": 109, "highwai": 109, "mondai": 109, "tuesdai": 109, "suprem": 109, "council": 109, "led": 109, "jumbish": 109, "milli": 109, "movement": 109, "warlord": 109, "abdul": 109, "rashid": 109, "dostum": 109, "dollar": 109, "exchang": 109, "3570": 109, "12049": 109, "born": 109, "1937": 109, "provinc": 109, "anhui": 109, "dai": 109, "came": 109, "shanghai": 109, "citi": 109, "prolif": 109, "author": 109, "teacher": 109, "chines": 109, "16764": 109, "1990": 109, "historian": 109, "alan": 109, "john": 109, "percival": 109, "taylor": 109, "di": 109, "20446": 109, "pace": 109, "bowler": 109, "ian": 109, "harvei": 109, "claim": 109, "victoria": 109, "15514": 109, "cotti": 109, "osc": 109, "foreign": 109, "minist": 109, "7525": 109, "sultan": 109, "specter": 109, "crown": 109, "abdullah": 109, "defenc": 109, "aviat": 109, "jeddah": 109, "saudi": 109, "agenc": 109, "2288": 109, "hi": 109, "customari": 109, "outfit": 109, "champion": 109, "damp": 109, "scalp": 109, "canada": 109, "reign": 109, "olymp": 109, "donovan": 109, "bailei": 109, "1992": 109, "linford": 109, "christi": 109, "britain": 109, "1984": 109, "1988": 109, "carl": 109, "lewi": 109, "ambigi": 109, "punctuat": 109, "chicago": 109, "digest": 109, "philadelphia": 109, "usda": 109, "york": 109, "token_issu": 109, "471": 109, "kean": 109, "year": 109, "contract": 109, "manchest": 109, "19072": 109, "societi": 109, "bite": 109, "deliv": 109, "19910": 109, "father": 109, "clarenc": 109, "woolmer": 109, "renam": 109, "uttar": 109, "pradesh": 109, "india": 109, "ranji": 109, "trophi": 109, "nation": 109, "championship": 109, "captain": 109, "1949": 109, "15658": 109, "19879": 109, "iii": 109, "brian": 109, "shimer": 109, "randi": 109, "jone": 109, "19104": 109}, "objects": {"cleanlab": [[0, 0, 0, "-", "benchmarking"], [2, 0, 0, "-", "classification"], [3, 0, 0, "-", "count"], [4, 0, 0, "-", "data_valuation"], [12, 0, 0, "-", "datalab"], [37, 0, 0, "-", "dataset"], [40, 0, 0, "-", "experimental"], [44, 0, 0, "-", "filter"], [45, 0, 0, "-", "internal"], [60, 0, 0, "-", "models"], [62, 0, 0, "-", "multiannotator"], [65, 0, 0, "-", "multilabel_classification"], [68, 0, 0, "-", "object_detection"], [71, 0, 0, "-", "outlier"], [72, 0, 0, "-", "rank"], [73, 0, 0, "-", "regression"], [77, 0, 0, "-", "segmentation"], [81, 0, 0, "-", "token_classification"]], "cleanlab.benchmarking": [[1, 0, 0, "-", "noise_generation"]], "cleanlab.benchmarking.noise_generation": [[1, 1, 1, "", "generate_n_rand_probabilities_that_sum_to_m"], [1, 1, 1, "", "generate_noise_matrix_from_trace"], [1, 1, 1, "", "generate_noisy_labels"], [1, 1, 1, "", "noise_matrix_is_valid"], [1, 1, 1, "", "randomly_distribute_N_balls_into_K_bins"]], "cleanlab.classification": [[2, 2, 1, "", "CleanLearning"]], "cleanlab.classification.CleanLearning": [[2, 3, 1, "", "__init_subclass__"], [2, 3, 1, "", "find_label_issues"], [2, 3, 1, "", "fit"], [2, 3, 1, "", "get_label_issues"], [2, 3, 1, "", "get_metadata_routing"], [2, 3, 1, "", "get_params"], [2, 3, 1, "", "predict"], [2, 3, 1, "", "predict_proba"], [2, 3, 1, "", "save_space"], [2, 3, 1, "", "score"], [2, 3, 1, "", "set_fit_request"], [2, 3, 1, "", "set_params"], [2, 3, 1, "", "set_score_request"]], "cleanlab.count": [[3, 1, 1, "", "calibrate_confident_joint"], [3, 1, 1, "", "compute_confident_joint"], [3, 1, 1, "", "estimate_confident_joint_and_cv_pred_proba"], [3, 1, 1, "", "estimate_cv_predicted_probabilities"], [3, 1, 1, "", "estimate_joint"], [3, 1, 1, "", "estimate_latent"], [3, 1, 1, "", "estimate_noise_matrices"], [3, 1, 1, "", "estimate_py_and_noise_matrices_from_probabilities"], [3, 1, 1, "", "estimate_py_noise_matrices_and_cv_pred_proba"], [3, 1, 1, "", "get_confident_thresholds"], [3, 1, 1, "", "num_label_issues"]], "cleanlab.data_valuation": [[4, 1, 1, "", "data_shapley_knn"]], "cleanlab.datalab": [[5, 0, 0, "-", "datalab"], [16, 0, 0, "-", "internal"]], "cleanlab.datalab.datalab": [[5, 2, 1, "", "Datalab"]], "cleanlab.datalab.datalab.Datalab": [[5, 4, 1, "", "class_names"], [5, 3, 1, "", "find_issues"], [5, 3, 1, "", "get_info"], [5, 3, 1, "", "get_issue_summary"], [5, 3, 1, "", "get_issues"], [5, 4, 1, "", "has_labels"], [5, 4, 1, "", "info"], [5, 4, 1, "", "issue_summary"], [5, 4, 1, "", "issues"], [5, 4, 1, "", "labels"], [5, 3, 1, "", "list_default_issue_types"], [5, 3, 1, "", "list_possible_issue_types"], [5, 3, 1, "", "load"], [5, 3, 1, "", "report"], [5, 3, 1, "", "save"]], "cleanlab.datalab.internal": [[13, 0, 0, "-", "data"], [14, 0, 0, "-", "data_issues"], [17, 0, 0, "-", "issue_finder"], [15, 0, 0, "-", "issue_manager_factory"], [33, 0, 0, "-", "model_outputs"], [34, 0, 0, "-", "report"], [35, 0, 0, "-", "task"]], "cleanlab.datalab.internal.data": [[13, 2, 1, "", "Data"], [13, 5, 1, "", "DataFormatError"], [13, 5, 1, "", "DatasetDictError"], [13, 5, 1, "", "DatasetLoadError"], [13, 2, 1, "", "Label"], [13, 2, 1, "", "MultiClass"], [13, 2, 1, "", "MultiLabel"]], "cleanlab.datalab.internal.data.Data": [[13, 4, 1, "", "class_names"], [13, 4, 1, "", "has_labels"]], "cleanlab.datalab.internal.data.DataFormatError": [[13, 3, 1, "", "add_note"], [13, 6, 1, "", "args"], [13, 3, 1, "", "with_traceback"]], "cleanlab.datalab.internal.data.DatasetDictError": [[13, 3, 1, "", "add_note"], [13, 6, 1, "", "args"], [13, 3, 1, "", "with_traceback"]], "cleanlab.datalab.internal.data.DatasetLoadError": [[13, 3, 1, "", "add_note"], [13, 6, 1, "", "args"], [13, 3, 1, "", "with_traceback"]], "cleanlab.datalab.internal.data.Label": [[13, 4, 1, "", "class_names"], [13, 4, 1, "", "is_available"]], "cleanlab.datalab.internal.data.MultiClass": [[13, 4, 1, "", "class_names"], [13, 4, 1, "", "is_available"]], "cleanlab.datalab.internal.data.MultiLabel": [[13, 4, 1, "", "class_names"], [13, 4, 1, "", "is_available"]], "cleanlab.datalab.internal.data_issues": [[14, 2, 1, "", "DataIssues"], [14, 1, 1, "", "get_data_statistics"]], "cleanlab.datalab.internal.data_issues.DataIssues": [[14, 3, 1, "", "collect_issues_from_imagelab"], [14, 3, 1, "", "collect_issues_from_issue_manager"], [14, 3, 1, "", "collect_statistics"], [14, 3, 1, "", "get_info"], [14, 3, 1, "", "get_issue_summary"], [14, 3, 1, "", "get_issues"], [14, 6, 1, "", "info"], [14, 6, 1, "", "issue_summary"], [14, 6, 1, "", "issues"], [14, 3, 1, "", "set_health_score"], [14, 4, 1, "", "statistics"]], "cleanlab.datalab.internal.issue_finder": [[17, 2, 1, "", "IssueFinder"]], "cleanlab.datalab.internal.issue_finder.IssueFinder": [[17, 3, 1, "", "find_issues"], [17, 3, 1, "", "get_available_issue_types"]], "cleanlab.datalab.internal.issue_manager": [[19, 0, 0, "-", "data_valuation"], [20, 0, 0, "-", "duplicate"], [21, 0, 0, "-", "imbalance"], [23, 0, 0, "-", "issue_manager"], [24, 0, 0, "-", "label"], [27, 0, 0, "-", "noniid"], [28, 0, 0, "-", "null"], [29, 0, 0, "-", "outlier"], [32, 0, 0, "-", "underperforming_group"]], "cleanlab.datalab.internal.issue_manager.data_valuation": [[19, 2, 1, "", "DataValuationIssueManager"]], "cleanlab.datalab.internal.issue_manager.data_valuation.DataValuationIssueManager": [[19, 6, 1, "", "DEFAULT_THRESHOLD"], [19, 3, 1, "", "collect_info"], [19, 6, 1, "", "description"], [19, 3, 1, "", "find_issues"], [19, 6, 1, "", "info"], [19, 6, 1, "", "issue_name"], [19, 6, 1, "", "issue_score_key"], [19, 6, 1, "", "issues"], [19, 3, 1, "", "make_summary"], [19, 3, 1, "", "report"], [19, 6, 1, "", "summary"], [19, 6, 1, "", "verbosity_levels"]], "cleanlab.datalab.internal.issue_manager.duplicate": [[20, 2, 1, "", "NearDuplicateIssueManager"]], "cleanlab.datalab.internal.issue_manager.duplicate.NearDuplicateIssueManager": [[20, 3, 1, "", "collect_info"], [20, 6, 1, "", "description"], [20, 3, 1, "", "find_issues"], [20, 6, 1, "", "info"], [20, 6, 1, "", "issue_name"], [20, 6, 1, "", "issue_score_key"], [20, 6, 1, "", "issues"], [20, 3, 1, "", "make_summary"], [20, 6, 1, "", "near_duplicate_sets"], [20, 3, 1, "", "report"], [20, 6, 1, "", "summary"], [20, 6, 1, "", "verbosity_levels"]], "cleanlab.datalab.internal.issue_manager.imbalance": [[21, 2, 1, "", "ClassImbalanceIssueManager"]], "cleanlab.datalab.internal.issue_manager.imbalance.ClassImbalanceIssueManager": [[21, 3, 1, "", "collect_info"], [21, 6, 1, "", "description"], [21, 3, 1, "", "find_issues"], [21, 6, 1, "", "info"], [21, 6, 1, "", "issue_name"], [21, 6, 1, "", "issue_score_key"], [21, 6, 1, "", "issues"], [21, 3, 1, "", "make_summary"], [21, 3, 1, "", "report"], [21, 6, 1, "", "summary"], [21, 6, 1, "", "verbosity_levels"]], "cleanlab.datalab.internal.issue_manager.issue_manager": [[23, 2, 1, "", "IssueManager"]], "cleanlab.datalab.internal.issue_manager.issue_manager.IssueManager": [[23, 3, 1, "", "collect_info"], [23, 6, 1, "", "description"], [23, 3, 1, "", "find_issues"], [23, 6, 1, "", "info"], [23, 6, 1, "", "issue_name"], [23, 6, 1, "", "issue_score_key"], [23, 6, 1, "", "issues"], [23, 3, 1, "", "make_summary"], [23, 3, 1, "", "report"], [23, 6, 1, "", "summary"], [23, 6, 1, "", "verbosity_levels"]], "cleanlab.datalab.internal.issue_manager.label": [[24, 2, 1, "", "LabelIssueManager"]], "cleanlab.datalab.internal.issue_manager.label.LabelIssueManager": [[24, 3, 1, "", "collect_info"], [24, 6, 1, "", "description"], [24, 3, 1, "", "find_issues"], [24, 3, 1, "", "get_health_summary"], [24, 6, 1, "", "health_summary_parameters"], [24, 6, 1, "", "info"], [24, 6, 1, "", "issue_name"], [24, 6, 1, "", "issue_score_key"], [24, 6, 1, "", "issues"], [24, 3, 1, "", "make_summary"], [24, 3, 1, "", "report"], [24, 6, 1, "", "summary"], [24, 6, 1, "", "verbosity_levels"]], "cleanlab.datalab.internal.issue_manager.multilabel": [[26, 0, 0, "-", "label"]], "cleanlab.datalab.internal.issue_manager.multilabel.label": [[26, 2, 1, "", "MultilabelIssueManager"]], "cleanlab.datalab.internal.issue_manager.multilabel.label.MultilabelIssueManager": [[26, 3, 1, "", "collect_info"], [26, 6, 1, "", "description"], [26, 3, 1, "", "find_issues"], [26, 6, 1, "", "info"], [26, 6, 1, "", "issue_name"], [26, 6, 1, "", "issue_score_key"], [26, 6, 1, "", "issues"], [26, 3, 1, "", "make_summary"], [26, 3, 1, "", "report"], [26, 6, 1, "", "summary"], [26, 6, 1, "", "verbosity_levels"]], "cleanlab.datalab.internal.issue_manager.noniid": [[27, 2, 1, "", "NonIIDIssueManager"], [27, 1, 1, "", "simplified_kolmogorov_smirnov_test"]], "cleanlab.datalab.internal.issue_manager.noniid.NonIIDIssueManager": [[27, 3, 1, "", "collect_info"], [27, 6, 1, "", "description"], [27, 3, 1, "", "find_issues"], [27, 6, 1, "", "info"], [27, 6, 1, "", "issue_name"], [27, 6, 1, "", "issue_score_key"], [27, 6, 1, "", "issues"], [27, 3, 1, "", "make_summary"], [27, 3, 1, "", "report"], [27, 6, 1, "", "summary"], [27, 6, 1, "", "verbosity_levels"]], "cleanlab.datalab.internal.issue_manager.null": [[28, 2, 1, "", "NullIssueManager"]], "cleanlab.datalab.internal.issue_manager.null.NullIssueManager": [[28, 3, 1, "", "collect_info"], [28, 6, 1, "", "description"], [28, 3, 1, "", "find_issues"], [28, 6, 1, "", "info"], [28, 6, 1, "", "issue_name"], [28, 6, 1, "", "issue_score_key"], [28, 6, 1, "", "issues"], [28, 3, 1, "", "make_summary"], [28, 3, 1, "", "report"], [28, 6, 1, "", "summary"], [28, 6, 1, "", "verbosity_levels"]], "cleanlab.datalab.internal.issue_manager.outlier": [[29, 2, 1, "", "OutlierIssueManager"]], "cleanlab.datalab.internal.issue_manager.outlier.OutlierIssueManager": [[29, 6, 1, "", "DEFAULT_THRESHOLDS"], [29, 3, 1, "", "collect_info"], [29, 6, 1, "", "description"], [29, 3, 1, "", "find_issues"], [29, 6, 1, "", "info"], [29, 6, 1, "", "issue_name"], [29, 6, 1, "", "issue_score_key"], [29, 6, 1, "", "issues"], [29, 3, 1, "", "make_summary"], [29, 6, 1, "", "ood"], [29, 3, 1, "", "report"], [29, 6, 1, "", "summary"], [29, 6, 1, "", "verbosity_levels"]], "cleanlab.datalab.internal.issue_manager.regression": [[31, 0, 0, "-", "label"]], "cleanlab.datalab.internal.issue_manager.regression.label": [[31, 2, 1, "", "RegressionLabelIssueManager"], [31, 1, 1, "", "find_issues_with_features"], [31, 1, 1, "", "find_issues_with_predictions"]], "cleanlab.datalab.internal.issue_manager.regression.label.RegressionLabelIssueManager": [[31, 3, 1, "", "collect_info"], [31, 6, 1, "", "description"], [31, 3, 1, "", "find_issues"], [31, 6, 1, "", "info"], [31, 6, 1, "", "issue_name"], [31, 6, 1, "", "issue_score_key"], [31, 6, 1, "", "issues"], [31, 3, 1, "", "make_summary"], [31, 3, 1, "", "report"], [31, 6, 1, "", "summary"], [31, 6, 1, "", "verbosity_levels"]], "cleanlab.datalab.internal.issue_manager.underperforming_group": [[32, 2, 1, "", "UnderperformingGroupIssueManager"]], "cleanlab.datalab.internal.issue_manager.underperforming_group.UnderperformingGroupIssueManager": [[32, 6, 1, "", "NO_UNDERPERFORMING_CLUSTER_ID"], [32, 6, 1, "", "OUTLIER_CLUSTER_LABELS"], [32, 3, 1, "", "collect_info"], [32, 6, 1, "", "description"], [32, 3, 1, "", "filter_cluster_ids"], [32, 3, 1, "", "find_issues"], [32, 3, 1, "", "get_worst_cluster"], [32, 6, 1, "", "info"], [32, 6, 1, "", "issue_name"], [32, 6, 1, "", "issue_score_key"], [32, 6, 1, "", "issues"], [32, 3, 1, "", "make_summary"], [32, 3, 1, "", "perform_clustering"], [32, 3, 1, "", "report"], [32, 3, 1, "", "set_knn_graph"], [32, 6, 1, "", "summary"], [32, 6, 1, "", "verbosity_levels"]], "cleanlab.datalab.internal.issue_manager_factory": [[15, 7, 1, "", "REGISTRY"], [15, 1, 1, "", "list_default_issue_types"], [15, 1, 1, "", "list_possible_issue_types"], [15, 1, 1, "", "register"]], "cleanlab.datalab.internal.model_outputs": [[33, 2, 1, "", "ModelOutput"], [33, 2, 1, "", "MultiClassPredProbs"], [33, 2, 1, "", "MultiLabelPredProbs"], [33, 2, 1, "", "RegressionPredictions"]], "cleanlab.datalab.internal.model_outputs.ModelOutput": [[33, 3, 1, "", "collect"], [33, 6, 1, "", "data"], [33, 3, 1, "", "validate"]], "cleanlab.datalab.internal.model_outputs.MultiClassPredProbs": [[33, 6, 1, "", "argument"], [33, 3, 1, "", "collect"], [33, 6, 1, "", "data"], [33, 3, 1, "", "validate"]], "cleanlab.datalab.internal.model_outputs.MultiLabelPredProbs": [[33, 6, 1, "", "argument"], [33, 3, 1, "", "collect"], [33, 6, 1, "", "data"], [33, 3, 1, "", "validate"]], "cleanlab.datalab.internal.model_outputs.RegressionPredictions": [[33, 6, 1, "", "argument"], [33, 3, 1, "", "collect"], [33, 6, 1, "", "data"], [33, 3, 1, "", "validate"]], "cleanlab.datalab.internal.report": [[34, 2, 1, "", "Reporter"]], "cleanlab.datalab.internal.report.Reporter": [[34, 3, 1, "", "get_report"], [34, 3, 1, "", "report"]], "cleanlab.datalab.internal.task": [[35, 2, 1, "", "Task"]], "cleanlab.datalab.internal.task.Task": [[35, 6, 1, "", "CLASSIFICATION"], [35, 6, 1, "", "MULTILABEL"], [35, 6, 1, "", "REGRESSION"], [35, 3, 1, "", "__contains__"], [35, 3, 1, "", "__getitem__"], [35, 3, 1, "", "__iter__"], [35, 3, 1, "", "__len__"], [35, 3, 1, "", "from_str"], [35, 4, 1, "", "is_classification"], [35, 4, 1, "", "is_multilabel"], [35, 4, 1, "", "is_regression"]], "cleanlab.dataset": [[37, 1, 1, "", "find_overlapping_classes"], [37, 1, 1, "", "health_summary"], [37, 1, 1, "", "overall_label_health_score"], [37, 1, 1, "", "rank_classes_by_label_quality"]], "cleanlab.experimental": [[38, 0, 0, "-", "cifar_cnn"], [39, 0, 0, "-", "coteaching"], [41, 0, 0, "-", "label_issues_batched"], [42, 0, 0, "-", "mnist_pytorch"], [43, 0, 0, "-", "span_classification"]], "cleanlab.experimental.cifar_cnn": [[38, 2, 1, "", "CNN"], [38, 1, 1, "", "call_bn"]], "cleanlab.experimental.cifar_cnn.CNN": [[38, 6, 1, "", "T_destination"], [38, 3, 1, "", "__call__"], [38, 3, 1, "", "add_module"], [38, 3, 1, "", "apply"], [38, 3, 1, "", "bfloat16"], [38, 3, 1, "", "buffers"], [38, 6, 1, "", "call_super_init"], [38, 3, 1, "", "children"], [38, 3, 1, "", "compile"], [38, 3, 1, "", "cpu"], [38, 3, 1, "", "cuda"], [38, 3, 1, "", "double"], [38, 6, 1, "", "dump_patches"], [38, 3, 1, "", "eval"], [38, 3, 1, "", "extra_repr"], [38, 3, 1, "", "float"], [38, 3, 1, "id0", "forward"], [38, 3, 1, "", "get_buffer"], [38, 3, 1, "", "get_extra_state"], [38, 3, 1, "", "get_parameter"], [38, 3, 1, "", "get_submodule"], [38, 3, 1, "", "half"], [38, 3, 1, "", "ipu"], [38, 3, 1, "", "load_state_dict"], [38, 3, 1, "", "modules"], [38, 3, 1, "", "named_buffers"], [38, 3, 1, "", "named_children"], [38, 3, 1, "", "named_modules"], [38, 3, 1, "", "named_parameters"], [38, 3, 1, "", "parameters"], [38, 3, 1, "", "register_backward_hook"], [38, 3, 1, "", "register_buffer"], [38, 3, 1, "", "register_forward_hook"], [38, 3, 1, "", "register_forward_pre_hook"], [38, 3, 1, "", "register_full_backward_hook"], [38, 3, 1, "", "register_full_backward_pre_hook"], [38, 3, 1, "", "register_load_state_dict_post_hook"], [38, 3, 1, "", "register_module"], [38, 3, 1, "", "register_parameter"], [38, 3, 1, "", "register_state_dict_pre_hook"], [38, 3, 1, "", "requires_grad_"], [38, 3, 1, "", "set_extra_state"], [38, 3, 1, "", "share_memory"], [38, 3, 1, "", "state_dict"], [38, 3, 1, "", "to"], [38, 3, 1, "", "to_empty"], [38, 3, 1, "", "train"], [38, 6, 1, "", "training"], [38, 3, 1, "", "type"], [38, 3, 1, "", "xpu"], [38, 3, 1, "", "zero_grad"]], "cleanlab.experimental.coteaching": [[39, 1, 1, "", "adjust_learning_rate"], [39, 1, 1, "", "evaluate"], [39, 1, 1, "", "forget_rate_scheduler"], [39, 1, 1, "", "initialize_lr_scheduler"], [39, 1, 1, "", "loss_coteaching"], [39, 1, 1, "", "train"]], "cleanlab.experimental.label_issues_batched": [[41, 2, 1, "", "LabelInspector"], [41, 7, 1, "", "adj_confident_thresholds_shared"], [41, 1, 1, "", "find_label_issues_batched"], [41, 7, 1, "", "labels_shared"], [41, 7, 1, "", "pred_probs_shared"], [41, 1, 1, "", "split_arr"]], "cleanlab.experimental.label_issues_batched.LabelInspector": [[41, 3, 1, "", "get_confident_thresholds"], [41, 3, 1, "", "get_label_issues"], [41, 3, 1, "", "get_num_issues"], [41, 3, 1, "", "get_quality_scores"], [41, 3, 1, "", "score_label_quality"], [41, 3, 1, "", "update_confident_thresholds"]], "cleanlab.experimental.mnist_pytorch": [[42, 2, 1, "", "CNN"], [42, 2, 1, "", "SimpleNet"], [42, 1, 1, "", "get_mnist_dataset"], [42, 1, 1, "", "get_sklearn_digits_dataset"]], "cleanlab.experimental.mnist_pytorch.CNN": [[42, 3, 1, "", "__init_subclass__"], [42, 6, 1, "", "batch_size"], [42, 6, 1, "", "dataset"], [42, 6, 1, "", "epochs"], [42, 3, 1, "id0", "fit"], [42, 3, 1, "", "get_metadata_routing"], [42, 3, 1, "", "get_params"], [42, 6, 1, "", "loader"], [42, 6, 1, "", "log_interval"], [42, 6, 1, "", "lr"], [42, 6, 1, "", "momentum"], [42, 6, 1, "", "no_cuda"], [42, 3, 1, "id1", "predict"], [42, 3, 1, "id4", "predict_proba"], [42, 6, 1, "", "seed"], [42, 3, 1, "", "set_fit_request"], [42, 3, 1, "", "set_params"], [42, 3, 1, "", "set_predict_proba_request"], [42, 3, 1, "", "set_predict_request"], [42, 6, 1, "", "test_batch_size"]], "cleanlab.experimental.mnist_pytorch.SimpleNet": [[42, 6, 1, "", "T_destination"], [42, 3, 1, "", "__call__"], [42, 3, 1, "", "add_module"], [42, 3, 1, "", "apply"], [42, 3, 1, "", "bfloat16"], [42, 3, 1, "", "buffers"], [42, 6, 1, "", "call_super_init"], [42, 3, 1, "", "children"], [42, 3, 1, "", "compile"], [42, 3, 1, "", "cpu"], [42, 3, 1, "", "cuda"], [42, 3, 1, "", "double"], [42, 6, 1, "", "dump_patches"], [42, 3, 1, "", "eval"], [42, 3, 1, "", "extra_repr"], [42, 3, 1, "", "float"], [42, 3, 1, "", "forward"], [42, 3, 1, "", "get_buffer"], [42, 3, 1, "", "get_extra_state"], [42, 3, 1, "", "get_parameter"], [42, 3, 1, "", "get_submodule"], [42, 3, 1, "", "half"], [42, 3, 1, "", "ipu"], [42, 3, 1, "", "load_state_dict"], [42, 3, 1, "", "modules"], [42, 3, 1, "", "named_buffers"], [42, 3, 1, "", "named_children"], [42, 3, 1, "", "named_modules"], [42, 3, 1, "", "named_parameters"], [42, 3, 1, "", "parameters"], [42, 3, 1, "", "register_backward_hook"], [42, 3, 1, "", "register_buffer"], [42, 3, 1, "", "register_forward_hook"], [42, 3, 1, "", "register_forward_pre_hook"], [42, 3, 1, "", "register_full_backward_hook"], [42, 3, 1, "", "register_full_backward_pre_hook"], [42, 3, 1, "", "register_load_state_dict_post_hook"], [42, 3, 1, "", "register_module"], [42, 3, 1, "", "register_parameter"], [42, 3, 1, "", "register_state_dict_pre_hook"], [42, 3, 1, "", "requires_grad_"], [42, 3, 1, "", "set_extra_state"], [42, 3, 1, "", "share_memory"], [42, 3, 1, "", "state_dict"], [42, 3, 1, "", "to"], [42, 3, 1, "", "to_empty"], [42, 3, 1, "", "train"], [42, 6, 1, "", "training"], [42, 3, 1, "", "type"], [42, 3, 1, "", "xpu"], [42, 3, 1, "", "zero_grad"]], "cleanlab.experimental.span_classification": [[43, 1, 1, "", "display_issues"], [43, 1, 1, "", "find_label_issues"], [43, 1, 1, "", "get_label_quality_scores"]], "cleanlab.filter": [[44, 1, 1, "", "find_label_issues"], [44, 1, 1, "", "find_label_issues_using_argmax_confusion_matrix"], [44, 1, 1, "", "find_predicted_neq_given"], [44, 7, 1, "", "pred_probs_by_class"], [44, 7, 1, "", "prune_count_matrix_cols"]], "cleanlab.internal": [[46, 0, 0, "-", "label_quality_utils"], [47, 0, 0, "-", "latent_algebra"], [48, 0, 0, "-", "multiannotator_utils"], [49, 0, 0, "-", "multilabel_scorer"], [50, 0, 0, "-", "multilabel_utils"], [51, 0, 0, "-", "neighbor"], [55, 0, 0, "-", "outlier"], [56, 0, 0, "-", "token_classification_utils"], [57, 0, 0, "-", "util"], [58, 0, 0, "-", "validation"]], "cleanlab.internal.label_quality_utils": [[46, 1, 1, "", "get_normalized_entropy"]], "cleanlab.internal.latent_algebra": [[47, 1, 1, "", "compute_inv_noise_matrix"], [47, 1, 1, "", "compute_noise_matrix_from_inverse"], [47, 1, 1, "", "compute_ps_py_inv_noise_matrix"], [47, 1, 1, "", "compute_py"], [47, 1, 1, "", "compute_py_inv_noise_matrix"], [47, 1, 1, "", "compute_pyx"]], "cleanlab.internal.multiannotator_utils": [[48, 1, 1, "", "assert_valid_inputs_multiannotator"], [48, 1, 1, "", "assert_valid_pred_probs"], [48, 1, 1, "", "check_consensus_label_classes"], [48, 1, 1, "", "compute_soft_cross_entropy"], [48, 1, 1, "", "find_best_temp_scaler"], [48, 1, 1, "", "format_multiannotator_labels"], [48, 1, 1, "", "temp_scale_pred_probs"]], "cleanlab.internal.multilabel_scorer": [[49, 2, 1, "", "Aggregator"], [49, 2, 1, "", "ClassLabelScorer"], [49, 2, 1, "", "MultilabelScorer"], [49, 1, 1, "", "exponential_moving_average"], [49, 1, 1, "", "get_cross_validated_multilabel_pred_probs"], [49, 1, 1, "", "get_label_quality_scores"], [49, 1, 1, "", "multilabel_py"], [49, 1, 1, "", "softmin"]], "cleanlab.internal.multilabel_scorer.Aggregator": [[49, 3, 1, "", "__call__"], [49, 6, 1, "", "possible_methods"]], "cleanlab.internal.multilabel_scorer.ClassLabelScorer": [[49, 6, 1, "", "CONFIDENCE_WEIGHTED_ENTROPY"], [49, 6, 1, "", "NORMALIZED_MARGIN"], [49, 6, 1, "", "SELF_CONFIDENCE"], [49, 3, 1, "", "__call__"], [49, 3, 1, "", "__contains__"], [49, 3, 1, "", "__getitem__"], [49, 3, 1, "", "__iter__"], [49, 3, 1, "", "__len__"], [49, 3, 1, "", "from_str"]], "cleanlab.internal.multilabel_scorer.MultilabelScorer": [[49, 3, 1, "", "__call__"], [49, 3, 1, "", "aggregate"], [49, 3, 1, "", "get_class_label_quality_scores"]], "cleanlab.internal.multilabel_utils": [[50, 1, 1, "", "get_onehot_num_classes"], [50, 1, 1, "", "int2onehot"], [50, 1, 1, "", "onehot2int"], [50, 1, 1, "", "stack_complement"]], "cleanlab.internal.neighbor": [[52, 0, 0, "-", "knn_graph"], [53, 0, 0, "-", "metric"], [54, 0, 0, "-", "search"]], "cleanlab.internal.neighbor.knn_graph": [[52, 7, 1, "", "DEFAULT_K"], [52, 1, 1, "", "construct_knn_graph_from_index"], [52, 1, 1, "", "correct_knn_distances_and_indices"], [52, 1, 1, "", "correct_knn_distances_and_indices_with_exact_duplicate_sets_inplace"], [52, 1, 1, "", "correct_knn_graph"], [52, 1, 1, "", "create_knn_graph_and_index"], [52, 1, 1, "", "features_to_knn"]], "cleanlab.internal.neighbor.metric": [[53, 7, 1, "", "HIGH_DIMENSION_CUTOFF"], [53, 7, 1, "", "ROW_COUNT_CUTOFF"], [53, 1, 1, "", "decide_default_metric"], [53, 1, 1, "", "decide_euclidean_metric"]], "cleanlab.internal.neighbor.search": [[54, 1, 1, "", "construct_knn"]], "cleanlab.internal.outlier": [[55, 1, 1, "", "correct_precision_errors"], [55, 1, 1, "", "transform_distances_to_scores"]], "cleanlab.internal.token_classification_utils": [[56, 1, 1, "", "color_sentence"], [56, 1, 1, "", "filter_sentence"], [56, 1, 1, "", "get_sentence"], [56, 1, 1, "", "mapping"], [56, 1, 1, "", "merge_probs"], [56, 1, 1, "", "process_token"]], "cleanlab.internal.util": [[57, 1, 1, "", "append_extra_datapoint"], [57, 1, 1, "", "clip_noise_rates"], [57, 1, 1, "", "clip_values"], [57, 1, 1, "", "compress_int_array"], [57, 1, 1, "", "confusion_matrix"], [57, 1, 1, "", "csr_vstack"], [57, 1, 1, "", "estimate_pu_f1"], [57, 1, 1, "", "extract_indices_tf"], [57, 1, 1, "", "force_two_dimensions"], [57, 1, 1, "", "format_labels"], [57, 1, 1, "", "get_missing_classes"], [57, 1, 1, "", "get_num_classes"], [57, 1, 1, "", "get_unique_classes"], [57, 1, 1, "", "is_tensorflow_dataset"], [57, 1, 1, "", "is_torch_dataset"], [57, 1, 1, "", "num_unique_classes"], [57, 1, 1, "", "print_inverse_noise_matrix"], [57, 1, 1, "", "print_joint_matrix"], [57, 1, 1, "", "print_noise_matrix"], [57, 1, 1, "", "print_square_matrix"], [57, 1, 1, "", "remove_noise_from_class"], [57, 1, 1, "", "round_preserving_row_totals"], [57, 1, 1, "", "round_preserving_sum"], [57, 1, 1, "", "smart_display_dataframe"], [57, 1, 1, "", "subset_X_y"], [57, 1, 1, "", "subset_data"], [57, 1, 1, "", "subset_labels"], [57, 1, 1, "", "train_val_split"], [57, 1, 1, "", "unshuffle_tensorflow_dataset"], [57, 1, 1, "", "value_counts"], [57, 1, 1, "", "value_counts_fill_missing_classes"]], "cleanlab.internal.validation": [[58, 1, 1, "", "assert_indexing_works"], [58, 1, 1, "", "assert_nonempty_input"], [58, 1, 1, "", "assert_valid_class_labels"], [58, 1, 1, "", "assert_valid_inputs"], [58, 1, 1, "", "labels_to_array"], [58, 1, 1, "", "labels_to_list_multilabel"]], "cleanlab.models": [[61, 0, 0, "-", "keras"]], "cleanlab.models.keras": [[61, 2, 1, "", "KerasWrapperModel"], [61, 2, 1, "", "KerasWrapperSequential"]], "cleanlab.models.keras.KerasWrapperModel": [[61, 3, 1, "", "fit"], [61, 3, 1, "", "get_params"], [61, 3, 1, "", "predict"], [61, 3, 1, "", "predict_proba"], [61, 3, 1, "", "set_params"], [61, 3, 1, "", "summary"]], "cleanlab.models.keras.KerasWrapperSequential": [[61, 3, 1, "", "fit"], [61, 3, 1, "", "get_params"], [61, 3, 1, "", "predict"], [61, 3, 1, "", "predict_proba"], [61, 3, 1, "", "set_params"], [61, 3, 1, "", "summary"]], "cleanlab.multiannotator": [[62, 1, 1, "", "convert_long_to_wide_dataset"], [62, 1, 1, "", "get_active_learning_scores"], [62, 1, 1, "", "get_active_learning_scores_ensemble"], [62, 1, 1, "", "get_label_quality_multiannotator"], [62, 1, 1, "", "get_label_quality_multiannotator_ensemble"], [62, 1, 1, "", "get_majority_vote_label"]], "cleanlab.multilabel_classification": [[63, 0, 0, "-", "dataset"], [64, 0, 0, "-", "filter"], [66, 0, 0, "-", "rank"]], "cleanlab.multilabel_classification.dataset": [[63, 1, 1, "", "common_multilabel_issues"], [63, 1, 1, "", "multilabel_health_summary"], [63, 1, 1, "", "overall_multilabel_health_score"], [63, 1, 1, "", "rank_classes_by_multilabel_quality"]], "cleanlab.multilabel_classification.filter": [[64, 1, 1, "", "find_label_issues"], [64, 1, 1, "", "find_multilabel_issues_per_class"]], "cleanlab.multilabel_classification.rank": [[66, 1, 1, "", "get_label_quality_scores"], [66, 1, 1, "", "get_label_quality_scores_per_class"]], "cleanlab.object_detection": [[67, 0, 0, "-", "filter"], [69, 0, 0, "-", "rank"], [70, 0, 0, "-", "summary"]], "cleanlab.object_detection.filter": [[67, 1, 1, "", "find_label_issues"]], "cleanlab.object_detection.rank": [[69, 1, 1, "", "compute_badloc_box_scores"], [69, 1, 1, "", "compute_overlooked_box_scores"], [69, 1, 1, "", "compute_swap_box_scores"], [69, 1, 1, "", "get_label_quality_scores"], [69, 1, 1, "", "issues_from_scores"], [69, 1, 1, "", "pool_box_scores_per_image"]], "cleanlab.object_detection.summary": [[70, 1, 1, "", "bounding_box_size_distribution"], [70, 1, 1, "", "calculate_per_class_metrics"], [70, 1, 1, "", "class_label_distribution"], [70, 1, 1, "", "get_average_per_class_confusion_matrix"], [70, 1, 1, "", "get_sorted_bbox_count_idxs"], [70, 1, 1, "", "object_counts_per_image"], [70, 1, 1, "", "plot_class_distribution"], [70, 1, 1, "", "plot_class_size_distributions"], [70, 1, 1, "", "visualize"]], "cleanlab.outlier": [[71, 2, 1, "", "OutOfDistribution"]], "cleanlab.outlier.OutOfDistribution": [[71, 3, 1, "", "fit"], [71, 3, 1, "", "fit_score"], [71, 3, 1, "", "score"]], "cleanlab.rank": [[72, 1, 1, "", "find_top_issues"], [72, 1, 1, "", "get_confidence_weighted_entropy_for_each_label"], [72, 1, 1, "", "get_label_quality_ensemble_scores"], [72, 1, 1, "", "get_label_quality_scores"], [72, 1, 1, "", "get_normalized_margin_for_each_label"], [72, 1, 1, "", "get_self_confidence_for_each_label"], [72, 1, 1, "", "order_label_issues"]], "cleanlab.regression": [[74, 0, 0, "-", "learn"], [75, 0, 0, "-", "rank"]], "cleanlab.regression.learn": [[74, 2, 1, "", "CleanLearning"]], "cleanlab.regression.learn.CleanLearning": [[74, 3, 1, "", "__init_subclass__"], [74, 3, 1, "", "find_label_issues"], [74, 3, 1, "", "fit"], [74, 3, 1, "", "get_aleatoric_uncertainty"], [74, 3, 1, "", "get_epistemic_uncertainty"], [74, 3, 1, "", "get_label_issues"], [74, 3, 1, "", "get_metadata_routing"], [74, 3, 1, "", "get_params"], [74, 3, 1, "", "predict"], [74, 3, 1, "", "save_space"], [74, 3, 1, "", "score"], [74, 3, 1, "", "set_fit_request"], [74, 3, 1, "", "set_params"], [74, 3, 1, "", "set_score_request"]], "cleanlab.regression.rank": [[75, 1, 1, "", "get_label_quality_scores"]], "cleanlab.segmentation": [[76, 0, 0, "-", "filter"], [78, 0, 0, "-", "rank"], [79, 0, 0, "-", "summary"]], "cleanlab.segmentation.filter": [[76, 1, 1, "", "find_label_issues"]], "cleanlab.segmentation.rank": [[78, 1, 1, "", "get_label_quality_scores"], [78, 1, 1, "", "issues_from_scores"]], "cleanlab.segmentation.summary": [[79, 1, 1, "", "common_label_issues"], [79, 1, 1, "", "display_issues"], [79, 1, 1, "", "filter_by_class"]], "cleanlab.token_classification": [[80, 0, 0, "-", "filter"], [82, 0, 0, "-", "rank"], [83, 0, 0, "-", "summary"]], "cleanlab.token_classification.filter": [[80, 1, 1, "", "find_label_issues"]], "cleanlab.token_classification.rank": [[82, 1, 1, "", "get_label_quality_scores"], [82, 1, 1, "", "issues_from_scores"]], "cleanlab.token_classification.summary": [[83, 1, 1, "", "common_label_issues"], [83, 1, 1, "", "display_issues"], [83, 1, 1, "", "filter_by_token"]]}, "objtypes": {"0": "py:module", "1": "py:function", "2": "py:class", "3": "py:method", "4": "py:property", "5": "py:exception", "6": "py:attribute", "7": "py:data"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "function", "Python function"], "2": ["py", "class", "Python class"], "3": ["py", "method", "Python method"], "4": ["py", "property", "Python property"], "5": ["py", "exception", "Python exception"], "6": ["py", "attribute", "Python attribute"], "7": ["py", "data", "Python data"]}, "titleterms": {"benchmark": 0, "noise_gener": 1, "classif": [2, 87, 88, 93, 95, 96, 99, 100, 103, 109], "count": [3, 100], "data_valu": [4, 19], "datalab": [5, 7, 9, 10, 12, 89, 90, 91, 92, 93, 94, 95, 96, 97, 99, 100, 103], "creat": [7, 90, 91, 92, 100, 102], "your": [7, 84, 91, 92, 96, 97, 99, 100], "own": 7, "issu": [7, 9, 10, 22, 31, 84, 87, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 103, 104, 108, 109], "manag": [7, 22], "prerequisit": 7, "implement": 7, "issuemanag": [7, 91], "basic": 7, "check": [7, 97], "intermedi": 7, "advanc": [7, 91], "us": [7, 87, 88, 89, 90, 92, 93, 95, 96, 97, 99, 100, 102, 103, 104, 105, 107, 108, 109], "gener": [8, 97], "cluster": [8, 97, 99], "id": 8, "guid": [9, 12], "type": [9, 10, 100], "custom": [9, 91], "cleanlab": [9, 10, 84, 87, 88, 89, 93, 95, 96, 99, 100, 102, 103, 104, 105, 107, 108, 109], "studio": [9, 10], "easi": [9, 10, 84, 93, 95, 96], "mode": [9, 10, 84, 93, 95, 96], "can": [10, 90, 92, 98, 99, 100, 102], "detect": [10, 89, 92, 93, 95, 96, 97, 99, 100, 104, 105], "estim": [10, 100, 102, 103], "each": 10, "input": 10, "label": [10, 24, 26, 31, 84, 87, 88, 89, 90, 92, 93, 95, 96, 98, 99, 100, 102, 103, 104, 107, 108, 109], "is_label_issu": 10, "label_scor": 10, "given_label": 10, "predicted_label": 10, "outlier": [10, 29, 55, 71, 90, 93, 95, 96, 103, 105], "is_outlier_issu": 10, "outlier_scor": 10, "Near": [10, 92, 93, 95, 96], "duplic": [10, 20, 92, 93, 95, 96, 99, 103], "is_near_duplicate_issu": 10, "near_duplicate_scor": 10, "near_duplicate_set": 10, "distance_to_nearest_neighbor": 10, "non": [10, 96, 97], "iid": [10, 96, 97], "is_non_iid_issu": 10, "non_iid_scor": 10, "class": [10, 85, 97, 100, 108], "imbal": [10, 21, 97], "is_class_imbalance_issu": 10, "class_imbalance_scor": 10, "imag": [10, 93, 105], "specif": [10, 22, 108], "underperform": [10, 97, 99], "group": [10, 97, 99], "is_underperforming_group_issu": 10, "underperforming_group_scor": 10, "null": [10, 28, 97], "is_null_issu": 10, "null_scor": 10, "data": [10, 13, 84, 87, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109], "valuat": [10, 97], "is_data_valuation_issu": 10, "data_valuation_scor": 10, "option": [10, 97], "paramet": [10, 100], "get": [12, 90, 91, 92, 102, 103, 104, 108, 109], "start": [12, 98], "api": 12, "refer": 12, "data_issu": 14, "factori": 15, "intern": [16, 45], "issue_find": 17, "issue_manag": [22, 23], "regist": 22, "ml": [22, 99, 100], "task": [22, 35], "multilabel": 25, "noniid": 27, "regress": [30, 73, 74, 75, 99, 107], "prioriti": 31, "order": 31, "find": [31, 84, 87, 88, 89, 90, 92, 93, 95, 96, 97, 99, 100, 102, 103, 104, 105, 107, 108, 109], "underperforming_group": 32, "model_output": 33, "report": [34, 93], "dataset": [37, 63, 84, 88, 89, 90, 92, 93, 96, 97, 98, 99, 100, 103, 104, 105, 107, 108, 109], "cifar_cnn": 38, "coteach": 39, "experiment": 40, "label_issues_batch": 41, "mnist_pytorch": 42, "span_classif": 43, "filter": [44, 64, 67, 76, 80, 100], "label_quality_util": 46, "latent_algebra": 47, "multiannotator_util": 48, "multilabel_scor": 49, "multilabel_util": 50, "neighbor": 51, "knn_graph": 52, "metric": 53, "search": [54, 91], "token_classification_util": 56, "util": 57, "valid": [58, 93, 106], "fasttext": 59, "model": [60, 84, 87, 88, 89, 93, 95, 96, 99, 100, 102, 103, 104, 105, 107], "kera": 61, "multiannot": [62, 102], "multilabel_classif": 65, "rank": [66, 69, 72, 75, 78, 82, 100], "object_detect": 68, "summari": [70, 79, 83], "learn": [74, 90, 92, 99, 100], "segment": [77, 108], "token_classif": [81, 109], "open": [84, 99], "sourc": [84, 99], "document": 84, "quickstart": 84, "1": [84, 85, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 100, 102, 103, 104, 105, 107, 108, 109], "instal": [84, 87, 88, 89, 90, 91, 92, 93, 95, 96, 98, 100, 102, 103, 104, 105, 107, 108, 109], "2": [84, 85, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 100, 102, 103, 104, 105, 107, 108, 109], "common": [84, 85, 109], "3": [84, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 100, 102, 103, 104, 105, 107, 108, 109], "handl": [84, 99], "error": [84, 88, 93, 99, 100, 102, 103, 104, 107, 108, 109], "train": [84, 87, 88, 89, 97, 99, 105, 107], "robust": [84, 87, 88, 100, 107], "noisi": [84, 87, 88, 100, 107], "4": [84, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 100, 102, 104, 105, 107], "curat": 84, "fix": [84, 99], "level": [84, 98, 100, 109], "5": [84, 87, 89, 90, 92, 93, 95, 97, 100, 102, 107], "improv": [84, 102], "via": [84, 100, 102], "mani": [84, 100], "other": [84, 102, 104, 107], "techniqu": 84, "contribut": 84, "how": [85, 99, 100, 102, 103, 109], "migrat": 85, "version": 85, "0": 85, "from": [85, 87, 88, 90, 91, 92, 100, 107], "pre": [85, 89, 97, 99, 105], "function": [85, 91], "name": 85, "chang": 85, "modul": [85, 100], "new": [85, 90], "remov": 85, "argument": [85, 91], "variabl": 85, "cleanlearn": [86, 99, 100], "tutori": [86, 94, 98, 101], "structur": 87, "tabular": [87, 95], "requir": [87, 88, 90, 91, 92, 93, 95, 96, 102, 103, 104, 105, 107, 108, 109], "depend": [87, 88, 89, 90, 91, 92, 93, 95, 96, 98, 100, 102, 103, 104, 105, 107, 108, 109], "load": [87, 88, 89, 90, 91, 92, 95, 96, 97, 107], "process": [87, 95, 105, 107], "select": [87, 95], "comput": [87, 89, 93, 95, 96, 97, 99, 102, 106], "out": [87, 89, 90, 91, 92, 93, 95, 96, 102, 106], "sampl": [87, 89, 90, 91, 92, 93, 95, 96, 102, 106], "predict": [87, 89, 90, 91, 92, 93, 95, 96, 97, 102, 103, 104, 106], "probabl": [87, 89, 90, 91, 92, 93, 95, 96, 97, 102, 106], "more": [87, 88, 90, 92, 100, 107], "text": [88, 96, 97, 109], "format": [88, 96, 99, 103, 104], "defin": [88, 93, 96, 97, 107], "potenti": [88, 102, 107], "an": [89, 93, 99], "audio": 89, "import": [89, 90, 91, 92, 93, 98, 100, 102], "them": [89, 98, 100], "speechbrain": 89, "featur": [89, 93, 105], "fit": 89, "linear": 89, "datamonitor": 90, "leverag": 90, "statist": [90, 102], "audit": [90, 91, 92], "skip": [90, 92, 98, 100, 102], "detail": [90, 92, 98, 100, 102], "classifi": [90, 91, 92, 97], "6": [90, 97, 100], "about": [90, 92], "addit": [90, 92], "7": [90, 93, 100], "8": [90, 98, 100], "look": 90, "both": 90, "workflow": [91, 97, 100], "instanti": 91, "object": [91, 104], "increment": 91, "specifi": [91, 99], "nondefault": 91, "save": 91, "ad": 91, "A": 92, "unifi": 92, "all": [92, 100], "kind": [92, 104], "inform": [92, 93], "fetch": [93, 98], "normal": 93, "fashion": 93, "mnist": 93, "prepar": [93, 97], "k": [93, 95, 106], "fold": [93, 106], "cross": [93, 106], "embed": [93, 105], "view": 93, "most": [93, 109], "like": 93, "exampl": [93, 99, 100, 105], "sever": 93, "set": [93, 100], "dark": 93, "top": [93, 108], "low": 93, "numer": 95, "categor": [95, 97], "column": 95, "construct": 95, "nearest": 95, "neighbour": 95, "graph": [95, 97], "drift": [96, 103], "miscellan": 97, "acceler": 97, "knn": 97, "obtain": 97, "identifi": [97, 99, 104], "explan": 97, "vector": 97, "perform": 97, "visual": [97, 100, 104, 105, 108], "score": [97, 100, 102, 103, 104, 108, 109], "synthet": 97, "result": 97, "predefin": 97, "slice": [97, 99], "i": [97, 99, 100, 106], "catch": 97, "valu": 97, "encod": 97, "initi": [97, 102], "sort": 97, "understand": 98, "evalu": 98, "health": [98, 100], "popular": 98, "faq": 99, "what": [99, 100, 106], "do": [99, 100], "infer": 99, "correct": 99, "ha": 99, "flag": 99, "should": 99, "v": 99, "test": [99, 100, 105], "big": 99, "limit": 99, "memori": 99, "why": 99, "isn": 99, "t": 99, "work": [99, 100, 102, 109], "me": 99, "differ": [99, 104], "clean": [99, 100], "final": 99, "hyperparamet": 99, "tune": 99, "onli": 99, "one": [99, 100, 103, 108], "doe": [99, 102, 109], "take": 99, "so": 99, "long": 99, "when": [99, 100], "run": 99, "licens": 99, "under": 99, "answer": 99, "question": 99, "The": 100, "centric": 100, "ai": 100, "machin": 100, "find_label_issu": 100, "line": 100, "code": 100, "twenti": 100, "lowest": 100, "qualiti": [100, 102, 103, 104, 108, 109], "see": 100, "now": 100, "let": 100, "": 100, "happen": 100, "we": 100, "merg": 100, "seafoam": 100, "green": 100, "yellow": 100, "too": 100, "you": 100, "re": 100, "One": 100, "rule": 100, "overal": [100, 108], "accur": 100, "thi": 100, "directli": 100, "fulli": 100, "character": 100, "nois": 100, "matrix": [100, 103], "joint": 100, "prior": 100, "true": 100, "distribut": 100, "flip": 100, "rate": 100, "ani": 100, "again": 100, "support": 100, "lot": 100, "method": 100, "filter_bi": 100, "automat": 100, "everi": 100, "uniqu": 100, "num_label_issu": 100, "threshold": 100, "found": 100, "Not": 100, "sure": 100, "ensembl": 100, "multipl": [100, 102], "predictor": 100, "consensu": 102, "annot": 102, "major": 102, "vote": 102, "better": 102, "compar": 102, "inspect": 102, "retrain": 102, "further": 102, "multi": 103, "beyond": 103, "mislabel": [103, 108, 109], "given": 103, "hot": 103, "binari": 103, "without": 103, "applic": 103, "real": 103, "download": [104, 108, 109], "objectlab": 104, "exploratori": 104, "analysi": 104, "pytorch": 105, "timm": 105, "cifar10": 105, "some": 105, "pred_prob": [105, 108, 109], "wai": 107, "semant": 108, "which": 108, "ar": 108, "commonli": 108, "focus": 108, "token": 109, "word": 109, "sentenc": 109, "contain": 109, "particular": 109}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "nbsphinx": 4, "sphinx.ext.viewcode": 1, "sphinx.ext.todo": 2, "sphinx": 58}, "alltitles": {"benchmarking": [[0, "module-cleanlab.benchmarking"]], "noise_generation": [[1, "module-cleanlab.benchmarking.noise_generation"]], "classification": [[2, "module-cleanlab.classification"]], "count": [[3, "module-cleanlab.count"]], "data_valuation": [[4, "module-cleanlab.data_valuation"], [19, "data-valuation"]], "datalab": [[5, "module-cleanlab.datalab.datalab"], [12, "module-cleanlab.datalab"]], "Creating Your Own Issues Manager": [[7, "creating-your-own-issues-manager"]], "Prerequisites": [[7, "prerequisites"]], "Implementing IssueManagers": [[7, "implementing-issuemanagers"]], "Basic Issue Check": [[7, "basic-issue-check"]], "Intermediate Issue Check": [[7, "intermediate-issue-check"]], "Advanced Issue Check": [[7, "advanced-issue-check"]], "Use with Datalab": [[7, "use-with-datalab"]], "Generating Cluster IDs": [[8, "generating-cluster-ids"]], "Datalab guides": [[9, "datalab-guides"]], "Types of issues": [[9, "types-of-issues"]], "Customizing issue types": [[9, "customizing-issue-types"]], "Cleanlab Studio (Easy Mode)": [[9, "cleanlab-studio-easy-mode"], [10, "cleanlab-studio-easy-mode"]], "Datalab Issue Types": [[10, "datalab-issue-types"]], "Types of issues Datalab can detect": [[10, "types-of-issues-datalab-can-detect"]], "Estimates for Each Issue Type": [[10, "estimates-for-each-issue-type"]], "Inputs to Datalab": [[10, "inputs-to-datalab"]], "Label Issue": [[10, "label-issue"]], "is_label_issue": [[10, "is-label-issue"]], "label_score": [[10, "label-score"]], "given_label": [[10, "given-label"], [10, "id6"]], "predicted_label": [[10, "predicted-label"]], "Outlier Issue": [[10, "outlier-issue"]], "is_outlier_issue": [[10, "is-outlier-issue"]], "outlier_score": [[10, "outlier-score"]], "(Near) Duplicate Issue": [[10, "near-duplicate-issue"]], "is_near_duplicate_issue": [[10, "is-near-duplicate-issue"]], "near_duplicate_score": [[10, "near-duplicate-score"]], "near_duplicate_sets": [[10, "near-duplicate-sets"]], "distance_to_nearest_neighbor": [[10, "distance-to-nearest-neighbor"]], "Non-IID Issue": [[10, "non-iid-issue"]], "is_non_iid_issue": [[10, "is-non-iid-issue"]], "non_iid_score": [[10, "non-iid-score"]], "Class Imbalance Issue": [[10, "class-imbalance-issue"]], "is_class_imbalance_issue": [[10, "is-class-imbalance-issue"]], "class_imbalance_score": [[10, "class-imbalance-score"]], "Image-specific Issues": [[10, "image-specific-issues"]], "Underperforming Group Issue": [[10, "underperforming-group-issue"]], "is_underperforming_group_issue": [[10, "is-underperforming-group-issue"]], "underperforming_group_score": [[10, "underperforming-group-score"]], "Null Issue": [[10, "null-issue"]], "is_null_issue": [[10, "is-null-issue"]], "null_score": [[10, "null-score"]], "Data Valuation Issue": [[10, "data-valuation-issue"]], "is_data_valuation_issue": [[10, "is-data-valuation-issue"]], "data_valuation_score": [[10, "data-valuation-score"]], "Optional Issue Parameters": [[10, "optional-issue-parameters"]], "Label Issue Parameters": [[10, "label-issue-parameters"]], "Outlier Issue Parameters": [[10, "outlier-issue-parameters"]], "Duplicate Issue Parameters": [[10, "duplicate-issue-parameters"]], "Non-IID Issue Parameters": [[10, "non-iid-issue-parameters"]], "Imbalance Issue Parameters": [[10, "imbalance-issue-parameters"]], "Underperforming Group Issue Parameters": [[10, "underperforming-group-issue-parameters"]], "Null Issue Parameters": [[10, "null-issue-parameters"]], "Data Valuation Issue Parameters": [[10, "data-valuation-issue-parameters"]], "Image Issue Parameters": [[10, "image-issue-parameters"]], "Getting Started": [[12, "getting-started"]], "Guides": [[12, "guides"]], "API Reference": [[12, "api-reference"]], "data": [[13, "module-cleanlab.datalab.internal.data"]], "data_issues": [[14, "module-cleanlab.datalab.internal.data_issues"]], "factory": [[15, "module-cleanlab.datalab.internal.issue_manager_factory"]], "internal": [[16, "internal"], [45, "internal"]], "issue_finder": [[17, "issue-finder"]], "duplicate": [[20, "module-cleanlab.datalab.internal.issue_manager.duplicate"]], "imbalance": [[21, "module-cleanlab.datalab.internal.issue_manager.imbalance"]], "issue_manager": [[22, "issue-manager"], [23, "module-cleanlab.datalab.internal.issue_manager.issue_manager"]], "Registered issue managers": [[22, "registered-issue-managers"]], "ML task-specific issue managers": [[22, "ml-task-specific-issue-managers"]], "label": [[24, "module-cleanlab.datalab.internal.issue_manager.label"], [26, "module-cleanlab.datalab.internal.issue_manager.multilabel.label"], [31, "module-cleanlab.datalab.internal.issue_manager.regression.label"]], "multilabel": [[25, "multilabel"]], "noniid": [[27, "module-cleanlab.datalab.internal.issue_manager.noniid"]], "null": [[28, "null"]], "outlier": [[29, "module-cleanlab.datalab.internal.issue_manager.outlier"], [55, "module-cleanlab.internal.outlier"], [71, "module-cleanlab.outlier"]], "regression": [[30, "regression"], [73, "regression"]], "Priority Order for finding issues:": [[31, null]], "underperforming_group": [[32, "underperforming-group"]], "model_outputs": [[33, "module-cleanlab.datalab.internal.model_outputs"]], "report": [[34, "report"]], "task": [[35, "task"]], "dataset": [[37, "module-cleanlab.dataset"], [63, "module-cleanlab.multilabel_classification.dataset"]], "cifar_cnn": [[38, "module-cleanlab.experimental.cifar_cnn"]], "coteaching": [[39, "module-cleanlab.experimental.coteaching"]], "experimental": [[40, "experimental"]], "label_issues_batched": [[41, "module-cleanlab.experimental.label_issues_batched"]], "mnist_pytorch": [[42, "module-cleanlab.experimental.mnist_pytorch"]], "span_classification": [[43, "module-cleanlab.experimental.span_classification"]], "filter": [[44, "module-cleanlab.filter"], [64, "module-cleanlab.multilabel_classification.filter"], [67, "filter"], [76, "filter"], [80, "module-cleanlab.token_classification.filter"]], "label_quality_utils": [[46, "module-cleanlab.internal.label_quality_utils"]], "latent_algebra": [[47, "module-cleanlab.internal.latent_algebra"]], "multiannotator_utils": [[48, "module-cleanlab.internal.multiannotator_utils"]], "multilabel_scorer": [[49, "module-cleanlab.internal.multilabel_scorer"]], "multilabel_utils": [[50, "module-cleanlab.internal.multilabel_utils"]], "neighbor": [[51, "neighbor"]], "knn_graph": [[52, "module-cleanlab.internal.neighbor.knn_graph"]], "metric": [[53, "module-cleanlab.internal.neighbor.metric"]], "search": [[54, "module-cleanlab.internal.neighbor.search"]], "token_classification_utils": [[56, "module-cleanlab.internal.token_classification_utils"]], "util": [[57, "module-cleanlab.internal.util"]], "validation": [[58, "module-cleanlab.internal.validation"]], "fasttext": [[59, "fasttext"]], "models": [[60, "models"]], "keras": [[61, "module-cleanlab.models.keras"]], "multiannotator": [[62, "module-cleanlab.multiannotator"]], "multilabel_classification": [[65, "multilabel-classification"]], "rank": [[66, "module-cleanlab.multilabel_classification.rank"], [69, "module-cleanlab.object_detection.rank"], [72, "module-cleanlab.rank"], [78, "module-cleanlab.segmentation.rank"], [82, "module-cleanlab.token_classification.rank"]], "object_detection": [[68, "object-detection"]], "summary": [[70, "summary"], [79, "module-cleanlab.segmentation.summary"], [83, "module-cleanlab.token_classification.summary"]], "regression.learn": [[74, "module-cleanlab.regression.learn"]], "regression.rank": [[75, "module-cleanlab.regression.rank"]], "segmentation": [[77, "segmentation"]], "token_classification": [[81, "token-classification"]], "cleanlab open-source documentation": [[84, "cleanlab-open-source-documentation"]], "Quickstart": [[84, "quickstart"]], "1. Install cleanlab": [[84, "install-cleanlab"]], "2. Find common issues in your data": [[84, "find-common-issues-in-your-data"]], "3. Handle label errors and train robust models with noisy labels": [[84, "handle-label-errors-and-train-robust-models-with-noisy-labels"]], "4. Dataset curation: fix dataset-level issues": [[84, "dataset-curation-fix-dataset-level-issues"]], "5. Improve your data via many other techniques": [[84, "improve-your-data-via-many-other-techniques"]], "Contributing": [[84, "contributing"]], "Easy Mode": [[84, "easy-mode"], [93, "Easy-Mode"], [95, "Easy-Mode"], [96, "Easy-Mode"]], "How to migrate to versions >= 2.0.0 from pre 1.0.1": [[85, "how-to-migrate-to-versions-2-0-0-from-pre-1-0-1"]], "Function and class name changes": [[85, "function-and-class-name-changes"]], "Module name changes": [[85, "module-name-changes"]], "New modules": [[85, "new-modules"]], "Removed modules": [[85, "removed-modules"]], "Common argument and variable name changes": [[85, "common-argument-and-variable-name-changes"]], "CleanLearning Tutorials": [[86, "cleanlearning-tutorials"]], "Classification with Structured/Tabular Data and Noisy Labels": [[87, "Classification-with-Structured/Tabular-Data-and-Noisy-Labels"]], "1. Install required dependencies": [[87, "1.-Install-required-dependencies"], [88, "1.-Install-required-dependencies"], [95, "1.-Install-required-dependencies"], [96, "1.-Install-required-dependencies"], [107, "1.-Install-required-dependencies"]], "2. Load and process the data": [[87, "2.-Load-and-process-the-data"], [95, "2.-Load-and-process-the-data"], [107, "2.-Load-and-process-the-data"]], "3. Select a classification model and compute out-of-sample predicted probabilities": [[87, "3.-Select-a-classification-model-and-compute-out-of-sample-predicted-probabilities"], [95, "3.-Select-a-classification-model-and-compute-out-of-sample-predicted-probabilities"]], "4. Use cleanlab to find label issues": [[87, "4.-Use-cleanlab-to-find-label-issues"]], "5. Train a more robust model from noisy labels": [[87, "5.-Train-a-more-robust-model-from-noisy-labels"]], "Text Classification with Noisy Labels": [[88, "Text-Classification-with-Noisy-Labels"]], "2. Load and format the text dataset": [[88, "2.-Load-and-format-the-text-dataset"], [96, "2.-Load-and-format-the-text-dataset"]], "3. Define a classification model and use cleanlab to find potential label errors": [[88, "3.-Define-a-classification-model-and-use-cleanlab-to-find-potential-label-errors"]], "4. Train a more robust model from noisy labels": [[88, "4.-Train-a-more-robust-model-from-noisy-labels"], [107, "4.-Train-a-more-robust-model-from-noisy-labels"]], "Detecting Issues in an Audio Dataset with Datalab": [[89, "Detecting-Issues-in-an-Audio-Dataset-with-Datalab"]], "1. Install dependencies and import them": [[89, "1.-Install-dependencies-and-import-them"]], "2. Load the data": [[89, "2.-Load-the-data"]], "3. Use pre-trained SpeechBrain model to featurize audio": [[89, "3.-Use-pre-trained-SpeechBrain-model-to-featurize-audio"]], "4. Fit linear model and compute out-of-sample predicted probabilities": [[89, "4.-Fit-linear-model-and-compute-out-of-sample-predicted-probabilities"]], "5. Use cleanlab to find label issues": [[89, "5.-Use-cleanlab-to-find-label-issues"], [95, "5.-Use-cleanlab-to-find-label-issues"]], "DataMonitor: Leverage statistics from Datalab to audit new data": [[90, "DataMonitor:-Leverage-statistics-from-Datalab-to-audit-new-data"]], "1. Install and import required dependencies": [[90, "1.-Install-and-import-required-dependencies"], [92, "1.-Install-and-import-required-dependencies"], [93, "1.-Install-and-import-required-dependencies"], [102, "1.-Install-and-import-required-dependencies"]], "2. Create and load the data (can skip these details)": [[90, "2.-Create-and-load-the-data-(can-skip-these-details)"], [92, "2.-Create-and-load-the-data-(can-skip-these-details)"]], "3. Get out-of-sample predicted probabilities from a classifier": [[90, "3.-Get-out-of-sample-predicted-probabilities-from-a-classifier"], [92, "3.-Get-out-of-sample-predicted-probabilities-from-a-classifier"]], "4. Use Datalab to find issues in the dataset": [[90, "4.-Use-Datalab-to-find-issues-in-the-dataset"], [92, "4.-Use-Datalab-to-find-issues-in-the-dataset"]], "5. Use DataMonitor to find issues in new data": [[90, "5.-Use-DataMonitor-to-find-issues-in-new-data"]], "6. Learn more about the issues in the additional data": [[90, "6.-Learn-more-about-the-issues-in-the-additional-data"]], "7. Finding outliers in new data": [[90, "7.-Finding-outliers-in-new-data"]], "8. Looking for both label issues and outliers": [[90, "8.-Looking-for-both-label-issues-and-outliers"]], "Datalab: Advanced workflows to audit your data": [[91, "Datalab:-Advanced-workflows-to-audit-your-data"]], "Install and import required dependencies": [[91, "Install-and-import-required-dependencies"]], "Create and load the data": [[91, "Create-and-load-the-data"]], "Get out-of-sample predicted probabilities from a classifier": [[91, "Get-out-of-sample-predicted-probabilities-from-a-classifier"]], "Instantiate Datalab object": [[91, "Instantiate-Datalab-object"]], "Functionality 1: Incremental issue search": [[91, "Functionality-1:-Incremental-issue-search"]], "Functionality 2: Specifying nondefault arguments": [[91, "Functionality-2:-Specifying-nondefault-arguments"]], "Functionality 3: Save and load Datalab objects": [[91, "Functionality-3:-Save-and-load-Datalab-objects"]], "Functionality 4: Adding a custom IssueManager": [[91, "Functionality-4:-Adding-a-custom-IssueManager"]], "Datalab: A unified audit to detect all kinds of issues in data and labels": [[92, "Datalab:-A-unified-audit-to-detect-all-kinds-of-issues-in-data-and-labels"]], "5. Learn more about the issues in your dataset": [[92, "5.-Learn-more-about-the-issues-in-your-dataset"]], "Get additional information": [[92, "Get-additional-information"]], "Near duplicate issues": [[92, "Near-duplicate-issues"], [93, "Near-duplicate-issues"]], "Detecting Issues in an Image Dataset with Datalab": [[93, "Detecting-Issues-in-an-Image-Dataset-with-Datalab"]], "2. Fetch and normalize the Fashion-MNIST dataset": [[93, "2.-Fetch-and-normalize-the-Fashion-MNIST-dataset"]], "3. Define a classification model": [[93, "3.-Define-a-classification-model"]], "4. Prepare the dataset for K-fold cross-validation": [[93, "4.-Prepare-the-dataset-for-K-fold-cross-validation"]], "5. Compute out-of-sample predicted probabilities and feature embeddings": [[93, "5.-Compute-out-of-sample-predicted-probabilities-and-feature-embeddings"]], "7. Use cleanlab to find issues": [[93, "7.-Use-cleanlab-to-find-issues"]], "View report": [[93, "View-report"]], "Label issues": [[93, "Label-issues"], [95, "Label-issues"], [96, "Label-issues"]], "View most likely examples with label errors": [[93, "View-most-likely-examples-with-label-errors"]], "Outlier issues": [[93, "Outlier-issues"], [95, "Outlier-issues"], [96, "Outlier-issues"]], "View most severe outliers": [[93, "View-most-severe-outliers"]], "View sets of near duplicate images": [[93, "View-sets-of-near-duplicate-images"]], "Dark images": [[93, "Dark-images"]], "View top examples of dark images": [[93, "View-top-examples-of-dark-images"]], "Low information images": [[93, "Low-information-images"]], "Datalab Tutorials": [[94, "datalab-tutorials"]], "Detecting Issues in Tabular Data\u00a0(Numeric/Categorical columns) with Datalab": [[95, "Detecting-Issues-in-Tabular-Data\u00a0(Numeric/Categorical-columns)-with-Datalab"]], "4. Construct K nearest neighbours graph": [[95, "4.-Construct-K-nearest-neighbours-graph"]], "Near-duplicate issues": [[95, "Near-duplicate-issues"], [96, "Near-duplicate-issues"]], "Detecting Issues in a Text Dataset with Datalab": [[96, "Detecting-Issues-in-a-Text-Dataset-with-Datalab"]], "3. Define a classification model and compute out-of-sample predicted probabilities": [[96, "3.-Define-a-classification-model-and-compute-out-of-sample-predicted-probabilities"]], "4. Use cleanlab to find issues in your dataset": [[96, "4.-Use-cleanlab-to-find-issues-in-your-dataset"]], "Non-IID issues (data drift)": [[96, "Non-IID-issues-(data-drift)"]], "Miscellaneous workflows with Datalab": [[97, "Miscellaneous-workflows-with-Datalab"]], "Accelerate Issue Checks with Pre-computed kNN Graphs": [[97, "Accelerate-Issue-Checks-with-Pre-computed-kNN-Graphs"]], "1. Load and Prepare Your Dataset": [[97, "1.-Load-and-Prepare-Your-Dataset"]], "2. Compute kNN Graph": [[97, "2.-Compute-kNN-Graph"]], "3. Train a Classifier and Obtain Predicted Probabilities": [[97, "3.-Train-a-Classifier-and-Obtain-Predicted-Probabilities"]], "4. Identify Data Issues Using Datalab": [[97, "4.-Identify-Data-Issues-Using-Datalab"]], "Explanation:": [[97, "Explanation:"]], "Data Valuation": [[97, "Data-Valuation"]], "1. Load and Prepare the Dataset": [[97, "1.-Load-and-Prepare-the-Dataset"], [97, "id2"], [97, "id5"]], "2. Vectorize the Text Data": [[97, "2.-Vectorize-the-Text-Data"]], "3. Perform Data Valuation with Datalab": [[97, "3.-Perform-Data-Valuation-with-Datalab"]], "4. (Optional) Visualize Data Valuation Scores": [[97, "4.-(Optional)-Visualize-Data-Valuation-Scores"]], "Find Underperforming Groups in a Dataset": [[97, "Find-Underperforming-Groups-in-a-Dataset"]], "1. Generate a Synthetic Dataset": [[97, "1.-Generate-a-Synthetic-Dataset"]], "2. Train a Classifier and Obtain Predicted Probabilities": [[97, "2.-Train-a-Classifier-and-Obtain-Predicted-Probabilities"], [97, "id3"]], "3. (Optional) Cluster the Data": [[97, "3.-(Optional)-Cluster-the-Data"]], "4. Identify Underperforming Groups with Datalab": [[97, "4.-Identify-Underperforming-Groups-with-Datalab"], [97, "id4"]], "5. (Optional) Visualize the Results": [[97, "5.-(Optional)-Visualize-the-Results"]], "Predefining Data Slices for Detecting Underperforming Groups": [[97, "Predefining-Data-Slices-for-Detecting-Underperforming-Groups"]], "3. Define a Data Slice": [[97, "3.-Define-a-Data-Slice"]], "Detect if your dataset is non-IID": [[97, "Detect-if-your-dataset-is-non-IID"]], "2. Detect Non-IID Issues Using Datalab": [[97, "2.-Detect-Non-IID-Issues-Using-Datalab"]], "3. (Optional) Visualize the Results": [[97, "3.-(Optional)-Visualize-the-Results"]], "Catch Null Values in a Dataset": [[97, "Catch-Null-Values-in-a-Dataset"]], "1. Load the Dataset": [[97, "1.-Load-the-Dataset"]], "2: Encode Categorical Values": [[97, "2:-Encode-Categorical-Values"]], "3. Initialize Datalab": [[97, "3.-Initialize-Datalab"]], "4. Detect Null Values": [[97, "4.-Detect-Null-Values"]], "5. Sort the Dataset by Null Issues": [[97, "5.-Sort-the-Dataset-by-Null-Issues"]], "6. (Optional) Visualize the Results": [[97, "6.-(Optional)-Visualize-the-Results"]], "Detect class imbalance in your dataset": [[97, "Detect-class-imbalance-in-your-dataset"]], "1. Prepare data": [[97, "1.-Prepare-data"]], "2. Detect class imbalance with Datalab": [[97, "2.-Detect-class-imbalance-with-Datalab"]], "3. (Optional) Visualize class imbalance issues": [[97, "3.-(Optional)-Visualize-class-imbalance-issues"]], "Understanding Dataset-level Labeling Issues": [[98, "Understanding-Dataset-level-Labeling-Issues"]], "Install dependencies and import them": [[98, "Install-dependencies-and-import-them"], [100, "Install-dependencies-and-import-them"]], "Fetch the data (can skip these details)": [[98, "Fetch-the-data-(can-skip-these-details)"]], "Start of tutorial: Evaluate the health of 8 popular datasets": [[98, "Start-of-tutorial:-Evaluate-the-health-of-8-popular-datasets"]], "FAQ": [[99, "FAQ"]], "What data can cleanlab detect issues in?": [[99, "What-data-can-cleanlab-detect-issues-in?"]], "How do I format classification labels for cleanlab?": [[99, "How-do-I-format-classification-labels-for-cleanlab?"]], "How do I infer the correct labels for examples cleanlab has flagged?": [[99, "How-do-I-infer-the-correct-labels-for-examples-cleanlab-has-flagged?"]], "How should I handle label errors in train vs. test data?": [[99, "How-should-I-handle-label-errors-in-train-vs.-test-data?"]], "How can I find label issues in big datasets with limited memory?": [[99, "How-can-I-find-label-issues-in-big-datasets-with-limited-memory?"]], "Why isn\u2019t CleanLearning working for me?": [[99, "Why-isn\u2019t-CleanLearning-working-for-me?"]], "How can I use different models for data cleaning vs. final training in CleanLearning?": [[99, "How-can-I-use-different-models-for-data-cleaning-vs.-final-training-in-CleanLearning?"]], "How do I hyperparameter tune only the final model trained (and not the one finding label issues) in CleanLearning?": [[99, "How-do-I-hyperparameter-tune-only-the-final-model-trained-(and-not-the-one-finding-label-issues)-in-CleanLearning?"]], "Why does regression.learn.CleanLearning take so long?": [[99, "Why-does-regression.learn.CleanLearning-take-so-long?"]], "How do I specify pre-computed data slices/clusters when detecting the Underperforming Group Issue?": [[99, "How-do-I-specify-pre-computed-data-slices/clusters-when-detecting-the-Underperforming-Group-Issue?"]], "How to handle near-duplicate data identified by Datalab?": [[99, "How-to-handle-near-duplicate-data-identified-by-Datalab?"]], "What ML models should I run cleanlab with? How do I fix the issues cleanlab has identified?": [[99, "What-ML-models-should-I-run-cleanlab-with?-How-do-I-fix-the-issues-cleanlab-has-identified?"]], "What license is cleanlab open-sourced under?": [[99, "What-license-is-cleanlab-open-sourced-under?"]], "Can\u2019t find an answer to your question?": [[99, "Can't-find-an-answer-to-your-question?"]], "The Workflows of Data-centric AI for Classification with Noisy Labels": [[100, "The-Workflows-of-Data-centric-AI-for-Classification-with-Noisy-Labels"]], "Create the data (can skip these details)": [[100, "Create-the-data-(can-skip-these-details)"]], "Workflow 1: Use Datalab to detect many types of issues": [[100, "Workflow-1:-Use-Datalab-to-detect-many-types-of-issues"]], "Workflow 2: Use CleanLearning for more robust Machine Learning": [[100, "Workflow-2:-Use-CleanLearning-for-more-robust-Machine-Learning"]], "Clean Learning = Machine Learning with cleaned data": [[100, "Clean-Learning-=-Machine-Learning-with-cleaned-data"]], "Workflow 3: Use CleanLearning to find_label_issues in one line of code": [[100, "Workflow-3:-Use-CleanLearning-to-find_label_issues-in-one-line-of-code"]], "Visualize the twenty examples with lowest label quality to see if Cleanlab works.": [[100, "Visualize-the-twenty-examples-with-lowest-label-quality-to-see-if-Cleanlab-works."]], "Workflow 4: Use cleanlab to find dataset-level and class-level issues": [[100, "Workflow-4:-Use-cleanlab-to-find-dataset-level-and-class-level-issues"]], "Now, let\u2019s see what happens if we merge classes \u201cseafoam green\u201d and \u201cyellow\u201d": [[100, "Now,-let's-see-what-happens-if-we-merge-classes-%22seafoam-green%22-and-%22yellow%22"]], "Workflow 5: Clean your test set too if you\u2019re doing ML with noisy labels!": [[100, "Workflow-5:-Clean-your-test-set-too-if-you're-doing-ML-with-noisy-labels!"]], "Workflow 6: One score to rule them all \u2013 use cleanlab\u2019s overall dataset health score": [[100, "Workflow-6:-One-score-to-rule-them-all----use-cleanlab's-overall-dataset-health-score"]], "How accurate is this dataset health score?": [[100, "How-accurate-is-this-dataset-health-score?"]], "Workflow(s) 7: Use count, rank, filter modules directly": [[100, "Workflow(s)-7:-Use-count,-rank,-filter-modules-directly"]], "Workflow 7.1 (count): Fully characterize label noise (noise matrix, joint, prior of true labels, \u2026)": [[100, "Workflow-7.1-(count):-Fully-characterize-label-noise-(noise-matrix,-joint,-prior-of-true-labels,-...)"]], "Use cleanlab to estimate and visualize the joint distribution of label noise and noise matrix of label flipping rates:": [[100, "Use-cleanlab-to-estimate-and-visualize-the-joint-distribution-of-label-noise-and-noise-matrix-of-label-flipping-rates:"]], "Workflow 7.2 (filter): Find label issues for any dataset and any model in one line of code": [[100, "Workflow-7.2-(filter):-Find-label-issues-for-any-dataset-and-any-model-in-one-line-of-code"]], "Again, we can visualize the twenty examples with lowest label quality to see if Cleanlab works.": [[100, "Again,-we-can-visualize-the-twenty-examples-with-lowest-label-quality-to-see-if-Cleanlab-works."]], "Workflow 7.2 supports lots of methods to find_label_issues() via the filter_by parameter.": [[100, "Workflow-7.2-supports-lots-of-methods-to-find_label_issues()-via-the-filter_by-parameter."]], "Workflow 7.3 (rank): Automatically rank every example by a unique label quality score. Find errors using cleanlab.count.num_label_issues as a threshold.": [[100, "Workflow-7.3-(rank):-Automatically-rank-every-example-by-a-unique-label-quality-score.-Find-errors-using-cleanlab.count.num_label_issues-as-a-threshold."]], "Again, we can visualize the label issues found to see if Cleanlab works.": [[100, "Again,-we-can-visualize-the-label-issues-found-to-see-if-Cleanlab-works."]], "Not sure when to use Workflow 7.2 or 7.3 to find label issues?": [[100, "Not-sure-when-to-use-Workflow-7.2-or-7.3-to-find-label-issues?"]], "Workflow 8: Ensembling label quality scores from multiple predictors": [[100, "Workflow-8:-Ensembling-label-quality-scores-from-multiple-predictors"]], "Tutorials": [[101, "tutorials"]], "Estimate Consensus and Annotator Quality for Data Labeled by Multiple Annotators": [[102, "Estimate-Consensus-and-Annotator-Quality-for-Data-Labeled-by-Multiple-Annotators"]], "2. Create the data (can skip these details)": [[102, "2.-Create-the-data-(can-skip-these-details)"]], "3. Get initial consensus labels via majority vote and compute out-of-sample predicted probabilities": [[102, "3.-Get-initial-consensus-labels-via-majority-vote-and-compute-out-of-sample-predicted-probabilities"]], "4. Use cleanlab to get better consensus labels and other statistics": [[102, "4.-Use-cleanlab-to-get-better-consensus-labels-and-other-statistics"]], "Comparing improved consensus labels": [[102, "Comparing-improved-consensus-labels"]], "Inspecting consensus quality scores to find potential consensus label errors": [[102, "Inspecting-consensus-quality-scores-to-find-potential-consensus-label-errors"]], "5. Retrain model using improved consensus labels": [[102, "5.-Retrain-model-using-improved-consensus-labels"]], "Further improvements": [[102, "Further-improvements"]], "How does cleanlab.multiannotator work?": [[102, "How-does-cleanlab.multiannotator-work?"]], "Find Label Errors in Multi-Label Classification Datasets": [[103, "Find-Label-Errors-in-Multi-Label-Classification-Datasets"]], "1. Install required dependencies and get dataset": [[103, "1.-Install-required-dependencies-and-get-dataset"]], "2. Format data, labels, and model predictions": [[103, "2.-Format-data,-labels,-and-model-predictions"], [104, "2.-Format-data,-labels,-and-model-predictions"]], "3. Use cleanlab to find label issues": [[103, "3.-Use-cleanlab-to-find-label-issues"], [104, "3.-Use-cleanlab-to-find-label-issues"], [108, "3.-Use-cleanlab-to-find-label-issues"], [109, "3.-Use-cleanlab-to-find-label-issues"]], "Label quality scores": [[103, "Label-quality-scores"]], "Data issues beyond mislabeling (outliers, duplicates, drift, \u2026)": [[103, "Data-issues-beyond-mislabeling-(outliers,-duplicates,-drift,-...)"]], "How to format labels given as a one-hot (multi-hot) binary matrix?": [[103, "How-to-format-labels-given-as-a-one-hot-(multi-hot)-binary-matrix?"]], "Estimate label issues without Datalab": [[103, "Estimate-label-issues-without-Datalab"]], "Application to Real Data": [[103, "Application-to-Real-Data"]], "Finding Label Errors in Object Detection Datasets": [[104, "Finding-Label-Errors-in-Object-Detection-Datasets"]], "1. Install required dependencies and download data": [[104, "1.-Install-required-dependencies-and-download-data"], [108, "1.-Install-required-dependencies-and-download-data"], [109, "1.-Install-required-dependencies-and-download-data"]], "Get label quality scores": [[104, "Get-label-quality-scores"], [108, "Get-label-quality-scores"]], "4. Use ObjectLab to visualize label issues": [[104, "4.-Use-ObjectLab-to-visualize-label-issues"]], "Different kinds of label issues identified by ObjectLab": [[104, "Different-kinds-of-label-issues-identified-by-ObjectLab"]], "Other uses of visualize": [[104, "Other-uses-of-visualize"]], "Exploratory data analysis": [[104, "Exploratory-data-analysis"]], "Detect Outliers with Cleanlab and PyTorch Image Models (timm)": [[105, "Detect-Outliers-with-Cleanlab-and-PyTorch-Image-Models-(timm)"]], "1. Install the required dependencies": [[105, "1.-Install-the-required-dependencies"]], "2. Pre-process the Cifar10 dataset": [[105, "2.-Pre-process-the-Cifar10-dataset"]], "Visualize some of the training and test examples": [[105, "Visualize-some-of-the-training-and-test-examples"]], "3. Use cleanlab and feature embeddings to find outliers in the data": [[105, "3.-Use-cleanlab-and-feature-embeddings-to-find-outliers-in-the-data"]], "4. Use cleanlab and pred_probs to find outliers in the data": [[105, "4.-Use-cleanlab-and-pred_probs-to-find-outliers-in-the-data"]], "Computing Out-of-Sample Predicted Probabilities with Cross-Validation": [[106, "computing-out-of-sample-predicted-probabilities-with-cross-validation"]], "Out-of-sample predicted probabilities?": [[106, "out-of-sample-predicted-probabilities"]], "What is K-fold cross-validation?": [[106, "what-is-k-fold-cross-validation"]], "Find Noisy Labels in Regression Datasets": [[107, "Find-Noisy-Labels-in-Regression-Datasets"]], "3. Define a regression model and use cleanlab to find potential label errors": [[107, "3.-Define-a-regression-model-and-use-cleanlab-to-find-potential-label-errors"]], "5. Other ways to find noisy labels in regression datasets": [[107, "5.-Other-ways-to-find-noisy-labels-in-regression-datasets"]], "Find Label Errors in Semantic Segmentation Datasets": [[108, "Find-Label-Errors-in-Semantic-Segmentation-Datasets"]], "2. Get data, labels, and pred_probs": [[108, "2.-Get-data,-labels,-and-pred_probs"], [109, "2.-Get-data,-labels,-and-pred_probs"]], "Visualize top label issues": [[108, "Visualize-top-label-issues"]], "Classes which are commonly mislabeled overall": [[108, "Classes-which-are-commonly-mislabeled-overall"]], "Focusing on one specific class": [[108, "Focusing-on-one-specific-class"]], "Find Label Errors in Token Classification (Text) Datasets": [[109, "Find-Label-Errors-in-Token-Classification-(Text)-Datasets"]], "Most common word-level token mislabels": [[109, "Most-common-word-level-token-mislabels"]], "Find sentences containing a particular mislabeled word": [[109, "Find-sentences-containing-a-particular-mislabeled-word"]], "Sentence label quality score": [[109, "Sentence-label-quality-score"]], "How does cleanlab.token_classification work?": [[109, "How-does-cleanlab.token_classification-work?"]]}, "indexentries": {"cleanlab.benchmarking": [[0, "module-cleanlab.benchmarking"]], "module": [[0, "module-cleanlab.benchmarking"], [1, "module-cleanlab.benchmarking.noise_generation"], [2, "module-cleanlab.classification"], [3, "module-cleanlab.count"], [4, "module-cleanlab.data_valuation"], [5, "module-cleanlab.datalab.datalab"], [12, "module-cleanlab.datalab"], [13, "module-cleanlab.datalab.internal.data"], [14, "module-cleanlab.datalab.internal.data_issues"], [15, "module-cleanlab.datalab.internal.issue_manager_factory"], [16, "module-cleanlab.datalab.internal"], [17, "module-cleanlab.datalab.internal.issue_finder"], [19, "module-cleanlab.datalab.internal.issue_manager.data_valuation"], [20, "module-cleanlab.datalab.internal.issue_manager.duplicate"], [21, "module-cleanlab.datalab.internal.issue_manager.imbalance"], [23, "module-cleanlab.datalab.internal.issue_manager.issue_manager"], [24, "module-cleanlab.datalab.internal.issue_manager.label"], [26, "module-cleanlab.datalab.internal.issue_manager.multilabel.label"], [27, "module-cleanlab.datalab.internal.issue_manager.noniid"], [28, "module-cleanlab.datalab.internal.issue_manager.null"], [29, "module-cleanlab.datalab.internal.issue_manager.outlier"], [31, "module-cleanlab.datalab.internal.issue_manager.regression.label"], [32, "module-cleanlab.datalab.internal.issue_manager.underperforming_group"], [33, "module-cleanlab.datalab.internal.model_outputs"], [34, "module-cleanlab.datalab.internal.report"], [35, "module-cleanlab.datalab.internal.task"], [37, "module-cleanlab.dataset"], [38, "module-cleanlab.experimental.cifar_cnn"], [39, "module-cleanlab.experimental.coteaching"], [40, "module-cleanlab.experimental"], [41, "module-cleanlab.experimental.label_issues_batched"], [42, "module-cleanlab.experimental.mnist_pytorch"], [43, "module-cleanlab.experimental.span_classification"], [44, "module-cleanlab.filter"], [45, "module-cleanlab.internal"], [46, "module-cleanlab.internal.label_quality_utils"], [47, "module-cleanlab.internal.latent_algebra"], [48, "module-cleanlab.internal.multiannotator_utils"], [49, "module-cleanlab.internal.multilabel_scorer"], [50, "module-cleanlab.internal.multilabel_utils"], [51, "module-cleanlab.internal.neighbor"], [52, "module-cleanlab.internal.neighbor.knn_graph"], [53, "module-cleanlab.internal.neighbor.metric"], [54, "module-cleanlab.internal.neighbor.search"], [55, "module-cleanlab.internal.outlier"], [56, "module-cleanlab.internal.token_classification_utils"], [57, "module-cleanlab.internal.util"], [58, "module-cleanlab.internal.validation"], [60, "module-cleanlab.models"], [61, "module-cleanlab.models.keras"], [62, "module-cleanlab.multiannotator"], [63, "module-cleanlab.multilabel_classification.dataset"], [64, "module-cleanlab.multilabel_classification.filter"], [65, "module-cleanlab.multilabel_classification"], [66, "module-cleanlab.multilabel_classification.rank"], [67, "module-cleanlab.object_detection.filter"], [68, "module-cleanlab.object_detection"], [69, "module-cleanlab.object_detection.rank"], [70, "module-cleanlab.object_detection.summary"], [71, "module-cleanlab.outlier"], [72, "module-cleanlab.rank"], [73, "module-cleanlab.regression"], [74, "module-cleanlab.regression.learn"], [75, "module-cleanlab.regression.rank"], [76, "module-cleanlab.segmentation.filter"], [77, "module-cleanlab.segmentation"], [78, "module-cleanlab.segmentation.rank"], [79, "module-cleanlab.segmentation.summary"], [80, "module-cleanlab.token_classification.filter"], [81, "module-cleanlab.token_classification"], [82, "module-cleanlab.token_classification.rank"], [83, "module-cleanlab.token_classification.summary"]], "cleanlab.benchmarking.noise_generation": [[1, "module-cleanlab.benchmarking.noise_generation"]], "generate_n_rand_probabilities_that_sum_to_m() (in module cleanlab.benchmarking.noise_generation)": [[1, "cleanlab.benchmarking.noise_generation.generate_n_rand_probabilities_that_sum_to_m"]], "generate_noise_matrix_from_trace() (in module cleanlab.benchmarking.noise_generation)": [[1, "cleanlab.benchmarking.noise_generation.generate_noise_matrix_from_trace"]], "generate_noisy_labels() (in module cleanlab.benchmarking.noise_generation)": [[1, "cleanlab.benchmarking.noise_generation.generate_noisy_labels"]], "noise_matrix_is_valid() (in module cleanlab.benchmarking.noise_generation)": [[1, "cleanlab.benchmarking.noise_generation.noise_matrix_is_valid"]], "randomly_distribute_n_balls_into_k_bins() (in module cleanlab.benchmarking.noise_generation)": [[1, "cleanlab.benchmarking.noise_generation.randomly_distribute_N_balls_into_K_bins"]], "cleanlearning (class in cleanlab.classification)": [[2, "cleanlab.classification.CleanLearning"]], "__init_subclass__() (cleanlab.classification.cleanlearning class method)": [[2, "cleanlab.classification.CleanLearning.__init_subclass__"]], "cleanlab.classification": [[2, "module-cleanlab.classification"]], "find_label_issues() (cleanlab.classification.cleanlearning method)": [[2, "cleanlab.classification.CleanLearning.find_label_issues"]], "fit() (cleanlab.classification.cleanlearning method)": [[2, "cleanlab.classification.CleanLearning.fit"]], "get_label_issues() (cleanlab.classification.cleanlearning method)": [[2, "cleanlab.classification.CleanLearning.get_label_issues"]], "get_metadata_routing() (cleanlab.classification.cleanlearning method)": [[2, "cleanlab.classification.CleanLearning.get_metadata_routing"]], "get_params() (cleanlab.classification.cleanlearning method)": [[2, "cleanlab.classification.CleanLearning.get_params"]], "predict() (cleanlab.classification.cleanlearning method)": [[2, "cleanlab.classification.CleanLearning.predict"]], "predict_proba() (cleanlab.classification.cleanlearning method)": [[2, "cleanlab.classification.CleanLearning.predict_proba"]], "save_space() (cleanlab.classification.cleanlearning method)": [[2, "cleanlab.classification.CleanLearning.save_space"]], "score() (cleanlab.classification.cleanlearning method)": [[2, "cleanlab.classification.CleanLearning.score"]], "set_fit_request() (cleanlab.classification.cleanlearning method)": [[2, "cleanlab.classification.CleanLearning.set_fit_request"]], "set_params() (cleanlab.classification.cleanlearning method)": [[2, "cleanlab.classification.CleanLearning.set_params"]], "set_score_request() (cleanlab.classification.cleanlearning method)": [[2, "cleanlab.classification.CleanLearning.set_score_request"]], "calibrate_confident_joint() (in module cleanlab.count)": [[3, "cleanlab.count.calibrate_confident_joint"]], "cleanlab.count": [[3, "module-cleanlab.count"]], "compute_confident_joint() (in module cleanlab.count)": [[3, "cleanlab.count.compute_confident_joint"]], "estimate_confident_joint_and_cv_pred_proba() (in module cleanlab.count)": [[3, "cleanlab.count.estimate_confident_joint_and_cv_pred_proba"]], "estimate_cv_predicted_probabilities() (in module cleanlab.count)": [[3, "cleanlab.count.estimate_cv_predicted_probabilities"]], "estimate_joint() (in module cleanlab.count)": [[3, "cleanlab.count.estimate_joint"]], "estimate_latent() (in module cleanlab.count)": [[3, "cleanlab.count.estimate_latent"]], "estimate_noise_matrices() (in module cleanlab.count)": [[3, "cleanlab.count.estimate_noise_matrices"]], "estimate_py_and_noise_matrices_from_probabilities() (in module cleanlab.count)": [[3, "cleanlab.count.estimate_py_and_noise_matrices_from_probabilities"]], "estimate_py_noise_matrices_and_cv_pred_proba() (in module cleanlab.count)": [[3, "cleanlab.count.estimate_py_noise_matrices_and_cv_pred_proba"]], "get_confident_thresholds() (in module cleanlab.count)": [[3, "cleanlab.count.get_confident_thresholds"]], "num_label_issues() (in module cleanlab.count)": [[3, "cleanlab.count.num_label_issues"]], "cleanlab.data_valuation": [[4, "module-cleanlab.data_valuation"]], "data_shapley_knn() (in module cleanlab.data_valuation)": [[4, "cleanlab.data_valuation.data_shapley_knn"]], "datalab (class in cleanlab.datalab.datalab)": [[5, "cleanlab.datalab.datalab.Datalab"]], "class_names (cleanlab.datalab.datalab.datalab property)": [[5, "cleanlab.datalab.datalab.Datalab.class_names"]], "cleanlab.datalab.datalab": [[5, "module-cleanlab.datalab.datalab"]], "find_issues() (cleanlab.datalab.datalab.datalab method)": [[5, "cleanlab.datalab.datalab.Datalab.find_issues"]], "get_info() (cleanlab.datalab.datalab.datalab method)": [[5, "cleanlab.datalab.datalab.Datalab.get_info"]], "get_issue_summary() (cleanlab.datalab.datalab.datalab method)": [[5, "cleanlab.datalab.datalab.Datalab.get_issue_summary"]], "get_issues() (cleanlab.datalab.datalab.datalab method)": [[5, "cleanlab.datalab.datalab.Datalab.get_issues"]], "has_labels (cleanlab.datalab.datalab.datalab property)": [[5, "cleanlab.datalab.datalab.Datalab.has_labels"]], "info (cleanlab.datalab.datalab.datalab property)": [[5, "cleanlab.datalab.datalab.Datalab.info"]], "issue_summary (cleanlab.datalab.datalab.datalab property)": [[5, "cleanlab.datalab.datalab.Datalab.issue_summary"]], "issues (cleanlab.datalab.datalab.datalab property)": [[5, "cleanlab.datalab.datalab.Datalab.issues"]], "labels (cleanlab.datalab.datalab.datalab property)": [[5, "cleanlab.datalab.datalab.Datalab.labels"]], "list_default_issue_types() (cleanlab.datalab.datalab.datalab method)": [[5, "cleanlab.datalab.datalab.Datalab.list_default_issue_types"]], "list_possible_issue_types() (cleanlab.datalab.datalab.datalab method)": [[5, "cleanlab.datalab.datalab.Datalab.list_possible_issue_types"]], "load() (cleanlab.datalab.datalab.datalab static method)": [[5, "cleanlab.datalab.datalab.Datalab.load"]], "report() (cleanlab.datalab.datalab.datalab method)": [[5, "cleanlab.datalab.datalab.Datalab.report"]], "save() (cleanlab.datalab.datalab.datalab method)": [[5, "cleanlab.datalab.datalab.Datalab.save"]], "cleanlab.datalab": [[12, "module-cleanlab.datalab"]], "data (class in cleanlab.datalab.internal.data)": [[13, "cleanlab.datalab.internal.data.Data"]], "dataformaterror": [[13, "cleanlab.datalab.internal.data.DataFormatError"]], "datasetdicterror": [[13, "cleanlab.datalab.internal.data.DatasetDictError"]], "datasetloaderror": [[13, "cleanlab.datalab.internal.data.DatasetLoadError"]], "label (class in cleanlab.datalab.internal.data)": [[13, "cleanlab.datalab.internal.data.Label"]], "multiclass (class in cleanlab.datalab.internal.data)": [[13, "cleanlab.datalab.internal.data.MultiClass"]], "multilabel (class in cleanlab.datalab.internal.data)": [[13, "cleanlab.datalab.internal.data.MultiLabel"]], "add_note() (cleanlab.datalab.internal.data.dataformaterror method)": [[13, "cleanlab.datalab.internal.data.DataFormatError.add_note"]], "add_note() (cleanlab.datalab.internal.data.datasetdicterror method)": [[13, "cleanlab.datalab.internal.data.DatasetDictError.add_note"]], "add_note() (cleanlab.datalab.internal.data.datasetloaderror method)": [[13, "cleanlab.datalab.internal.data.DatasetLoadError.add_note"]], "args (cleanlab.datalab.internal.data.dataformaterror attribute)": [[13, "cleanlab.datalab.internal.data.DataFormatError.args"]], "args (cleanlab.datalab.internal.data.datasetdicterror attribute)": [[13, "cleanlab.datalab.internal.data.DatasetDictError.args"]], "args (cleanlab.datalab.internal.data.datasetloaderror attribute)": [[13, "cleanlab.datalab.internal.data.DatasetLoadError.args"]], "class_names (cleanlab.datalab.internal.data.data property)": [[13, "cleanlab.datalab.internal.data.Data.class_names"]], "class_names (cleanlab.datalab.internal.data.label property)": [[13, "cleanlab.datalab.internal.data.Label.class_names"]], "class_names (cleanlab.datalab.internal.data.multiclass property)": [[13, "cleanlab.datalab.internal.data.MultiClass.class_names"]], "class_names (cleanlab.datalab.internal.data.multilabel property)": [[13, "cleanlab.datalab.internal.data.MultiLabel.class_names"]], "cleanlab.datalab.internal.data": [[13, "module-cleanlab.datalab.internal.data"]], "has_labels (cleanlab.datalab.internal.data.data property)": [[13, "cleanlab.datalab.internal.data.Data.has_labels"]], "is_available (cleanlab.datalab.internal.data.label property)": [[13, "cleanlab.datalab.internal.data.Label.is_available"]], "is_available (cleanlab.datalab.internal.data.multiclass property)": [[13, "cleanlab.datalab.internal.data.MultiClass.is_available"]], "is_available (cleanlab.datalab.internal.data.multilabel property)": [[13, "cleanlab.datalab.internal.data.MultiLabel.is_available"]], "with_traceback() (cleanlab.datalab.internal.data.dataformaterror method)": [[13, "cleanlab.datalab.internal.data.DataFormatError.with_traceback"]], "with_traceback() (cleanlab.datalab.internal.data.datasetdicterror method)": [[13, "cleanlab.datalab.internal.data.DatasetDictError.with_traceback"]], "with_traceback() (cleanlab.datalab.internal.data.datasetloaderror method)": [[13, "cleanlab.datalab.internal.data.DatasetLoadError.with_traceback"]], "dataissues (class in cleanlab.datalab.internal.data_issues)": [[14, "cleanlab.datalab.internal.data_issues.DataIssues"]], "cleanlab.datalab.internal.data_issues": [[14, "module-cleanlab.datalab.internal.data_issues"]], "collect_issues_from_imagelab() (cleanlab.datalab.internal.data_issues.dataissues method)": [[14, "cleanlab.datalab.internal.data_issues.DataIssues.collect_issues_from_imagelab"]], "collect_issues_from_issue_manager() (cleanlab.datalab.internal.data_issues.dataissues method)": [[14, "cleanlab.datalab.internal.data_issues.DataIssues.collect_issues_from_issue_manager"]], "collect_statistics() (cleanlab.datalab.internal.data_issues.dataissues method)": [[14, "cleanlab.datalab.internal.data_issues.DataIssues.collect_statistics"]], "get_data_statistics() (in module cleanlab.datalab.internal.data_issues)": [[14, "cleanlab.datalab.internal.data_issues.get_data_statistics"]], "get_info() (cleanlab.datalab.internal.data_issues.dataissues method)": [[14, "cleanlab.datalab.internal.data_issues.DataIssues.get_info"]], "get_issue_summary() (cleanlab.datalab.internal.data_issues.dataissues method)": [[14, "cleanlab.datalab.internal.data_issues.DataIssues.get_issue_summary"]], "get_issues() (cleanlab.datalab.internal.data_issues.dataissues method)": [[14, "cleanlab.datalab.internal.data_issues.DataIssues.get_issues"]], "info (cleanlab.datalab.internal.data_issues.dataissues attribute)": [[14, "cleanlab.datalab.internal.data_issues.DataIssues.info"]], "issue_summary (cleanlab.datalab.internal.data_issues.dataissues attribute)": [[14, "cleanlab.datalab.internal.data_issues.DataIssues.issue_summary"]], "issues (cleanlab.datalab.internal.data_issues.dataissues attribute)": [[14, "cleanlab.datalab.internal.data_issues.DataIssues.issues"]], "set_health_score() (cleanlab.datalab.internal.data_issues.dataissues method)": [[14, "cleanlab.datalab.internal.data_issues.DataIssues.set_health_score"]], "statistics (cleanlab.datalab.internal.data_issues.dataissues property)": [[14, "cleanlab.datalab.internal.data_issues.DataIssues.statistics"]], "registry (in module cleanlab.datalab.internal.issue_manager_factory)": [[15, "cleanlab.datalab.internal.issue_manager_factory.REGISTRY"]], "cleanlab.datalab.internal.issue_manager_factory": [[15, "module-cleanlab.datalab.internal.issue_manager_factory"]], "list_default_issue_types() (in module cleanlab.datalab.internal.issue_manager_factory)": [[15, "cleanlab.datalab.internal.issue_manager_factory.list_default_issue_types"]], "list_possible_issue_types() (in module cleanlab.datalab.internal.issue_manager_factory)": [[15, "cleanlab.datalab.internal.issue_manager_factory.list_possible_issue_types"]], "register() (in module cleanlab.datalab.internal.issue_manager_factory)": [[15, "cleanlab.datalab.internal.issue_manager_factory.register"]], "cleanlab.datalab.internal": [[16, "module-cleanlab.datalab.internal"]], "issuefinder (class in cleanlab.datalab.internal.issue_finder)": [[17, "cleanlab.datalab.internal.issue_finder.IssueFinder"]], "cleanlab.datalab.internal.issue_finder": [[17, "module-cleanlab.datalab.internal.issue_finder"]], "find_issues() (cleanlab.datalab.internal.issue_finder.issuefinder method)": [[17, "cleanlab.datalab.internal.issue_finder.IssueFinder.find_issues"]], "get_available_issue_types() (cleanlab.datalab.internal.issue_finder.issuefinder method)": [[17, "cleanlab.datalab.internal.issue_finder.IssueFinder.get_available_issue_types"]], "default_threshold (cleanlab.datalab.internal.issue_manager.data_valuation.datavaluationissuemanager attribute)": [[19, "cleanlab.datalab.internal.issue_manager.data_valuation.DataValuationIssueManager.DEFAULT_THRESHOLD"]], "datavaluationissuemanager (class in cleanlab.datalab.internal.issue_manager.data_valuation)": [[19, "cleanlab.datalab.internal.issue_manager.data_valuation.DataValuationIssueManager"]], "cleanlab.datalab.internal.issue_manager.data_valuation": [[19, "module-cleanlab.datalab.internal.issue_manager.data_valuation"]], "collect_info() (cleanlab.datalab.internal.issue_manager.data_valuation.datavaluationissuemanager method)": [[19, "cleanlab.datalab.internal.issue_manager.data_valuation.DataValuationIssueManager.collect_info"]], "description (cleanlab.datalab.internal.issue_manager.data_valuation.datavaluationissuemanager attribute)": [[19, "cleanlab.datalab.internal.issue_manager.data_valuation.DataValuationIssueManager.description"]], "find_issues() (cleanlab.datalab.internal.issue_manager.data_valuation.datavaluationissuemanager method)": [[19, "cleanlab.datalab.internal.issue_manager.data_valuation.DataValuationIssueManager.find_issues"]], "info (cleanlab.datalab.internal.issue_manager.data_valuation.datavaluationissuemanager attribute)": [[19, "cleanlab.datalab.internal.issue_manager.data_valuation.DataValuationIssueManager.info"]], "issue_name (cleanlab.datalab.internal.issue_manager.data_valuation.datavaluationissuemanager attribute)": [[19, "cleanlab.datalab.internal.issue_manager.data_valuation.DataValuationIssueManager.issue_name"]], "issue_score_key (cleanlab.datalab.internal.issue_manager.data_valuation.datavaluationissuemanager attribute)": [[19, "cleanlab.datalab.internal.issue_manager.data_valuation.DataValuationIssueManager.issue_score_key"]], "issues (cleanlab.datalab.internal.issue_manager.data_valuation.datavaluationissuemanager attribute)": [[19, "cleanlab.datalab.internal.issue_manager.data_valuation.DataValuationIssueManager.issues"]], "make_summary() (cleanlab.datalab.internal.issue_manager.data_valuation.datavaluationissuemanager class method)": [[19, "cleanlab.datalab.internal.issue_manager.data_valuation.DataValuationIssueManager.make_summary"]], "report() (cleanlab.datalab.internal.issue_manager.data_valuation.datavaluationissuemanager class method)": [[19, "cleanlab.datalab.internal.issue_manager.data_valuation.DataValuationIssueManager.report"]], "summary (cleanlab.datalab.internal.issue_manager.data_valuation.datavaluationissuemanager attribute)": [[19, "cleanlab.datalab.internal.issue_manager.data_valuation.DataValuationIssueManager.summary"]], "verbosity_levels (cleanlab.datalab.internal.issue_manager.data_valuation.datavaluationissuemanager attribute)": [[19, "cleanlab.datalab.internal.issue_manager.data_valuation.DataValuationIssueManager.verbosity_levels"]], "nearduplicateissuemanager (class in cleanlab.datalab.internal.issue_manager.duplicate)": [[20, "cleanlab.datalab.internal.issue_manager.duplicate.NearDuplicateIssueManager"]], "cleanlab.datalab.internal.issue_manager.duplicate": [[20, "module-cleanlab.datalab.internal.issue_manager.duplicate"]], "collect_info() (cleanlab.datalab.internal.issue_manager.duplicate.nearduplicateissuemanager method)": [[20, "cleanlab.datalab.internal.issue_manager.duplicate.NearDuplicateIssueManager.collect_info"]], "description (cleanlab.datalab.internal.issue_manager.duplicate.nearduplicateissuemanager attribute)": [[20, "cleanlab.datalab.internal.issue_manager.duplicate.NearDuplicateIssueManager.description"]], "find_issues() (cleanlab.datalab.internal.issue_manager.duplicate.nearduplicateissuemanager method)": [[20, "cleanlab.datalab.internal.issue_manager.duplicate.NearDuplicateIssueManager.find_issues"]], "info (cleanlab.datalab.internal.issue_manager.duplicate.nearduplicateissuemanager attribute)": [[20, "cleanlab.datalab.internal.issue_manager.duplicate.NearDuplicateIssueManager.info"]], "issue_name (cleanlab.datalab.internal.issue_manager.duplicate.nearduplicateissuemanager attribute)": [[20, "cleanlab.datalab.internal.issue_manager.duplicate.NearDuplicateIssueManager.issue_name"]], "issue_score_key (cleanlab.datalab.internal.issue_manager.duplicate.nearduplicateissuemanager attribute)": [[20, "cleanlab.datalab.internal.issue_manager.duplicate.NearDuplicateIssueManager.issue_score_key"]], "issues (cleanlab.datalab.internal.issue_manager.duplicate.nearduplicateissuemanager attribute)": [[20, "cleanlab.datalab.internal.issue_manager.duplicate.NearDuplicateIssueManager.issues"]], "make_summary() (cleanlab.datalab.internal.issue_manager.duplicate.nearduplicateissuemanager class method)": [[20, "cleanlab.datalab.internal.issue_manager.duplicate.NearDuplicateIssueManager.make_summary"]], "near_duplicate_sets (cleanlab.datalab.internal.issue_manager.duplicate.nearduplicateissuemanager attribute)": [[20, "cleanlab.datalab.internal.issue_manager.duplicate.NearDuplicateIssueManager.near_duplicate_sets"]], "report() (cleanlab.datalab.internal.issue_manager.duplicate.nearduplicateissuemanager class method)": [[20, "cleanlab.datalab.internal.issue_manager.duplicate.NearDuplicateIssueManager.report"]], "summary (cleanlab.datalab.internal.issue_manager.duplicate.nearduplicateissuemanager attribute)": [[20, "cleanlab.datalab.internal.issue_manager.duplicate.NearDuplicateIssueManager.summary"]], "verbosity_levels (cleanlab.datalab.internal.issue_manager.duplicate.nearduplicateissuemanager attribute)": [[20, "cleanlab.datalab.internal.issue_manager.duplicate.NearDuplicateIssueManager.verbosity_levels"]], "classimbalanceissuemanager (class in cleanlab.datalab.internal.issue_manager.imbalance)": [[21, "cleanlab.datalab.internal.issue_manager.imbalance.ClassImbalanceIssueManager"]], "cleanlab.datalab.internal.issue_manager.imbalance": [[21, "module-cleanlab.datalab.internal.issue_manager.imbalance"]], "collect_info() (cleanlab.datalab.internal.issue_manager.imbalance.classimbalanceissuemanager method)": [[21, "cleanlab.datalab.internal.issue_manager.imbalance.ClassImbalanceIssueManager.collect_info"]], "description (cleanlab.datalab.internal.issue_manager.imbalance.classimbalanceissuemanager attribute)": [[21, "cleanlab.datalab.internal.issue_manager.imbalance.ClassImbalanceIssueManager.description"]], "find_issues() (cleanlab.datalab.internal.issue_manager.imbalance.classimbalanceissuemanager method)": [[21, "cleanlab.datalab.internal.issue_manager.imbalance.ClassImbalanceIssueManager.find_issues"]], "info (cleanlab.datalab.internal.issue_manager.imbalance.classimbalanceissuemanager attribute)": [[21, "cleanlab.datalab.internal.issue_manager.imbalance.ClassImbalanceIssueManager.info"]], "issue_name (cleanlab.datalab.internal.issue_manager.imbalance.classimbalanceissuemanager attribute)": [[21, "cleanlab.datalab.internal.issue_manager.imbalance.ClassImbalanceIssueManager.issue_name"]], "issue_score_key (cleanlab.datalab.internal.issue_manager.imbalance.classimbalanceissuemanager attribute)": [[21, "cleanlab.datalab.internal.issue_manager.imbalance.ClassImbalanceIssueManager.issue_score_key"]], "issues (cleanlab.datalab.internal.issue_manager.imbalance.classimbalanceissuemanager attribute)": [[21, "cleanlab.datalab.internal.issue_manager.imbalance.ClassImbalanceIssueManager.issues"]], "make_summary() (cleanlab.datalab.internal.issue_manager.imbalance.classimbalanceissuemanager class method)": [[21, "cleanlab.datalab.internal.issue_manager.imbalance.ClassImbalanceIssueManager.make_summary"]], "report() (cleanlab.datalab.internal.issue_manager.imbalance.classimbalanceissuemanager class method)": [[21, "cleanlab.datalab.internal.issue_manager.imbalance.ClassImbalanceIssueManager.report"]], "summary (cleanlab.datalab.internal.issue_manager.imbalance.classimbalanceissuemanager attribute)": [[21, "cleanlab.datalab.internal.issue_manager.imbalance.ClassImbalanceIssueManager.summary"]], "verbosity_levels (cleanlab.datalab.internal.issue_manager.imbalance.classimbalanceissuemanager attribute)": [[21, "cleanlab.datalab.internal.issue_manager.imbalance.ClassImbalanceIssueManager.verbosity_levels"]], "issuemanager (class in cleanlab.datalab.internal.issue_manager.issue_manager)": [[23, "cleanlab.datalab.internal.issue_manager.issue_manager.IssueManager"]], "cleanlab.datalab.internal.issue_manager.issue_manager": [[23, "module-cleanlab.datalab.internal.issue_manager.issue_manager"]], "collect_info() (cleanlab.datalab.internal.issue_manager.issue_manager.issuemanager method)": [[23, "cleanlab.datalab.internal.issue_manager.issue_manager.IssueManager.collect_info"]], "description (cleanlab.datalab.internal.issue_manager.issue_manager.issuemanager attribute)": [[23, "cleanlab.datalab.internal.issue_manager.issue_manager.IssueManager.description"]], "find_issues() (cleanlab.datalab.internal.issue_manager.issue_manager.issuemanager method)": [[23, "cleanlab.datalab.internal.issue_manager.issue_manager.IssueManager.find_issues"]], "info (cleanlab.datalab.internal.issue_manager.issue_manager.issuemanager attribute)": [[23, "cleanlab.datalab.internal.issue_manager.issue_manager.IssueManager.info"]], "issue_name (cleanlab.datalab.internal.issue_manager.issue_manager.issuemanager attribute)": [[23, "cleanlab.datalab.internal.issue_manager.issue_manager.IssueManager.issue_name"]], "issue_score_key (cleanlab.datalab.internal.issue_manager.issue_manager.issuemanager attribute)": [[23, "cleanlab.datalab.internal.issue_manager.issue_manager.IssueManager.issue_score_key"]], "issues (cleanlab.datalab.internal.issue_manager.issue_manager.issuemanager attribute)": [[23, "cleanlab.datalab.internal.issue_manager.issue_manager.IssueManager.issues"]], "make_summary() (cleanlab.datalab.internal.issue_manager.issue_manager.issuemanager class method)": [[23, "cleanlab.datalab.internal.issue_manager.issue_manager.IssueManager.make_summary"]], "report() (cleanlab.datalab.internal.issue_manager.issue_manager.issuemanager class method)": [[23, "cleanlab.datalab.internal.issue_manager.issue_manager.IssueManager.report"]], "summary (cleanlab.datalab.internal.issue_manager.issue_manager.issuemanager attribute)": [[23, "cleanlab.datalab.internal.issue_manager.issue_manager.IssueManager.summary"]], "verbosity_levels (cleanlab.datalab.internal.issue_manager.issue_manager.issuemanager attribute)": [[23, "cleanlab.datalab.internal.issue_manager.issue_manager.IssueManager.verbosity_levels"]], "labelissuemanager (class in cleanlab.datalab.internal.issue_manager.label)": [[24, "cleanlab.datalab.internal.issue_manager.label.LabelIssueManager"]], "cleanlab.datalab.internal.issue_manager.label": [[24, "module-cleanlab.datalab.internal.issue_manager.label"]], "collect_info() (cleanlab.datalab.internal.issue_manager.label.labelissuemanager method)": [[24, "cleanlab.datalab.internal.issue_manager.label.LabelIssueManager.collect_info"]], "description (cleanlab.datalab.internal.issue_manager.label.labelissuemanager attribute)": [[24, "cleanlab.datalab.internal.issue_manager.label.LabelIssueManager.description"]], "find_issues() (cleanlab.datalab.internal.issue_manager.label.labelissuemanager method)": [[24, "cleanlab.datalab.internal.issue_manager.label.LabelIssueManager.find_issues"]], "get_health_summary() (cleanlab.datalab.internal.issue_manager.label.labelissuemanager method)": [[24, "cleanlab.datalab.internal.issue_manager.label.LabelIssueManager.get_health_summary"]], "health_summary_parameters (cleanlab.datalab.internal.issue_manager.label.labelissuemanager attribute)": [[24, "cleanlab.datalab.internal.issue_manager.label.LabelIssueManager.health_summary_parameters"]], "info (cleanlab.datalab.internal.issue_manager.label.labelissuemanager attribute)": [[24, "cleanlab.datalab.internal.issue_manager.label.LabelIssueManager.info"]], "issue_name (cleanlab.datalab.internal.issue_manager.label.labelissuemanager attribute)": [[24, "cleanlab.datalab.internal.issue_manager.label.LabelIssueManager.issue_name"]], "issue_score_key (cleanlab.datalab.internal.issue_manager.label.labelissuemanager attribute)": [[24, "cleanlab.datalab.internal.issue_manager.label.LabelIssueManager.issue_score_key"]], "issues (cleanlab.datalab.internal.issue_manager.label.labelissuemanager attribute)": [[24, "cleanlab.datalab.internal.issue_manager.label.LabelIssueManager.issues"]], "make_summary() (cleanlab.datalab.internal.issue_manager.label.labelissuemanager class method)": [[24, "cleanlab.datalab.internal.issue_manager.label.LabelIssueManager.make_summary"]], "report() (cleanlab.datalab.internal.issue_manager.label.labelissuemanager class method)": [[24, "cleanlab.datalab.internal.issue_manager.label.LabelIssueManager.report"]], "summary (cleanlab.datalab.internal.issue_manager.label.labelissuemanager attribute)": [[24, "cleanlab.datalab.internal.issue_manager.label.LabelIssueManager.summary"]], "verbosity_levels (cleanlab.datalab.internal.issue_manager.label.labelissuemanager attribute)": [[24, "cleanlab.datalab.internal.issue_manager.label.LabelIssueManager.verbosity_levels"]], "multilabelissuemanager (class in cleanlab.datalab.internal.issue_manager.multilabel.label)": [[26, "cleanlab.datalab.internal.issue_manager.multilabel.label.MultilabelIssueManager"]], "cleanlab.datalab.internal.issue_manager.multilabel.label": [[26, "module-cleanlab.datalab.internal.issue_manager.multilabel.label"]], "collect_info() (cleanlab.datalab.internal.issue_manager.multilabel.label.multilabelissuemanager method)": [[26, "cleanlab.datalab.internal.issue_manager.multilabel.label.MultilabelIssueManager.collect_info"]], "description (cleanlab.datalab.internal.issue_manager.multilabel.label.multilabelissuemanager attribute)": [[26, "cleanlab.datalab.internal.issue_manager.multilabel.label.MultilabelIssueManager.description"]], "find_issues() (cleanlab.datalab.internal.issue_manager.multilabel.label.multilabelissuemanager method)": [[26, "cleanlab.datalab.internal.issue_manager.multilabel.label.MultilabelIssueManager.find_issues"]], "info (cleanlab.datalab.internal.issue_manager.multilabel.label.multilabelissuemanager attribute)": [[26, "cleanlab.datalab.internal.issue_manager.multilabel.label.MultilabelIssueManager.info"]], "issue_name (cleanlab.datalab.internal.issue_manager.multilabel.label.multilabelissuemanager attribute)": [[26, "cleanlab.datalab.internal.issue_manager.multilabel.label.MultilabelIssueManager.issue_name"]], "issue_score_key (cleanlab.datalab.internal.issue_manager.multilabel.label.multilabelissuemanager attribute)": [[26, "cleanlab.datalab.internal.issue_manager.multilabel.label.MultilabelIssueManager.issue_score_key"]], "issues (cleanlab.datalab.internal.issue_manager.multilabel.label.multilabelissuemanager attribute)": [[26, "cleanlab.datalab.internal.issue_manager.multilabel.label.MultilabelIssueManager.issues"]], "make_summary() (cleanlab.datalab.internal.issue_manager.multilabel.label.multilabelissuemanager class method)": [[26, "cleanlab.datalab.internal.issue_manager.multilabel.label.MultilabelIssueManager.make_summary"]], "report() (cleanlab.datalab.internal.issue_manager.multilabel.label.multilabelissuemanager class method)": [[26, "cleanlab.datalab.internal.issue_manager.multilabel.label.MultilabelIssueManager.report"]], "summary (cleanlab.datalab.internal.issue_manager.multilabel.label.multilabelissuemanager attribute)": [[26, "cleanlab.datalab.internal.issue_manager.multilabel.label.MultilabelIssueManager.summary"]], "verbosity_levels (cleanlab.datalab.internal.issue_manager.multilabel.label.multilabelissuemanager attribute)": [[26, "cleanlab.datalab.internal.issue_manager.multilabel.label.MultilabelIssueManager.verbosity_levels"]], "noniidissuemanager (class in cleanlab.datalab.internal.issue_manager.noniid)": [[27, "cleanlab.datalab.internal.issue_manager.noniid.NonIIDIssueManager"]], "cleanlab.datalab.internal.issue_manager.noniid": [[27, "module-cleanlab.datalab.internal.issue_manager.noniid"]], "collect_info() (cleanlab.datalab.internal.issue_manager.noniid.noniidissuemanager method)": [[27, "cleanlab.datalab.internal.issue_manager.noniid.NonIIDIssueManager.collect_info"]], "description (cleanlab.datalab.internal.issue_manager.noniid.noniidissuemanager attribute)": [[27, "cleanlab.datalab.internal.issue_manager.noniid.NonIIDIssueManager.description"]], "find_issues() (cleanlab.datalab.internal.issue_manager.noniid.noniidissuemanager method)": [[27, "cleanlab.datalab.internal.issue_manager.noniid.NonIIDIssueManager.find_issues"]], "info (cleanlab.datalab.internal.issue_manager.noniid.noniidissuemanager attribute)": [[27, "cleanlab.datalab.internal.issue_manager.noniid.NonIIDIssueManager.info"]], "issue_name (cleanlab.datalab.internal.issue_manager.noniid.noniidissuemanager attribute)": [[27, "cleanlab.datalab.internal.issue_manager.noniid.NonIIDIssueManager.issue_name"]], "issue_score_key (cleanlab.datalab.internal.issue_manager.noniid.noniidissuemanager attribute)": [[27, "cleanlab.datalab.internal.issue_manager.noniid.NonIIDIssueManager.issue_score_key"]], "issues (cleanlab.datalab.internal.issue_manager.noniid.noniidissuemanager attribute)": [[27, "cleanlab.datalab.internal.issue_manager.noniid.NonIIDIssueManager.issues"]], "make_summary() (cleanlab.datalab.internal.issue_manager.noniid.noniidissuemanager class method)": [[27, "cleanlab.datalab.internal.issue_manager.noniid.NonIIDIssueManager.make_summary"]], "report() (cleanlab.datalab.internal.issue_manager.noniid.noniidissuemanager class method)": [[27, "cleanlab.datalab.internal.issue_manager.noniid.NonIIDIssueManager.report"]], "simplified_kolmogorov_smirnov_test() (in module cleanlab.datalab.internal.issue_manager.noniid)": [[27, "cleanlab.datalab.internal.issue_manager.noniid.simplified_kolmogorov_smirnov_test"]], "summary (cleanlab.datalab.internal.issue_manager.noniid.noniidissuemanager attribute)": [[27, "cleanlab.datalab.internal.issue_manager.noniid.NonIIDIssueManager.summary"]], "verbosity_levels (cleanlab.datalab.internal.issue_manager.noniid.noniidissuemanager attribute)": [[27, "cleanlab.datalab.internal.issue_manager.noniid.NonIIDIssueManager.verbosity_levels"]], "nullissuemanager (class in cleanlab.datalab.internal.issue_manager.null)": [[28, "cleanlab.datalab.internal.issue_manager.null.NullIssueManager"]], "cleanlab.datalab.internal.issue_manager.null": [[28, "module-cleanlab.datalab.internal.issue_manager.null"]], "collect_info() (cleanlab.datalab.internal.issue_manager.null.nullissuemanager method)": [[28, "cleanlab.datalab.internal.issue_manager.null.NullIssueManager.collect_info"]], "description (cleanlab.datalab.internal.issue_manager.null.nullissuemanager attribute)": [[28, "cleanlab.datalab.internal.issue_manager.null.NullIssueManager.description"]], "find_issues() (cleanlab.datalab.internal.issue_manager.null.nullissuemanager method)": [[28, "cleanlab.datalab.internal.issue_manager.null.NullIssueManager.find_issues"]], "info (cleanlab.datalab.internal.issue_manager.null.nullissuemanager attribute)": [[28, "cleanlab.datalab.internal.issue_manager.null.NullIssueManager.info"]], "issue_name (cleanlab.datalab.internal.issue_manager.null.nullissuemanager attribute)": [[28, "cleanlab.datalab.internal.issue_manager.null.NullIssueManager.issue_name"]], "issue_score_key (cleanlab.datalab.internal.issue_manager.null.nullissuemanager attribute)": [[28, "cleanlab.datalab.internal.issue_manager.null.NullIssueManager.issue_score_key"]], "issues (cleanlab.datalab.internal.issue_manager.null.nullissuemanager attribute)": [[28, "cleanlab.datalab.internal.issue_manager.null.NullIssueManager.issues"]], "make_summary() (cleanlab.datalab.internal.issue_manager.null.nullissuemanager class method)": [[28, "cleanlab.datalab.internal.issue_manager.null.NullIssueManager.make_summary"]], "report() (cleanlab.datalab.internal.issue_manager.null.nullissuemanager class method)": [[28, "cleanlab.datalab.internal.issue_manager.null.NullIssueManager.report"]], "summary (cleanlab.datalab.internal.issue_manager.null.nullissuemanager attribute)": [[28, "cleanlab.datalab.internal.issue_manager.null.NullIssueManager.summary"]], "verbosity_levels (cleanlab.datalab.internal.issue_manager.null.nullissuemanager attribute)": [[28, "cleanlab.datalab.internal.issue_manager.null.NullIssueManager.verbosity_levels"]], "default_thresholds (cleanlab.datalab.internal.issue_manager.outlier.outlierissuemanager attribute)": [[29, "cleanlab.datalab.internal.issue_manager.outlier.OutlierIssueManager.DEFAULT_THRESHOLDS"]], "outlierissuemanager (class in cleanlab.datalab.internal.issue_manager.outlier)": [[29, "cleanlab.datalab.internal.issue_manager.outlier.OutlierIssueManager"]], "cleanlab.datalab.internal.issue_manager.outlier": [[29, "module-cleanlab.datalab.internal.issue_manager.outlier"]], "collect_info() (cleanlab.datalab.internal.issue_manager.outlier.outlierissuemanager method)": [[29, "cleanlab.datalab.internal.issue_manager.outlier.OutlierIssueManager.collect_info"]], "description (cleanlab.datalab.internal.issue_manager.outlier.outlierissuemanager attribute)": [[29, "cleanlab.datalab.internal.issue_manager.outlier.OutlierIssueManager.description"]], "find_issues() (cleanlab.datalab.internal.issue_manager.outlier.outlierissuemanager method)": [[29, "cleanlab.datalab.internal.issue_manager.outlier.OutlierIssueManager.find_issues"]], "info (cleanlab.datalab.internal.issue_manager.outlier.outlierissuemanager attribute)": [[29, "cleanlab.datalab.internal.issue_manager.outlier.OutlierIssueManager.info"]], "issue_name (cleanlab.datalab.internal.issue_manager.outlier.outlierissuemanager attribute)": [[29, "cleanlab.datalab.internal.issue_manager.outlier.OutlierIssueManager.issue_name"]], "issue_score_key (cleanlab.datalab.internal.issue_manager.outlier.outlierissuemanager attribute)": [[29, "cleanlab.datalab.internal.issue_manager.outlier.OutlierIssueManager.issue_score_key"]], "issues (cleanlab.datalab.internal.issue_manager.outlier.outlierissuemanager attribute)": [[29, "cleanlab.datalab.internal.issue_manager.outlier.OutlierIssueManager.issues"]], "make_summary() (cleanlab.datalab.internal.issue_manager.outlier.outlierissuemanager class method)": [[29, "cleanlab.datalab.internal.issue_manager.outlier.OutlierIssueManager.make_summary"]], "ood (cleanlab.datalab.internal.issue_manager.outlier.outlierissuemanager attribute)": [[29, "cleanlab.datalab.internal.issue_manager.outlier.OutlierIssueManager.ood"]], "report() (cleanlab.datalab.internal.issue_manager.outlier.outlierissuemanager class method)": [[29, "cleanlab.datalab.internal.issue_manager.outlier.OutlierIssueManager.report"]], "summary (cleanlab.datalab.internal.issue_manager.outlier.outlierissuemanager attribute)": [[29, "cleanlab.datalab.internal.issue_manager.outlier.OutlierIssueManager.summary"]], "verbosity_levels (cleanlab.datalab.internal.issue_manager.outlier.outlierissuemanager attribute)": [[29, "cleanlab.datalab.internal.issue_manager.outlier.OutlierIssueManager.verbosity_levels"]], "regressionlabelissuemanager (class in cleanlab.datalab.internal.issue_manager.regression.label)": [[31, "cleanlab.datalab.internal.issue_manager.regression.label.RegressionLabelIssueManager"]], "cleanlab.datalab.internal.issue_manager.regression.label": [[31, "module-cleanlab.datalab.internal.issue_manager.regression.label"]], "collect_info() (cleanlab.datalab.internal.issue_manager.regression.label.regressionlabelissuemanager method)": [[31, "cleanlab.datalab.internal.issue_manager.regression.label.RegressionLabelIssueManager.collect_info"]], "description (cleanlab.datalab.internal.issue_manager.regression.label.regressionlabelissuemanager attribute)": [[31, "cleanlab.datalab.internal.issue_manager.regression.label.RegressionLabelIssueManager.description"]], "find_issues() (cleanlab.datalab.internal.issue_manager.regression.label.regressionlabelissuemanager method)": [[31, "cleanlab.datalab.internal.issue_manager.regression.label.RegressionLabelIssueManager.find_issues"]], "find_issues_with_features() (in module cleanlab.datalab.internal.issue_manager.regression.label)": [[31, "cleanlab.datalab.internal.issue_manager.regression.label.find_issues_with_features"]], "find_issues_with_predictions() (in module cleanlab.datalab.internal.issue_manager.regression.label)": [[31, "cleanlab.datalab.internal.issue_manager.regression.label.find_issues_with_predictions"]], "info (cleanlab.datalab.internal.issue_manager.regression.label.regressionlabelissuemanager attribute)": [[31, "cleanlab.datalab.internal.issue_manager.regression.label.RegressionLabelIssueManager.info"]], "issue_name (cleanlab.datalab.internal.issue_manager.regression.label.regressionlabelissuemanager attribute)": [[31, "cleanlab.datalab.internal.issue_manager.regression.label.RegressionLabelIssueManager.issue_name"]], "issue_score_key (cleanlab.datalab.internal.issue_manager.regression.label.regressionlabelissuemanager attribute)": [[31, "cleanlab.datalab.internal.issue_manager.regression.label.RegressionLabelIssueManager.issue_score_key"]], "issues (cleanlab.datalab.internal.issue_manager.regression.label.regressionlabelissuemanager attribute)": [[31, "cleanlab.datalab.internal.issue_manager.regression.label.RegressionLabelIssueManager.issues"]], "make_summary() (cleanlab.datalab.internal.issue_manager.regression.label.regressionlabelissuemanager class method)": [[31, "cleanlab.datalab.internal.issue_manager.regression.label.RegressionLabelIssueManager.make_summary"]], "report() (cleanlab.datalab.internal.issue_manager.regression.label.regressionlabelissuemanager class method)": [[31, "cleanlab.datalab.internal.issue_manager.regression.label.RegressionLabelIssueManager.report"]], "summary (cleanlab.datalab.internal.issue_manager.regression.label.regressionlabelissuemanager attribute)": [[31, "cleanlab.datalab.internal.issue_manager.regression.label.RegressionLabelIssueManager.summary"]], "verbosity_levels (cleanlab.datalab.internal.issue_manager.regression.label.regressionlabelissuemanager attribute)": [[31, "cleanlab.datalab.internal.issue_manager.regression.label.RegressionLabelIssueManager.verbosity_levels"]], "no_underperforming_cluster_id (cleanlab.datalab.internal.issue_manager.underperforming_group.underperforminggroupissuemanager attribute)": [[32, "cleanlab.datalab.internal.issue_manager.underperforming_group.UnderperformingGroupIssueManager.NO_UNDERPERFORMING_CLUSTER_ID"]], "outlier_cluster_labels (cleanlab.datalab.internal.issue_manager.underperforming_group.underperforminggroupissuemanager attribute)": [[32, "cleanlab.datalab.internal.issue_manager.underperforming_group.UnderperformingGroupIssueManager.OUTLIER_CLUSTER_LABELS"]], "underperforminggroupissuemanager (class in cleanlab.datalab.internal.issue_manager.underperforming_group)": [[32, "cleanlab.datalab.internal.issue_manager.underperforming_group.UnderperformingGroupIssueManager"]], "cleanlab.datalab.internal.issue_manager.underperforming_group": [[32, "module-cleanlab.datalab.internal.issue_manager.underperforming_group"]], "collect_info() (cleanlab.datalab.internal.issue_manager.underperforming_group.underperforminggroupissuemanager method)": [[32, "cleanlab.datalab.internal.issue_manager.underperforming_group.UnderperformingGroupIssueManager.collect_info"]], "description (cleanlab.datalab.internal.issue_manager.underperforming_group.underperforminggroupissuemanager attribute)": [[32, "cleanlab.datalab.internal.issue_manager.underperforming_group.UnderperformingGroupIssueManager.description"]], "filter_cluster_ids() (cleanlab.datalab.internal.issue_manager.underperforming_group.underperforminggroupissuemanager method)": [[32, "cleanlab.datalab.internal.issue_manager.underperforming_group.UnderperformingGroupIssueManager.filter_cluster_ids"]], "find_issues() (cleanlab.datalab.internal.issue_manager.underperforming_group.underperforminggroupissuemanager method)": [[32, "cleanlab.datalab.internal.issue_manager.underperforming_group.UnderperformingGroupIssueManager.find_issues"]], "get_worst_cluster() (cleanlab.datalab.internal.issue_manager.underperforming_group.underperforminggroupissuemanager method)": [[32, "cleanlab.datalab.internal.issue_manager.underperforming_group.UnderperformingGroupIssueManager.get_worst_cluster"]], "info (cleanlab.datalab.internal.issue_manager.underperforming_group.underperforminggroupissuemanager attribute)": [[32, "cleanlab.datalab.internal.issue_manager.underperforming_group.UnderperformingGroupIssueManager.info"]], "issue_name (cleanlab.datalab.internal.issue_manager.underperforming_group.underperforminggroupissuemanager attribute)": [[32, "cleanlab.datalab.internal.issue_manager.underperforming_group.UnderperformingGroupIssueManager.issue_name"]], "issue_score_key (cleanlab.datalab.internal.issue_manager.underperforming_group.underperforminggroupissuemanager attribute)": [[32, "cleanlab.datalab.internal.issue_manager.underperforming_group.UnderperformingGroupIssueManager.issue_score_key"]], "issues (cleanlab.datalab.internal.issue_manager.underperforming_group.underperforminggroupissuemanager attribute)": [[32, "cleanlab.datalab.internal.issue_manager.underperforming_group.UnderperformingGroupIssueManager.issues"]], "make_summary() (cleanlab.datalab.internal.issue_manager.underperforming_group.underperforminggroupissuemanager class method)": [[32, "cleanlab.datalab.internal.issue_manager.underperforming_group.UnderperformingGroupIssueManager.make_summary"]], "perform_clustering() (cleanlab.datalab.internal.issue_manager.underperforming_group.underperforminggroupissuemanager method)": [[32, "cleanlab.datalab.internal.issue_manager.underperforming_group.UnderperformingGroupIssueManager.perform_clustering"]], "report() (cleanlab.datalab.internal.issue_manager.underperforming_group.underperforminggroupissuemanager class method)": [[32, "cleanlab.datalab.internal.issue_manager.underperforming_group.UnderperformingGroupIssueManager.report"]], "set_knn_graph() (cleanlab.datalab.internal.issue_manager.underperforming_group.underperforminggroupissuemanager method)": [[32, "cleanlab.datalab.internal.issue_manager.underperforming_group.UnderperformingGroupIssueManager.set_knn_graph"]], "summary (cleanlab.datalab.internal.issue_manager.underperforming_group.underperforminggroupissuemanager attribute)": [[32, "cleanlab.datalab.internal.issue_manager.underperforming_group.UnderperformingGroupIssueManager.summary"]], "verbosity_levels (cleanlab.datalab.internal.issue_manager.underperforming_group.underperforminggroupissuemanager attribute)": [[32, "cleanlab.datalab.internal.issue_manager.underperforming_group.UnderperformingGroupIssueManager.verbosity_levels"]], "modeloutput (class in cleanlab.datalab.internal.model_outputs)": [[33, "cleanlab.datalab.internal.model_outputs.ModelOutput"]], "multiclasspredprobs (class in cleanlab.datalab.internal.model_outputs)": [[33, "cleanlab.datalab.internal.model_outputs.MultiClassPredProbs"]], "multilabelpredprobs (class in cleanlab.datalab.internal.model_outputs)": [[33, "cleanlab.datalab.internal.model_outputs.MultiLabelPredProbs"]], "regressionpredictions (class in cleanlab.datalab.internal.model_outputs)": [[33, "cleanlab.datalab.internal.model_outputs.RegressionPredictions"]], "argument (cleanlab.datalab.internal.model_outputs.multiclasspredprobs attribute)": [[33, "cleanlab.datalab.internal.model_outputs.MultiClassPredProbs.argument"]], "argument (cleanlab.datalab.internal.model_outputs.multilabelpredprobs attribute)": [[33, "cleanlab.datalab.internal.model_outputs.MultiLabelPredProbs.argument"]], "argument (cleanlab.datalab.internal.model_outputs.regressionpredictions attribute)": [[33, "cleanlab.datalab.internal.model_outputs.RegressionPredictions.argument"]], "cleanlab.datalab.internal.model_outputs": [[33, "module-cleanlab.datalab.internal.model_outputs"]], "collect() (cleanlab.datalab.internal.model_outputs.modeloutput method)": [[33, "cleanlab.datalab.internal.model_outputs.ModelOutput.collect"]], "collect() (cleanlab.datalab.internal.model_outputs.multiclasspredprobs method)": [[33, "cleanlab.datalab.internal.model_outputs.MultiClassPredProbs.collect"]], "collect() (cleanlab.datalab.internal.model_outputs.multilabelpredprobs method)": [[33, "cleanlab.datalab.internal.model_outputs.MultiLabelPredProbs.collect"]], "collect() (cleanlab.datalab.internal.model_outputs.regressionpredictions method)": [[33, "cleanlab.datalab.internal.model_outputs.RegressionPredictions.collect"]], "data (cleanlab.datalab.internal.model_outputs.modeloutput attribute)": [[33, "cleanlab.datalab.internal.model_outputs.ModelOutput.data"]], "data (cleanlab.datalab.internal.model_outputs.multiclasspredprobs attribute)": [[33, "cleanlab.datalab.internal.model_outputs.MultiClassPredProbs.data"]], "data (cleanlab.datalab.internal.model_outputs.multilabelpredprobs attribute)": [[33, "cleanlab.datalab.internal.model_outputs.MultiLabelPredProbs.data"]], "data (cleanlab.datalab.internal.model_outputs.regressionpredictions attribute)": [[33, "cleanlab.datalab.internal.model_outputs.RegressionPredictions.data"]], "validate() (cleanlab.datalab.internal.model_outputs.modeloutput method)": [[33, "cleanlab.datalab.internal.model_outputs.ModelOutput.validate"]], "validate() (cleanlab.datalab.internal.model_outputs.multiclasspredprobs method)": [[33, "cleanlab.datalab.internal.model_outputs.MultiClassPredProbs.validate"]], "validate() (cleanlab.datalab.internal.model_outputs.multilabelpredprobs method)": [[33, "cleanlab.datalab.internal.model_outputs.MultiLabelPredProbs.validate"]], "validate() (cleanlab.datalab.internal.model_outputs.regressionpredictions method)": [[33, "cleanlab.datalab.internal.model_outputs.RegressionPredictions.validate"]], "reporter (class in cleanlab.datalab.internal.report)": [[34, "cleanlab.datalab.internal.report.Reporter"]], "cleanlab.datalab.internal.report": [[34, "module-cleanlab.datalab.internal.report"]], "get_report() (cleanlab.datalab.internal.report.reporter method)": [[34, "cleanlab.datalab.internal.report.Reporter.get_report"]], "report() (cleanlab.datalab.internal.report.reporter method)": [[34, "cleanlab.datalab.internal.report.Reporter.report"]], "classification (cleanlab.datalab.internal.task.task attribute)": [[35, "cleanlab.datalab.internal.task.Task.CLASSIFICATION"]], "multilabel (cleanlab.datalab.internal.task.task attribute)": [[35, "cleanlab.datalab.internal.task.Task.MULTILABEL"]], "regression (cleanlab.datalab.internal.task.task attribute)": [[35, "cleanlab.datalab.internal.task.Task.REGRESSION"]], "task (class in cleanlab.datalab.internal.task)": [[35, "cleanlab.datalab.internal.task.Task"]], "__contains__() (cleanlab.datalab.internal.task.task class method)": [[35, "cleanlab.datalab.internal.task.Task.__contains__"]], "__getitem__() (cleanlab.datalab.internal.task.task class method)": [[35, "cleanlab.datalab.internal.task.Task.__getitem__"]], "__iter__() (cleanlab.datalab.internal.task.task class method)": [[35, "cleanlab.datalab.internal.task.Task.__iter__"]], "__len__() (cleanlab.datalab.internal.task.task class method)": [[35, "cleanlab.datalab.internal.task.Task.__len__"]], "cleanlab.datalab.internal.task": [[35, "module-cleanlab.datalab.internal.task"]], "from_str() (cleanlab.datalab.internal.task.task class method)": [[35, "cleanlab.datalab.internal.task.Task.from_str"]], "is_classification (cleanlab.datalab.internal.task.task property)": [[35, "cleanlab.datalab.internal.task.Task.is_classification"]], "is_multilabel (cleanlab.datalab.internal.task.task property)": [[35, "cleanlab.datalab.internal.task.Task.is_multilabel"]], "is_regression (cleanlab.datalab.internal.task.task property)": [[35, "cleanlab.datalab.internal.task.Task.is_regression"]], "cleanlab.dataset": [[37, "module-cleanlab.dataset"]], "find_overlapping_classes() (in module cleanlab.dataset)": [[37, "cleanlab.dataset.find_overlapping_classes"]], "health_summary() (in module cleanlab.dataset)": [[37, "cleanlab.dataset.health_summary"]], "overall_label_health_score() (in module cleanlab.dataset)": [[37, "cleanlab.dataset.overall_label_health_score"]], "rank_classes_by_label_quality() (in module cleanlab.dataset)": [[37, "cleanlab.dataset.rank_classes_by_label_quality"]], "cnn (class in cleanlab.experimental.cifar_cnn)": [[38, "cleanlab.experimental.cifar_cnn.CNN"]], "t_destination (cleanlab.experimental.cifar_cnn.cnn attribute)": [[38, "cleanlab.experimental.cifar_cnn.CNN.T_destination"]], "__call__() (cleanlab.experimental.cifar_cnn.cnn method)": [[38, "cleanlab.experimental.cifar_cnn.CNN.__call__"]], "add_module() (cleanlab.experimental.cifar_cnn.cnn method)": [[38, "cleanlab.experimental.cifar_cnn.CNN.add_module"]], "apply() (cleanlab.experimental.cifar_cnn.cnn method)": [[38, "cleanlab.experimental.cifar_cnn.CNN.apply"]], "bfloat16() (cleanlab.experimental.cifar_cnn.cnn method)": [[38, "cleanlab.experimental.cifar_cnn.CNN.bfloat16"]], "buffers() (cleanlab.experimental.cifar_cnn.cnn method)": [[38, "cleanlab.experimental.cifar_cnn.CNN.buffers"]], "call_bn() (in module cleanlab.experimental.cifar_cnn)": [[38, "cleanlab.experimental.cifar_cnn.call_bn"]], "call_super_init (cleanlab.experimental.cifar_cnn.cnn attribute)": [[38, "cleanlab.experimental.cifar_cnn.CNN.call_super_init"]], "children() (cleanlab.experimental.cifar_cnn.cnn method)": [[38, "cleanlab.experimental.cifar_cnn.CNN.children"]], "cleanlab.experimental.cifar_cnn": [[38, "module-cleanlab.experimental.cifar_cnn"]], "compile() (cleanlab.experimental.cifar_cnn.cnn method)": [[38, "cleanlab.experimental.cifar_cnn.CNN.compile"]], "cpu() (cleanlab.experimental.cifar_cnn.cnn method)": [[38, "cleanlab.experimental.cifar_cnn.CNN.cpu"]], "cuda() (cleanlab.experimental.cifar_cnn.cnn method)": [[38, "cleanlab.experimental.cifar_cnn.CNN.cuda"]], "double() (cleanlab.experimental.cifar_cnn.cnn method)": [[38, "cleanlab.experimental.cifar_cnn.CNN.double"]], "dump_patches (cleanlab.experimental.cifar_cnn.cnn attribute)": [[38, "cleanlab.experimental.cifar_cnn.CNN.dump_patches"]], "eval() (cleanlab.experimental.cifar_cnn.cnn method)": [[38, "cleanlab.experimental.cifar_cnn.CNN.eval"]], "extra_repr() (cleanlab.experimental.cifar_cnn.cnn method)": [[38, "cleanlab.experimental.cifar_cnn.CNN.extra_repr"]], "float() (cleanlab.experimental.cifar_cnn.cnn method)": [[38, "cleanlab.experimental.cifar_cnn.CNN.float"]], "forward() (cleanlab.experimental.cifar_cnn.cnn method)": [[38, "cleanlab.experimental.cifar_cnn.CNN.forward"], [38, "id0"]], "get_buffer() (cleanlab.experimental.cifar_cnn.cnn method)": [[38, "cleanlab.experimental.cifar_cnn.CNN.get_buffer"]], "get_extra_state() (cleanlab.experimental.cifar_cnn.cnn method)": [[38, "cleanlab.experimental.cifar_cnn.CNN.get_extra_state"]], "get_parameter() (cleanlab.experimental.cifar_cnn.cnn method)": [[38, "cleanlab.experimental.cifar_cnn.CNN.get_parameter"]], "get_submodule() (cleanlab.experimental.cifar_cnn.cnn method)": [[38, "cleanlab.experimental.cifar_cnn.CNN.get_submodule"]], "half() (cleanlab.experimental.cifar_cnn.cnn method)": [[38, "cleanlab.experimental.cifar_cnn.CNN.half"]], "ipu() (cleanlab.experimental.cifar_cnn.cnn method)": [[38, "cleanlab.experimental.cifar_cnn.CNN.ipu"]], "load_state_dict() (cleanlab.experimental.cifar_cnn.cnn method)": [[38, "cleanlab.experimental.cifar_cnn.CNN.load_state_dict"]], "modules() (cleanlab.experimental.cifar_cnn.cnn method)": [[38, "cleanlab.experimental.cifar_cnn.CNN.modules"]], "named_buffers() (cleanlab.experimental.cifar_cnn.cnn method)": [[38, "cleanlab.experimental.cifar_cnn.CNN.named_buffers"]], "named_children() (cleanlab.experimental.cifar_cnn.cnn method)": [[38, "cleanlab.experimental.cifar_cnn.CNN.named_children"]], "named_modules() (cleanlab.experimental.cifar_cnn.cnn method)": [[38, "cleanlab.experimental.cifar_cnn.CNN.named_modules"]], "named_parameters() (cleanlab.experimental.cifar_cnn.cnn method)": [[38, "cleanlab.experimental.cifar_cnn.CNN.named_parameters"]], "parameters() (cleanlab.experimental.cifar_cnn.cnn method)": [[38, "cleanlab.experimental.cifar_cnn.CNN.parameters"]], "register_backward_hook() (cleanlab.experimental.cifar_cnn.cnn method)": [[38, "cleanlab.experimental.cifar_cnn.CNN.register_backward_hook"]], "register_buffer() (cleanlab.experimental.cifar_cnn.cnn method)": [[38, "cleanlab.experimental.cifar_cnn.CNN.register_buffer"]], "register_forward_hook() (cleanlab.experimental.cifar_cnn.cnn method)": [[38, "cleanlab.experimental.cifar_cnn.CNN.register_forward_hook"]], "register_forward_pre_hook() (cleanlab.experimental.cifar_cnn.cnn method)": [[38, "cleanlab.experimental.cifar_cnn.CNN.register_forward_pre_hook"]], "register_full_backward_hook() (cleanlab.experimental.cifar_cnn.cnn method)": [[38, "cleanlab.experimental.cifar_cnn.CNN.register_full_backward_hook"]], "register_full_backward_pre_hook() (cleanlab.experimental.cifar_cnn.cnn method)": [[38, "cleanlab.experimental.cifar_cnn.CNN.register_full_backward_pre_hook"]], "register_load_state_dict_post_hook() (cleanlab.experimental.cifar_cnn.cnn method)": [[38, "cleanlab.experimental.cifar_cnn.CNN.register_load_state_dict_post_hook"]], "register_module() (cleanlab.experimental.cifar_cnn.cnn method)": [[38, "cleanlab.experimental.cifar_cnn.CNN.register_module"]], "register_parameter() (cleanlab.experimental.cifar_cnn.cnn method)": [[38, "cleanlab.experimental.cifar_cnn.CNN.register_parameter"]], "register_state_dict_pre_hook() (cleanlab.experimental.cifar_cnn.cnn method)": [[38, "cleanlab.experimental.cifar_cnn.CNN.register_state_dict_pre_hook"]], "requires_grad_() (cleanlab.experimental.cifar_cnn.cnn method)": [[38, "cleanlab.experimental.cifar_cnn.CNN.requires_grad_"]], "set_extra_state() (cleanlab.experimental.cifar_cnn.cnn method)": [[38, "cleanlab.experimental.cifar_cnn.CNN.set_extra_state"]], "share_memory() (cleanlab.experimental.cifar_cnn.cnn method)": [[38, "cleanlab.experimental.cifar_cnn.CNN.share_memory"]], "state_dict() (cleanlab.experimental.cifar_cnn.cnn method)": [[38, "cleanlab.experimental.cifar_cnn.CNN.state_dict"]], "to() (cleanlab.experimental.cifar_cnn.cnn method)": [[38, "cleanlab.experimental.cifar_cnn.CNN.to"]], "to_empty() (cleanlab.experimental.cifar_cnn.cnn method)": [[38, "cleanlab.experimental.cifar_cnn.CNN.to_empty"]], "train() (cleanlab.experimental.cifar_cnn.cnn method)": [[38, "cleanlab.experimental.cifar_cnn.CNN.train"]], "training (cleanlab.experimental.cifar_cnn.cnn attribute)": [[38, "cleanlab.experimental.cifar_cnn.CNN.training"]], "type() (cleanlab.experimental.cifar_cnn.cnn method)": [[38, "cleanlab.experimental.cifar_cnn.CNN.type"]], "xpu() (cleanlab.experimental.cifar_cnn.cnn method)": [[38, "cleanlab.experimental.cifar_cnn.CNN.xpu"]], "zero_grad() (cleanlab.experimental.cifar_cnn.cnn method)": [[38, "cleanlab.experimental.cifar_cnn.CNN.zero_grad"]], "adjust_learning_rate() (in module cleanlab.experimental.coteaching)": [[39, "cleanlab.experimental.coteaching.adjust_learning_rate"]], "cleanlab.experimental.coteaching": [[39, "module-cleanlab.experimental.coteaching"]], "evaluate() (in module cleanlab.experimental.coteaching)": [[39, "cleanlab.experimental.coteaching.evaluate"]], "forget_rate_scheduler() (in module cleanlab.experimental.coteaching)": [[39, "cleanlab.experimental.coteaching.forget_rate_scheduler"]], "initialize_lr_scheduler() (in module cleanlab.experimental.coteaching)": [[39, "cleanlab.experimental.coteaching.initialize_lr_scheduler"]], "loss_coteaching() (in module cleanlab.experimental.coteaching)": [[39, "cleanlab.experimental.coteaching.loss_coteaching"]], "train() (in module cleanlab.experimental.coteaching)": [[39, "cleanlab.experimental.coteaching.train"]], "cleanlab.experimental": [[40, "module-cleanlab.experimental"]], "labelinspector (class in cleanlab.experimental.label_issues_batched)": [[41, "cleanlab.experimental.label_issues_batched.LabelInspector"]], "adj_confident_thresholds_shared (in module cleanlab.experimental.label_issues_batched)": [[41, "cleanlab.experimental.label_issues_batched.adj_confident_thresholds_shared"]], "cleanlab.experimental.label_issues_batched": [[41, "module-cleanlab.experimental.label_issues_batched"]], "find_label_issues_batched() (in module cleanlab.experimental.label_issues_batched)": [[41, "cleanlab.experimental.label_issues_batched.find_label_issues_batched"]], "get_confident_thresholds() (cleanlab.experimental.label_issues_batched.labelinspector method)": [[41, "cleanlab.experimental.label_issues_batched.LabelInspector.get_confident_thresholds"]], "get_label_issues() (cleanlab.experimental.label_issues_batched.labelinspector method)": [[41, "cleanlab.experimental.label_issues_batched.LabelInspector.get_label_issues"]], "get_num_issues() (cleanlab.experimental.label_issues_batched.labelinspector method)": [[41, "cleanlab.experimental.label_issues_batched.LabelInspector.get_num_issues"]], "get_quality_scores() (cleanlab.experimental.label_issues_batched.labelinspector method)": [[41, "cleanlab.experimental.label_issues_batched.LabelInspector.get_quality_scores"]], "labels_shared (in module cleanlab.experimental.label_issues_batched)": [[41, "cleanlab.experimental.label_issues_batched.labels_shared"]], "pred_probs_shared (in module cleanlab.experimental.label_issues_batched)": [[41, "cleanlab.experimental.label_issues_batched.pred_probs_shared"]], "score_label_quality() (cleanlab.experimental.label_issues_batched.labelinspector method)": [[41, "cleanlab.experimental.label_issues_batched.LabelInspector.score_label_quality"]], "split_arr() (in module cleanlab.experimental.label_issues_batched)": [[41, "cleanlab.experimental.label_issues_batched.split_arr"]], "update_confident_thresholds() (cleanlab.experimental.label_issues_batched.labelinspector method)": [[41, "cleanlab.experimental.label_issues_batched.LabelInspector.update_confident_thresholds"]], "cnn (class in cleanlab.experimental.mnist_pytorch)": [[42, "cleanlab.experimental.mnist_pytorch.CNN"]], "simplenet (class in cleanlab.experimental.mnist_pytorch)": [[42, "cleanlab.experimental.mnist_pytorch.SimpleNet"]], "t_destination (cleanlab.experimental.mnist_pytorch.simplenet attribute)": [[42, "cleanlab.experimental.mnist_pytorch.SimpleNet.T_destination"]], "__call__() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[42, "cleanlab.experimental.mnist_pytorch.SimpleNet.__call__"]], "__init_subclass__() (cleanlab.experimental.mnist_pytorch.cnn class method)": [[42, "cleanlab.experimental.mnist_pytorch.CNN.__init_subclass__"]], "add_module() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[42, "cleanlab.experimental.mnist_pytorch.SimpleNet.add_module"]], "apply() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[42, "cleanlab.experimental.mnist_pytorch.SimpleNet.apply"]], "batch_size (cleanlab.experimental.mnist_pytorch.cnn attribute)": [[42, "cleanlab.experimental.mnist_pytorch.CNN.batch_size"]], "bfloat16() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[42, "cleanlab.experimental.mnist_pytorch.SimpleNet.bfloat16"]], "buffers() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[42, "cleanlab.experimental.mnist_pytorch.SimpleNet.buffers"]], "call_super_init (cleanlab.experimental.mnist_pytorch.simplenet attribute)": [[42, "cleanlab.experimental.mnist_pytorch.SimpleNet.call_super_init"]], "children() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[42, "cleanlab.experimental.mnist_pytorch.SimpleNet.children"]], "cleanlab.experimental.mnist_pytorch": [[42, "module-cleanlab.experimental.mnist_pytorch"]], "compile() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[42, "cleanlab.experimental.mnist_pytorch.SimpleNet.compile"]], "cpu() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[42, "cleanlab.experimental.mnist_pytorch.SimpleNet.cpu"]], "cuda() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[42, "cleanlab.experimental.mnist_pytorch.SimpleNet.cuda"]], "dataset (cleanlab.experimental.mnist_pytorch.cnn attribute)": [[42, "cleanlab.experimental.mnist_pytorch.CNN.dataset"]], "double() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[42, "cleanlab.experimental.mnist_pytorch.SimpleNet.double"]], "dump_patches (cleanlab.experimental.mnist_pytorch.simplenet attribute)": [[42, "cleanlab.experimental.mnist_pytorch.SimpleNet.dump_patches"]], "epochs (cleanlab.experimental.mnist_pytorch.cnn attribute)": [[42, "cleanlab.experimental.mnist_pytorch.CNN.epochs"]], "eval() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[42, "cleanlab.experimental.mnist_pytorch.SimpleNet.eval"]], "extra_repr() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[42, "cleanlab.experimental.mnist_pytorch.SimpleNet.extra_repr"]], "fit() (cleanlab.experimental.mnist_pytorch.cnn method)": [[42, "cleanlab.experimental.mnist_pytorch.CNN.fit"], [42, "id0"]], "float() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[42, "cleanlab.experimental.mnist_pytorch.SimpleNet.float"]], "forward() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[42, "cleanlab.experimental.mnist_pytorch.SimpleNet.forward"]], "get_buffer() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[42, "cleanlab.experimental.mnist_pytorch.SimpleNet.get_buffer"]], "get_extra_state() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[42, "cleanlab.experimental.mnist_pytorch.SimpleNet.get_extra_state"]], "get_metadata_routing() (cleanlab.experimental.mnist_pytorch.cnn method)": [[42, "cleanlab.experimental.mnist_pytorch.CNN.get_metadata_routing"]], "get_mnist_dataset() (in module cleanlab.experimental.mnist_pytorch)": [[42, "cleanlab.experimental.mnist_pytorch.get_mnist_dataset"]], "get_parameter() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[42, "cleanlab.experimental.mnist_pytorch.SimpleNet.get_parameter"]], "get_params() (cleanlab.experimental.mnist_pytorch.cnn method)": [[42, "cleanlab.experimental.mnist_pytorch.CNN.get_params"]], "get_sklearn_digits_dataset() (in module cleanlab.experimental.mnist_pytorch)": [[42, "cleanlab.experimental.mnist_pytorch.get_sklearn_digits_dataset"]], "get_submodule() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[42, "cleanlab.experimental.mnist_pytorch.SimpleNet.get_submodule"]], "half() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[42, "cleanlab.experimental.mnist_pytorch.SimpleNet.half"]], "ipu() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[42, "cleanlab.experimental.mnist_pytorch.SimpleNet.ipu"]], "load_state_dict() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[42, "cleanlab.experimental.mnist_pytorch.SimpleNet.load_state_dict"]], "loader (cleanlab.experimental.mnist_pytorch.cnn attribute)": [[42, "cleanlab.experimental.mnist_pytorch.CNN.loader"]], "log_interval (cleanlab.experimental.mnist_pytorch.cnn attribute)": [[42, "cleanlab.experimental.mnist_pytorch.CNN.log_interval"]], "lr (cleanlab.experimental.mnist_pytorch.cnn attribute)": [[42, "cleanlab.experimental.mnist_pytorch.CNN.lr"]], "modules() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[42, "cleanlab.experimental.mnist_pytorch.SimpleNet.modules"]], "momentum (cleanlab.experimental.mnist_pytorch.cnn attribute)": [[42, "cleanlab.experimental.mnist_pytorch.CNN.momentum"]], "named_buffers() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[42, "cleanlab.experimental.mnist_pytorch.SimpleNet.named_buffers"]], "named_children() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[42, "cleanlab.experimental.mnist_pytorch.SimpleNet.named_children"]], "named_modules() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[42, "cleanlab.experimental.mnist_pytorch.SimpleNet.named_modules"]], "named_parameters() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[42, "cleanlab.experimental.mnist_pytorch.SimpleNet.named_parameters"]], "no_cuda (cleanlab.experimental.mnist_pytorch.cnn attribute)": [[42, "cleanlab.experimental.mnist_pytorch.CNN.no_cuda"]], "parameters() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[42, "cleanlab.experimental.mnist_pytorch.SimpleNet.parameters"]], "predict() (cleanlab.experimental.mnist_pytorch.cnn method)": [[42, "cleanlab.experimental.mnist_pytorch.CNN.predict"], [42, "id1"]], "predict_proba() (cleanlab.experimental.mnist_pytorch.cnn method)": [[42, "cleanlab.experimental.mnist_pytorch.CNN.predict_proba"], [42, "id4"]], "register_backward_hook() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[42, "cleanlab.experimental.mnist_pytorch.SimpleNet.register_backward_hook"]], "register_buffer() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[42, "cleanlab.experimental.mnist_pytorch.SimpleNet.register_buffer"]], "register_forward_hook() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[42, "cleanlab.experimental.mnist_pytorch.SimpleNet.register_forward_hook"]], "register_forward_pre_hook() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[42, "cleanlab.experimental.mnist_pytorch.SimpleNet.register_forward_pre_hook"]], "register_full_backward_hook() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[42, "cleanlab.experimental.mnist_pytorch.SimpleNet.register_full_backward_hook"]], "register_full_backward_pre_hook() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[42, "cleanlab.experimental.mnist_pytorch.SimpleNet.register_full_backward_pre_hook"]], "register_load_state_dict_post_hook() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[42, "cleanlab.experimental.mnist_pytorch.SimpleNet.register_load_state_dict_post_hook"]], "register_module() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[42, "cleanlab.experimental.mnist_pytorch.SimpleNet.register_module"]], "register_parameter() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[42, "cleanlab.experimental.mnist_pytorch.SimpleNet.register_parameter"]], "register_state_dict_pre_hook() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[42, "cleanlab.experimental.mnist_pytorch.SimpleNet.register_state_dict_pre_hook"]], "requires_grad_() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[42, "cleanlab.experimental.mnist_pytorch.SimpleNet.requires_grad_"]], "seed (cleanlab.experimental.mnist_pytorch.cnn attribute)": [[42, "cleanlab.experimental.mnist_pytorch.CNN.seed"]], "set_extra_state() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[42, "cleanlab.experimental.mnist_pytorch.SimpleNet.set_extra_state"]], "set_fit_request() (cleanlab.experimental.mnist_pytorch.cnn method)": [[42, "cleanlab.experimental.mnist_pytorch.CNN.set_fit_request"]], "set_params() (cleanlab.experimental.mnist_pytorch.cnn method)": [[42, "cleanlab.experimental.mnist_pytorch.CNN.set_params"]], "set_predict_proba_request() (cleanlab.experimental.mnist_pytorch.cnn method)": [[42, "cleanlab.experimental.mnist_pytorch.CNN.set_predict_proba_request"]], "set_predict_request() (cleanlab.experimental.mnist_pytorch.cnn method)": [[42, "cleanlab.experimental.mnist_pytorch.CNN.set_predict_request"]], "share_memory() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[42, "cleanlab.experimental.mnist_pytorch.SimpleNet.share_memory"]], "state_dict() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[42, "cleanlab.experimental.mnist_pytorch.SimpleNet.state_dict"]], "test_batch_size (cleanlab.experimental.mnist_pytorch.cnn attribute)": [[42, "cleanlab.experimental.mnist_pytorch.CNN.test_batch_size"]], "to() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[42, "cleanlab.experimental.mnist_pytorch.SimpleNet.to"]], "to_empty() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[42, "cleanlab.experimental.mnist_pytorch.SimpleNet.to_empty"]], "train() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[42, "cleanlab.experimental.mnist_pytorch.SimpleNet.train"]], "training (cleanlab.experimental.mnist_pytorch.simplenet attribute)": [[42, "cleanlab.experimental.mnist_pytorch.SimpleNet.training"]], "type() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[42, "cleanlab.experimental.mnist_pytorch.SimpleNet.type"]], "xpu() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[42, "cleanlab.experimental.mnist_pytorch.SimpleNet.xpu"]], "zero_grad() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[42, "cleanlab.experimental.mnist_pytorch.SimpleNet.zero_grad"]], "cleanlab.experimental.span_classification": [[43, "module-cleanlab.experimental.span_classification"]], "display_issues() (in module cleanlab.experimental.span_classification)": [[43, "cleanlab.experimental.span_classification.display_issues"]], "find_label_issues() (in module cleanlab.experimental.span_classification)": [[43, "cleanlab.experimental.span_classification.find_label_issues"]], "get_label_quality_scores() (in module cleanlab.experimental.span_classification)": [[43, "cleanlab.experimental.span_classification.get_label_quality_scores"]], "cleanlab.filter": [[44, "module-cleanlab.filter"]], "find_label_issues() (in module cleanlab.filter)": [[44, "cleanlab.filter.find_label_issues"]], "find_label_issues_using_argmax_confusion_matrix() (in module cleanlab.filter)": [[44, "cleanlab.filter.find_label_issues_using_argmax_confusion_matrix"]], "find_predicted_neq_given() (in module cleanlab.filter)": [[44, "cleanlab.filter.find_predicted_neq_given"]], "pred_probs_by_class (in module cleanlab.filter)": [[44, "cleanlab.filter.pred_probs_by_class"]], "prune_count_matrix_cols (in module cleanlab.filter)": [[44, "cleanlab.filter.prune_count_matrix_cols"]], "cleanlab.internal": [[45, "module-cleanlab.internal"]], "cleanlab.internal.label_quality_utils": [[46, "module-cleanlab.internal.label_quality_utils"]], "get_normalized_entropy() (in module cleanlab.internal.label_quality_utils)": [[46, "cleanlab.internal.label_quality_utils.get_normalized_entropy"]], "cleanlab.internal.latent_algebra": [[47, "module-cleanlab.internal.latent_algebra"]], "compute_inv_noise_matrix() (in module cleanlab.internal.latent_algebra)": [[47, "cleanlab.internal.latent_algebra.compute_inv_noise_matrix"]], "compute_noise_matrix_from_inverse() (in module cleanlab.internal.latent_algebra)": [[47, "cleanlab.internal.latent_algebra.compute_noise_matrix_from_inverse"]], "compute_ps_py_inv_noise_matrix() (in module cleanlab.internal.latent_algebra)": [[47, "cleanlab.internal.latent_algebra.compute_ps_py_inv_noise_matrix"]], "compute_py() (in module cleanlab.internal.latent_algebra)": [[47, "cleanlab.internal.latent_algebra.compute_py"]], "compute_py_inv_noise_matrix() (in module cleanlab.internal.latent_algebra)": [[47, "cleanlab.internal.latent_algebra.compute_py_inv_noise_matrix"]], "compute_pyx() (in module cleanlab.internal.latent_algebra)": [[47, "cleanlab.internal.latent_algebra.compute_pyx"]], "assert_valid_inputs_multiannotator() (in module cleanlab.internal.multiannotator_utils)": [[48, "cleanlab.internal.multiannotator_utils.assert_valid_inputs_multiannotator"]], "assert_valid_pred_probs() (in module cleanlab.internal.multiannotator_utils)": [[48, "cleanlab.internal.multiannotator_utils.assert_valid_pred_probs"]], "check_consensus_label_classes() (in module cleanlab.internal.multiannotator_utils)": [[48, "cleanlab.internal.multiannotator_utils.check_consensus_label_classes"]], "cleanlab.internal.multiannotator_utils": [[48, "module-cleanlab.internal.multiannotator_utils"]], "compute_soft_cross_entropy() (in module cleanlab.internal.multiannotator_utils)": [[48, "cleanlab.internal.multiannotator_utils.compute_soft_cross_entropy"]], "find_best_temp_scaler() (in module cleanlab.internal.multiannotator_utils)": [[48, "cleanlab.internal.multiannotator_utils.find_best_temp_scaler"]], "format_multiannotator_labels() (in module cleanlab.internal.multiannotator_utils)": [[48, "cleanlab.internal.multiannotator_utils.format_multiannotator_labels"]], "temp_scale_pred_probs() (in module cleanlab.internal.multiannotator_utils)": [[48, "cleanlab.internal.multiannotator_utils.temp_scale_pred_probs"]], "aggregator (class in cleanlab.internal.multilabel_scorer)": [[49, "cleanlab.internal.multilabel_scorer.Aggregator"]], "confidence_weighted_entropy (cleanlab.internal.multilabel_scorer.classlabelscorer attribute)": [[49, "cleanlab.internal.multilabel_scorer.ClassLabelScorer.CONFIDENCE_WEIGHTED_ENTROPY"]], "classlabelscorer (class in cleanlab.internal.multilabel_scorer)": [[49, "cleanlab.internal.multilabel_scorer.ClassLabelScorer"]], "multilabelscorer (class in cleanlab.internal.multilabel_scorer)": [[49, "cleanlab.internal.multilabel_scorer.MultilabelScorer"]], "normalized_margin (cleanlab.internal.multilabel_scorer.classlabelscorer attribute)": [[49, "cleanlab.internal.multilabel_scorer.ClassLabelScorer.NORMALIZED_MARGIN"]], "self_confidence (cleanlab.internal.multilabel_scorer.classlabelscorer attribute)": [[49, "cleanlab.internal.multilabel_scorer.ClassLabelScorer.SELF_CONFIDENCE"]], "__call__() (cleanlab.internal.multilabel_scorer.aggregator method)": [[49, "cleanlab.internal.multilabel_scorer.Aggregator.__call__"]], "__call__() (cleanlab.internal.multilabel_scorer.classlabelscorer method)": [[49, "cleanlab.internal.multilabel_scorer.ClassLabelScorer.__call__"]], "__call__() (cleanlab.internal.multilabel_scorer.multilabelscorer method)": [[49, "cleanlab.internal.multilabel_scorer.MultilabelScorer.__call__"]], "__contains__() (cleanlab.internal.multilabel_scorer.classlabelscorer class method)": [[49, "cleanlab.internal.multilabel_scorer.ClassLabelScorer.__contains__"]], "__getitem__() (cleanlab.internal.multilabel_scorer.classlabelscorer class method)": [[49, "cleanlab.internal.multilabel_scorer.ClassLabelScorer.__getitem__"]], "__iter__() (cleanlab.internal.multilabel_scorer.classlabelscorer class method)": [[49, "cleanlab.internal.multilabel_scorer.ClassLabelScorer.__iter__"]], "__len__() (cleanlab.internal.multilabel_scorer.classlabelscorer class method)": [[49, "cleanlab.internal.multilabel_scorer.ClassLabelScorer.__len__"]], "aggregate() (cleanlab.internal.multilabel_scorer.multilabelscorer method)": [[49, "cleanlab.internal.multilabel_scorer.MultilabelScorer.aggregate"]], "cleanlab.internal.multilabel_scorer": [[49, "module-cleanlab.internal.multilabel_scorer"]], "exponential_moving_average() (in module cleanlab.internal.multilabel_scorer)": [[49, "cleanlab.internal.multilabel_scorer.exponential_moving_average"]], "from_str() (cleanlab.internal.multilabel_scorer.classlabelscorer class method)": [[49, "cleanlab.internal.multilabel_scorer.ClassLabelScorer.from_str"]], "get_class_label_quality_scores() (cleanlab.internal.multilabel_scorer.multilabelscorer method)": [[49, "cleanlab.internal.multilabel_scorer.MultilabelScorer.get_class_label_quality_scores"]], "get_cross_validated_multilabel_pred_probs() (in module cleanlab.internal.multilabel_scorer)": [[49, "cleanlab.internal.multilabel_scorer.get_cross_validated_multilabel_pred_probs"]], "get_label_quality_scores() (in module cleanlab.internal.multilabel_scorer)": [[49, "cleanlab.internal.multilabel_scorer.get_label_quality_scores"]], "multilabel_py() (in module cleanlab.internal.multilabel_scorer)": [[49, "cleanlab.internal.multilabel_scorer.multilabel_py"]], "possible_methods (cleanlab.internal.multilabel_scorer.aggregator attribute)": [[49, "cleanlab.internal.multilabel_scorer.Aggregator.possible_methods"]], "softmin() (in module cleanlab.internal.multilabel_scorer)": [[49, "cleanlab.internal.multilabel_scorer.softmin"]], "cleanlab.internal.multilabel_utils": [[50, "module-cleanlab.internal.multilabel_utils"]], "get_onehot_num_classes() (in module cleanlab.internal.multilabel_utils)": [[50, "cleanlab.internal.multilabel_utils.get_onehot_num_classes"]], "int2onehot() (in module cleanlab.internal.multilabel_utils)": [[50, "cleanlab.internal.multilabel_utils.int2onehot"]], "onehot2int() (in module cleanlab.internal.multilabel_utils)": [[50, "cleanlab.internal.multilabel_utils.onehot2int"]], "stack_complement() (in module cleanlab.internal.multilabel_utils)": [[50, "cleanlab.internal.multilabel_utils.stack_complement"]], "cleanlab.internal.neighbor": [[51, "module-cleanlab.internal.neighbor"]], "default_k (in module cleanlab.internal.neighbor.knn_graph)": [[52, "cleanlab.internal.neighbor.knn_graph.DEFAULT_K"]], "cleanlab.internal.neighbor.knn_graph": [[52, "module-cleanlab.internal.neighbor.knn_graph"]], "construct_knn_graph_from_index() (in module cleanlab.internal.neighbor.knn_graph)": [[52, "cleanlab.internal.neighbor.knn_graph.construct_knn_graph_from_index"]], "correct_knn_distances_and_indices() (in module cleanlab.internal.neighbor.knn_graph)": [[52, "cleanlab.internal.neighbor.knn_graph.correct_knn_distances_and_indices"]], "correct_knn_distances_and_indices_with_exact_duplicate_sets_inplace() (in module cleanlab.internal.neighbor.knn_graph)": [[52, "cleanlab.internal.neighbor.knn_graph.correct_knn_distances_and_indices_with_exact_duplicate_sets_inplace"]], "correct_knn_graph() (in module cleanlab.internal.neighbor.knn_graph)": [[52, "cleanlab.internal.neighbor.knn_graph.correct_knn_graph"]], "create_knn_graph_and_index() (in module cleanlab.internal.neighbor.knn_graph)": [[52, "cleanlab.internal.neighbor.knn_graph.create_knn_graph_and_index"]], "features_to_knn() (in module cleanlab.internal.neighbor.knn_graph)": [[52, "cleanlab.internal.neighbor.knn_graph.features_to_knn"]], "high_dimension_cutoff (in module cleanlab.internal.neighbor.metric)": [[53, "cleanlab.internal.neighbor.metric.HIGH_DIMENSION_CUTOFF"]], "row_count_cutoff (in module cleanlab.internal.neighbor.metric)": [[53, "cleanlab.internal.neighbor.metric.ROW_COUNT_CUTOFF"]], "cleanlab.internal.neighbor.metric": [[53, "module-cleanlab.internal.neighbor.metric"]], "decide_default_metric() (in module cleanlab.internal.neighbor.metric)": [[53, "cleanlab.internal.neighbor.metric.decide_default_metric"]], "decide_euclidean_metric() (in module cleanlab.internal.neighbor.metric)": [[53, "cleanlab.internal.neighbor.metric.decide_euclidean_metric"]], "cleanlab.internal.neighbor.search": [[54, "module-cleanlab.internal.neighbor.search"]], "construct_knn() (in module cleanlab.internal.neighbor.search)": [[54, "cleanlab.internal.neighbor.search.construct_knn"]], "cleanlab.internal.outlier": [[55, "module-cleanlab.internal.outlier"]], "correct_precision_errors() (in module cleanlab.internal.outlier)": [[55, "cleanlab.internal.outlier.correct_precision_errors"]], "transform_distances_to_scores() (in module cleanlab.internal.outlier)": [[55, "cleanlab.internal.outlier.transform_distances_to_scores"]], "cleanlab.internal.token_classification_utils": [[56, "module-cleanlab.internal.token_classification_utils"]], "color_sentence() (in module cleanlab.internal.token_classification_utils)": [[56, "cleanlab.internal.token_classification_utils.color_sentence"]], "filter_sentence() (in module cleanlab.internal.token_classification_utils)": [[56, "cleanlab.internal.token_classification_utils.filter_sentence"]], "get_sentence() (in module cleanlab.internal.token_classification_utils)": [[56, "cleanlab.internal.token_classification_utils.get_sentence"]], "mapping() (in module cleanlab.internal.token_classification_utils)": [[56, "cleanlab.internal.token_classification_utils.mapping"]], "merge_probs() (in module cleanlab.internal.token_classification_utils)": [[56, "cleanlab.internal.token_classification_utils.merge_probs"]], "process_token() (in module cleanlab.internal.token_classification_utils)": [[56, "cleanlab.internal.token_classification_utils.process_token"]], "append_extra_datapoint() (in module cleanlab.internal.util)": [[57, "cleanlab.internal.util.append_extra_datapoint"]], "cleanlab.internal.util": [[57, "module-cleanlab.internal.util"]], "clip_noise_rates() (in module cleanlab.internal.util)": [[57, "cleanlab.internal.util.clip_noise_rates"]], "clip_values() (in module cleanlab.internal.util)": [[57, "cleanlab.internal.util.clip_values"]], "compress_int_array() (in module cleanlab.internal.util)": [[57, "cleanlab.internal.util.compress_int_array"]], "confusion_matrix() (in module cleanlab.internal.util)": [[57, "cleanlab.internal.util.confusion_matrix"]], "csr_vstack() (in module cleanlab.internal.util)": [[57, "cleanlab.internal.util.csr_vstack"]], "estimate_pu_f1() (in module cleanlab.internal.util)": [[57, "cleanlab.internal.util.estimate_pu_f1"]], "extract_indices_tf() (in module cleanlab.internal.util)": [[57, "cleanlab.internal.util.extract_indices_tf"]], "force_two_dimensions() (in module cleanlab.internal.util)": [[57, "cleanlab.internal.util.force_two_dimensions"]], "format_labels() (in module cleanlab.internal.util)": [[57, "cleanlab.internal.util.format_labels"]], "get_missing_classes() (in module cleanlab.internal.util)": [[57, "cleanlab.internal.util.get_missing_classes"]], "get_num_classes() (in module cleanlab.internal.util)": [[57, "cleanlab.internal.util.get_num_classes"]], "get_unique_classes() (in module cleanlab.internal.util)": [[57, "cleanlab.internal.util.get_unique_classes"]], "is_tensorflow_dataset() (in module cleanlab.internal.util)": [[57, "cleanlab.internal.util.is_tensorflow_dataset"]], "is_torch_dataset() (in module cleanlab.internal.util)": [[57, "cleanlab.internal.util.is_torch_dataset"]], "num_unique_classes() (in module cleanlab.internal.util)": [[57, "cleanlab.internal.util.num_unique_classes"]], "print_inverse_noise_matrix() (in module cleanlab.internal.util)": [[57, "cleanlab.internal.util.print_inverse_noise_matrix"]], "print_joint_matrix() (in module cleanlab.internal.util)": [[57, "cleanlab.internal.util.print_joint_matrix"]], "print_noise_matrix() (in module cleanlab.internal.util)": [[57, "cleanlab.internal.util.print_noise_matrix"]], "print_square_matrix() (in module cleanlab.internal.util)": [[57, "cleanlab.internal.util.print_square_matrix"]], "remove_noise_from_class() (in module cleanlab.internal.util)": [[57, "cleanlab.internal.util.remove_noise_from_class"]], "round_preserving_row_totals() (in module cleanlab.internal.util)": [[57, "cleanlab.internal.util.round_preserving_row_totals"]], "round_preserving_sum() (in module cleanlab.internal.util)": [[57, "cleanlab.internal.util.round_preserving_sum"]], "smart_display_dataframe() (in module cleanlab.internal.util)": [[57, "cleanlab.internal.util.smart_display_dataframe"]], "subset_x_y() (in module cleanlab.internal.util)": [[57, "cleanlab.internal.util.subset_X_y"]], "subset_data() (in module cleanlab.internal.util)": [[57, "cleanlab.internal.util.subset_data"]], "subset_labels() (in module cleanlab.internal.util)": [[57, "cleanlab.internal.util.subset_labels"]], "train_val_split() (in module cleanlab.internal.util)": [[57, "cleanlab.internal.util.train_val_split"]], "unshuffle_tensorflow_dataset() (in module cleanlab.internal.util)": [[57, "cleanlab.internal.util.unshuffle_tensorflow_dataset"]], "value_counts() (in module cleanlab.internal.util)": [[57, "cleanlab.internal.util.value_counts"]], "value_counts_fill_missing_classes() (in module cleanlab.internal.util)": [[57, "cleanlab.internal.util.value_counts_fill_missing_classes"]], "assert_indexing_works() (in module cleanlab.internal.validation)": [[58, "cleanlab.internal.validation.assert_indexing_works"]], "assert_nonempty_input() (in module cleanlab.internal.validation)": [[58, "cleanlab.internal.validation.assert_nonempty_input"]], "assert_valid_class_labels() (in module cleanlab.internal.validation)": [[58, "cleanlab.internal.validation.assert_valid_class_labels"]], "assert_valid_inputs() (in module cleanlab.internal.validation)": [[58, "cleanlab.internal.validation.assert_valid_inputs"]], "cleanlab.internal.validation": [[58, "module-cleanlab.internal.validation"]], "labels_to_array() (in module cleanlab.internal.validation)": [[58, "cleanlab.internal.validation.labels_to_array"]], "labels_to_list_multilabel() (in module cleanlab.internal.validation)": [[58, "cleanlab.internal.validation.labels_to_list_multilabel"]], "cleanlab.models": [[60, "module-cleanlab.models"]], "keraswrappermodel (class in cleanlab.models.keras)": [[61, "cleanlab.models.keras.KerasWrapperModel"]], "keraswrappersequential (class in cleanlab.models.keras)": [[61, "cleanlab.models.keras.KerasWrapperSequential"]], "cleanlab.models.keras": [[61, "module-cleanlab.models.keras"]], "fit() (cleanlab.models.keras.keraswrappermodel method)": [[61, "cleanlab.models.keras.KerasWrapperModel.fit"]], "fit() (cleanlab.models.keras.keraswrappersequential method)": [[61, "cleanlab.models.keras.KerasWrapperSequential.fit"]], "get_params() (cleanlab.models.keras.keraswrappermodel method)": [[61, "cleanlab.models.keras.KerasWrapperModel.get_params"]], "get_params() (cleanlab.models.keras.keraswrappersequential method)": [[61, "cleanlab.models.keras.KerasWrapperSequential.get_params"]], "predict() (cleanlab.models.keras.keraswrappermodel method)": [[61, "cleanlab.models.keras.KerasWrapperModel.predict"]], "predict() (cleanlab.models.keras.keraswrappersequential method)": [[61, "cleanlab.models.keras.KerasWrapperSequential.predict"]], "predict_proba() (cleanlab.models.keras.keraswrappermodel method)": [[61, "cleanlab.models.keras.KerasWrapperModel.predict_proba"]], "predict_proba() (cleanlab.models.keras.keraswrappersequential method)": [[61, "cleanlab.models.keras.KerasWrapperSequential.predict_proba"]], "set_params() (cleanlab.models.keras.keraswrappermodel method)": [[61, "cleanlab.models.keras.KerasWrapperModel.set_params"]], "set_params() (cleanlab.models.keras.keraswrappersequential method)": [[61, "cleanlab.models.keras.KerasWrapperSequential.set_params"]], "summary() (cleanlab.models.keras.keraswrappermodel method)": [[61, "cleanlab.models.keras.KerasWrapperModel.summary"]], "summary() (cleanlab.models.keras.keraswrappersequential method)": [[61, "cleanlab.models.keras.KerasWrapperSequential.summary"]], "cleanlab.multiannotator": [[62, "module-cleanlab.multiannotator"]], "convert_long_to_wide_dataset() (in module cleanlab.multiannotator)": [[62, "cleanlab.multiannotator.convert_long_to_wide_dataset"]], "get_active_learning_scores() (in module cleanlab.multiannotator)": [[62, "cleanlab.multiannotator.get_active_learning_scores"]], "get_active_learning_scores_ensemble() (in module cleanlab.multiannotator)": [[62, "cleanlab.multiannotator.get_active_learning_scores_ensemble"]], "get_label_quality_multiannotator() (in module cleanlab.multiannotator)": [[62, "cleanlab.multiannotator.get_label_quality_multiannotator"]], "get_label_quality_multiannotator_ensemble() (in module cleanlab.multiannotator)": [[62, "cleanlab.multiannotator.get_label_quality_multiannotator_ensemble"]], "get_majority_vote_label() (in module cleanlab.multiannotator)": [[62, "cleanlab.multiannotator.get_majority_vote_label"]], "cleanlab.multilabel_classification.dataset": [[63, "module-cleanlab.multilabel_classification.dataset"]], "common_multilabel_issues() (in module cleanlab.multilabel_classification.dataset)": [[63, "cleanlab.multilabel_classification.dataset.common_multilabel_issues"]], "multilabel_health_summary() (in module cleanlab.multilabel_classification.dataset)": [[63, "cleanlab.multilabel_classification.dataset.multilabel_health_summary"]], "overall_multilabel_health_score() (in module cleanlab.multilabel_classification.dataset)": [[63, "cleanlab.multilabel_classification.dataset.overall_multilabel_health_score"]], "rank_classes_by_multilabel_quality() (in module cleanlab.multilabel_classification.dataset)": [[63, "cleanlab.multilabel_classification.dataset.rank_classes_by_multilabel_quality"]], "cleanlab.multilabel_classification.filter": [[64, "module-cleanlab.multilabel_classification.filter"]], "find_label_issues() (in module cleanlab.multilabel_classification.filter)": [[64, "cleanlab.multilabel_classification.filter.find_label_issues"]], "find_multilabel_issues_per_class() (in module cleanlab.multilabel_classification.filter)": [[64, "cleanlab.multilabel_classification.filter.find_multilabel_issues_per_class"]], "cleanlab.multilabel_classification": [[65, "module-cleanlab.multilabel_classification"]], "cleanlab.multilabel_classification.rank": [[66, "module-cleanlab.multilabel_classification.rank"]], "get_label_quality_scores() (in module cleanlab.multilabel_classification.rank)": [[66, "cleanlab.multilabel_classification.rank.get_label_quality_scores"]], "get_label_quality_scores_per_class() (in module cleanlab.multilabel_classification.rank)": [[66, "cleanlab.multilabel_classification.rank.get_label_quality_scores_per_class"]], "cleanlab.object_detection.filter": [[67, "module-cleanlab.object_detection.filter"]], "find_label_issues() (in module cleanlab.object_detection.filter)": [[67, "cleanlab.object_detection.filter.find_label_issues"]], "cleanlab.object_detection": [[68, "module-cleanlab.object_detection"]], "cleanlab.object_detection.rank": [[69, "module-cleanlab.object_detection.rank"]], "compute_badloc_box_scores() (in module cleanlab.object_detection.rank)": [[69, "cleanlab.object_detection.rank.compute_badloc_box_scores"]], "compute_overlooked_box_scores() (in module cleanlab.object_detection.rank)": [[69, "cleanlab.object_detection.rank.compute_overlooked_box_scores"]], "compute_swap_box_scores() (in module cleanlab.object_detection.rank)": [[69, "cleanlab.object_detection.rank.compute_swap_box_scores"]], "get_label_quality_scores() (in module cleanlab.object_detection.rank)": [[69, "cleanlab.object_detection.rank.get_label_quality_scores"]], "issues_from_scores() (in module cleanlab.object_detection.rank)": [[69, "cleanlab.object_detection.rank.issues_from_scores"]], "pool_box_scores_per_image() (in module cleanlab.object_detection.rank)": [[69, "cleanlab.object_detection.rank.pool_box_scores_per_image"]], "bounding_box_size_distribution() (in module cleanlab.object_detection.summary)": [[70, "cleanlab.object_detection.summary.bounding_box_size_distribution"]], "calculate_per_class_metrics() (in module cleanlab.object_detection.summary)": [[70, "cleanlab.object_detection.summary.calculate_per_class_metrics"]], "class_label_distribution() (in module cleanlab.object_detection.summary)": [[70, "cleanlab.object_detection.summary.class_label_distribution"]], "cleanlab.object_detection.summary": [[70, "module-cleanlab.object_detection.summary"]], "get_average_per_class_confusion_matrix() (in module cleanlab.object_detection.summary)": [[70, "cleanlab.object_detection.summary.get_average_per_class_confusion_matrix"]], "get_sorted_bbox_count_idxs() (in module cleanlab.object_detection.summary)": [[70, "cleanlab.object_detection.summary.get_sorted_bbox_count_idxs"]], "object_counts_per_image() (in module cleanlab.object_detection.summary)": [[70, "cleanlab.object_detection.summary.object_counts_per_image"]], "plot_class_distribution() (in module cleanlab.object_detection.summary)": [[70, "cleanlab.object_detection.summary.plot_class_distribution"]], "plot_class_size_distributions() (in module cleanlab.object_detection.summary)": [[70, "cleanlab.object_detection.summary.plot_class_size_distributions"]], "visualize() (in module cleanlab.object_detection.summary)": [[70, "cleanlab.object_detection.summary.visualize"]], "outofdistribution (class in cleanlab.outlier)": [[71, "cleanlab.outlier.OutOfDistribution"]], "cleanlab.outlier": [[71, "module-cleanlab.outlier"]], "fit() (cleanlab.outlier.outofdistribution method)": [[71, "cleanlab.outlier.OutOfDistribution.fit"]], "fit_score() (cleanlab.outlier.outofdistribution method)": [[71, "cleanlab.outlier.OutOfDistribution.fit_score"]], "score() (cleanlab.outlier.outofdistribution method)": [[71, "cleanlab.outlier.OutOfDistribution.score"]], "cleanlab.rank": [[72, "module-cleanlab.rank"]], "find_top_issues() (in module cleanlab.rank)": [[72, "cleanlab.rank.find_top_issues"]], "get_confidence_weighted_entropy_for_each_label() (in module cleanlab.rank)": [[72, "cleanlab.rank.get_confidence_weighted_entropy_for_each_label"]], "get_label_quality_ensemble_scores() (in module cleanlab.rank)": [[72, "cleanlab.rank.get_label_quality_ensemble_scores"]], "get_label_quality_scores() (in module cleanlab.rank)": [[72, "cleanlab.rank.get_label_quality_scores"]], "get_normalized_margin_for_each_label() (in module cleanlab.rank)": [[72, "cleanlab.rank.get_normalized_margin_for_each_label"]], "get_self_confidence_for_each_label() (in module cleanlab.rank)": [[72, "cleanlab.rank.get_self_confidence_for_each_label"]], "order_label_issues() (in module cleanlab.rank)": [[72, "cleanlab.rank.order_label_issues"]], "cleanlab.regression": [[73, "module-cleanlab.regression"]], "cleanlearning (class in cleanlab.regression.learn)": [[74, "cleanlab.regression.learn.CleanLearning"]], "__init_subclass__() (cleanlab.regression.learn.cleanlearning class method)": [[74, "cleanlab.regression.learn.CleanLearning.__init_subclass__"]], "cleanlab.regression.learn": [[74, "module-cleanlab.regression.learn"]], "find_label_issues() (cleanlab.regression.learn.cleanlearning method)": [[74, "cleanlab.regression.learn.CleanLearning.find_label_issues"]], "fit() (cleanlab.regression.learn.cleanlearning method)": [[74, "cleanlab.regression.learn.CleanLearning.fit"]], "get_aleatoric_uncertainty() (cleanlab.regression.learn.cleanlearning method)": [[74, "cleanlab.regression.learn.CleanLearning.get_aleatoric_uncertainty"]], "get_epistemic_uncertainty() (cleanlab.regression.learn.cleanlearning method)": [[74, "cleanlab.regression.learn.CleanLearning.get_epistemic_uncertainty"]], "get_label_issues() (cleanlab.regression.learn.cleanlearning method)": [[74, "cleanlab.regression.learn.CleanLearning.get_label_issues"]], "get_metadata_routing() (cleanlab.regression.learn.cleanlearning method)": [[74, "cleanlab.regression.learn.CleanLearning.get_metadata_routing"]], "get_params() (cleanlab.regression.learn.cleanlearning method)": [[74, "cleanlab.regression.learn.CleanLearning.get_params"]], "predict() (cleanlab.regression.learn.cleanlearning method)": [[74, "cleanlab.regression.learn.CleanLearning.predict"]], "save_space() (cleanlab.regression.learn.cleanlearning method)": [[74, "cleanlab.regression.learn.CleanLearning.save_space"]], "score() (cleanlab.regression.learn.cleanlearning method)": [[74, "cleanlab.regression.learn.CleanLearning.score"]], "set_fit_request() (cleanlab.regression.learn.cleanlearning method)": [[74, "cleanlab.regression.learn.CleanLearning.set_fit_request"]], "set_params() (cleanlab.regression.learn.cleanlearning method)": [[74, "cleanlab.regression.learn.CleanLearning.set_params"]], "set_score_request() (cleanlab.regression.learn.cleanlearning method)": [[74, "cleanlab.regression.learn.CleanLearning.set_score_request"]], "cleanlab.regression.rank": [[75, "module-cleanlab.regression.rank"]], "get_label_quality_scores() (in module cleanlab.regression.rank)": [[75, "cleanlab.regression.rank.get_label_quality_scores"]], "cleanlab.segmentation.filter": [[76, "module-cleanlab.segmentation.filter"]], "find_label_issues() (in module cleanlab.segmentation.filter)": [[76, "cleanlab.segmentation.filter.find_label_issues"]], "cleanlab.segmentation": [[77, "module-cleanlab.segmentation"]], "cleanlab.segmentation.rank": [[78, "module-cleanlab.segmentation.rank"]], "get_label_quality_scores() (in module cleanlab.segmentation.rank)": [[78, "cleanlab.segmentation.rank.get_label_quality_scores"]], "issues_from_scores() (in module cleanlab.segmentation.rank)": [[78, "cleanlab.segmentation.rank.issues_from_scores"]], "cleanlab.segmentation.summary": [[79, "module-cleanlab.segmentation.summary"]], "common_label_issues() (in module cleanlab.segmentation.summary)": [[79, "cleanlab.segmentation.summary.common_label_issues"]], "display_issues() (in module cleanlab.segmentation.summary)": [[79, "cleanlab.segmentation.summary.display_issues"]], "filter_by_class() (in module cleanlab.segmentation.summary)": [[79, "cleanlab.segmentation.summary.filter_by_class"]], "cleanlab.token_classification.filter": [[80, "module-cleanlab.token_classification.filter"]], "find_label_issues() (in module cleanlab.token_classification.filter)": [[80, "cleanlab.token_classification.filter.find_label_issues"]], "cleanlab.token_classification": [[81, "module-cleanlab.token_classification"]], "cleanlab.token_classification.rank": [[82, "module-cleanlab.token_classification.rank"]], "get_label_quality_scores() (in module cleanlab.token_classification.rank)": [[82, "cleanlab.token_classification.rank.get_label_quality_scores"]], "issues_from_scores() (in module cleanlab.token_classification.rank)": [[82, "cleanlab.token_classification.rank.issues_from_scores"]], "cleanlab.token_classification.summary": [[83, "module-cleanlab.token_classification.summary"]], "common_label_issues() (in module cleanlab.token_classification.summary)": [[83, "cleanlab.token_classification.summary.common_label_issues"]], "display_issues() (in module cleanlab.token_classification.summary)": [[83, "cleanlab.token_classification.summary.display_issues"]], "filter_by_token() (in module cleanlab.token_classification.summary)": [[83, "cleanlab.token_classification.summary.filter_by_token"]]}})