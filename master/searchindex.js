Search.setIndex({"docnames": ["cleanlab/benchmarking/index", "cleanlab/benchmarking/noise_generation", "cleanlab/classification", "cleanlab/count", "cleanlab/data_valuation", "cleanlab/datalab/datalab", "cleanlab/datalab/guide/_templates/issue_types_tip", "cleanlab/datalab/guide/custom_issue_manager", "cleanlab/datalab/guide/generating_cluster_ids", "cleanlab/datalab/guide/index", "cleanlab/datalab/guide/issue_type_description", "cleanlab/datalab/guide/table", "cleanlab/datalab/index", "cleanlab/datalab/internal/data", "cleanlab/datalab/internal/data_issues", "cleanlab/datalab/internal/factory", "cleanlab/datalab/internal/index", "cleanlab/datalab/internal/issue_finder", "cleanlab/datalab/internal/issue_manager/_notices/not_registered", "cleanlab/datalab/internal/issue_manager/data_valuation", "cleanlab/datalab/internal/issue_manager/duplicate", "cleanlab/datalab/internal/issue_manager/imbalance", "cleanlab/datalab/internal/issue_manager/index", "cleanlab/datalab/internal/issue_manager/issue_manager", "cleanlab/datalab/internal/issue_manager/label", "cleanlab/datalab/internal/issue_manager/multilabel/index", "cleanlab/datalab/internal/issue_manager/multilabel/label", "cleanlab/datalab/internal/issue_manager/noniid", "cleanlab/datalab/internal/issue_manager/null", "cleanlab/datalab/internal/issue_manager/outlier", "cleanlab/datalab/internal/issue_manager/regression/index", "cleanlab/datalab/internal/issue_manager/regression/label", "cleanlab/datalab/internal/issue_manager/underperforming_group", "cleanlab/datalab/internal/model_outputs", "cleanlab/datalab/internal/report", "cleanlab/datalab/internal/task", "cleanlab/datalab/optional_dependencies", "cleanlab/dataset", "cleanlab/experimental/cifar_cnn", "cleanlab/experimental/coteaching", "cleanlab/experimental/index", "cleanlab/experimental/label_issues_batched", "cleanlab/experimental/mnist_pytorch", "cleanlab/experimental/span_classification", "cleanlab/filter", "cleanlab/internal/index", "cleanlab/internal/label_quality_utils", "cleanlab/internal/latent_algebra", "cleanlab/internal/multiannotator_utils", "cleanlab/internal/multilabel_scorer", "cleanlab/internal/multilabel_utils", "cleanlab/internal/neighbor/index", "cleanlab/internal/neighbor/knn_graph", "cleanlab/internal/neighbor/metric", "cleanlab/internal/neighbor/search", "cleanlab/internal/outlier", "cleanlab/internal/token_classification_utils", "cleanlab/internal/util", "cleanlab/internal/validation", "cleanlab/models/index", "cleanlab/models/keras", "cleanlab/multiannotator", "cleanlab/multilabel_classification/dataset", "cleanlab/multilabel_classification/filter", "cleanlab/multilabel_classification/index", "cleanlab/multilabel_classification/rank", "cleanlab/object_detection/filter", "cleanlab/object_detection/index", "cleanlab/object_detection/rank", "cleanlab/object_detection/summary", "cleanlab/outlier", "cleanlab/rank", "cleanlab/regression/index", "cleanlab/regression/learn", "cleanlab/regression/rank", "cleanlab/segmentation/filter", "cleanlab/segmentation/index", "cleanlab/segmentation/rank", "cleanlab/segmentation/summary", "cleanlab/token_classification/filter", "cleanlab/token_classification/index", "cleanlab/token_classification/rank", "cleanlab/token_classification/summary", "index", "migrating/migrate_v2", "tutorials/clean_learning/index", "tutorials/clean_learning/tabular", "tutorials/clean_learning/text", "tutorials/datalab/audio", "tutorials/datalab/datalab_advanced", "tutorials/datalab/datalab_quickstart", "tutorials/datalab/image", "tutorials/datalab/index", "tutorials/datalab/tabular", "tutorials/datalab/text", "tutorials/datalab/workflows", "tutorials/dataset_health", "tutorials/faq", "tutorials/improving_ml_performance", "tutorials/indepth_overview", "tutorials/index", "tutorials/multiannotator", "tutorials/multilabel_classification", "tutorials/object_detection", "tutorials/outliers", "tutorials/pred_probs_cross_val", "tutorials/regression", "tutorials/segmentation", "tutorials/token_classification"], "filenames": ["cleanlab/benchmarking/index.rst", "cleanlab/benchmarking/noise_generation.rst", "cleanlab/classification.rst", "cleanlab/count.rst", "cleanlab/data_valuation.rst", "cleanlab/datalab/datalab.rst", "cleanlab/datalab/guide/_templates/issue_types_tip.rst", "cleanlab/datalab/guide/custom_issue_manager.rst", "cleanlab/datalab/guide/generating_cluster_ids.rst", "cleanlab/datalab/guide/index.rst", "cleanlab/datalab/guide/issue_type_description.rst", "cleanlab/datalab/guide/table.rst", "cleanlab/datalab/index.rst", "cleanlab/datalab/internal/data.rst", "cleanlab/datalab/internal/data_issues.rst", "cleanlab/datalab/internal/factory.rst", "cleanlab/datalab/internal/index.rst", "cleanlab/datalab/internal/issue_finder.rst", "cleanlab/datalab/internal/issue_manager/_notices/not_registered.rst", "cleanlab/datalab/internal/issue_manager/data_valuation.rst", "cleanlab/datalab/internal/issue_manager/duplicate.rst", "cleanlab/datalab/internal/issue_manager/imbalance.rst", "cleanlab/datalab/internal/issue_manager/index.rst", "cleanlab/datalab/internal/issue_manager/issue_manager.rst", "cleanlab/datalab/internal/issue_manager/label.rst", "cleanlab/datalab/internal/issue_manager/multilabel/index.rst", "cleanlab/datalab/internal/issue_manager/multilabel/label.rst", "cleanlab/datalab/internal/issue_manager/noniid.rst", "cleanlab/datalab/internal/issue_manager/null.rst", "cleanlab/datalab/internal/issue_manager/outlier.rst", "cleanlab/datalab/internal/issue_manager/regression/index.rst", "cleanlab/datalab/internal/issue_manager/regression/label.rst", "cleanlab/datalab/internal/issue_manager/underperforming_group.rst", "cleanlab/datalab/internal/model_outputs.rst", "cleanlab/datalab/internal/report.rst", "cleanlab/datalab/internal/task.rst", "cleanlab/datalab/optional_dependencies.rst", "cleanlab/dataset.rst", "cleanlab/experimental/cifar_cnn.rst", "cleanlab/experimental/coteaching.rst", "cleanlab/experimental/index.rst", "cleanlab/experimental/label_issues_batched.rst", "cleanlab/experimental/mnist_pytorch.rst", "cleanlab/experimental/span_classification.rst", "cleanlab/filter.rst", "cleanlab/internal/index.rst", "cleanlab/internal/label_quality_utils.rst", "cleanlab/internal/latent_algebra.rst", "cleanlab/internal/multiannotator_utils.rst", "cleanlab/internal/multilabel_scorer.rst", "cleanlab/internal/multilabel_utils.rst", "cleanlab/internal/neighbor/index.rst", "cleanlab/internal/neighbor/knn_graph.rst", "cleanlab/internal/neighbor/metric.rst", "cleanlab/internal/neighbor/search.rst", "cleanlab/internal/outlier.rst", "cleanlab/internal/token_classification_utils.rst", "cleanlab/internal/util.rst", "cleanlab/internal/validation.rst", "cleanlab/models/index.rst", "cleanlab/models/keras.rst", "cleanlab/multiannotator.rst", "cleanlab/multilabel_classification/dataset.rst", "cleanlab/multilabel_classification/filter.rst", "cleanlab/multilabel_classification/index.rst", "cleanlab/multilabel_classification/rank.rst", "cleanlab/object_detection/filter.rst", "cleanlab/object_detection/index.rst", "cleanlab/object_detection/rank.rst", "cleanlab/object_detection/summary.rst", "cleanlab/outlier.rst", "cleanlab/rank.rst", "cleanlab/regression/index.rst", "cleanlab/regression/learn.rst", "cleanlab/regression/rank.rst", "cleanlab/segmentation/filter.rst", "cleanlab/segmentation/index.rst", "cleanlab/segmentation/rank.rst", "cleanlab/segmentation/summary.rst", "cleanlab/token_classification/filter.rst", "cleanlab/token_classification/index.rst", "cleanlab/token_classification/rank.rst", "cleanlab/token_classification/summary.rst", "index.rst", "migrating/migrate_v2.rst", "tutorials/clean_learning/index.rst", "tutorials/clean_learning/tabular.ipynb", "tutorials/clean_learning/text.ipynb", "tutorials/datalab/audio.ipynb", "tutorials/datalab/datalab_advanced.ipynb", "tutorials/datalab/datalab_quickstart.ipynb", "tutorials/datalab/image.ipynb", "tutorials/datalab/index.rst", "tutorials/datalab/tabular.ipynb", "tutorials/datalab/text.ipynb", "tutorials/datalab/workflows.ipynb", "tutorials/dataset_health.ipynb", "tutorials/faq.ipynb", "tutorials/improving_ml_performance.ipynb", "tutorials/indepth_overview.ipynb", "tutorials/index.rst", "tutorials/multiannotator.ipynb", "tutorials/multilabel_classification.ipynb", "tutorials/object_detection.ipynb", "tutorials/outliers.ipynb", "tutorials/pred_probs_cross_val.rst", "tutorials/regression.ipynb", "tutorials/segmentation.ipynb", "tutorials/token_classification.ipynb"], "titles": ["benchmarking", "noise_generation", "classification", "count", "data_valuation", "datalab", "&lt;no title&gt;", "Creating Your Own Issues Manager", "Generating Cluster IDs", "Datalab guides", "Datalab Issue Types", "&lt;no title&gt;", "datalab", "data", "data_issues", "factory", "internal", "issue_finder", "&lt;no title&gt;", "data_valuation", "duplicate", "imbalance", "issue_manager", "issue_manager", "label", "multilabel", "label", "noniid", "null", "outlier", "regression", "label", "underperforming_group", "model_outputs", "report", "task", "&lt;no title&gt;", "dataset", "cifar_cnn", "coteaching", "experimental", "label_issues_batched", "mnist_pytorch", "span_classification", "filter", "internal", "label_quality_utils", "latent_algebra", "multiannotator_utils", "multilabel_scorer", "multilabel_utils", "neighbor", "knn_graph", "metric", "search", "outlier", "token_classification_utils", "util", "validation", "models", "keras", "multiannotator", "dataset", "filter", "multilabel_classification", "rank", "filter", "object_detection", "rank", "summary", "outlier", "rank", "regression", "regression.learn", "regression.rank", "filter", "segmentation", "rank", "summary", "filter", "token_classification", "rank", "summary", "cleanlab open-source documentation", "How to migrate to versions &gt;= 2.0.0 from pre 1.0.1", "CleanLearning Tutorials", "Classification with Structured/Tabular Data and Noisy Labels", "Text Classification with Noisy Labels", "Detecting Issues in an Audio Dataset with Datalab", "Datalab: Advanced workflows to audit your data", "Datalab: A unified audit to detect all kinds of issues in data and labels", "Detecting Issues in an Image Dataset with Datalab", "Datalab Tutorials", "Detecting Issues in Tabular Data\u00a0(Numeric/Categorical columns) with Datalab", "Detecting Issues in a Text Dataset with Datalab", "Miscellaneous workflows with Datalab", "Understanding Dataset-level Labeling Issues", "FAQ", "Improving ML Performance via Data Curation with Train vs Test Splits", "The Workflows of Data-centric AI for Classification with Noisy Labels", "Tutorials", "Estimate Consensus and Annotator Quality for Data Labeled by Multiple Annotators", "Find Label Errors in Multi-Label Classification Datasets", "Finding Label Errors in Object Detection Datasets", "Detect Outliers with Cleanlab and PyTorch Image Models (timm)", "Computing Out-of-Sample Predicted Probabilities with Cross-Validation", "Find Noisy Labels in Regression Datasets", "Find Label Errors in Semantic Segmentation Datasets", "Find Label Errors in Token Classification (Text) Datasets"], "terms": {"noise_gener": [0, 84, 89, 90, 99, 101, 102], "noise_matrix_is_valid": [0, 1], "generate_noisy_label": [0, 1, 89, 90, 99, 101, 102], "generate_noise_matrix_from_trac": [0, 1, 89, 90, 99, 101, 102], "generate_n_rand_probabilities_that_sum_to_m": [0, 1], "randomly_distribute_n_balls_into_k_bin": [0, 1], "helper": [1, 17, 41, 46, 48, 49, 50, 51, 55, 56, 57, 68, 91, 95, 96, 108], "method": [1, 2, 3, 4, 5, 7, 10, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 86, 87, 88, 89, 90, 91, 93, 94, 95, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108], "ar": [1, 2, 3, 4, 5, 7, 10, 13, 14, 15, 16, 17, 19, 21, 22, 23, 24, 25, 27, 30, 31, 33, 35, 37, 38, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 65, 66, 68, 69, 70, 71, 73, 74, 75, 77, 78, 79, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 93, 94, 95, 97, 98, 99, 101, 102, 103, 104, 105, 106, 108], "us": [1, 2, 3, 4, 5, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 65, 66, 68, 69, 70, 71, 73, 74, 75, 77, 78, 79, 81, 83, 84, 89, 96, 105], "benchmark": [1, 38, 83, 84, 89, 90, 99, 101, 102], "cleanlab": [1, 2, 3, 4, 5, 7, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 65, 66, 68, 69, 70, 71, 73, 74, 75, 77, 78, 79, 81, 82, 84, 89, 90, 95, 96, 98, 100, 105], "": [1, 2, 3, 4, 10, 19, 33, 37, 38, 42, 46, 49, 52, 54, 55, 57, 61, 62, 66, 68, 69, 70, 71, 73, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108], "core": [1, 41, 44, 75, 77], "algorithm": [1, 2, 8, 10, 32, 39, 43, 54, 55, 57, 61, 70, 79, 81, 83, 86, 87, 90, 93, 94, 95, 96, 97, 99, 101, 102, 104, 106, 108], "These": [1, 2, 3, 4, 5, 8, 10, 22, 38, 40, 42, 43, 44, 45, 52, 59, 61, 62, 65, 69, 70, 74, 78, 79, 81, 82, 86, 87, 88, 90, 91, 93, 94, 95, 97, 98, 99, 101, 102, 103, 104, 106, 107, 108], "introduc": [1, 10, 88, 95, 97, 98, 99], "synthet": [1, 101, 102, 107], "nois": [1, 2, 3, 37, 44, 47, 57, 62, 89, 90, 95, 96, 101, 106], "label": [1, 2, 3, 4, 5, 7, 8, 9, 11, 13, 15, 16, 17, 21, 22, 23, 25, 30, 32, 35, 37, 38, 39, 41, 42, 43, 44, 46, 47, 48, 49, 50, 57, 58, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 89, 95, 98, 100, 104, 105], "classif": [1, 3, 4, 5, 7, 10, 11, 13, 15, 17, 33, 35, 37, 41, 43, 44, 47, 49, 50, 57, 61, 62, 63, 64, 65, 70, 71, 79, 80, 81, 82, 83, 84, 85, 88, 89, 90, 95, 98, 100, 101, 104, 105, 106, 107], "dataset": [1, 2, 3, 4, 5, 7, 9, 10, 13, 14, 15, 17, 19, 20, 21, 23, 26, 27, 28, 29, 31, 32, 40, 41, 42, 43, 44, 47, 49, 53, 57, 60, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 86, 89, 93, 98, 100, 101, 105], "specif": [1, 3, 5, 9, 15, 16, 17, 28, 34, 35, 40, 52, 53, 54, 59, 63, 66, 69, 78, 82, 91, 93, 94, 95, 98, 99, 103, 108], "thi": [1, 2, 3, 4, 5, 6, 7, 9, 10, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 65, 66, 68, 69, 70, 71, 73, 74, 75, 77, 78, 79, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 101, 102, 103, 104, 105, 106, 107, 108], "modul": [1, 3, 14, 15, 16, 17, 22, 25, 30, 33, 34, 35, 37, 38, 39, 40, 41, 42, 44, 49, 51, 52, 54, 55, 57, 59, 61, 66, 69, 70, 71, 83, 91, 97, 102], "provid": [1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 15, 17, 19, 24, 31, 35, 37, 38, 39, 41, 42, 44, 47, 51, 52, 54, 55, 57, 60, 61, 62, 63, 68, 69, 70, 71, 73, 75, 77, 78, 81, 82, 83, 86, 87, 88, 89, 90, 91, 94, 95, 97, 98, 99, 101, 104, 105, 106, 107, 108], "gener": [1, 2, 3, 7, 10, 19, 24, 26, 34, 37, 49, 52, 54, 57, 58, 70, 71, 73, 78, 87, 88, 89, 90, 91, 94, 96, 97, 98, 99, 101, 102, 104, 105, 107, 108], "valid": [1, 2, 3, 5, 10, 13, 33, 35, 37, 44, 45, 47, 48, 49, 52, 54, 55, 57, 61, 63, 66, 69, 71, 73, 74, 82, 83, 84, 86, 87, 88, 89, 90, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 106, 107, 108], "matric": [1, 3, 47, 97], "which": [1, 2, 3, 5, 7, 10, 13, 14, 15, 17, 19, 23, 27, 33, 34, 35, 37, 38, 42, 43, 44, 47, 49, 53, 54, 56, 57, 61, 62, 63, 66, 68, 69, 70, 71, 73, 74, 77, 78, 79, 81, 83, 84, 86, 87, 88, 89, 90, 91, 93, 94, 95, 97, 98, 99, 101, 102, 103, 104, 105, 106, 108], "learn": [1, 2, 3, 4, 5, 9, 10, 15, 17, 23, 31, 34, 39, 40, 41, 42, 44, 46, 48, 53, 54, 57, 59, 61, 63, 70, 72, 74, 77, 81, 83, 86, 87, 88, 89, 91, 93, 94, 95, 96, 98, 101, 102, 106], "i": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 17, 19, 20, 21, 23, 24, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 41, 42, 43, 44, 46, 47, 48, 49, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 63, 65, 66, 68, 69, 70, 71, 73, 74, 75, 77, 78, 79, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 93, 94, 96, 98, 101, 102, 103, 104, 106, 107, 108], "possibl": [1, 2, 3, 7, 10, 37, 38, 42, 44, 46, 47, 49, 63, 64, 65, 66, 68, 69, 70, 71, 73, 79, 81, 82, 90, 95, 97, 98, 99, 101, 102, 103, 106, 107, 108], "noisi": [1, 2, 3, 10, 32, 37, 39, 42, 44, 47, 57, 62, 63, 65, 71, 73, 74, 75, 77, 78, 84, 89, 90, 93, 94, 95, 97, 100, 101], "given": [1, 2, 3, 5, 10, 15, 31, 37, 38, 39, 41, 42, 43, 44, 46, 47, 48, 49, 56, 57, 61, 62, 63, 66, 68, 69, 70, 71, 73, 74, 78, 79, 81, 82, 84, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 99, 101, 103, 104, 106, 107, 108], "matrix": [1, 2, 3, 5, 10, 17, 19, 32, 37, 44, 46, 47, 50, 52, 57, 58, 63, 66, 68, 69, 70, 71, 93, 95, 103, 104], "trace": [1, 89, 90, 99, 101, 102], "valu": [1, 2, 3, 4, 5, 10, 13, 14, 17, 19, 23, 27, 28, 33, 35, 37, 38, 39, 41, 42, 44, 46, 47, 49, 52, 53, 54, 55, 57, 61, 62, 63, 65, 66, 68, 69, 70, 71, 73, 74, 75, 77, 78, 79, 82, 87, 88, 90, 91, 93, 94, 97, 98, 99, 101, 102, 103, 104, 106, 107, 108], "more": [1, 2, 3, 4, 5, 7, 9, 10, 14, 15, 17, 19, 27, 37, 38, 41, 42, 43, 46, 49, 52, 53, 54, 55, 57, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 73, 74, 77, 78, 79, 81, 83, 88, 89, 91, 93, 94, 95, 96, 97, 98, 101, 102, 103, 104, 107, 108], "function": [1, 2, 3, 4, 5, 7, 10, 14, 15, 17, 24, 27, 31, 37, 38, 39, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 63, 65, 66, 68, 69, 70, 71, 73, 74, 75, 77, 78, 79, 81, 82, 86, 87, 88, 90, 95, 96, 97, 98, 99, 101, 102, 103, 107, 108], "noise_matrix": [1, 2, 3, 10, 47, 57, 89, 90, 99, 101, 102], "py": [1, 3, 34, 38, 39, 44, 47, 49, 89, 90, 99, 101, 102], "verbos": [1, 2, 5, 7, 17, 19, 20, 21, 23, 24, 26, 27, 28, 29, 31, 32, 34, 37, 41, 44, 61, 62, 63, 68, 70, 71, 73, 75, 77, 78, 82, 89, 95, 99, 101], "fals": [1, 2, 3, 5, 7, 10, 13, 19, 20, 21, 23, 24, 26, 27, 29, 31, 32, 34, 35, 37, 38, 41, 42, 44, 48, 56, 57, 58, 61, 62, 63, 65, 66, 68, 69, 70, 71, 73, 75, 77, 78, 79, 87, 88, 89, 90, 91, 93, 94, 95, 97, 98, 99, 101, 103, 104, 106, 107], "sourc": [1, 2, 3, 4, 5, 7, 9, 10, 12, 13, 14, 15, 17, 19, 20, 21, 23, 24, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 63, 65, 66, 68, 69, 70, 71, 73, 74, 75, 77, 78, 79, 81, 82, 86, 87, 90, 93, 94, 96, 99, 102, 104, 106], "prior": [1, 2, 3, 37, 44, 47, 49], "repres": [1, 2, 3, 7, 10, 13, 17, 19, 27, 33, 35, 37, 41, 44, 47, 50, 52, 53, 55, 57, 61, 62, 63, 66, 68, 69, 70, 71, 73, 75, 77, 78, 82, 86, 87, 88, 89, 90, 91, 93, 94, 95, 97, 98, 99, 101, 102, 103, 104, 106, 108], "p": [1, 2, 3, 5, 10, 37, 44, 46, 47, 55, 57, 61, 69, 70, 71, 75, 93, 94, 95, 98, 99, 101, 108], "true_label": [1, 2, 3, 37, 47, 57, 99, 101], "k": [1, 2, 3, 4, 5, 8, 10, 13, 17, 19, 20, 24, 27, 29, 32, 37, 41, 43, 44, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 61, 62, 63, 64, 65, 66, 69, 70, 71, 73, 75, 77, 78, 79, 81, 82, 86, 88, 89, 90, 95, 97, 98, 99, 101, 102, 103, 104, 107, 108], "check": [1, 2, 5, 6, 9, 10, 13, 17, 28, 35, 38, 41, 42, 48, 58, 60, 66, 69, 73, 86, 87, 88, 89, 90, 91, 97, 99, 101, 102, 106], "learnabl": 1, "mean": [1, 2, 7, 8, 10, 13, 14, 23, 27, 39, 42, 47, 49, 55, 68, 73, 87, 90, 94, 95, 97, 99, 101, 102, 103, 104, 106], "achiev": [1, 2, 38, 39, 42, 73, 97, 98, 101, 108], "better": [1, 5, 10, 44, 53, 61, 63, 71, 73, 74, 83, 87, 88, 90, 93, 94, 95, 97, 99, 102, 103, 104, 105, 108], "than": [1, 2, 3, 4, 7, 9, 10, 27, 29, 32, 37, 44, 53, 57, 60, 61, 66, 68, 70, 71, 73, 77, 81, 86, 88, 91, 95, 97, 98, 99, 101, 102, 103, 104, 105, 106, 107, 108], "random": [1, 2, 3, 7, 10, 19, 32, 41, 49, 52, 61, 71, 73, 86, 88, 89, 90, 91, 93, 95, 97, 98, 99, 101, 102, 104], "perform": [1, 2, 4, 7, 10, 27, 29, 32, 38, 42, 49, 51, 52, 53, 69, 73, 83, 86, 87, 89, 97, 99, 100, 101, 102, 105, 106], "averag": [1, 3, 5, 10, 23, 29, 37, 38, 42, 49, 55, 61, 62, 69, 70, 71, 97, 101, 104], "amount": [1, 3, 91], "paramet": [1, 2, 3, 4, 5, 9, 13, 14, 15, 17, 19, 20, 21, 23, 24, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 49, 50, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 63, 65, 66, 68, 69, 70, 71, 73, 74, 75, 77, 78, 79, 81, 82, 86, 87, 88, 90, 91, 94, 95, 98], "np": [1, 2, 3, 4, 5, 7, 17, 19, 32, 37, 39, 41, 43, 44, 46, 47, 49, 50, 52, 54, 55, 56, 57, 58, 60, 61, 62, 63, 65, 66, 68, 69, 70, 71, 73, 74, 75, 78, 79, 81, 82, 86, 87, 88, 89, 90, 91, 93, 95, 96, 97, 98, 99, 101, 102, 103, 104, 106, 107, 108], "ndarrai": [1, 2, 3, 4, 5, 17, 24, 26, 27, 31, 32, 33, 37, 39, 41, 43, 44, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 65, 66, 68, 69, 70, 71, 73, 74, 75, 77, 78, 81, 95, 108], "an": [1, 2, 3, 4, 5, 7, 9, 10, 13, 14, 15, 17, 19, 20, 21, 23, 24, 26, 27, 29, 31, 32, 33, 34, 35, 37, 38, 39, 41, 42, 43, 44, 46, 47, 48, 49, 52, 54, 55, 57, 58, 60, 61, 62, 63, 65, 66, 68, 69, 70, 71, 73, 75, 77, 78, 82, 83, 86, 87, 89, 90, 93, 94, 95, 96, 98, 99, 101, 102, 103, 104, 105, 106, 107, 108], "arrai": [1, 2, 3, 4, 5, 7, 10, 13, 17, 19, 27, 33, 37, 39, 41, 42, 43, 44, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 63, 65, 66, 68, 69, 70, 71, 73, 74, 75, 77, 78, 79, 81, 82, 86, 87, 88, 89, 90, 94, 95, 97, 99, 101, 102, 103, 104, 106, 107, 108], "shape": [1, 2, 3, 4, 5, 17, 19, 37, 39, 41, 43, 44, 46, 47, 48, 49, 52, 53, 55, 56, 57, 60, 61, 62, 63, 65, 66, 68, 69, 70, 71, 73, 74, 75, 77, 78, 79, 81, 82, 88, 95, 96, 97, 99, 102, 103, 104, 107, 108], "condit": [1, 2, 3, 10, 47, 53, 56, 57, 71, 91, 99, 108], "probabl": [1, 2, 3, 5, 8, 10, 17, 24, 26, 29, 32, 33, 37, 41, 42, 43, 44, 46, 47, 49, 50, 56, 57, 60, 61, 62, 63, 65, 66, 68, 69, 70, 71, 73, 75, 77, 78, 79, 81, 82, 83, 84, 96, 97, 99, 100, 102, 103, 104, 107, 108], "k_": [1, 2, 3, 47, 57], "k_y": [1, 2, 3, 47, 57], "contain": [1, 2, 3, 5, 10, 13, 14, 19, 20, 21, 23, 24, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 41, 42, 44, 46, 47, 51, 52, 56, 57, 60, 61, 62, 63, 65, 66, 68, 69, 70, 71, 73, 74, 77, 78, 79, 81, 82, 84, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 99, 101, 102, 103, 104, 106, 107], "fraction": [1, 2, 3, 10, 21, 39, 47, 57, 61, 73, 93, 97, 98], "exampl": [1, 2, 3, 4, 5, 7, 8, 10, 13, 14, 15, 17, 19, 20, 21, 23, 24, 26, 27, 28, 29, 31, 32, 34, 35, 37, 38, 39, 41, 42, 43, 44, 46, 47, 49, 50, 52, 55, 56, 57, 60, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 73, 74, 75, 77, 78, 79, 81, 82, 83, 84, 86, 87, 88, 89, 90, 93, 94, 95, 96, 98, 101, 102, 103, 105, 106, 107, 108], "everi": [1, 2, 3, 4, 5, 10, 17, 38, 42, 44, 47, 56, 57, 63, 71, 73, 74, 86, 88, 89, 90, 91, 93, 94, 97, 101, 103, 105, 107, 108], "class": [1, 2, 3, 4, 5, 7, 9, 13, 14, 15, 17, 19, 20, 21, 23, 24, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 41, 42, 43, 44, 46, 47, 48, 49, 50, 54, 56, 57, 60, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 73, 75, 77, 78, 79, 81, 82, 83, 86, 87, 88, 89, 90, 91, 93, 94, 96, 97, 98, 101, 102, 103, 104, 105, 106, 108], "other": [1, 2, 3, 5, 10, 17, 23, 28, 37, 38, 40, 41, 42, 44, 47, 50, 52, 57, 58, 59, 61, 62, 65, 69, 70, 71, 73, 78, 86, 87, 88, 89, 90, 91, 93, 94, 95, 97, 98, 99, 102, 104, 107, 108], "assum": [1, 2, 3, 13, 44, 47, 52, 56, 57, 71, 75, 78, 95, 97, 98, 102, 104, 106, 107, 108], "column": [1, 2, 3, 5, 10, 11, 13, 14, 31, 37, 41, 44, 47, 49, 50, 53, 56, 57, 61, 62, 63, 65, 66, 69, 70, 71, 73, 78, 79, 81, 82, 86, 87, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 101, 102, 103, 106, 107, 108], "sum": [1, 2, 3, 27, 32, 33, 37, 47, 49, 57, 62, 63, 65, 68, 73, 89, 90, 91, 97, 99, 101, 102, 107, 108], "1": [1, 2, 3, 4, 5, 7, 10, 11, 13, 17, 19, 20, 21, 23, 24, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 41, 42, 43, 44, 46, 47, 48, 49, 50, 52, 55, 56, 57, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 73, 74, 75, 77, 78, 79, 81, 82, 96, 97, 105], "each": [1, 2, 3, 4, 5, 7, 8, 9, 13, 14, 15, 17, 21, 23, 24, 26, 27, 32, 33, 34, 37, 38, 39, 41, 42, 43, 44, 46, 47, 49, 50, 52, 54, 55, 57, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 73, 74, 75, 77, 78, 79, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 99, 101, 102, 103, 104, 105, 106, 107, 108], "true": [1, 2, 3, 5, 7, 10, 13, 19, 20, 21, 23, 24, 26, 27, 29, 31, 32, 34, 35, 37, 38, 39, 41, 42, 44, 47, 49, 52, 56, 57, 58, 60, 61, 62, 63, 66, 68, 69, 70, 71, 73, 75, 77, 78, 82, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 101, 102, 103, 104, 106, 107, 108], "return": [1, 2, 3, 4, 5, 10, 13, 14, 15, 17, 19, 20, 21, 23, 24, 26, 27, 28, 29, 31, 32, 34, 35, 37, 38, 41, 42, 43, 44, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 63, 65, 66, 68, 69, 70, 71, 73, 74, 75, 77, 78, 79, 81, 82, 83, 87, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 101, 102, 103, 104, 106, 107, 108], "type": [1, 2, 3, 4, 5, 6, 7, 12, 13, 14, 15, 17, 19, 20, 21, 23, 24, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 65, 66, 68, 69, 70, 71, 73, 74, 75, 77, 78, 79, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 102, 103, 106, 107, 108], "bool": [1, 2, 3, 5, 13, 19, 20, 21, 23, 24, 26, 27, 29, 31, 32, 34, 35, 37, 38, 41, 42, 44, 49, 52, 56, 57, 61, 63, 65, 66, 68, 69, 70, 71, 73, 75, 77, 78, 82], "is_valid": 1, "whether": [1, 3, 5, 10, 13, 14, 19, 20, 21, 23, 24, 26, 27, 29, 31, 32, 34, 38, 41, 42, 44, 52, 57, 61, 62, 63, 65, 66, 82, 87, 88, 90, 91, 93, 94, 95, 96, 97, 98, 99, 106, 108], "from": [1, 2, 3, 4, 5, 7, 8, 9, 10, 12, 13, 14, 15, 17, 19, 23, 24, 28, 31, 32, 33, 34, 36, 37, 38, 39, 41, 42, 43, 44, 47, 49, 50, 52, 53, 55, 56, 57, 61, 63, 65, 68, 69, 70, 71, 73, 74, 79, 81, 82, 83, 88, 91, 93, 94, 95, 96, 97, 101, 102, 103, 104, 105, 107, 108], "perfect": [1, 2, 37, 73, 99, 103], "exactli": [1, 3, 10, 37, 38, 42, 44, 64, 70, 89, 90, 91, 93, 94, 98, 99], "yield": [1, 38, 42, 98], "between": [1, 5, 9, 16, 17, 22, 23, 25, 27, 30, 33, 37, 38, 39, 40, 41, 42, 44, 45, 46, 48, 52, 53, 54, 55, 59, 61, 62, 65, 68, 70, 71, 73, 74, 77, 81, 82, 84, 87, 88, 89, 90, 91, 93, 94, 95, 96, 98, 99, 101, 102, 103, 104, 106, 107, 108], "below": [1, 3, 4, 5, 10, 37, 38, 41, 42, 44, 46, 49, 55, 61, 62, 63, 68, 69, 77, 81, 84, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 99, 101, 102, 103, 104, 105, 106, 107, 108], "we": [1, 2, 3, 5, 7, 10, 14, 23, 38, 41, 42, 44, 49, 57, 58, 60, 61, 68, 69, 71, 83, 84, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108], "loop": [1, 3, 47, 57, 91, 103], "implement": [1, 2, 3, 4, 9, 15, 23, 38, 39, 41, 42, 47, 51, 53, 54, 57, 70, 73, 83, 86, 88, 89, 93, 98, 104, 105], "what": [1, 5, 9, 10, 17, 34, 37, 39, 41, 44, 61, 62, 66, 68, 86, 87, 88, 89, 90, 91, 93, 94, 95, 98, 101, 102, 103, 104, 106, 107, 108], "doe": [1, 2, 3, 7, 10, 41, 42, 44, 49, 52, 55, 58, 68, 69, 73, 75, 77, 81, 87, 88, 89, 90, 91, 93, 94, 95, 96, 98, 102, 106, 107], "do": [1, 2, 5, 9, 10, 37, 41, 42, 57, 58, 70, 71, 75, 86, 87, 88, 89, 90, 91, 93, 94, 95, 98, 101, 102, 103, 104, 106, 107, 108], "fast": 1, "explain": [1, 10, 95], "python": [1, 2, 42, 60, 73, 89, 90, 96, 104], "pseudocod": [1, 105], "happen": [1, 10, 44, 63, 94, 101, 107], "n": [1, 2, 3, 5, 7, 37, 38, 41, 42, 44, 46, 47, 48, 49, 52, 53, 55, 56, 57, 61, 62, 63, 65, 66, 68, 69, 70, 71, 73, 74, 75, 77, 78, 81, 86, 87, 88, 91, 94, 95, 96, 97, 101, 102, 103, 106, 107, 108], "without": [1, 2, 5, 9, 10, 13, 15, 21, 38, 42, 54, 65, 73, 83, 87, 88, 94, 95, 97, 98, 99, 103, 104], "ani": [1, 2, 3, 5, 7, 9, 10, 13, 14, 15, 17, 19, 20, 21, 23, 24, 26, 27, 28, 29, 31, 32, 37, 38, 41, 42, 44, 46, 48, 55, 56, 57, 60, 61, 63, 65, 66, 68, 69, 71, 73, 75, 77, 78, 83, 86, 87, 88, 89, 90, 91, 93, 94, 95, 97, 98, 101, 102, 103, 104, 105, 106, 107], "distinct": [1, 10, 19, 57, 108], "natur": [1, 10, 101, 104], "number": [1, 2, 3, 4, 5, 7, 8, 10, 13, 14, 17, 19, 20, 21, 23, 24, 26, 27, 29, 31, 32, 34, 35, 37, 38, 39, 41, 42, 44, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 61, 62, 63, 65, 66, 68, 69, 70, 71, 73, 74, 75, 77, 78, 81, 82, 84, 88, 89, 90, 91, 93, 94, 95, 97, 98, 99, 101, 102, 103, 107, 108], "0": [1, 2, 3, 4, 5, 7, 10, 13, 19, 20, 21, 23, 24, 26, 27, 28, 29, 31, 32, 33, 37, 38, 39, 41, 42, 43, 44, 46, 47, 48, 49, 50, 52, 55, 56, 57, 61, 62, 63, 65, 66, 68, 69, 70, 71, 73, 74, 75, 77, 78, 79, 81, 82, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 99, 101, 102, 103, 104, 105, 106, 107, 108], "count_joint": 1, "len": [1, 2, 3, 7, 37, 41, 47, 56, 57, 58, 70, 71, 73, 86, 87, 89, 90, 91, 94, 95, 96, 97, 98, 99, 101, 102, 103, 104, 106, 108], "y": [1, 2, 3, 5, 8, 19, 31, 32, 42, 47, 49, 57, 58, 60, 69, 73, 74, 87, 88, 89, 90, 93, 95, 97, 99, 101, 102, 104, 106], "round": [1, 41, 44, 57, 73, 95, 97, 98, 106], "astyp": [1, 98, 101], "int": [1, 2, 3, 4, 5, 7, 17, 19, 20, 21, 23, 24, 26, 27, 28, 29, 31, 32, 34, 37, 38, 39, 41, 42, 44, 49, 50, 52, 53, 54, 55, 56, 57, 58, 62, 63, 65, 69, 70, 71, 73, 75, 77, 78, 79, 82, 88, 89, 91, 95, 98, 103, 104], "rang": [1, 3, 5, 7, 13, 47, 49, 55, 57, 69, 73, 74, 91, 95, 96, 97, 99, 101, 102, 103, 104, 106, 107, 108], "idx_flip": 1, "where": [1, 2, 3, 5, 7, 10, 13, 14, 17, 23, 37, 41, 44, 47, 48, 49, 50, 52, 53, 55, 56, 57, 58, 61, 62, 63, 65, 66, 68, 69, 70, 71, 73, 74, 75, 77, 78, 79, 81, 87, 88, 91, 93, 94, 95, 97, 98, 99, 101, 102, 103, 104, 105, 106, 107, 108], "pragma": 1, "cover": [1, 3, 84, 95, 96, 97], "choic": [1, 8, 44, 53, 55, 91, 97, 102, 104], "replac": [1, 56, 60, 71, 86, 87, 89, 90, 91, 94, 95, 96, 97, 101, 104], "max_trace_prob": 1, "min_trace_prob": 1, "1e": [1, 3, 52, 71, 88, 89, 90], "05": [1, 10, 27, 31, 56, 69, 73, 79, 81, 93, 96, 97, 98, 99, 103], "max_noise_r": 1, "99999": 1, "min_noise_r": 1, "valid_noise_matrix": [1, 89, 90, 99, 101, 102], "none": [1, 2, 3, 4, 5, 7, 10, 11, 13, 14, 17, 19, 20, 21, 23, 24, 26, 27, 28, 29, 31, 32, 34, 35, 37, 38, 39, 41, 42, 43, 44, 46, 47, 48, 49, 50, 52, 54, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 68, 69, 70, 71, 73, 75, 77, 78, 81, 82, 89, 90, 91, 95, 97, 98, 99, 101, 102, 107], "frac_zero_noise_r": 1, "seed": [1, 2, 3, 10, 27, 40, 42, 49, 73, 86, 88, 89, 90, 93, 95, 96, 98, 99, 101, 102], "max_it": [1, 87, 88, 94, 104], "10000": [1, 41, 96, 97], "x": [1, 2, 3, 5, 10, 19, 20, 21, 23, 24, 26, 27, 29, 31, 32, 37, 38, 39, 42, 44, 46, 47, 49, 52, 54, 56, 57, 58, 60, 61, 63, 69, 70, 71, 73, 75, 86, 87, 88, 89, 90, 91, 93, 95, 96, 97, 98, 99, 101, 102, 104, 106], "diagon": [1, 3, 5, 44, 47, 57], "equal": [1, 3, 10, 13, 52, 63, 68, 78, 105], "creat": [1, 2, 9, 17, 19, 38, 41, 42, 44, 57, 73, 83, 87, 88, 91, 93, 94, 95, 97, 98, 107, 108], "impli": [1, 10, 37, 62, 69, 95], "float": [1, 2, 10, 19, 20, 21, 23, 24, 26, 27, 28, 29, 31, 32, 37, 38, 39, 40, 41, 42, 44, 46, 48, 49, 55, 56, 57, 61, 62, 63, 65, 68, 69, 73, 77, 81, 88, 89, 90, 98, 99, 101, 102], "entri": [1, 3, 5, 10, 37, 38, 42, 44, 46, 50, 52, 55, 57, 61, 62, 63, 66, 86, 87, 93, 94, 99, 102, 103, 106], "maximum": [1, 10, 70, 78, 82, 95, 107], "minimum": [1, 8, 10, 21, 44, 46, 63, 68, 81, 95], "noise_r": 1, "non": [1, 2, 3, 5, 7, 9, 17, 27, 38, 42, 44, 52, 68, 73, 89, 97, 98, 99, 101, 103, 104], "default": [1, 2, 3, 4, 5, 7, 10, 11, 15, 17, 29, 31, 34, 37, 38, 39, 41, 42, 44, 46, 47, 49, 51, 52, 53, 54, 55, 57, 60, 61, 62, 63, 65, 66, 68, 69, 70, 71, 73, 74, 75, 77, 78, 79, 81, 82, 89, 91, 95, 97, 106, 107], "If": [1, 2, 3, 4, 5, 10, 13, 14, 17, 27, 29, 35, 37, 38, 41, 42, 44, 46, 47, 49, 52, 53, 56, 57, 60, 61, 62, 63, 66, 68, 69, 70, 73, 74, 75, 77, 78, 81, 82, 83, 84, 86, 87, 88, 89, 91, 95, 97, 98, 99, 101, 102, 103, 104, 105, 106, 107, 108], "have": [1, 2, 3, 4, 5, 7, 9, 10, 17, 22, 25, 27, 30, 37, 38, 40, 41, 42, 44, 47, 49, 52, 57, 60, 61, 62, 63, 66, 68, 69, 70, 71, 73, 74, 78, 82, 83, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 99, 101, 102, 103, 104, 106, 107, 108], "all": [1, 2, 3, 5, 7, 8, 9, 10, 14, 15, 17, 23, 34, 37, 38, 41, 42, 43, 44, 47, 49, 50, 52, 56, 57, 60, 61, 62, 63, 64, 65, 68, 69, 70, 71, 73, 75, 77, 78, 79, 81, 82, 84, 86, 87, 88, 89, 91, 93, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108], "necessari": [1, 2, 3, 4, 7, 10, 13, 56, 89, 95], "In": [1, 2, 3, 5, 10, 37, 38, 41, 42, 52, 60, 61, 62, 64, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108], "particular": [1, 5, 6, 10, 14, 15, 17, 20, 21, 23, 27, 28, 29, 32, 38, 42, 57, 61, 65, 69, 73, 78, 82, 83, 86, 87, 88, 90, 94, 97, 101, 102, 104, 106], "satisfi": [1, 3, 37], "requir": [1, 2, 5, 7, 8, 9, 10, 11, 12, 13, 31, 36, 38, 39, 40, 41, 42, 44, 47, 52, 54, 57, 59, 60, 63, 70, 71, 73, 75, 83, 84, 88, 95, 96, 97, 98, 99, 105], "argument": [1, 2, 3, 5, 10, 11, 17, 24, 28, 31, 32, 33, 38, 41, 42, 43, 44, 49, 52, 54, 58, 60, 61, 62, 63, 65, 68, 69, 70, 71, 73, 77, 78, 79, 81, 87, 90, 91, 94, 95, 96, 97, 102, 103, 106, 108], "when": [1, 2, 3, 4, 5, 10, 13, 15, 24, 27, 38, 42, 44, 47, 49, 52, 54, 55, 57, 60, 63, 65, 66, 68, 70, 71, 73, 74, 86, 87, 89, 90, 91, 93, 94, 95, 96, 98, 101, 105, 106, 107, 108], "The": [1, 2, 3, 4, 5, 7, 8, 10, 13, 14, 15, 17, 19, 20, 21, 23, 24, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 60, 61, 62, 63, 66, 68, 69, 70, 71, 73, 75, 78, 79, 81, 83, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108], "rate": [1, 2, 3, 10, 39, 57, 88, 108], "set": [1, 2, 3, 5, 9, 10, 13, 14, 17, 18, 19, 20, 21, 23, 24, 26, 27, 28, 29, 31, 32, 34, 37, 38, 41, 42, 44, 48, 49, 51, 52, 53, 55, 57, 60, 61, 63, 66, 68, 69, 70, 71, 73, 75, 77, 78, 86, 87, 89, 90, 93, 94, 95, 97, 98, 101, 102, 104, 105, 106, 107, 108], "note": [1, 2, 3, 7, 8, 10, 11, 13, 28, 32, 35, 38, 41, 42, 43, 44, 49, 52, 57, 60, 61, 66, 68, 69, 70, 71, 73, 74, 78, 84, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 98, 99, 101, 102, 103, 104, 106, 107, 108], "you": [1, 2, 3, 5, 7, 9, 10, 15, 17, 37, 38, 40, 41, 42, 44, 49, 54, 59, 60, 61, 63, 66, 68, 69, 70, 71, 73, 74, 75, 78, 79, 82, 83, 84, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 101, 102, 103, 104, 105, 106, 107, 108], "high": [1, 2, 17, 41, 44, 52, 53, 57, 68, 71, 73, 86, 87, 89, 90, 91, 95, 96, 98, 99, 103, 106, 107, 108], "mai": [1, 2, 3, 4, 5, 10, 14, 22, 23, 25, 30, 33, 37, 38, 40, 41, 42, 44, 47, 49, 52, 57, 61, 62, 66, 68, 69, 70, 71, 73, 75, 78, 82, 84, 87, 89, 90, 91, 93, 94, 95, 96, 97, 98, 99, 101, 102, 103, 105, 106, 107, 108], "imposs": [1, 10, 99], "also": [1, 2, 3, 5, 7, 9, 10, 23, 35, 37, 38, 41, 42, 44, 49, 56, 60, 61, 70, 73, 78, 81, 82, 83, 86, 87, 88, 89, 90, 91, 93, 94, 96, 97, 98, 99, 101, 102, 103, 105, 106, 107, 108], "low": [1, 10, 57, 61, 83, 89, 90, 94, 95, 99, 103, 107], "zero": [1, 3, 5, 38, 42, 46, 52, 57, 58, 89, 91, 102, 103, 104], "forc": [1, 2, 3, 5, 42, 89, 108], "instead": [1, 2, 3, 10, 14, 17, 34, 37, 38, 41, 42, 44, 47, 57, 60, 61, 63, 65, 69, 70, 71, 73, 74, 77, 79, 81, 84, 86, 87, 88, 91, 93, 95, 97, 98, 99, 102, 103, 104, 106, 107, 108], "onli": [1, 2, 3, 4, 5, 7, 10, 11, 17, 24, 27, 31, 37, 38, 41, 42, 43, 44, 46, 47, 52, 53, 55, 56, 57, 58, 60, 61, 70, 71, 73, 75, 77, 81, 82, 83, 87, 88, 89, 90, 91, 94, 95, 98, 101, 102, 103, 104, 105, 106, 107, 108], "guarante": [1, 3, 5, 16, 22, 25, 30, 38, 40, 42, 45, 47, 59, 84], "produc": [1, 2, 5, 9, 10, 17, 49, 61, 71, 73, 75, 77, 83, 86, 87, 88, 91, 93, 94, 95, 97, 98, 99, 101, 102, 103, 104, 105, 107, 108], "higher": [1, 5, 10, 37, 44, 46, 47, 49, 55, 60, 61, 62, 73, 90, 94, 95, 97, 103], "opposit": [1, 108], "occur": [1, 3, 10, 37, 56, 68, 89, 90, 91, 97, 98, 104], "small": [1, 3, 10, 37, 41, 49, 52, 55, 57, 62, 69, 87, 91, 94, 96, 98, 102, 104], "numpi": [1, 3, 4, 5, 7, 10, 13, 19, 32, 33, 41, 42, 43, 49, 52, 55, 56, 58, 60, 65, 68, 73, 74, 79, 81, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 99, 101, 102, 103, 104, 106, 107, 108], "max": [1, 44, 70, 71, 90, 91, 95, 98, 104], "tri": [1, 38, 42, 105], "befor": [1, 2, 3, 38, 42, 55, 57, 70, 73, 78, 86, 87, 94, 95, 97, 98, 99, 101, 104, 106], "option": [1, 2, 3, 4, 5, 7, 8, 9, 13, 14, 17, 24, 29, 31, 37, 38, 41, 42, 44, 47, 49, 52, 54, 55, 56, 57, 58, 60, 61, 62, 63, 65, 66, 68, 69, 70, 71, 73, 75, 77, 78, 81, 82, 83, 86, 88, 89, 90, 91, 93, 97, 99, 102, 106, 107], "left": [1, 2, 44, 46, 55, 57, 63, 66, 69, 89, 90, 102, 103, 104, 107], "stochast": 1, "exceed": 1, "m": [1, 5, 38, 42, 48, 49, 52, 53, 61, 66, 68, 69, 70, 89, 90, 96, 101, 102, 103, 108], "max_prob": 1, "min_prob": 1, "dirichlet": 1, "ones": [1, 38, 42, 60, 97, 99, 107], "length": [1, 5, 13, 27, 28, 37, 39, 44, 57, 63, 66, 70, 71, 73, 75, 78, 82, 86, 88, 95, 98, 102, 104, 107, 108], "must": [1, 2, 3, 4, 5, 7, 17, 37, 38, 39, 40, 42, 44, 47, 49, 50, 55, 57, 59, 60, 61, 62, 63, 70, 71, 73, 75, 77, 78, 79, 81, 82, 88, 95, 98, 101, 105, 107, 108], "max_balls_per_bin": 1, "min_balls_per_bin": 1, "uniformli": 1, "integ": [1, 2, 3, 10, 13, 37, 41, 44, 50, 57, 58, 61, 63, 69, 75, 77, 78, 79, 81, 82, 86, 87, 88, 97, 98, 101, 102, 103, 107, 108], "ball": [1, 96], "bin": [1, 3, 63, 89, 90, 104], "ensur": [1, 2, 10, 38, 42, 52, 54, 55, 57, 58, 60, 68, 71, 73, 86, 87, 88, 89, 90, 91, 94, 95, 97, 98, 99, 104, 105, 106], "most": [1, 3, 5, 7, 10, 17, 37, 41, 44, 49, 60, 61, 62, 63, 66, 68, 69, 70, 71, 74, 77, 81, 82, 83, 84, 86, 87, 88, 89, 90, 93, 94, 95, 97, 98, 99, 101, 102, 103, 104, 106, 107], "least": [1, 4, 10, 19, 32, 37, 41, 61, 62, 68, 71, 81, 91, 97, 98, 101, 104, 107], "int_arrai": [1, 57], "can": [2, 3, 4, 5, 7, 8, 9, 14, 15, 17, 34, 35, 37, 38, 39, 40, 41, 42, 44, 48, 49, 50, 52, 53, 54, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 73, 74, 75, 78, 79, 82, 83, 84, 86, 87, 88, 89, 91, 93, 94, 95, 98, 102, 103, 104, 105, 106, 107, 108], "model": [2, 3, 4, 5, 9, 10, 11, 17, 19, 31, 33, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 54, 56, 60, 61, 62, 63, 65, 66, 68, 69, 70, 71, 73, 74, 75, 77, 78, 79, 81, 82, 84, 89, 90, 95, 96, 100, 105, 107, 108], "For": [2, 3, 5, 7, 9, 10, 12, 17, 23, 36, 37, 38, 41, 42, 44, 47, 49, 52, 55, 57, 60, 61, 62, 63, 65, 66, 68, 69, 70, 71, 73, 75, 77, 79, 81, 82, 83, 86, 87, 88, 90, 91, 93, 95, 96, 97, 98, 99, 101, 102, 103, 104, 105, 107, 108], "regular": [2, 3, 41, 60], "multi": [2, 3, 4, 10, 33, 37, 38, 41, 42, 44, 48, 49, 50, 57, 58, 62, 63, 64, 65, 70, 71, 83, 95, 97, 98, 99, 100], "task": [2, 5, 7, 10, 11, 12, 13, 15, 16, 17, 26, 31, 34, 37, 41, 47, 49, 50, 55, 57, 61, 63, 71, 73, 83, 87, 88, 94, 95, 96, 97, 98, 99, 102, 104, 106, 107, 108], "cleanlearn": [2, 3, 10, 24, 31, 38, 57, 60, 72, 73, 74, 83, 84, 86, 87, 98, 106], "wrap": [2, 38, 42, 51, 60, 70, 73, 83, 86, 87, 89, 90, 93, 94, 99, 106], "instanc": [2, 3, 5, 6, 7, 10, 14, 17, 19, 20, 21, 23, 24, 26, 27, 28, 29, 31, 32, 34, 38, 42, 49, 60, 69, 70, 73, 78, 86, 88, 89, 90, 91, 93, 94, 95, 97, 98, 99, 103], "sklearn": [2, 3, 4, 5, 8, 10, 19, 32, 37, 42, 49, 53, 54, 57, 60, 70, 73, 74, 83, 86, 87, 88, 89, 90, 91, 93, 94, 95, 97, 98, 99, 101, 102, 104, 105, 106], "classifi": [2, 3, 42, 49, 57, 61, 64, 70, 71, 83, 84, 86, 87, 88, 93, 94, 97, 101, 102, 104, 105, 107, 108], "adher": [2, 42, 73], "estim": [2, 3, 4, 5, 9, 14, 23, 37, 41, 42, 44, 47, 57, 61, 62, 63, 68, 70, 73, 75, 77, 81, 83, 84, 88, 89, 90, 91, 93, 94, 95, 97, 98, 100, 103, 104, 105, 106, 107, 108], "api": [2, 3, 15, 60, 66, 69, 70, 73, 84, 95, 97, 106], "defin": [2, 3, 5, 7, 10, 15, 23, 37, 38, 39, 41, 42, 44, 71, 73, 75, 83, 89, 90, 93, 96, 97, 98, 101, 104, 108], "four": [2, 10, 96, 99, 108], "clf": [2, 3, 5, 49, 73, 83, 86, 93, 95, 97, 98, 99, 102], "fit": [2, 3, 5, 8, 10, 19, 40, 42, 52, 54, 59, 60, 70, 72, 73, 83, 86, 87, 90, 91, 93, 94, 95, 96, 97, 98, 99, 101, 102, 104, 105, 106, 108], "sample_weight": [2, 42, 73, 99], "predict_proba": [2, 5, 37, 40, 42, 49, 59, 60, 86, 88, 89, 90, 93, 94, 95, 97, 98, 99, 101, 102, 104], "predict": [2, 3, 4, 5, 8, 9, 10, 11, 17, 23, 24, 26, 29, 31, 32, 33, 35, 37, 40, 41, 42, 43, 44, 46, 47, 49, 50, 56, 57, 59, 60, 61, 62, 63, 65, 66, 68, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 81, 82, 83, 84, 87, 96, 97, 99, 100, 104, 106, 107, 108], "score": [2, 3, 4, 5, 7, 14, 19, 20, 21, 23, 24, 26, 27, 28, 29, 31, 32, 37, 41, 43, 44, 46, 49, 55, 61, 62, 63, 65, 66, 68, 69, 70, 71, 72, 73, 74, 77, 79, 81, 83, 84, 86, 87, 88, 89, 90, 91, 93, 94, 96, 97, 98, 104, 106], "data": [2, 3, 4, 5, 7, 8, 9, 12, 14, 15, 16, 17, 19, 20, 21, 23, 24, 26, 27, 28, 29, 31, 32, 33, 34, 37, 39, 40, 41, 42, 43, 44, 49, 50, 52, 53, 54, 57, 59, 60, 61, 62, 63, 64, 68, 70, 71, 72, 73, 78, 79, 80, 81, 82, 84, 91, 92, 100], "e": [2, 3, 5, 10, 13, 23, 33, 37, 38, 41, 42, 44, 47, 49, 50, 52, 57, 58, 61, 62, 63, 64, 66, 69, 70, 71, 73, 75, 83, 86, 87, 88, 89, 90, 91, 93, 94, 96, 97, 98, 99, 101, 102, 103, 104, 105, 106], "featur": [2, 3, 4, 5, 8, 10, 11, 17, 19, 20, 24, 27, 28, 29, 31, 32, 49, 52, 53, 54, 57, 70, 73, 83, 86, 89, 90, 93, 94, 95, 97, 98, 99, 101, 102, 106], "element": [2, 3, 5, 37, 43, 44, 46, 57, 61, 63, 71, 78, 79, 81, 87, 88, 94, 95, 97, 108], "first": [2, 5, 10, 18, 27, 28, 37, 41, 49, 52, 57, 61, 62, 66, 69, 71, 73, 83, 86, 87, 88, 89, 91, 93, 95, 97, 98, 101, 102, 103, 104, 106, 107, 108], "index": [2, 10, 27, 37, 44, 51, 52, 54, 56, 57, 58, 62, 71, 73, 78, 81, 82, 87, 88, 89, 90, 91, 93, 95, 96, 97, 98, 99, 101, 102, 103, 104, 106, 107, 108], "should": [2, 3, 5, 7, 10, 15, 23, 27, 32, 33, 37, 38, 41, 42, 44, 46, 47, 49, 52, 54, 55, 56, 57, 60, 61, 62, 65, 66, 68, 69, 70, 71, 73, 74, 78, 79, 81, 82, 86, 87, 88, 89, 90, 91, 93, 94, 95, 98, 99, 101, 102, 103, 104, 105, 106, 107, 108], "correspond": [2, 3, 5, 10, 14, 15, 17, 19, 20, 21, 23, 24, 26, 27, 28, 29, 31, 32, 35, 37, 38, 41, 42, 43, 44, 46, 47, 49, 52, 56, 57, 61, 62, 63, 65, 66, 68, 69, 70, 71, 73, 75, 78, 79, 81, 82, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 99, 101, 102, 103, 104, 106, 107, 108], "differ": [2, 5, 7, 10, 14, 16, 22, 25, 27, 28, 30, 37, 38, 40, 41, 42, 44, 45, 49, 52, 55, 57, 58, 59, 61, 66, 68, 70, 73, 86, 88, 89, 90, 91, 93, 94, 95, 96, 98, 99, 101, 102, 104, 105, 106], "sampl": [2, 3, 5, 8, 10, 17, 21, 32, 44, 46, 49, 52, 53, 54, 63, 66, 69, 71, 73, 74, 83, 84, 87, 95, 96, 97, 99, 100, 102, 103, 106, 107, 108], "size": [2, 10, 32, 38, 41, 42, 44, 49, 52, 53, 63, 68, 69, 73, 75, 77, 87, 91, 93, 97, 99, 101, 102, 103, 105, 107], "here": [2, 5, 7, 10, 15, 41, 44, 47, 60, 61, 62, 63, 65, 66, 69, 70, 81, 83, 84, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 99, 101, 102, 103, 104, 105, 106, 107, 108], "re": [2, 5, 38, 42, 54, 56, 61, 73, 83, 86, 87, 88, 89, 93, 94, 95, 97, 98, 106, 107, 108], "weight": [2, 10, 38, 39, 42, 49, 52, 61, 68, 71, 73, 87, 88, 89, 90, 94], "loss": [2, 39, 60, 71, 73, 91, 98], "while": [2, 3, 10, 38, 41, 42, 48, 49, 57, 73, 83, 91, 95, 97, 98, 99, 101, 102, 106], "train": [2, 3, 4, 5, 9, 10, 17, 19, 33, 38, 39, 40, 42, 49, 57, 60, 61, 66, 69, 70, 73, 74, 84, 89, 90, 91, 93, 94, 96, 99, 100, 101, 102, 103, 105, 107, 108], "support": [2, 3, 4, 5, 13, 15, 34, 35, 41, 43, 49, 57, 58, 60, 70, 71, 81, 83, 84, 88, 89, 90, 91, 95, 97], "your": [2, 3, 5, 9, 10, 17, 37, 38, 40, 41, 42, 44, 49, 54, 57, 59, 60, 61, 62, 63, 65, 70, 71, 73, 74, 75, 77, 78, 84, 86, 87, 88, 91, 93, 96, 98, 101, 102, 103, 104, 105, 106, 107, 108], "recommend": [2, 5, 7, 10, 14, 17, 41, 44, 61, 89, 90, 91, 95, 97, 98, 105, 106], "furthermor": 2, "correctli": [2, 3, 10, 37, 38, 42, 44, 47, 52, 58, 62, 63, 68, 69, 73, 75, 87, 94, 95, 97, 102, 103, 106, 107], "clonabl": [2, 73], "via": [2, 5, 7, 10, 11, 14, 17, 19, 23, 37, 39, 41, 42, 49, 53, 57, 61, 66, 69, 70, 71, 73, 74, 77, 81, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 100, 102, 103, 104, 105, 106, 107, 108], "base": [2, 3, 4, 5, 7, 10, 13, 14, 17, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 31, 32, 33, 34, 35, 38, 41, 42, 43, 44, 47, 48, 49, 52, 53, 55, 56, 57, 58, 60, 61, 62, 63, 65, 68, 70, 71, 73, 74, 77, 79, 81, 83, 86, 88, 89, 90, 91, 93, 94, 95, 96, 98, 99, 101, 102, 103, 104, 106, 107, 108], "clone": [2, 73, 102], "intern": [2, 3, 7, 10, 11, 12, 13, 14, 15, 17, 19, 20, 21, 23, 24, 26, 27, 28, 29, 31, 32, 33, 34, 35, 41, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 65, 69, 73, 79, 84, 89, 95, 97, 99, 101, 102, 103, 104, 106, 108], "multipl": [2, 3, 5, 10, 13, 14, 35, 37, 44, 55, 56, 61, 62, 63, 65, 68, 69, 73, 83, 89, 90, 91, 93, 97, 100, 102, 103, 106], "g": [2, 3, 5, 10, 13, 23, 33, 37, 38, 42, 44, 50, 52, 57, 63, 64, 66, 69, 70, 71, 73, 83, 86, 87, 88, 89, 90, 91, 93, 94, 96, 97, 98, 99, 101, 102, 103, 104, 105, 106], "manual": [2, 73, 83, 86, 87, 88, 95, 97, 104, 105, 106, 108], "pytorch": [2, 38, 39, 42, 73, 83, 88, 91, 97, 100, 102, 107], "call": [2, 3, 5, 6, 10, 14, 15, 19, 20, 21, 23, 24, 26, 27, 28, 29, 31, 32, 38, 42, 49, 57, 60, 70, 73, 87, 88, 89, 90, 94, 97, 99, 102, 104, 105, 106, 107, 108], "__init__": [2, 39, 73, 91], "independ": [2, 3, 10, 62, 73, 94, 95, 98, 105, 106, 108], "compat": [2, 38, 41, 42, 54, 60, 73, 74, 77, 81, 83, 86, 87, 95, 97, 105, 106], "neural": [2, 39, 60, 70, 73, 88, 91, 97, 102, 104, 106], "network": [2, 38, 39, 42, 60, 70, 73, 87, 88, 91, 94, 97, 102, 104, 106], "typic": [2, 10, 38, 42, 54, 70, 73, 86, 87, 88, 90, 91, 93, 94, 98, 104, 105], "initi": [2, 3, 10, 14, 19, 38, 42, 52, 61, 73, 86, 94, 97, 98], "insid": [2, 42, 73, 97, 99], "There": [2, 3, 7, 52, 83, 99, 101], "two": [2, 3, 10, 19, 27, 37, 38, 41, 42, 50, 52, 53, 54, 57, 66, 68, 69, 84, 87, 89, 90, 91, 93, 94, 95, 96, 97, 98, 99, 102, 106, 107, 108], "new": [2, 7, 9, 10, 15, 23, 38, 41, 42, 48, 52, 56, 57, 61, 73, 87, 88, 89, 94, 96, 97, 98, 104, 105, 108], "notion": 2, "confid": [2, 3, 10, 23, 37, 41, 44, 47, 49, 57, 61, 62, 63, 66, 68, 69, 70, 71, 73, 77, 81, 83, 86, 91, 98, 99, 101, 102, 103, 105, 107, 108], "packag": [2, 5, 7, 9, 10, 12, 16, 36, 40, 44, 45, 57, 59, 60, 66, 69, 73, 83, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 99, 101, 102, 103, 104, 106, 107, 108], "prune": [2, 3, 44, 63, 73, 84, 98, 103], "everyth": [2, 69, 99], "els": [2, 69, 89, 91, 95, 96, 97, 98, 101, 102, 103], "mathemat": [2, 3, 10, 47, 102], "keep": [2, 14, 15, 57, 83, 89, 95, 96, 97, 98, 107], "belong": [2, 3, 10, 37, 44, 46, 47, 52, 62, 63, 64, 65, 70, 71, 75, 79, 81, 82, 90, 91, 98, 99, 102, 104, 107, 108], "2": [2, 3, 4, 5, 7, 10, 11, 13, 19, 20, 21, 23, 24, 26, 27, 28, 29, 31, 32, 37, 38, 39, 41, 42, 44, 46, 47, 48, 49, 50, 52, 54, 55, 56, 57, 60, 62, 63, 65, 66, 69, 70, 71, 73, 74, 78, 79, 81, 82, 96, 97, 105], "error": [2, 3, 5, 10, 38, 42, 43, 44, 46, 47, 57, 62, 63, 65, 66, 68, 69, 71, 73, 75, 77, 78, 81, 84, 86, 88, 89, 90, 93, 94, 95, 96, 98, 100], "erron": [2, 3, 37, 44, 47, 57, 62, 63, 71, 73, 74, 75, 104, 106], "import": [2, 3, 4, 5, 7, 8, 10, 13, 14, 15, 19, 20, 21, 23, 24, 26, 27, 29, 31, 32, 34, 37, 41, 43, 49, 52, 55, 56, 61, 65, 68, 73, 74, 79, 81, 82, 83, 86, 87, 93, 94, 95, 97, 98, 102, 103, 104, 106, 107, 108], "linear_model": [2, 5, 37, 57, 73, 83, 87, 88, 89, 90, 94, 95, 97, 99, 101, 104], "logisticregress": [2, 3, 5, 37, 57, 83, 87, 88, 89, 90, 94, 95, 97, 99, 101, 104], "logreg": 2, "cl": [2, 15, 31, 73, 83, 86, 87, 97, 99, 106], "pass": [2, 3, 5, 8, 10, 11, 13, 14, 15, 17, 24, 31, 34, 38, 41, 42, 44, 48, 49, 52, 54, 57, 60, 61, 63, 69, 70, 71, 73, 78, 79, 83, 87, 88, 89, 90, 94, 95, 96, 97, 99, 101, 103, 104, 106], "x_train": [2, 86, 89, 90, 99, 101, 102, 106], "labels_maybe_with_error": 2, "had": [2, 3, 73, 103], "issu": [2, 3, 4, 5, 6, 8, 11, 12, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 37, 38, 40, 41, 42, 43, 44, 52, 59, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 87, 92, 100, 101, 104, 105, 106], "pred": [2, 44, 57, 86, 87, 98, 105, 106], "x_test": [2, 86, 89, 90, 99, 102, 106], "might": [2, 5, 10, 52, 61, 73, 78, 86, 87, 89, 90, 91, 95, 97, 103], "case": [2, 3, 10, 14, 37, 49, 52, 61, 73, 86, 87, 88, 89, 90, 91, 93, 95, 96, 97, 98, 99, 104, 106, 108], "standard": [2, 3, 5, 31, 37, 44, 60, 62, 63, 65, 71, 73, 83, 86, 89, 90, 93, 96, 98, 99, 103], "adapt": [2, 38, 40, 57, 59, 73, 104], "skorch": [2, 73, 83, 97], "kera": [2, 59, 66, 69, 73, 83, 97, 103], "scikera": [2, 60, 73, 97], "open": [2, 41, 86, 87, 90, 93, 94, 96, 99, 102, 103, 104, 106, 108], "doesn": [2, 10, 73, 83], "t": [2, 3, 4, 7, 10, 18, 28, 29, 38, 39, 41, 42, 43, 44, 49, 55, 56, 65, 70, 71, 73, 79, 81, 82, 83, 89, 90, 91, 94, 95, 96, 98, 99, 102, 103, 106, 108], "alreadi": [2, 5, 10, 17, 38, 41, 42, 47, 52, 60, 61, 73, 83, 86, 87, 88, 89, 90, 91, 93, 94, 96, 97, 98, 99, 101, 103, 104, 106], "exist": [2, 5, 10, 13, 19, 38, 41, 42, 54, 56, 60, 66, 68, 70, 73, 83, 84, 86, 87, 89, 90, 94, 101, 108], "made": [2, 5, 17, 38, 42, 53, 73, 86, 87, 91, 94, 95, 97, 98, 101, 103, 105, 106], "easi": [2, 12, 47, 73, 89, 90, 96, 97, 99, 102], "inherit": [2, 7, 39, 73], "baseestim": [2, 42, 73], "yourmodel": [2, 73], "def": [2, 7, 15, 38, 42, 60, 73, 87, 88, 89, 90, 91, 95, 96, 97, 98, 99, 101, 102, 104, 106, 108], "self": [2, 3, 5, 7, 10, 13, 14, 15, 17, 32, 38, 39, 41, 42, 44, 49, 70, 71, 73, 86, 89, 91, 95, 96, 98, 102, 107, 108], "refer": [2, 10, 17, 38, 42, 43, 62, 63, 65, 66, 68, 69, 70, 73, 77, 78, 89, 90, 91, 93, 94, 95, 97, 98, 99, 102, 105, 106], "origin": [2, 5, 10, 42, 43, 44, 56, 57, 60, 62, 63, 66, 69, 70, 73, 74, 77, 79, 81, 86, 87, 89, 91, 93, 94, 95, 97, 99, 103, 104, 106, 108], "total": [2, 3, 4, 37, 41, 57, 62, 82, 91, 97, 107], "state": [2, 3, 5, 38, 39, 42, 48, 73, 99, 102, 103, 108], "art": [2, 39, 99, 102], "northcutt": [2, 3, 37, 70, 71], "et": [2, 3, 37, 39, 70, 71], "al": [2, 3, 37, 39, 70, 71], "2021": [2, 3, 37, 70, 71], "weak": [2, 69], "supervis": [2, 10, 89, 90, 97, 101], "find": [2, 5, 9, 10, 14, 15, 17, 20, 21, 23, 24, 26, 27, 28, 29, 32, 33, 37, 38, 40, 41, 42, 43, 44, 48, 54, 56, 57, 59, 66, 69, 70, 71, 73, 75, 79, 81, 83, 84, 89, 96, 98, 100, 105], "uncertainti": [2, 10, 46, 70, 73, 97, 104, 106], "It": [2, 3, 5, 7, 10, 13, 14, 17, 23, 28, 31, 33, 34, 35, 38, 42, 44, 47, 49, 52, 53, 55, 61, 68, 69, 73, 83, 89, 90, 91, 95, 97, 99, 102, 105], "work": [2, 3, 7, 10, 13, 31, 37, 38, 41, 42, 44, 47, 56, 57, 58, 60, 61, 71, 73, 83, 84, 87, 89, 90, 95, 96, 98, 104, 106], "includ": [2, 3, 5, 7, 10, 14, 19, 20, 21, 23, 24, 26, 27, 29, 31, 32, 34, 37, 38, 40, 41, 42, 52, 56, 57, 59, 61, 62, 65, 66, 70, 71, 73, 77, 78, 79, 81, 83, 84, 89, 90, 91, 93, 94, 95, 97, 98, 99, 102, 103, 104, 108], "deep": [2, 40, 42, 59, 60, 73, 94], "see": [2, 3, 5, 7, 10, 14, 15, 34, 37, 38, 41, 42, 43, 44, 49, 54, 57, 60, 62, 63, 65, 66, 69, 70, 71, 73, 79, 81, 83, 84, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 101, 102, 103, 104, 106, 107, 108], "subfield": 2, "theori": [2, 99], "machin": [2, 4, 5, 9, 10, 15, 17, 34, 40, 55, 59, 73, 86, 87, 89, 90, 95, 96, 98, 101], "across": [2, 3, 5, 7, 10, 14, 23, 37, 41, 49, 62, 69, 70, 89, 90, 91, 93, 94, 95, 96, 97, 98, 99, 102, 103, 105, 106], "varieti": [2, 86, 87, 97], "like": [2, 3, 5, 6, 7, 10, 15, 33, 37, 38, 41, 42, 44, 47, 57, 60, 61, 62, 65, 66, 68, 71, 73, 74, 77, 78, 79, 81, 82, 83, 84, 86, 87, 88, 89, 90, 93, 94, 95, 97, 98, 99, 101, 102, 103, 104, 106, 107, 108], "pu": [2, 57], "input": [2, 3, 5, 9, 17, 27, 37, 38, 41, 42, 47, 49, 52, 53, 56, 57, 58, 60, 69, 73, 83, 84, 87, 90, 91, 94, 96, 97, 98, 99, 101, 102, 103, 106, 107, 108], "discret": [2, 35, 44, 47, 57, 70, 71, 75, 77, 78], "vector": [2, 3, 4, 5, 10, 17, 44, 47, 49, 50, 52, 57, 70, 71, 83, 87, 88, 89, 90, 91, 93, 94, 98, 99, 102, 103, 104, 107, 108], "would": [2, 3, 5, 10, 38, 41, 42, 44, 53, 57, 63, 73, 83, 87, 89, 91, 97, 98, 99, 104, 106, 108], "obtain": [2, 5, 8, 10, 17, 44, 61, 63, 66, 69, 71, 74, 88, 90, 94, 97, 101, 103, 105, 107, 108], "been": [2, 4, 37, 44, 47, 52, 56, 57, 61, 62, 66, 68, 70, 71, 73, 88, 89, 93, 95, 97, 98, 99, 101, 102, 103, 104, 107, 108], "dure": [2, 10, 17, 52, 54, 70, 73, 86, 87, 88, 93, 94, 95, 97, 99, 102, 105, 106, 108], "denot": [2, 3, 47, 49, 57, 63, 70, 71, 81], "tild": 2, "paper": [2, 4, 10, 61, 70, 79, 81, 96, 99, 101, 104, 106, 108], "cv_n_fold": [2, 3, 73, 87], "5": [2, 3, 4, 5, 8, 10, 19, 20, 21, 23, 24, 26, 27, 29, 31, 32, 34, 37, 42, 44, 46, 48, 49, 57, 61, 62, 65, 66, 69, 73, 74, 81, 87, 89, 94, 96, 97, 102, 103, 104, 105, 107, 108], "converge_latent_estim": [2, 3], "pulearn": [2, 57], "find_label_issues_kwarg": [2, 10, 73, 84, 97, 99], "label_quality_scores_kwarg": [2, 10], "low_memori": [2, 63, 79, 97], "clean": [2, 68, 71, 73, 74, 83, 86, 87, 89, 90, 96, 106], "even": [2, 3, 7, 9, 10, 37, 41, 46, 47, 57, 73, 88, 95, 97, 98, 99, 101, 102, 103], "messi": [2, 73, 99], "ridden": [2, 73], "autom": [2, 9, 10, 73, 83, 86, 87, 90, 93, 94, 96, 97, 98, 99, 102, 104, 106], "robust": [2, 47, 52, 73, 90, 95, 97, 98], "prone": [2, 73], "out": [2, 3, 5, 10, 17, 29, 38, 42, 44, 49, 52, 60, 63, 64, 66, 69, 70, 71, 73, 74, 82, 83, 84, 87, 95, 96, 97, 99, 100, 102, 103, 104, 106, 107, 108], "current": [2, 3, 5, 7, 10, 11, 14, 15, 23, 38, 42, 43, 44, 49, 61, 68, 73, 89, 90, 97, 98, 101, 103], "intend": [2, 14, 15, 16, 17, 33, 34, 35, 45, 52, 61, 77, 81, 88, 89, 90, 94, 99], "A": [2, 3, 4, 5, 7, 10, 13, 14, 15, 19, 20, 21, 23, 24, 26, 27, 28, 29, 31, 32, 33, 34, 37, 38, 39, 42, 44, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 60, 61, 62, 65, 68, 69, 70, 71, 73, 75, 77, 78, 82, 84, 86, 87, 88, 89, 91, 93, 94, 95, 96, 97, 98, 99, 101, 103, 105, 108], "follow": [2, 3, 10, 15, 31, 35, 37, 38, 41, 42, 49, 51, 55, 61, 62, 66, 68, 69, 70, 73, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 99, 101, 102, 103, 104, 106, 107, 108], "tutori": [2, 83, 86, 87, 88, 89, 90, 91, 93, 94, 95, 97, 99, 101, 102, 103, 104, 106, 107, 108], "repo": 2, "wrapper": [2, 60, 86, 87, 88, 106], "around": [2, 68, 89, 90, 98, 103, 104, 108], "fasttext": 2, "store": [2, 4, 5, 10, 13, 14, 19, 20, 21, 23, 24, 26, 27, 28, 29, 31, 32, 34, 38, 41, 42, 70, 73, 86, 87, 93, 94, 95, 96, 97, 107, 108], "along": [2, 49, 63, 81, 89, 90, 91, 95, 97, 104], "dimens": [2, 57, 75, 78, 91, 97, 104, 107], "select": [2, 9, 10, 27, 51, 61, 71, 91, 98, 101, 104], "split": [2, 3, 5, 10, 13, 41, 49, 56, 57, 73, 86, 88, 89, 90, 91, 93, 94, 95, 96, 99, 100, 102, 105, 108], "cross": [2, 3, 10, 37, 44, 47, 48, 49, 63, 66, 69, 71, 73, 74, 84, 86, 87, 88, 89, 90, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 106, 107, 108], "fold": [2, 3, 37, 44, 47, 73, 86, 88, 93, 96, 97, 103, 107], "By": [2, 37, 62, 63, 73, 89, 95, 107], "need": [2, 3, 10, 11, 37, 38, 41, 42, 44, 52, 54, 62, 63, 65, 70, 73, 83, 87, 88, 89, 90, 94, 95, 97, 98, 99, 101, 102, 103, 107], "holdout": [2, 3, 73], "comput": [2, 3, 4, 5, 7, 8, 10, 20, 21, 23, 24, 27, 28, 29, 32, 37, 38, 39, 41, 42, 44, 46, 47, 48, 49, 52, 53, 54, 57, 61, 62, 63, 65, 68, 69, 70, 71, 73, 74, 75, 77, 83, 84, 87, 89, 90, 96, 99, 100, 103, 104, 106, 107], "them": [2, 3, 5, 7, 9, 10, 12, 13, 28, 33, 36, 38, 40, 41, 42, 44, 54, 59, 61, 70, 73, 84, 86, 87, 89, 90, 91, 93, 94, 95, 97, 101, 102, 104, 106, 107, 108], "numer": [2, 3, 4, 5, 10, 14, 23, 31, 35, 49, 52, 53, 68, 70, 73, 78, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 95, 98, 99, 101, 102, 104, 106], "consist": [2, 3, 10, 38, 42, 51, 57, 61, 95, 107, 108], "latent": [2, 3, 47], "thei": [2, 3, 5, 16, 22, 25, 27, 30, 38, 39, 40, 42, 44, 45, 52, 55, 57, 60, 63, 68, 71, 73, 74, 77, 81, 83, 87, 88, 89, 90, 91, 93, 94, 97, 98, 99, 101, 104, 106, 108], "relat": [2, 3, 10, 14, 20, 21, 27, 28, 29, 32, 47, 57, 62, 73, 90, 94, 95], "close": [2, 3, 10, 41, 47, 70, 88, 89, 90, 91, 93, 94, 95, 97, 98, 99, 103], "form": [2, 3, 10, 38, 39, 42, 47, 56, 57, 71, 73, 97], "equival": [2, 3, 38, 42, 47, 70, 104, 106], "iter": [2, 3, 37, 38, 42, 44, 57, 62, 63, 73, 97, 101, 107], "enforc": [2, 38, 42, 57], "perfectli": [2, 37, 62, 99], "certain": [2, 3, 5, 10, 38, 42, 60, 69, 73, 89, 90, 95, 96, 103, 104], "dict": [2, 3, 5, 10, 13, 14, 15, 17, 19, 20, 21, 23, 24, 26, 27, 28, 29, 31, 32, 37, 38, 41, 42, 44, 48, 49, 57, 60, 61, 62, 63, 65, 66, 68, 69, 70, 71, 73, 81, 89, 90, 91, 97, 98, 108], "keyword": [2, 3, 5, 10, 11, 17, 24, 28, 31, 38, 41, 42, 44, 46, 49, 52, 54, 56, 60, 61, 63, 69, 70, 71, 73, 78, 79, 81, 89], "filter": [2, 3, 10, 41, 43, 56, 62, 64, 65, 67, 69, 76, 77, 78, 80, 81, 82, 83, 84, 86, 87, 88, 91, 94, 96, 97, 98, 102, 103, 106, 107, 108], "find_label_issu": [2, 3, 10, 31, 40, 41, 43, 44, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 97, 102, 103, 106, 107, 108], "particularli": [2, 83, 98, 101, 104], "filter_bi": [2, 3, 41, 44, 63, 84, 97], "frac_nois": [2, 44, 63, 79, 97], "min_examples_per_class": [2, 44, 63, 97, 99], "impact": [2, 4, 10, 89, 90, 91, 95], "ml": [2, 4, 5, 9, 10, 16, 73, 83, 86, 87, 89, 90, 91, 93, 94, 95, 96, 100, 101, 102, 104, 105, 106], "accuraci": [2, 39, 71, 86, 87, 88, 91, 97, 98, 99, 101, 104, 106, 107], "n_job": [2, 41, 44, 63, 75, 77, 79, 97, 98, 104, 107], "disabl": [2, 38, 42, 44, 104], "process": [2, 3, 7, 14, 17, 33, 38, 41, 42, 44, 52, 56, 61, 63, 69, 75, 77, 79, 87, 88, 89, 95, 97, 98, 101, 105], "caus": [2, 44, 49, 89, 90, 95, 97], "rank": [2, 3, 10, 37, 41, 43, 44, 49, 62, 63, 64, 66, 67, 69, 70, 72, 76, 78, 79, 80, 82, 83, 84, 86, 87, 89, 90, 96, 97, 102, 103, 104, 107, 108], "get_label_quality_scor": [2, 40, 41, 43, 44, 45, 49, 61, 63, 64, 65, 66, 67, 68, 71, 72, 74, 76, 77, 79, 80, 81, 84, 97, 99, 102, 103, 107, 108], "adjust_pred_prob": [2, 10, 65, 70, 71, 99], "control": [2, 5, 9, 10, 17, 41, 44, 61, 69, 70, 73, 79, 81, 89, 90, 95, 96, 97], "how": [2, 3, 5, 10, 13, 14, 15, 17, 23, 37, 38, 39, 41, 42, 47, 57, 61, 62, 65, 66, 68, 70, 71, 73, 77, 81, 83, 86, 87, 89, 90, 91, 93, 94, 95, 96, 98, 103, 104, 105, 106, 107], "much": [2, 10, 37, 41, 44, 73, 95, 97, 101], "output": [2, 3, 5, 10, 17, 33, 38, 39, 42, 47, 57, 60, 61, 62, 66, 68, 69, 70, 73, 77, 78, 81, 82, 83, 84, 87, 88, 89, 91, 94, 95, 96, 97, 98, 103, 104, 105, 106], "print": [2, 5, 7, 19, 20, 21, 23, 24, 26, 27, 28, 29, 31, 32, 34, 35, 37, 38, 41, 42, 44, 57, 61, 62, 63, 68, 70, 71, 73, 75, 77, 78, 82, 84, 86, 87, 88, 90, 91, 94, 95, 96, 97, 98, 99, 101, 102, 103, 104, 106, 107, 108], "suppress": [2, 41, 61, 68, 70, 71, 73, 75, 77, 78, 107, 108], "statement": [2, 41, 61, 68, 70, 71, 73, 75, 77, 78], "big": [2, 41, 63, 69, 73, 99], "limit": [2, 5, 17, 41, 52, 63, 83, 95, 103, 107, 108], "memori": [2, 38, 41, 42, 63, 69, 75, 77, 89, 107], "experiment": [2, 38, 39, 41, 42, 43, 63, 84, 86, 87, 90, 93, 94, 96, 97, 99, 102, 104, 106], "label_issues_batch": [2, 40, 63, 97], "find_label_issues_batch": [2, 40, 41, 63, 97], "pred_prob": [2, 3, 5, 8, 10, 11, 17, 24, 26, 27, 29, 32, 33, 37, 41, 43, 44, 46, 47, 48, 49, 50, 57, 58, 61, 62, 63, 65, 66, 69, 70, 71, 75, 77, 78, 79, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 99, 101, 102, 103, 105, 106], "threshold": [2, 3, 4, 7, 10, 19, 20, 21, 23, 29, 31, 32, 41, 55, 68, 69, 70, 71, 77, 81, 89, 95, 103, 104, 107, 108], "inverse_noise_matrix": [2, 3, 10, 47, 57, 84, 99], "label_issu": [2, 41, 44, 63, 66, 73, 75, 84, 86, 87, 88, 91, 94, 97, 98, 99, 102, 106], "clf_kwarg": [2, 3, 10, 73], "clf_final_kwarg": [2, 73], "validation_func": [2, 3, 10], "correct": [2, 5, 9, 10, 37, 41, 44, 46, 52, 61, 62, 63, 65, 66, 68, 69, 71, 73, 74, 77, 81, 83, 86, 87, 88, 90, 91, 93, 94, 96, 99, 101, 102, 103, 104, 105, 106], "result": [2, 3, 9, 10, 14, 17, 19, 20, 21, 23, 24, 26, 27, 28, 29, 31, 32, 38, 41, 42, 44, 46, 55, 57, 63, 65, 66, 69, 71, 73, 74, 75, 77, 81, 86, 87, 88, 89, 90, 91, 93, 94, 97, 98, 99, 101, 102, 106, 107, 108], "identifi": [2, 3, 5, 7, 9, 10, 13, 17, 28, 34, 37, 41, 43, 44, 52, 63, 66, 69, 71, 73, 74, 75, 78, 79, 81, 82, 83, 86, 87, 88, 89, 90, 91, 93, 94, 96, 99, 102, 104, 106, 107, 108], "final": [2, 10, 73, 86, 93, 95, 98, 103, 105, 106], "remain": [2, 73, 84, 86, 87, 91, 95, 98, 102, 106, 108], "datasetlik": [2, 57, 73], "beyond": [2, 5, 7, 9, 10, 12, 36, 83, 86, 87, 98, 106, 107], "pd": [2, 3, 5, 7, 14, 19, 20, 21, 23, 24, 26, 27, 29, 31, 32, 37, 48, 60, 61, 62, 73, 81, 86, 87, 88, 89, 90, 93, 94, 95, 97, 98, 99, 101, 106, 108], "datafram": [2, 3, 5, 7, 13, 14, 19, 20, 21, 23, 24, 26, 27, 28, 29, 31, 32, 37, 41, 48, 57, 58, 60, 61, 62, 73, 78, 82, 84, 87, 88, 89, 90, 91, 93, 94, 95, 97, 98, 99, 101, 106, 107, 108], "scipi": [2, 4, 5, 14, 53, 57, 70, 95], "spars": [2, 4, 5, 10, 14, 17, 19, 32, 52, 57, 58, 93, 95], "csr_matrix": [2, 4, 5, 14, 17, 19, 32, 52, 95], "torch": [2, 38, 39, 42, 87, 88, 91, 94, 96, 104], "util": [2, 5, 10, 17, 34, 38, 39, 42, 45, 52, 60, 61, 66, 69, 73, 83, 84, 88, 89, 90, 91, 97, 99, 104], "tensorflow": [2, 57, 60, 83, 88, 97], "object": [2, 5, 10, 13, 14, 17, 33, 34, 38, 39, 41, 42, 49, 52, 54, 57, 58, 60, 63, 66, 67, 68, 69, 70, 73, 81, 83, 87, 88, 90, 91, 93, 95, 97, 98, 99, 100, 102, 106], "list": [2, 3, 5, 10, 13, 15, 19, 20, 21, 23, 24, 26, 27, 28, 29, 31, 32, 37, 38, 39, 41, 42, 43, 44, 50, 52, 56, 57, 58, 60, 61, 62, 63, 65, 66, 68, 69, 70, 71, 73, 77, 78, 79, 81, 82, 84, 87, 88, 89, 90, 91, 96, 97, 98, 99, 102, 103, 106, 108], "index_list": 2, "subset": [2, 3, 5, 17, 37, 41, 44, 57, 71, 78, 82, 86, 87, 88, 91, 93, 94, 95, 97, 102, 103, 104, 105, 106, 108], "wa": [2, 3, 13, 15, 41, 55, 57, 61, 62, 68, 70, 82, 86, 87, 88, 89, 90, 91, 93, 94, 97, 98, 99, 102, 103, 105, 107, 108], "abl": [2, 3, 10, 73, 88, 97, 98, 99, 101, 102], "format": [2, 3, 5, 10, 13, 33, 38, 41, 42, 44, 47, 48, 49, 50, 52, 57, 58, 60, 61, 62, 63, 66, 69, 70, 71, 73, 75, 77, 78, 81, 82, 86, 89, 90, 91, 93, 95, 96, 98, 101, 106, 107, 108], "make": [2, 3, 5, 19, 38, 41, 42, 49, 60, 83, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 99, 101, 102, 103, 104, 106], "sure": [2, 5, 41, 44, 49, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 98, 101, 102, 103, 104, 106], "shuffl": [2, 10, 57, 88, 91, 94, 95, 102, 104], "ha": [2, 3, 5, 6, 10, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 31, 32, 38, 42, 43, 47, 49, 52, 56, 57, 61, 66, 68, 73, 79, 81, 82, 83, 86, 87, 88, 89, 90, 93, 94, 95, 98, 99, 101, 102, 103, 104, 105, 106, 108], "batch": [2, 41, 57, 60, 61, 75, 77, 91, 97, 104], "order": [2, 5, 10, 35, 37, 38, 42, 43, 44, 47, 48, 49, 55, 57, 61, 62, 63, 66, 69, 70, 71, 75, 78, 79, 81, 82, 84, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 99, 102, 103, 106, 107, 108], "destroi": [2, 57], "oper": [2, 38, 41, 42, 52, 57, 60, 71, 83, 86, 87, 94, 97, 104], "eg": [2, 5, 10, 57, 66, 69, 89, 90, 97, 98], "repeat": [2, 57, 61, 101, 104], "appli": [2, 10, 35, 38, 40, 42, 44, 49, 50, 52, 56, 57, 65, 70, 79, 83, 86, 87, 88, 89, 90, 91, 93, 95, 97, 98, 101, 102, 104, 105, 106, 107], "array_lik": [2, 3, 37, 44, 57, 63, 70, 74], "some": [2, 3, 5, 10, 15, 23, 37, 38, 40, 42, 44, 47, 52, 56, 57, 59, 61, 62, 63, 65, 66, 69, 70, 71, 73, 75, 84, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 99, 101, 102, 103, 105, 106, 107, 108], "seri": [2, 3, 41, 57, 58, 73, 81, 97, 98], "row": [2, 3, 5, 10, 14, 28, 33, 37, 41, 44, 46, 47, 52, 53, 57, 61, 62, 63, 65, 70, 71, 73, 78, 79, 81, 82, 86, 88, 91, 93, 94, 95, 96, 97, 98, 101, 102, 104, 108], "rather": [2, 3, 5, 10, 27, 37, 57, 60, 61, 68, 77, 81, 87, 96, 98, 101, 105, 106, 107, 108], "leav": [2, 44], "per": [2, 3, 5, 7, 10, 14, 37, 41, 44, 49, 56, 61, 62, 63, 65, 68, 69, 71, 74, 75, 77, 81, 90, 97, 103, 108], "determin": [2, 3, 10, 13, 17, 23, 27, 31, 37, 41, 44, 49, 52, 57, 61, 63, 66, 68, 71, 77, 81, 89, 95, 97, 98, 101, 103, 104, 106], "cutoff": [2, 3, 53, 104], "consid": [2, 3, 4, 5, 10, 14, 17, 24, 27, 29, 32, 37, 38, 42, 44, 52, 54, 57, 61, 68, 70, 71, 74, 77, 81, 86, 87, 88, 91, 93, 94, 95, 97, 98, 99, 103, 104, 105, 106, 107], "section": [2, 3, 7, 10, 84, 91, 93, 95, 97, 98, 103], "3": [2, 3, 4, 5, 7, 10, 11, 35, 37, 38, 42, 44, 47, 48, 49, 50, 53, 55, 56, 57, 60, 63, 70, 71, 73, 74, 79, 81, 96, 97, 105], "equat": [2, 3, 47], "advanc": [2, 3, 5, 9, 10, 17, 68, 70, 81, 84, 90, 92, 95, 97, 98, 99], "user": [2, 3, 5, 9, 10, 15, 17, 28, 33, 34, 35, 38, 42, 44, 52, 60, 68, 70, 71, 73, 77, 81, 98, 99], "specifi": [2, 3, 4, 5, 8, 10, 14, 15, 17, 19, 32, 34, 38, 41, 42, 44, 49, 52, 54, 56, 60, 61, 62, 63, 66, 68, 70, 71, 73, 74, 82, 84, 87, 88, 90, 91, 94, 95, 98, 101, 103, 106], "automat": [2, 3, 5, 27, 37, 83, 86, 87, 90, 91, 93, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108], "greater": [2, 3, 4, 5, 7, 9, 10, 29, 41, 53, 57, 68, 90, 96, 97, 108], "count": [2, 23, 27, 37, 41, 44, 47, 57, 62, 63, 69, 84, 91, 95, 97, 103], "observ": [2, 3, 47, 54, 88, 89, 90, 101, 104, 106], "mislabel": [2, 10, 37, 41, 43, 44, 47, 61, 62, 63, 66, 68, 71, 77, 79, 81, 82, 83, 86, 87, 88, 91, 93, 94, 97, 98, 99, 103, 106], "one": [2, 3, 5, 7, 10, 27, 37, 38, 41, 42, 43, 44, 49, 55, 57, 61, 62, 63, 65, 66, 68, 69, 70, 71, 73, 74, 75, 77, 78, 79, 81, 82, 83, 86, 87, 88, 89, 90, 91, 93, 94, 95, 98, 101, 104, 105, 106, 108], "get_label_issu": [2, 40, 41, 72, 73, 86, 87, 99, 106], "either": [2, 3, 4, 7, 10, 38, 41, 42, 44, 53, 61, 63, 68, 70, 71, 75, 77, 90, 95, 97, 102, 103], "boolean": [2, 7, 10, 23, 41, 44, 54, 56, 61, 63, 66, 71, 73, 75, 77, 78, 83, 87, 88, 90, 91, 94, 97, 103, 106, 107], "label_issues_mask": [2, 44, 71, 73, 84], "indic": [2, 3, 4, 5, 7, 10, 14, 23, 37, 41, 42, 43, 44, 46, 49, 52, 54, 57, 60, 61, 62, 63, 65, 66, 68, 69, 70, 71, 73, 74, 77, 79, 81, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 99, 101, 102, 103, 104, 106, 107, 108], "its": [2, 5, 7, 9, 10, 17, 38, 41, 42, 44, 52, 54, 55, 56, 63, 66, 69, 70, 71, 73, 75, 79, 81, 83, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 99, 101, 103, 104, 105, 106, 107, 108], "return_indices_ranked_bi": [2, 41, 44, 63, 79, 84, 86, 87, 97, 99], "significantli": [2, 10, 91, 95, 99, 101, 105], "reduc": [2, 41, 44, 57, 88, 97], "time": [2, 10, 38, 41, 42, 57, 61, 82, 84, 89, 91, 97, 98, 103, 107, 108], "take": [2, 5, 10, 37, 38, 42, 48, 49, 52, 54, 57, 60, 71, 86, 91, 93, 101, 102, 103, 108], "run": [2, 5, 6, 7, 9, 10, 11, 12, 15, 17, 27, 28, 33, 36, 38, 41, 42, 54, 73, 83, 86, 87, 88, 89, 90, 91, 93, 94, 96, 98, 99, 101, 102, 103, 104, 106, 108], "skip": [2, 10, 38, 42, 73, 88, 95, 97, 98, 102, 108], "slow": [2, 3], "step": [2, 7, 27, 49, 69, 91, 95, 98, 99, 101, 105], "caution": [2, 5, 97, 98], "previous": [2, 5, 14, 57, 70, 73, 84, 86, 88, 89, 93, 94, 98, 101, 105], "assign": [2, 7, 10, 19, 20, 21, 23, 24, 26, 27, 28, 29, 31, 32, 33, 38, 42, 48, 49, 57, 73, 86, 89, 91, 93, 95, 97, 106, 107, 108], "individu": [2, 4, 7, 10, 14, 27, 38, 42, 43, 61, 65, 68, 71, 73, 79, 81, 84, 86, 90, 93, 95, 96, 97, 101, 102, 103, 108], "still": [2, 41, 42, 57, 70, 86, 91, 97, 104], "extra": [2, 38, 42, 57, 60, 61, 62, 73, 91, 94, 97, 98, 101, 104], "receiv": [2, 10, 38, 42, 43, 62, 65, 66, 73, 75, 79, 90, 103], "overwritten": [2, 73], "callabl": [2, 3, 4, 10, 27, 38, 42, 49, 52, 53, 54, 56, 60, 65, 97], "x_val": 2, "y_val": 2, "map": [2, 3, 13, 41, 42, 45, 48, 56, 57, 69, 71, 73, 78, 88, 89, 90, 91, 95, 97, 99, 102, 108], "appropri": [2, 10, 17, 35, 53, 63, 71, 89, 93, 98, 102, 103], "earli": [2, 91], "stop": [2, 91], "x_valid": 2, "y_valid": 2, "could": [2, 7, 10, 23, 37, 57, 70, 86, 89, 91, 93, 95, 98, 102, 106, 108], "f": [2, 7, 86, 87, 88, 89, 91, 93, 94, 95, 96, 97, 98, 99, 101, 102, 103, 104, 106], "ignor": [2, 38, 42, 56, 60, 73, 78, 82, 88, 89, 90, 91, 96, 98, 99, 101, 102, 104, 106, 108], "allow": [2, 37, 38, 41, 42, 46, 54, 57, 61, 69, 70, 73, 75, 77, 87, 88, 91, 95, 97, 105, 107], "access": [2, 10, 14, 38, 42, 73, 90, 91, 96, 102], "hyperparamet": [2, 65, 70, 91], "purpos": [2, 52, 89, 90, 95, 97, 102, 106], "want": [2, 5, 10, 37, 41, 52, 58, 61, 63, 73, 87, 89, 91, 94, 96, 98, 101, 103, 104, 105, 107, 108], "explicitli": [2, 8, 10, 42, 52, 73], "yourself": [2, 5, 41, 90, 95], "altern": [2, 7, 10, 49, 54, 57, 60, 61, 71, 84, 87, 88, 91, 93, 94, 96, 97, 98, 99, 101, 102, 104, 106], "same": [2, 3, 5, 7, 9, 10, 13, 15, 17, 27, 31, 38, 41, 42, 44, 52, 57, 60, 61, 63, 70, 71, 73, 77, 78, 81, 82, 83, 86, 87, 89, 90, 91, 93, 94, 95, 97, 98, 102, 103, 104, 105, 106, 107], "effect": [2, 10, 28, 38, 42, 61, 70, 73, 86, 87, 90, 91, 93, 94, 95, 96, 97, 98, 99, 102, 104, 106], "offer": [2, 5, 9, 10, 87, 88, 89, 90, 94, 97, 98, 99, 102], "after": [2, 3, 5, 10, 14, 19, 20, 21, 23, 24, 26, 27, 28, 29, 31, 32, 38, 42, 57, 61, 73, 87, 89, 91, 94, 95, 97, 98, 99, 101, 103, 104, 105, 106, 107], "attribut": [2, 5, 7, 10, 13, 14, 17, 19, 20, 21, 23, 24, 26, 27, 28, 29, 31, 32, 33, 34, 35, 38, 41, 42, 49, 54, 70, 73, 86, 89, 95], "label_issues_df": [2, 73, 91], "similar": [2, 10, 37, 38, 42, 54, 57, 61, 65, 66, 68, 70, 73, 77, 81, 89, 90, 91, 93, 94, 95, 97, 98, 99, 103, 104, 107], "document": [2, 3, 5, 15, 17, 37, 38, 41, 42, 43, 44, 49, 56, 60, 62, 63, 65, 68, 69, 70, 73, 77, 78, 79, 81, 84, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 99, 101, 102, 103, 104, 106, 108], "descript": [2, 5, 7, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 37, 43, 57, 66, 73, 89, 90], "were": [2, 3, 5, 10, 37, 42, 52, 62, 68, 81, 86, 88, 93, 97, 99, 101, 103, 105, 107], "present": [2, 3, 5, 10, 13, 14, 21, 37, 57, 70, 78, 83, 91, 95, 97, 98, 104], "actual": [2, 3, 5, 10, 37, 52, 61, 62, 71, 90, 97, 99, 105, 108], "num_class": [2, 37, 41, 57, 60, 86, 87, 88, 89, 90, 91, 93, 94, 97, 98, 99, 101, 102, 104], "uniqu": [2, 32, 57, 78, 89, 95, 97, 98, 102, 104], "given_label": [2, 5, 11, 26, 31, 37, 47, 73, 78, 82, 87, 88, 89, 90, 91, 93, 94, 95, 98, 99, 106, 107, 108], "normal": [2, 3, 19, 27, 32, 44, 46, 49, 55, 56, 57, 71, 95, 97, 99, 104], "trick": [2, 97], "distribut": [2, 3, 5, 10, 27, 29, 37, 42, 44, 48, 55, 61, 69, 70, 71, 83, 89, 90, 91, 93, 94, 95, 98, 103, 104], "account": [2, 37, 61, 65, 70, 71, 87, 94, 97, 99, 101, 102, 104, 106], "word": [2, 3, 56, 81, 82, 97], "remov": [2, 10, 32, 37, 38, 42, 44, 73, 83, 86, 87, 91, 94, 95, 96, 97, 98, 102, 104, 106], "so": [2, 3, 5, 6, 7, 10, 15, 27, 35, 37, 38, 41, 42, 44, 52, 57, 61, 62, 68, 71, 73, 77, 81, 88, 89, 90, 91, 94, 95, 98, 99, 102, 104, 107], "proportion": [2, 10, 44], "just": [2, 3, 5, 10, 14, 33, 37, 39, 41, 57, 60, 71, 73, 75, 83, 84, 86, 87, 88, 90, 91, 93, 94, 95, 97, 99, 102, 103, 104, 105, 106, 107], "procedur": 2, "get": [2, 3, 5, 8, 10, 11, 14, 32, 38, 39, 42, 44, 49, 55, 56, 57, 61, 63, 65, 70, 71, 73, 74, 75, 83, 86, 87, 88, 91, 94, 95, 96, 97, 98, 99, 104, 105, 106], "detect": [2, 5, 7, 9, 14, 15, 17, 19, 23, 29, 43, 52, 55, 64, 66, 67, 68, 69, 70, 71, 72, 73, 76, 80, 83, 86, 87, 89, 92, 96, 98, 100, 102, 106, 107, 108], "arg": [2, 13, 23, 28, 32, 38, 39, 42, 49, 57, 71, 73, 98], "kwarg": [2, 7, 10, 15, 17, 19, 20, 21, 23, 24, 26, 27, 28, 29, 31, 32, 34, 38, 41, 42, 43, 49, 52, 60, 69, 73, 75, 77, 78, 79, 97], "test": [2, 5, 10, 27, 42, 49, 52, 60, 73, 83, 86, 87, 89, 90, 91, 93, 94, 100, 105, 106, 108], "expect": [2, 3, 10, 38, 42, 44, 49, 52, 61, 70, 71, 73, 86, 87, 97, 98, 99, 101, 102, 103, 106, 108], "class_predict": 2, "evalu": [2, 10, 38, 39, 40, 41, 42, 69, 73, 86, 87, 88, 89, 90, 91, 97, 99, 101, 105, 106, 107], "simpli": [2, 10, 37, 71, 83, 87, 89, 90, 93, 94, 97, 99, 102, 106, 107, 108], "quantifi": [2, 4, 5, 7, 10, 14, 44, 65, 70, 73, 83, 90, 91, 93, 94, 95, 98, 99, 103], "save_spac": [2, 10, 72, 73], "potenti": [2, 10, 37, 44, 56, 63, 66, 69, 71, 73, 75, 77, 82, 84, 86, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 99, 102, 103, 107, 108], "cach": [2, 87, 94], "panda": [2, 5, 7, 13, 19, 20, 21, 23, 24, 26, 27, 29, 31, 32, 37, 57, 58, 60, 61, 62, 84, 86, 87, 88, 89, 90, 93, 94, 95, 96, 97, 98, 99, 101, 106, 107], "unlik": [2, 10, 44, 46, 49, 60, 62, 63, 65, 81, 89, 98, 101, 102, 104, 106], "both": [2, 5, 10, 17, 27, 37, 38, 42, 44, 52, 57, 61, 63, 71, 75, 77, 82, 83, 89, 91, 97, 98, 99, 101, 108], "mask": [2, 41, 44, 56, 57, 63, 66, 71, 73, 75, 77, 78, 83, 96, 97, 101, 103, 107, 108], "prefer": [2, 71, 79, 102], "plan": 2, "subsequ": [2, 3, 38, 42, 54, 87, 94, 97, 99, 103], "invok": [2, 38, 42, 99, 105], "scratch": [2, 52, 73], "To": [2, 5, 7, 9, 10, 12, 14, 17, 27, 36, 38, 41, 42, 43, 44, 60, 61, 63, 65, 69, 70, 71, 73, 74, 75, 77, 83, 86, 87, 88, 89, 90, 91, 93, 94, 95, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108], "share": [2, 10, 71, 73], "mostli": [2, 57, 68, 73, 98, 102, 106], "longer": [2, 35, 48, 49, 56, 73, 84, 87, 94, 97, 98, 103], "info": [2, 5, 7, 10, 14, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 37, 62, 73, 81, 90, 95, 96, 108], "about": [2, 3, 5, 7, 10, 14, 19, 20, 21, 23, 24, 26, 27, 28, 29, 31, 32, 34, 37, 39, 41, 46, 61, 62, 65, 69, 73, 78, 81, 88, 89, 91, 93, 94, 95, 96, 97, 98, 99, 101, 104], "docstr": [2, 37, 38, 42, 57, 73, 96, 99], "unless": [2, 38, 42, 52, 73, 97], "our": [2, 3, 10, 60, 61, 71, 73, 83, 86, 87, 88, 89, 90, 91, 93, 94, 95, 97, 98, 99, 101, 102, 103, 104, 105, 106, 107, 108], "is_label_issu": [2, 11, 31, 73, 87, 88, 89, 90, 91, 93, 94, 95, 98, 99, 102, 106], "entir": [2, 10, 27, 41, 44, 47, 62, 63, 68, 71, 73, 75, 77, 78, 83, 89, 90, 95, 97, 98, 103, 104, 105, 107, 108], "accur": [2, 3, 5, 9, 10, 17, 37, 41, 44, 53, 61, 62, 63, 66, 69, 71, 73, 74, 75, 77, 78, 84, 86, 87, 90, 91, 93, 94, 95, 96, 97, 98, 101, 102, 104, 106], "label_qu": [2, 61, 73, 87, 99, 101, 106], "measur": [2, 5, 37, 61, 62, 73, 83, 86, 95, 96, 97, 98, 99, 101, 102, 106, 107, 108], "qualiti": [2, 3, 5, 7, 9, 10, 14, 31, 32, 37, 41, 43, 44, 46, 49, 61, 62, 63, 65, 66, 68, 71, 73, 74, 77, 79, 81, 83, 84, 88, 89, 91, 97, 98, 100], "lower": [2, 4, 5, 7, 10, 14, 29, 41, 49, 55, 61, 62, 65, 68, 69, 71, 73, 74, 77, 81, 87, 88, 90, 91, 93, 94, 95, 97, 98, 101, 102, 103, 104, 106, 107, 108], "eas": 2, "comparison": [2, 38, 42, 69, 98, 99, 101], "against": [2, 38, 42, 89, 93, 95, 97, 98, 101, 102], "predicted_label": [2, 5, 11, 26, 31, 73, 78, 82, 87, 88, 89, 90, 91, 93, 94, 95, 98, 99, 106, 107], "ad": [2, 38, 42, 90, 101, 106], "precis": [2, 53, 55, 63, 66, 69, 95, 96, 97, 99, 107, 108], "definit": [2, 7, 35, 49, 73, 86, 93], "accessor": [2, 73], "describ": [2, 10, 19, 61, 70, 71, 73, 79, 81, 99, 101, 102, 103, 105, 108], "precomput": [2, 4, 5, 47, 52, 73, 96], "clear": [2, 38, 42, 54, 73, 87, 94, 95, 106], "save": [2, 5, 17, 38, 41, 42, 69, 73, 95, 97, 103, 107, 108], "space": [2, 5, 10, 70, 73, 91, 93, 95, 96], "place": [2, 38, 42, 52, 57, 73, 86, 101], "larg": [2, 9, 10, 41, 52, 73, 91, 97, 103, 104, 107, 108], "deploi": [2, 9, 10, 73, 91, 97, 98], "care": [2, 10, 38, 42, 52, 73, 94, 95, 97, 99], "avail": [2, 4, 5, 7, 10, 13, 15, 34, 42, 54, 73, 97, 98, 99, 101, 103, 106], "cannot": [2, 5, 13, 15, 57, 98, 105, 108], "anymor": 2, "classmethod": [2, 19, 20, 21, 23, 24, 26, 27, 28, 29, 31, 32, 35, 42, 49, 73], "__init_subclass__": [2, 40, 42, 72, 73], "set_": [2, 42, 73], "_request": [2, 42, 73], "pep": [2, 42, 73], "487": [2, 42, 73], "look": [2, 5, 7, 10, 17, 38, 42, 57, 73, 78, 86, 89, 90, 93, 94, 97, 98, 99, 101, 102, 103, 104, 107, 108], "inform": [2, 5, 7, 10, 14, 17, 34, 38, 42, 54, 57, 61, 62, 66, 69, 73, 78, 81, 82, 83, 88, 89, 93, 94, 95, 96, 98, 99, 101, 104, 107, 108], "__metadata_request__": [2, 42, 73], "infer": [2, 42, 57, 73, 78, 82, 86, 87, 91, 101, 102], "signatur": [2, 38, 42, 73], "accept": [2, 38, 42, 54, 55, 71, 73, 89, 90, 97], "metadata": [2, 10, 42, 73, 91, 108], "through": [2, 5, 7, 42, 73, 87, 88, 90, 94, 95, 96, 97, 98, 101, 103, 104], "develop": [2, 9, 42, 54, 73, 97, 99, 108], "request": [2, 42, 73, 86, 87, 90, 94, 95, 96, 102, 108], "those": [2, 3, 4, 10, 41, 42, 44, 51, 60, 61, 63, 69, 73, 77, 81, 82, 83, 88, 91, 95, 97, 98, 103, 107], "http": [2, 4, 5, 7, 9, 10, 12, 19, 36, 38, 39, 41, 42, 46, 54, 57, 66, 69, 70, 73, 83, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 98, 99, 101, 102, 103, 104, 106, 107, 108], "www": [2, 42, 73, 104], "org": [2, 4, 19, 38, 39, 42, 54, 57, 70, 73, 97, 98, 99, 108], "dev": [2, 42, 73], "0487": [2, 42, 73], "get_metadata_rout": [2, 40, 42, 72, 73], "rout": [2, 42, 73], "pleas": [2, 38, 42, 60, 73, 83, 87, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 101, 102, 104, 106, 108], "guid": [2, 7, 10, 42, 73, 84, 88, 89, 90, 91, 92, 93, 94, 95, 98, 99], "mechan": [2, 38, 42, 73], "metadatarequest": [2, 42, 73], "encapsul": [2, 17, 42, 68, 73], "get_param": [2, 40, 42, 59, 60, 72, 73], "subobject": [2, 42, 73], "param": [2, 10, 38, 42, 60, 70, 73, 97], "name": [2, 5, 6, 7, 10, 11, 13, 14, 33, 35, 37, 38, 42, 48, 49, 53, 57, 60, 61, 62, 69, 73, 78, 82, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 99, 102, 106, 107, 108], "set_fit_request": [2, 40, 42, 72, 73], "str": [2, 3, 4, 5, 13, 14, 15, 17, 19, 20, 21, 23, 24, 26, 27, 28, 29, 31, 32, 34, 35, 37, 38, 41, 42, 44, 47, 49, 52, 53, 54, 55, 56, 57, 60, 61, 62, 66, 68, 69, 71, 73, 78, 82, 88, 89, 95, 97, 101, 102, 103, 108], "unchang": [2, 38, 42, 73, 95, 108], "relev": [2, 10, 17, 27, 42, 73, 91, 93, 95], "enable_metadata_rout": [2, 42, 73], "set_config": [2, 42, 73], "meta": [2, 42, 73], "rais": [2, 4, 5, 13, 14, 35, 38, 42, 46, 49, 52, 55, 73, 97], "alia": [2, 38, 42, 73], "metadata_rout": [2, 42, 73], "retain": [2, 42, 57, 73], "chang": [2, 33, 35, 38, 41, 42, 46, 73, 81, 86, 87, 88, 89, 94, 97, 98, 103, 104, 108], "version": [2, 4, 5, 7, 9, 10, 12, 16, 22, 25, 30, 36, 38, 40, 42, 45, 46, 57, 59, 60, 71, 73, 83, 86, 87, 88, 89, 90, 91, 93, 94, 96, 97, 98, 99, 101, 102, 103, 104, 106, 108], "sub": [2, 42, 68, 73], "pipelin": [2, 42, 73, 106], "otherwis": [2, 4, 7, 10, 35, 37, 38, 41, 42, 44, 50, 53, 55, 56, 57, 63, 73, 75, 77, 78, 82, 83, 87, 94, 97, 98], "updat": [2, 14, 38, 41, 42, 52, 60, 73, 84, 89, 91, 98], "set_param": [2, 40, 42, 59, 60, 72, 73], "simpl": [2, 38, 42, 44, 61, 71, 73, 86, 87, 89, 90, 91, 93, 94, 98, 101, 104, 106], "well": [2, 3, 9, 10, 38, 42, 46, 47, 61, 63, 69, 71, 73, 78, 81, 82, 84, 89, 90, 91, 93, 94, 97, 98, 99, 101, 103, 104], "nest": [2, 38, 42, 43, 58, 73, 79, 81, 82, 108], "latter": [2, 38, 42, 73, 104], "compon": [2, 42, 73], "__": [2, 42, 73], "set_score_request": [2, 72, 73], "structur": [3, 70, 93, 95, 97, 98], "unobserv": 3, "less": [3, 4, 5, 10, 32, 41, 49, 61, 70, 71, 75, 77, 81, 91, 93, 95, 96, 97, 98, 99, 103, 108], "channel": [3, 88, 99], "character": 3, "flip": 3, "nm": 3, "invers": [3, 10, 37, 47, 57, 62, 87, 90, 96], "inv": 3, "confident_joint": [3, 23, 37, 44, 57, 62, 63, 84, 97, 99], "un": 3, "under": [3, 10, 38, 42, 62, 69, 70, 90, 95, 98, 104], "joint": [3, 37, 44, 47, 57, 62, 63, 96], "num_label_issu": [3, 41, 44, 63, 78, 82, 84], "estimation_method": [3, 41], "off_diagon": 3, "multi_label": [3, 37, 44, 57, 58, 63, 102], "don": [3, 10, 83, 90, 91, 94, 99, 103, 106], "statis": 3, "compute_confident_joint": [3, 37, 44, 57, 63, 99], "off": [3, 44, 57, 68, 91, 99, 103, 104], "j": [3, 5, 37, 38, 42, 43, 44, 63, 66, 69, 70, 79, 81, 82, 89, 90, 99, 107, 108], "confident_learn": [3, 44, 63, 99], "off_diagonal_calibr": 3, "calibr": [3, 4, 44, 57, 61, 101], "cj": [3, 47, 57], "axi": [3, 32, 47, 49, 55, 75, 78, 88, 89, 90, 91, 95, 97, 98, 99, 101, 102, 104, 106, 107], "bincount": [3, 89, 90, 99, 101, 102], "alwai": [3, 10, 38, 42, 57, 86, 87, 88, 99, 106], "estimate_issu": 3, "over": [3, 5, 10, 38, 41, 42, 68, 69, 75, 77, 86, 90, 91, 93, 95, 96, 97, 98, 99, 104, 106], "As": [3, 7, 83, 89, 90, 94, 98, 99, 106, 108], "add": [3, 5, 7, 13, 14, 38, 42, 60, 69, 87, 88, 89, 90, 91, 94, 95, 97, 98, 99, 102], "approach": [3, 37, 41, 44, 60, 86, 93, 95, 98, 99, 102, 104, 106], "custom": [3, 7, 10, 12, 31, 38, 41, 42, 49, 56, 71, 87, 90, 94, 95, 99, 106], "know": [3, 10, 89, 90, 91, 94, 97, 99, 101, 106], "cut": [3, 68, 83, 86, 87, 90, 93, 94, 96, 99, 102, 104, 105, 106], "off_diagonal_custom": 3, "tl": 3, "dr": 3, "sometim": [3, 33, 103, 104, 108], "underestim": 3, "few": [3, 9, 10, 69, 83, 95, 97, 101, 102, 103, 104, 108], "4": [3, 4, 5, 10, 11, 19, 20, 21, 23, 24, 26, 27, 29, 31, 32, 48, 49, 56, 65, 66, 68, 69, 71, 74, 81, 96, 97, 102, 107, 108], "detail": [3, 4, 5, 10, 15, 17, 34, 37, 38, 42, 43, 49, 54, 57, 60, 61, 62, 63, 65, 66, 68, 69, 70, 77, 78, 79, 83, 84, 88, 95, 97, 98, 102, 104, 108], "num_issu": [3, 7, 41, 88, 89, 90, 91, 93, 94, 95, 98, 99], "calibrate_confident_joint": 3, "up": [3, 7, 10, 18, 27, 28, 31, 44, 49, 51, 60, 61, 87, 96, 97, 103, 106, 108], "p_": [3, 37, 44], "pair": [3, 5, 10, 37, 44, 99], "v": [3, 10, 41, 62, 63, 65, 71, 89, 90, 100, 102, 103, 104, 105], "rest": [3, 5, 7, 9, 10, 12, 36, 62, 63, 65, 73, 86, 87, 89, 90, 91, 93, 94, 97, 98, 99, 101, 106], "fashion": [3, 5, 75, 86], "2x2": 3, "incorrectli": [3, 37, 62, 63, 66, 93, 98, 108], "calibrated_cj": 3, "c": [3, 10, 55, 56, 63, 71, 83, 86, 88, 89, 90, 93, 94, 95, 97, 98, 99, 102, 103, 104, 105, 106], "whose": [3, 4, 5, 10, 29, 38, 42, 47, 52, 56, 61, 65, 68, 74, 77, 81, 82, 88, 89, 90, 91, 93, 94, 97, 98, 99, 102, 103, 104, 107, 108], "truli": [3, 104, 107], "estimate_joint": [3, 37, 99], "joint_estim": 3, "confident_joint_distribut": 3, "recal": [3, 63, 69, 99, 103, 105, 107, 108], "return_indices_of_off_diagon": 3, "frequenc": [3, 27, 61, 62, 69, 78, 103, 104], "done": [3, 10, 60, 73, 89, 97, 99, 102, 104, 105], "overfit": [3, 10, 66, 69, 86, 88, 89, 90, 91, 93, 94, 105], "classifict": 3, "singl": [3, 5, 9, 10, 13, 27, 37, 38, 42, 43, 49, 50, 57, 61, 62, 68, 69, 70, 71, 81, 86, 88, 89, 95, 97, 99, 102, 103], "baselin": [3, 38, 44, 87, 104, 106], "proxi": 3, "union": [3, 5, 13, 27, 49, 52, 53, 54, 57, 58, 63, 69, 73, 81, 97], "tupl": [3, 32, 38, 42, 43, 47, 48, 50, 52, 56, 57, 61, 63, 69, 77, 79, 81, 82, 88, 108], "confident_joint_count": 3, "indices_off_diagon": 3, "simplif": 3, "effici": [3, 4, 5, 10, 41, 47, 52, 53, 61, 70, 75, 77, 83, 87, 91, 95, 97, 98, 107], "practic": [3, 86, 87, 90, 91, 98, 99, 104, 106], "complet": [3, 88, 89, 90, 91, 93, 94, 95, 97, 98, 99, 102, 103, 106], "gist": 3, "cj_ish": 3, "guess": [3, 47, 99, 101], "8": [3, 5, 7, 8, 48, 49, 50, 56, 65, 79, 81, 86, 87, 88, 89, 90, 91, 93, 94, 95, 97, 101, 102, 103, 104, 106, 107, 108], "parallel": [3, 44, 69, 79, 96], "again": [3, 60, 86, 97, 104], "simplifi": [3, 15, 97], "understand": [3, 9, 10, 37, 62, 69, 90, 95, 99, 100, 106, 107, 108], "100": [3, 4, 38, 42, 52, 53, 55, 70, 71, 86, 87, 89, 90, 91, 93, 95, 96, 97, 98, 99, 102, 103, 104, 108], "optim": [3, 38, 39, 42, 60, 86, 87, 90, 91, 93, 94, 95, 96, 99, 101, 102, 104, 106], "speed": [3, 44, 87, 96, 97, 106], "dtype": [3, 24, 26, 27, 32, 38, 42, 56, 57, 65, 81, 88, 95, 98, 103], "enumer": [3, 38, 42, 88, 89, 90, 91, 95, 108], "s_label": 3, "confident_bin": 3, "6": [3, 5, 10, 42, 49, 57, 81, 86, 87, 88, 89, 90, 91, 93, 94, 96, 97, 101, 102, 103, 104, 106, 107, 108], "num_confident_bin": 3, "argmax": [3, 44, 71, 75, 78, 88, 95, 97, 99, 103, 104, 107], "elif": 3, "estimate_lat": 3, "py_method": [3, 47], "cnt": [3, 47], "1d": [3, 5, 13, 17, 33, 41, 44, 49, 50, 52, 57, 58, 65, 74, 86, 88, 95], "eqn": [3, 47], "margin": [3, 44, 47, 49, 71], "marginal_p": [3, 47], "shorthand": [3, 14], "proport": [3, 10, 37, 62, 99, 105], "poorli": [3, 47, 86, 95], "inv_noise_matrix": 3, "estimate_py_and_noise_matrices_from_prob": [3, 99], "variabl": [3, 7, 15, 28, 57, 73, 74, 88, 89, 93, 99, 102, 106], "exact": [3, 10, 47, 52, 86, 89, 90, 91, 93, 95, 98], "within": [3, 4, 5, 10, 16, 33, 38, 39, 42, 43, 45, 63, 68, 77, 79, 81, 89, 90, 91, 97, 103, 107], "percent": 3, "often": [3, 37, 47, 62, 97, 99, 105, 107], "estimate_confident_joint_and_cv_pred_proba": 3, "mani": [3, 9, 10, 57, 58, 69, 86, 87, 88, 89, 91, 93, 94, 97, 98, 102, 103, 104, 106], "wai": [3, 5, 10, 52, 60, 83, 84, 86, 87, 88, 89, 90, 93, 94, 95, 97, 98, 99, 101, 102, 103, 105], "pro": 3, "con": 3, "pred_proba": [3, 105], "combin": [3, 37, 89, 91, 95, 96, 97, 98, 99, 105, 106], "becaus": [3, 47, 53, 57, 68, 94, 95, 97, 98, 99, 101, 103, 105], "littl": [3, 41, 96, 103, 108], "uniform": [3, 71, 96, 97, 99], "20": [3, 7, 43, 82, 88, 91, 94, 95, 96, 97, 98, 99, 103, 106, 107, 108], "Such": [3, 91, 104], "bound": [3, 24, 26, 38, 42, 56, 65, 66, 68, 69, 103], "reason": [3, 10, 23, 38, 42, 53, 70], "comment": [3, 56, 95, 108], "end": [3, 5, 38, 42, 54, 69], "file": [3, 5, 13, 40, 41, 59, 69, 86, 88, 89, 93, 94, 96, 97, 103, 104, 107, 108], "estimate_py_noise_matrices_and_cv_pred_proba": [3, 99], "handl": [3, 5, 7, 10, 17, 19, 20, 21, 23, 24, 26, 27, 28, 29, 31, 32, 34, 38, 41, 42, 52, 53, 54, 84, 86, 87, 89, 90, 91, 93, 94, 95, 96, 98, 99, 102, 104, 106, 107, 108], "five": [3, 66, 69, 99, 103], "estimate_cv_predicted_prob": [3, 99], "estimate_noise_matric": 3, "get_confident_threshold": [3, 40, 41], "amongst": [3, 10, 98, 103], "confident_threshold": [3, 10, 23, 24, 41, 70], "point": [4, 5, 7, 9, 10, 19, 27, 38, 42, 52, 54, 83, 89, 90, 91, 94, 95, 96, 97, 98, 99, 101], "valuat": [4, 9, 19], "help": [4, 37, 38, 42, 69, 83, 84, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 99, 101, 102, 104, 106, 107, 108], "u": [4, 86, 87, 88, 89, 91, 93, 95, 97, 99, 101, 102, 105, 106, 107, 108], "assess": [4, 10, 95, 98, 103], "contribut": [4, 10, 19, 95, 103], "data_shapley_knn": 4, "knn_graph": [4, 5, 10, 11, 17, 19, 20, 27, 29, 32, 45, 51, 93, 95], "metric": [4, 5, 10, 19, 20, 22, 27, 29, 32, 45, 51, 52, 54, 55, 57, 60, 69, 70, 86, 87, 88, 91, 93, 94, 95, 98, 99, 106], "10": [4, 10, 19, 20, 24, 27, 29, 32, 38, 39, 52, 69, 70, 71, 82, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 99, 101, 102, 103, 104, 105, 106, 107, 108], "shaplei": [4, 10, 19], "nearest": [4, 5, 10, 17, 24, 27, 29, 51, 52, 53, 54, 55, 70, 90, 94, 95, 104], "neighbor": [4, 5, 10, 17, 19, 24, 27, 29, 45, 52, 53, 54, 55, 70, 89, 90, 91, 93, 94, 95, 97, 104], "knn": [4, 10, 14, 19, 27, 29, 32, 51, 52, 53, 54, 55, 70, 93, 104], "graph": [4, 5, 10, 14, 17, 19, 27, 32, 51, 52], "calcul": [4, 10, 19, 27, 41, 49, 51, 52, 55, 61, 65, 66, 68, 69, 70, 73, 77, 91, 96, 98], "directli": [4, 5, 10, 15, 17, 34, 35, 41, 54, 60, 61, 87, 90, 94, 95, 97, 98, 102, 103, 106], "lowest": [4, 10, 61, 69, 90, 91, 93, 95, 97, 98, 101, 102, 103, 107], "fall": [4, 10, 68, 77, 81, 99, 104], "flag": [4, 10, 23, 27, 44, 49, 62, 63, 66, 73, 83, 87, 88, 89, 90, 91, 93, 94, 95, 96, 98, 99, 103, 104, 106, 107], "approxim": [4, 10, 19, 41, 54, 70, 95, 101], "top": [4, 5, 10, 37, 41, 43, 44, 57, 63, 66, 69, 71, 78, 82, 83, 86, 87, 88, 89, 90, 93, 94, 95, 96, 97, 98, 99, 102, 103, 104, 106, 108], "found": [4, 5, 7, 10, 14, 15, 19, 20, 21, 23, 24, 26, 27, 28, 29, 31, 32, 38, 42, 57, 83, 86, 87, 88, 89, 90, 91, 93, 94, 95, 97, 98, 102, 104, 106, 108], "arxiv": [4, 19, 99], "ab": [4, 19, 99, 103], "1908": 4, "08619": 4, "1911": [4, 19], "07128": [4, 19], "embed": [4, 5, 10, 17, 70, 83, 87, 88, 89, 90, 93, 94, 95, 98, 99, 102, 106], "represent": [4, 5, 10, 17, 35, 38, 42, 50, 52, 63, 83, 87, 88, 89, 90, 91, 94, 97, 98, 99, 104], "suppli": [4, 102, 103, 106], "2d": [4, 5, 17, 33, 41, 49, 50, 52, 56, 57, 61, 86, 88, 95, 102], "num_exampl": [4, 5, 17, 19, 20, 21, 23, 24, 26, 27, 29, 31, 32, 34, 37, 62, 88, 89, 90, 91, 93, 94, 98, 99], "num_featur": [4, 5, 17, 38, 42, 60], "distanc": [4, 5, 10, 17, 19, 27, 29, 32, 51, 52, 53, 54, 55, 68, 70, 93, 95, 104], "construct": [4, 5, 7, 10, 15, 19, 20, 21, 23, 24, 26, 27, 28, 29, 31, 32, 34, 38, 42, 49, 51, 52, 54, 60, 95, 98], "nearestneighbor": [4, 5, 10, 19, 52, 54, 70, 93, 104], "cosin": [4, 10, 52, 53, 55, 70, 95, 104], "dim": [4, 70, 91, 107], "euclidean": [4, 5, 10, 52, 53, 55, 68, 70, 93], "dimension": [4, 27, 53, 57, 88, 99, 104], "scikit": [4, 42, 53, 54, 57, 70, 83, 86, 87, 88, 89, 90, 93, 94, 95, 97, 106], "fewer": [4, 10, 44, 57, 70, 95, 103], "stabl": [4, 16, 22, 25, 30, 40, 45, 54, 57, 59, 70, 84, 88, 89, 90, 91, 93, 94, 98, 99], "exce": [4, 52, 91, 95], "transform": [4, 10, 33, 49, 52, 55, 57, 70, 71, 86, 87, 90, 91, 94, 95, 98, 104, 108], "rel": [4, 10, 37, 52, 61, 62, 70, 89, 90, 91, 93, 94, 98, 99, 104], "adjust": [4, 39, 44, 52, 65, 70, 71, 83, 95, 98, 99], "closer": [4, 10, 68, 95, 103], "highli": [4, 90, 91], "influenti": 4, "posit": [4, 5, 10, 38, 42, 55, 57, 69, 95, 96, 104], "convers": 4, "neg": [4, 10, 68, 69, 89, 90, 95, 96], "valueerror": [4, 5, 13, 14, 35, 46, 49, 52, 55, 97], "neither": [4, 5, 10, 15, 53, 103], "nor": [4, 5, 10, 15], "larger": [4, 19, 53, 73, 75, 77, 91, 94, 96, 97], "55": [4, 56, 95, 96, 103, 106, 108], "525": 4, "unifi": 5, "audit": [5, 9, 13, 14, 17, 88, 91, 92, 93, 94, 95, 97, 98, 99, 102, 103, 106], "kind": [5, 6, 7, 10, 95, 96], "addit": [5, 7, 9, 12, 14, 34, 36, 38, 42, 49, 52, 54, 58, 61, 69, 78, 79, 86, 87, 88, 89, 93, 94, 95, 98, 99, 101, 104, 105], "depend": [5, 7, 9, 12, 13, 14, 36, 40, 44, 46, 57, 59, 63, 70, 73, 74, 83, 95, 105], "instal": [5, 7, 9, 12, 36, 38, 40, 41, 42, 44, 59, 60, 75, 77, 95], "pip": [5, 7, 9, 12, 36, 60, 83, 86, 87, 88, 89, 90, 91, 93, 94, 96, 98, 99, 101, 102, 103, 104, 106, 107, 108], "development": [5, 7, 9, 12, 36], "git": [5, 7, 9, 12, 36, 83, 86, 87, 88, 89, 90, 91, 93, 94, 96, 98, 99, 101, 102, 103, 104, 106], "github": [5, 7, 9, 12, 36, 38, 39, 57, 83, 86, 87, 88, 89, 90, 91, 93, 94, 96, 97, 98, 99, 101, 102, 103, 104, 106], "com": [5, 7, 9, 12, 36, 38, 39, 41, 46, 57, 70, 83, 86, 87, 88, 89, 90, 91, 93, 94, 96, 98, 99, 101, 102, 103, 104, 106, 107, 108], "egg": [5, 7, 9, 12, 36, 83, 96], "label_nam": [5, 7, 8, 10, 11, 13, 19, 32, 83, 88, 89, 90, 91, 93, 94, 95, 97, 98, 99, 102, 103, 106], "image_kei": [5, 10, 91, 95], "interfac": [5, 9, 10, 54, 83, 86, 87, 90, 93, 94, 96, 97, 98, 99, 102, 104, 106], "librari": [5, 10, 42, 54, 66, 69, 70, 83, 87, 89, 94, 95, 96, 97], "goal": [5, 106], "track": [5, 7, 14, 15, 83, 89, 96, 97, 99], "intermedi": [5, 9, 90], "statist": [5, 10, 14, 23, 27, 37, 61, 62, 69, 90, 93, 94, 95, 98, 99], "convert": [5, 10, 13, 35, 38, 42, 50, 55, 58, 61, 68, 77, 81, 84, 87, 88, 91, 94, 95, 96, 97, 98, 101, 102, 103], "hug": [5, 10, 13, 91], "face": [5, 10, 13, 17, 91, 96, 102], "kei": [5, 7, 10, 13, 17, 19, 20, 21, 23, 24, 26, 27, 28, 29, 31, 32, 37, 38, 42, 49, 61, 62, 68, 70, 89, 90, 91, 94, 97, 99, 101, 103], "string": [5, 10, 13, 15, 19, 20, 21, 23, 24, 26, 27, 28, 29, 31, 32, 34, 35, 37, 38, 42, 53, 57, 61, 62, 74, 78, 81, 82, 87, 93, 94, 95, 97, 101, 102, 108], "dictionari": [5, 7, 10, 13, 14, 17, 19, 20, 21, 23, 24, 26, 27, 28, 29, 31, 32, 37, 38, 42, 48, 57, 61, 62, 65, 66, 68, 69, 89, 90, 93, 94, 99, 101, 102, 103], "path": [5, 13, 38, 41, 42, 69, 88, 89, 95, 97, 103], "local": [5, 7, 10, 13, 38, 39, 42, 88, 89, 90, 91, 96, 97, 98, 99, 101, 102, 104, 106, 108], "text": [5, 7, 10, 13, 19, 20, 21, 23, 24, 26, 27, 28, 29, 31, 32, 43, 49, 70, 79, 81, 82, 83, 85, 89, 90, 92, 96, 97, 98, 99, 100, 101, 104], "txt": [5, 13, 108], "csv": [5, 13, 86, 87, 93, 94, 98, 106], "json": [5, 13], "hub": [5, 13], "multiclass": [5, 13, 16, 49, 57, 61, 102], "regress": [5, 7, 10, 11, 13, 15, 17, 22, 31, 33, 35, 87, 89, 90, 94, 100, 101, 104], "multilabel": [5, 10, 11, 13, 15, 16, 22, 26, 33, 35, 50, 102], "imag": [5, 9, 37, 42, 66, 68, 69, 70, 75, 77, 78, 83, 89, 90, 92, 96, 97, 98, 100, 101, 102, 103, 105, 107], "field": [5, 10, 38, 42], "themselv": [5, 86, 87, 95, 106], "pil": [5, 91], "cleanvis": [5, 10, 95], "level": [5, 10, 17, 19, 20, 21, 23, 24, 26, 27, 28, 29, 31, 32, 34, 37, 52, 56, 79, 81, 90, 91, 97, 100, 102, 107], "load_dataset": [5, 13, 91], "glue": 5, "sst2": 5, "properti": [5, 9, 13, 14, 35, 38, 42, 95], "has_label": [5, 13], "class_nam": [5, 13, 21, 37, 43, 62, 69, 78, 82, 83, 96, 99, 103, 107, 108], "empti": [5, 13, 47, 61, 90, 95, 97, 102], "find_issu": [5, 6, 7, 8, 10, 11, 15, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 83, 88, 89, 90, 91, 93, 94, 95, 97, 98, 99, 102, 106], "issue_typ": [5, 6, 7, 8, 10, 11, 14, 15, 17, 19, 20, 21, 23, 24, 26, 27, 29, 31, 32, 88, 89, 90, 91, 93, 94, 95, 97, 98, 99, 102, 106], "sort": [5, 17, 41, 44, 49, 61, 63, 66, 68, 69, 71, 77, 79, 81, 86, 87, 88, 89, 90, 91, 93, 94, 97, 98, 99, 101, 102, 103, 106, 107, 108], "common": [5, 10, 14, 17, 83, 90, 92, 95, 96, 97, 98, 99, 102, 103, 107], "real": [5, 17, 83, 89, 90, 95, 97, 98, 99, 101, 106, 107], "world": [5, 17, 83, 89, 90, 95, 97, 98, 99, 101, 106, 107], "interact": [5, 17, 94, 97], "thereof": [5, 17], "insight": [5, 17, 69, 101], "best": [5, 9, 10, 17, 48, 61, 71, 86, 87, 89, 90, 91, 93, 95, 97, 98, 101, 102, 104, 105, 106, 108], "properli": [5, 10, 41, 48, 52, 57, 58, 75, 88, 89, 90, 91, 93, 94, 97, 98, 99, 102, 104, 106, 107], "respect": [5, 38, 42, 66, 69, 88, 89, 90, 91, 93, 94, 98, 99, 102, 103], "lexicograph": [5, 48, 57, 88, 89, 90, 91, 93, 94, 98, 99, 102], "squar": [5, 57, 73, 96, 106], "csr": [5, 52, 95], "evenli": 5, "omit": [5, 68, 69, 91, 95, 103], "itself": [5, 33, 38, 42, 52, 95, 103], "three": [5, 10, 37, 61, 62, 73, 78, 86, 88, 89, 90, 93, 96, 99, 101, 105, 106, 107, 108], "indptr": [5, 95], "wise": 5, "start": [5, 7, 10, 35, 38, 39, 42, 49, 83, 102, 108], "th": [5, 10, 43, 48, 56, 57, 61, 63, 66, 68, 69, 70, 79, 81, 82, 94, 102, 103, 108], "ascend": [5, 37, 62, 91, 99], "segment": [5, 75, 77, 78, 100], "reflect": [5, 10, 52, 86, 87, 93, 94, 98, 101, 103, 104, 106], "maintain": [5, 60], "kneighbors_graph": [5, 19, 54, 93], "illustr": [5, 95], "todens": 5, "second": [5, 49, 57, 69, 71, 89, 93, 97, 99, 108], "duplic": [5, 9, 22, 23, 38, 42, 52, 83, 89, 95, 98, 99, 106], "explicit": 5, "precend": 5, "collect": [5, 10, 14, 17, 19, 20, 21, 23, 24, 26, 27, 28, 29, 31, 32, 33, 61, 95, 97, 101, 108], "unspecifi": [5, 17, 44, 63], "interest": [5, 17, 23, 78, 82, 86, 87, 94, 95, 98, 99, 106, 107, 108], "constructor": [5, 10, 11, 17, 24, 31, 52, 54], "issuemanag": [5, 9, 14, 15, 17, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 31, 32, 34], "respons": [5, 17, 23, 54, 73, 74, 95, 96, 106, 108], "random_st": [5, 86, 88, 89, 90, 91, 95, 98, 99, 102, 104], "lab": [5, 6, 8, 10, 19, 20, 21, 23, 24, 26, 27, 28, 29, 31, 32, 41, 83, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 99, 102, 106], "comprehens": [5, 83, 91, 95, 98, 102, 106], "nbr": 5, "n_neighbor": [5, 10, 19, 52, 54, 70, 95], "mode": [5, 12, 19, 38, 41, 42, 93, 104], "4x4": 5, "float64": [5, 27, 38, 42, 81], "compress": [5, 10, 52, 57, 75, 77, 95], "toarrai": [5, 52, 95], "NOT": [5, 41, 94], "23606798": 5, "41421356": [5, 52], "configur": [5, 17, 49, 90], "suppos": [5, 10, 66, 86, 87, 104, 106], "who": [5, 68, 86, 93, 95, 99, 108], "manag": [5, 8, 9, 10, 14, 15, 16, 17, 18, 20, 21, 23, 24, 26, 27, 28, 29, 31, 32, 60, 89, 97], "clean_learning_kwarg": [5, 10, 11, 24, 31, 97, 106], "labelissuemanag": [5, 10, 15, 22, 24], "prune_method": [5, 84], "prune_by_noise_r": [5, 44, 63, 99], "report": [5, 7, 10, 12, 16, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 37, 62, 82, 83, 88, 89, 90, 93, 94, 95, 97, 98, 99, 102, 106, 108], "include_descript": [5, 19, 20, 21, 23, 24, 26, 27, 29, 31, 32, 34], "show_summary_scor": [5, 34, 95, 98], "show_all_issu": [5, 34, 95, 98], "summari": [5, 7, 14, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 37, 43, 59, 60, 62, 67, 76, 77, 79, 80, 81, 84, 88, 89, 90, 91, 93, 94, 95, 96, 98, 99, 103, 106, 107, 108], "show": [5, 7, 27, 38, 42, 48, 57, 69, 78, 82, 86, 90, 91, 93, 94, 95, 96, 97, 98, 99, 101, 104, 106, 107, 108], "suffer": [5, 10, 14, 23, 63, 71, 82, 95, 108], "onc": [5, 10, 23, 37, 38, 42, 86, 89, 97, 98, 99, 102, 103], "familiar": [5, 95], "overal": [5, 7, 10, 14, 19, 20, 21, 23, 24, 26, 27, 28, 29, 31, 32, 37, 43, 49, 61, 62, 65, 68, 69, 73, 77, 78, 79, 81, 83, 84, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 101, 103, 108], "sever": [5, 7, 10, 13, 14, 23, 38, 41, 42, 44, 65, 68, 70, 71, 77, 81, 83, 86, 87, 88, 89, 90, 93, 94, 95, 96, 97, 98, 99, 103, 104, 108], "compar": [5, 61, 70, 81, 89, 90, 93, 95, 98, 99, 103], "issue_summari": [5, 7, 10, 14, 95], "With": [5, 9, 10, 41, 87, 94, 97, 99, 101, 106, 107, 108], "usag": [5, 41, 60], "usual": [5, 13, 33, 34, 91, 101, 106], "ti": [5, 61], "exhibit": [5, 7, 10, 14, 78, 88, 89, 90, 91, 93, 94, 98, 99, 103], "ie": [5, 73], "likelihood": [5, 10, 41, 43, 44, 63, 68, 70, 71, 75, 79, 95], "wherea": [5, 10, 57, 63, 86, 87, 95, 105], "outlier": [5, 9, 11, 15, 22, 23, 32, 45, 52, 71, 83, 89, 90, 95, 98, 99, 100, 106], "fundament": [5, 10], "incompar": 5, "quantiti": [5, 99, 106], "global": [5, 7, 10, 23, 38, 42, 96], "non_iid": [5, 10, 11, 15, 27, 90, 91, 93, 94, 95, 98, 99], "hypothesi": [5, 95], "iid": [5, 7, 9, 27, 83, 93, 98, 99], "never": [5, 88, 98, 99, 102, 104, 105], "someth": [5, 7, 10, 38, 42, 71, 103], "123": [5, 89, 90], "456": [5, 86, 87, 88], "nearest_neighbor": 5, "7": [5, 10, 49, 50, 60, 79, 81, 86, 87, 88, 89, 90, 93, 94, 95, 96, 97, 101, 102, 103, 104, 106, 107, 108], "9": [5, 19, 20, 21, 23, 24, 26, 27, 29, 31, 32, 43, 49, 50, 65, 79, 81, 86, 87, 88, 89, 90, 93, 94, 95, 96, 99, 101, 102, 103, 104, 106, 107, 108], "distance_to_nearest_neighbor": [5, 11, 89, 90, 91, 93, 94, 98, 99], "789": 5, "get_issu": [5, 10, 14, 88, 89, 90, 91, 93, 94, 95, 97, 98, 99, 102, 106], "issue_nam": [5, 6, 7, 10, 14, 15, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 88, 89, 90, 91, 93, 94, 95, 98, 99], "focu": [5, 10, 14, 94, 95, 98, 107, 108], "full": [5, 10, 14, 41, 60, 69, 91, 98, 108], "summar": [5, 14, 19, 20, 21, 23, 24, 26, 27, 28, 29, 31, 32, 37, 62, 78, 82, 83, 107], "specific_issu": [5, 14], "lie": [5, 10, 70, 71, 87, 88, 89, 90, 91, 93, 94, 95, 98, 99], "get_issue_summari": [5, 10, 14, 90, 95], "get_info": [5, 10, 14, 90, 94, 95, 96], "yet": [5, 18, 28, 60, 96, 98, 101], "list_possible_issue_typ": [5, 15, 16], "regist": [5, 7, 15, 16, 18, 28, 38, 42, 89], "rtype": [5, 15, 19, 20, 21, 23, 24, 26, 27, 28, 29, 31, 32, 38, 42], "registri": [5, 15, 16], "list_default_issue_typ": [5, 15, 16], "folder": [5, 88, 89, 91], "load": [5, 13, 41, 69, 91, 96, 97, 98, 99, 103, 104, 107, 108], "futur": [5, 10, 23, 38, 42, 61, 83, 89, 94], "overwrit": [5, 89], "separ": [5, 37, 49, 65, 89, 90, 91, 95, 97, 98, 103, 105], "static": 5, "rememb": [5, 94, 97, 98, 99], "part": [5, 10, 38, 42, 44, 66, 68, 69, 88, 89, 95, 96, 98, 107, 108], "ident": [5, 10, 23, 57, 94, 95], "datalab": [6, 8, 11, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 83, 86, 87, 96, 98, 101, 106], "walk": [7, 98], "alongsid": [7, 38, 42, 89, 97], "pre": [7, 8, 10, 38, 42, 83, 89, 90, 106], "runtim": [7, 38, 41, 42, 73, 75, 77, 88, 91, 97, 98], "issue_manager_factori": [7, 15, 89], "myissuemanag": [7, 15], "myissuemanagerforregress": 7, "decor": [7, 15], "ll": [7, 49, 86, 87, 88, 89, 90, 91, 93, 94, 95, 97, 98, 99, 101, 102, 103, 104, 105, 106, 108], "thing": [7, 42, 87, 95, 99, 106], "next": [7, 61, 83, 86, 87, 88, 93, 94, 95, 97, 101, 103, 106, 108], "dummi": 7, "randint": [7, 32, 49, 89, 90, 95], "mark": [7, 10, 84, 103, 104, 106], "regard": [7, 90, 98, 99], "rand": [7, 49, 52, 89, 90, 95], "is_": [7, 10, 89], "_issu": [7, 10, 89], "issue_score_kei": [7, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 89], "whole": [7, 10, 27, 38, 42, 90, 95], "make_summari": [7, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 89], "popul": [7, 94, 98], "verbosity_level": [7, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32], "std": [7, 103], "raw_scor": 7, "bit": 7, "involv": [7, 41, 78, 82, 95, 97, 102], "intermediate_arg": 7, "min": [7, 49, 68, 81, 89, 97, 104], "sin_filt": 7, "sin": 7, "arang": [7, 95], "kernel": [7, 95], "affect": [7, 10, 38, 42, 53, 75, 81, 94, 95, 97], "easili": [7, 10, 47, 84, 86, 87, 88, 90, 93, 94, 98, 99, 101, 102, 104, 105, 106, 107], "hard": [7, 42, 83, 96, 104], "sai": [7, 10, 38, 42, 95, 102, 107], "anoth": [7, 10, 23, 37, 41, 53, 56, 68, 71, 87, 93, 94, 95, 97, 99, 101, 104], "try": [7, 9, 10, 41, 44, 60, 61, 75, 77, 83, 86, 87, 90, 91, 93, 94, 95, 96, 97, 98, 99, 102, 104, 105, 106, 107], "won": [7, 38, 42, 89, 90, 97, 102], "issue_manag": [7, 10, 12, 14, 16, 19, 20, 21, 24, 26, 27, 28, 29, 31, 32, 89], "instanti": [7, 17, 41, 60, 70, 87, 88, 90, 93], "477762": 7, "286455": 7, "term": [7, 10, 47, 57, 69, 88, 89, 90, 91, 93, 94, 98, 99], "4778": 7, "is_basic_issu": 7, "basic_scor": 7, "13": [7, 20, 29, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 98, 99, 101, 103, 104, 106, 107, 108], "003042": 7, "058117": 7, "11": [7, 10, 60, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 99, 101, 102, 103, 104, 106, 107, 108], "121908": 7, "15": [7, 55, 60, 73, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 99, 101, 103, 104, 106, 107, 108], "169312": 7, "17": [7, 87, 88, 90, 91, 93, 94, 95, 96, 97, 98, 99, 101, 103, 104, 106, 107, 108], "229044": 7, "2865": 7, "is_intermediate_issu": 7, "intermediate_scor": 7, "000000": [7, 89, 90, 95, 96, 98, 99], "007059": 7, "009967": 7, "010995": 7, "087332": 7, "016296": 7, "03947": 7, "019459": 7, "794251": 7, "underperform": [8, 9, 32, 83, 98], "group": [8, 9, 27, 32, 83, 96, 98, 103, 108], "dbscan": [8, 10, 32], "hdbscan": 8, "etc": [8, 10, 23, 33, 38, 42, 47, 60, 61, 79, 83, 89, 90, 93, 94, 95, 97, 98, 99, 102, 106], "sensit": [8, 10, 55, 95, 98], "ep": [8, 32, 69], "radiu": 8, "min_sampl": [8, 32], "kmean": [8, 95], "your_data": 8, "get_pred_prob": 8, "n_cluster": [8, 32, 95], "cluster_id": [8, 10, 11, 32, 95], "labels_": 8, "underperforming_group": [8, 10, 11, 15, 22, 90, 91, 93, 94, 95, 98, 99], "search": [9, 10, 21, 27, 28, 45, 51, 52, 53, 56, 73, 95, 97, 98, 105], "nondefault": 9, "Near": [9, 97], "imbal": [9, 22, 65, 70, 71, 90], "spuriou": [9, 91], "correl": [9, 91], "null": [9, 11, 15, 22, 90, 91, 94, 98, 99], "togeth": [9, 10, 47, 87, 89, 90, 91, 93, 94, 98, 99, 106, 108], "built": [9, 49, 86, 87, 90, 93, 94, 96, 99, 102, 104, 106], "own": [9, 38, 40, 42, 54, 59, 65, 66, 69, 75, 79, 86, 87, 88, 90, 91, 93, 94, 95, 97, 98, 101, 102, 106, 107, 108], "prerequisit": 9, "basic": [9, 42, 60, 95, 98, 104], "fulli": [9, 10, 38, 42, 60, 97], "platform": [9, 10, 83, 86, 87, 90, 91, 93, 94, 96, 97, 99, 102, 104, 105, 106], "write": [9, 10], "code": [9, 10, 38, 42, 47, 57, 60, 83, 84, 86, 87, 88, 89, 90, 91, 93, 94, 96, 97, 101, 102, 103, 104, 106, 107, 108], "being": [9, 10, 14, 37, 38, 42, 44, 49, 56, 57, 71, 86, 93, 97, 98, 99, 106, 107], "100x": [9, 10, 86, 87, 90, 93, 94, 96, 99, 102, 104, 106], "faster": [9, 10, 41, 70, 73, 75, 77, 83, 86, 87, 90, 93, 94, 96, 97, 99, 102, 104, 106], "intellig": [9, 10, 98], "quickli": [9, 10, 39, 86, 88, 91, 93, 94, 97, 98, 102, 104, 105, 107, 108], "fix": [9, 10, 61, 86, 87, 90, 93, 94, 95, 96, 98, 99, 102, 104, 105, 106], "scientist": [9, 10], "million": [9, 10, 108], "thank": [9, 10], "ai": [9, 10, 83, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 100, 101, 102, 104, 106, 108], "suggest": [9, 10, 37, 61, 62, 68, 87, 91, 94, 95, 97, 106], "power": [9, 10, 91, 96, 99, 108], "automl": [9, 10, 83, 86, 87, 90, 93, 94, 96, 97, 99, 102, 104, 105, 106], "system": [9, 10, 88, 91, 107], "foundat": [9, 10, 83, 86, 87, 90, 93, 94, 95, 96, 99, 102, 104, 105, 106], "improv": [9, 10, 61, 86, 87, 90, 91, 96, 97, 99, 100, 106, 107], "click": [9, 10, 88, 89, 90, 91, 96, 98, 99, 101, 102, 104, 106, 108], "tune": [9, 10, 87, 88, 94, 96, 98, 104], "serv": [9, 10, 14, 17, 101], "auto": [9, 10, 86, 87, 90, 96, 97, 98, 106], "free": [9, 10, 83, 86, 87, 88, 90, 91, 93, 94, 96, 97, 98, 99, 102, 104, 105, 106], "page": [10, 90, 97, 98, 99], "variou": [10, 14, 31, 40, 58, 59, 83, 86, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 99, 101, 103], "why": [10, 86, 87, 90, 93, 94, 96, 99, 102, 104, 106], "matter": [10, 37, 62], "didn": [10, 95, 98], "plu": [10, 86, 87, 90, 93, 94, 96, 99, 102, 104, 106], "ye": [10, 11], "near_dupl": [10, 11, 15, 20, 89, 90, 91, 93, 94, 95, 97, 98, 99], "class_imbal": [10, 11, 15, 21, 90, 91, 93, 94, 95, 98, 99], "data_valu": [10, 11, 15, 22, 95], "No": [10, 11, 86, 87, 94, 95, 97], "reinterpret": [10, 11], "your_regression_model": [10, 11], "_score": 10, "badli": [10, 68, 86, 87, 108], "issue_scor": 10, "atyp": [10, 70, 89, 90, 91, 93, 94, 98, 99, 104], "datapoint": [10, 32, 44, 49, 57, 71, 74, 83, 86, 87, 88, 89, 90, 93, 94, 97, 98, 105, 106], "is_issu": [10, 23], "primarili": 10, "former": [10, 38, 42], "investig": [10, 88, 95], "expertis": [10, 86, 87, 90, 93, 94, 96, 99, 102, 104, 106], "interpret": [10, 96, 97, 99, 102, 106], "annot": [10, 37, 48, 61, 62, 63, 65, 66, 68, 69, 78, 81, 82, 83, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100, 103, 107], "dissimilar": [10, 93, 94], "preced": 10, "incorrect": [10, 68, 71, 74, 86, 88, 89, 90, 91, 93, 94, 95, 98, 99, 103, 106], "due": [10, 41, 44, 71, 75, 77, 88, 89, 90, 91, 93, 94, 95, 98, 99, 106], "appear": [10, 37, 48, 62, 63, 66, 74, 90, 91, 93, 94, 95, 98, 106, 107], "now": [10, 41, 84, 86, 87, 88, 90, 95, 97, 98, 101, 103, 104, 106, 108], "token": [10, 43, 56, 77, 78, 79, 80, 81, 82, 97, 99, 100], "hamper": [10, 91, 96], "analyt": [10, 83, 95, 97, 101], "lead": [10, 68, 71, 91, 95, 98, 103], "draw": [10, 89, 90], "conclus": [10, 94], "let": [10, 38, 42, 70, 71, 86, 87, 88, 90, 91, 93, 94, 95, 97, 98, 101, 102, 103, 104, 106, 107, 108], "sort_valu": [10, 88, 90, 91, 93, 94, 95, 97, 98, 99, 101, 102, 106], "head": [10, 86, 87, 88, 90, 91, 93, 94, 95, 96, 98, 99, 101, 106], "97": [10, 86, 96, 97, 98, 99, 103, 106, 108], "064045": 10, "58": [10, 86, 90, 95, 96, 99, 103], "680894": 10, "41": [10, 95, 96, 98, 103, 106], "746043": 10, "794894": 10, "98": [10, 96, 97, 98, 106], "802911": 10, "give": [10, 49, 71, 99, 101, 107], "li": [10, 70], "especi": [10, 86, 87, 91, 95, 97, 106], "veri": [10, 37, 62, 66, 68, 87, 89, 90, 91, 93, 94, 97, 98, 99, 101, 104, 106], "rare": [10, 44, 69, 89, 90, 91, 93, 94, 97, 98, 99], "anomal": [10, 71, 89, 90, 91, 93, 94, 98, 99], "articl": [10, 41, 97], "blog": 10, "unexpect": [10, 38, 42, 94], "consequ": 10, "inspect": [10, 87, 88, 90, 91, 98, 99, 103, 106], "011562": 10, "62": [10, 95, 98, 99, 103, 106], "019657": 10, "22": [10, 88, 89, 91, 95, 96, 98, 99, 102, 103, 108], "035243": 10, "040907": 10, "42": [10, 49, 94, 95, 96, 103, 108], "056865": 10, "smaller": [10, 70, 102, 103], "extrem": [10, 89, 90, 91, 93, 94, 95, 97, 98, 99], "record": [10, 38, 42, 88, 93, 106], "abbrevi": 10, "misspel": 10, "typo": [10, 82], "resolut": 10, "video": [10, 96], "audio": [10, 89, 90, 92, 97], "minor": [10, 56], "variat": 10, "translat": [10, 98], "d": [10, 55, 86, 93, 94, 95, 97, 98, 99, 102, 106, 108], "constant": [10, 32, 73], "median": [10, 31, 55], "question": [10, 23, 83, 99], "nearli": [10, 23, 90, 91, 93, 94], "awar": [10, 84, 99], "presenc": [10, 52, 54, 99], "36": [10, 95, 96, 98, 108], "066009": 10, "80": [10, 39, 86, 93, 98, 102, 106], "003906": 10, "093245": 10, "005599": 10, "27": [10, 93, 95, 96, 98, 99, 103, 108], "156720": 10, "009751": 10, "72": [10, 95, 96, 98, 99, 102, 106], "signific": [10, 86, 87, 90, 93, 94, 96, 98, 99, 102, 104, 106], "violat": [10, 83, 93, 94, 95, 98, 99], "assumpt": [10, 93, 94, 95, 98, 99], "changepoint": [10, 93, 94, 98, 99], "shift": [10, 52, 54, 93, 94, 98, 99], "drift": [10, 90, 93, 95, 98, 99], "autocorrel": [10, 93, 94, 98, 99], "almost": [10, 93, 94, 98, 99], "adjac": [10, 52, 93, 94, 98, 99], "tend": [10, 37, 47, 93, 94, 98, 99, 107, 108], "sequenti": [10, 38, 42, 60, 91], "pai": [10, 94, 95], "attent": [10, 95], "realli": [10, 87, 94, 98, 101, 107], "mere": 10, "highlight": [10, 78, 82, 89, 90, 93, 95, 107], "necessarili": [10, 61, 69, 94, 98, 99], "wrong": [10, 61, 66, 68, 84, 87, 89, 90, 94, 97, 98, 99, 103], "gap": 10, "b": [10, 19, 20, 21, 23, 24, 26, 27, 29, 31, 32, 37, 56, 57, 81, 86, 93, 94, 95, 96, 97, 98, 99, 105, 108], "x1": [10, 66, 69, 103], "x2": [10, 66, 69, 103], "10th": 10, "100th": 10, "90": [10, 81, 86, 93, 98, 99, 105, 106], "similarli": [10, 38, 42, 89, 91, 93, 97, 98, 103], "associ": [10, 13, 17, 33, 35, 38, 42, 69, 101], "blogpost": 10, "proper": [10, 57, 61, 66, 69, 86, 91, 94, 97, 101, 103], "scenario": [10, 52, 54, 71, 89, 90], "underli": [10, 43, 54, 70, 79, 81, 108], "stem": [10, 70, 104], "evolv": 10, "influenc": 10, "act": [10, 68, 89], "accordingli": [10, 33, 52], "emploi": [10, 102, 104], "partit": [10, 105], "ahead": 10, "good": [10, 38, 42, 55, 60, 62, 68, 71, 75, 77, 78, 83, 91, 95, 98], "problem": [10, 33, 41, 49, 78, 83, 89, 90, 91, 94, 95, 97], "deploy": [10, 86, 87, 99, 106], "overlook": [10, 68, 103], "fact": 10, "thu": [10, 37, 42, 62, 86, 88, 93, 94, 98, 99, 105, 108], "diagnos": [10, 90, 97], "24": [10, 88, 95, 96, 98, 99, 101, 103, 106], "681458": 10, "37": [10, 89, 95, 96, 98], "804582": 10, "64": [10, 42, 86, 91, 93, 95, 99, 103], "810646": 10, "815691": 10, "78": [10, 86, 93, 96, 98, 99, 103, 106], "834293": 10, "Be": [10, 42], "cautiou": 10, "behavior": [10, 17, 37, 38, 42, 69, 97], "rarest": [10, 90, 98], "q": [10, 95, 103], "subpar": 10, "special": [10, 52, 56], "techniqu": [10, 103], "smote": 10, "asymmetr": [10, 37], "28": [10, 91, 94, 95, 96, 98, 99, 101, 108], "75": [10, 49, 89, 90, 95, 96, 98, 101, 102, 103, 106, 108], "33": [10, 38, 42, 95, 96, 98, 103], "68": [10, 86, 96, 98, 99, 103], "excess": [10, 91], "dark": [10, 95, 107], "bright": [10, 108], "blurri": [10, 91, 95], "lack": [10, 60, 95, 98], "unusu": [10, 103, 104], "discuss": [10, 97], "earlier": [10, 87, 108], "unintend": [10, 93, 94, 95], "relationship": [10, 37], "irrelev": 10, "exploit": 10, "fail": [10, 13], "unseen": 10, "hold": [10, 13], "aris": 10, "captur": [10, 37, 88, 103, 104, 107], "environment": 10, "preprocess": [10, 86, 87, 90, 93, 95, 104, 106], "systemat": [10, 78, 82, 101], "photograph": 10, "uncorrelated": [10, 95], "spurious": 10, "review": [10, 86, 87, 90, 93, 94, 96, 97, 98, 99, 103, 106, 107, 108], "troublesom": 10, "spurious_correl": [10, 95], "correlations_df": [10, 95], "blurry_scor": [10, 95], "559": [10, 98], "dark_scor": [10, 91, 95], "808": 10, "light_scor": [10, 95], "723": [10, 93, 98], "odd_size_scor": [10, 95], "957": 10, "odd_aspect_ratio_scor": [10, 95], "835": 10, "grayscale_scor": [10, 95], "003": 10, "low_information_scor": [10, 91, 95], "688": [10, 98, 106], "categor": [10, 70, 85, 86, 89, 90, 92, 97, 98, 106], "characterist": [10, 37, 95], "grayscal": [10, 91, 95], "cluster": [10, 19, 32, 98], "slice": [10, 98], "poor": [10, 95, 98], "subpopul": [10, 98], "faq": [10, 83, 90, 91, 93, 94, 100], "get_self_confidence_for_each_label": [10, 49, 71], "r": [10, 41, 73, 89, 90, 95, 106, 107], "tabular": [10, 83, 85, 89, 90, 92, 95, 97, 98, 101], "encod": [10, 50, 69, 75, 78, 86, 87, 93, 94, 97, 98, 106, 107], "71": [10, 95, 96, 98, 99, 103, 106], "70": [10, 81, 93, 95, 98], "69": [10, 98, 99, 106], "subgroup": [10, 95], "wors": [10, 95, 101], "ratio": [10, 95], "miss": [10, 28, 38, 42, 57, 66, 68, 97, 98, 103, 106], "pattern": [10, 95], "isn": [10, 18, 28], "scalabl": 10, "sacrific": 10, "One": [10, 57, 70, 97], "quantif": 10, "39": [10, 87, 88, 89, 91, 94, 95, 96, 97, 98, 103, 106, 107, 108], "32": [10, 88, 89, 95, 96, 98, 101, 103], "valuabl": [10, 19, 95], "exert": [10, 90], "possible_issue_typ": 10, "label_kwarg": 10, "outlier_kwarg": 10, "near_duplicate_kwarg": 10, "non_iid_kwarg": 10, "class_imbalance_kwarg": 10, "underperforming_group_kwarg": 10, "null_kwarg": 10, "data_valuation_kwarg": 10, "health_summary_paramet": [10, 22, 24, 31], "health_summari": [10, 24, 37, 83, 96], "health_summary_kwarg": 10, "tandem": [10, 96], "view": [10, 38, 42, 43, 44, 77, 79, 81, 83, 86, 87, 88, 89, 90, 93, 94, 96, 98, 99, 101, 102, 103, 104, 105, 106, 108], "ood_kwarg": 10, "outofdistribut": [10, 29, 70, 104], "outsid": [10, 97, 102], "outlierissuemanag": [10, 15, 22, 29], "nearduplicateissuemanag": [10, 15, 20, 22], "noniidissuemanag": [10, 15, 22, 27], "num_permut": [10, 27], "permut": [10, 27], "significance_threshold": [10, 27], "signic": 10, "noniid": [10, 22], "classimbalanceissuemanag": [10, 15, 21, 22], "underperforminggroupissuemanag": [10, 15, 22, 32], "determinin": 10, "neighbour": 10, "min_cluster_sampl": [10, 32], "filter_cluster_id": [10, 22, 32], "clustering_kwarg": [10, 32], "nullissuemanag": [10, 15, 22, 28], "datavaluationissuemanag": [10, 15, 19, 22], "codeblock": 10, "demonstr": [10, 41, 52, 89, 90, 91, 94, 95, 96, 97, 98, 99, 101, 102, 103, 105, 106, 107], "howev": [10, 38, 42, 52, 57, 86, 87, 88, 91, 93, 94, 95, 98, 101, 105, 107], "mandatori": 10, "image_issue_types_kwarg": 10, "vice": [10, 62], "versa": [10, 62], "light": [10, 91, 95, 96, 103, 107], "29": [10, 91, 95, 96, 98, 101, 102, 103, 107, 108], "low_inform": [10, 91, 95], "odd_aspect_ratio": [10, 91, 95], "35": [10, 89, 95, 96, 98, 101, 102, 103, 108], "odd_siz": [10, 91, 95], "doc": [10, 38, 42, 70, 83, 88, 89, 90, 91, 93, 94, 96, 98, 99, 101, 102, 104, 106, 108], "label_scor": [11, 24, 26, 31, 88, 89, 90, 91, 93, 94, 95, 98, 99, 102, 106], "is_outlier_issu": [11, 89, 90, 91, 93, 94, 95, 98, 99], "outlier_scor": [11, 29, 89, 90, 91, 93, 94, 95, 98, 99, 104], "is_near_duplicate_issu": [11, 89, 90, 91, 93, 94, 95, 97, 98, 99], "near_duplicate_scor": [11, 20, 89, 90, 91, 93, 94, 95, 97, 98, 99], "near_duplicate_set": [11, 20, 22, 89, 90, 91, 93, 94, 97, 98, 99], "is_non_iid_issu": [11, 90, 93, 94, 95, 98, 99], "non_iid_scor": [11, 27, 90, 93, 94, 95, 98, 99], "is_class_imbalance_issu": [11, 90, 95, 98], "class_imbalance_scor": [11, 21, 90, 95, 98], "is_underperforming_group_issu": [11, 90, 95, 98], "underperforming_group_scor": [11, 32, 90, 95, 98], "is_null_issu": [11, 90, 95, 98], "null_scor": [11, 28, 90, 95, 98], "is_data_valuation_issu": [11, 95], "data_valuation_scor": [11, 19, 95], "studio": [12, 83, 86, 87, 90, 91, 93, 94, 96, 97, 98, 99, 102, 104, 105, 106], "data_issu": [12, 16, 17, 34], "issue_find": [12, 16], "factori": [12, 16, 17], "model_output": [12, 16], "except": [13, 38, 42, 60, 71, 89, 90, 91, 98, 101], "dataformaterror": [13, 16], "add_not": 13, "with_traceback": 13, "tb": 13, "__traceback__": 13, "datasetdicterror": [13, 16], "datasetdict": 13, "datasetloaderror": [13, 16], "dataset_typ": 13, "sublist": 13, "map_to_int": 13, "abc": [13, 23, 33], "is_avail": [13, 91], "dataissu": [14, 16, 17, 34], "central": [14, 108], "repositori": 14, "strategi": [14, 49, 95, 97], "_infostrategi": 14, "basi": 14, "collect_statist": 14, "reus": [14, 23], "avoid": [14, 38, 41, 42, 44, 52, 57, 63, 66, 69, 73, 75, 77, 89, 90, 97, 98], "recomput": [14, 87], "weighted_knn_graph": 14, "issue_manager_that_computes_knn_graph": 14, "collect_issues_from_issue_manag": 14, "collect_issues_from_imagelab": 14, "imagelab": 14, "set_health_scor": 14, "health": [14, 24, 37, 62, 83], "get_data_statist": [14, 16], "concret": 15, "subclass": [15, 38, 42, 70, 89], "regressionlabelissuemanag": [15, 22, 30, 31], "multilabelissuemanag": [15, 22, 25, 26], "from_str": [15, 35, 45, 49], "my_issu": 15, "logic": [15, 35, 41, 44, 75, 77, 98], "issuefind": [16, 17, 34], "modeloutput": [16, 33], "multiclasspredprob": [16, 33], "regressionpredict": [16, 33], "multilabelpredprob": [16, 33], "instati": 17, "public": [17, 95, 98, 99, 103, 107, 108], "creation": [17, 42, 95], "execut": [17, 38, 42, 89, 97, 103], "coordin": [17, 66, 68, 69, 103, 108], "At": [17, 69, 97], "get_available_issue_typ": 17, "direct": [18, 28, 38, 42, 54, 60], "vstack": [19, 57, 91, 96, 97, 99, 101, 102], "25": [19, 27, 38, 49, 55, 90, 91, 95, 96, 98, 99, 101, 102, 103, 108], "classvar": [19, 20, 21, 23, 24, 26, 27, 28, 29, 31, 32], "short": [19, 20, 21, 23, 24, 26, 27, 28, 29, 31, 32, 56, 57], "item": [19, 20, 21, 23, 24, 26, 27, 28, 29, 31, 32, 38, 42, 57, 89, 90, 91, 97, 99, 101, 102], "some_info_kei": [19, 20, 21, 23, 24, 26, 27, 28, 29, 31, 32], "additional_info_kei": [19, 20, 21, 23, 24, 26, 27, 28, 29, 31, 32], "default_threshold": [19, 22, 29], "collect_info": [19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32], "info_to_omit": [19, 20, 21, 23, 24, 26, 27, 29, 31, 32], "compos": [19, 20, 21, 23, 24, 26, 27, 29, 31, 32, 38, 42, 87, 94, 104], "is_x_issu": [19, 20, 21, 23, 24, 26, 27, 29, 31, 32], "x_score": [19, 20, 21, 23, 24, 26, 27, 29, 31, 32], "val_a": [19, 20, 21, 23, 24, 26, 27, 29, 31, 32], "val_b1": [19, 20, 21, 23, 24, 26, 27, 29, 31, 32], "val_b2": [19, 20, 21, 23, 24, 26, 27, 29, 31, 32], "report_str": [19, 20, 21, 23, 24, 26, 27, 28, 29, 31, 32, 34], "_": [20, 21, 23, 24, 26, 27, 28, 31, 32, 49, 56, 57, 86, 88, 89, 91, 95, 96, 99, 102], "occurr": [20, 21, 23, 27, 28, 29, 32, 56], "median_nn_dist": 20, "bleed": [22, 25, 30, 40], "edg": [22, 25, 30, 40, 68, 83, 86, 87, 90, 93, 94, 96, 99, 102, 104, 105, 106, 108], "sharp": [22, 25, 30, 40], "get_health_summari": [22, 24], "ood": [22, 29, 70, 71, 104], "simplified_kolmogorov_smirnov_test": [22, 27], "outlier_cluster_label": [22, 32], "no_underperforming_cluster_id": [22, 32], "perform_clust": [22, 32], "get_underperforming_clust": [22, 32], "find_issues_with_predict": [22, 30, 31], "find_issues_with_featur": [22, 30, 31], "believ": [23, 107], "priori": [23, 99], "abstract": [23, 33], "applic": [24, 61, 95, 97, 99, 101, 108], "typevar": [24, 26, 38, 42, 56, 65, 68, 69], "scalartyp": [24, 26], "covari": [24, 26, 73, 106], "summary_dict": 24, "neighbor_histogram": 27, "non_neighbor_histogram": 27, "kolmogorov": 27, "smirnov": 27, "largest": [27, 41, 49, 52, 71, 75, 77, 103, 107], "empir": [27, 48, 61], "cumul": 27, "ecdf": 27, "histogram": [27, 93, 95, 106], "absolut": [27, 31], "trial": 27, "null_track": 28, "extend": [28, 50, 60, 91, 95, 98, 103, 104, 108], "superclass": 28, "arbitrari": [28, 37, 77, 81, 89, 104, 106], "prompt": 28, "address": [28, 87, 89, 90, 94, 97], "enabl": [28, 42, 54, 98], "scaling_factor": [29, 55], "37037": 29, "q3_avg_dist": 29, "iqr_avg_dist": 29, "median_outlier_scor": 29, "issue_threshold": 29, "multipli": [31, 55], "deleg": 31, "confus": [32, 33, 37, 38, 42, 44, 57, 69, 87, 108], "50": [32, 42, 95, 97, 98, 99, 101, 103, 104, 106, 108], "keepdim": [32, 97], "signifi": 32, "absenc": 32, "int64": [32, 88, 98, 101], "npt": 32, "int_": 32, "id": [32, 61, 89, 91, 95, 97, 101], "unique_cluster_id": 32, "exclud": [32, 34, 43, 78, 82, 89, 108], "worst": [32, 49, 101], "performed_clust": 32, "worst_cluster_id": 32, "convent": [33, 35], "subject": [33, 35, 98], "meant": [33, 35], "Not": [33, 54], "mainli": [33, 104, 108], "content": [33, 70, 88, 89, 90, 91, 96, 98, 99, 101, 102, 104, 106, 108], "fetch": [33, 41, 88, 90, 95, 97], "datset": 34, "get_report": 34, "enum": [35, 49], "qualnam": [35, 49], "boundari": [35, 49, 89, 90], "continu": [35, 60, 86, 87, 91, 94, 97, 101, 103, 106, 108], "binari": [35, 49, 57, 63, 65, 99, 108], "simultan": [35, 106], "task_str": 35, "is_classif": 35, "__contains__": [35, 45, 49], "member": [35, 38, 42, 49, 89], "typeerror": [35, 49], "12": [35, 49, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 99, 101, 103, 104, 106, 107, 108], "__getitem__": [35, 45, 49], "match": [35, 37, 38, 42, 44, 49, 61, 62, 71, 89, 90, 91, 96, 103, 105, 107], "__iter__": [35, 45, 49], "__len__": [35, 45, 49], "alias": [35, 49], "is_regress": 35, "is_multilabel": 35, "overview": [37, 52, 86, 87, 88, 90, 91, 93, 94, 101, 103, 104, 106, 108], "modifi": [37, 38, 41, 42, 52, 54, 57, 97, 98, 99], "rank_classes_by_label_qu": [37, 90], "merg": [37, 52, 56, 83, 96, 97, 98, 108], "find_overlapping_class": [37, 97, 99], "problemat": [37, 62, 78, 82, 88, 103, 108], "unnorm": [37, 62, 99], "abov": [37, 38, 41, 42, 54, 57, 61, 68, 69, 71, 77, 81, 86, 87, 88, 89, 90, 91, 93, 94, 95, 97, 98, 99, 101, 102, 103, 105, 106, 107, 108], "model_select": [37, 49, 86, 87, 88, 89, 90, 91, 93, 94, 95, 97, 98, 99, 101, 102, 104, 106], "cross_val_predict": [37, 42, 86, 87, 88, 89, 90, 93, 94, 95, 98, 99, 101, 105, 106], "get_data_labels_from_dataset": 37, "yourfavoritemodel": [37, 99], "cv": [37, 49, 86, 88, 89, 90, 93, 95, 98, 99, 101], "df": [37, 57, 82, 88, 95, 97], "overall_label_qu": [37, 62], "col": 37, "prob": [37, 56, 99, 105], "divid": [37, 62, 71], "label_nois": [37, 62], "human": [37, 96, 107, 108], "clearli": [37, 71, 91, 103, 107], "num": [37, 62, 96, 99], "overlap": [37, 83, 95, 96, 97, 99], "ontolog": 37, "publish": [37, 108], "therefor": [37, 71, 95, 98], "vehicl": [37, 96], "truck": [37, 95, 96, 104, 107], "intuit": [37, 62], "car": [37, 96, 103, 107], "frequent": [37, 61, 95, 97, 98, 106], "l": [37, 38, 42, 66, 68, 69], "class1": 37, "class2": 37, "dog": [37, 57, 62, 64, 78, 96, 97, 104, 105, 108], "cat": [37, 57, 62, 64, 96, 97, 104, 105], "co": [37, 38, 39], "noisy_label": [37, 89, 90, 102], "overlapping_class": 37, "descend": [37, 38, 42, 49, 62, 69], "overall_label_health_scor": [37, 62, 99], "half": [37, 38, 40, 42, 62, 96, 108], "health_scor": [37, 62], "classes_by_label_qu": [37, 90], "cnn": [38, 40, 42, 91], "cifar": [38, 39, 95, 96, 104], "teach": [38, 39], "bhanml": 38, "blob": [38, 95], "master": [38, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 98, 99, 101, 102, 103, 104, 106], "call_bn": [38, 40], "bn": 38, "input_channel": 38, "n_output": 38, "dropout_r": 38, "top_bn": 38, "architectur": [38, 42], "shown": [38, 69, 88, 89, 90, 91, 93, 94, 97, 98, 99, 101, 104, 105, 107, 108], "forward": [38, 39, 40, 42, 91, 101], "overridden": [38, 42], "although": [38, 42, 70, 86, 93, 98], "recip": [38, 42], "afterward": [38, 42], "sinc": [38, 42, 46, 58, 62, 69, 77, 81, 97, 98, 101, 102, 103, 105, 108], "hook": [38, 42, 96], "silent": [38, 41, 42], "t_destin": [38, 40, 42], "__call__": [38, 40, 42, 45, 49], "add_modul": [38, 40, 42], "child": [38, 42], "fn": [38, 42, 69], "recurs": [38, 42, 49], "submodul": [38, 42, 51], "children": [38, 40, 42, 108], "nn": [38, 39, 42, 52, 91], "init": [38, 42, 99], "no_grad": [38, 42, 91, 104], "init_weight": [38, 42], "linear": [38, 42, 87, 91, 94], "fill_": [38, 42], "net": [38, 42, 88, 91, 96], "in_featur": [38, 42], "out_featur": [38, 42], "bia": [38, 42, 91], "tensor": [38, 39, 42, 88, 91, 104], "requires_grad": [38, 42], "bfloat16": [38, 40, 42], "cast": [38, 42, 88], "buffer": [38, 40, 42], "datatyp": [38, 42], "xdoctest": [38, 42], "undefin": [38, 42], "var": [38, 42], "buf": [38, 42], "20l": [38, 42], "1l": [38, 42], "5l": [38, 42], "call_super_init": [38, 40, 42], "immedi": [38, 42, 104], "compil": [38, 40, 42, 60], "cpu": [38, 40, 42, 44, 88, 91], "move": [38, 42, 49, 84, 96], "cuda": [38, 40, 42, 88, 91], "devic": [38, 42, 88, 91, 98], "gpu": [38, 42, 87, 88, 94], "live": [38, 42], "copi": [38, 42, 73, 86, 88, 89, 90, 93, 95, 97, 98, 102, 105, 106], "doubl": [38, 40, 42], "dump_patch": [38, 40, 42], "eval": [38, 40, 42, 91, 102, 104], "dropout": [38, 42], "batchnorm": [38, 42], "grad": [38, 42], "extra_repr": [38, 40, 42], "line": [38, 42, 83, 89, 95, 96, 101, 104, 108], "get_buff": [38, 40, 42], "target": [38, 39, 42, 73, 74, 95, 104, 106], "throw": [38, 42], "get_submodul": [38, 40, 42], "explan": [38, 42], "qualifi": [38, 42], "referenc": [38, 42], "attributeerror": [38, 42], "invalid": [38, 42, 94], "resolv": [38, 42, 95, 108], "get_extra_st": [38, 40, 42], "state_dict": [38, 40, 42], "set_extra_st": [38, 40, 42], "build": [38, 42, 52, 91, 95, 107], "picklabl": [38, 42], "serial": [38, 42], "backward": [38, 42, 91], "break": [38, 42, 91, 103], "pickl": [38, 42, 103], "get_paramet": [38, 40, 42], "net_b": [38, 42], "net_c": [38, 42], "conv": [38, 42], "conv2d": [38, 42, 91], "16": [38, 42, 49, 52, 60, 77, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 99, 101, 103, 104, 107, 108], "kernel_s": [38, 42], "stride": [38, 42], "200": [38, 42, 71, 95, 96, 103, 108], "diagram": [38, 42, 105], "degre": [38, 42], "queri": [38, 42, 52, 54, 90, 91, 95, 97, 98, 102], "named_modul": [38, 40, 42], "o": [38, 42, 55, 56, 88, 89, 90, 96, 97, 98, 99, 102, 103, 108], "transit": [38, 42], "ipu": [38, 40, 42], "load_state_dict": [38, 40, 42], "strict": [38, 42, 49], "persist": [38, 42], "strictli": [38, 42], "inplac": [38, 42, 95, 101], "preserv": [38, 42, 57], "namedtupl": [38, 42], "missing_kei": [38, 42], "unexpected_kei": [38, 42], "runtimeerror": [38, 42], "idx": [38, 42, 57, 58, 69, 89, 91, 95, 97, 98, 99, 101, 103, 104], "named_buff": [38, 40, 42], "prefix": [38, 42, 88, 108], "remove_dupl": [38, 42], "prepend": [38, 42], "running_var": [38, 42], "named_children": [38, 40, 42], "conv4": [38, 42], "conv5": [38, 42], "memo": [38, 42], "named_paramet": [38, 40, 42], "register_backward_hook": [38, 40, 42], "deprec": [38, 42, 46], "favor": [38, 42], "register_full_backward_hook": [38, 40, 42], "removablehandl": [38, 42], "register_buff": [38, 40, 42], "running_mean": [38, 42], "register_forward_hook": [38, 40, 42], "with_kwarg": [38, 42], "always_cal": [38, 42], "possibli": [38, 42, 86, 93], "fire": [38, 42, 96], "register_module_forward_hook": [38, 42], "regardless": [38, 42, 89, 90], "register_forward_pre_hook": [38, 40, 42], "And": [38, 42], "forward_pr": [38, 42], "register_module_forward_pre_hook": [38, 42], "gradient": [38, 42, 91, 93, 106], "grad_input": [38, 42], "grad_output": [38, 42], "technic": [38, 42], "caller": [38, 42], "register_module_full_backward_hook": [38, 42], "register_full_backward_pre_hook": [38, 40, 42], "backward_pr": [38, 42], "register_module_full_backward_pre_hook": [38, 42], "register_load_state_dict_post_hook": [38, 40, 42], "post": [38, 42, 52], "incompatible_kei": [38, 42], "modif": [38, 42, 52], "thrown": [38, 42], "register_modul": [38, 40, 42], "register_paramet": [38, 40, 42], "register_state_dict_pre_hook": [38, 40, 42], "keep_var": [38, 42], "requires_grad_": [38, 40, 42], "autograd": [38, 42], "freez": [38, 42, 87, 88, 94], "finetun": [38, 42], "gan": [38, 42], "share_memori": [38, 40, 42], "share_memory_": [38, 42], "destin": [38, 42], "shallow": [38, 42], "releas": [38, 42, 60, 84, 97], "design": [38, 42, 52], "ordereddict": [38, 42], "detach": [38, 42, 91], "non_block": [38, 42], "memory_format": [38, 42], "channels_last": [38, 42], "Its": [38, 42, 49, 62, 68], "complex": [38, 42, 98], "integr": [38, 42, 54, 83, 97], "asynchron": [38, 42], "host": [38, 42], "pin": [38, 42, 87, 94, 96], "desir": [38, 42, 52, 56, 69], "4d": [38, 42], "ignore_w": [38, 42], "determinist": [38, 42, 88], "1913": [38, 42], "3420": [38, 42], "5113": [38, 42], "2325": [38, 42], "env": [38, 42], "torch_doctest_cuda1": [38, 42], "gpu1": [38, 42], "1914": [38, 42], "5112": [38, 42], "2324": [38, 42], "float16": [38, 42], "cdoubl": [38, 42], "3741": [38, 42], "2382": [38, 42], "5593": [38, 42], "4443": [38, 42], "complex128": [38, 42], "6122": [38, 42], "1150": [38, 42], "to_empti": [38, 40, 42], "storag": [38, 42], "dst_type": [38, 42], "xpu": [38, 40, 42], "zero_grad": [38, 40, 42, 91], "set_to_non": [38, 42], "reset": [38, 42], "context": [38, 42, 103], "noisili": [39, 99], "han": 39, "2018": 39, "cifar_cnn": [39, 40], "loss_coteach": [39, 40], "y_1": 39, "y_2": 39, "forget_r": 39, "class_weight": 39, "logit": [39, 60, 91], "decim": [39, 57], "forget": [39, 49, 108], "rate_schedul": 39, "epoch": [39, 40, 42, 91, 97], "initialize_lr_schedul": [39, 40], "lr": [39, 40, 42], "001": [39, 71, 95, 97], "250": [39, 89, 90, 99, 103], "epoch_decay_start": 39, "schedul": 39, "beta": 39, "adam": 39, "adjust_learning_r": [39, 40], "alpha_plan": 39, "beta1_plan": 39, "forget_rate_schedul": [39, 40], "num_gradu": 39, "expon": 39, "tell": [39, 87, 91, 94, 99], "train_load": [39, 42], "model1": [39, 99], "optimizer1": 39, "model2": [39, 99], "optimizer2": 39, "dataload": [39, 91, 104], "parser": 39, "parse_arg": 39, "num_iter_per_epoch": 39, "print_freq": 39, "topk": 39, "top1": 39, "top5": 39, "test_load": 39, "offici": [40, 59, 95, 108], "wish": [40, 59, 98, 104, 107, 108], "adj_confident_thresholds_shar": [40, 41], "labels_shar": [40, 41], "pred_probs_shar": [40, 41], "labelinspector": [40, 41, 97], "get_num_issu": [40, 41], "get_quality_scor": [40, 41], "update_confident_threshold": [40, 41], "score_label_qu": [40, 41], "split_arr": [40, 41], "span_classif": 40, "display_issu": [40, 43, 76, 77, 78, 79, 80, 81, 82, 107, 108], "mnist_pytorch": 40, "get_mnist_dataset": [40, 42], "get_sklearn_digits_dataset": [40, 42], "simplenet": [40, 42], "batch_siz": [40, 41, 42, 75, 77, 91, 97, 104, 107], "log_interv": [40, 42], "momentum": [40, 42], "no_cuda": [40, 42], "test_batch_s": [40, 42, 91], "loader": [40, 42, 91], "set_predict_proba_request": [40, 42], "set_predict_request": [40, 42], "coteach": [40, 84], "mini": [41, 75, 77, 97], "low_self_confid": [41, 44, 63], "self_confid": [41, 44, 45, 49, 63, 65, 71, 79, 81, 86, 87, 97, 99], "conveni": [41, 54, 86, 87, 88, 94, 98], "script": 41, "labels_fil": [41, 97], "pred_probs_fil": [41, 97], "quality_score_kwarg": 41, "num_issue_kwarg": 41, "return_mask": 41, "variant": [41, 61, 107], "read": [41, 46, 90, 97, 99, 104, 108], "zarr": [41, 97], "memmap": [41, 107], "pythonspe": 41, "mmap": [41, 97], "hdf5": 41, "further": [41, 43, 62, 63, 65, 68, 69, 77, 78, 88, 95, 97, 98], "yourfil": 41, "npy": [41, 96, 97, 107], "mmap_mod": [41, 107], "tip": [41, 44, 60, 97], "save_arrai": 41, "your_arrai": 41, "disk": [41, 96, 97], "npz": [41, 108], "maxim": [41, 61, 75, 77, 98, 107], "multiprocess": [41, 44, 63, 75, 77, 91, 97], "linux": [41, 75, 77], "physic": [41, 44, 75, 77, 103], "psutil": [41, 44, 75, 77], "labels_arrai": [41, 58], "predprob": 41, "pred_probs_arrai": 41, "back": [41, 52, 69, 89, 97, 98, 103, 104], "store_result": 41, "becom": [41, 95, 104], "verifi": [41, 54, 97, 98, 101, 104], "long": [41, 61, 70, 98, 101], "enough": [41, 57, 95, 97], "chunk": [41, 105], "ram": [41, 96], "end_index": 41, "labels_batch": 41, "pred_probs_batch": 41, "batch_result": 41, "indices_of_examples_with_issu": [41, 97], "shortcut": 41, "encount": [41, 44, 75], "1000": [41, 88, 94, 97, 104], "aggreg": [41, 45, 49, 61, 65, 68, 71, 81, 97, 99, 101], "seen": [41, 97, 98, 104, 108], "far": [41, 61, 98], "label_quality_scor": [41, 65, 68, 71, 74, 99, 103], "method1": 41, "method2": 41, "normalized_margin": [41, 44, 45, 49, 63, 65, 71, 79, 81], "low_normalized_margin": [41, 44, 63], "issue_indic": [41, 68, 91], "update_num_issu": 41, "arr": [41, 97], "chunksiz": 41, "convnet": 42, "bespok": [42, 60], "download": [42, 88, 95, 97, 104], "mnist": [42, 83, 88, 96], "handwritten": 42, "digit": [42, 88, 96], "last": [42, 49, 66, 69, 89, 90, 97, 98, 101, 103, 108], "sklearn_digits_test_s": 42, "01": [42, 71, 73, 88, 95, 99, 102, 103], "templat": 42, "flexibli": 42, "among": [42, 61, 99], "test_set": 42, "overrid": 42, "train_idx": [42, 57, 104], "train_label": [42, 87, 98, 104], "span": [43, 98], "sentenc": [43, 56, 79, 81, 82, 87, 94], "token_classif": [43, 56, 79, 81, 82, 97], "encourag": [44, 63, 71, 74], "multilabel_classif": [44, 62, 63, 65, 71, 97, 102], "pred_probs_by_class": 44, "prune_count_matrix_col": 44, "rank_by_kwarg": [44, 63, 71, 99], "num_to_remove_per_class": [44, 63], "bad": [44, 52, 63, 68, 71, 94, 97], "seem": [44, 99, 102], "aren": 44, "confidence_weighted_entropi": [44, 45, 49, 63, 65, 71, 79, 81], "label_issues_idx": [44, 71, 98], "entropi": [44, 46, 48, 49, 70, 71], "prune_by_class": [44, 63, 99], "predicted_neq_given": [44, 63, 99], "prune_counts_matrix": 44, "smallest": [44, 71], "unus": 44, "number_of_mislabeled_examples_in_class_k": 44, "delet": [44, 83, 87, 97], "too": [44, 49, 52, 70, 91, 97, 98, 103], "thread": [44, 63], "window": [44, 96], "shorter": [44, 66], "find_predicted_neq_given": 44, "find_label_issues_using_argmax_confusion_matrix": 44, "remove_noise_from_class": [45, 57], "clip_noise_r": [45, 57], "clip_valu": [45, 57], "value_count": [45, 57, 97], "value_counts_fill_missing_class": [45, 57], "get_missing_class": [45, 57], "round_preserving_sum": [45, 57], "round_preserving_row_tot": [45, 57], "estimate_pu_f1": [45, 57], "confusion_matrix": [45, 57], "print_square_matrix": [45, 57], "print_noise_matrix": [45, 57, 99], "print_inverse_noise_matrix": [45, 57], "print_joint_matrix": [45, 57, 99], "compress_int_arrai": [45, 57], "train_val_split": [45, 57], "subset_x_i": [45, 57], "subset_label": [45, 57], "subset_data": [45, 57], "extract_indices_tf": [45, 57], "unshuffle_tensorflow_dataset": [45, 57], "is_torch_dataset": [45, 57], "is_tensorflow_dataset": [45, 57], "csr_vstack": [45, 57], "append_extra_datapoint": [45, 57], "get_num_class": [45, 57], "num_unique_class": [45, 57], "get_unique_class": [45, 57], "format_label": [45, 57], "smart_display_datafram": [45, 57], "force_two_dimens": [45, 57], "latent_algebra": [45, 84], "compute_ps_py_inv_noise_matrix": [45, 47], "compute_py_inv_noise_matrix": [45, 47], "compute_inv_noise_matrix": [45, 47], "compute_noise_matrix_from_invers": [45, 47], "compute_pi": [45, 47], "compute_pyx": [45, 47], "label_quality_util": 45, "get_normalized_entropi": [45, 46], "multilabel_util": [45, 102], "stack_compl": [45, 50], "get_onehot_num_class": [45, 50], "int2onehot": [45, 50, 102], "onehot2int": [45, 50, 102], "multilabel_scor": [45, 65], "classlabelscor": [45, 49], "exponential_moving_averag": [45, 49, 65], "softmin": [45, 49, 65, 68, 77, 81], "possible_method": [45, 49], "multilabelscor": [45, 49], "get_class_label_quality_scor": [45, 49], "multilabel_pi": [45, 49], "get_cross_validated_multilabel_pred_prob": [45, 49], "default_k": [45, 51, 52], "features_to_knn": [45, 51, 52], "construct_knn_graph_from_index": [45, 51, 52, 54], "create_knn_graph_and_index": [45, 51, 52], "correct_knn_graph": [45, 51, 52, 95], "correct_knn_distances_and_indices_with_exact_duplicate_sets_inplac": [45, 51, 52], "correct_knn_distances_and_indic": [45, 51, 52], "high_dimension_cutoff": [45, 51, 53], "row_count_cutoff": [45, 51, 53], "decide_euclidean_metr": [45, 51, 53], "decide_default_metr": [45, 51, 53], "construct_knn": [45, 51, 54], "transform_distances_to_scor": [45, 55], "correct_precision_error": [45, 55], "token_classification_util": [45, 108], "get_sent": [45, 56, 108], "filter_sent": [45, 56, 108], "process_token": [45, 56], "merge_prob": [45, 56], "color_sent": [45, 56], "assert_valid_input": [45, 58], "assert_valid_class_label": [45, 58], "assert_nonempty_input": [45, 58], "assert_indexing_work": [45, 58], "labels_to_arrai": [45, 58], "labels_to_list_multilabel": [45, 58], "min_allowed_prob": 46, "wikipedia": 46, "activ": [46, 48, 60, 61, 83, 101], "towardsdatasci": 46, "cheatsheet": 46, "ec57bc067c0b": 46, "clip": [46, 57, 88, 95], "behav": 46, "unnecessari": [46, 97], "slightli": [46, 86, 87], "interv": [46, 49, 104], "herein": 47, "inexact": 47, "cours": [47, 98], "propag": 47, "throughout": [47, 57, 73, 82, 88, 101, 107, 108], "increas": [47, 55, 68, 70, 71, 88, 89, 95, 97, 101, 102, 108], "dot": [47, 81, 97], "true_labels_class_count": 47, "pyx": 47, "multiannot": 48, "assert_valid_inputs_multiannot": 48, "labels_multiannot": [48, 61], "ensembl": [48, 49, 61, 71, 86, 93, 97, 102, 104, 106], "allow_single_label": 48, "annotator_id": 48, "assert_valid_pred_prob": 48, "pred_probs_unlabel": [48, 61], "format_multiannotator_label": [48, 61, 101], "formatted_label": [48, 57], "old": [48, 57, 84, 96], "check_consensus_label_class": 48, "consensus_label": [48, 61, 101], "consensus_method": [48, 61], "consensu": [48, 61, 83, 100, 108], "establish": [48, 60, 87, 106], "compute_soft_cross_entropi": 48, "soft": [48, 96], "find_best_temp_scal": 48, "coarse_search_rang": [48, 73, 97], "fine_search_s": [48, 73, 97], "temperatur": [48, 49, 68, 77, 81], "scale": [48, 55, 86, 95, 96, 97, 104, 107], "factor": [48, 49, 55, 75, 77], "minim": [48, 68, 104], "temp_scale_pred_prob": 48, "temp": 48, "sharpen": [48, 96], "smoothen": 48, "get_normalized_margin_for_each_label": [49, 71], "get_confidence_weighted_entropy_for_each_label": [49, 71], "scorer": 49, "alpha": [49, 65, 68, 89, 90, 95, 99, 102, 106], "exponenti": 49, "ema": 49, "s_1": 49, "s_k": 49, "ema_k": 49, "accord": [49, 63, 93, 94, 99, 108], "formula": [49, 55], "_t": 49, "cdot": 49, "s_t": 49, "qquad": 49, "leq": 49, "_1": 49, "recent": [49, 108], "success": 49, "previou": [49, 52, 91, 93, 97, 103], "discount": 49, "s_ema": 49, "175": [49, 91, 98, 99, 103], "underflow": 49, "nan": [49, 61, 86, 93, 95, 98, 101, 106], "aggregated_scor": 49, "base_scor": [49, 98], "base_scorer_kwarg": 49, "aggregator_kwarg": [49, 65], "n_sampl": [49, 95], "n_label": 49, "class_label_quality_scor": 49, "452": 49, "new_scor": 49, "575": [49, 98], "get_label_quality_scores_per_class": [49, 64, 65], "ml_scorer": 49, "binar": [49, 50], "reformat": [49, 88], "wider": 49, "splitter": 49, "kfold": [49, 91], "onevsrestclassifi": [49, 102], "randomforestclassifi": [49, 99, 102], "n_split": [49, 91, 102], "pred_prob_slic": 50, "onehot": 50, "hot": [50, 63, 69, 75, 78, 86, 93, 96, 97, 106, 107], "onehot_matrix": 50, "pairwis": [51, 53, 70], "reli": [52, 70, 87, 88, 89, 90, 94, 103, 104, 106], "sklearn_knn_kwarg": 52, "correction_featur": 52, "discourag": 52, "flexibl": [52, 97], "manner": [52, 65, 86, 87, 95, 101, 106], "701": 52, "900": [52, 86, 93, 106], "436": [52, 98], "000": [52, 87, 91, 94, 95, 96, 108], "idea": [52, 71, 98, 103], "dens": [52, 60, 95], "33140006": 52, "76210367": 52, "correct_exact_dupl": 52, "mutual": [52, 62, 102], "vari": [52, 68, 90], "exact_duplicate_set": 52, "main": [52, 61], "front": [52, 96], "consider": 52, "capabl": [52, 83, 98], "come": [52, 57, 89, 90, 97, 107], "misidentif": 52, "corrected_dist": 52, "corrected_indic": 52, "sqrt": 52, "distant": 52, "suitabl": [53, 61, 86, 93, 95, 98], "slower": 53, "decid": [53, 61, 87, 94, 96, 101, 106, 108], "predefin": 53, "met": [53, 108], "euclidean_dist": [53, 70], "spatial": [53, 70], "decis": [53, 86, 89, 90, 98], "That": [53, 86, 87, 90, 93, 94, 96, 99, 102, 104, 106], "cosine_dist": 53, "knn_kwarg": 54, "html": [54, 57, 66, 69, 70, 88, 89, 90, 91, 93, 94, 97, 98, 99], "kneighbor": 54, "metric_param": 54, "n_features_in_": 54, "effective_metric_params_": 54, "effective_metric_": 54, "n_samples_fit_": 54, "__sklearn_is_fitted__": 54, "conduct": 54, "is_fit": 54, "trail": 54, "underscor": 54, "avg_dist": 55, "exp": [55, 70, 71, 89], "dt": 55, "right": [55, 66, 69, 87, 94, 102, 103, 104], "strength": [55, 69, 95], "pronounc": 55, "differenti": 55, "ly": 55, "rule": [55, 56, 83, 96], "thumb": 55, "ood_features_scor": [55, 70, 104], "88988177": 55, "80519832": 55, "toler": 55, "minkowski": 55, "noth": 55, "epsilon": 55, "sensibl": 55, "fixed_scor": 55, "readabl": 56, "lambda": [56, 88, 89, 97, 98, 101], "long_sent": 56, "headlin": 56, "charact": [56, 57], "s1": 56, "s2": 56, "processed_token": 56, "alecnlcb": 56, "entiti": [56, 83, 97, 108], "mapped_ent": 56, "unique_ident": 56, "loc": [56, 89, 90, 91, 93, 95, 108], "nbitbas": [56, 65], "probs_merg": 56, "0125": [56, 81], "0375": 56, "075": 56, "025": 56, "color": [56, 78, 89, 90, 93, 95, 99, 102, 104, 106, 107], "red": [56, 69, 89, 90, 95, 96, 99, 102, 103, 104, 107], "colored_sent": 56, "termcolor": 56, "31msentenc": 56, "0m": 56, "ancillari": 57, "class_without_nois": 57, "any_other_class": 57, "choos": [57, 71, 86, 93, 97, 99, 106], "tradition": 57, "new_sum": 57, "fill": 57, "major": [57, 61, 84, 91, 104], "versu": [57, 99], "obviou": 57, "cgdeboer": 57, "iteround": 57, "reach": 57, "prob_s_eq_1": 57, "claesen": 57, "f1": [57, 69, 94, 99], "BE": 57, "left_nam": 57, "top_nam": 57, "titl": [57, 89, 90, 95, 99, 102, 104], "short_titl": 57, "round_plac": 57, "pretti": [57, 99], "joint_matrix": 57, "num_possible_valu": 57, "holdout_idx": 57, "extract": [57, 70, 87, 88, 93, 94, 98, 101, 104, 107], "allow_shuffl": 57, "turn": [57, 83, 103], "shuffledataset": 57, "histori": 57, "pre_x": 57, "buffer_s": 57, "csr_matric": 57, "append": [57, 88, 91, 96, 97, 98, 99, 101, 102, 103, 104, 108], "bottom": [57, 66, 69, 95, 103], "to_data": 57, "from_data": 57, "taken": 57, "label_matrix": 57, "canon": 57, "displai": [57, 69, 78, 82, 87, 88, 93, 94, 95, 99, 108], "jupyt": [57, 88, 89, 90, 91, 96, 97, 98, 99, 101, 102, 104, 106, 108], "notebook": [57, 61, 88, 90, 96, 97, 98, 99, 101, 102, 103, 105, 107, 108], "consol": 57, "allow_missing_class": 58, "allow_one_class": 58, "length_x": 58, "labellik": 58, "labels_list": [58, 63], "keraswrappermodel": [59, 60, 83], "keraswrappersequenti": [59, 60], "tf": [60, 88], "legaci": 60, "newer": 60, "interim": 60, "advis": [60, 102], "stabil": [60, 70], "until": 60, "accommod": 60, "keraswrapp": 60, "huggingface_keras_imdb": 60, "unit": [60, 108], "model_kwarg": [60, 73], "compile_kwarg": 60, "sparsecategoricalcrossentropi": 60, "layer": [60, 87, 88, 94, 104], "my_keras_model": 60, "from_logit": 60, "declar": 60, "apply_softmax": 60, "analysi": 61, "analyz": [61, 83, 95, 99, 101, 102], "get_label_quality_multiannot": [61, 101], "vote": 61, "crowdsourc": [61, 83, 101], "dawid": [61, 101], "skene": [61, 101], "analog": [61, 96, 101], "chosen": [61, 71, 97, 101], "crowdlab": [61, 101], "unlabel": [61, 91, 101, 104, 107], "get_active_learning_scor": [61, 101], "activelab": [61, 101], "priorit": [61, 68, 103, 107, 108], "showcas": 61, "best_qual": 61, "quality_method": 61, "calibrate_prob": 61, "return_detailed_qu": 61, "return_annotator_stat": 61, "return_weight": 61, "label_quality_score_kwarg": 61, "did": [61, 62, 86, 87, 88, 93, 99, 101, 106], "majority_vot": 61, "broken": [61, 69, 96, 106], "highest": [61, 69, 89, 91, 98, 105], "0th": 61, "consensus_quality_scor": [61, 101], "annotator_agr": [61, 101], "reman": 61, "1st": 61, "2nd": [61, 75], "3rd": 61, "consensus_label_suffix": 61, "consensus_quality_score_suffix": 61, "suffix": 61, "emsembl": 61, "weigh": [61, 96], "agreement": [61, 101], "agre": 61, "prevent": [61, 97], "overconfid": [61, 105], "detailed_label_qu": [61, 101], "annotator_stat": [61, 101], "model_weight": 61, "annotator_weight": 61, "warn": 61, "labels_info": 61, "num_annot": [61, 101], "deriv": [61, 101], "quality_annotator_1": 61, "quality_annotator_2": 61, "quality_annotator_m": 61, "annotator_qu": [61, 101], "num_examples_label": [61, 101], "agreement_with_consensu": [61, 101], "worst_class": [61, 101], "trustworthi": [61, 101, 106], "get_label_quality_multiannotator_ensembl": 61, "weigtht": 61, "budget": 61, "retrain": [61, 87, 106], "active_learning_scor": 61, "active_learning_scores_unlabel": 61, "get_active_learning_scores_ensembl": 61, "henc": [61, 88, 89, 98, 101], "get_majority_vote_label": [61, 101], "event": 61, "lastli": [61, 93], "convert_long_to_wide_dataset": 61, "labels_multiannotator_long": 61, "wide": [61, 86, 87, 88], "labels_multiannotator_wid": 61, "common_multilabel_issu": [62, 64], "exclus": [62, 102], "rank_classes_by_multilabel_qu": [62, 64], "overall_multilabel_health_scor": [62, 64], "multilabel_health_summari": [62, 64], "classes_by_multilabel_qu": 62, "inner": [63, 77, 95], "find_multilabel_issues_per_class": [63, 64], "per_class_label_issu": 63, "label_issues_list": 63, "pred_probs_list": [63, 71, 91, 99], "anim": [64, 104], "rat": 64, "predat": 64, "pet": 64, "reptil": 64, "box": [66, 68, 69, 96, 103], "object_detect": [66, 68, 69, 103], "return_indices_ranked_by_scor": [66, 103], "overlapping_label_check": [66, 68], "suboptim": [66, 68], "locat": [66, 68, 95, 103, 107, 108], "bbox": [66, 69, 103], "image_nam": [66, 69], "y1": [66, 69, 103], "y2": [66, 69, 103], "later": [66, 69, 70, 87, 98, 108], "corner": [66, 69, 103], "xyxi": [66, 69, 103], "io": [66, 69, 88, 95, 96], "keras_cv": [66, 69], "bounding_box": [66, 69, 103], "detectron": [66, 69, 103], "detectron2": [66, 69, 103], "readthedoc": [66, 69], "en": [66, 69], "latest": [66, 69], "visual": [66, 67, 69, 86, 89, 90, 91, 106, 108], "draw_box": [66, 69], "mmdetect": [66, 69, 103], "swap": [66, 68, 78, 82], "penal": [66, 68], "concern": [66, 68, 83, 90], "issues_from_scor": [67, 68, 76, 77, 78, 80, 81, 82, 103, 107, 108], "compute_overlooked_box_scor": [67, 68], "compute_badloc_box_scor": [67, 68], "compute_swap_box_scor": [67, 68], "pool_box_scores_per_imag": [67, 68], "object_counts_per_imag": [67, 69, 103], "bounding_box_size_distribut": [67, 69, 103], "class_label_distribut": [67, 69, 103], "get_sorted_bbox_count_idx": [67, 69], "plot_class_size_distribut": [67, 69], "plot_class_distribut": [67, 69], "get_average_per_class_confusion_matrix": [67, 69], "calculate_per_class_metr": [67, 69], "aggregation_weight": 68, "imperfect": [68, 97, 98], "chose": [68, 101, 103], "imperfectli": [68, 103], "dirti": [68, 71, 74, 106], "subtyp": 68, "badloc": 68, "nonneg": 68, "high_probability_threshold": 68, "auxiliary_input": [68, 69], "iou": [68, 69], "heavili": 68, "auxiliarytypesdict": 68, "pred_label": [68, 87], "pred_label_prob": 68, "pred_bbox": 68, "lab_label": 68, "lab_bbox": 68, "similarity_matrix": 68, "min_possible_similar": 68, "scores_overlook": 68, "low_probability_threshold": 68, "scores_badloc": 68, "accident": [68, 87, 93, 94, 97], "scores_swap": 68, "box_scor": 68, "image_scor": [68, 77, 107], "discov": [69, 90, 95, 108], "abnorm": [69, 91, 103], "auxiliari": [69, 104, 107], "_get_valid_inputs_for_compute_scor": 69, "object_count": 69, "down": 69, "bbox_siz": 69, "class_distribut": 69, "plot": [69, 89, 90, 95, 99, 102, 104, 106, 107], "sorted_idx": [69, 104], "class_to_show": 69, "hidden": [69, 104], "max_class_to_show": 69, "plt": [69, 78, 89, 90, 91, 95, 99, 102, 104, 106], "matplotlib": [69, 78, 89, 90, 91, 95, 99, 102, 103, 104, 106], "pyplot": [69, 78, 89, 90, 91, 95, 99, 102, 104, 106], "prediction_threshold": 69, "overlai": [69, 103], "figsiz": [69, 89, 90, 91, 95, 99, 102, 104], "save_path": [69, 103], "blue": [69, 96, 99, 103], "overlaid": 69, "side": [69, 96, 103], "figur": [69, 95, 99, 102, 104, 106], "extens": [69, 99, 101], "png": [69, 103], "pdf": [69, 70], "svg": 69, "num_proc": [69, 91], "intersect": [69, 97], "tp": 69, "fp": 69, "ground": [69, 96, 99, 101, 106], "truth": [69, 99, 101, 106], "bias": [69, 95], "avg_metr": 69, "distionari": 69, "95": [69, 79, 81, 93, 96, 98, 99, 106], "per_class_metr": 69, "Of": 70, "find_top_issu": [70, 71, 104], "behind": [70, 99], "dist_metr": 70, "subtract": [70, 71], "renorm": [70, 71, 97], "least_confid": 70, "sum_": 70, "log": [70, 71, 84], "softmax": [70, 77, 81, 91], "literatur": 70, "gen": 70, "liu": 70, "lochman": 70, "zach": 70, "openaccess": 70, "thecvf": 70, "cvpr2023": 70, "liu_gen_pushing_the_limits_of_softmax": 70, "based_out": 70, "distribution_detection_cvpr_2023_pap": 70, "fit_scor": [70, 104], "ood_predictions_scor": 70, "pretrain": [70, 87, 88, 94, 98, 104], "adjust_confident_threshold": 70, "probabilist": [70, 86, 88, 89, 90, 93, 94, 104, 105], "order_label_issu": [71, 84], "whichev": [71, 105], "argsort": [71, 87, 91, 94, 99, 103, 104, 106], "max_": 71, "get_label_quality_ensemble_scor": [71, 97, 99], "weight_ensemble_members_bi": 71, "custom_weight": 71, "log_loss_search_t_valu": 71, "0001": [71, 96], "scheme": 71, "log_loss_search": 71, "log_loss": [71, 94], "1e0": 71, "1e1": 71, "1e2": 71, "2e2": 71, "quality_scor": [71, 104], "forth": 71, "top_issue_indic": 71, "rank_bi": [71, 84], "weird": [71, 82], "minu": 71, "prob_label": 71, "max_prob_not_label": 71, "AND": [71, 94], "get_epistemic_uncertainti": [72, 73], "get_aleatoric_uncertainti": [72, 73], "corrupt": [73, 106], "linearregress": [73, 97, 106], "y_with_nois": 73, "n_boot": [73, 97], "include_aleatoric_uncertainti": [73, 97], "sole": [73, 86, 89, 98, 101, 104], "bootstrap": [73, 97, 106], "resampl": [73, 88, 97], "epistem": [73, 97, 104, 106], "aleator": [73, 97, 106], "model_final_kwarg": 73, "coars": 73, "thorough": [73, 97], "fine": [73, 87, 88, 94, 104], "grain": 73, "grid": [73, 98], "varianc": [73, 99], "epistemic_uncertainti": 73, "residu": [73, 74, 97], "deviat": [73, 103, 106], "aleatoric_uncertainti": 73, "outr": 74, "contin": 74, "raw": [74, 83, 84, 90, 91, 96, 97, 98, 101, 103, 104, 106], "aka": [74, 88, 99, 103, 106, 108], "00323821": 74, "33692597": 74, "00191686": 74, "semant": [75, 77, 78, 100], "pixel": [75, 77, 78, 91, 104, 107], "h": [75, 77, 78, 107], "height": [75, 77, 78, 107], "w": [75, 77, 78, 107], "width": [75, 77, 78, 107], "labels_one_hot": [75, 78, 107], "stream": [75, 104, 108], "downsampl": [75, 77, 107], "shrink": [75, 77], "divis": [75, 77, 89], "common_label_issu": [76, 78, 80, 82, 107, 108], "filter_by_class": [76, 78, 107], "segmant": [77, 78], "num_pixel_issu": [77, 107], "product": [77, 91, 95, 97, 98], "pixel_scor": [77, 107], "enter": 78, "legend": [78, 89, 90, 95, 102, 103, 106, 107], "colormap": 78, "background": [78, 95], "person": [78, 97, 103, 107, 108], "ambigu": [78, 82, 87, 88, 94, 96, 99, 108], "misunderstood": [78, 82], "issues_df": [78, 91], "class_index": 78, "issues_subset": [78, 82], "filter_by_token": [80, 82, 108], "token_score_method": 81, "sentence_score_method": 81, "sentence_score_kwarg": 81, "compris": [81, 82], "token_scor": [81, 108], "converg": 81, "toward": [81, 95], "_softmin_sentence_scor": 81, "sentence_scor": [81, 108], "token_info": 81, "02": [81, 89, 90, 95, 99, 103], "03": [81, 93, 95, 96, 98, 99, 103, 104, 108], "04": [81, 93, 95, 103], "08": [81, 95, 99, 103, 106, 108], "commonli": [82, 84, 89, 90, 102, 108], "But": [82, 94, 98, 99, 106, 108], "restrict": [82, 97], "reliabl": [83, 86, 88, 95, 97, 98, 101, 107], "thousand": 83, "imagenet": [83, 96], "popular": [83, 101, 103], "centric": [83, 91, 100], "minut": [83, 86, 87, 88, 93, 94, 96, 101, 102, 103, 106, 107, 108], "conda": 83, "feature_embed": [83, 104], "your_dataset": [83, 88, 89, 90, 91, 93, 94, 97], "column_name_of_label": [83, 88, 89, 90, 91, 93, 94], "tool": [83, 96, 99, 101], "catch": [83, 98], "dive": [83, 94, 95, 98], "plagu": [83, 90], "untrain": 83, "\u30c4": 83, "label_issues_info": [83, 90], "sklearn_compatible_model": 83, "framework": [83, 102, 103], "complianc": 83, "tag": [83, 102, 108], "sequenc": 83, "recognit": [83, 88, 97, 108], "train_data": [83, 86, 87, 104, 106], "gotten": 83, "test_data": [83, 86, 87, 99, 102, 104, 106], "deal": [83, 90, 95, 98], "feel": [83, 88, 90, 97], "ask": [83, 97], "slack": [83, 97], "project": [83, 98, 106], "welcom": 83, "commun": [83, 97], "guidelin": [83, 103], "piec": 83, "smart": [83, 86, 87, 90, 91, 93, 94, 96, 97, 99, 102, 104, 106], "edit": [83, 97, 98], "unreli": [83, 86, 88, 93, 94, 95, 98], "link": [83, 88, 96, 103], "older": 84, "outlin": 84, "substitut": [84, 98], "v2": [84, 86, 93], "get_noise_indic": 84, "psx": 84, "sorted_index_method": 84, "order_label_error": 84, "label_errors_bool": 84, "latent_estim": 84, "num_label_error": 84, "learningwithnoisylabel": 84, "neatli": 84, "organ": [84, 86, 93, 95, 96, 108], "reorgan": 84, "baseline_method": 84, "incorpor": [84, 99], "research": [84, 99], "polyplex": 84, "terminologi": 84, "label_error": 84, "quickstart": [86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 101, 102, 103, 104, 106, 107, 108], "sql": [86, 93], "databas": [86, 93], "excel": [86, 93], "parquet": [86, 93], "student": [86, 93, 98, 106, 108], "grade": [86, 93, 98, 106], "exam": [86, 93, 98, 106], "letter": [86, 93, 108], "hundr": [86, 93], "mistak": [86, 87, 91, 93, 94, 98], "extratreesclassifi": 86, "extratre": 86, "Then": [86, 87, 91, 97], "ranked_label_issu": [86, 87], "branch": [86, 87, 88, 89, 90, 91, 93, 94, 96, 98, 99, 101, 102, 103, 104, 106], "standardscal": [86, 93, 98, 104], "labelencod": [86, 87, 98], "train_test_split": [86, 87, 89, 90, 104], "accuracy_scor": [86, 87, 88, 94, 98, 99], "grades_data": [86, 93], "read_csv": [86, 87, 93, 94, 95, 98, 106], "demo": [86, 90, 93, 102], "stud_id": [86, 93, 98], "exam_1": [86, 93, 98, 106], "exam_2": [86, 93, 98, 106], "exam_3": [86, 93, 98, 106], "letter_grad": [86, 93], "f48f73": [86, 93], "53": [86, 89, 90, 93, 95, 96, 98, 102, 103], "00": [86, 89, 90, 93, 95, 96, 98, 104], "77": [86, 89, 90, 93, 98, 103], "0bd4e7": [86, 93], "81": [86, 93, 94, 98, 103, 106, 108], "great": [86, 93, 96, 98], "particip": [86, 93, 98], "cb9d7a": [86, 93], "61": [86, 93, 95, 99, 103, 106], "94": [86, 93, 96, 98, 99, 103, 106], "9acca4": [86, 93], "48": [86, 93, 95, 96, 99, 103], "x_raw": [86, 93], "labels_raw": 86, "interg": [86, 87], "categorical_featur": [86, 106], "x_encod": [86, 93], "get_dummi": [86, 93, 106], "drop_first": [86, 93], "numeric_featur": [86, 93], "scaler": [86, 93, 104], "x_process": [86, 93], "fit_transform": [86, 93, 95, 98], "bring": [86, 87, 91, 93, 94, 101, 106], "byod": [86, 87, 91, 93, 94, 101, 106], "tress": 86, "held": [86, 88, 93, 94, 96, 103, 104, 105], "straightforward": [86, 88, 93], "benefit": [86, 88, 105, 107], "num_crossval_fold": [86, 88, 93, 98, 101], "tabl": [86, 93, 96, 101], "212": [86, 98, 99], "iloc": [86, 87, 88, 93, 94, 98, 106], "92": [86, 89, 98, 99, 103], "93": [86, 96, 98, 103, 106], "827": 86, "99": [86, 95, 96, 98, 99], "86": [86, 90, 91, 93, 98, 99, 103, 106], "74": [86, 95, 98, 103, 106], "637": [86, 93], "79": [86, 96, 98, 103], "65": [86, 89, 95, 98, 103], "cheat": [86, 98], "0pt": [86, 98], "120": [86, 89, 90, 98], "233": 86, "83": [86, 98, 99, 103, 106, 108], "76": [86, 98, 99, 102, 103, 106], "suspici": [86, 93], "carefulli": [86, 91, 93, 94, 98], "examin": [86, 89, 90, 93, 95, 98, 103], "labels_train": 86, "labels_test": 86, "test_siz": [86, 87, 89, 90], "acc_og": [86, 87], "783068783068783": 86, "robustli": [86, 87, 106], "14": [86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 99, 101, 102, 103, 104, 106, 107, 108], "acc_cl": [86, 87], "8095238095238095": 86, "blindli": [86, 87, 88, 97, 98, 106], "trust": [86, 87, 88, 97, 98, 99, 101, 105, 106], "effort": [86, 87, 98, 106], "cumbersom": [86, 87, 90, 93, 94, 96, 99, 102, 104, 106], "intent": [87, 94], "servic": [87, 94, 97], "onlin": [87, 94], "bank": [87, 94, 96], "banking77": [87, 94], "oo": [87, 94], "categori": [87, 91, 94, 95, 98], "shortlist": [87, 94, 106], "scope": [87, 94], "logist": [87, 89, 90, 94, 101, 104], "probabilit": [87, 88], "drop": [87, 93, 95, 97, 98, 101, 106], "sentence_transform": [87, 94], "sentencetransform": [87, 94], "payment": [87, 94], "cancel_transf": [87, 94], "transfer": [87, 94], "fund": [87, 94], "cancel": [87, 94], "transact": [87, 94], "my": [87, 94], "revert": [87, 94], "morn": [87, 94], "realis": [87, 94], "yesterdai": [87, 94], "rent": [87, 94], "tomorrow": [87, 94], "raw_text": [87, 94], "raw_label": 87, "raw_train_text": 87, "raw_test_text": 87, "raw_train_label": 87, "raw_test_label": 87, "lost_or_stolen_phon": [87, 94], "getting_spare_card": [87, 94], "beneficiary_not_allow": [87, 94], "visa_or_mastercard": [87, 94], "card_payment_fee_charg": [87, 94], "supported_cards_and_curr": [87, 94], "card_about_to_expir": [87, 94], "change_pin": [87, 94], "apple_pay_or_google_pai": [87, 94], "card": [87, 94, 96], "utter": [87, 94], "encond": 87, "test_label": [87, 98, 99, 102, 104], "suit": [87, 94, 95, 96, 97], "electra": [87, 94], "discrimin": [87, 94], "googl": [87, 94], "train_text": 87, "test_text": 87, "home": [87, 94, 96], "runner": [87, 94], "google_electra": [87, 94], "pool": [87, 94, 97, 104], "leverag": [87, 88, 94, 97, 99, 101], "computation": [87, 88, 94], "intens": [87, 88, 94], "400": [87, 94, 98], "858371": 87, "547274": 87, "826228": 87, "966008": 87, "792449": 87, "identified_issu": [87, 106], "lowest_quality_label": [87, 88, 94, 99, 106], "to_numpi": [87, 94, 95, 98, 106], "44": [87, 95, 96, 102, 103], "646": 87, "390": 87, "628": 87, "121": [87, 99], "702": 87, "863": 87, "135": 87, "337": [87, 98, 103], "735": 87, "print_as_df": 87, "inverse_transform": 87, "charg": [87, 94], "cash": [87, 94], "holidai": [87, 94], "sent": [87, 94, 95, 108], "mine": [87, 94], "expir": [87, 94], "fight": 87, "hors": [87, 96, 104], "duck": [87, 96], "me": [87, 94, 95], "whoever": [87, 94], "consum": [87, 106], "18": [87, 88, 94, 95, 96, 97, 98, 99, 103, 104, 106, 107], "baseline_model": [87, 106], "87": [87, 90, 91, 98, 103, 106], "acceler": [87, 106], "19": [87, 88, 91, 94, 95, 96, 97, 98, 99, 103, 104, 106, 107, 108], "89": [87, 89, 93, 98, 103, 106], "spoken": 88, "500": [88, 95, 98, 104, 108], "english": [88, 96], "pronunci": 88, "wav": 88, "huggingfac": [88, 89, 90, 91, 97], "voxceleb": 88, "speech": [88, 108], "your_pred_prob": [88, 89, 90, 93, 94], "tensorflow_io": 88, "huggingface_hub": 88, "reproduc": [88, 93, 95, 98, 99, 101], "command": 88, "wget": [88, 95, 103, 107, 108], "navig": 88, "browser": 88, "jakobovski": 88, "archiv": [88, 108], "v1": 88, "tar": [88, 104], "gz": [88, 104], "mkdir": [88, 108], "spoken_digit": 88, "xf": 88, "6_nicolas_32": 88, "data_path": 88, "listdir": 88, "nondeterminist": 88, "file_nam": 88, "endswith": 88, "file_path": 88, "join": [88, 91, 95, 97, 98], "7_george_26": 88, "0_nicolas_24": 88, "0_nicolas_6": 88, "listen": 88, "display_exampl": 88, "expand": [88, 89, 90, 91, 96, 98, 99, 101, 102, 104, 106, 108], "pulldown": [88, 89, 90, 91, 96, 98, 99, 101, 102, 104, 106, 108], "colab": [88, 89, 90, 91, 96, 97, 98, 99, 101, 102, 104, 106, 108], "tfio": 88, "pathlib": 88, "ipython": [88, 95], "load_wav_16k_mono": 88, "filenam": 88, "khz": 88, "file_cont": 88, "read_fil": 88, "sample_r": 88, "decode_wav": 88, "desired_channel": 88, "squeez": 88, "rate_in": 88, "rate_out": 88, "16000": 88, "wav_file_nam": 88, "audio_r": 88, "wav_file_exampl": 88, "plai": [88, 96, 97], "button": 88, "wav_file_name_exampl": 88, "7_jackson_43": 88, "hear": 88, "extractor": 88, "encoderclassifi": 88, "spkrec": 88, "xvect": 88, "feature_extractor": 88, "from_hparam": 88, "run_opt": 88, "uncom": [88, 95], "ffmpeg": 88, "backend": 88, "wav_audio_file_path": 88, "torchaudio": 88, "extract_audio_embed": 88, "emb": [88, 91], "signal": 88, "encode_batch": 88, "embeddings_list": [88, 91], "embeddings_arrai": 88, "512": [88, 91], "196311": 88, "319459": 88, "478975": 88, "2890875": 88, "8170238": 88, "89265": 88, "898056": 88, "256195": 88, "559641": 88, "559721": 88, "62067": 88, "285245": 88, "21": [88, 89, 95, 96, 98, 99, 103, 106, 108], "709627": 88, "5033693": 88, "913803": 88, "819831": 88, "1831515": 88, "208763": 88, "084257": 88, "3210397": 88, "005453": 88, "216152": 88, "478235": 88, "6821785": 88, "053807": 88, "242471": 88, "091424": 88, "78334856": 88, "03954": 88, "23": [88, 91, 95, 96, 98, 99, 103, 106], "569176": 88, "761097": 88, "1258295": 88, "753237": 88, "3508866": 88, "598274": 88, "23712": 88, "2500": 88, "tol": 88, "decreas": [88, 97], "cv_accuraci": 88, "9708": 88, "issue_type_descript": [88, 89, 90, 91, 93, 94, 98, 99], "lt": [88, 89, 90, 91, 93, 94, 95, 96, 98, 99, 101, 104], "gt": [88, 89, 90, 91, 93, 94, 95, 98, 99, 101, 108], "9976": 88, "986": 88, "002161": 88, "176": [88, 96, 99, 102], "002483": 88, "2318": 88, "004411": 88, "1005": 88, "004857": 88, "1871": 88, "007494": 88, "040587": 88, "999207": 88, "999377": 88, "975220": 88, "999367": 88, "identified_label_issu": [88, 94], "516": [88, 98], "1946": 88, "469": 88, "2132": 88, "worth": [88, 99], "6_yweweler_25": 88, "7_nicolas_43": 88, "6_theo_27": 88, "6_yweweler_36": 88, "6_yweweler_14": 88, "6_yweweler_35": 88, "6_nicolas_8": 88, "sound": 88, "quit": [88, 104], "underneath": 89, "hood": [89, 95, 97], "alert": 89, "introduct": 89, "mayb": [89, 90, 94], "your_feature_matrix": [89, 90], "toi": [89, 90, 91, 95, 96, 99, 101, 105], "inf": [89, 90], "mid": [89, 90], "bins_map": [89, 90], "create_data": [89, 90], "y_bin": [89, 90], "y_i": [89, 90], "y_bin_idx": [89, 90], "y_train": [89, 90, 99, 106], "y_test": [89, 90, 99, 106], "y_train_idx": [89, 90], "y_test_idx": [89, 90], "slide": [89, 90, 96], "frame": [89, 90], "x_out": [89, 90], "tini": [89, 90], "concaten": [89, 90, 105], "y_out": [89, 90], "y_out_bin": [89, 90], "y_out_bin_idx": [89, 90], "exact_duplicate_idx": [89, 90], "x_duplic": [89, 90], "y_duplic": [89, 90], "y_duplicate_idx": [89, 90], "noisy_labels_idx": [89, 90, 102], "scatter": [89, 90, 95, 99, 102, 106], "black": [89, 90, 96, 106], "cyan": [89, 90], "plot_data": [89, 90, 95, 99, 102, 106], "fig": [89, 90, 91, 96, 104, 106], "ax": [89, 90, 91, 95, 104, 106], "subplot": [89, 90, 91, 104], "set_titl": [89, 90, 91, 104], "set_xlabel": [89, 90], "x_1": [89, 90], "fontsiz": [89, 90, 91, 95, 99, 102], "set_ylabel": [89, 90], "x_2": [89, 90], "set_xlim": [89, 90], "set_ylim": [89, 90], "linestyl": [89, 90, 95], "circl": [89, 90, 99, 102], "misclassifi": [89, 90], "zip": [89, 90, 91, 95, 103, 108], "label_err": [89, 90], "180": [89, 90, 95, 103], "marker": [89, 90], "facecolor": [89, 90, 95], "edgecolor": [89, 90, 95], "linewidth": [89, 90, 95, 104], "dup": [89, 90], "first_legend": [89, 90], "align": [89, 90], "title_fontproperti": [89, 90], "semibold": [89, 90], "second_legend": [89, 90], "45": [89, 90, 95, 96, 98, 99, 103], "gca": [89, 90], "add_artist": [89, 90], "tight_layout": [89, 90, 95], "ideal": [89, 90], "remaind": 89, "modal": [89, 90, 97, 98, 101], "132": [89, 90, 98, 99, 103], "9318": 89, "006940": 89, "007830": 89, "40": [89, 90, 94, 95, 96, 98], "014828": 89, "107": [89, 90, 99, 102], "021241": 89, "026407": 89, "notic": [89, 99, 101, 103], "3558": [89, 90], "126": [89, 90, 99, 103], "006636": [89, 90], "130": [89, 90], "012571": [89, 90], "129": [89, 90], "127": [89, 90, 98], "014909": [89, 90], "128": [89, 90, 91], "017443": [89, 90], "6160": [89, 90], "131": [89, 90, 98, 107], "000000e": [89, 90, 98], "000002": [89, 90], "463180e": [89, 90], "07": [89, 90, 91, 93, 95, 99, 103, 106], "51": [89, 90, 93, 95, 96, 99, 103], "161148": [89, 90], "859087e": [89, 90], "30": [89, 90, 91, 95, 96, 97, 98, 102, 107, 108], "3453": 89, "029542": 89, "031182": 89, "057961": 89, "058244": 89, "54": [89, 95, 96, 99, 103], "039122": 89, "044598": 89, "105": [89, 103], "105196": 89, "133654": 89, "43": [89, 95, 96, 98, 99, 103], "168033": 89, "125": 89, "101107": 89, "183382": 89, "109": [89, 95, 96, 98, 103], "209259": 89, "211042": 89, "221316": 89, "average_ood_scor": 89, "34530442089193386": 89, "52": [89, 95, 96, 98, 103, 108], "169820": 89, "087324e": 89, "259024": 89, "583757e": 89, "91": [89, 98, 103], "346458": 89, "341292e": 89, "specfi": 89, "new_lab": 89, "scoring_funct": 89, "div": 89, "rem": 89, "inv_scal": 89, "49": [89, 95, 96, 99, 103], "superstitionissuemanag": 89, "unlucki": 89, "superstit": 89, "to_seri": 89, "issues_mask": 89, "summary_scor": 89, "9242": 89, "is_superstition_issu": 89, "superstition_scor": 89, "26": [89, 91, 95, 96, 98, 99, 101, 103, 108], "047581": 89, "090635": 89, "129591": 89, "164840": 89, "lurk": [90, 91, 98, 99], "thoroughli": 90, "8561": 90, "001908": 90, "003564": 90, "007331": 90, "008963": 90, "009664": 90, "0227": 90, "022727": 90, "conceptu": 90, "856061": 90, "355772": 90, "616034": 90, "821750": 90, "926818": 90, "betweeen": 90, "859131": 90, "417707": 90, "664083": 90, "970324": 90, "816953": 90, "375317": 90, "641516": 90, "890575": 90, "910232": 90, "531021": 90, "460593": 90, "601188": 90, "826147": 90, "752808": 90, "321635": 90, "562539": 90, "948362": 90, "890169": 90, "090243": 90, "472909": 90, "746763": 90, "878267": 90, "examples_w_issu": [90, 97], "013445": 90, "025184": 90, "026376": 90, "inde": [90, 94], "miscellan": [90, 92, 108], "428571": 90, "111111": 90, "571429": 90, "407407": 90, "592593": 90, "337838": 90, "092593": 90, "662162": 90, "333333": [90, 96], "952381": 90, "666667": [90, 95], "portion": 90, "huge": [90, 99], "worri": [90, 94, 98], "critic": [90, 105], "60": [91, 95, 99, 106], "torchvis": [91, 95, 104], "tensordataset": 91, "stratifiedkfold": [91, 102], "tqdm": 91, "autonotebook": 91, "math": [91, 98], "fashion_mnist": 91, "num_row": 91, "60000": 91, "transformed_dataset": 91, "with_format": 91, "255": [91, 96], "cpu_count": 91, "torch_dataset": 91, "quick": [91, 102, 104], "super": 91, "relu": 91, "batchnorm2d": 91, "maxpool2d": 91, "lazylinear": 91, "flatten": 91, "get_test_accuraci": 91, "testload": [91, 104], "energi": 91, "trainload": [91, 104], "n_epoch": 91, "patienc": 91, "criterion": 91, "crossentropyloss": 91, "adamw": 91, "best_test_accuraci": 91, "start_epoch": 91, "running_loss": 91, "best_epoch": 91, "end_epoch": 91, "3f": [91, 106], "acc": [91, 99], "time_taken": 91, "compute_embed": 91, "compute_pred_prob": 91, "train_batch_s": 91, "num_work": 91, "worker": [91, 108], "train_id_list": 91, "test_id_list": 91, "train_id": 91, "test_id": 91, "embeddings_model": 91, "ntrain": 91, "trainset": 91, "testset": 91, "pin_memori": 91, "fold_embed": 91, "fold_pred_prob": 91, "finish": 91, "482": 91, "720": 91, "081": 91, "329": [91, 93, 98, 103], "88": [91, 96, 98, 99, 102, 103, 106], "195": [91, 95, 98], "054": 91, "493": 91, "060": 91, "369": 91, "330": [91, 98, 103], "505": 91, "118": [91, 99], "476": [91, 98], "340": [91, 98], "308": 91, "328": [91, 103], "310": 91, "966": 91, "reorder": 91, "hstack": [91, 97, 99, 101], "vision": 91, "max_preval": [91, 95], "7714": 91, "3772": 91, "3585": 91, "166": 91, "3651": 91, "27080": 91, "873833e": 91, "40378": 91, "915575e": 91, "25316": 91, "390277e": 91, "06": [91, 98, 99, 103, 108], "2090": 91, "751164e": 91, "14999": 91, "881301e": 91, "9569": 91, "11262": 91, "000003": 91, "coat": [91, 96], "shirt": [91, 96], "19228": 91, "000010": 91, "dress": 91, "32657": 91, "000013": 91, "bag": [91, 96, 104, 105], "21282": 91, "000016": [91, 98], "53564": 91, "000018": [91, 98], "pullov": 91, "6321": 91, "30968": 91, "001267": 91, "30659": 91, "000022": [91, 108], "47824": 91, "001454": 91, "3370": 91, "000026": 91, "54565": 91, "001854": 91, "9762": 91, "258": 91, "47139": 91, "000033": 91, "166980": 91, "986195": 91, "997205": 91, "sandal": [91, 96], "948781": 91, "999358": 91, "54078": 91, "17371": 91, "000025": 91, "plot_label_issue_exampl": 91, "ncol": [91, 104], "nrow": [91, 104], "ceil": [91, 98], "axes_list": 91, "label_issue_indic": 91, "gl": 91, "sl": 91, "fontdict": 91, "imshow": [91, 104], "cmap": [91, 95, 106], "grai": 91, "subplots_adjust": 91, "hspace": 91, "outsiz": 91, "outlier_issu": [91, 94], "outlier_issues_df": 91, "depict": [91, 102, 103, 104, 105, 107], "plot_outlier_issues_exampl": 91, "n_comparison_imag": 91, "sample_from_class": 91, "number_of_sampl": 91, "non_outlier_indic": 91, "isnul": [91, 95], "non_outlier_indices_excluding_curr": 91, "sampled_indic": 91, "label_scores_of_sampl": 91, "top_score_indic": 91, "top_label_indic": 91, "sampled_imag": 91, "get_image_given_label_and_sampl": 91, "image_from_dataset": 91, "corresponding_label": 91, "comparison_imag": 91, "images_to_plot": 91, "idlist": 91, "iterrow": 91, "near_duplicate_issu": [91, 97], "closest": 91, "counterpart": 91, "near_duplicate_issues_df": 91, "plot_near_duplicate_issue_exampl": 91, "seen_id_pair": 91, "get_image_and_given_label_and_predicted_label": 91, "duplicate_imag": 91, "nd_set": 91, "challeng": 91, "dark_issu": 91, "reveal": [91, 103, 107], "dark_issues_df": 91, "is_dark_issu": [91, 95], "34848": 91, "203922": 91, "50270": 91, "204588": 91, "3936": 91, "213098": 91, "733": 91, "217686": 91, "8094": 91, "230118": 91, "plot_image_issue_exampl": 91, "difficult": 91, "disproportion": [91, 95], "lowinfo_issu": 91, "lowinfo_issues_df": 91, "is_low_information_issu": 91, "53050": 91, "067975": 91, "40875": 91, "089929": 91, "9594": 91, "092601": 91, "34825": 91, "107744": 91, "37530": 91, "108516": 91, "lot": 91, "workflow": [92, 97, 98, 100, 106], "histgradientboostingclassifi": 93, "cat_featur": 93, "boost": [93, 97, 101, 106], "xgboost": [93, 97, 98, 106], "think": [93, 94, 97, 102, 107, 108], "nonzero": 93, "358": 93, "941": 93, "294": [93, 103], "46": [93, 95, 96, 98, 99, 103], "7109": 93, "000005": [93, 94], "886": 93, "000059": 93, "709": [93, 98], "000104": 93, "000169": 93, "689": 93, "000181": 93, "3590": 93, "051882e": 93, "683133e": 93, "536582e": 93, "406589e": 93, "324246e": 93, "6165": 93, "582": [93, 98], "185": [93, 95, 96, 103], "187": [93, 96, 98], "898": 93, "0000": [93, 94, 96, 98, 99], "865": 93, "515002": 93, "837": 93, "556480": 93, "622": 93, "593068": 93, "593207": 93, "920": 93, "618041": 93, "4386345844794593e": 93, "issue_result": 93, "000842": 93, "555944": 93, "004374": 93, "sorted_issu": 93, "73": [93, 95, 96, 98, 102, 103, 106], "deserv": 93, "outlier_result": 93, "sorted_outli": 93, "56": [93, 95, 96, 106, 108], "96": [93, 95, 96, 98, 99, 102, 103, 106], "style": [93, 95, 107], "font": 93, "18px": 93, "ff00ff": 93, "bac": 93, "duplicate_result": 93, "lowest_scoring_dupl": 93, "idxmin": [93, 97], "indices_to_displai": 93, "tolist": [93, 97, 98, 102], "perhap": [93, 99, 101], "second_lowest_scoring_dupl": 93, "next_indices_to_displai": 93, "wari": [93, 94, 97], "your_featur": 94, "text_embed": 94, "data_dict": [94, 99, 101], "85": [94, 98, 103, 108], "38": [94, 95, 96, 103], "9710": 94, "981": 94, "974": 94, "000146": 94, "982": [94, 96], "000224": 94, "971": 94, "000507": 94, "980": [94, 96], "000960": 94, "3584": 94, "994": 94, "009642": 94, "999": 94, "013067": 94, "013841": 94, "433": 94, "014722": 94, "989": 94, "018224": 94, "6070": 94, "160": [94, 106], "095724": 94, "148": 94, "006237": 94, "546": [94, 98], "099341": 94, "514": 94, "006485": 94, "481": 94, "123418": 94, "008165": 94, "313": [94, 98, 103], "564102": 94, "572258": 94, "574915": 94, "31": [94, 95, 96, 98, 99, 101, 103], "575507": 94, "575874": 94, "792090": 94, "257611": 94, "698710": 94, "182121": 94, "771619": 94, "data_with_suggested_label": 94, "suggested_label": 94, "withdraw": 94, "monei": 94, "lowest_quality_outli": 94, "OR": 94, "636c65616e6c616220697320617765736f6d6521": 94, "phone": [94, 96], "gone": 94, "samp": 94, "br": 94, "press": [94, 108], "nonsens": 94, "sens": 94, "detriment": 94, "duplicate_issu": 94, "fee": 94, "go": [94, 95, 96, 99], "strongli": [94, 95], "p_valu": 94, "benign": 94, "curat": [94, 100], "bigger": 95, "make_classif": 95, "5000": [95, 104], "n_featur": 95, "n_inform": 95, "n_redund": 95, "n_repeat": 95, "n_class": 95, "n_clusters_per_class": 95, "flip_i": 95, "class_sep": 95, "faiss": 95, "x_faiss": 95, "float32": [95, 103], "normalize_l2": 95, "index_factori": 95, "hnsw32": 95, "flat": [95, 96], "metric_inner_product": 95, "a_min": 95, "a_max": 95, "create_knn_graph": 95, "assert": 95, "indices_1d": 95, "ravel": 95, "distances_1d": 95, "sort_graph_by_row_valu": 95, "warn_when_not_sort": 95, "50000": 95, "524": 95, "991400": 95, "356925": 95, "363": [95, 98], "619581": 95, "108": [95, 103], "500000": 95, "651838": 95, "999827": 95, "031217": 95, "933716": 95, "627345": 95, "998540": 95, "530909": 95, "296974": 95, "646765": 95, "942721": 95, "332824": 95, "803246": 95, "625202": 95, "999816": 95, "474031": 95, "706253": 95, "655108": 95, "997703": 95, "131466": 95, "912389": 95, "639200": 95, "4995": 95, "998646": 95, "504755": 95, "746777": 95, "680033": 95, "4996": 95, "894230": 95, "340986": 95, "816472": 95, "640711": 95, "4997": 95, "999100": 95, "428545": 95, "592421": 95, "658949": 95, "4998": 95, "986792": 95, "273710": 95, "618033": 95, "4999": 95, "986776": 95, "273524": 95, "618084": 95, "instabl": 95, "proxim": 95, "analys": 95, "comfort": 95, "explor": [95, 103, 104], "third": 95, "parti": [95, 108], "newsgroup": 95, "alt": [95, 96], "atheism": [95, 96], "sci": [95, 96], "fetch_20newsgroup": 95, "newsgroups_train": 95, "header": 95, "footer": 95, "quot": 95, "df_text": 95, "target_nam": 95, "enlighten": 95, "omnipot": 95, "19apr199320262420": 95, "kelvin": 95, "jpl": 95, "nasa": 95, "gov": 95, "baa": 95, "nhenri": 95, "he": 95, "nno": 95, "ge": 95, "nlucki": 95, "babi": [95, 96], "tfidfvector": 95, "feature_extract": 95, "x_vector": 95, "data_valuation_issu": 95, "147": [95, 99, 103], "500047": 95, "500093": 95, "499953": 95, "1068": 95, "1069": 95, "1070": 95, "1071": 95, "1072": 95, "1073": 95, "concentr": 95, "seaborn": 95, "sn": 95, "distinguish": [95, 98], "strip": 95, "stripplot": 95, "hue": [95, 106], "dodg": 95, "jitter": 95, "axvlin": [95, 104], "xlabel": 95, "ourselv": 95, "make_blob": 95, "center": [95, 96], "cluster_std": 95, "n_noisy_label": 95, "meaning": [95, 97, 98, 104], "silhouette_scor": 95, "gridsearchcv": 95, "silhouett": 95, "cluster_label": 95, "fit_predict": 95, "param_grid": [95, 98], "grid_search": 95, "best_kmean": 95, "best_estimator_": 95, "underperforming_group_issu": 95, "328308": 95, "tab10": 95, "domain": 95, "knowledg": [95, 99], "dataset_tsv": 95, "ag": [95, 106], "gender": 95, "educ": 95, "experi": 95, "highsalari": 95, "indiana": 95, "phd": 95, "male": 95, "bachelor": 95, "femal": 95, "kansa": 95, "school": [95, 96], "ohio": 95, "57": [95, 96, 98, 99, 108], "california": 95, "59": [95, 96, 103], "34": [95, 96, 99, 101, 103, 108], "63": [95, 98, 99, 103, 106], "47": [95, 96, 103], "stringio": 95, "sep": [95, 108], "easier": [95, 99], "simplic": [95, 102], "ordinalencod": 95, "columns_to_encod": 95, "encoded_df": 95, "salari": 95, "573681": 95, "underpin": 95, "caught": 95, "whenev": 95, "generate_data_depend": 95, "num_sampl": 95, "a1": 95, "a2": 95, "a3": 95, "375": 95, "975": 95, "non_iid_issu": 95, "796474": 95, "842432": 95, "922562": 95, "820759": 95, "873136": 95, "887373": 95, "825101": 95, "855875": 95, "751795": 95, "835796": 95, "ylabel": [95, 104], "coolwarm": 95, "colorbar": [95, 106], "strong": 95, "evid": [95, 98], "inter": 95, "mitig": 95, "risk": [95, 98], "deeper": 95, "tsv": 95, "tab": 95, "pars": 95, "annual_spend": 95, "number_of_transact": 95, "last_purchase_d": 95, "rural": 95, "4099": 95, "2024": [95, 108], "6421": 95, "nat": 95, "suburban": 95, "5436": 95, "4046": 95, "66": [95, 96, 98], "3467": 95, "67": [95, 96, 98, 103, 106], "4757": 95, "4199": 95, "4991": 95, "4655": 95, "82": [95, 96, 98, 99, 103, 106], "5584": 95, "urban": 95, "3102": 95, "6637": 95, "9167": 95, "6790": 95, "5327": 95, "parse_d": 95, "lose": 95, "intact": 95, "encode_categorical_column": 95, "placehold": 95, "dropna": [95, 101], "category_to_numb": 95, "_encod": 95, "gender_encod": 95, "location_encod": 95, "focus": [95, 98, 99, 101, 102, 106], "null_issu": 95, "833333": 95, "sorted_indic": [95, 103], "sorted_df": 95, "nice": 95, "styler": 95, "combined_df": 95, "concat": [95, 98, 106], "highlight_null_valu": 95, "val": [95, 99], "yellow": [95, 96], "highlight_datalab_column": 95, "lightblu": 95, "highlight_is_null_issu": 95, "orang": [95, 96], "styled_df": 95, "nbsp": [95, 97, 98, 99], "160000": 95, "820000": 95, "460000": 95, "470000": 95, "960000": 95, "620000": 95, "550000": 95, "660000": 95, "670000": [95, 96], "370000": 95, "530000": 95, "710000": 95, "020000": 95, "320000": 95, "990000": 95, "rarer": 95, "fairer": 95, "randomli": [95, 98, 99], "class_imbalance_issu": 95, "countplot": 95, "xtick": 95, "rotat": 95, "ytick": 95, "filtered_df": 95, "xy": 95, "va": 95, "textual": 95, "get_ytick": 95, "nbar": 95, "nimbal": 95, "get_legend_handles_label": 95, "title_fonts": 95, "aspect": 95, "anomali": [95, 103], "enhanc": [95, 99, 101, 103], "artifici": 95, "directori": [95, 108], "subdirectori": 95, "nc": [95, 103, 107, 108], "unzip": [95, 103, 108], "199": [95, 98, 103], "153": [95, 98, 103], "111": [95, 101, 106], "connect": [95, 108], "443": [95, 108], "await": [95, 108], "ok": [95, 105, 108], "986707": 95, "964k": 95, "963": 95, "58k": 95, "kb": 95, "006": 95, "149": [95, 103], "mb": [95, 108], "imagefold": 95, "load_image_dataset": 95, "data_dir": 95, "root": [95, 104], "image_dataset": 95, "img": [95, 104, 106], "from_dict": [95, 97], "darkened_imag": 95, "job": 95, "015": 95, "label_uncorrelatedness_scor": 95, "image_issu": 95, "nimag": 95, "237196": 95, "197229": 95, "254188": 95, "229170": 95, "208907": 95, "793840": 95, "196": [95, 98, 99, 103], "197": [95, 99, 103], "971560": 95, "198": [95, 99, 103], "862236": 95, "973533": 95, "stronger": 95, "frog": [95, 96, 104], "darken": 95, "concept": 95, "notabl": 95, "preval": 95, "warrant": 95, "programmat": 95, "plot_scores_label": 95, "issues_copi": 95, "boxplot": 95, "refin": 96, "instruct": [96, 97, 98], "studi": [96, 103], "mnist_test_set": 96, "imagenet_val_set": 96, "tench": 96, "goldfish": 96, "white": [96, 108], "shark": 96, "tiger": 96, "hammerhead": 96, "electr": 96, "rai": 96, "stingrai": 96, "cock": 96, "hen": 96, "ostrich": 96, "brambl": 96, "goldfinch": 96, "hous": 96, "finch": 96, "junco": 96, "indigo": 96, "bunt": 96, "american": [96, 108], "robin": 96, "bulbul": 96, "jai": 96, "magpi": 96, "chickade": 96, "dipper": 96, "kite": 96, "bald": 96, "eagl": 96, "vultur": 96, "grei": 96, "owl": 96, "salamand": 96, "smooth": 96, "newt": 96, "spot": [96, 97, 103], "axolotl": 96, "bullfrog": 96, "tree": 96, "tail": 96, "loggerhead": 96, "sea": 96, "turtl": 96, "leatherback": 96, "mud": 96, "terrapin": 96, "band": 96, "gecko": 96, "green": [96, 108], "iguana": 96, "carolina": 96, "anol": 96, "desert": 96, "grassland": 96, "whiptail": 96, "lizard": 96, "agama": 96, "frill": 96, "neck": 96, "allig": 96, "gila": 96, "monster": 96, "european": 96, "chameleon": 96, "komodo": 96, "dragon": 96, "nile": 96, "crocodil": 96, "triceratop": 96, "worm": 96, "snake": 96, "ring": 96, "eastern": 96, "hog": 96, "nose": 96, "kingsnak": 96, "garter": 96, "water": 96, "vine": 96, "night": 96, "boa": 96, "constrictor": 96, "african": 96, "rock": 96, "indian": 96, "cobra": 96, "mamba": 96, "saharan": 96, "horn": 96, "viper": 96, "diamondback": 96, "rattlesnak": 96, "sidewind": 96, "trilobit": 96, "harvestman": 96, "scorpion": 96, "garden": 96, "spider": 96, "barn": 96, "southern": 96, "widow": 96, "tarantula": 96, "wolf": 96, "tick": 96, "centiped": 96, "grous": 96, "ptarmigan": 96, "ruf": 96, "prairi": 96, "peacock": 96, "quail": 96, "partridg": 96, "parrot": 96, "macaw": 96, "sulphur": 96, "crest": 96, "cockatoo": 96, "lorikeet": 96, "coucal": 96, "bee": 96, "eater": 96, "hornbil": 96, "hummingbird": 96, "jacamar": 96, "toucan": 96, "breast": 96, "mergans": 96, "goos": 96, "swan": 96, "tusker": 96, "echidna": 96, "platypu": 96, "wallabi": 96, "koala": 96, "wombat": 96, "jellyfish": 96, "anemon": 96, "brain": 96, "coral": 96, "flatworm": 96, "nematod": 96, "conch": 96, "snail": 96, "slug": 96, "chiton": 96, "chamber": 96, "nautilu": 96, "dung": 96, "crab": 96, "fiddler": 96, "king": 96, "lobster": 96, "spini": 96, "crayfish": 96, "hermit": 96, "isopod": 96, "stork": 96, "spoonbil": 96, "flamingo": 96, "heron": 96, "egret": 96, "bittern": 96, "crane": 96, "bird": [96, 104], "limpkin": 96, "gallinul": 96, "coot": 96, "bustard": 96, "ruddi": 96, "turnston": 96, "dunlin": 96, "redshank": 96, "dowitch": 96, "oystercatch": 96, "pelican": 96, "penguin": 96, "albatross": 96, "whale": 96, "killer": 96, "dugong": 96, "lion": 96, "chihuahua": 96, "japanes": 96, "chin": 96, "maltes": 96, "pekinges": 96, "shih": 96, "tzu": 96, "charl": 96, "spaniel": 96, "papillon": 96, "terrier": 96, "rhodesian": 96, "ridgeback": 96, "afghan": [96, 108], "hound": 96, "basset": 96, "beagl": 96, "bloodhound": 96, "bluetick": 96, "coonhound": 96, "tan": 96, "walker": 96, "foxhound": 96, "redbon": 96, "borzoi": 96, "irish": 96, "wolfhound": 96, "italian": 96, "greyhound": 96, "whippet": 96, "ibizan": 96, "norwegian": 96, "elkhound": 96, "otterhound": 96, "saluki": 96, "scottish": 96, "deerhound": 96, "weimaran": 96, "staffordshir": 96, "bull": 96, "bedlington": 96, "border": 96, "kerri": 96, "norfolk": 96, "norwich": 96, "yorkshir": 96, "wire": 96, "fox": 96, "lakeland": 96, "sealyham": 96, "airedal": 96, "cairn": 96, "australian": 96, "dandi": 96, "dinmont": 96, "boston": 96, "miniatur": 96, "schnauzer": 96, "giant": 96, "tibetan": 96, "silki": 96, "wheaten": 96, "west": 96, "highland": 96, "lhasa": 96, "apso": 96, "retriev": 96, "curli": 96, "golden": 96, "labrador": 96, "chesapeak": 96, "bai": 96, "german": [96, 108], "shorthair": 96, "pointer": 96, "vizsla": 96, "setter": 96, "gordon": 96, "brittani": 96, "clumber": 96, "springer": 96, "welsh": 96, "cocker": 96, "sussex": 96, "kuvasz": 96, "schipperk": 96, "groenendael": 96, "malinoi": 96, "briard": 96, "kelpi": 96, "komondor": 96, "sheepdog": 96, "shetland": 96, "colli": 96, "bouvier": 96, "de": 96, "flandr": 96, "rottweil": 96, "shepherd": 96, "dobermann": 96, "pinscher": 96, "swiss": [96, 108], "mountain": 96, "bernes": 96, "appenzel": 96, "sennenhund": 96, "entlebuch": 96, "boxer": 96, "bullmastiff": 96, "mastiff": 96, "french": 96, "bulldog": 96, "dane": 96, "st": 96, "bernard": 96, "huski": 96, "alaskan": 96, "malamut": 96, "siberian": 96, "dalmatian": 96, "affenpinsch": 96, "basenji": 96, "pug": 96, "leonberg": 96, "newfoundland": 96, "pyrenean": 96, "samoi": 96, "pomeranian": 96, "chow": 96, "keeshond": 96, "griffon": 96, "bruxelloi": 96, "pembrok": 96, "corgi": 96, "cardigan": 96, "poodl": 96, "mexican": 96, "hairless": 96, "tundra": 96, "coyot": 96, "dingo": 96, "dhole": 96, "wild": 96, "hyena": 96, "kit": 96, "arctic": 96, "tabbi": 96, "persian": 96, "siames": 96, "egyptian": 96, "mau": 96, "cougar": 96, "lynx": 96, "leopard": 96, "snow": 96, "jaguar": 96, "cheetah": 96, "brown": [96, 107], "bear": 96, "polar": 96, "sloth": 96, "mongoos": 96, "meerkat": 96, "beetl": 96, "ladybug": 96, "longhorn": 96, "leaf": 96, "rhinocero": 96, "weevil": 96, "fly": 96, "ant": 96, "grasshopp": 96, "cricket": 96, "stick": 96, "insect": 96, "cockroach": 96, "manti": 96, "cicada": 96, "leafhopp": 96, "lacew": 96, "dragonfli": 96, "damselfli": 96, "admir": 96, "ringlet": 96, "monarch": 96, "butterfli": 96, "gossam": 96, "wing": 96, "starfish": 96, "urchin": 96, "cucumb": 96, "cottontail": 96, "rabbit": 96, "hare": 96, "angora": 96, "hamster": 96, "porcupin": 96, "squirrel": 96, "marmot": 96, "beaver": 96, "guinea": 96, "pig": 96, "sorrel": 96, "zebra": 96, "boar": 96, "warthog": 96, "hippopotamu": 96, "ox": 96, "buffalo": 96, "bison": 96, "bighorn": 96, "sheep": 96, "alpin": 96, "ibex": 96, "hartebeest": 96, "impala": 96, "gazel": 96, "dromedari": 96, "llama": 96, "weasel": 96, "mink": 96, "polecat": 96, "foot": 96, "ferret": 96, "otter": 96, "skunk": 96, "badger": 96, "armadillo": 96, "toed": 96, "orangutan": 96, "gorilla": 96, "chimpanze": 96, "gibbon": 96, "siamang": 96, "guenon": 96, "pata": 96, "monkei": 96, "baboon": 96, "macaqu": 96, "langur": 96, "colobu": 96, "probosci": 96, "marmoset": 96, "capuchin": 96, "howler": 96, "titi": 96, "geoffroi": 96, "lemur": 96, "indri": 96, "asian": 96, "eleph": 96, "bush": 96, "snoek": 96, "eel": 96, "coho": 96, "salmon": 96, "beauti": 96, "clownfish": 96, "sturgeon": 96, "garfish": 96, "lionfish": 96, "pufferfish": 96, "abacu": 96, "abaya": 96, "academ": 96, "gown": 96, "accordion": 96, "acoust": 96, "guitar": 96, "aircraft": 96, "carrier": 96, "airlin": 96, "airship": 96, "altar": 96, "ambul": 96, "amphibi": 96, "clock": [96, 108], "apiari": 96, "apron": 96, "wast": 96, "assault": 96, "rifl": 96, "backpack": 96, "bakeri": 96, "balanc": 96, "beam": 96, "balloon": 96, "ballpoint": 96, "pen": 96, "aid": 96, "banjo": 96, "balust": 96, "barbel": 96, "barber": 96, "chair": [96, 103], "barbershop": 96, "baromet": 96, "barrel": 96, "wheelbarrow": 96, "basebal": 96, "basketbal": 96, "bassinet": 96, "bassoon": 96, "swim": 96, "cap": 96, "bath": 96, "towel": 96, "bathtub": 96, "station": 96, "wagon": 96, "lighthous": 96, "beaker": 96, "militari": 96, "beer": 96, "bottl": 96, "glass": 96, "bell": 96, "cot": 96, "bib": 96, "bicycl": [96, 107], "bikini": 96, "binder": 96, "binocular": 96, "birdhous": 96, "boathous": 96, "bobsleigh": 96, "bolo": 96, "tie": 96, "poke": 96, "bonnet": 96, "bookcas": 96, "bookstor": 96, "bow": 96, "brass": 96, "bra": 96, "breakwat": 96, "breastplat": 96, "broom": 96, "bucket": 96, "buckl": 96, "bulletproof": 96, "vest": 96, "butcher": 96, "shop": 96, "taxicab": 96, "cauldron": 96, "candl": 96, "cannon": 96, "cano": 96, "mirror": [96, 103], "carousel": 96, "carton": 96, "wheel": 96, "teller": 96, "cassett": 96, "player": 96, "castl": 96, "catamaran": 96, "cd": 96, "cello": 96, "mobil": [96, 108], "chain": 96, "fenc": [96, 107], "mail": 96, "chainsaw": 96, "chest": 96, "chiffoni": 96, "chime": 96, "china": 96, "cabinet": 96, "christma": 96, "stock": 96, "church": 96, "movi": 96, "theater": 96, "cleaver": 96, "cliff": 96, "dwell": 96, "cloak": 96, "clog": 96, "cocktail": 96, "shaker": 96, "coffe": 96, "mug": 96, "coffeemak": 96, "coil": 96, "lock": 96, "keyboard": 96, "confectioneri": 96, "ship": [96, 104], "corkscrew": 96, "cornet": 96, "cowboi": 96, "boot": 96, "hat": 96, "cradl": 96, "crash": 96, "helmet": 96, "crate": 96, "infant": 96, "bed": 96, "crock": 96, "pot": 96, "croquet": 96, "crutch": 96, "cuirass": 96, "dam": 96, "desk": 96, "desktop": 96, "rotari": 96, "dial": 96, "telephon": 96, "diaper": 96, "watch": 96, "dine": 96, "dishcloth": 96, "dishwash": 96, "disc": 96, "brake": 96, "dock": 96, "sled": 96, "dome": 96, "doormat": 96, "drill": 96, "rig": 96, "drum": 96, "drumstick": 96, "dumbbel": 96, "dutch": 96, "oven": 96, "fan": 96, "locomot": 96, "entertain": 96, "envelop": 96, "espresso": 96, "powder": 96, "feather": 96, "fireboat": 96, "engin": [96, 107], "screen": 96, "sheet": 96, "flagpol": 96, "flute": 96, "footbal": 96, "forklift": 96, "fountain": 96, "poster": 96, "freight": 96, "fry": 96, "pan": 96, "fur": 96, "garbag": 96, "ga": 96, "pump": 96, "goblet": 96, "kart": 96, "golf": 96, "cart": 96, "gondola": 96, "gong": 96, "grand": 96, "piano": 96, "greenhous": 96, "grill": 96, "groceri": 96, "guillotin": 96, "barrett": 96, "hair": 96, "sprai": 96, "hammer": 96, "dryer": 96, "hand": [96, 99], "handkerchief": 96, "drive": 96, "harmonica": 96, "harp": 96, "harvest": 96, "hatchet": 96, "holster": 96, "honeycomb": 96, "hoop": 96, "skirt": 96, "horizont": 96, "bar": 96, "drawn": 96, "hourglass": 96, "ipod": 96, "cloth": 96, "iron": 96, "jack": 96, "lantern": 96, "jean": 96, "jeep": 96, "jigsaw": 96, "puzzl": 96, "pull": 96, "rickshaw": 96, "joystick": 96, "kimono": 96, "knee": 96, "pad": 96, "knot": 96, "ladl": 96, "lampshad": 96, "laptop": 96, "lawn": 96, "mower": 96, "knife": 96, "lifeboat": 96, "lighter": 96, "limousin": 96, "ocean": 96, "liner": 96, "lipstick": 96, "slip": 96, "shoe": 96, "lotion": 96, "speaker": 96, "loup": 96, "sawmil": 96, "magnet": 96, "compass": 96, "mailbox": 96, "tight": 96, "tank": 96, "manhol": 96, "maraca": 96, "marimba": 96, "maypol": 96, "maze": 96, "cup": [96, 103], "medicin": 96, "megalith": 96, "microphon": 96, "microwav": 96, "milk": 96, "minibu": 96, "miniskirt": 96, "minivan": 96, "missil": 96, "mitten": [96, 97], "mix": 96, "bowl": 96, "modem": 96, "monasteri": 96, "monitor": 96, "mope": 96, "mortar": 96, "mosqu": 96, "mosquito": 96, "scooter": 96, "bike": 96, "tent": 96, "mous": [96, 97], "mousetrap": 96, "van": 96, "muzzl": 96, "nail": 96, "brace": 96, "necklac": 96, "nippl": 96, "obelisk": 96, "obo": 96, "ocarina": 96, "odomet": 96, "oil": 96, "oscilloscop": 96, "overskirt": 96, "bullock": 96, "oxygen": 96, "packet": 96, "paddl": 96, "padlock": 96, "paintbrush": 96, "pajama": 96, "palac": [96, 108], "parachut": 96, "park": 96, "bench": 96, "meter": 96, "passeng": 96, "patio": 96, "payphon": 96, "pedest": 96, "pencil": 96, "perfum": 96, "petri": 96, "dish": 96, "photocopi": 96, "plectrum": 96, "pickelhaub": 96, "picket": 96, "pickup": 96, "pier": 96, "piggi": 96, "pill": 96, "pillow": 96, "ping": 96, "pong": 96, "pinwheel": 96, "pirat": 96, "pitcher": 96, "plane": 96, "planetarium": 96, "plastic": 96, "plate": 96, "rack": 96, "plow": 96, "plunger": 96, "polaroid": 96, "camera": 96, "pole": [96, 107], "polic": 96, "poncho": 96, "billiard": 96, "soda": 96, "potter": 96, "prayer": 96, "rug": 96, "printer": 96, "prison": 96, "projectil": 96, "projector": 96, "hockei": 96, "puck": 96, "punch": 96, "purs": 96, "quill": 96, "quilt": 96, "race": 96, "racket": 96, "radiat": 96, "radio": 96, "telescop": 96, "rain": 96, "recreat": 96, "reel": 96, "reflex": 96, "refriger": 96, "remot": 96, "restaur": 96, "revolv": 96, "rotisseri": 96, "eras": 96, "rugbi": 96, "ruler": 96, "safe": 96, "safeti": 96, "salt": 96, "sarong": 96, "saxophon": 96, "scabbard": 96, "bu": [96, 107], "schooner": 96, "scoreboard": 96, "crt": 96, "screw": 96, "screwdriv": 96, "seat": 96, "belt": 96, "sew": 96, "shield": 96, "shoji": 96, "basket": 96, "shovel": 96, "shower": 96, "curtain": 96, "ski": 96, "sleep": 96, "door": 96, "slot": 96, "snorkel": 96, "snowmobil": 96, "snowplow": 96, "soap": 96, "dispens": 96, "soccer": [96, 108], "sock": [96, 97], "solar": 96, "thermal": 96, "collector": 96, "sombrero": 96, "soup": 96, "heater": 96, "shuttl": 96, "spatula": 96, "motorboat": 96, "web": 96, "spindl": 96, "sport": [96, 108], "spotlight": 96, "stage": 96, "steam": 96, "arch": 96, "bridg": 96, "steel": 96, "stethoscop": 96, "scarf": 96, "stone": 96, "wall": [96, 107], "stopwatch": 96, "stove": 96, "strainer": 96, "tram": 96, "stretcher": 96, "couch": 96, "stupa": 96, "submarin": 96, "sundial": 96, "sunglass": 96, "sunscreen": 96, "suspens": 96, "mop": 96, "sweatshirt": 96, "swimsuit": 96, "swing": 96, "switch": 96, "syring": 96, "lamp": 96, "tape": 96, "teapot": 96, "teddi": 96, "televis": [96, 108], "tenni": 96, "thatch": 96, "roof": 96, "thimbl": 96, "thresh": 96, "throne": 96, "tile": 96, "toaster": 96, "tobacco": 96, "toilet": 96, "totem": 96, "tow": 96, "tractor": 96, "semi": 96, "trailer": 96, "trai": 96, "trench": 96, "tricycl": 96, "trimaran": 96, "tripod": 96, "triumphal": 96, "trolleybu": 96, "trombon": 96, "tub": 96, "turnstil": 96, "typewrit": 96, "umbrella": 96, "unicycl": 96, "upright": 96, "vacuum": 96, "cleaner": [96, 98], "vase": 96, "vault": 96, "velvet": 96, "vend": 96, "vestment": 96, "viaduct": 96, "violin": 96, "volleybal": 96, "waffl": 96, "wallet": 96, "wardrob": 96, "sink": 96, "wash": 96, "jug": 96, "tower": 96, "whiskei": 96, "whistl": 96, "wig": 96, "shade": [96, 107], "windsor": 96, "wine": 96, "wok": 96, "wooden": 96, "spoon": 96, "wool": 96, "rail": 96, "shipwreck": 96, "yawl": 96, "yurt": 96, "websit": 96, "comic": 96, "book": 96, "crossword": 96, "traffic": [96, 103, 107], "sign": [96, 107, 108], "dust": 96, "jacket": [96, 103], "menu": 96, "guacamol": 96, "consomm": 96, "trifl": 96, "ic": 96, "cream": 96, "pop": 96, "baguett": 96, "bagel": 96, "pretzel": 96, "cheeseburg": 96, "mash": 96, "potato": 96, "cabbag": 96, "broccoli": 96, "cauliflow": 96, "zucchini": 96, "spaghetti": 96, "squash": 96, "acorn": 96, "butternut": 96, "artichok": 96, "pepper": [96, 97], "cardoon": 96, "mushroom": 96, "granni": 96, "smith": 96, "strawberri": 96, "lemon": 96, "pineappl": 96, "banana": 96, "jackfruit": 96, "custard": 96, "appl": 96, "pomegran": 96, "hai": 96, "carbonara": 96, "chocol": 96, "syrup": 96, "dough": 96, "meatloaf": 96, "pizza": 96, "pie": 96, "burrito": 96, "eggnog": 96, "alp": 96, "bubbl": 96, "reef": 96, "geyser": 96, "lakeshor": 96, "promontori": 96, "shoal": 96, "seashor": 96, "vallei": 96, "volcano": 96, "bridegroom": 96, "scuba": 96, "diver": 96, "rapese": 96, "daisi": 96, "ladi": 96, "slipper": 96, "corn": 96, "rose": 96, "hip": 96, "chestnut": 96, "fungu": 96, "agar": 96, "gyromitra": 96, "stinkhorn": 96, "earth": 96, "star": 96, "wood": 96, "bolet": 96, "ear": 96, "cifar10_test_set": 96, "airplan": [96, 104], "automobil": [96, 104], "deer": [96, 104], "cifar100_test_set": 96, "aquarium_fish": 96, "boi": 96, "camel": 96, "caterpillar": 96, "cattl": [96, 108], "cloud": 96, "dinosaur": 96, "dolphin": 96, "flatfish": 96, "forest": 96, "girl": 96, "kangaroo": 96, "lawn_mow": 96, "man": 96, "maple_tre": 96, "motorcycl": [96, 107], "oak_tre": 96, "orchid": 96, "palm_tre": 96, "pear": 96, "pickup_truck": 96, "pine_tre": 96, "plain": 96, "poppi": 96, "possum": 96, "raccoon": 96, "road": [96, 107], "rocket": 96, "seal": 96, "shrew": 96, "skyscrap": 96, "streetcar": 96, "sunflow": 96, "sweet_pepp": 96, "trout": 96, "tulip": 96, "willow_tre": 96, "woman": [96, 103], "caltech256": 96, "ak47": 96, "bat": 96, "glove": 96, "birdbath": 96, "blimp": 96, "bonsai": 96, "boom": 96, "breadmak": 96, "buddha": 96, "bulldoz": 96, "cactu": 96, "cake": 96, "tire": 96, "cartman": 96, "cereal": 96, "chandeli": 96, "chess": 96, "board": 96, "chimp": 96, "chopstick": 96, "coffin": 96, "coin": 96, "comet": 96, "cormor": 96, "globe": 96, "diamond": 96, "dice": 96, "doorknob": 96, "drink": 96, "straw": 96, "dumb": 96, "eiffel": 96, "elk": 96, "ewer": 96, "eyeglass": 96, "fern": 96, "fighter": 96, "jet": [96, 106], "extinguish": 96, "hydrant": 96, "firework": 96, "flashlight": 96, "floppi": 96, "fri": 96, "frisbe": 96, "galaxi": 96, "giraff": 96, "goat": 96, "gate": 96, "grape": 96, "pick": [96, 97], "hamburg": 96, "hammock": 96, "harpsichord": 96, "hawksbil": 96, "helicopt": 96, "hibiscu": 96, "homer": 96, "simpson": 96, "horsesho": 96, "air": 96, "skeleton": 96, "ibi": 96, "cone": 96, "iri": 96, "jesu": 96, "christ": 96, "joi": 96, "kayak": 96, "ketch": 96, "ladder": 96, "lath": 96, "licens": 96, "lightbulb": 96, "lightn": 96, "mandolin": 96, "mar": 96, "mattress": 96, "megaphon": 96, "menorah": 96, "microscop": 96, "minaret": 96, "minotaur": 96, "motorbik": 96, "mussel": 96, "neckti": 96, "octopu": 96, "palm": 96, "pilot": 96, "paperclip": 96, "shredder": 96, "pci": 96, "peopl": [96, 103], "pez": 96, "picnic": 96, "pram": 96, "prai": 96, "pyramid": 96, "rainbow": 96, "roulett": 96, "saddl": 96, "saturn": 96, "segwai": 96, "propel": 96, "sextant": 96, "music": 96, "skateboard": 96, "smokestack": 96, "sneaker": 96, "boat": 96, "stain": 96, "steer": 96, "stirrup": 96, "superman": 96, "sushi": 96, "armi": [96, 108], "sword": 96, "tambourin": 96, "teepe": 96, "court": 96, "theodolit": 96, "tomato": 96, "tombston": 96, "tour": 96, "pisa": 96, "treadmil": 96, "fork": 96, "tweezer": 96, "unicorn": 96, "vcr": 96, "waterfal": 96, "watermelon": 96, "weld": 96, "windmil": 96, "xylophon": 96, "yarmulk": 96, "yo": 96, "toad": 96, "twenty_news_test_set": 96, "comp": 96, "graphic": [96, 107], "misc": [96, 108], "sy": 96, "ibm": 96, "pc": 96, "hardwar": 96, "mac": 96, "forsal": 96, "rec": 96, "crypt": 96, "electron": 96, "med": 96, "soc": 96, "religion": 96, "christian": [96, 108], "talk": [96, 108], "polit": 96, "gun": 96, "mideast": 96, "amazon": 96, "neutral": 96, "imdb_test_set": 96, "all_class": 96, "20news_test_set": 96, "_load_classes_predprobs_label": 96, "dataset_nam": 96, "labelerror": 96, "url_bas": 96, "5392f6c71473055060be3044becdde1cbc18284d": 96, "url_label": 96, "original_test_label": 96, "_original_label": 96, "url_prob": 96, "cross_validated_predicted_prob": 96, "_pyx": 96, "num_part": 96, "datatset": 96, "bytesio": 96, "allow_pickl": 96, "pred_probs_part": 96, "url": 96, "_of_": 96, "nload": 96, "imdb": 96, "ve": [96, 97, 98, 99, 101, 103], "capit": 96, "29780": 96, "256": [96, 97, 98, 103], "780": 96, "medic": [96, 108], "doctor": 96, "254": [96, 103], "359223": 96, "640777": 96, "184": [96, 99], "258427": 96, "341176": 96, "263158": 96, "658824": 96, "337349": 96, "246575": 96, "662651": 96, "248": 96, "330000": 96, "355769": 96, "251": [96, 103], "167": [96, 99, 103], "252": [96, 98], "112": [96, 98], "253": [96, 103], "022989": 96, "049505": 96, "190": [96, 99, 103], "002216": 96, "000974": 96, "000873": 96, "000739": 96, "32635": 96, "32636": 96, "32637": 96, "32638": 96, "32639": 96, "32640": 96, "051": 96, "002242": 96, "997758": 96, "002088": 96, "001045": 96, "997912": 96, "002053": 96, "997947": 96, "001980": 96, "000991": 96, "998020": 96, "001946": 96, "002915": 96, "998054": 96, "001938": 96, "002904": 96, "998062": 96, "001020": 96, "998980": 96, "001018": 96, "002035": 96, "998982": 96, "999009": 96, "0003": 96, "0002": 96, "071": 96, "067269": 96, "929": 96, "046": 96, "058243": 96, "954": 96, "035": 96, "032096": 96, "965": 96, "031": 96, "012232": 96, "969": 96, "022": 96, "025896": 96, "978": 96, "020": [96, 99], "013092": 96, "018": 96, "013065": 96, "016": 96, "030542": 96, "984": 96, "013": 96, "020833": 96, "987": 96, "012": 96, "010020": 96, "988": 96, "0073": 96, "0020": 96, "0016": 96, "0015": 96, "0014": 96, "0013": 96, "0012": 96, "0010": 96, "0008": 96, "0007": 96, "0006": 96, "0005": 96, "0004": 96, "244": [96, 103, 108], "452381": 96, "459770": 96, "523364": 96, "460784": 96, "446602": 96, "103774": 96, "030612": 96, "110092": 96, "049020": 96, "0034": 96, "0032": 96, "0026": 96, "0025": 96, "4945": 96, "4946": 96, "4947": 96, "4948": 96, "4949": 96, "4950": 96, "846": 96, "7532": 96, "532": 96, "034483": 96, "009646": 96, "965517": 96, "030457": 96, "020513": 96, "969543": 96, "028061": 96, "035443": 96, "971939": 96, "025316": 96, "005168": 96, "974684": 96, "049751": 96, "979487": 96, "019920": 96, "042802": 96, "980080": 96, "017677": 96, "005115": 96, "982323": 96, "012987": 96, "005236": 96, "987013": 96, "012723": 96, "025126": 96, "987277": 96, "010989": 96, "008264": 96, "989011": 96, "010283": 96, "027778": 96, "989717": 96, "009677": 96, "990323": 96, "007614": 96, "010127": 96, "992386": 96, "005051": 96, "994949": 96, "005025": 96, "994975": 96, "005013": 96, "994987": 96, "001859": 96, "001328": 96, "000929": 96, "000664": 96, "186": [96, 99], "188": [96, 99, 102], "189": [96, 99], "snippet": 97, "nlp": [97, 108], "mind": [97, 99], "alphanumer": 97, "facilit": 97, "seamless": 97, "classlabel": 97, "guidanc": 97, "labels_str": 97, "datalab_str": 97, "labels_int": 97, "remap": 97, "datalab_int": 97, "my_dict": 97, "pet_nam": 97, "rover": 97, "rocki": 97, "speci": 97, "datalab_dataset": 97, "number_of_class": 97, "total_number_of_data_point": 97, "feed": 97, "alphabet": 97, "labels_proper_format": 97, "your_classifi": 97, "issues_datafram": 97, "class_predicted_for_flagged_exampl": 97, "class_predicted_for_all_exampl": 97, "grant": 97, "On": [97, 98, 99, 103], "merged_dataset": 97, "label_column_nam": 97, "datataset": 97, "fair": [97, 99], "game": 97, "speedup": [97, 104], "tempfil": 97, "mkdtemp": 97, "sped": 97, "anywai": 97, "pred_probs_merg": 97, "merge_rare_class": 97, "count_threshold": 97, "class_mapping_orig2new": 97, "heath_summari": 97, "num_examples_per_class": 97, "rare_class": 97, "num_classes_merg": 97, "other_class": 97, "labels_merg": 97, "new_c": 97, "merged_prob": 97, "new_class": 97, "original_class": 97, "num_check": 97, "ones_array_ref": 97, "isclos": 97, "though": [97, 99, 108], "successfulli": 97, "virtuou": [97, 101], "cycl": [97, 101], "jointli": 97, "junk": 97, "clutter": 97, "unknown": 97, "caltech": 97, "combined_boolean_mask": 97, "mask1": 97, "mask2": 97, "gradientboostingclassifi": [97, 99], "true_error": [97, 99, 102], "101": [97, 98, 103], "102": [97, 102, 103], "104": [97, 99, 103], "model_to_find_error": 97, "model_to_return": 97, "cl0": 97, "randomizedsearchcv": 97, "expens": 97, "param_distribut": 97, "learning_r": [97, 98, 99], "max_depth": [97, 98, 99], "magnitud": 97, "coeffici": [97, 106], "optin": 97, "environ": [97, 98, 99], "rerun": [97, 98, 99], "cell": [97, 98, 99], "unabl": [97, 98, 99], "render": [97, 98, 99], "nbviewer": [97, 98, 99], "cleanlearninginot": [97, 99], "fittedcleanlearn": [97, 99], "linearregressionlinearregress": 97, "unexpectedli": 97, "emphas": 97, "crucial": 97, "merge_duplicate_set": 97, "merge_kei": 97, "construct_group_kei": 97, "merged_set": 97, "consolidate_set": 97, "issubset": 97, "frozenset": [97, 98], "sets_list": 97, "mutabl": 97, "new_set": 97, "current_set": 97, "intersecting_set": 97, "lowest_score_strategi": 97, "sub_df": 97, "filter_near_dupl": 97, "strategy_fn": 97, "strategy_kwarg": 97, "duplicate_row": 97, "group_kei": 97, "to_keep_indic": 97, "groupbi": 97, "explod": 97, "to_remov": 97, "isin": [97, 104], "kept": 97, "ids_to_remove_seri": 97, "assist": 97, "streamlin": [97, 98], "ux": 97, "agpl": 97, "compani": 97, "commerci": 97, "alter": [97, 98], "email": 97, "team": 97, "anywher": 97, "profession": 97, "expert": 97, "recogn": 98, "vital": 98, "leakag": 98, "comparion": 98, "leak": 98, "blueprint": 98, "divers": 98, "parameter": 98, "tldr": 98, "answer": [98, 99], "subtl": 98, "faith": 98, "danger": 98, "inevit": [98, 104], "xgbclassifi": 98, "123456": 98, "df_train": 98, "s3": [98, 103, 107, 108], "amazonaw": [98, 103, 107, 108], "clos_train_data": 98, "df_test": 98, "clos_test_data": 98, "noisy_letter_grad": 98, "018bff": 98, "076d92": 98, "c80059": 98, "e38f8a": 98, "d57e1a": 98, "grade_l": 98, "notes_l": 98, "train_featur": 98, "train_features_v2": 98, "train_labels_v2": 98, "test_featur": 98, "preprocessed_train_data": 98, "preprocessed_test_data": 98, "haven": 98, "features_df": 98, "heterogenou": 98, "full_df": 98, "reset_index": [98, 101], "749": 98, "583745": 98, "291382": 98, "5837": 98, "748": 98, "604": 98, "510": 98, "227": [98, 102, 103], "719": 98, "690": 98, "444": 98, "547": 98, "647": 98, "2914": 98, "611": 98, "687869": 98, "610": 98, "687883": 98, "612": 98, "688146": 98, "609": 98, "688189": 98, "613": 98, "688713": 98, "2913818469137725": 98, "came": [98, 108], "full_duplicate_result": 98, "train_idx_cutoff": 98, "nd_set_has_index_over_training_cutoff": 98, "exact_dupl": 98, "627": 98, "678": 98, "615": 98, "292": 98, "620": 98, "420": 98, "704": 98, "431": 98, "459": 98, "672": 98, "564": 98, "696": 98, "605": 98, "exact_duplicates_indic": 98, "indices_of_duplicates_to_drop": 98, "4a3f75": 98, "d030b5": 98, "ddd0ba": 98, "8e6d24": 98, "464aab": 98, "ee3387": 98, "61e807": 98, "71d7b9": 98, "83e31f": 98, "edeb53": 98, "cd52b5": 98, "84": [98, 103, 106], "454e51": 98, "042686": 98, "12a73f": 98, "tree_method": 98, "hist": [98, 104], "enable_categor": 98, "booster": 98, "callback": 98, "colsample_bylevel": 98, "colsample_bynod": 98, "colsample_bytre": 98, "early_stopping_round": 98, "eval_metr": 98, "feature_typ": 98, "gamma": 98, "grow_polici": 98, "importance_typ": 98, "interaction_constraint": 98, "max_bin": 98, "max_cat_threshold": 98, "max_cat_to_onehot": 98, "max_delta_step": 98, "max_leav": 98, "min_child_weight": 98, "monotone_constraint": 98, "multi_strategi": 98, "n_estim": [98, 99], "num_parallel_tre": 98, "x27": [98, 99], "softprob": 98, "xgbclassifierifittedxgbclassifi": 98, "test_pred_prob": [98, 104], "test_lab": 98, "test_features_arrai": 98, "134": 98, "798507": 98, "370259": 98, "625352": 98, "524042": 98, "097015": 98, "7985": 98, "000537": 98, "000903": 98, "001743": 98, "106": 98, "001853": 98, "002121": 98, "3703": 98, "752463e": 98, "784418e": 98, "09": [98, 102, 103, 106], "477741e": 98, "134230e": 98, "153555e": 98, "6254": 98, "143272": 98, "146501": 98, "161431": 98, "5240": 98, "765240": 98, "771221": 98, "801589": 98, "801652": 98, "810735": 98, "5240417899434826": 98, "0970": 98, "na": [98, 101], "test_label_issue_result": 98, "test_label_issues_ord": 98, "2bd759": 98, "34ccdd": 98, "bb3bab": 98, "103": [98, 99, 103], "bf1b14": 98, "4787de": 98, "865cbd": 98, "32d53f": 98, "5b2f76": 98, "28f8b4": 98, "df814d": 98, "f17261": 98, "1db3ff": 98, "ded944": 98, "124": [98, 103], "343dd3": 98, "homework": [98, 106], "8d904d": 98, "e4f0d5": 98, "d6d208": 98, "76c083": 98, "695f96": 98, "745c23": 98, "13b36e": 98, "5ba892": 98, "9f0216": 98, "003628": 98, "004006": 98, "004031": 98, "007930": 98, "013226": 98, "015255": 98, "017692": 98, "019767": 98, "036197": 98, "054746": 98, "055110": 98, "062675": 98, "112695": 98, "121059": 98, "171280": 98, "181689": 98, "208001": 98, "275028": 98, "346032": 98, "396350": 98, "401493": 98, "474349": 98, "mislead": 98, "breviti": 98, "indices_to_drop_from_test_data": 98, "df_test_clean": 98, "acc_origin": 98, "tediou": 98, "train_features_arrai": 98, "train_lab": 98, "318": [98, 106], "601": 98, "740433": 98, "344154": 98, "588290": 98, "437267": 98, "146423": 98, "977223": 98, "7404": 98, "162": [98, 108], "000072": 98, "348": 98, "000161": 98, "232": [98, 103], "000256": 98, "205": [98, 103], "000458": 98, "000738": 98, "3442": 98, "588": 98, "358961e": 98, "336": [98, 103], "490911e": 98, "269": 98, "122475e": 98, "321": [98, 103], "374139e": 98, "311": 98, "358617e": 98, "5883": 98, "600": 98, "592": 98, "593": 98, "594": 98, "595": 98, "596": 98, "597": 98, "598": 98, "599": 98, "221": 98, "222": [98, 99], "315": 98, "332": [98, 103], "791060e": 98, "243": [98, 103], "540": 98, "379106e": 98, "396": 98, "397": 98, "398": 98, "399": 98, "4373": 98, "165": [98, 102], "550374": 98, "627357": 98, "627496": 98, "627502": 98, "627919": 98, "43726734378061227": 98, "1464": 98, "506": 98, "393": 98, "508": 98, "9772": 98, "402": 98, "401": 98, "aggress": 98, "faithfulli": 98, "label_issue_result": 98, "566": 98, "568": 98, "571": 98, "572": 98, "574": 98, "576": 98, "578": 98, "585": 98, "587": 98, "590": 98, "near_duplicates_idx": 98, "117": [98, 99, 106], "122": [98, 99, 103], "146": 98, "155": [98, 99, 103], "156": [98, 99], "173": [98, 103], "224": [98, 103], "272": 98, "277": [98, 103], "279": [98, 103], "288": 98, "300": [98, 101, 108], "342": 98, "352": 98, "365": 98, "366": 98, "384": 98, "388": 98, "394": 98, "404": 98, "474": 98, "480": 98, "494": 98, "515": 98, "536": 98, "537": 98, "539": 98, "542": 98, "outliers_idx": 98, "143": [98, 102, 103, 108], "159": [98, 102, 103], "163": [98, 99, 108], "193": [98, 99], "194": [98, 99], "208": 98, "240": [98, 103], "241": 98, "242": [98, 103], "247": [98, 103], "287": [98, 103], "295": [98, 103], "299": [98, 103], "307": [98, 103], "350": 98, "361": 98, "378": 98, "379": 98, "392": 98, "419": 98, "432": 98, "479": 98, "484": 98, "485": 98, "489": 98, "492": 98, "504": 98, "511": 98, "522": 98, "523": 98, "535": 98, "543": 98, "567": 98, "579": 98, "591": 98, "idx_to_drop": 98, "276": [98, 103], "df_train_cur": 98, "clean_clf": 98, "clean_pr": 98, "acc_clean": 98, "inaccur": 98, "hybrid": 98, "quantit": 98, "hyper": 98, "default_edit_param": 98, "drop_label_issu": 98, "drop_outli": 98, "drop_near_dupl": 98, "candid": [98, 103], "edit_data": 98, "percentag": [98, 99], "num_label_issues_to_drop": 98, "num_outliers_to_drop": 98, "dedupl": 98, "unique_clust": 98, "unique_clusters_list": 98, "near_duplicates_idx_to_drop": 98, "n_drop": 98, "label_issues_idx_to_drop": 98, "outliers_idx_to_drop": 98, "train_features_clean": 98, "train_labels_clean": 98, "itertool": 98, "finer": 98, "param_combin": 98, "best_scor": 98, "best_param": 98, "train_features_preprocess": 98, "train_labels_preprocess": 98, "depth": 99, "survei": [99, 108], "scienc": 99, "multivariate_norm": [99, 101, 102], "make_data": [99, 101], "cov": [99, 101, 102], "avg_trac": [99, 102], "py_tru": 99, "noise_matrix_tru": 99, "noise_marix": 99, "s_test": 99, "noisy_test_label": 99, "purpl": 99, "namespac": 99, "exec": 99, "markerfacecolor": [99, 102], "markeredgecolor": [99, 102, 106], "markers": [99, 102, 106], "markeredgewidth": [99, 102, 106], "realist": 99, "7560": 99, "637318e": 99, "896262e": 99, "548391e": 99, "923417e": 99, "375075e": 99, "3454": 99, "014051": 99, "020451": 99, "249": [99, 103], "042594": 99, "043859": 99, "045954": 99, "6120": 99, "023714": 99, "007136": 99, "119": [99, 103], "107266": 99, "033738": 99, "238": [99, 103], "119505": 99, "236": [99, 103], "037843": 99, "614915": 99, "624422": 99, "625965": 99, "626079": 99, "627675": 99, "695223": 99, "323529": 99, "523015": 99, "013720": 99, "675727": 99, "646521": 99, "anyth": 99, "magic": 99, "liter": 99, "identif": 99, "logisticregressionlogisticregress": 99, "ever": 99, "092": 99, "040": 99, "024": 99, "004": 99, "surpris": 99, "1705": 99, "01936": 99, "ton": 99, "yourfavoritemodel1": 99, "merged_label": 99, "merged_test_label": 99, "newli": [99, 101], "yourfavoritemodel2": 99, "yourfavoritemodel3": 99, "cl3": 99, "takeawai": 99, "my_test_pred_prob": 99, "my_test_pr": 99, "issues_test": 99, "corrected_test_label": 99, "pretend": 99, "cl_test_pr": 99, "fairli": 99, "label_acc": 99, "offset": 99, "nquestion": 99, "overestim": 99, "experienc": 99, "prioiri": 99, "known": 99, "versatil": 99, "label_issues_indic": 99, "213": [99, 103], "218": [99, 103], "152": 99, "170": 99, "214": 99, "164": [99, 102], "191": [99, 103], "206": [99, 103], "115": [99, 103], "201": [99, 103], "174": 99, "150": [99, 101, 103], "169": [99, 108], "151": [99, 103], "168": 99, "precision_scor": 99, "recall_scor": 99, "f1_score": 99, "true_label_issu": 99, "filter_by_list": 99, "718750": [99, 101], "807018": 99, "912": 99, "733333": 99, "800000": 99, "721311": 99, "792793": 99, "908": 99, "676923": 99, "765217": 99, "892": 99, "567901": 99, "702290": 99, "844": 99, "gaug": 99, "label_issues_count": 99, "172": [99, 102], "157": 99, "easiest": 99, "modular": 99, "penalti": 99, "l2": 99, "model3": 99, "cv_pred_probs_1": 99, "cv_pred_probs_2": 99, "cv_pred_probs_3": 99, "label_quality_scores_best": 99, "cv_pred_probs_ensembl": 99, "label_quality_scores_bett": 99, "superior": [99, 105], "timm": 100, "glad": 101, "multiannotator_label": 101, "noisier": 101, "local_data": [101, 102], "true_labels_train": [101, 102], "noise_matrix_bett": 101, "noise_matrix_wors": 101, "transpos": [101, 104], "zfill": 101, "row_na_check": 101, "notna": 101, "a0001": 101, "a0002": 101, "a0003": 101, "a0004": 101, "a0005": 101, "a0006": 101, "a0007": 101, "a0008": 101, "a0009": 101, "a0010": 101, "a0041": 101, "a0042": 101, "a0043": 101, "a0044": 101, "a0045": 101, "a0046": 101, "a0047": 101, "a0048": 101, "a0049": 101, "a0050": 101, "60856743": 101, "41693214": 101, "40908785": 101, "87147629": 101, "64941785": 101, "10774851": 101, "0524466": 101, "71853246": 101, "37169848": 101, "66031048": 101, "multiannotator_util": 101, "crude": 101, "straight": 101, "majority_vote_label": 101, "736118": 101, "757751": 101, "782232": 101, "715565": 101, "824256": 101, "quality_annotator_a0001": 101, "quality_annotator_a0002": 101, "quality_annotator_a0003": 101, "quality_annotator_a0004": 101, "quality_annotator_a0005": 101, "quality_annotator_a0006": 101, "quality_annotator_a0007": 101, "quality_annotator_a0008": 101, "quality_annotator_a0009": 101, "quality_annotator_a0010": 101, "quality_annotator_a0041": 101, "quality_annotator_a0042": 101, "quality_annotator_a0043": 101, "quality_annotator_a0044": 101, "quality_annotator_a0045": 101, "quality_annotator_a0046": 101, "quality_annotator_a0047": 101, "quality_annotator_a0048": 101, "quality_annotator_a0049": 101, "quality_annotator_a0050": 101, "070564": 101, "216078": 101, "119188": 101, "alongisd": 101, "244981": 101, "208333": 101, "295979": 101, "294118": 101, "324197": 101, "310345": 101, "355316": 101, "346154": 101, "439732": 101, "480000": 101, "a0031": 101, "523205": 101, "580645": 101, "a0034": 101, "535313": 101, "607143": 101, "a0021": 101, "606999": 101, "a0015": 101, "609526": 101, "678571": 101, "a0011": 101, "621103": 101, "692308": 101, "improved_consensus_label": 101, "majority_vote_accuraci": 101, "cleanlab_label_accuraci": 101, "8581081081081081": 101, "9797297297297297": 101, "besid": 101, "sorted_consensus_quality_scor": 101, "worst_qual": 101, "better_qu": 101, "worst_quality_accuraci": 101, "better_quality_accuraci": 101, "9893238434163701": 101, "improved_pred_prob": 101, "treat": [101, 102, 106, 108], "analzi": 101, "copyright": 102, "advertis": 102, "violenc": 102, "nsfw": 102, "celeba": 102, "make_multilabel_data": 102, "boxes_coordin": 102, "box_multilabel": 102, "make_multi": 102, "bx1": 102, "by1": 102, "bx2": 102, "by2": 102, "label_list": 102, "ur": 102, "upper": 102, "inidx": 102, "logical_and": 102, "inv_d": 102, "labels_idx": 102, "true_labels_test": 102, "dict_unique_label": 102, "get_color_arrai": 102, "dcolor": 102, "aa4400": 102, "55227f": 102, "55a100": 102, "00ff00": 102, "007f7f": 102, "386b55": 102, "0000ff": 102, "y_onehot": 102, "single_class_label": 102, "stratifi": [102, 105], "kf": 102, "train_index": 102, "test_index": 102, "clf_cv": 102, "x_train_cv": 102, "x_test_cv": 102, "y_train_cv": 102, "y_test_cv": 102, "y_pred_cv": 102, "saw": 102, "num_to_displai": 102, "275": 102, "267": 102, "225": 102, "171": 102, "234": 102, "262": [102, 103], "263": [102, 103], "266": [102, 103], "139": 102, "216": [102, 103, 108], "265": 102, "despit": [102, 108], "suspect": 102, "888": 102, "8224": 102, "9632": 102, "968": 102, "6512": 102, "0444": 102, "774": 102, "labels_binary_format": 102, "labels_list_format": 102, "surround": 103, "scene": 103, "coco": 103, "everydai": 103, "has_label_issu": 103, "objectdetectionbenchmark": 103, "tutorial_obj": 103, "pkl": 103, "example_imag": 103, "_separate_label": 103, "_separate_predict": 103, "begin": 103, "image_path": 103, "rb": 103, "image_to_visu": 103, "seg_map": 103, "334": 103, "bboxes_ignor": 103, "290": 103, "286": 103, "285": 103, "231": 103, "293": 103, "235": 103, "289": 103, "282": 103, "281": 103, "271": 103, "280": 103, "326": 103, "333": 103, "261": 103, "319": 103, "257": 103, "283": 103, "303": 103, "316": 103, "323": 103, "327": 103, "226": 103, "228": 103, "219": 103, "239": 103, "209": 103, "202": 103, "230": 103, "215": 103, "220": 103, "229": 103, "217": [103, 108], "237": 103, "207": [103, 108], "204": 103, "223": 103, "140": 103, "246": 103, "268": 103, "273": 103, "284": 103, "110": 103, "136": 103, "145": 103, "297": 103, "317": 103, "192": 103, "324": 103, "203": 103, "320": 103, "314": 103, "291": 103, "000000481413": 103, "jpg": 103, "42398": 103, "44503": 103, "29968": 103, "21005": 103, "9978472": 103, "forgot": 103, "drew": 103, "label_issue_idx": 103, "num_examples_to_show": 103, "138": 103, "97489622": 103, "70610878": 103, "98764951": 103, "88899237": 103, "99085805": 103, "issue_idx": 103, "95569726e": 103, "03354841e": 103, "57510169e": 103, "58447666e": 103, "39755858e": 103, "issue_to_visu": 103, "000000009483": 103, "95569726168054e": 103, "addition": [103, 107], "visibl": 103, "missmatch": 103, "likelei": 103, "agnost": 103, "vaidat": 103, "inconsist": 103, "000000395701": 103, "033548411774308e": 103, "armchair": 103, "tv": 103, "000000154004": 103, "38300759625496356": 103, "foreground": 103, "000000448410": 103, "0008575101690203273": 103, "crowd": 103, "alon": 103, "resembl": [103, 104], "000000499768": 103, "9748962231208227": 103, "000000521141": 103, "8889923658893665": 103, "000000143931": 103, "9876495074395956": 103, "bonu": 103, "uncov": 103, "irregular": 103, "object_detection_util": 103, "calculate_bounding_box_area": 103, "num_imgs_to_show": 103, "lab_object_count": 103, "pred_object_count": 103, "000000430073": 103, "000000183709": 103, "000000189475": 103, "label_norm": 103, "pred_norm": 103, "area": [103, 107], "lab_area": 103, "pred_area": 103, "lab_area_mean": 103, "lab_area_std": 103, "max_deviation_valu": 103, "max_deviation_class": 103, "deviation_valu": 103, "deviation_class": 103, "mean_area": 103, "std_area": 103, "class_area": 103, "deviations_awai": 103, "max_deviation_index": 103, "num_imgs_to_show_per_class": 103, "class_num": 103, "000000422886": 103, "000000341828": 103, "000000461009": 103, "train_feature_embed": 104, "ood_train_feature_scor": 104, "test_feature_embed": 104, "ood_test_feature_scor": 104, "ood_train_predictions_scor": 104, "train_pred_prob": 104, "ood_test_predictions_scor": 104, "pylab": 104, "rcparam": 104, "baggingclassifi": 104, "therebi": 104, "rescal": 104, "transform_norm": 104, "totensor": 104, "animal_class": 104, "non_animal_class": 104, "animal_idx": 104, "test_idx": 104, "toronto": 104, "edu": 104, "kriz": 104, "170498071": 104, "43633636": 104, "30it": 104, "plot_imag": 104, "visualize_outli": 104, "txt_class": 104, "npimg": 104, "show_label": 104, "data_subset": 104, "resnet50": 104, "corpu": 104, "2048": 104, "embed_imag": 104, "create_model": 104, "strang": 104, "odd": 104, "train_ood_features_scor": 104, "top_train_ood_features_idx": 104, "fun": 104, "negat": 104, "homogen": 104, "bottom_train_ood_features_idx": 104, "test_ood_features_scor": 104, "top_ood_features_idx": 104, "trade": 104, "5th": 104, "percentil": 104, "fifth_percentil": 104, "plt_rang": 104, "train_outlier_scor": 104, "test_outlier_scor": 104, "ood_features_indic": 104, "revisit": 104, "return_invers": 104, "train_feature_embeddings_sc": 104, "test_feature_embeddings_sc": 104, "train_pred_label": 104, "9702": 104, "train_ood_predictions_scor": 104, "test_ood_predictions_scor": 104, "lost": 104, "unsuit": 105, "convention": 105, "aforement": 105, "hypothet": 105, "contrast": 105, "tradit": 105, "disjoint": 105, "out_of_sample_pred_probs_for_a": 105, "out_of_sample_pred_probs_for_b": 105, "out_of_sample_pred_probs_for_c": 105, "out_of_sample_pred_prob": 105, "unsur": 105, "price": 106, "incom": 106, "sensor": 106, "histgradientboostingregressor": 106, "r2_score": 106, "student_grades_r": 106, "final_scor": 106, "true_final_scor": 106, "3d": 106, "mpl_toolkit": 106, "mplot3d": 106, "axes3d": 106, "errors_idx": 106, "add_subplot": 106, "z": 106, "errors_mask": 106, "feature_column": 106, "predicted_column": 106, "x_train_raw": 106, "x_test_raw": 106, "randomforestregressor": 106, "385101": 106, "499503": 106, "698255": 106, "776647": 106, "109373": 106, "170547": 106, "481096": 106, "984759": 106, "645270": 106, "795928": 106, "141": 106, "659": 106, "367": 106, "305": 106, "560": 106, "657": 106, "view_datapoint": 106, "preds_og": 106, "r2_og": 106, "838": 106, "found_label_issu": 106, "preds_cl": 106, "r2_cl": 106, "926": 106, "favorit": 106, "968627e": 106, "228799": 106, "646674e": 106, "402962": 106, "323818e": 106, "952758": 106, "422144e": 106, "456908": 106, "465815e": 106, "753968": 106, "791186e": 106, "110719": 106, "485156e": 106, "670640": 106, "225300e": 106, "749976": 106, "499679e": 106, "947007": 106, "067882e": 106, "648396": 106, "synthia": 107, "imagesegment": 107, "given_mask": 107, "predicted_mask": 107, "set_printopt": [107, 108], "sky": 107, "sidewalk": 107, "veget": 107, "terrain": 107, "rider": 107, "pred_probs_filepath": 107, "1088": 107, "1920": 107, "label_filepath": 107, "synthia_class": 107, "maunal": 107, "100000": 107, "244800": 107, "leftmost": 107, "middl": [107, 108], "infact": 107, "rightmost": 107, "discrep": 107, "3263230": 107, "783381": 107, "275110": 107, "255917": 107, "78225": 107, "55990": 107, "54315": 107, "33591": 107, "24645": 107, "21054": 107, "15045": 107, "14171": 107, "13832": 107, "13498": 107, "11490": 107, "9164": 107, "8769": 107, "6999": 107, "6031": 107, "5011": 107, "mistakenli": 107, "class_issu": 107, "aim": [107, 108], "domin": 107, "bunch": 108, "conll": 108, "2003": 108, "love": 108, "n_i": 108, "optional_list_of_ordered_class_nam": 108, "deepai": 108, "conll2003": 108, "rm": 108, "tokenclassif": 108, "2400": 108, "52e0": 108, "1a01": 108, "1002": 108, "982975": 108, "960k": 108, "959": 108, "94k": 108, "35mb": 108, "inflat": 108, "17045998": 108, "16m": 108, "octet": 108, "26m": 108, "0mb": 108, "bert": 108, "read_npz": 108, "filepath": 108, "corrsespond": 108, "iob2": 108, "given_ent": 108, "entity_map": 108, "readfil": 108, "startswith": 108, "docstart": 108, "isalpha": 108, "isupp": 108, "indices_to_preview": 108, "nsentenc": 108, "eu": 108, "reject": 108, "boycott": 108, "british": 108, "lamb": 108, "00030412": 108, "00023826": 108, "99936208": 108, "00007009": 108, "00002545": 108, "99998795": 108, "00000401": 108, "00000218": 108, "00000455": 108, "00000131": 108, "00000749": 108, "99996115": 108, "00001371": 108, "0000087": 108, "00000895": 108, "99998936": 108, "00000382": 108, "00000178": 108, "00000366": 108, "00000137": 108, "99999101": 108, "00000266": 108, "00000174": 108, "0000035": 108, "00000109": 108, "99998768": 108, "00000482": 108, "00000202": 108, "00000438": 108, "0000011": 108, "00000465": 108, "99996392": 108, "00001105": 108, "0000116": 108, "00000878": 108, "99998671": 108, "00000364": 108, "00000213": 108, "00000472": 108, "00000281": 108, "99999073": 108, "00000211": 108, "00000159": 108, "00000442": 108, "00000115": 108, "peter": 108, "blackburn": 108, "00000358": 108, "00000529": 108, "99995623": 108, "0000129": 108, "0000024": 108, "00001812": 108, "99994141": 108, "00001645": 108, "00002162": 108, "brussel": 108, "1996": 108, "00001172": 108, "00000821": 108, "00004661": 108, "0000618": 108, "99987167": 108, "99999061": 108, "00000201": 108, "00000195": 108, "00000408": 108, "00000135": 108, "2254": 108, "2907": 108, "19392": 108, "9962": 108, "8904": 108, "19303": 108, "12918": 108, "9256": 108, "11855": 108, "18392": 108, "20426": 108, "19402": 108, "14744": 108, "19371": 108, "4645": 108, "10331": 108, "9430": 108, "6143": 108, "18367": 108, "12914": 108, "todai": 108, "weather": 108, "march": 108, "scalfaro": 108, "northern": 108, "himself": 108, "said": 108, "germani": 108, "nastja": 108, "rysich": 108, "north": 108, "spla": 108, "fought": 108, "khartoum": 108, "govern": 108, "south": 108, "1983": 108, "autonomi": 108, "animist": 108, "region": 108, "moslem": 108, "arabis": 108, "mayor": 108, "antonio": 108, "gonzalez": 108, "garcia": 108, "revolutionari": 108, "wednesdai": 108, "troop": 108, "raid": 108, "farm": 108, "stole": 108, "rape": 108, "women": 108, "spring": 108, "chg": 108, "hrw": 108, "12pct": 108, "princ": 108, "photo": 108, "moment": 108, "spokeswoman": 108, "rainier": 108, "told": 108, "reuter": 108, "danila": 108, "carib": 108, "w224": 108, "equip": 108, "radiomet": 108, "earn": 108, "19996": 108, "london": 108, "denom": 108, "sale": 108, "uk": 108, "jp": 108, "fr": 108, "maccabi": 108, "hapoel": 108, "haifa": 108, "tel": 108, "aviv": 108, "hospit": 108, "rever": 108, "roman": 108, "cathol": 108, "nun": 108, "admit": 108, "calcutta": 108, "week": 108, "ago": 108, "fever": 108, "vomit": 108, "allianc": 108, "embattl": 108, "kabul": 108, "salang": 108, "highwai": 108, "mondai": 108, "tuesdai": 108, "suprem": 108, "council": 108, "led": 108, "jumbish": 108, "milli": 108, "movement": 108, "warlord": 108, "abdul": 108, "rashid": 108, "dostum": 108, "dollar": 108, "exchang": 108, "3570": 108, "12049": 108, "born": 108, "1937": 108, "provinc": 108, "anhui": 108, "dai": 108, "shanghai": 108, "citi": 108, "prolif": 108, "author": 108, "teacher": 108, "chines": 108, "16764": 108, "1990": 108, "historian": 108, "alan": 108, "john": 108, "percival": 108, "taylor": 108, "di": 108, "20446": 108, "pace": 108, "bowler": 108, "ian": 108, "harvei": 108, "claim": 108, "victoria": 108, "15514": 108, "cotti": 108, "osc": 108, "foreign": 108, "minist": 108, "7525": 108, "sultan": 108, "specter": 108, "crown": 108, "abdullah": 108, "defenc": 108, "aviat": 108, "jeddah": 108, "saudi": 108, "agenc": 108, "2288": 108, "hi": 108, "customari": 108, "outfit": 108, "champion": 108, "damp": 108, "scalp": 108, "canada": 108, "reign": 108, "olymp": 108, "donovan": 108, "bailei": 108, "1992": 108, "linford": 108, "christi": 108, "britain": 108, "1984": 108, "1988": 108, "carl": 108, "lewi": 108, "ambigi": 108, "punctuat": 108, "chicago": 108, "digest": 108, "philadelphia": 108, "usda": 108, "york": 108, "token_issu": 108, "471": 108, "kean": 108, "year": 108, "contract": 108, "manchest": 108, "19072": 108, "societi": 108, "bite": 108, "deliv": 108, "19910": 108, "father": 108, "clarenc": 108, "woolmer": 108, "renam": 108, "uttar": 108, "pradesh": 108, "india": 108, "ranji": 108, "trophi": 108, "nation": 108, "championship": 108, "captain": 108, "1949": 108, "15658": 108, "19879": 108, "iii": 108, "brian": 108, "shimer": 108, "randi": 108, "jone": 108, "19104": 108}, "objects": {"cleanlab": [[0, 0, 0, "-", "benchmarking"], [2, 0, 0, "-", "classification"], [3, 0, 0, "-", "count"], [4, 0, 0, "-", "data_valuation"], [12, 0, 0, "-", "datalab"], [37, 0, 0, "-", "dataset"], [40, 0, 0, "-", "experimental"], [44, 0, 0, "-", "filter"], [45, 0, 0, "-", "internal"], [59, 0, 0, "-", "models"], [61, 0, 0, "-", "multiannotator"], [64, 0, 0, "-", "multilabel_classification"], [67, 0, 0, "-", "object_detection"], [70, 0, 0, "-", "outlier"], [71, 0, 0, "-", "rank"], [72, 0, 0, "-", "regression"], [76, 0, 0, "-", "segmentation"], [80, 0, 0, "-", "token_classification"]], "cleanlab.benchmarking": [[1, 0, 0, "-", "noise_generation"]], "cleanlab.benchmarking.noise_generation": [[1, 1, 1, "", "generate_n_rand_probabilities_that_sum_to_m"], [1, 1, 1, "", "generate_noise_matrix_from_trace"], [1, 1, 1, "", "generate_noisy_labels"], [1, 1, 1, "", "noise_matrix_is_valid"], [1, 1, 1, "", "randomly_distribute_N_balls_into_K_bins"]], "cleanlab.classification": [[2, 2, 1, "", "CleanLearning"]], "cleanlab.classification.CleanLearning": [[2, 3, 1, "", "__init_subclass__"], [2, 3, 1, "", "find_label_issues"], [2, 3, 1, "", "fit"], [2, 3, 1, "", "get_label_issues"], [2, 3, 1, "", "get_metadata_routing"], [2, 3, 1, "", "get_params"], [2, 3, 1, "", "predict"], [2, 3, 1, "", "predict_proba"], [2, 3, 1, "", "save_space"], [2, 3, 1, "", "score"], [2, 3, 1, "", "set_fit_request"], [2, 3, 1, "", "set_params"], [2, 3, 1, "", "set_score_request"]], "cleanlab.count": [[3, 1, 1, "", "calibrate_confident_joint"], [3, 1, 1, "", "compute_confident_joint"], [3, 1, 1, "", "estimate_confident_joint_and_cv_pred_proba"], [3, 1, 1, "", "estimate_cv_predicted_probabilities"], [3, 1, 1, "", "estimate_joint"], [3, 1, 1, "", "estimate_latent"], [3, 1, 1, "", "estimate_noise_matrices"], [3, 1, 1, "", "estimate_py_and_noise_matrices_from_probabilities"], [3, 1, 1, "", "estimate_py_noise_matrices_and_cv_pred_proba"], [3, 1, 1, "", "get_confident_thresholds"], [3, 1, 1, "", "num_label_issues"]], "cleanlab.data_valuation": [[4, 1, 1, "", "data_shapley_knn"]], "cleanlab.datalab": [[5, 0, 0, "-", "datalab"], [16, 0, 0, "-", "internal"]], "cleanlab.datalab.datalab": [[5, 2, 1, "", "Datalab"]], "cleanlab.datalab.datalab.Datalab": [[5, 4, 1, "", "class_names"], [5, 3, 1, "", "find_issues"], [5, 3, 1, "", "get_info"], [5, 3, 1, "", "get_issue_summary"], [5, 3, 1, "", "get_issues"], [5, 4, 1, "", "has_labels"], [5, 4, 1, "", "info"], [5, 4, 1, "", "issue_summary"], [5, 4, 1, "", "issues"], [5, 4, 1, "", "labels"], [5, 3, 1, "", "list_default_issue_types"], [5, 3, 1, "", "list_possible_issue_types"], [5, 3, 1, "", "load"], [5, 3, 1, "", "report"], [5, 3, 1, "", "save"]], "cleanlab.datalab.internal": [[13, 0, 0, "-", "data"], [14, 0, 0, "-", "data_issues"], [17, 0, 0, "-", "issue_finder"], [15, 0, 0, "-", "issue_manager_factory"], [33, 0, 0, "-", "model_outputs"], [34, 0, 0, "-", "report"], [35, 0, 0, "-", "task"]], "cleanlab.datalab.internal.data": [[13, 2, 1, "", "Data"], [13, 5, 1, "", "DataFormatError"], [13, 5, 1, "", "DatasetDictError"], [13, 5, 1, "", "DatasetLoadError"], [13, 2, 1, "", "Label"], [13, 2, 1, "", "MultiClass"], [13, 2, 1, "", "MultiLabel"]], "cleanlab.datalab.internal.data.Data": [[13, 4, 1, "", "class_names"], [13, 4, 1, "", "has_labels"]], "cleanlab.datalab.internal.data.DataFormatError": [[13, 3, 1, "", "add_note"], [13, 6, 1, "", "args"], [13, 3, 1, "", "with_traceback"]], "cleanlab.datalab.internal.data.DatasetDictError": [[13, 3, 1, "", "add_note"], [13, 6, 1, "", "args"], [13, 3, 1, "", "with_traceback"]], "cleanlab.datalab.internal.data.DatasetLoadError": [[13, 3, 1, "", "add_note"], [13, 6, 1, "", "args"], [13, 3, 1, "", "with_traceback"]], "cleanlab.datalab.internal.data.Label": [[13, 4, 1, "", "class_names"], [13, 4, 1, "", "is_available"]], "cleanlab.datalab.internal.data.MultiClass": [[13, 4, 1, "", "class_names"], [13, 4, 1, "", "is_available"]], "cleanlab.datalab.internal.data.MultiLabel": [[13, 4, 1, "", "class_names"], [13, 4, 1, "", "is_available"]], "cleanlab.datalab.internal.data_issues": [[14, 2, 1, "", "DataIssues"], [14, 1, 1, "", "get_data_statistics"]], "cleanlab.datalab.internal.data_issues.DataIssues": [[14, 3, 1, "", "collect_issues_from_imagelab"], [14, 3, 1, "", "collect_issues_from_issue_manager"], [14, 3, 1, "", "collect_statistics"], [14, 3, 1, "", "get_info"], [14, 3, 1, "", "get_issue_summary"], [14, 3, 1, "", "get_issues"], [14, 6, 1, "", "info"], [14, 6, 1, "", "issue_summary"], [14, 6, 1, "", "issues"], [14, 3, 1, "", "set_health_score"], [14, 4, 1, "", "statistics"]], "cleanlab.datalab.internal.issue_finder": [[17, 2, 1, "", "IssueFinder"]], "cleanlab.datalab.internal.issue_finder.IssueFinder": [[17, 3, 1, "", "find_issues"], [17, 3, 1, "", "get_available_issue_types"]], "cleanlab.datalab.internal.issue_manager": [[19, 0, 0, "-", "data_valuation"], [20, 0, 0, "-", "duplicate"], [21, 0, 0, "-", "imbalance"], [23, 0, 0, "-", "issue_manager"], [24, 0, 0, "-", "label"], [27, 0, 0, "-", "noniid"], [28, 0, 0, "-", "null"], [29, 0, 0, "-", "outlier"], [32, 0, 0, "-", "underperforming_group"]], "cleanlab.datalab.internal.issue_manager.data_valuation": [[19, 2, 1, "", "DataValuationIssueManager"]], "cleanlab.datalab.internal.issue_manager.data_valuation.DataValuationIssueManager": [[19, 6, 1, "", "DEFAULT_THRESHOLD"], [19, 3, 1, "", "collect_info"], [19, 6, 1, "", "description"], [19, 3, 1, "", "find_issues"], [19, 6, 1, "", "info"], [19, 6, 1, "", "issue_name"], [19, 6, 1, "", "issue_score_key"], [19, 6, 1, "", "issues"], [19, 3, 1, "", "make_summary"], [19, 3, 1, "", "report"], [19, 6, 1, "", "summary"], [19, 6, 1, "", "verbosity_levels"]], "cleanlab.datalab.internal.issue_manager.duplicate": [[20, 2, 1, "", "NearDuplicateIssueManager"]], "cleanlab.datalab.internal.issue_manager.duplicate.NearDuplicateIssueManager": [[20, 3, 1, "", "collect_info"], [20, 6, 1, "", "description"], [20, 3, 1, "", "find_issues"], [20, 6, 1, "", "info"], [20, 6, 1, "", "issue_name"], [20, 6, 1, "", "issue_score_key"], [20, 6, 1, "", "issues"], [20, 3, 1, "", "make_summary"], [20, 6, 1, "", "near_duplicate_sets"], [20, 3, 1, "", "report"], [20, 6, 1, "", "summary"], [20, 6, 1, "", "verbosity_levels"]], "cleanlab.datalab.internal.issue_manager.imbalance": [[21, 2, 1, "", "ClassImbalanceIssueManager"]], "cleanlab.datalab.internal.issue_manager.imbalance.ClassImbalanceIssueManager": [[21, 3, 1, "", "collect_info"], [21, 6, 1, "", "description"], [21, 3, 1, "", "find_issues"], [21, 6, 1, "", "info"], [21, 6, 1, "", "issue_name"], [21, 6, 1, "", "issue_score_key"], [21, 6, 1, "", "issues"], [21, 3, 1, "", "make_summary"], [21, 3, 1, "", "report"], [21, 6, 1, "", "summary"], [21, 6, 1, "", "verbosity_levels"]], "cleanlab.datalab.internal.issue_manager.issue_manager": [[23, 2, 1, "", "IssueManager"]], "cleanlab.datalab.internal.issue_manager.issue_manager.IssueManager": [[23, 3, 1, "", "collect_info"], [23, 6, 1, "", "description"], [23, 3, 1, "", "find_issues"], [23, 6, 1, "", "info"], [23, 6, 1, "", "issue_name"], [23, 6, 1, "", "issue_score_key"], [23, 6, 1, "", "issues"], [23, 3, 1, "", "make_summary"], [23, 3, 1, "", "report"], [23, 6, 1, "", "summary"], [23, 6, 1, "", "verbosity_levels"]], "cleanlab.datalab.internal.issue_manager.label": [[24, 2, 1, "", "LabelIssueManager"]], "cleanlab.datalab.internal.issue_manager.label.LabelIssueManager": [[24, 3, 1, "", "collect_info"], [24, 6, 1, "", "description"], [24, 3, 1, "", "find_issues"], [24, 3, 1, "", "get_health_summary"], [24, 6, 1, "", "health_summary_parameters"], [24, 6, 1, "", "info"], [24, 6, 1, "", "issue_name"], [24, 6, 1, "", "issue_score_key"], [24, 6, 1, "", "issues"], [24, 3, 1, "", "make_summary"], [24, 3, 1, "", "report"], [24, 6, 1, "", "summary"], [24, 6, 1, "", "verbosity_levels"]], "cleanlab.datalab.internal.issue_manager.multilabel": [[26, 0, 0, "-", "label"]], "cleanlab.datalab.internal.issue_manager.multilabel.label": [[26, 2, 1, "", "MultilabelIssueManager"]], "cleanlab.datalab.internal.issue_manager.multilabel.label.MultilabelIssueManager": [[26, 3, 1, "", "collect_info"], [26, 6, 1, "", "description"], [26, 3, 1, "", "find_issues"], [26, 6, 1, "", "info"], [26, 6, 1, "", "issue_name"], [26, 6, 1, "", "issue_score_key"], [26, 6, 1, "", "issues"], [26, 3, 1, "", "make_summary"], [26, 3, 1, "", "report"], [26, 6, 1, "", "summary"], [26, 6, 1, "", "verbosity_levels"]], "cleanlab.datalab.internal.issue_manager.noniid": [[27, 2, 1, "", "NonIIDIssueManager"], [27, 1, 1, "", "simplified_kolmogorov_smirnov_test"]], "cleanlab.datalab.internal.issue_manager.noniid.NonIIDIssueManager": [[27, 3, 1, "", "collect_info"], [27, 6, 1, "", "description"], [27, 3, 1, "", "find_issues"], [27, 6, 1, "", "info"], [27, 6, 1, "", "issue_name"], [27, 6, 1, "", "issue_score_key"], [27, 6, 1, "", "issues"], [27, 3, 1, "", "make_summary"], [27, 3, 1, "", "report"], [27, 6, 1, "", "summary"], [27, 6, 1, "", "verbosity_levels"]], "cleanlab.datalab.internal.issue_manager.null": [[28, 2, 1, "", "NullIssueManager"]], "cleanlab.datalab.internal.issue_manager.null.NullIssueManager": [[28, 3, 1, "", "collect_info"], [28, 6, 1, "", "description"], [28, 3, 1, "", "find_issues"], [28, 6, 1, "", "info"], [28, 6, 1, "", "issue_name"], [28, 6, 1, "", "issue_score_key"], [28, 6, 1, "", "issues"], [28, 3, 1, "", "make_summary"], [28, 3, 1, "", "report"], [28, 6, 1, "", "summary"], [28, 6, 1, "", "verbosity_levels"]], "cleanlab.datalab.internal.issue_manager.outlier": [[29, 2, 1, "", "OutlierIssueManager"]], "cleanlab.datalab.internal.issue_manager.outlier.OutlierIssueManager": [[29, 6, 1, "", "DEFAULT_THRESHOLDS"], [29, 3, 1, "", "collect_info"], [29, 6, 1, "", "description"], [29, 3, 1, "", "find_issues"], [29, 6, 1, "", "info"], [29, 6, 1, "", "issue_name"], [29, 6, 1, "", "issue_score_key"], [29, 6, 1, "", "issues"], [29, 3, 1, "", "make_summary"], [29, 6, 1, "", "metric"], [29, 6, 1, "", "ood"], [29, 3, 1, "", "report"], [29, 6, 1, "", "summary"], [29, 6, 1, "", "verbosity_levels"]], "cleanlab.datalab.internal.issue_manager.regression": [[31, 0, 0, "-", "label"]], "cleanlab.datalab.internal.issue_manager.regression.label": [[31, 2, 1, "", "RegressionLabelIssueManager"], [31, 1, 1, "", "find_issues_with_features"], [31, 1, 1, "", "find_issues_with_predictions"]], "cleanlab.datalab.internal.issue_manager.regression.label.RegressionLabelIssueManager": [[31, 3, 1, "", "collect_info"], [31, 6, 1, "", "description"], [31, 3, 1, "", "find_issues"], [31, 6, 1, "", "info"], [31, 6, 1, "", "issue_name"], [31, 6, 1, "", "issue_score_key"], [31, 6, 1, "", "issues"], [31, 3, 1, "", "make_summary"], [31, 3, 1, "", "report"], [31, 6, 1, "", "summary"], [31, 6, 1, "", "verbosity_levels"]], "cleanlab.datalab.internal.issue_manager.underperforming_group": [[32, 2, 1, "", "UnderperformingGroupIssueManager"]], "cleanlab.datalab.internal.issue_manager.underperforming_group.UnderperformingGroupIssueManager": [[32, 6, 1, "", "NO_UNDERPERFORMING_CLUSTER_ID"], [32, 6, 1, "", "OUTLIER_CLUSTER_LABELS"], [32, 3, 1, "", "collect_info"], [32, 6, 1, "", "description"], [32, 3, 1, "", "filter_cluster_ids"], [32, 3, 1, "", "find_issues"], [32, 3, 1, "", "get_underperforming_clusters"], [32, 6, 1, "", "info"], [32, 6, 1, "", "issue_name"], [32, 6, 1, "", "issue_score_key"], [32, 6, 1, "", "issues"], [32, 3, 1, "", "make_summary"], [32, 3, 1, "", "perform_clustering"], [32, 3, 1, "", "report"], [32, 6, 1, "", "summary"], [32, 6, 1, "", "verbosity_levels"]], "cleanlab.datalab.internal.issue_manager_factory": [[15, 7, 1, "", "REGISTRY"], [15, 1, 1, "", "list_default_issue_types"], [15, 1, 1, "", "list_possible_issue_types"], [15, 1, 1, "", "register"]], "cleanlab.datalab.internal.model_outputs": [[33, 2, 1, "", "ModelOutput"], [33, 2, 1, "", "MultiClassPredProbs"], [33, 2, 1, "", "MultiLabelPredProbs"], [33, 2, 1, "", "RegressionPredictions"]], "cleanlab.datalab.internal.model_outputs.ModelOutput": [[33, 3, 1, "", "collect"], [33, 6, 1, "", "data"], [33, 3, 1, "", "validate"]], "cleanlab.datalab.internal.model_outputs.MultiClassPredProbs": [[33, 6, 1, "", "argument"], [33, 3, 1, "", "collect"], [33, 6, 1, "", "data"], [33, 3, 1, "", "validate"]], "cleanlab.datalab.internal.model_outputs.MultiLabelPredProbs": [[33, 6, 1, "", "argument"], [33, 3, 1, "", "collect"], [33, 6, 1, "", "data"], [33, 3, 1, "", "validate"]], "cleanlab.datalab.internal.model_outputs.RegressionPredictions": [[33, 6, 1, "", "argument"], [33, 3, 1, "", "collect"], [33, 6, 1, "", "data"], [33, 3, 1, "", "validate"]], "cleanlab.datalab.internal.report": [[34, 2, 1, "", "Reporter"]], "cleanlab.datalab.internal.report.Reporter": [[34, 3, 1, "", "get_report"], [34, 3, 1, "", "report"]], "cleanlab.datalab.internal.task": [[35, 2, 1, "", "Task"]], "cleanlab.datalab.internal.task.Task": [[35, 6, 1, "", "CLASSIFICATION"], [35, 6, 1, "", "MULTILABEL"], [35, 6, 1, "", "REGRESSION"], [35, 3, 1, "", "__contains__"], [35, 3, 1, "", "__getitem__"], [35, 3, 1, "", "__iter__"], [35, 3, 1, "", "__len__"], [35, 3, 1, "", "from_str"], [35, 4, 1, "", "is_classification"], [35, 4, 1, "", "is_multilabel"], [35, 4, 1, "", "is_regression"]], "cleanlab.dataset": [[37, 1, 1, "", "find_overlapping_classes"], [37, 1, 1, "", "health_summary"], [37, 1, 1, "", "overall_label_health_score"], [37, 1, 1, "", "rank_classes_by_label_quality"]], "cleanlab.experimental": [[38, 0, 0, "-", "cifar_cnn"], [39, 0, 0, "-", "coteaching"], [41, 0, 0, "-", "label_issues_batched"], [42, 0, 0, "-", "mnist_pytorch"], [43, 0, 0, "-", "span_classification"]], "cleanlab.experimental.cifar_cnn": [[38, 2, 1, "", "CNN"], [38, 1, 1, "", "call_bn"]], "cleanlab.experimental.cifar_cnn.CNN": [[38, 6, 1, "", "T_destination"], [38, 3, 1, "", "__call__"], [38, 3, 1, "", "add_module"], [38, 3, 1, "", "apply"], [38, 3, 1, "", "bfloat16"], [38, 3, 1, "", "buffers"], [38, 6, 1, "", "call_super_init"], [38, 3, 1, "", "children"], [38, 3, 1, "", "compile"], [38, 3, 1, "", "cpu"], [38, 3, 1, "", "cuda"], [38, 3, 1, "", "double"], [38, 6, 1, "", "dump_patches"], [38, 3, 1, "", "eval"], [38, 3, 1, "", "extra_repr"], [38, 3, 1, "", "float"], [38, 3, 1, "id0", "forward"], [38, 3, 1, "", "get_buffer"], [38, 3, 1, "", "get_extra_state"], [38, 3, 1, "", "get_parameter"], [38, 3, 1, "", "get_submodule"], [38, 3, 1, "", "half"], [38, 3, 1, "", "ipu"], [38, 3, 1, "", "load_state_dict"], [38, 3, 1, "", "modules"], [38, 3, 1, "", "named_buffers"], [38, 3, 1, "", "named_children"], [38, 3, 1, "", "named_modules"], [38, 3, 1, "", "named_parameters"], [38, 3, 1, "", "parameters"], [38, 3, 1, "", "register_backward_hook"], [38, 3, 1, "", "register_buffer"], [38, 3, 1, "", "register_forward_hook"], [38, 3, 1, "", "register_forward_pre_hook"], [38, 3, 1, "", "register_full_backward_hook"], [38, 3, 1, "", "register_full_backward_pre_hook"], [38, 3, 1, "", "register_load_state_dict_post_hook"], [38, 3, 1, "", "register_module"], [38, 3, 1, "", "register_parameter"], [38, 3, 1, "", "register_state_dict_pre_hook"], [38, 3, 1, "", "requires_grad_"], [38, 3, 1, "", "set_extra_state"], [38, 3, 1, "", "share_memory"], [38, 3, 1, "", "state_dict"], [38, 3, 1, "", "to"], [38, 3, 1, "", "to_empty"], [38, 3, 1, "", "train"], [38, 6, 1, "", "training"], [38, 3, 1, "", "type"], [38, 3, 1, "", "xpu"], [38, 3, 1, "", "zero_grad"]], "cleanlab.experimental.coteaching": [[39, 1, 1, "", "adjust_learning_rate"], [39, 1, 1, "", "evaluate"], [39, 1, 1, "", "forget_rate_scheduler"], [39, 1, 1, "", "initialize_lr_scheduler"], [39, 1, 1, "", "loss_coteaching"], [39, 1, 1, "", "train"]], "cleanlab.experimental.label_issues_batched": [[41, 2, 1, "", "LabelInspector"], [41, 7, 1, "", "adj_confident_thresholds_shared"], [41, 1, 1, "", "find_label_issues_batched"], [41, 7, 1, "", "labels_shared"], [41, 7, 1, "", "pred_probs_shared"], [41, 1, 1, "", "split_arr"]], "cleanlab.experimental.label_issues_batched.LabelInspector": [[41, 3, 1, "", "get_confident_thresholds"], [41, 3, 1, "", "get_label_issues"], [41, 3, 1, "", "get_num_issues"], [41, 3, 1, "", "get_quality_scores"], [41, 3, 1, "", "score_label_quality"], [41, 3, 1, "", "update_confident_thresholds"]], "cleanlab.experimental.mnist_pytorch": [[42, 2, 1, "", "CNN"], [42, 2, 1, "", "SimpleNet"], [42, 1, 1, "", "get_mnist_dataset"], [42, 1, 1, "", "get_sklearn_digits_dataset"]], "cleanlab.experimental.mnist_pytorch.CNN": [[42, 3, 1, "", "__init_subclass__"], [42, 6, 1, "", "batch_size"], [42, 6, 1, "", "dataset"], [42, 6, 1, "", "epochs"], [42, 3, 1, "id0", "fit"], [42, 3, 1, "", "get_metadata_routing"], [42, 3, 1, "", "get_params"], [42, 6, 1, "", "loader"], [42, 6, 1, "", "log_interval"], [42, 6, 1, "", "lr"], [42, 6, 1, "", "momentum"], [42, 6, 1, "", "no_cuda"], [42, 3, 1, "id1", "predict"], [42, 3, 1, "id4", "predict_proba"], [42, 6, 1, "", "seed"], [42, 3, 1, "", "set_fit_request"], [42, 3, 1, "", "set_params"], [42, 3, 1, "", "set_predict_proba_request"], [42, 3, 1, "", "set_predict_request"], [42, 6, 1, "", "test_batch_size"]], "cleanlab.experimental.mnist_pytorch.SimpleNet": [[42, 6, 1, "", "T_destination"], [42, 3, 1, "", "__call__"], [42, 3, 1, "", "add_module"], [42, 3, 1, "", "apply"], [42, 3, 1, "", "bfloat16"], [42, 3, 1, "", "buffers"], [42, 6, 1, "", "call_super_init"], [42, 3, 1, "", "children"], [42, 3, 1, "", "compile"], [42, 3, 1, "", "cpu"], [42, 3, 1, "", "cuda"], [42, 3, 1, "", "double"], [42, 6, 1, "", "dump_patches"], [42, 3, 1, "", "eval"], [42, 3, 1, "", "extra_repr"], [42, 3, 1, "", "float"], [42, 3, 1, "", "forward"], [42, 3, 1, "", "get_buffer"], [42, 3, 1, "", "get_extra_state"], [42, 3, 1, "", "get_parameter"], [42, 3, 1, "", "get_submodule"], [42, 3, 1, "", "half"], [42, 3, 1, "", "ipu"], [42, 3, 1, "", "load_state_dict"], [42, 3, 1, "", "modules"], [42, 3, 1, "", "named_buffers"], [42, 3, 1, "", "named_children"], [42, 3, 1, "", "named_modules"], [42, 3, 1, "", "named_parameters"], [42, 3, 1, "", "parameters"], [42, 3, 1, "", "register_backward_hook"], [42, 3, 1, "", "register_buffer"], [42, 3, 1, "", "register_forward_hook"], [42, 3, 1, "", "register_forward_pre_hook"], [42, 3, 1, "", "register_full_backward_hook"], [42, 3, 1, "", "register_full_backward_pre_hook"], [42, 3, 1, "", "register_load_state_dict_post_hook"], [42, 3, 1, "", "register_module"], [42, 3, 1, "", "register_parameter"], [42, 3, 1, "", "register_state_dict_pre_hook"], [42, 3, 1, "", "requires_grad_"], [42, 3, 1, "", "set_extra_state"], [42, 3, 1, "", "share_memory"], [42, 3, 1, "", "state_dict"], [42, 3, 1, "", "to"], [42, 3, 1, "", "to_empty"], [42, 3, 1, "", "train"], [42, 6, 1, "", "training"], [42, 3, 1, "", "type"], [42, 3, 1, "", "xpu"], [42, 3, 1, "", "zero_grad"]], "cleanlab.experimental.span_classification": [[43, 1, 1, "", "display_issues"], [43, 1, 1, "", "find_label_issues"], [43, 1, 1, "", "get_label_quality_scores"]], "cleanlab.filter": [[44, 1, 1, "", "find_label_issues"], [44, 1, 1, "", "find_label_issues_using_argmax_confusion_matrix"], [44, 1, 1, "", "find_predicted_neq_given"], [44, 7, 1, "", "pred_probs_by_class"], [44, 7, 1, "", "prune_count_matrix_cols"]], "cleanlab.internal": [[46, 0, 0, "-", "label_quality_utils"], [47, 0, 0, "-", "latent_algebra"], [48, 0, 0, "-", "multiannotator_utils"], [49, 0, 0, "-", "multilabel_scorer"], [50, 0, 0, "-", "multilabel_utils"], [51, 0, 0, "-", "neighbor"], [55, 0, 0, "-", "outlier"], [56, 0, 0, "-", "token_classification_utils"], [57, 0, 0, "-", "util"], [58, 0, 0, "-", "validation"]], "cleanlab.internal.label_quality_utils": [[46, 1, 1, "", "get_normalized_entropy"]], "cleanlab.internal.latent_algebra": [[47, 1, 1, "", "compute_inv_noise_matrix"], [47, 1, 1, "", "compute_noise_matrix_from_inverse"], [47, 1, 1, "", "compute_ps_py_inv_noise_matrix"], [47, 1, 1, "", "compute_py"], [47, 1, 1, "", "compute_py_inv_noise_matrix"], [47, 1, 1, "", "compute_pyx"]], "cleanlab.internal.multiannotator_utils": [[48, 1, 1, "", "assert_valid_inputs_multiannotator"], [48, 1, 1, "", "assert_valid_pred_probs"], [48, 1, 1, "", "check_consensus_label_classes"], [48, 1, 1, "", "compute_soft_cross_entropy"], [48, 1, 1, "", "find_best_temp_scaler"], [48, 1, 1, "", "format_multiannotator_labels"], [48, 1, 1, "", "temp_scale_pred_probs"]], "cleanlab.internal.multilabel_scorer": [[49, 2, 1, "", "Aggregator"], [49, 2, 1, "", "ClassLabelScorer"], [49, 2, 1, "", "MultilabelScorer"], [49, 1, 1, "", "exponential_moving_average"], [49, 1, 1, "", "get_cross_validated_multilabel_pred_probs"], [49, 1, 1, "", "get_label_quality_scores"], [49, 1, 1, "", "multilabel_py"], [49, 1, 1, "", "softmin"]], "cleanlab.internal.multilabel_scorer.Aggregator": [[49, 3, 1, "", "__call__"], [49, 6, 1, "", "possible_methods"]], "cleanlab.internal.multilabel_scorer.ClassLabelScorer": [[49, 6, 1, "", "CONFIDENCE_WEIGHTED_ENTROPY"], [49, 6, 1, "", "NORMALIZED_MARGIN"], [49, 6, 1, "", "SELF_CONFIDENCE"], [49, 3, 1, "", "__call__"], [49, 3, 1, "", "__contains__"], [49, 3, 1, "", "__getitem__"], [49, 3, 1, "", "__iter__"], [49, 3, 1, "", "__len__"], [49, 3, 1, "", "from_str"]], "cleanlab.internal.multilabel_scorer.MultilabelScorer": [[49, 3, 1, "", "__call__"], [49, 3, 1, "", "aggregate"], [49, 3, 1, "", "get_class_label_quality_scores"]], "cleanlab.internal.multilabel_utils": [[50, 1, 1, "", "get_onehot_num_classes"], [50, 1, 1, "", "int2onehot"], [50, 1, 1, "", "onehot2int"], [50, 1, 1, "", "stack_complement"]], "cleanlab.internal.neighbor": [[52, 0, 0, "-", "knn_graph"], [53, 0, 0, "-", "metric"], [54, 0, 0, "-", "search"]], "cleanlab.internal.neighbor.knn_graph": [[52, 7, 1, "", "DEFAULT_K"], [52, 1, 1, "", "construct_knn_graph_from_index"], [52, 1, 1, "", "correct_knn_distances_and_indices"], [52, 1, 1, "", "correct_knn_distances_and_indices_with_exact_duplicate_sets_inplace"], [52, 1, 1, "", "correct_knn_graph"], [52, 1, 1, "", "create_knn_graph_and_index"], [52, 1, 1, "", "features_to_knn"]], "cleanlab.internal.neighbor.metric": [[53, 7, 1, "", "HIGH_DIMENSION_CUTOFF"], [53, 7, 1, "", "ROW_COUNT_CUTOFF"], [53, 1, 1, "", "decide_default_metric"], [53, 1, 1, "", "decide_euclidean_metric"]], "cleanlab.internal.neighbor.search": [[54, 1, 1, "", "construct_knn"]], "cleanlab.internal.outlier": [[55, 1, 1, "", "correct_precision_errors"], [55, 1, 1, "", "transform_distances_to_scores"]], "cleanlab.internal.token_classification_utils": [[56, 1, 1, "", "color_sentence"], [56, 1, 1, "", "filter_sentence"], [56, 1, 1, "", "get_sentence"], [56, 1, 1, "", "mapping"], [56, 1, 1, "", "merge_probs"], [56, 1, 1, "", "process_token"]], "cleanlab.internal.util": [[57, 1, 1, "", "append_extra_datapoint"], [57, 1, 1, "", "clip_noise_rates"], [57, 1, 1, "", "clip_values"], [57, 1, 1, "", "compress_int_array"], [57, 1, 1, "", "confusion_matrix"], [57, 1, 1, "", "csr_vstack"], [57, 1, 1, "", "estimate_pu_f1"], [57, 1, 1, "", "extract_indices_tf"], [57, 1, 1, "", "force_two_dimensions"], [57, 1, 1, "", "format_labels"], [57, 1, 1, "", "get_missing_classes"], [57, 1, 1, "", "get_num_classes"], [57, 1, 1, "", "get_unique_classes"], [57, 1, 1, "", "is_tensorflow_dataset"], [57, 1, 1, "", "is_torch_dataset"], [57, 1, 1, "", "num_unique_classes"], [57, 1, 1, "", "print_inverse_noise_matrix"], [57, 1, 1, "", "print_joint_matrix"], [57, 1, 1, "", "print_noise_matrix"], [57, 1, 1, "", "print_square_matrix"], [57, 1, 1, "", "remove_noise_from_class"], [57, 1, 1, "", "round_preserving_row_totals"], [57, 1, 1, "", "round_preserving_sum"], [57, 1, 1, "", "smart_display_dataframe"], [57, 1, 1, "", "subset_X_y"], [57, 1, 1, "", "subset_data"], [57, 1, 1, "", "subset_labels"], [57, 1, 1, "", "train_val_split"], [57, 1, 1, "", "unshuffle_tensorflow_dataset"], [57, 1, 1, "", "value_counts"], [57, 1, 1, "", "value_counts_fill_missing_classes"]], "cleanlab.internal.validation": [[58, 1, 1, "", "assert_indexing_works"], [58, 1, 1, "", "assert_nonempty_input"], [58, 1, 1, "", "assert_valid_class_labels"], [58, 1, 1, "", "assert_valid_inputs"], [58, 1, 1, "", "labels_to_array"], [58, 1, 1, "", "labels_to_list_multilabel"]], "cleanlab.models": [[60, 0, 0, "-", "keras"]], "cleanlab.models.keras": [[60, 2, 1, "", "KerasWrapperModel"], [60, 2, 1, "", "KerasWrapperSequential"]], "cleanlab.models.keras.KerasWrapperModel": [[60, 3, 1, "", "fit"], [60, 3, 1, "", "get_params"], [60, 3, 1, "", "predict"], [60, 3, 1, "", "predict_proba"], [60, 3, 1, "", "set_params"], [60, 3, 1, "", "summary"]], "cleanlab.models.keras.KerasWrapperSequential": [[60, 3, 1, "", "fit"], [60, 3, 1, "", "get_params"], [60, 3, 1, "", "predict"], [60, 3, 1, "", "predict_proba"], [60, 3, 1, "", "set_params"], [60, 3, 1, "", "summary"]], "cleanlab.multiannotator": [[61, 1, 1, "", "convert_long_to_wide_dataset"], [61, 1, 1, "", "get_active_learning_scores"], [61, 1, 1, "", "get_active_learning_scores_ensemble"], [61, 1, 1, "", "get_label_quality_multiannotator"], [61, 1, 1, "", "get_label_quality_multiannotator_ensemble"], [61, 1, 1, "", "get_majority_vote_label"]], "cleanlab.multilabel_classification": [[62, 0, 0, "-", "dataset"], [63, 0, 0, "-", "filter"], [65, 0, 0, "-", "rank"]], "cleanlab.multilabel_classification.dataset": [[62, 1, 1, "", "common_multilabel_issues"], [62, 1, 1, "", "multilabel_health_summary"], [62, 1, 1, "", "overall_multilabel_health_score"], [62, 1, 1, "", "rank_classes_by_multilabel_quality"]], "cleanlab.multilabel_classification.filter": [[63, 1, 1, "", "find_label_issues"], [63, 1, 1, "", "find_multilabel_issues_per_class"]], "cleanlab.multilabel_classification.rank": [[65, 1, 1, "", "get_label_quality_scores"], [65, 1, 1, "", "get_label_quality_scores_per_class"]], "cleanlab.object_detection": [[66, 0, 0, "-", "filter"], [68, 0, 0, "-", "rank"], [69, 0, 0, "-", "summary"]], "cleanlab.object_detection.filter": [[66, 1, 1, "", "find_label_issues"]], "cleanlab.object_detection.rank": [[68, 1, 1, "", "compute_badloc_box_scores"], [68, 1, 1, "", "compute_overlooked_box_scores"], [68, 1, 1, "", "compute_swap_box_scores"], [68, 1, 1, "", "get_label_quality_scores"], [68, 1, 1, "", "issues_from_scores"], [68, 1, 1, "", "pool_box_scores_per_image"]], "cleanlab.object_detection.summary": [[69, 1, 1, "", "bounding_box_size_distribution"], [69, 1, 1, "", "calculate_per_class_metrics"], [69, 1, 1, "", "class_label_distribution"], [69, 1, 1, "", "get_average_per_class_confusion_matrix"], [69, 1, 1, "", "get_sorted_bbox_count_idxs"], [69, 1, 1, "", "object_counts_per_image"], [69, 1, 1, "", "plot_class_distribution"], [69, 1, 1, "", "plot_class_size_distributions"], [69, 1, 1, "", "visualize"]], "cleanlab.outlier": [[70, 2, 1, "", "OutOfDistribution"]], "cleanlab.outlier.OutOfDistribution": [[70, 3, 1, "", "fit"], [70, 3, 1, "", "fit_score"], [70, 3, 1, "", "score"]], "cleanlab.rank": [[71, 1, 1, "", "find_top_issues"], [71, 1, 1, "", "get_confidence_weighted_entropy_for_each_label"], [71, 1, 1, "", "get_label_quality_ensemble_scores"], [71, 1, 1, "", "get_label_quality_scores"], [71, 1, 1, "", "get_normalized_margin_for_each_label"], [71, 1, 1, "", "get_self_confidence_for_each_label"], [71, 1, 1, "", "order_label_issues"]], "cleanlab.regression": [[73, 0, 0, "-", "learn"], [74, 0, 0, "-", "rank"]], "cleanlab.regression.learn": [[73, 2, 1, "", "CleanLearning"]], "cleanlab.regression.learn.CleanLearning": [[73, 3, 1, "", "__init_subclass__"], [73, 3, 1, "", "find_label_issues"], [73, 3, 1, "", "fit"], [73, 3, 1, "", "get_aleatoric_uncertainty"], [73, 3, 1, "", "get_epistemic_uncertainty"], [73, 3, 1, "", "get_label_issues"], [73, 3, 1, "", "get_metadata_routing"], [73, 3, 1, "", "get_params"], [73, 3, 1, "", "predict"], [73, 3, 1, "", "save_space"], [73, 3, 1, "", "score"], [73, 3, 1, "", "set_fit_request"], [73, 3, 1, "", "set_params"], [73, 3, 1, "", "set_score_request"]], "cleanlab.regression.rank": [[74, 1, 1, "", "get_label_quality_scores"]], "cleanlab.segmentation": [[75, 0, 0, "-", "filter"], [77, 0, 0, "-", "rank"], [78, 0, 0, "-", "summary"]], "cleanlab.segmentation.filter": [[75, 1, 1, "", "find_label_issues"]], "cleanlab.segmentation.rank": [[77, 1, 1, "", "get_label_quality_scores"], [77, 1, 1, "", "issues_from_scores"]], "cleanlab.segmentation.summary": [[78, 1, 1, "", "common_label_issues"], [78, 1, 1, "", "display_issues"], [78, 1, 1, "", "filter_by_class"]], "cleanlab.token_classification": [[79, 0, 0, "-", "filter"], [81, 0, 0, "-", "rank"], [82, 0, 0, "-", "summary"]], "cleanlab.token_classification.filter": [[79, 1, 1, "", "find_label_issues"]], "cleanlab.token_classification.rank": [[81, 1, 1, "", "get_label_quality_scores"], [81, 1, 1, "", "issues_from_scores"]], "cleanlab.token_classification.summary": [[82, 1, 1, "", "common_label_issues"], [82, 1, 1, "", "display_issues"], [82, 1, 1, "", "filter_by_token"]]}, "objtypes": {"0": "py:module", "1": "py:function", "2": "py:class", "3": "py:method", "4": "py:property", "5": "py:exception", "6": "py:attribute", "7": "py:data"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "function", "Python function"], "2": ["py", "class", "Python class"], "3": ["py", "method", "Python method"], "4": ["py", "property", "Python property"], "5": ["py", "exception", "Python exception"], "6": ["py", "attribute", "Python attribute"], "7": ["py", "data", "Python data"]}, "titleterms": {"benchmark": 0, "noise_gener": 1, "classif": [2, 86, 87, 91, 93, 94, 97, 99, 102, 108], "count": [3, 99], "data_valu": [4, 19], "datalab": [5, 7, 9, 10, 12, 88, 89, 90, 91, 92, 93, 94, 95, 97, 99, 102], "creat": [7, 89, 90, 99, 101], "your": [7, 83, 89, 90, 94, 95, 97, 99], "own": 7, "issu": [7, 9, 10, 22, 31, 83, 86, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 99, 102, 103, 107, 108], "manag": [7, 22], "prerequisit": 7, "implement": 7, "issuemanag": [7, 89], "basic": 7, "check": [7, 83, 95, 98], "intermedi": 7, "advanc": [7, 89], "us": [7, 86, 87, 88, 90, 91, 93, 94, 95, 97, 98, 99, 101, 102, 103, 104, 106, 107, 108], "gener": [8, 95], "cluster": [8, 95, 97], "id": 8, "guid": [9, 12], "type": [9, 10, 99], "custom": [9, 89], "cleanlab": [9, 10, 83, 86, 87, 88, 91, 93, 94, 97, 99, 101, 102, 103, 104, 106, 107, 108], "studio": [9, 10], "easi": [9, 10, 83, 91], "mode": [9, 10, 83, 91], "can": [10, 90, 96, 97, 99, 101], "detect": [10, 88, 90, 91, 93, 94, 95, 97, 99, 103, 104], "estim": [10, 99, 101, 102], "each": 10, "input": 10, "label": [10, 24, 26, 31, 83, 86, 87, 88, 90, 91, 93, 94, 96, 97, 99, 101, 102, 103, 106, 107, 108], "is_label_issu": 10, "label_scor": 10, "given_label": 10, "predicted_label": 10, "outlier": [10, 29, 55, 70, 91, 93, 94, 102, 104], "is_outlier_issu": 10, "outlier_scor": 10, "Near": [10, 90, 91, 93, 94], "duplic": [10, 20, 90, 91, 93, 94, 97, 102], "is_near_duplicate_issu": 10, "near_duplicate_scor": 10, "near_duplicate_set": 10, "distance_to_nearest_neighbor": 10, "non": [10, 94, 95], "iid": [10, 94, 95], "is_non_iid_issu": 10, "non_iid_scor": 10, "class": [10, 84, 95, 99, 107], "imbal": [10, 21, 95], "is_class_imbalance_issu": 10, "class_imbalance_scor": 10, "imag": [10, 91, 95, 104], "specif": [10, 22, 107], "spuriou": [10, 95], "correl": [10, 95], "between": 10, "properti": 10, "score": [10, 95, 99, 101, 102, 103, 107, 108], "underperform": [10, 95, 97], "group": [10, 95, 97], "is_underperforming_group_issu": 10, "underperforming_group_scor": 10, "null": [10, 28, 95], "is_null_issu": 10, "null_scor": 10, "data": [10, 13, 83, 86, 87, 88, 89, 90, 93, 94, 95, 96, 97, 98, 99, 101, 102, 103, 104, 105, 106, 107, 108], "valuat": [10, 95], "is_data_valuation_issu": 10, "data_valuation_scor": 10, "option": [10, 95], "paramet": [10, 99], "get": [12, 89, 90, 101, 102, 103, 107, 108], "start": [12, 96], "api": 12, "refer": 12, "data_issu": 14, "factori": 15, "intern": [16, 45], "issue_find": 17, "issue_manag": [22, 23], "regist": 22, "ml": [22, 97, 98, 99], "task": [22, 35], "multilabel": 25, "noniid": 27, "regress": [30, 72, 73, 74, 97, 106], "prioriti": 31, "order": 31, "find": [31, 86, 87, 88, 90, 91, 93, 94, 95, 97, 99, 101, 102, 103, 104, 106, 107, 108], "underperforming_group": 32, "model_output": 33, "report": [34, 91], "dataset": [37, 62, 83, 87, 88, 90, 91, 94, 95, 96, 97, 99, 102, 103, 104, 106, 107, 108], "cifar_cnn": 38, "coteach": 39, "experiment": 40, "label_issues_batch": 41, "mnist_pytorch": 42, "span_classif": 43, "filter": [44, 63, 66, 75, 79, 99], "label_quality_util": 46, "latent_algebra": 47, "multiannotator_util": 48, "multilabel_scor": 49, "multilabel_util": 50, "neighbor": 51, "knn_graph": 52, "metric": 53, "search": [54, 89], "token_classification_util": 56, "util": 57, "valid": [58, 91, 105], "model": [59, 83, 86, 87, 88, 91, 93, 94, 97, 98, 99, 101, 102, 103, 104, 106], "kera": 60, "multiannot": [61, 101], "multilabel_classif": 64, "rank": [65, 68, 71, 74, 77, 81, 99], "object_detect": 67, "summari": [69, 78, 82], "learn": [73, 90, 97, 99], "segment": [76, 107], "token_classif": [80, 108], "open": [83, 97], "sourc": [83, 97], "document": 83, "quickstart": 83, "1": [83, 84, 86, 87, 88, 89, 90, 91, 93, 94, 95, 98, 99, 101, 102, 103, 104, 106, 107, 108], "instal": [83, 86, 87, 88, 89, 90, 91, 93, 94, 96, 98, 99, 101, 102, 103, 104, 106, 107, 108], "2": [83, 84, 86, 87, 88, 89, 90, 91, 93, 94, 95, 98, 99, 101, 102, 103, 104, 106, 107, 108], "all": [83, 90, 99], "sort": [83, 95], "3": [83, 86, 87, 88, 89, 90, 91, 93, 94, 95, 98, 99, 101, 102, 103, 104, 106, 107, 108], "handl": [83, 97], "error": [83, 87, 91, 97, 99, 101, 102, 103, 106, 107, 108], "train": [83, 86, 87, 88, 95, 97, 98, 104, 106], "robust": [83, 86, 87, 99, 106], "noisi": [83, 86, 87, 98, 99, 106], "4": [83, 86, 87, 88, 89, 90, 91, 93, 94, 95, 98, 99, 101, 103, 104, 106], "curat": [83, 98], "fix": [83, 97], "level": [83, 96, 99, 108], "5": [83, 86, 88, 90, 91, 93, 95, 98, 99, 101, 106], "improv": [83, 98, 101], "via": [83, 98, 99, 101], "mani": [83, 99], "other": [83, 101, 103, 106], "techniqu": [83, 98], "contribut": 83, "how": [84, 97, 99, 101, 102, 108], "migrat": 84, "version": 84, "0": 84, "from": [84, 86, 87, 89, 90, 98, 99, 106], "pre": [84, 88, 95, 97, 104], "function": [84, 89], "name": 84, "chang": 84, "modul": [84, 99], "new": 84, "remov": 84, "common": [84, 108], "argument": [84, 89], "variabl": 84, "cleanlearn": [85, 97, 99], "tutori": [85, 92, 96, 98, 100], "structur": 86, "tabular": [86, 93], "requir": [86, 87, 89, 90, 91, 93, 94, 101, 102, 103, 104, 106, 107, 108], "depend": [86, 87, 88, 89, 90, 91, 93, 94, 96, 98, 99, 101, 102, 103, 104, 106, 107, 108], "load": [86, 87, 88, 89, 90, 93, 94, 95, 106], "process": [86, 93, 104, 106], "select": [86, 93], "comput": [86, 88, 91, 93, 94, 95, 97, 98, 101, 105], "out": [86, 88, 89, 90, 91, 93, 94, 98, 101, 105], "sampl": [86, 88, 89, 90, 91, 93, 94, 98, 101, 105], "predict": [86, 88, 89, 90, 91, 93, 94, 95, 98, 101, 102, 103, 105], "probabl": [86, 88, 89, 90, 91, 93, 94, 95, 98, 101, 105], "more": [86, 87, 90, 99, 106], "spend": [86, 87, 90, 93, 94, 96, 99, 102, 104, 105, 106], "too": [86, 87, 90, 93, 94, 96, 99, 102, 104, 105, 106], "much": [86, 87, 90, 93, 94, 96, 99, 102, 104, 105, 106], "time": [86, 87, 90, 93, 94, 96, 99, 102, 104, 105, 106], "qualiti": [86, 87, 90, 93, 94, 96, 99, 101, 102, 103, 104, 105, 106, 107, 108], "text": [87, 94, 95, 108], "format": [87, 94, 97, 102, 103], "defin": [87, 91, 94, 95, 106], "potenti": [87, 101, 106], "an": [88, 91, 97], "audio": 88, "import": [88, 89, 90, 91, 96, 99, 101], "them": [88, 96, 98, 99], "speechbrain": 88, "featur": [88, 91, 104], "fit": 88, "linear": 88, "workflow": [89, 95, 99], "audit": [89, 90], "classifi": [89, 90, 95], "instanti": 89, "object": [89, 103], "increment": 89, "specifi": [89, 97], "nondefault": 89, "save": 89, "ad": 89, "A": 90, "unifi": 90, "kind": [90, 103], "skip": [90, 96, 99, 101], "detail": [90, 96, 99, 101], "about": 90, "addit": 90, "inform": [90, 91], "fetch": [91, 96], "normal": 91, "fashion": 91, "mnist": 91, "prepar": [91, 95], "k": [91, 93, 105], "fold": [91, 105], "cross": [91, 105], "embed": [91, 104], "7": [91, 98, 99], "view": 91, "most": [91, 108], "like": 91, "exampl": [91, 97, 99, 104], "sever": 91, "set": [91, 99], "dark": 91, "top": [91, 107], "low": 91, "numer": 93, "categor": [93, 95], "column": 93, "construct": 93, "nearest": 93, "neighbour": 93, "graph": [93, 95], "drift": [94, 102], "miscellan": 95, "acceler": 95, "knn": 95, "obtain": 95, "identifi": [95, 97, 98, 103], "explan": 95, "vector": 95, "perform": [95, 98], "visual": [95, 99, 103, 104, 107], "synthet": 95, "result": 95, "predefin": 95, "slice": [95, 97], "i": [95, 97, 99, 105], "catch": 95, "valu": 95, "encod": 95, "initi": [95, 101], "6": [95, 98, 99], "run": [95, 97], "analysi": [95, 103], "interpret": 95, "understand": 96, "evalu": [96, 98], "health": [96, 99], "8": [96, 98, 99], "popular": 96, "faq": 97, "what": [97, 99, 105], "do": [97, 99], "infer": 97, "correct": [97, 98], "ha": 97, "flag": 97, "should": 97, "v": [97, 98], "test": [97, 98, 99, 104], "big": 97, "limit": 97, "memori": 97, "why": [97, 98], "isn": 97, "t": 97, "work": [97, 99, 101, 108], "me": 97, "differ": [97, 103], "clean": [97, 98, 99], "final": 97, "hyperparamet": [97, 98], "tune": 97, "onli": 97, "one": [97, 99, 102, 107], "doe": [97, 101, 108], "take": 97, "so": 97, "long": 97, "when": [97, 99], "licens": 97, "under": 97, "answer": 97, "question": 97, "split": 98, "did": 98, "you": [98, 99], "make": 98, "thi": [98, 99], "preprocess": 98, "fundament": 98, "problem": 98, "setup": 98, "origin": 98, "baselin": 98, "manual": 98, "address": 98, "algorithm": 98, "better": [98, 101], "strategi": 98, "optim": 98, "9": 98, "conclus": 98, "The": 99, "centric": 99, "ai": 99, "machin": 99, "find_label_issu": 99, "line": 99, "code": 99, "twenti": 99, "lowest": 99, "see": 99, "now": 99, "let": 99, "": 99, "happen": 99, "we": 99, "merg": 99, "seafoam": 99, "green": 99, "yellow": 99, "re": 99, "One": 99, "rule": 99, "overal": [99, 107], "accur": 99, "directli": 99, "fulli": 99, "character": 99, "nois": 99, "matrix": [99, 102], "joint": 99, "prior": 99, "true": 99, "distribut": 99, "flip": 99, "rate": 99, "ani": 99, "again": 99, "support": 99, "lot": 99, "method": 99, "filter_bi": 99, "automat": 99, "everi": 99, "uniqu": 99, "num_label_issu": 99, "threshold": 99, "found": 99, "Not": 99, "sure": 99, "ensembl": 99, "multipl": [99, 101], "predictor": 99, "consensu": 101, "annot": 101, "major": 101, "vote": 101, "statist": 101, "compar": 101, "inspect": 101, "retrain": 101, "further": 101, "multi": 102, "beyond": 102, "mislabel": [102, 107, 108], "given": 102, "hot": 102, "binari": 102, "without": 102, "applic": 102, "real": 102, "download": [103, 107, 108], "objectlab": 103, "exploratori": 103, "pytorch": 104, "timm": 104, "cifar10": 104, "some": 104, "pred_prob": [104, 107, 108], "wai": 106, "semant": 107, "which": 107, "ar": 107, "commonli": 107, "focus": 107, "token": 108, "word": 108, "sentenc": 108, "contain": 108, "particular": 108}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "nbsphinx": 4, "sphinx.ext.viewcode": 1, "sphinx.ext.todo": 2, "sphinx": 58}, "alltitles": {"benchmarking": [[0, "module-cleanlab.benchmarking"]], "noise_generation": [[1, "module-cleanlab.benchmarking.noise_generation"]], "classification": [[2, "module-cleanlab.classification"]], "count": [[3, "module-cleanlab.count"]], "data_valuation": [[4, "module-cleanlab.data_valuation"], [19, "data-valuation"]], "datalab": [[5, "module-cleanlab.datalab.datalab"], [12, "module-cleanlab.datalab"]], "Creating Your Own Issues Manager": [[7, "creating-your-own-issues-manager"]], "Prerequisites": [[7, "prerequisites"]], "Implementing IssueManagers": [[7, "implementing-issuemanagers"]], "Basic Issue Check": [[7, "basic-issue-check"]], "Intermediate Issue Check": [[7, "intermediate-issue-check"]], "Advanced Issue Check": [[7, "advanced-issue-check"]], "Use with Datalab": [[7, "use-with-datalab"]], "Generating Cluster IDs": [[8, "generating-cluster-ids"]], "Datalab guides": [[9, "datalab-guides"]], "Types of issues": [[9, "types-of-issues"]], "Customizing issue types": [[9, "customizing-issue-types"]], "Cleanlab Studio (Easy Mode)": [[9, "cleanlab-studio-easy-mode"], [10, "cleanlab-studio-easy-mode"]], "Datalab Issue Types": [[10, "datalab-issue-types"]], "Types of issues Datalab can detect": [[10, "types-of-issues-datalab-can-detect"]], "Estimates for Each Issue Type": [[10, "estimates-for-each-issue-type"]], "Inputs to Datalab": [[10, "inputs-to-datalab"]], "Label Issue": [[10, "label-issue"]], "is_label_issue": [[10, "is-label-issue"]], "label_score": [[10, "label-score"]], "given_label": [[10, "given-label"], [10, "id6"]], "predicted_label": [[10, "predicted-label"]], "Outlier Issue": [[10, "outlier-issue"]], "is_outlier_issue": [[10, "is-outlier-issue"]], "outlier_score": [[10, "outlier-score"]], "(Near) Duplicate Issue": [[10, "near-duplicate-issue"]], "is_near_duplicate_issue": [[10, "is-near-duplicate-issue"]], "near_duplicate_score": [[10, "near-duplicate-score"]], "near_duplicate_sets": [[10, "near-duplicate-sets"]], "distance_to_nearest_neighbor": [[10, "distance-to-nearest-neighbor"]], "Non-IID Issue": [[10, "non-iid-issue"]], "is_non_iid_issue": [[10, "is-non-iid-issue"]], "non_iid_score": [[10, "non-iid-score"]], "Class Imbalance Issue": [[10, "class-imbalance-issue"]], "is_class_imbalance_issue": [[10, "is-class-imbalance-issue"]], "class_imbalance_score": [[10, "class-imbalance-score"]], "Image-specific Issues": [[10, "image-specific-issues"]], "Spurious Correlations between image-specific properties and labels": [[10, "spurious-correlations-between-image-specific-properties-and-labels"]], "property": [[10, "property"]], "score": [[10, "score"]], "Underperforming Group Issue": [[10, "underperforming-group-issue"]], "is_underperforming_group_issue": [[10, "is-underperforming-group-issue"]], "underperforming_group_score": [[10, "underperforming-group-score"]], "Null Issue": [[10, "null-issue"]], "is_null_issue": [[10, "is-null-issue"]], "null_score": [[10, "null-score"]], "Data Valuation Issue": [[10, "data-valuation-issue"]], "is_data_valuation_issue": [[10, "is-data-valuation-issue"]], "data_valuation_score": [[10, "data-valuation-score"]], "Optional Issue Parameters": [[10, "optional-issue-parameters"]], "Label Issue Parameters": [[10, "label-issue-parameters"]], "Outlier Issue Parameters": [[10, "outlier-issue-parameters"]], "Duplicate Issue Parameters": [[10, "duplicate-issue-parameters"]], "Non-IID Issue Parameters": [[10, "non-iid-issue-parameters"]], "Imbalance Issue Parameters": [[10, "imbalance-issue-parameters"]], "Underperforming Group Issue Parameters": [[10, "underperforming-group-issue-parameters"]], "Null Issue Parameters": [[10, "null-issue-parameters"]], "Data Valuation Issue Parameters": [[10, "data-valuation-issue-parameters"]], "Image Issue Parameters": [[10, "image-issue-parameters"]], "Getting Started": [[12, "getting-started"]], "Guides": [[12, "guides"]], "API Reference": [[12, "api-reference"]], "data": [[13, "module-cleanlab.datalab.internal.data"]], "data_issues": [[14, "module-cleanlab.datalab.internal.data_issues"]], "factory": [[15, "module-cleanlab.datalab.internal.issue_manager_factory"]], "internal": [[16, "internal"], [45, "internal"]], "issue_finder": [[17, "issue-finder"]], "duplicate": [[20, "module-cleanlab.datalab.internal.issue_manager.duplicate"]], "imbalance": [[21, "module-cleanlab.datalab.internal.issue_manager.imbalance"]], "issue_manager": [[22, "issue-manager"], [23, "module-cleanlab.datalab.internal.issue_manager.issue_manager"]], "Registered issue managers": [[22, "registered-issue-managers"]], "ML task-specific issue managers": [[22, "ml-task-specific-issue-managers"]], "label": [[24, "module-cleanlab.datalab.internal.issue_manager.label"], [26, "module-cleanlab.datalab.internal.issue_manager.multilabel.label"], [31, "module-cleanlab.datalab.internal.issue_manager.regression.label"]], "multilabel": [[25, "multilabel"]], "noniid": [[27, "module-cleanlab.datalab.internal.issue_manager.noniid"]], "null": [[28, "null"]], "outlier": [[29, "module-cleanlab.datalab.internal.issue_manager.outlier"], [55, "module-cleanlab.internal.outlier"], [70, "module-cleanlab.outlier"]], "regression": [[30, "regression"], [72, "regression"]], "Priority Order for finding issues:": [[31, null]], "underperforming_group": [[32, "underperforming-group"]], "model_outputs": [[33, "module-cleanlab.datalab.internal.model_outputs"]], "report": [[34, "report"]], "task": [[35, "task"]], "dataset": [[37, "module-cleanlab.dataset"], [62, "module-cleanlab.multilabel_classification.dataset"]], "cifar_cnn": [[38, "module-cleanlab.experimental.cifar_cnn"]], "coteaching": [[39, "module-cleanlab.experimental.coteaching"]], "experimental": [[40, "experimental"]], "label_issues_batched": [[41, "module-cleanlab.experimental.label_issues_batched"]], "mnist_pytorch": [[42, "module-cleanlab.experimental.mnist_pytorch"]], "span_classification": [[43, "module-cleanlab.experimental.span_classification"]], "filter": [[44, "module-cleanlab.filter"], [63, "module-cleanlab.multilabel_classification.filter"], [66, "filter"], [75, "filter"], [79, "module-cleanlab.token_classification.filter"]], "label_quality_utils": [[46, "module-cleanlab.internal.label_quality_utils"]], "latent_algebra": [[47, "module-cleanlab.internal.latent_algebra"]], "multiannotator_utils": [[48, "module-cleanlab.internal.multiannotator_utils"]], "multilabel_scorer": [[49, "module-cleanlab.internal.multilabel_scorer"]], "multilabel_utils": [[50, "module-cleanlab.internal.multilabel_utils"]], "neighbor": [[51, "neighbor"]], "knn_graph": [[52, "module-cleanlab.internal.neighbor.knn_graph"]], "metric": [[53, "module-cleanlab.internal.neighbor.metric"]], "search": [[54, "module-cleanlab.internal.neighbor.search"]], "token_classification_utils": [[56, "module-cleanlab.internal.token_classification_utils"]], "util": [[57, "module-cleanlab.internal.util"]], "validation": [[58, "module-cleanlab.internal.validation"]], "models": [[59, "models"]], "keras": [[60, "module-cleanlab.models.keras"]], "multiannotator": [[61, "module-cleanlab.multiannotator"]], "multilabel_classification": [[64, "multilabel-classification"]], "rank": [[65, "module-cleanlab.multilabel_classification.rank"], [68, "module-cleanlab.object_detection.rank"], [71, "module-cleanlab.rank"], [77, "module-cleanlab.segmentation.rank"], [81, "module-cleanlab.token_classification.rank"]], "object_detection": [[67, "object-detection"]], "summary": [[69, "summary"], [78, "module-cleanlab.segmentation.summary"], [82, "module-cleanlab.token_classification.summary"]], "regression.learn": [[73, "module-cleanlab.regression.learn"]], "regression.rank": [[74, "module-cleanlab.regression.rank"]], "segmentation": [[76, "segmentation"]], "token_classification": [[80, "token-classification"]], "cleanlab open-source documentation": [[83, "cleanlab-open-source-documentation"]], "Quickstart": [[83, "quickstart"]], "1. Install cleanlab": [[83, "install-cleanlab"]], "2. Check your data for all sorts of issues": [[83, "check-your-data-for-all-sorts-of-issues"]], "3. Handle label errors and train robust models with noisy labels": [[83, "handle-label-errors-and-train-robust-models-with-noisy-labels"]], "4. Dataset curation: fix dataset-level issues": [[83, "dataset-curation-fix-dataset-level-issues"]], "5. Improve your data via many other techniques": [[83, "improve-your-data-via-many-other-techniques"]], "Contributing": [[83, "contributing"]], "Easy Mode": [[83, "easy-mode"], [91, "Easy-Mode"]], "How to migrate to versions >= 2.0.0 from pre 1.0.1": [[84, "how-to-migrate-to-versions-2-0-0-from-pre-1-0-1"]], "Function and class name changes": [[84, "function-and-class-name-changes"]], "Module name changes": [[84, "module-name-changes"]], "New modules": [[84, "new-modules"]], "Removed modules": [[84, "removed-modules"]], "Common argument and variable name changes": [[84, "common-argument-and-variable-name-changes"]], "CleanLearning Tutorials": [[85, "cleanlearning-tutorials"]], "Classification with Structured/Tabular Data and Noisy Labels": [[86, "Classification-with-Structured/Tabular-Data-and-Noisy-Labels"]], "1. Install required dependencies": [[86, "1.-Install-required-dependencies"], [87, "1.-Install-required-dependencies"], [93, "1.-Install-required-dependencies"], [94, "1.-Install-required-dependencies"], [106, "1.-Install-required-dependencies"]], "2. Load and process the data": [[86, "2.-Load-and-process-the-data"], [93, "2.-Load-and-process-the-data"], [106, "2.-Load-and-process-the-data"]], "3. Select a classification model and compute out-of-sample predicted probabilities": [[86, "3.-Select-a-classification-model-and-compute-out-of-sample-predicted-probabilities"], [93, "3.-Select-a-classification-model-and-compute-out-of-sample-predicted-probabilities"]], "4. Use cleanlab to find label issues": [[86, "4.-Use-cleanlab-to-find-label-issues"]], "5. Train a more robust model from noisy labels": [[86, "5.-Train-a-more-robust-model-from-noisy-labels"]], "Spending too much time on data quality?": [[86, "Spending-too-much-time-on-data-quality?"], [87, "Spending-too-much-time-on-data-quality?"], [90, "Spending-too-much-time-on-data-quality?"], [93, "Spending-too-much-time-on-data-quality?"], [94, "Spending-too-much-time-on-data-quality?"], [96, "Spending-too-much-time-on-data-quality?"], [99, "Spending-too-much-time-on-data-quality?"], [102, "Spending-too-much-time-on-data-quality?"], [104, "Spending-too-much-time-on-data-quality?"], [105, "spending-too-much-time-on-data-quality"], [106, "Spending-too-much-time-on-data-quality?"]], "Text Classification with Noisy Labels": [[87, "Text-Classification-with-Noisy-Labels"]], "2. Load and format the text dataset": [[87, "2.-Load-and-format-the-text-dataset"], [94, "2.-Load-and-format-the-text-dataset"]], "3. Define a classification model and use cleanlab to find potential label errors": [[87, "3.-Define-a-classification-model-and-use-cleanlab-to-find-potential-label-errors"]], "4. Train a more robust model from noisy labels": [[87, "4.-Train-a-more-robust-model-from-noisy-labels"], [106, "4.-Train-a-more-robust-model-from-noisy-labels"]], "Detecting Issues in an Audio Dataset with Datalab": [[88, "Detecting-Issues-in-an-Audio-Dataset-with-Datalab"]], "1. Install dependencies and import them": [[88, "1.-Install-dependencies-and-import-them"]], "2. Load the data": [[88, "2.-Load-the-data"]], "3. Use pre-trained SpeechBrain model to featurize audio": [[88, "3.-Use-pre-trained-SpeechBrain-model-to-featurize-audio"]], "4. Fit linear model and compute out-of-sample predicted probabilities": [[88, "4.-Fit-linear-model-and-compute-out-of-sample-predicted-probabilities"]], "5. Use cleanlab to find label issues": [[88, "5.-Use-cleanlab-to-find-label-issues"], [93, "5.-Use-cleanlab-to-find-label-issues"]], "Datalab: Advanced workflows to audit your data": [[89, "Datalab:-Advanced-workflows-to-audit-your-data"]], "Install and import required dependencies": [[89, "Install-and-import-required-dependencies"]], "Create and load the data": [[89, "Create-and-load-the-data"]], "Get out-of-sample predicted probabilities from a classifier": [[89, "Get-out-of-sample-predicted-probabilities-from-a-classifier"]], "Instantiate Datalab object": [[89, "Instantiate-Datalab-object"]], "Functionality 1: Incremental issue search": [[89, "Functionality-1:-Incremental-issue-search"]], "Functionality 2: Specifying nondefault arguments": [[89, "Functionality-2:-Specifying-nondefault-arguments"]], "Functionality 3: Save and load Datalab objects": [[89, "Functionality-3:-Save-and-load-Datalab-objects"]], "Functionality 4: Adding a custom IssueManager": [[89, "Functionality-4:-Adding-a-custom-IssueManager"]], "Datalab: A unified audit to detect all kinds of issues in data and labels": [[90, "Datalab:-A-unified-audit-to-detect-all-kinds-of-issues-in-data-and-labels"]], "1. Install and import required dependencies": [[90, "1.-Install-and-import-required-dependencies"], [91, "1.-Install-and-import-required-dependencies"], [101, "1.-Install-and-import-required-dependencies"]], "2. Create and load the data (can skip these details)": [[90, "2.-Create-and-load-the-data-(can-skip-these-details)"]], "3. Get out-of-sample predicted probabilities from a classifier": [[90, "3.-Get-out-of-sample-predicted-probabilities-from-a-classifier"]], "4. Use Datalab to find issues in the dataset": [[90, "4.-Use-Datalab-to-find-issues-in-the-dataset"]], "5. Learn more about the issues in your dataset": [[90, "5.-Learn-more-about-the-issues-in-your-dataset"]], "Get additional information": [[90, "Get-additional-information"]], "Near duplicate issues": [[90, "Near-duplicate-issues"], [91, "Near-duplicate-issues"]], "Detecting Issues in an Image Dataset with Datalab": [[91, "Detecting-Issues-in-an-Image-Dataset-with-Datalab"]], "2. Fetch and normalize the Fashion-MNIST dataset": [[91, "2.-Fetch-and-normalize-the-Fashion-MNIST-dataset"]], "3. Define a classification model": [[91, "3.-Define-a-classification-model"]], "4. Prepare the dataset for K-fold cross-validation": [[91, "4.-Prepare-the-dataset-for-K-fold-cross-validation"]], "5. Compute out-of-sample predicted probabilities and feature embeddings": [[91, "5.-Compute-out-of-sample-predicted-probabilities-and-feature-embeddings"]], "7. Use cleanlab to find issues": [[91, "7.-Use-cleanlab-to-find-issues"]], "View report": [[91, "View-report"]], "Label issues": [[91, "Label-issues"], [93, "Label-issues"], [94, "Label-issues"]], "View most likely examples with label errors": [[91, "View-most-likely-examples-with-label-errors"]], "Outlier issues": [[91, "Outlier-issues"], [93, "Outlier-issues"], [94, "Outlier-issues"]], "View most severe outliers": [[91, "View-most-severe-outliers"]], "View sets of near duplicate images": [[91, "View-sets-of-near-duplicate-images"]], "Dark images": [[91, "Dark-images"]], "View top examples of dark images": [[91, "View-top-examples-of-dark-images"]], "Low information images": [[91, "Low-information-images"]], "Datalab Tutorials": [[92, "datalab-tutorials"]], "Detecting Issues in Tabular Data\u00a0(Numeric/Categorical columns) with Datalab": [[93, "Detecting-Issues-in-Tabular-Data\u00a0(Numeric/Categorical-columns)-with-Datalab"]], "4. Construct K nearest neighbours graph": [[93, "4.-Construct-K-nearest-neighbours-graph"]], "Near-duplicate issues": [[93, "Near-duplicate-issues"], [94, "Near-duplicate-issues"]], "Detecting Issues in a Text Dataset with Datalab": [[94, "Detecting-Issues-in-a-Text-Dataset-with-Datalab"]], "3. Define a classification model and compute out-of-sample predicted probabilities": [[94, "3.-Define-a-classification-model-and-compute-out-of-sample-predicted-probabilities"]], "4. Use cleanlab to find issues in your dataset": [[94, "4.-Use-cleanlab-to-find-issues-in-your-dataset"]], "Non-IID issues (data drift)": [[94, "Non-IID-issues-(data-drift)"]], "Miscellaneous workflows with Datalab": [[95, "Miscellaneous-workflows-with-Datalab"]], "Accelerate Issue Checks with Pre-computed kNN Graphs": [[95, "Accelerate-Issue-Checks-with-Pre-computed-kNN-Graphs"]], "1. Load and Prepare Your Dataset": [[95, "1.-Load-and-Prepare-Your-Dataset"]], "2. Compute kNN Graph": [[95, "2.-Compute-kNN-Graph"]], "3. Train a Classifier and Obtain Predicted Probabilities": [[95, "3.-Train-a-Classifier-and-Obtain-Predicted-Probabilities"]], "4. Identify Data Issues Using Datalab": [[95, "4.-Identify-Data-Issues-Using-Datalab"]], "Explanation:": [[95, "Explanation:"]], "Data Valuation": [[95, "Data-Valuation"]], "1. Load and Prepare the Dataset": [[95, "1.-Load-and-Prepare-the-Dataset"], [95, "id2"], [95, "id5"]], "2. Vectorize the Text Data": [[95, "2.-Vectorize-the-Text-Data"]], "3. Perform Data Valuation with Datalab": [[95, "3.-Perform-Data-Valuation-with-Datalab"]], "4. (Optional) Visualize Data Valuation Scores": [[95, "4.-(Optional)-Visualize-Data-Valuation-Scores"]], "Find Underperforming Groups in a Dataset": [[95, "Find-Underperforming-Groups-in-a-Dataset"]], "1. Generate a Synthetic Dataset": [[95, "1.-Generate-a-Synthetic-Dataset"]], "2. Train a Classifier and Obtain Predicted Probabilities": [[95, "2.-Train-a-Classifier-and-Obtain-Predicted-Probabilities"], [95, "id3"]], "3. (Optional) Cluster the Data": [[95, "3.-(Optional)-Cluster-the-Data"]], "4. Identify Underperforming Groups with Datalab": [[95, "4.-Identify-Underperforming-Groups-with-Datalab"], [95, "id4"]], "5. (Optional) Visualize the Results": [[95, "5.-(Optional)-Visualize-the-Results"]], "Predefining Data Slices for Detecting Underperforming Groups": [[95, "Predefining-Data-Slices-for-Detecting-Underperforming-Groups"]], "3. Define a Data Slice": [[95, "3.-Define-a-Data-Slice"]], "Detect if your dataset is non-IID": [[95, "Detect-if-your-dataset-is-non-IID"]], "2. Detect Non-IID Issues Using Datalab": [[95, "2.-Detect-Non-IID-Issues-Using-Datalab"]], "3. (Optional) Visualize the Results": [[95, "3.-(Optional)-Visualize-the-Results"]], "Catch Null Values in a Dataset": [[95, "Catch-Null-Values-in-a-Dataset"]], "1. Load the Dataset": [[95, "1.-Load-the-Dataset"], [95, "id8"]], "2: Encode Categorical Values": [[95, "2:-Encode-Categorical-Values"]], "3. Initialize Datalab": [[95, "3.-Initialize-Datalab"]], "4. Detect Null Values": [[95, "4.-Detect-Null-Values"]], "5. Sort the Dataset by Null Issues": [[95, "5.-Sort-the-Dataset-by-Null-Issues"]], "6. (Optional) Visualize the Results": [[95, "6.-(Optional)-Visualize-the-Results"]], "Detect class imbalance in your dataset": [[95, "Detect-class-imbalance-in-your-dataset"]], "1. Prepare data": [[95, "1.-Prepare-data"]], "2. Detect class imbalance with Datalab": [[95, "2.-Detect-class-imbalance-with-Datalab"]], "3. (Optional) Visualize class imbalance issues": [[95, "3.-(Optional)-Visualize-class-imbalance-issues"]], "Identify Spurious Correlations in Image Datasets": [[95, "Identify-Spurious-Correlations-in-Image-Datasets"]], "2. Run Datalab Analysis": [[95, "2.-Run-Datalab-Analysis"]], "3. Interpret the Results": [[95, "3.-Interpret-the-Results"]], "Understanding Dataset-level Labeling Issues": [[96, "Understanding-Dataset-level-Labeling-Issues"]], "Install dependencies and import them": [[96, "Install-dependencies-and-import-them"], [99, "Install-dependencies-and-import-them"]], "Fetch the data (can skip these details)": [[96, "Fetch-the-data-(can-skip-these-details)"]], "Start of tutorial: Evaluate the health of 8 popular datasets": [[96, "Start-of-tutorial:-Evaluate-the-health-of-8-popular-datasets"]], "FAQ": [[97, "FAQ"]], "What data can cleanlab detect issues in?": [[97, "What-data-can-cleanlab-detect-issues-in?"]], "How do I format classification labels for cleanlab?": [[97, "How-do-I-format-classification-labels-for-cleanlab?"]], "How do I infer the correct labels for examples cleanlab has flagged?": [[97, "How-do-I-infer-the-correct-labels-for-examples-cleanlab-has-flagged?"]], "How should I handle label errors in train vs. test data?": [[97, "How-should-I-handle-label-errors-in-train-vs.-test-data?"]], "How can I find label issues in big datasets with limited memory?": [[97, "How-can-I-find-label-issues-in-big-datasets-with-limited-memory?"]], "Why isn\u2019t CleanLearning working for me?": [[97, "Why-isn\u2019t-CleanLearning-working-for-me?"]], "How can I use different models for data cleaning vs. final training in CleanLearning?": [[97, "How-can-I-use-different-models-for-data-cleaning-vs.-final-training-in-CleanLearning?"]], "How do I hyperparameter tune only the final model trained (and not the one finding label issues) in CleanLearning?": [[97, "How-do-I-hyperparameter-tune-only-the-final-model-trained-(and-not-the-one-finding-label-issues)-in-CleanLearning?"]], "Why does regression.learn.CleanLearning take so long?": [[97, "Why-does-regression.learn.CleanLearning-take-so-long?"]], "How do I specify pre-computed data slices/clusters when detecting the Underperforming Group Issue?": [[97, "How-do-I-specify-pre-computed-data-slices/clusters-when-detecting-the-Underperforming-Group-Issue?"]], "How to handle near-duplicate data identified by Datalab?": [[97, "How-to-handle-near-duplicate-data-identified-by-Datalab?"]], "What ML models should I run cleanlab with? How do I fix the issues cleanlab has identified?": [[97, "What-ML-models-should-I-run-cleanlab-with?-How-do-I-fix-the-issues-cleanlab-has-identified?"]], "What license is cleanlab open-sourced under?": [[97, "What-license-is-cleanlab-open-sourced-under?"]], "Can\u2019t find an answer to your question?": [[97, "Can't-find-an-answer-to-your-question?"]], "Improving ML Performance via Data Curation with Train vs Test Splits": [[98, "Improving-ML-Performance-via-Data-Curation-with-Train-vs-Test-Splits"]], "Why did you make this tutorial?": [[98, "Why-did-you-make-this-tutorial?"]], "1. Install dependencies": [[98, "1.-Install-dependencies"]], "2. Preprocess the data": [[98, "2.-Preprocess-the-data"]], "3. Check for fundamental problems in the train/test setup": [[98, "3.-Check-for-fundamental-problems-in-the-train/test-setup"]], "4. Train model with original (noisy) training data": [[98, "4.-Train-model-with-original-(noisy)-training-data"]], "Compute out-of-sample predicted probabilities for the test data from this baseline model": [[98, "Compute-out-of-sample-predicted-probabilities-for-the-test-data-from-this-baseline-model"]], "5. Check for issues in test data and manually address them": [[98, "5.-Check-for-issues-in-test-data-and-manually-address-them"]], "Use clean test data to evaluate the performance of model trained on noisy training data": [[98, "Use-clean-test-data-to-evaluate-the-performance-of-model-trained-on-noisy-training-data"]], "6. Check for issues in training data and algorithmically correct them": [[98, "6.-Check-for-issues-in-training-data-and-algorithmically-correct-them"]], "7. Train model on cleaned training data": [[98, "7.-Train-model-on-cleaned-training-data"]], "Use clean test data to evaluate the performance of model trained on cleaned training data": [[98, "Use-clean-test-data-to-evaluate-the-performance-of-model-trained-on-cleaned-training-data"]], "8. Identifying better training data curation strategies via hyperparameter optimization techniques": [[98, "8.-Identifying-better-training-data-curation-strategies-via-hyperparameter-optimization-techniques"]], "9. Conclusion": [[98, "9.-Conclusion"]], "The Workflows of Data-centric AI for Classification with Noisy Labels": [[99, "The-Workflows-of-Data-centric-AI-for-Classification-with-Noisy-Labels"]], "Create the data (can skip these details)": [[99, "Create-the-data-(can-skip-these-details)"]], "Workflow 1: Use Datalab to detect many types of issues": [[99, "Workflow-1:-Use-Datalab-to-detect-many-types-of-issues"]], "Workflow 2: Use CleanLearning for more robust Machine Learning": [[99, "Workflow-2:-Use-CleanLearning-for-more-robust-Machine-Learning"]], "Clean Learning = Machine Learning with cleaned data": [[99, "Clean-Learning-=-Machine-Learning-with-cleaned-data"]], "Workflow 3: Use CleanLearning to find_label_issues in one line of code": [[99, "Workflow-3:-Use-CleanLearning-to-find_label_issues-in-one-line-of-code"]], "Visualize the twenty examples with lowest label quality to see if Cleanlab works.": [[99, "Visualize-the-twenty-examples-with-lowest-label-quality-to-see-if-Cleanlab-works."]], "Workflow 4: Use cleanlab to find dataset-level and class-level issues": [[99, "Workflow-4:-Use-cleanlab-to-find-dataset-level-and-class-level-issues"]], "Now, let\u2019s see what happens if we merge classes \u201cseafoam green\u201d and \u201cyellow\u201d": [[99, "Now,-let's-see-what-happens-if-we-merge-classes-%22seafoam-green%22-and-%22yellow%22"]], "Workflow 5: Clean your test set too if you\u2019re doing ML with noisy labels!": [[99, "Workflow-5:-Clean-your-test-set-too-if-you're-doing-ML-with-noisy-labels!"]], "Workflow 6: One score to rule them all \u2013 use cleanlab\u2019s overall dataset health score": [[99, "Workflow-6:-One-score-to-rule-them-all----use-cleanlab's-overall-dataset-health-score"]], "How accurate is this dataset health score?": [[99, "How-accurate-is-this-dataset-health-score?"]], "Workflow(s) 7: Use count, rank, filter modules directly": [[99, "Workflow(s)-7:-Use-count,-rank,-filter-modules-directly"]], "Workflow 7.1 (count): Fully characterize label noise (noise matrix, joint, prior of true labels, \u2026)": [[99, "Workflow-7.1-(count):-Fully-characterize-label-noise-(noise-matrix,-joint,-prior-of-true-labels,-...)"]], "Use cleanlab to estimate and visualize the joint distribution of label noise and noise matrix of label flipping rates:": [[99, "Use-cleanlab-to-estimate-and-visualize-the-joint-distribution-of-label-noise-and-noise-matrix-of-label-flipping-rates:"]], "Workflow 7.2 (filter): Find label issues for any dataset and any model in one line of code": [[99, "Workflow-7.2-(filter):-Find-label-issues-for-any-dataset-and-any-model-in-one-line-of-code"]], "Again, we can visualize the twenty examples with lowest label quality to see if Cleanlab works.": [[99, "Again,-we-can-visualize-the-twenty-examples-with-lowest-label-quality-to-see-if-Cleanlab-works."]], "Workflow 7.2 supports lots of methods to find_label_issues() via the filter_by parameter.": [[99, "Workflow-7.2-supports-lots-of-methods-to-find_label_issues()-via-the-filter_by-parameter."]], "Workflow 7.3 (rank): Automatically rank every example by a unique label quality score. Find errors using cleanlab.count.num_label_issues as a threshold.": [[99, "Workflow-7.3-(rank):-Automatically-rank-every-example-by-a-unique-label-quality-score.-Find-errors-using-cleanlab.count.num_label_issues-as-a-threshold."]], "Again, we can visualize the label issues found to see if Cleanlab works.": [[99, "Again,-we-can-visualize-the-label-issues-found-to-see-if-Cleanlab-works."]], "Not sure when to use Workflow 7.2 or 7.3 to find label issues?": [[99, "Not-sure-when-to-use-Workflow-7.2-or-7.3-to-find-label-issues?"]], "Workflow 8: Ensembling label quality scores from multiple predictors": [[99, "Workflow-8:-Ensembling-label-quality-scores-from-multiple-predictors"]], "Tutorials": [[100, "tutorials"]], "Estimate Consensus and Annotator Quality for Data Labeled by Multiple Annotators": [[101, "Estimate-Consensus-and-Annotator-Quality-for-Data-Labeled-by-Multiple-Annotators"]], "2. Create the data (can skip these details)": [[101, "2.-Create-the-data-(can-skip-these-details)"]], "3. Get initial consensus labels via majority vote and compute out-of-sample predicted probabilities": [[101, "3.-Get-initial-consensus-labels-via-majority-vote-and-compute-out-of-sample-predicted-probabilities"]], "4. Use cleanlab to get better consensus labels and other statistics": [[101, "4.-Use-cleanlab-to-get-better-consensus-labels-and-other-statistics"]], "Comparing improved consensus labels": [[101, "Comparing-improved-consensus-labels"]], "Inspecting consensus quality scores to find potential consensus label errors": [[101, "Inspecting-consensus-quality-scores-to-find-potential-consensus-label-errors"]], "5. Retrain model using improved consensus labels": [[101, "5.-Retrain-model-using-improved-consensus-labels"]], "Further improvements": [[101, "Further-improvements"]], "How does cleanlab.multiannotator work?": [[101, "How-does-cleanlab.multiannotator-work?"]], "Find Label Errors in Multi-Label Classification Datasets": [[102, "Find-Label-Errors-in-Multi-Label-Classification-Datasets"]], "1. Install required dependencies and get dataset": [[102, "1.-Install-required-dependencies-and-get-dataset"]], "2. Format data, labels, and model predictions": [[102, "2.-Format-data,-labels,-and-model-predictions"], [103, "2.-Format-data,-labels,-and-model-predictions"]], "3. Use cleanlab to find label issues": [[102, "3.-Use-cleanlab-to-find-label-issues"], [103, "3.-Use-cleanlab-to-find-label-issues"], [107, "3.-Use-cleanlab-to-find-label-issues"], [108, "3.-Use-cleanlab-to-find-label-issues"]], "Label quality scores": [[102, "Label-quality-scores"]], "Data issues beyond mislabeling (outliers, duplicates, drift, \u2026)": [[102, "Data-issues-beyond-mislabeling-(outliers,-duplicates,-drift,-...)"]], "How to format labels given as a one-hot (multi-hot) binary matrix?": [[102, "How-to-format-labels-given-as-a-one-hot-(multi-hot)-binary-matrix?"]], "Estimate label issues without Datalab": [[102, "Estimate-label-issues-without-Datalab"]], "Application to Real Data": [[102, "Application-to-Real-Data"]], "Finding Label Errors in Object Detection Datasets": [[103, "Finding-Label-Errors-in-Object-Detection-Datasets"]], "1. Install required dependencies and download data": [[103, "1.-Install-required-dependencies-and-download-data"], [107, "1.-Install-required-dependencies-and-download-data"], [108, "1.-Install-required-dependencies-and-download-data"]], "Get label quality scores": [[103, "Get-label-quality-scores"], [107, "Get-label-quality-scores"]], "4. Use ObjectLab to visualize label issues": [[103, "4.-Use-ObjectLab-to-visualize-label-issues"]], "Different kinds of label issues identified by ObjectLab": [[103, "Different-kinds-of-label-issues-identified-by-ObjectLab"]], "Other uses of visualize": [[103, "Other-uses-of-visualize"]], "Exploratory data analysis": [[103, "Exploratory-data-analysis"]], "Detect Outliers with Cleanlab and PyTorch Image Models (timm)": [[104, "Detect-Outliers-with-Cleanlab-and-PyTorch-Image-Models-(timm)"]], "1. Install the required dependencies": [[104, "1.-Install-the-required-dependencies"]], "2. Pre-process the Cifar10 dataset": [[104, "2.-Pre-process-the-Cifar10-dataset"]], "Visualize some of the training and test examples": [[104, "Visualize-some-of-the-training-and-test-examples"]], "3. Use cleanlab and feature embeddings to find outliers in the data": [[104, "3.-Use-cleanlab-and-feature-embeddings-to-find-outliers-in-the-data"]], "4. Use cleanlab and pred_probs to find outliers in the data": [[104, "4.-Use-cleanlab-and-pred_probs-to-find-outliers-in-the-data"]], "Computing Out-of-Sample Predicted Probabilities with Cross-Validation": [[105, "computing-out-of-sample-predicted-probabilities-with-cross-validation"]], "Out-of-sample predicted probabilities?": [[105, "out-of-sample-predicted-probabilities"]], "What is K-fold cross-validation?": [[105, "what-is-k-fold-cross-validation"]], "Find Noisy Labels in Regression Datasets": [[106, "Find-Noisy-Labels-in-Regression-Datasets"]], "3. Define a regression model and use cleanlab to find potential label errors": [[106, "3.-Define-a-regression-model-and-use-cleanlab-to-find-potential-label-errors"]], "5. Other ways to find noisy labels in regression datasets": [[106, "5.-Other-ways-to-find-noisy-labels-in-regression-datasets"]], "Find Label Errors in Semantic Segmentation Datasets": [[107, "Find-Label-Errors-in-Semantic-Segmentation-Datasets"]], "2. Get data, labels, and pred_probs": [[107, "2.-Get-data,-labels,-and-pred_probs"], [108, "2.-Get-data,-labels,-and-pred_probs"]], "Visualize top label issues": [[107, "Visualize-top-label-issues"]], "Classes which are commonly mislabeled overall": [[107, "Classes-which-are-commonly-mislabeled-overall"]], "Focusing on one specific class": [[107, "Focusing-on-one-specific-class"]], "Find Label Errors in Token Classification (Text) Datasets": [[108, "Find-Label-Errors-in-Token-Classification-(Text)-Datasets"]], "Most common word-level token mislabels": [[108, "Most-common-word-level-token-mislabels"]], "Find sentences containing a particular mislabeled word": [[108, "Find-sentences-containing-a-particular-mislabeled-word"]], "Sentence label quality score": [[108, "Sentence-label-quality-score"]], "How does cleanlab.token_classification work?": [[108, "How-does-cleanlab.token_classification-work?"]]}, "indexentries": {"cleanlab.benchmarking": [[0, "module-cleanlab.benchmarking"]], "module": [[0, "module-cleanlab.benchmarking"], [1, "module-cleanlab.benchmarking.noise_generation"], [2, "module-cleanlab.classification"], [3, "module-cleanlab.count"], [4, "module-cleanlab.data_valuation"], [5, "module-cleanlab.datalab.datalab"], [12, "module-cleanlab.datalab"], [13, "module-cleanlab.datalab.internal.data"], [14, "module-cleanlab.datalab.internal.data_issues"], [15, "module-cleanlab.datalab.internal.issue_manager_factory"], [16, "module-cleanlab.datalab.internal"], [17, "module-cleanlab.datalab.internal.issue_finder"], [19, "module-cleanlab.datalab.internal.issue_manager.data_valuation"], [20, "module-cleanlab.datalab.internal.issue_manager.duplicate"], [21, "module-cleanlab.datalab.internal.issue_manager.imbalance"], [23, "module-cleanlab.datalab.internal.issue_manager.issue_manager"], [24, "module-cleanlab.datalab.internal.issue_manager.label"], [26, "module-cleanlab.datalab.internal.issue_manager.multilabel.label"], [27, "module-cleanlab.datalab.internal.issue_manager.noniid"], [28, "module-cleanlab.datalab.internal.issue_manager.null"], [29, "module-cleanlab.datalab.internal.issue_manager.outlier"], [31, "module-cleanlab.datalab.internal.issue_manager.regression.label"], [32, "module-cleanlab.datalab.internal.issue_manager.underperforming_group"], [33, "module-cleanlab.datalab.internal.model_outputs"], [34, "module-cleanlab.datalab.internal.report"], [35, "module-cleanlab.datalab.internal.task"], [37, "module-cleanlab.dataset"], [38, "module-cleanlab.experimental.cifar_cnn"], [39, "module-cleanlab.experimental.coteaching"], [40, "module-cleanlab.experimental"], [41, "module-cleanlab.experimental.label_issues_batched"], [42, "module-cleanlab.experimental.mnist_pytorch"], [43, "module-cleanlab.experimental.span_classification"], [44, "module-cleanlab.filter"], [45, "module-cleanlab.internal"], [46, "module-cleanlab.internal.label_quality_utils"], [47, "module-cleanlab.internal.latent_algebra"], [48, "module-cleanlab.internal.multiannotator_utils"], [49, "module-cleanlab.internal.multilabel_scorer"], [50, "module-cleanlab.internal.multilabel_utils"], [51, "module-cleanlab.internal.neighbor"], [52, "module-cleanlab.internal.neighbor.knn_graph"], [53, "module-cleanlab.internal.neighbor.metric"], [54, "module-cleanlab.internal.neighbor.search"], [55, "module-cleanlab.internal.outlier"], [56, "module-cleanlab.internal.token_classification_utils"], [57, "module-cleanlab.internal.util"], [58, "module-cleanlab.internal.validation"], [59, "module-cleanlab.models"], [60, "module-cleanlab.models.keras"], [61, "module-cleanlab.multiannotator"], [62, "module-cleanlab.multilabel_classification.dataset"], [63, "module-cleanlab.multilabel_classification.filter"], [64, "module-cleanlab.multilabel_classification"], [65, "module-cleanlab.multilabel_classification.rank"], [66, "module-cleanlab.object_detection.filter"], [67, "module-cleanlab.object_detection"], [68, "module-cleanlab.object_detection.rank"], [69, "module-cleanlab.object_detection.summary"], [70, "module-cleanlab.outlier"], [71, "module-cleanlab.rank"], [72, "module-cleanlab.regression"], [73, "module-cleanlab.regression.learn"], [74, "module-cleanlab.regression.rank"], [75, "module-cleanlab.segmentation.filter"], [76, "module-cleanlab.segmentation"], [77, "module-cleanlab.segmentation.rank"], [78, "module-cleanlab.segmentation.summary"], [79, "module-cleanlab.token_classification.filter"], [80, "module-cleanlab.token_classification"], [81, "module-cleanlab.token_classification.rank"], [82, "module-cleanlab.token_classification.summary"]], "cleanlab.benchmarking.noise_generation": [[1, "module-cleanlab.benchmarking.noise_generation"]], "generate_n_rand_probabilities_that_sum_to_m() (in module cleanlab.benchmarking.noise_generation)": [[1, "cleanlab.benchmarking.noise_generation.generate_n_rand_probabilities_that_sum_to_m"]], "generate_noise_matrix_from_trace() (in module cleanlab.benchmarking.noise_generation)": [[1, "cleanlab.benchmarking.noise_generation.generate_noise_matrix_from_trace"]], "generate_noisy_labels() (in module cleanlab.benchmarking.noise_generation)": [[1, "cleanlab.benchmarking.noise_generation.generate_noisy_labels"]], "noise_matrix_is_valid() (in module cleanlab.benchmarking.noise_generation)": [[1, "cleanlab.benchmarking.noise_generation.noise_matrix_is_valid"]], "randomly_distribute_n_balls_into_k_bins() (in module cleanlab.benchmarking.noise_generation)": [[1, "cleanlab.benchmarking.noise_generation.randomly_distribute_N_balls_into_K_bins"]], "cleanlearning (class in cleanlab.classification)": [[2, "cleanlab.classification.CleanLearning"]], "__init_subclass__() (cleanlab.classification.cleanlearning class method)": [[2, "cleanlab.classification.CleanLearning.__init_subclass__"]], "cleanlab.classification": [[2, "module-cleanlab.classification"]], "find_label_issues() (cleanlab.classification.cleanlearning method)": [[2, "cleanlab.classification.CleanLearning.find_label_issues"]], "fit() (cleanlab.classification.cleanlearning method)": [[2, "cleanlab.classification.CleanLearning.fit"]], "get_label_issues() (cleanlab.classification.cleanlearning method)": [[2, "cleanlab.classification.CleanLearning.get_label_issues"]], "get_metadata_routing() (cleanlab.classification.cleanlearning method)": [[2, "cleanlab.classification.CleanLearning.get_metadata_routing"]], "get_params() (cleanlab.classification.cleanlearning method)": [[2, "cleanlab.classification.CleanLearning.get_params"]], "predict() (cleanlab.classification.cleanlearning method)": [[2, "cleanlab.classification.CleanLearning.predict"]], "predict_proba() (cleanlab.classification.cleanlearning method)": [[2, "cleanlab.classification.CleanLearning.predict_proba"]], "save_space() (cleanlab.classification.cleanlearning method)": [[2, "cleanlab.classification.CleanLearning.save_space"]], "score() (cleanlab.classification.cleanlearning method)": [[2, "cleanlab.classification.CleanLearning.score"]], "set_fit_request() (cleanlab.classification.cleanlearning method)": [[2, "cleanlab.classification.CleanLearning.set_fit_request"]], "set_params() (cleanlab.classification.cleanlearning method)": [[2, "cleanlab.classification.CleanLearning.set_params"]], "set_score_request() (cleanlab.classification.cleanlearning method)": [[2, "cleanlab.classification.CleanLearning.set_score_request"]], "calibrate_confident_joint() (in module cleanlab.count)": [[3, "cleanlab.count.calibrate_confident_joint"]], "cleanlab.count": [[3, "module-cleanlab.count"]], "compute_confident_joint() (in module cleanlab.count)": [[3, "cleanlab.count.compute_confident_joint"]], "estimate_confident_joint_and_cv_pred_proba() (in module cleanlab.count)": [[3, "cleanlab.count.estimate_confident_joint_and_cv_pred_proba"]], "estimate_cv_predicted_probabilities() (in module cleanlab.count)": [[3, "cleanlab.count.estimate_cv_predicted_probabilities"]], "estimate_joint() (in module cleanlab.count)": [[3, "cleanlab.count.estimate_joint"]], "estimate_latent() (in module cleanlab.count)": [[3, "cleanlab.count.estimate_latent"]], "estimate_noise_matrices() (in module cleanlab.count)": [[3, "cleanlab.count.estimate_noise_matrices"]], "estimate_py_and_noise_matrices_from_probabilities() (in module cleanlab.count)": [[3, "cleanlab.count.estimate_py_and_noise_matrices_from_probabilities"]], "estimate_py_noise_matrices_and_cv_pred_proba() (in module cleanlab.count)": [[3, "cleanlab.count.estimate_py_noise_matrices_and_cv_pred_proba"]], "get_confident_thresholds() (in module cleanlab.count)": [[3, "cleanlab.count.get_confident_thresholds"]], "num_label_issues() (in module cleanlab.count)": [[3, "cleanlab.count.num_label_issues"]], "cleanlab.data_valuation": [[4, "module-cleanlab.data_valuation"]], "data_shapley_knn() (in module cleanlab.data_valuation)": [[4, "cleanlab.data_valuation.data_shapley_knn"]], "datalab (class in cleanlab.datalab.datalab)": [[5, "cleanlab.datalab.datalab.Datalab"]], "class_names (cleanlab.datalab.datalab.datalab property)": [[5, "cleanlab.datalab.datalab.Datalab.class_names"]], "cleanlab.datalab.datalab": [[5, "module-cleanlab.datalab.datalab"]], "find_issues() (cleanlab.datalab.datalab.datalab method)": [[5, "cleanlab.datalab.datalab.Datalab.find_issues"]], "get_info() (cleanlab.datalab.datalab.datalab method)": [[5, "cleanlab.datalab.datalab.Datalab.get_info"]], "get_issue_summary() (cleanlab.datalab.datalab.datalab method)": [[5, "cleanlab.datalab.datalab.Datalab.get_issue_summary"]], "get_issues() (cleanlab.datalab.datalab.datalab method)": [[5, "cleanlab.datalab.datalab.Datalab.get_issues"]], "has_labels (cleanlab.datalab.datalab.datalab property)": [[5, "cleanlab.datalab.datalab.Datalab.has_labels"]], "info (cleanlab.datalab.datalab.datalab property)": [[5, "cleanlab.datalab.datalab.Datalab.info"]], "issue_summary (cleanlab.datalab.datalab.datalab property)": [[5, "cleanlab.datalab.datalab.Datalab.issue_summary"]], "issues (cleanlab.datalab.datalab.datalab property)": [[5, "cleanlab.datalab.datalab.Datalab.issues"]], "labels (cleanlab.datalab.datalab.datalab property)": [[5, "cleanlab.datalab.datalab.Datalab.labels"]], "list_default_issue_types() (cleanlab.datalab.datalab.datalab method)": [[5, "cleanlab.datalab.datalab.Datalab.list_default_issue_types"]], "list_possible_issue_types() (cleanlab.datalab.datalab.datalab method)": [[5, "cleanlab.datalab.datalab.Datalab.list_possible_issue_types"]], "load() (cleanlab.datalab.datalab.datalab static method)": [[5, "cleanlab.datalab.datalab.Datalab.load"]], "report() (cleanlab.datalab.datalab.datalab method)": [[5, "cleanlab.datalab.datalab.Datalab.report"]], "save() (cleanlab.datalab.datalab.datalab method)": [[5, "cleanlab.datalab.datalab.Datalab.save"]], "cleanlab.datalab": [[12, "module-cleanlab.datalab"]], "data (class in cleanlab.datalab.internal.data)": [[13, "cleanlab.datalab.internal.data.Data"]], "dataformaterror": [[13, "cleanlab.datalab.internal.data.DataFormatError"]], "datasetdicterror": [[13, "cleanlab.datalab.internal.data.DatasetDictError"]], "datasetloaderror": [[13, "cleanlab.datalab.internal.data.DatasetLoadError"]], "label (class in cleanlab.datalab.internal.data)": [[13, "cleanlab.datalab.internal.data.Label"]], "multiclass (class in cleanlab.datalab.internal.data)": [[13, "cleanlab.datalab.internal.data.MultiClass"]], "multilabel (class in cleanlab.datalab.internal.data)": [[13, "cleanlab.datalab.internal.data.MultiLabel"]], "add_note() (cleanlab.datalab.internal.data.dataformaterror method)": [[13, "cleanlab.datalab.internal.data.DataFormatError.add_note"]], "add_note() (cleanlab.datalab.internal.data.datasetdicterror method)": [[13, "cleanlab.datalab.internal.data.DatasetDictError.add_note"]], "add_note() (cleanlab.datalab.internal.data.datasetloaderror method)": [[13, "cleanlab.datalab.internal.data.DatasetLoadError.add_note"]], "args (cleanlab.datalab.internal.data.dataformaterror attribute)": [[13, "cleanlab.datalab.internal.data.DataFormatError.args"]], "args (cleanlab.datalab.internal.data.datasetdicterror attribute)": [[13, "cleanlab.datalab.internal.data.DatasetDictError.args"]], "args (cleanlab.datalab.internal.data.datasetloaderror attribute)": [[13, "cleanlab.datalab.internal.data.DatasetLoadError.args"]], "class_names (cleanlab.datalab.internal.data.data property)": [[13, "cleanlab.datalab.internal.data.Data.class_names"]], "class_names (cleanlab.datalab.internal.data.label property)": [[13, "cleanlab.datalab.internal.data.Label.class_names"]], "class_names (cleanlab.datalab.internal.data.multiclass property)": [[13, "cleanlab.datalab.internal.data.MultiClass.class_names"]], "class_names (cleanlab.datalab.internal.data.multilabel property)": [[13, "cleanlab.datalab.internal.data.MultiLabel.class_names"]], "cleanlab.datalab.internal.data": [[13, "module-cleanlab.datalab.internal.data"]], "has_labels (cleanlab.datalab.internal.data.data property)": [[13, "cleanlab.datalab.internal.data.Data.has_labels"]], "is_available (cleanlab.datalab.internal.data.label property)": [[13, "cleanlab.datalab.internal.data.Label.is_available"]], "is_available (cleanlab.datalab.internal.data.multiclass property)": [[13, "cleanlab.datalab.internal.data.MultiClass.is_available"]], "is_available (cleanlab.datalab.internal.data.multilabel property)": [[13, "cleanlab.datalab.internal.data.MultiLabel.is_available"]], "with_traceback() (cleanlab.datalab.internal.data.dataformaterror method)": [[13, "cleanlab.datalab.internal.data.DataFormatError.with_traceback"]], "with_traceback() (cleanlab.datalab.internal.data.datasetdicterror method)": [[13, "cleanlab.datalab.internal.data.DatasetDictError.with_traceback"]], "with_traceback() (cleanlab.datalab.internal.data.datasetloaderror method)": [[13, "cleanlab.datalab.internal.data.DatasetLoadError.with_traceback"]], "dataissues (class in cleanlab.datalab.internal.data_issues)": [[14, "cleanlab.datalab.internal.data_issues.DataIssues"]], "cleanlab.datalab.internal.data_issues": [[14, "module-cleanlab.datalab.internal.data_issues"]], "collect_issues_from_imagelab() (cleanlab.datalab.internal.data_issues.dataissues method)": [[14, "cleanlab.datalab.internal.data_issues.DataIssues.collect_issues_from_imagelab"]], "collect_issues_from_issue_manager() (cleanlab.datalab.internal.data_issues.dataissues method)": [[14, "cleanlab.datalab.internal.data_issues.DataIssues.collect_issues_from_issue_manager"]], "collect_statistics() (cleanlab.datalab.internal.data_issues.dataissues method)": [[14, "cleanlab.datalab.internal.data_issues.DataIssues.collect_statistics"]], "get_data_statistics() (in module cleanlab.datalab.internal.data_issues)": [[14, "cleanlab.datalab.internal.data_issues.get_data_statistics"]], "get_info() (cleanlab.datalab.internal.data_issues.dataissues method)": [[14, "cleanlab.datalab.internal.data_issues.DataIssues.get_info"]], "get_issue_summary() (cleanlab.datalab.internal.data_issues.dataissues method)": [[14, "cleanlab.datalab.internal.data_issues.DataIssues.get_issue_summary"]], "get_issues() (cleanlab.datalab.internal.data_issues.dataissues method)": [[14, "cleanlab.datalab.internal.data_issues.DataIssues.get_issues"]], "info (cleanlab.datalab.internal.data_issues.dataissues attribute)": [[14, "cleanlab.datalab.internal.data_issues.DataIssues.info"]], "issue_summary (cleanlab.datalab.internal.data_issues.dataissues attribute)": [[14, "cleanlab.datalab.internal.data_issues.DataIssues.issue_summary"]], "issues (cleanlab.datalab.internal.data_issues.dataissues attribute)": [[14, "cleanlab.datalab.internal.data_issues.DataIssues.issues"]], "set_health_score() (cleanlab.datalab.internal.data_issues.dataissues method)": [[14, "cleanlab.datalab.internal.data_issues.DataIssues.set_health_score"]], "statistics (cleanlab.datalab.internal.data_issues.dataissues property)": [[14, "cleanlab.datalab.internal.data_issues.DataIssues.statistics"]], "registry (in module cleanlab.datalab.internal.issue_manager_factory)": [[15, "cleanlab.datalab.internal.issue_manager_factory.REGISTRY"]], "cleanlab.datalab.internal.issue_manager_factory": [[15, "module-cleanlab.datalab.internal.issue_manager_factory"]], "list_default_issue_types() (in module cleanlab.datalab.internal.issue_manager_factory)": [[15, "cleanlab.datalab.internal.issue_manager_factory.list_default_issue_types"]], "list_possible_issue_types() (in module cleanlab.datalab.internal.issue_manager_factory)": [[15, "cleanlab.datalab.internal.issue_manager_factory.list_possible_issue_types"]], "register() (in module cleanlab.datalab.internal.issue_manager_factory)": [[15, "cleanlab.datalab.internal.issue_manager_factory.register"]], "cleanlab.datalab.internal": [[16, "module-cleanlab.datalab.internal"]], "issuefinder (class in cleanlab.datalab.internal.issue_finder)": [[17, "cleanlab.datalab.internal.issue_finder.IssueFinder"]], "cleanlab.datalab.internal.issue_finder": [[17, "module-cleanlab.datalab.internal.issue_finder"]], "find_issues() (cleanlab.datalab.internal.issue_finder.issuefinder method)": [[17, "cleanlab.datalab.internal.issue_finder.IssueFinder.find_issues"]], "get_available_issue_types() (cleanlab.datalab.internal.issue_finder.issuefinder method)": [[17, "cleanlab.datalab.internal.issue_finder.IssueFinder.get_available_issue_types"]], "default_threshold (cleanlab.datalab.internal.issue_manager.data_valuation.datavaluationissuemanager attribute)": [[19, "cleanlab.datalab.internal.issue_manager.data_valuation.DataValuationIssueManager.DEFAULT_THRESHOLD"]], "datavaluationissuemanager (class in cleanlab.datalab.internal.issue_manager.data_valuation)": [[19, "cleanlab.datalab.internal.issue_manager.data_valuation.DataValuationIssueManager"]], "cleanlab.datalab.internal.issue_manager.data_valuation": [[19, "module-cleanlab.datalab.internal.issue_manager.data_valuation"]], "collect_info() (cleanlab.datalab.internal.issue_manager.data_valuation.datavaluationissuemanager method)": [[19, "cleanlab.datalab.internal.issue_manager.data_valuation.DataValuationIssueManager.collect_info"]], "description (cleanlab.datalab.internal.issue_manager.data_valuation.datavaluationissuemanager attribute)": [[19, "cleanlab.datalab.internal.issue_manager.data_valuation.DataValuationIssueManager.description"]], "find_issues() (cleanlab.datalab.internal.issue_manager.data_valuation.datavaluationissuemanager method)": [[19, "cleanlab.datalab.internal.issue_manager.data_valuation.DataValuationIssueManager.find_issues"]], "info (cleanlab.datalab.internal.issue_manager.data_valuation.datavaluationissuemanager attribute)": [[19, "cleanlab.datalab.internal.issue_manager.data_valuation.DataValuationIssueManager.info"]], "issue_name (cleanlab.datalab.internal.issue_manager.data_valuation.datavaluationissuemanager attribute)": [[19, "cleanlab.datalab.internal.issue_manager.data_valuation.DataValuationIssueManager.issue_name"]], "issue_score_key (cleanlab.datalab.internal.issue_manager.data_valuation.datavaluationissuemanager attribute)": [[19, "cleanlab.datalab.internal.issue_manager.data_valuation.DataValuationIssueManager.issue_score_key"]], "issues (cleanlab.datalab.internal.issue_manager.data_valuation.datavaluationissuemanager attribute)": [[19, "cleanlab.datalab.internal.issue_manager.data_valuation.DataValuationIssueManager.issues"]], "make_summary() (cleanlab.datalab.internal.issue_manager.data_valuation.datavaluationissuemanager class method)": [[19, "cleanlab.datalab.internal.issue_manager.data_valuation.DataValuationIssueManager.make_summary"]], "report() (cleanlab.datalab.internal.issue_manager.data_valuation.datavaluationissuemanager class method)": [[19, "cleanlab.datalab.internal.issue_manager.data_valuation.DataValuationIssueManager.report"]], "summary (cleanlab.datalab.internal.issue_manager.data_valuation.datavaluationissuemanager attribute)": [[19, "cleanlab.datalab.internal.issue_manager.data_valuation.DataValuationIssueManager.summary"]], "verbosity_levels (cleanlab.datalab.internal.issue_manager.data_valuation.datavaluationissuemanager attribute)": [[19, "cleanlab.datalab.internal.issue_manager.data_valuation.DataValuationIssueManager.verbosity_levels"]], "nearduplicateissuemanager (class in cleanlab.datalab.internal.issue_manager.duplicate)": [[20, "cleanlab.datalab.internal.issue_manager.duplicate.NearDuplicateIssueManager"]], "cleanlab.datalab.internal.issue_manager.duplicate": [[20, "module-cleanlab.datalab.internal.issue_manager.duplicate"]], "collect_info() (cleanlab.datalab.internal.issue_manager.duplicate.nearduplicateissuemanager method)": [[20, "cleanlab.datalab.internal.issue_manager.duplicate.NearDuplicateIssueManager.collect_info"]], "description (cleanlab.datalab.internal.issue_manager.duplicate.nearduplicateissuemanager attribute)": [[20, "cleanlab.datalab.internal.issue_manager.duplicate.NearDuplicateIssueManager.description"]], "find_issues() (cleanlab.datalab.internal.issue_manager.duplicate.nearduplicateissuemanager method)": [[20, "cleanlab.datalab.internal.issue_manager.duplicate.NearDuplicateIssueManager.find_issues"]], "info (cleanlab.datalab.internal.issue_manager.duplicate.nearduplicateissuemanager attribute)": [[20, "cleanlab.datalab.internal.issue_manager.duplicate.NearDuplicateIssueManager.info"]], "issue_name (cleanlab.datalab.internal.issue_manager.duplicate.nearduplicateissuemanager attribute)": [[20, "cleanlab.datalab.internal.issue_manager.duplicate.NearDuplicateIssueManager.issue_name"]], "issue_score_key (cleanlab.datalab.internal.issue_manager.duplicate.nearduplicateissuemanager attribute)": [[20, "cleanlab.datalab.internal.issue_manager.duplicate.NearDuplicateIssueManager.issue_score_key"]], "issues (cleanlab.datalab.internal.issue_manager.duplicate.nearduplicateissuemanager attribute)": [[20, "cleanlab.datalab.internal.issue_manager.duplicate.NearDuplicateIssueManager.issues"]], "make_summary() (cleanlab.datalab.internal.issue_manager.duplicate.nearduplicateissuemanager class method)": [[20, "cleanlab.datalab.internal.issue_manager.duplicate.NearDuplicateIssueManager.make_summary"]], "near_duplicate_sets (cleanlab.datalab.internal.issue_manager.duplicate.nearduplicateissuemanager attribute)": [[20, "cleanlab.datalab.internal.issue_manager.duplicate.NearDuplicateIssueManager.near_duplicate_sets"]], "report() (cleanlab.datalab.internal.issue_manager.duplicate.nearduplicateissuemanager class method)": [[20, "cleanlab.datalab.internal.issue_manager.duplicate.NearDuplicateIssueManager.report"]], "summary (cleanlab.datalab.internal.issue_manager.duplicate.nearduplicateissuemanager attribute)": [[20, "cleanlab.datalab.internal.issue_manager.duplicate.NearDuplicateIssueManager.summary"]], "verbosity_levels (cleanlab.datalab.internal.issue_manager.duplicate.nearduplicateissuemanager attribute)": [[20, "cleanlab.datalab.internal.issue_manager.duplicate.NearDuplicateIssueManager.verbosity_levels"]], "classimbalanceissuemanager (class in cleanlab.datalab.internal.issue_manager.imbalance)": [[21, "cleanlab.datalab.internal.issue_manager.imbalance.ClassImbalanceIssueManager"]], "cleanlab.datalab.internal.issue_manager.imbalance": [[21, "module-cleanlab.datalab.internal.issue_manager.imbalance"]], "collect_info() (cleanlab.datalab.internal.issue_manager.imbalance.classimbalanceissuemanager method)": [[21, "cleanlab.datalab.internal.issue_manager.imbalance.ClassImbalanceIssueManager.collect_info"]], "description (cleanlab.datalab.internal.issue_manager.imbalance.classimbalanceissuemanager attribute)": [[21, "cleanlab.datalab.internal.issue_manager.imbalance.ClassImbalanceIssueManager.description"]], "find_issues() (cleanlab.datalab.internal.issue_manager.imbalance.classimbalanceissuemanager method)": [[21, "cleanlab.datalab.internal.issue_manager.imbalance.ClassImbalanceIssueManager.find_issues"]], "info (cleanlab.datalab.internal.issue_manager.imbalance.classimbalanceissuemanager attribute)": [[21, "cleanlab.datalab.internal.issue_manager.imbalance.ClassImbalanceIssueManager.info"]], "issue_name (cleanlab.datalab.internal.issue_manager.imbalance.classimbalanceissuemanager attribute)": [[21, "cleanlab.datalab.internal.issue_manager.imbalance.ClassImbalanceIssueManager.issue_name"]], "issue_score_key (cleanlab.datalab.internal.issue_manager.imbalance.classimbalanceissuemanager attribute)": [[21, "cleanlab.datalab.internal.issue_manager.imbalance.ClassImbalanceIssueManager.issue_score_key"]], "issues (cleanlab.datalab.internal.issue_manager.imbalance.classimbalanceissuemanager attribute)": [[21, "cleanlab.datalab.internal.issue_manager.imbalance.ClassImbalanceIssueManager.issues"]], "make_summary() (cleanlab.datalab.internal.issue_manager.imbalance.classimbalanceissuemanager class method)": [[21, "cleanlab.datalab.internal.issue_manager.imbalance.ClassImbalanceIssueManager.make_summary"]], "report() (cleanlab.datalab.internal.issue_manager.imbalance.classimbalanceissuemanager class method)": [[21, "cleanlab.datalab.internal.issue_manager.imbalance.ClassImbalanceIssueManager.report"]], "summary (cleanlab.datalab.internal.issue_manager.imbalance.classimbalanceissuemanager attribute)": [[21, "cleanlab.datalab.internal.issue_manager.imbalance.ClassImbalanceIssueManager.summary"]], "verbosity_levels (cleanlab.datalab.internal.issue_manager.imbalance.classimbalanceissuemanager attribute)": [[21, "cleanlab.datalab.internal.issue_manager.imbalance.ClassImbalanceIssueManager.verbosity_levels"]], "issuemanager (class in cleanlab.datalab.internal.issue_manager.issue_manager)": [[23, "cleanlab.datalab.internal.issue_manager.issue_manager.IssueManager"]], "cleanlab.datalab.internal.issue_manager.issue_manager": [[23, "module-cleanlab.datalab.internal.issue_manager.issue_manager"]], "collect_info() (cleanlab.datalab.internal.issue_manager.issue_manager.issuemanager method)": [[23, "cleanlab.datalab.internal.issue_manager.issue_manager.IssueManager.collect_info"]], "description (cleanlab.datalab.internal.issue_manager.issue_manager.issuemanager attribute)": [[23, "cleanlab.datalab.internal.issue_manager.issue_manager.IssueManager.description"]], "find_issues() (cleanlab.datalab.internal.issue_manager.issue_manager.issuemanager method)": [[23, "cleanlab.datalab.internal.issue_manager.issue_manager.IssueManager.find_issues"]], "info (cleanlab.datalab.internal.issue_manager.issue_manager.issuemanager attribute)": [[23, "cleanlab.datalab.internal.issue_manager.issue_manager.IssueManager.info"]], "issue_name (cleanlab.datalab.internal.issue_manager.issue_manager.issuemanager attribute)": [[23, "cleanlab.datalab.internal.issue_manager.issue_manager.IssueManager.issue_name"]], "issue_score_key (cleanlab.datalab.internal.issue_manager.issue_manager.issuemanager attribute)": [[23, "cleanlab.datalab.internal.issue_manager.issue_manager.IssueManager.issue_score_key"]], "issues (cleanlab.datalab.internal.issue_manager.issue_manager.issuemanager attribute)": [[23, "cleanlab.datalab.internal.issue_manager.issue_manager.IssueManager.issues"]], "make_summary() (cleanlab.datalab.internal.issue_manager.issue_manager.issuemanager class method)": [[23, "cleanlab.datalab.internal.issue_manager.issue_manager.IssueManager.make_summary"]], "report() (cleanlab.datalab.internal.issue_manager.issue_manager.issuemanager class method)": [[23, "cleanlab.datalab.internal.issue_manager.issue_manager.IssueManager.report"]], "summary (cleanlab.datalab.internal.issue_manager.issue_manager.issuemanager attribute)": [[23, "cleanlab.datalab.internal.issue_manager.issue_manager.IssueManager.summary"]], "verbosity_levels (cleanlab.datalab.internal.issue_manager.issue_manager.issuemanager attribute)": [[23, "cleanlab.datalab.internal.issue_manager.issue_manager.IssueManager.verbosity_levels"]], "labelissuemanager (class in cleanlab.datalab.internal.issue_manager.label)": [[24, "cleanlab.datalab.internal.issue_manager.label.LabelIssueManager"]], "cleanlab.datalab.internal.issue_manager.label": [[24, "module-cleanlab.datalab.internal.issue_manager.label"]], "collect_info() (cleanlab.datalab.internal.issue_manager.label.labelissuemanager method)": [[24, "cleanlab.datalab.internal.issue_manager.label.LabelIssueManager.collect_info"]], "description (cleanlab.datalab.internal.issue_manager.label.labelissuemanager attribute)": [[24, "cleanlab.datalab.internal.issue_manager.label.LabelIssueManager.description"]], "find_issues() (cleanlab.datalab.internal.issue_manager.label.labelissuemanager method)": [[24, "cleanlab.datalab.internal.issue_manager.label.LabelIssueManager.find_issues"]], "get_health_summary() (cleanlab.datalab.internal.issue_manager.label.labelissuemanager method)": [[24, "cleanlab.datalab.internal.issue_manager.label.LabelIssueManager.get_health_summary"]], "health_summary_parameters (cleanlab.datalab.internal.issue_manager.label.labelissuemanager attribute)": [[24, "cleanlab.datalab.internal.issue_manager.label.LabelIssueManager.health_summary_parameters"]], "info (cleanlab.datalab.internal.issue_manager.label.labelissuemanager attribute)": [[24, "cleanlab.datalab.internal.issue_manager.label.LabelIssueManager.info"]], "issue_name (cleanlab.datalab.internal.issue_manager.label.labelissuemanager attribute)": [[24, "cleanlab.datalab.internal.issue_manager.label.LabelIssueManager.issue_name"]], "issue_score_key (cleanlab.datalab.internal.issue_manager.label.labelissuemanager attribute)": [[24, "cleanlab.datalab.internal.issue_manager.label.LabelIssueManager.issue_score_key"]], "issues (cleanlab.datalab.internal.issue_manager.label.labelissuemanager attribute)": [[24, "cleanlab.datalab.internal.issue_manager.label.LabelIssueManager.issues"]], "make_summary() (cleanlab.datalab.internal.issue_manager.label.labelissuemanager class method)": [[24, "cleanlab.datalab.internal.issue_manager.label.LabelIssueManager.make_summary"]], "report() (cleanlab.datalab.internal.issue_manager.label.labelissuemanager class method)": [[24, "cleanlab.datalab.internal.issue_manager.label.LabelIssueManager.report"]], "summary (cleanlab.datalab.internal.issue_manager.label.labelissuemanager attribute)": [[24, "cleanlab.datalab.internal.issue_manager.label.LabelIssueManager.summary"]], "verbosity_levels (cleanlab.datalab.internal.issue_manager.label.labelissuemanager attribute)": [[24, "cleanlab.datalab.internal.issue_manager.label.LabelIssueManager.verbosity_levels"]], "multilabelissuemanager (class in cleanlab.datalab.internal.issue_manager.multilabel.label)": [[26, "cleanlab.datalab.internal.issue_manager.multilabel.label.MultilabelIssueManager"]], "cleanlab.datalab.internal.issue_manager.multilabel.label": [[26, "module-cleanlab.datalab.internal.issue_manager.multilabel.label"]], "collect_info() (cleanlab.datalab.internal.issue_manager.multilabel.label.multilabelissuemanager method)": [[26, "cleanlab.datalab.internal.issue_manager.multilabel.label.MultilabelIssueManager.collect_info"]], "description (cleanlab.datalab.internal.issue_manager.multilabel.label.multilabelissuemanager attribute)": [[26, "cleanlab.datalab.internal.issue_manager.multilabel.label.MultilabelIssueManager.description"]], "find_issues() (cleanlab.datalab.internal.issue_manager.multilabel.label.multilabelissuemanager method)": [[26, "cleanlab.datalab.internal.issue_manager.multilabel.label.MultilabelIssueManager.find_issues"]], "info (cleanlab.datalab.internal.issue_manager.multilabel.label.multilabelissuemanager attribute)": [[26, "cleanlab.datalab.internal.issue_manager.multilabel.label.MultilabelIssueManager.info"]], "issue_name (cleanlab.datalab.internal.issue_manager.multilabel.label.multilabelissuemanager attribute)": [[26, "cleanlab.datalab.internal.issue_manager.multilabel.label.MultilabelIssueManager.issue_name"]], "issue_score_key (cleanlab.datalab.internal.issue_manager.multilabel.label.multilabelissuemanager attribute)": [[26, "cleanlab.datalab.internal.issue_manager.multilabel.label.MultilabelIssueManager.issue_score_key"]], "issues (cleanlab.datalab.internal.issue_manager.multilabel.label.multilabelissuemanager attribute)": [[26, "cleanlab.datalab.internal.issue_manager.multilabel.label.MultilabelIssueManager.issues"]], "make_summary() (cleanlab.datalab.internal.issue_manager.multilabel.label.multilabelissuemanager class method)": [[26, "cleanlab.datalab.internal.issue_manager.multilabel.label.MultilabelIssueManager.make_summary"]], "report() (cleanlab.datalab.internal.issue_manager.multilabel.label.multilabelissuemanager class method)": [[26, "cleanlab.datalab.internal.issue_manager.multilabel.label.MultilabelIssueManager.report"]], "summary (cleanlab.datalab.internal.issue_manager.multilabel.label.multilabelissuemanager attribute)": [[26, "cleanlab.datalab.internal.issue_manager.multilabel.label.MultilabelIssueManager.summary"]], "verbosity_levels (cleanlab.datalab.internal.issue_manager.multilabel.label.multilabelissuemanager attribute)": [[26, "cleanlab.datalab.internal.issue_manager.multilabel.label.MultilabelIssueManager.verbosity_levels"]], "noniidissuemanager (class in cleanlab.datalab.internal.issue_manager.noniid)": [[27, "cleanlab.datalab.internal.issue_manager.noniid.NonIIDIssueManager"]], "cleanlab.datalab.internal.issue_manager.noniid": [[27, "module-cleanlab.datalab.internal.issue_manager.noniid"]], "collect_info() (cleanlab.datalab.internal.issue_manager.noniid.noniidissuemanager method)": [[27, "cleanlab.datalab.internal.issue_manager.noniid.NonIIDIssueManager.collect_info"]], "description (cleanlab.datalab.internal.issue_manager.noniid.noniidissuemanager attribute)": [[27, "cleanlab.datalab.internal.issue_manager.noniid.NonIIDIssueManager.description"]], "find_issues() (cleanlab.datalab.internal.issue_manager.noniid.noniidissuemanager method)": [[27, "cleanlab.datalab.internal.issue_manager.noniid.NonIIDIssueManager.find_issues"]], "info (cleanlab.datalab.internal.issue_manager.noniid.noniidissuemanager attribute)": [[27, "cleanlab.datalab.internal.issue_manager.noniid.NonIIDIssueManager.info"]], "issue_name (cleanlab.datalab.internal.issue_manager.noniid.noniidissuemanager attribute)": [[27, "cleanlab.datalab.internal.issue_manager.noniid.NonIIDIssueManager.issue_name"]], "issue_score_key (cleanlab.datalab.internal.issue_manager.noniid.noniidissuemanager attribute)": [[27, "cleanlab.datalab.internal.issue_manager.noniid.NonIIDIssueManager.issue_score_key"]], "issues (cleanlab.datalab.internal.issue_manager.noniid.noniidissuemanager attribute)": [[27, "cleanlab.datalab.internal.issue_manager.noniid.NonIIDIssueManager.issues"]], "make_summary() (cleanlab.datalab.internal.issue_manager.noniid.noniidissuemanager class method)": [[27, "cleanlab.datalab.internal.issue_manager.noniid.NonIIDIssueManager.make_summary"]], "report() (cleanlab.datalab.internal.issue_manager.noniid.noniidissuemanager class method)": [[27, "cleanlab.datalab.internal.issue_manager.noniid.NonIIDIssueManager.report"]], "simplified_kolmogorov_smirnov_test() (in module cleanlab.datalab.internal.issue_manager.noniid)": [[27, "cleanlab.datalab.internal.issue_manager.noniid.simplified_kolmogorov_smirnov_test"]], "summary (cleanlab.datalab.internal.issue_manager.noniid.noniidissuemanager attribute)": [[27, "cleanlab.datalab.internal.issue_manager.noniid.NonIIDIssueManager.summary"]], "verbosity_levels (cleanlab.datalab.internal.issue_manager.noniid.noniidissuemanager attribute)": [[27, "cleanlab.datalab.internal.issue_manager.noniid.NonIIDIssueManager.verbosity_levels"]], "nullissuemanager (class in cleanlab.datalab.internal.issue_manager.null)": [[28, "cleanlab.datalab.internal.issue_manager.null.NullIssueManager"]], "cleanlab.datalab.internal.issue_manager.null": [[28, "module-cleanlab.datalab.internal.issue_manager.null"]], "collect_info() (cleanlab.datalab.internal.issue_manager.null.nullissuemanager method)": [[28, "cleanlab.datalab.internal.issue_manager.null.NullIssueManager.collect_info"]], "description (cleanlab.datalab.internal.issue_manager.null.nullissuemanager attribute)": [[28, "cleanlab.datalab.internal.issue_manager.null.NullIssueManager.description"]], "find_issues() (cleanlab.datalab.internal.issue_manager.null.nullissuemanager method)": [[28, "cleanlab.datalab.internal.issue_manager.null.NullIssueManager.find_issues"]], "info (cleanlab.datalab.internal.issue_manager.null.nullissuemanager attribute)": [[28, "cleanlab.datalab.internal.issue_manager.null.NullIssueManager.info"]], "issue_name (cleanlab.datalab.internal.issue_manager.null.nullissuemanager attribute)": [[28, "cleanlab.datalab.internal.issue_manager.null.NullIssueManager.issue_name"]], "issue_score_key (cleanlab.datalab.internal.issue_manager.null.nullissuemanager attribute)": [[28, "cleanlab.datalab.internal.issue_manager.null.NullIssueManager.issue_score_key"]], "issues (cleanlab.datalab.internal.issue_manager.null.nullissuemanager attribute)": [[28, "cleanlab.datalab.internal.issue_manager.null.NullIssueManager.issues"]], "make_summary() (cleanlab.datalab.internal.issue_manager.null.nullissuemanager class method)": [[28, "cleanlab.datalab.internal.issue_manager.null.NullIssueManager.make_summary"]], "report() (cleanlab.datalab.internal.issue_manager.null.nullissuemanager class method)": [[28, "cleanlab.datalab.internal.issue_manager.null.NullIssueManager.report"]], "summary (cleanlab.datalab.internal.issue_manager.null.nullissuemanager attribute)": [[28, "cleanlab.datalab.internal.issue_manager.null.NullIssueManager.summary"]], "verbosity_levels (cleanlab.datalab.internal.issue_manager.null.nullissuemanager attribute)": [[28, "cleanlab.datalab.internal.issue_manager.null.NullIssueManager.verbosity_levels"]], "default_thresholds (cleanlab.datalab.internal.issue_manager.outlier.outlierissuemanager attribute)": [[29, "cleanlab.datalab.internal.issue_manager.outlier.OutlierIssueManager.DEFAULT_THRESHOLDS"]], "outlierissuemanager (class in cleanlab.datalab.internal.issue_manager.outlier)": [[29, "cleanlab.datalab.internal.issue_manager.outlier.OutlierIssueManager"]], "cleanlab.datalab.internal.issue_manager.outlier": [[29, "module-cleanlab.datalab.internal.issue_manager.outlier"]], "collect_info() (cleanlab.datalab.internal.issue_manager.outlier.outlierissuemanager method)": [[29, "cleanlab.datalab.internal.issue_manager.outlier.OutlierIssueManager.collect_info"]], "description (cleanlab.datalab.internal.issue_manager.outlier.outlierissuemanager attribute)": [[29, "cleanlab.datalab.internal.issue_manager.outlier.OutlierIssueManager.description"]], "find_issues() (cleanlab.datalab.internal.issue_manager.outlier.outlierissuemanager method)": [[29, "cleanlab.datalab.internal.issue_manager.outlier.OutlierIssueManager.find_issues"]], "info (cleanlab.datalab.internal.issue_manager.outlier.outlierissuemanager attribute)": [[29, "cleanlab.datalab.internal.issue_manager.outlier.OutlierIssueManager.info"]], "issue_name (cleanlab.datalab.internal.issue_manager.outlier.outlierissuemanager attribute)": [[29, "cleanlab.datalab.internal.issue_manager.outlier.OutlierIssueManager.issue_name"]], "issue_score_key (cleanlab.datalab.internal.issue_manager.outlier.outlierissuemanager attribute)": [[29, "cleanlab.datalab.internal.issue_manager.outlier.OutlierIssueManager.issue_score_key"]], "issues (cleanlab.datalab.internal.issue_manager.outlier.outlierissuemanager attribute)": [[29, "cleanlab.datalab.internal.issue_manager.outlier.OutlierIssueManager.issues"]], "make_summary() (cleanlab.datalab.internal.issue_manager.outlier.outlierissuemanager class method)": [[29, "cleanlab.datalab.internal.issue_manager.outlier.OutlierIssueManager.make_summary"]], "metric (cleanlab.datalab.internal.issue_manager.outlier.outlierissuemanager attribute)": [[29, "cleanlab.datalab.internal.issue_manager.outlier.OutlierIssueManager.metric"]], "ood (cleanlab.datalab.internal.issue_manager.outlier.outlierissuemanager attribute)": [[29, "cleanlab.datalab.internal.issue_manager.outlier.OutlierIssueManager.ood"]], "report() (cleanlab.datalab.internal.issue_manager.outlier.outlierissuemanager class method)": [[29, "cleanlab.datalab.internal.issue_manager.outlier.OutlierIssueManager.report"]], "summary (cleanlab.datalab.internal.issue_manager.outlier.outlierissuemanager attribute)": [[29, "cleanlab.datalab.internal.issue_manager.outlier.OutlierIssueManager.summary"]], "verbosity_levels (cleanlab.datalab.internal.issue_manager.outlier.outlierissuemanager attribute)": [[29, "cleanlab.datalab.internal.issue_manager.outlier.OutlierIssueManager.verbosity_levels"]], "regressionlabelissuemanager (class in cleanlab.datalab.internal.issue_manager.regression.label)": [[31, "cleanlab.datalab.internal.issue_manager.regression.label.RegressionLabelIssueManager"]], "cleanlab.datalab.internal.issue_manager.regression.label": [[31, "module-cleanlab.datalab.internal.issue_manager.regression.label"]], "collect_info() (cleanlab.datalab.internal.issue_manager.regression.label.regressionlabelissuemanager method)": [[31, "cleanlab.datalab.internal.issue_manager.regression.label.RegressionLabelIssueManager.collect_info"]], "description (cleanlab.datalab.internal.issue_manager.regression.label.regressionlabelissuemanager attribute)": [[31, "cleanlab.datalab.internal.issue_manager.regression.label.RegressionLabelIssueManager.description"]], "find_issues() (cleanlab.datalab.internal.issue_manager.regression.label.regressionlabelissuemanager method)": [[31, "cleanlab.datalab.internal.issue_manager.regression.label.RegressionLabelIssueManager.find_issues"]], "find_issues_with_features() (in module cleanlab.datalab.internal.issue_manager.regression.label)": [[31, "cleanlab.datalab.internal.issue_manager.regression.label.find_issues_with_features"]], "find_issues_with_predictions() (in module cleanlab.datalab.internal.issue_manager.regression.label)": [[31, "cleanlab.datalab.internal.issue_manager.regression.label.find_issues_with_predictions"]], "info (cleanlab.datalab.internal.issue_manager.regression.label.regressionlabelissuemanager attribute)": [[31, "cleanlab.datalab.internal.issue_manager.regression.label.RegressionLabelIssueManager.info"]], "issue_name (cleanlab.datalab.internal.issue_manager.regression.label.regressionlabelissuemanager attribute)": [[31, "cleanlab.datalab.internal.issue_manager.regression.label.RegressionLabelIssueManager.issue_name"]], "issue_score_key (cleanlab.datalab.internal.issue_manager.regression.label.regressionlabelissuemanager attribute)": [[31, "cleanlab.datalab.internal.issue_manager.regression.label.RegressionLabelIssueManager.issue_score_key"]], "issues (cleanlab.datalab.internal.issue_manager.regression.label.regressionlabelissuemanager attribute)": [[31, "cleanlab.datalab.internal.issue_manager.regression.label.RegressionLabelIssueManager.issues"]], "make_summary() (cleanlab.datalab.internal.issue_manager.regression.label.regressionlabelissuemanager class method)": [[31, "cleanlab.datalab.internal.issue_manager.regression.label.RegressionLabelIssueManager.make_summary"]], "report() (cleanlab.datalab.internal.issue_manager.regression.label.regressionlabelissuemanager class method)": [[31, "cleanlab.datalab.internal.issue_manager.regression.label.RegressionLabelIssueManager.report"]], "summary (cleanlab.datalab.internal.issue_manager.regression.label.regressionlabelissuemanager attribute)": [[31, "cleanlab.datalab.internal.issue_manager.regression.label.RegressionLabelIssueManager.summary"]], "verbosity_levels (cleanlab.datalab.internal.issue_manager.regression.label.regressionlabelissuemanager attribute)": [[31, "cleanlab.datalab.internal.issue_manager.regression.label.RegressionLabelIssueManager.verbosity_levels"]], "no_underperforming_cluster_id (cleanlab.datalab.internal.issue_manager.underperforming_group.underperforminggroupissuemanager attribute)": [[32, "cleanlab.datalab.internal.issue_manager.underperforming_group.UnderperformingGroupIssueManager.NO_UNDERPERFORMING_CLUSTER_ID"]], "outlier_cluster_labels (cleanlab.datalab.internal.issue_manager.underperforming_group.underperforminggroupissuemanager attribute)": [[32, "cleanlab.datalab.internal.issue_manager.underperforming_group.UnderperformingGroupIssueManager.OUTLIER_CLUSTER_LABELS"]], "underperforminggroupissuemanager (class in cleanlab.datalab.internal.issue_manager.underperforming_group)": [[32, "cleanlab.datalab.internal.issue_manager.underperforming_group.UnderperformingGroupIssueManager"]], "cleanlab.datalab.internal.issue_manager.underperforming_group": [[32, "module-cleanlab.datalab.internal.issue_manager.underperforming_group"]], "collect_info() (cleanlab.datalab.internal.issue_manager.underperforming_group.underperforminggroupissuemanager method)": [[32, "cleanlab.datalab.internal.issue_manager.underperforming_group.UnderperformingGroupIssueManager.collect_info"]], "description (cleanlab.datalab.internal.issue_manager.underperforming_group.underperforminggroupissuemanager attribute)": [[32, "cleanlab.datalab.internal.issue_manager.underperforming_group.UnderperformingGroupIssueManager.description"]], "filter_cluster_ids() (cleanlab.datalab.internal.issue_manager.underperforming_group.underperforminggroupissuemanager method)": [[32, "cleanlab.datalab.internal.issue_manager.underperforming_group.UnderperformingGroupIssueManager.filter_cluster_ids"]], "find_issues() (cleanlab.datalab.internal.issue_manager.underperforming_group.underperforminggroupissuemanager method)": [[32, "cleanlab.datalab.internal.issue_manager.underperforming_group.UnderperformingGroupIssueManager.find_issues"]], "get_underperforming_clusters() (cleanlab.datalab.internal.issue_manager.underperforming_group.underperforminggroupissuemanager method)": [[32, "cleanlab.datalab.internal.issue_manager.underperforming_group.UnderperformingGroupIssueManager.get_underperforming_clusters"]], "info (cleanlab.datalab.internal.issue_manager.underperforming_group.underperforminggroupissuemanager attribute)": [[32, "cleanlab.datalab.internal.issue_manager.underperforming_group.UnderperformingGroupIssueManager.info"]], "issue_name (cleanlab.datalab.internal.issue_manager.underperforming_group.underperforminggroupissuemanager attribute)": [[32, "cleanlab.datalab.internal.issue_manager.underperforming_group.UnderperformingGroupIssueManager.issue_name"]], "issue_score_key (cleanlab.datalab.internal.issue_manager.underperforming_group.underperforminggroupissuemanager attribute)": [[32, "cleanlab.datalab.internal.issue_manager.underperforming_group.UnderperformingGroupIssueManager.issue_score_key"]], "issues (cleanlab.datalab.internal.issue_manager.underperforming_group.underperforminggroupissuemanager attribute)": [[32, "cleanlab.datalab.internal.issue_manager.underperforming_group.UnderperformingGroupIssueManager.issues"]], "make_summary() (cleanlab.datalab.internal.issue_manager.underperforming_group.underperforminggroupissuemanager class method)": [[32, "cleanlab.datalab.internal.issue_manager.underperforming_group.UnderperformingGroupIssueManager.make_summary"]], "perform_clustering() (cleanlab.datalab.internal.issue_manager.underperforming_group.underperforminggroupissuemanager method)": [[32, "cleanlab.datalab.internal.issue_manager.underperforming_group.UnderperformingGroupIssueManager.perform_clustering"]], "report() (cleanlab.datalab.internal.issue_manager.underperforming_group.underperforminggroupissuemanager class method)": [[32, "cleanlab.datalab.internal.issue_manager.underperforming_group.UnderperformingGroupIssueManager.report"]], "summary (cleanlab.datalab.internal.issue_manager.underperforming_group.underperforminggroupissuemanager attribute)": [[32, "cleanlab.datalab.internal.issue_manager.underperforming_group.UnderperformingGroupIssueManager.summary"]], "verbosity_levels (cleanlab.datalab.internal.issue_manager.underperforming_group.underperforminggroupissuemanager attribute)": [[32, "cleanlab.datalab.internal.issue_manager.underperforming_group.UnderperformingGroupIssueManager.verbosity_levels"]], "modeloutput (class in cleanlab.datalab.internal.model_outputs)": [[33, "cleanlab.datalab.internal.model_outputs.ModelOutput"]], "multiclasspredprobs (class in cleanlab.datalab.internal.model_outputs)": [[33, "cleanlab.datalab.internal.model_outputs.MultiClassPredProbs"]], "multilabelpredprobs (class in cleanlab.datalab.internal.model_outputs)": [[33, "cleanlab.datalab.internal.model_outputs.MultiLabelPredProbs"]], "regressionpredictions (class in cleanlab.datalab.internal.model_outputs)": [[33, "cleanlab.datalab.internal.model_outputs.RegressionPredictions"]], "argument (cleanlab.datalab.internal.model_outputs.multiclasspredprobs attribute)": [[33, "cleanlab.datalab.internal.model_outputs.MultiClassPredProbs.argument"]], "argument (cleanlab.datalab.internal.model_outputs.multilabelpredprobs attribute)": [[33, "cleanlab.datalab.internal.model_outputs.MultiLabelPredProbs.argument"]], "argument (cleanlab.datalab.internal.model_outputs.regressionpredictions attribute)": [[33, "cleanlab.datalab.internal.model_outputs.RegressionPredictions.argument"]], "cleanlab.datalab.internal.model_outputs": [[33, "module-cleanlab.datalab.internal.model_outputs"]], "collect() (cleanlab.datalab.internal.model_outputs.modeloutput method)": [[33, "cleanlab.datalab.internal.model_outputs.ModelOutput.collect"]], "collect() (cleanlab.datalab.internal.model_outputs.multiclasspredprobs method)": [[33, "cleanlab.datalab.internal.model_outputs.MultiClassPredProbs.collect"]], "collect() (cleanlab.datalab.internal.model_outputs.multilabelpredprobs method)": [[33, "cleanlab.datalab.internal.model_outputs.MultiLabelPredProbs.collect"]], "collect() (cleanlab.datalab.internal.model_outputs.regressionpredictions method)": [[33, "cleanlab.datalab.internal.model_outputs.RegressionPredictions.collect"]], "data (cleanlab.datalab.internal.model_outputs.modeloutput attribute)": [[33, "cleanlab.datalab.internal.model_outputs.ModelOutput.data"]], "data (cleanlab.datalab.internal.model_outputs.multiclasspredprobs attribute)": [[33, "cleanlab.datalab.internal.model_outputs.MultiClassPredProbs.data"]], "data (cleanlab.datalab.internal.model_outputs.multilabelpredprobs attribute)": [[33, "cleanlab.datalab.internal.model_outputs.MultiLabelPredProbs.data"]], "data (cleanlab.datalab.internal.model_outputs.regressionpredictions attribute)": [[33, "cleanlab.datalab.internal.model_outputs.RegressionPredictions.data"]], "validate() (cleanlab.datalab.internal.model_outputs.modeloutput method)": [[33, "cleanlab.datalab.internal.model_outputs.ModelOutput.validate"]], "validate() (cleanlab.datalab.internal.model_outputs.multiclasspredprobs method)": [[33, "cleanlab.datalab.internal.model_outputs.MultiClassPredProbs.validate"]], "validate() (cleanlab.datalab.internal.model_outputs.multilabelpredprobs method)": [[33, "cleanlab.datalab.internal.model_outputs.MultiLabelPredProbs.validate"]], "validate() (cleanlab.datalab.internal.model_outputs.regressionpredictions method)": [[33, "cleanlab.datalab.internal.model_outputs.RegressionPredictions.validate"]], "reporter (class in cleanlab.datalab.internal.report)": [[34, "cleanlab.datalab.internal.report.Reporter"]], "cleanlab.datalab.internal.report": [[34, "module-cleanlab.datalab.internal.report"]], "get_report() (cleanlab.datalab.internal.report.reporter method)": [[34, "cleanlab.datalab.internal.report.Reporter.get_report"]], "report() (cleanlab.datalab.internal.report.reporter method)": [[34, "cleanlab.datalab.internal.report.Reporter.report"]], "classification (cleanlab.datalab.internal.task.task attribute)": [[35, "cleanlab.datalab.internal.task.Task.CLASSIFICATION"]], "multilabel (cleanlab.datalab.internal.task.task attribute)": [[35, "cleanlab.datalab.internal.task.Task.MULTILABEL"]], "regression (cleanlab.datalab.internal.task.task attribute)": [[35, "cleanlab.datalab.internal.task.Task.REGRESSION"]], "task (class in cleanlab.datalab.internal.task)": [[35, "cleanlab.datalab.internal.task.Task"]], "__contains__() (cleanlab.datalab.internal.task.task class method)": [[35, "cleanlab.datalab.internal.task.Task.__contains__"]], "__getitem__() (cleanlab.datalab.internal.task.task class method)": [[35, "cleanlab.datalab.internal.task.Task.__getitem__"]], "__iter__() (cleanlab.datalab.internal.task.task class method)": [[35, "cleanlab.datalab.internal.task.Task.__iter__"]], "__len__() (cleanlab.datalab.internal.task.task class method)": [[35, "cleanlab.datalab.internal.task.Task.__len__"]], "cleanlab.datalab.internal.task": [[35, "module-cleanlab.datalab.internal.task"]], "from_str() (cleanlab.datalab.internal.task.task class method)": [[35, "cleanlab.datalab.internal.task.Task.from_str"]], "is_classification (cleanlab.datalab.internal.task.task property)": [[35, "cleanlab.datalab.internal.task.Task.is_classification"]], "is_multilabel (cleanlab.datalab.internal.task.task property)": [[35, "cleanlab.datalab.internal.task.Task.is_multilabel"]], "is_regression (cleanlab.datalab.internal.task.task property)": [[35, "cleanlab.datalab.internal.task.Task.is_regression"]], "cleanlab.dataset": [[37, "module-cleanlab.dataset"]], "find_overlapping_classes() (in module cleanlab.dataset)": [[37, "cleanlab.dataset.find_overlapping_classes"]], "health_summary() (in module cleanlab.dataset)": [[37, "cleanlab.dataset.health_summary"]], "overall_label_health_score() (in module cleanlab.dataset)": [[37, "cleanlab.dataset.overall_label_health_score"]], "rank_classes_by_label_quality() (in module cleanlab.dataset)": [[37, "cleanlab.dataset.rank_classes_by_label_quality"]], "cnn (class in cleanlab.experimental.cifar_cnn)": [[38, "cleanlab.experimental.cifar_cnn.CNN"]], "t_destination (cleanlab.experimental.cifar_cnn.cnn attribute)": [[38, "cleanlab.experimental.cifar_cnn.CNN.T_destination"]], "__call__() (cleanlab.experimental.cifar_cnn.cnn method)": [[38, "cleanlab.experimental.cifar_cnn.CNN.__call__"]], "add_module() (cleanlab.experimental.cifar_cnn.cnn method)": [[38, "cleanlab.experimental.cifar_cnn.CNN.add_module"]], "apply() (cleanlab.experimental.cifar_cnn.cnn method)": [[38, "cleanlab.experimental.cifar_cnn.CNN.apply"]], "bfloat16() (cleanlab.experimental.cifar_cnn.cnn method)": [[38, "cleanlab.experimental.cifar_cnn.CNN.bfloat16"]], "buffers() (cleanlab.experimental.cifar_cnn.cnn method)": [[38, "cleanlab.experimental.cifar_cnn.CNN.buffers"]], "call_bn() (in module cleanlab.experimental.cifar_cnn)": [[38, "cleanlab.experimental.cifar_cnn.call_bn"]], "call_super_init (cleanlab.experimental.cifar_cnn.cnn attribute)": [[38, "cleanlab.experimental.cifar_cnn.CNN.call_super_init"]], "children() (cleanlab.experimental.cifar_cnn.cnn method)": [[38, "cleanlab.experimental.cifar_cnn.CNN.children"]], "cleanlab.experimental.cifar_cnn": [[38, "module-cleanlab.experimental.cifar_cnn"]], "compile() (cleanlab.experimental.cifar_cnn.cnn method)": [[38, "cleanlab.experimental.cifar_cnn.CNN.compile"]], "cpu() (cleanlab.experimental.cifar_cnn.cnn method)": [[38, "cleanlab.experimental.cifar_cnn.CNN.cpu"]], "cuda() (cleanlab.experimental.cifar_cnn.cnn method)": [[38, "cleanlab.experimental.cifar_cnn.CNN.cuda"]], "double() (cleanlab.experimental.cifar_cnn.cnn method)": [[38, "cleanlab.experimental.cifar_cnn.CNN.double"]], "dump_patches (cleanlab.experimental.cifar_cnn.cnn attribute)": [[38, "cleanlab.experimental.cifar_cnn.CNN.dump_patches"]], "eval() (cleanlab.experimental.cifar_cnn.cnn method)": [[38, "cleanlab.experimental.cifar_cnn.CNN.eval"]], "extra_repr() (cleanlab.experimental.cifar_cnn.cnn method)": [[38, "cleanlab.experimental.cifar_cnn.CNN.extra_repr"]], "float() (cleanlab.experimental.cifar_cnn.cnn method)": [[38, "cleanlab.experimental.cifar_cnn.CNN.float"]], "forward() (cleanlab.experimental.cifar_cnn.cnn method)": [[38, "cleanlab.experimental.cifar_cnn.CNN.forward"], [38, "id0"]], "get_buffer() (cleanlab.experimental.cifar_cnn.cnn method)": [[38, "cleanlab.experimental.cifar_cnn.CNN.get_buffer"]], "get_extra_state() (cleanlab.experimental.cifar_cnn.cnn method)": [[38, "cleanlab.experimental.cifar_cnn.CNN.get_extra_state"]], "get_parameter() (cleanlab.experimental.cifar_cnn.cnn method)": [[38, "cleanlab.experimental.cifar_cnn.CNN.get_parameter"]], "get_submodule() (cleanlab.experimental.cifar_cnn.cnn method)": [[38, "cleanlab.experimental.cifar_cnn.CNN.get_submodule"]], "half() (cleanlab.experimental.cifar_cnn.cnn method)": [[38, "cleanlab.experimental.cifar_cnn.CNN.half"]], "ipu() (cleanlab.experimental.cifar_cnn.cnn method)": [[38, "cleanlab.experimental.cifar_cnn.CNN.ipu"]], "load_state_dict() (cleanlab.experimental.cifar_cnn.cnn method)": [[38, "cleanlab.experimental.cifar_cnn.CNN.load_state_dict"]], "modules() (cleanlab.experimental.cifar_cnn.cnn method)": [[38, "cleanlab.experimental.cifar_cnn.CNN.modules"]], "named_buffers() (cleanlab.experimental.cifar_cnn.cnn method)": [[38, "cleanlab.experimental.cifar_cnn.CNN.named_buffers"]], "named_children() (cleanlab.experimental.cifar_cnn.cnn method)": [[38, "cleanlab.experimental.cifar_cnn.CNN.named_children"]], "named_modules() (cleanlab.experimental.cifar_cnn.cnn method)": [[38, "cleanlab.experimental.cifar_cnn.CNN.named_modules"]], "named_parameters() (cleanlab.experimental.cifar_cnn.cnn method)": [[38, "cleanlab.experimental.cifar_cnn.CNN.named_parameters"]], "parameters() (cleanlab.experimental.cifar_cnn.cnn method)": [[38, "cleanlab.experimental.cifar_cnn.CNN.parameters"]], "register_backward_hook() (cleanlab.experimental.cifar_cnn.cnn method)": [[38, "cleanlab.experimental.cifar_cnn.CNN.register_backward_hook"]], "register_buffer() (cleanlab.experimental.cifar_cnn.cnn method)": [[38, "cleanlab.experimental.cifar_cnn.CNN.register_buffer"]], "register_forward_hook() (cleanlab.experimental.cifar_cnn.cnn method)": [[38, "cleanlab.experimental.cifar_cnn.CNN.register_forward_hook"]], "register_forward_pre_hook() (cleanlab.experimental.cifar_cnn.cnn method)": [[38, "cleanlab.experimental.cifar_cnn.CNN.register_forward_pre_hook"]], "register_full_backward_hook() (cleanlab.experimental.cifar_cnn.cnn method)": [[38, "cleanlab.experimental.cifar_cnn.CNN.register_full_backward_hook"]], "register_full_backward_pre_hook() (cleanlab.experimental.cifar_cnn.cnn method)": [[38, "cleanlab.experimental.cifar_cnn.CNN.register_full_backward_pre_hook"]], "register_load_state_dict_post_hook() (cleanlab.experimental.cifar_cnn.cnn method)": [[38, "cleanlab.experimental.cifar_cnn.CNN.register_load_state_dict_post_hook"]], "register_module() (cleanlab.experimental.cifar_cnn.cnn method)": [[38, "cleanlab.experimental.cifar_cnn.CNN.register_module"]], "register_parameter() (cleanlab.experimental.cifar_cnn.cnn method)": [[38, "cleanlab.experimental.cifar_cnn.CNN.register_parameter"]], "register_state_dict_pre_hook() (cleanlab.experimental.cifar_cnn.cnn method)": [[38, "cleanlab.experimental.cifar_cnn.CNN.register_state_dict_pre_hook"]], "requires_grad_() (cleanlab.experimental.cifar_cnn.cnn method)": [[38, "cleanlab.experimental.cifar_cnn.CNN.requires_grad_"]], "set_extra_state() (cleanlab.experimental.cifar_cnn.cnn method)": [[38, "cleanlab.experimental.cifar_cnn.CNN.set_extra_state"]], "share_memory() (cleanlab.experimental.cifar_cnn.cnn method)": [[38, "cleanlab.experimental.cifar_cnn.CNN.share_memory"]], "state_dict() (cleanlab.experimental.cifar_cnn.cnn method)": [[38, "cleanlab.experimental.cifar_cnn.CNN.state_dict"]], "to() (cleanlab.experimental.cifar_cnn.cnn method)": [[38, "cleanlab.experimental.cifar_cnn.CNN.to"]], "to_empty() (cleanlab.experimental.cifar_cnn.cnn method)": [[38, "cleanlab.experimental.cifar_cnn.CNN.to_empty"]], "train() (cleanlab.experimental.cifar_cnn.cnn method)": [[38, "cleanlab.experimental.cifar_cnn.CNN.train"]], "training (cleanlab.experimental.cifar_cnn.cnn attribute)": [[38, "cleanlab.experimental.cifar_cnn.CNN.training"]], "type() (cleanlab.experimental.cifar_cnn.cnn method)": [[38, "cleanlab.experimental.cifar_cnn.CNN.type"]], "xpu() (cleanlab.experimental.cifar_cnn.cnn method)": [[38, "cleanlab.experimental.cifar_cnn.CNN.xpu"]], "zero_grad() (cleanlab.experimental.cifar_cnn.cnn method)": [[38, "cleanlab.experimental.cifar_cnn.CNN.zero_grad"]], "adjust_learning_rate() (in module cleanlab.experimental.coteaching)": [[39, "cleanlab.experimental.coteaching.adjust_learning_rate"]], "cleanlab.experimental.coteaching": [[39, "module-cleanlab.experimental.coteaching"]], "evaluate() (in module cleanlab.experimental.coteaching)": [[39, "cleanlab.experimental.coteaching.evaluate"]], "forget_rate_scheduler() (in module cleanlab.experimental.coteaching)": [[39, "cleanlab.experimental.coteaching.forget_rate_scheduler"]], "initialize_lr_scheduler() (in module cleanlab.experimental.coteaching)": [[39, "cleanlab.experimental.coteaching.initialize_lr_scheduler"]], "loss_coteaching() (in module cleanlab.experimental.coteaching)": [[39, "cleanlab.experimental.coteaching.loss_coteaching"]], "train() (in module cleanlab.experimental.coteaching)": [[39, "cleanlab.experimental.coteaching.train"]], "cleanlab.experimental": [[40, "module-cleanlab.experimental"]], "labelinspector (class in cleanlab.experimental.label_issues_batched)": [[41, "cleanlab.experimental.label_issues_batched.LabelInspector"]], "adj_confident_thresholds_shared (in module cleanlab.experimental.label_issues_batched)": [[41, "cleanlab.experimental.label_issues_batched.adj_confident_thresholds_shared"]], "cleanlab.experimental.label_issues_batched": [[41, "module-cleanlab.experimental.label_issues_batched"]], "find_label_issues_batched() (in module cleanlab.experimental.label_issues_batched)": [[41, "cleanlab.experimental.label_issues_batched.find_label_issues_batched"]], "get_confident_thresholds() (cleanlab.experimental.label_issues_batched.labelinspector method)": [[41, "cleanlab.experimental.label_issues_batched.LabelInspector.get_confident_thresholds"]], "get_label_issues() (cleanlab.experimental.label_issues_batched.labelinspector method)": [[41, "cleanlab.experimental.label_issues_batched.LabelInspector.get_label_issues"]], "get_num_issues() (cleanlab.experimental.label_issues_batched.labelinspector method)": [[41, "cleanlab.experimental.label_issues_batched.LabelInspector.get_num_issues"]], "get_quality_scores() (cleanlab.experimental.label_issues_batched.labelinspector method)": [[41, "cleanlab.experimental.label_issues_batched.LabelInspector.get_quality_scores"]], "labels_shared (in module cleanlab.experimental.label_issues_batched)": [[41, "cleanlab.experimental.label_issues_batched.labels_shared"]], "pred_probs_shared (in module cleanlab.experimental.label_issues_batched)": [[41, "cleanlab.experimental.label_issues_batched.pred_probs_shared"]], "score_label_quality() (cleanlab.experimental.label_issues_batched.labelinspector method)": [[41, "cleanlab.experimental.label_issues_batched.LabelInspector.score_label_quality"]], "split_arr() (in module cleanlab.experimental.label_issues_batched)": [[41, "cleanlab.experimental.label_issues_batched.split_arr"]], "update_confident_thresholds() (cleanlab.experimental.label_issues_batched.labelinspector method)": [[41, "cleanlab.experimental.label_issues_batched.LabelInspector.update_confident_thresholds"]], "cnn (class in cleanlab.experimental.mnist_pytorch)": [[42, "cleanlab.experimental.mnist_pytorch.CNN"]], "simplenet (class in cleanlab.experimental.mnist_pytorch)": [[42, "cleanlab.experimental.mnist_pytorch.SimpleNet"]], "t_destination (cleanlab.experimental.mnist_pytorch.simplenet attribute)": [[42, "cleanlab.experimental.mnist_pytorch.SimpleNet.T_destination"]], "__call__() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[42, "cleanlab.experimental.mnist_pytorch.SimpleNet.__call__"]], "__init_subclass__() (cleanlab.experimental.mnist_pytorch.cnn class method)": [[42, "cleanlab.experimental.mnist_pytorch.CNN.__init_subclass__"]], "add_module() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[42, "cleanlab.experimental.mnist_pytorch.SimpleNet.add_module"]], "apply() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[42, "cleanlab.experimental.mnist_pytorch.SimpleNet.apply"]], "batch_size (cleanlab.experimental.mnist_pytorch.cnn attribute)": [[42, "cleanlab.experimental.mnist_pytorch.CNN.batch_size"]], "bfloat16() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[42, "cleanlab.experimental.mnist_pytorch.SimpleNet.bfloat16"]], "buffers() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[42, "cleanlab.experimental.mnist_pytorch.SimpleNet.buffers"]], "call_super_init (cleanlab.experimental.mnist_pytorch.simplenet attribute)": [[42, "cleanlab.experimental.mnist_pytorch.SimpleNet.call_super_init"]], "children() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[42, "cleanlab.experimental.mnist_pytorch.SimpleNet.children"]], "cleanlab.experimental.mnist_pytorch": [[42, "module-cleanlab.experimental.mnist_pytorch"]], "compile() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[42, "cleanlab.experimental.mnist_pytorch.SimpleNet.compile"]], "cpu() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[42, "cleanlab.experimental.mnist_pytorch.SimpleNet.cpu"]], "cuda() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[42, "cleanlab.experimental.mnist_pytorch.SimpleNet.cuda"]], "dataset (cleanlab.experimental.mnist_pytorch.cnn attribute)": [[42, "cleanlab.experimental.mnist_pytorch.CNN.dataset"]], "double() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[42, "cleanlab.experimental.mnist_pytorch.SimpleNet.double"]], "dump_patches (cleanlab.experimental.mnist_pytorch.simplenet attribute)": [[42, "cleanlab.experimental.mnist_pytorch.SimpleNet.dump_patches"]], "epochs (cleanlab.experimental.mnist_pytorch.cnn attribute)": [[42, "cleanlab.experimental.mnist_pytorch.CNN.epochs"]], "eval() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[42, "cleanlab.experimental.mnist_pytorch.SimpleNet.eval"]], "extra_repr() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[42, "cleanlab.experimental.mnist_pytorch.SimpleNet.extra_repr"]], "fit() (cleanlab.experimental.mnist_pytorch.cnn method)": [[42, "cleanlab.experimental.mnist_pytorch.CNN.fit"], [42, "id0"]], "float() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[42, "cleanlab.experimental.mnist_pytorch.SimpleNet.float"]], "forward() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[42, "cleanlab.experimental.mnist_pytorch.SimpleNet.forward"]], "get_buffer() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[42, "cleanlab.experimental.mnist_pytorch.SimpleNet.get_buffer"]], "get_extra_state() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[42, "cleanlab.experimental.mnist_pytorch.SimpleNet.get_extra_state"]], "get_metadata_routing() (cleanlab.experimental.mnist_pytorch.cnn method)": [[42, "cleanlab.experimental.mnist_pytorch.CNN.get_metadata_routing"]], "get_mnist_dataset() (in module cleanlab.experimental.mnist_pytorch)": [[42, "cleanlab.experimental.mnist_pytorch.get_mnist_dataset"]], "get_parameter() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[42, "cleanlab.experimental.mnist_pytorch.SimpleNet.get_parameter"]], "get_params() (cleanlab.experimental.mnist_pytorch.cnn method)": [[42, "cleanlab.experimental.mnist_pytorch.CNN.get_params"]], "get_sklearn_digits_dataset() (in module cleanlab.experimental.mnist_pytorch)": [[42, "cleanlab.experimental.mnist_pytorch.get_sklearn_digits_dataset"]], "get_submodule() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[42, "cleanlab.experimental.mnist_pytorch.SimpleNet.get_submodule"]], "half() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[42, "cleanlab.experimental.mnist_pytorch.SimpleNet.half"]], "ipu() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[42, "cleanlab.experimental.mnist_pytorch.SimpleNet.ipu"]], "load_state_dict() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[42, "cleanlab.experimental.mnist_pytorch.SimpleNet.load_state_dict"]], "loader (cleanlab.experimental.mnist_pytorch.cnn attribute)": [[42, "cleanlab.experimental.mnist_pytorch.CNN.loader"]], "log_interval (cleanlab.experimental.mnist_pytorch.cnn attribute)": [[42, "cleanlab.experimental.mnist_pytorch.CNN.log_interval"]], "lr (cleanlab.experimental.mnist_pytorch.cnn attribute)": [[42, "cleanlab.experimental.mnist_pytorch.CNN.lr"]], "modules() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[42, "cleanlab.experimental.mnist_pytorch.SimpleNet.modules"]], "momentum (cleanlab.experimental.mnist_pytorch.cnn attribute)": [[42, "cleanlab.experimental.mnist_pytorch.CNN.momentum"]], "named_buffers() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[42, "cleanlab.experimental.mnist_pytorch.SimpleNet.named_buffers"]], "named_children() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[42, "cleanlab.experimental.mnist_pytorch.SimpleNet.named_children"]], "named_modules() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[42, "cleanlab.experimental.mnist_pytorch.SimpleNet.named_modules"]], "named_parameters() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[42, "cleanlab.experimental.mnist_pytorch.SimpleNet.named_parameters"]], "no_cuda (cleanlab.experimental.mnist_pytorch.cnn attribute)": [[42, "cleanlab.experimental.mnist_pytorch.CNN.no_cuda"]], "parameters() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[42, "cleanlab.experimental.mnist_pytorch.SimpleNet.parameters"]], "predict() (cleanlab.experimental.mnist_pytorch.cnn method)": [[42, "cleanlab.experimental.mnist_pytorch.CNN.predict"], [42, "id1"]], "predict_proba() (cleanlab.experimental.mnist_pytorch.cnn method)": [[42, "cleanlab.experimental.mnist_pytorch.CNN.predict_proba"], [42, "id4"]], "register_backward_hook() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[42, "cleanlab.experimental.mnist_pytorch.SimpleNet.register_backward_hook"]], "register_buffer() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[42, "cleanlab.experimental.mnist_pytorch.SimpleNet.register_buffer"]], "register_forward_hook() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[42, "cleanlab.experimental.mnist_pytorch.SimpleNet.register_forward_hook"]], "register_forward_pre_hook() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[42, "cleanlab.experimental.mnist_pytorch.SimpleNet.register_forward_pre_hook"]], "register_full_backward_hook() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[42, "cleanlab.experimental.mnist_pytorch.SimpleNet.register_full_backward_hook"]], "register_full_backward_pre_hook() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[42, "cleanlab.experimental.mnist_pytorch.SimpleNet.register_full_backward_pre_hook"]], "register_load_state_dict_post_hook() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[42, "cleanlab.experimental.mnist_pytorch.SimpleNet.register_load_state_dict_post_hook"]], "register_module() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[42, "cleanlab.experimental.mnist_pytorch.SimpleNet.register_module"]], "register_parameter() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[42, "cleanlab.experimental.mnist_pytorch.SimpleNet.register_parameter"]], "register_state_dict_pre_hook() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[42, "cleanlab.experimental.mnist_pytorch.SimpleNet.register_state_dict_pre_hook"]], "requires_grad_() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[42, "cleanlab.experimental.mnist_pytorch.SimpleNet.requires_grad_"]], "seed (cleanlab.experimental.mnist_pytorch.cnn attribute)": [[42, "cleanlab.experimental.mnist_pytorch.CNN.seed"]], "set_extra_state() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[42, "cleanlab.experimental.mnist_pytorch.SimpleNet.set_extra_state"]], "set_fit_request() (cleanlab.experimental.mnist_pytorch.cnn method)": [[42, "cleanlab.experimental.mnist_pytorch.CNN.set_fit_request"]], "set_params() (cleanlab.experimental.mnist_pytorch.cnn method)": [[42, "cleanlab.experimental.mnist_pytorch.CNN.set_params"]], "set_predict_proba_request() (cleanlab.experimental.mnist_pytorch.cnn method)": [[42, "cleanlab.experimental.mnist_pytorch.CNN.set_predict_proba_request"]], "set_predict_request() (cleanlab.experimental.mnist_pytorch.cnn method)": [[42, "cleanlab.experimental.mnist_pytorch.CNN.set_predict_request"]], "share_memory() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[42, "cleanlab.experimental.mnist_pytorch.SimpleNet.share_memory"]], "state_dict() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[42, "cleanlab.experimental.mnist_pytorch.SimpleNet.state_dict"]], "test_batch_size (cleanlab.experimental.mnist_pytorch.cnn attribute)": [[42, "cleanlab.experimental.mnist_pytorch.CNN.test_batch_size"]], "to() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[42, "cleanlab.experimental.mnist_pytorch.SimpleNet.to"]], "to_empty() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[42, "cleanlab.experimental.mnist_pytorch.SimpleNet.to_empty"]], "train() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[42, "cleanlab.experimental.mnist_pytorch.SimpleNet.train"]], "training (cleanlab.experimental.mnist_pytorch.simplenet attribute)": [[42, "cleanlab.experimental.mnist_pytorch.SimpleNet.training"]], "type() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[42, "cleanlab.experimental.mnist_pytorch.SimpleNet.type"]], "xpu() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[42, "cleanlab.experimental.mnist_pytorch.SimpleNet.xpu"]], "zero_grad() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[42, "cleanlab.experimental.mnist_pytorch.SimpleNet.zero_grad"]], "cleanlab.experimental.span_classification": [[43, "module-cleanlab.experimental.span_classification"]], "display_issues() (in module cleanlab.experimental.span_classification)": [[43, "cleanlab.experimental.span_classification.display_issues"]], "find_label_issues() (in module cleanlab.experimental.span_classification)": [[43, "cleanlab.experimental.span_classification.find_label_issues"]], "get_label_quality_scores() (in module cleanlab.experimental.span_classification)": [[43, "cleanlab.experimental.span_classification.get_label_quality_scores"]], "cleanlab.filter": [[44, "module-cleanlab.filter"]], "find_label_issues() (in module cleanlab.filter)": [[44, "cleanlab.filter.find_label_issues"]], "find_label_issues_using_argmax_confusion_matrix() (in module cleanlab.filter)": [[44, "cleanlab.filter.find_label_issues_using_argmax_confusion_matrix"]], "find_predicted_neq_given() (in module cleanlab.filter)": [[44, "cleanlab.filter.find_predicted_neq_given"]], "pred_probs_by_class (in module cleanlab.filter)": [[44, "cleanlab.filter.pred_probs_by_class"]], "prune_count_matrix_cols (in module cleanlab.filter)": [[44, "cleanlab.filter.prune_count_matrix_cols"]], "cleanlab.internal": [[45, "module-cleanlab.internal"]], "cleanlab.internal.label_quality_utils": [[46, "module-cleanlab.internal.label_quality_utils"]], "get_normalized_entropy() (in module cleanlab.internal.label_quality_utils)": [[46, "cleanlab.internal.label_quality_utils.get_normalized_entropy"]], "cleanlab.internal.latent_algebra": [[47, "module-cleanlab.internal.latent_algebra"]], "compute_inv_noise_matrix() (in module cleanlab.internal.latent_algebra)": [[47, "cleanlab.internal.latent_algebra.compute_inv_noise_matrix"]], "compute_noise_matrix_from_inverse() (in module cleanlab.internal.latent_algebra)": [[47, "cleanlab.internal.latent_algebra.compute_noise_matrix_from_inverse"]], "compute_ps_py_inv_noise_matrix() (in module cleanlab.internal.latent_algebra)": [[47, "cleanlab.internal.latent_algebra.compute_ps_py_inv_noise_matrix"]], "compute_py() (in module cleanlab.internal.latent_algebra)": [[47, "cleanlab.internal.latent_algebra.compute_py"]], "compute_py_inv_noise_matrix() (in module cleanlab.internal.latent_algebra)": [[47, "cleanlab.internal.latent_algebra.compute_py_inv_noise_matrix"]], "compute_pyx() (in module cleanlab.internal.latent_algebra)": [[47, "cleanlab.internal.latent_algebra.compute_pyx"]], "assert_valid_inputs_multiannotator() (in module cleanlab.internal.multiannotator_utils)": [[48, "cleanlab.internal.multiannotator_utils.assert_valid_inputs_multiannotator"]], "assert_valid_pred_probs() (in module cleanlab.internal.multiannotator_utils)": [[48, "cleanlab.internal.multiannotator_utils.assert_valid_pred_probs"]], "check_consensus_label_classes() (in module cleanlab.internal.multiannotator_utils)": [[48, "cleanlab.internal.multiannotator_utils.check_consensus_label_classes"]], "cleanlab.internal.multiannotator_utils": [[48, "module-cleanlab.internal.multiannotator_utils"]], "compute_soft_cross_entropy() (in module cleanlab.internal.multiannotator_utils)": [[48, "cleanlab.internal.multiannotator_utils.compute_soft_cross_entropy"]], "find_best_temp_scaler() (in module cleanlab.internal.multiannotator_utils)": [[48, "cleanlab.internal.multiannotator_utils.find_best_temp_scaler"]], "format_multiannotator_labels() (in module cleanlab.internal.multiannotator_utils)": [[48, "cleanlab.internal.multiannotator_utils.format_multiannotator_labels"]], "temp_scale_pred_probs() (in module cleanlab.internal.multiannotator_utils)": [[48, "cleanlab.internal.multiannotator_utils.temp_scale_pred_probs"]], "aggregator (class in cleanlab.internal.multilabel_scorer)": [[49, "cleanlab.internal.multilabel_scorer.Aggregator"]], "confidence_weighted_entropy (cleanlab.internal.multilabel_scorer.classlabelscorer attribute)": [[49, "cleanlab.internal.multilabel_scorer.ClassLabelScorer.CONFIDENCE_WEIGHTED_ENTROPY"]], "classlabelscorer (class in cleanlab.internal.multilabel_scorer)": [[49, "cleanlab.internal.multilabel_scorer.ClassLabelScorer"]], "multilabelscorer (class in cleanlab.internal.multilabel_scorer)": [[49, "cleanlab.internal.multilabel_scorer.MultilabelScorer"]], "normalized_margin (cleanlab.internal.multilabel_scorer.classlabelscorer attribute)": [[49, "cleanlab.internal.multilabel_scorer.ClassLabelScorer.NORMALIZED_MARGIN"]], "self_confidence (cleanlab.internal.multilabel_scorer.classlabelscorer attribute)": [[49, "cleanlab.internal.multilabel_scorer.ClassLabelScorer.SELF_CONFIDENCE"]], "__call__() (cleanlab.internal.multilabel_scorer.aggregator method)": [[49, "cleanlab.internal.multilabel_scorer.Aggregator.__call__"]], "__call__() (cleanlab.internal.multilabel_scorer.classlabelscorer method)": [[49, "cleanlab.internal.multilabel_scorer.ClassLabelScorer.__call__"]], "__call__() (cleanlab.internal.multilabel_scorer.multilabelscorer method)": [[49, "cleanlab.internal.multilabel_scorer.MultilabelScorer.__call__"]], "__contains__() (cleanlab.internal.multilabel_scorer.classlabelscorer class method)": [[49, "cleanlab.internal.multilabel_scorer.ClassLabelScorer.__contains__"]], "__getitem__() (cleanlab.internal.multilabel_scorer.classlabelscorer class method)": [[49, "cleanlab.internal.multilabel_scorer.ClassLabelScorer.__getitem__"]], "__iter__() (cleanlab.internal.multilabel_scorer.classlabelscorer class method)": [[49, "cleanlab.internal.multilabel_scorer.ClassLabelScorer.__iter__"]], "__len__() (cleanlab.internal.multilabel_scorer.classlabelscorer class method)": [[49, "cleanlab.internal.multilabel_scorer.ClassLabelScorer.__len__"]], "aggregate() (cleanlab.internal.multilabel_scorer.multilabelscorer method)": [[49, "cleanlab.internal.multilabel_scorer.MultilabelScorer.aggregate"]], "cleanlab.internal.multilabel_scorer": [[49, "module-cleanlab.internal.multilabel_scorer"]], "exponential_moving_average() (in module cleanlab.internal.multilabel_scorer)": [[49, "cleanlab.internal.multilabel_scorer.exponential_moving_average"]], "from_str() (cleanlab.internal.multilabel_scorer.classlabelscorer class method)": [[49, "cleanlab.internal.multilabel_scorer.ClassLabelScorer.from_str"]], "get_class_label_quality_scores() (cleanlab.internal.multilabel_scorer.multilabelscorer method)": [[49, "cleanlab.internal.multilabel_scorer.MultilabelScorer.get_class_label_quality_scores"]], "get_cross_validated_multilabel_pred_probs() (in module cleanlab.internal.multilabel_scorer)": [[49, "cleanlab.internal.multilabel_scorer.get_cross_validated_multilabel_pred_probs"]], "get_label_quality_scores() (in module cleanlab.internal.multilabel_scorer)": [[49, "cleanlab.internal.multilabel_scorer.get_label_quality_scores"]], "multilabel_py() (in module cleanlab.internal.multilabel_scorer)": [[49, "cleanlab.internal.multilabel_scorer.multilabel_py"]], "possible_methods (cleanlab.internal.multilabel_scorer.aggregator attribute)": [[49, "cleanlab.internal.multilabel_scorer.Aggregator.possible_methods"]], "softmin() (in module cleanlab.internal.multilabel_scorer)": [[49, "cleanlab.internal.multilabel_scorer.softmin"]], "cleanlab.internal.multilabel_utils": [[50, "module-cleanlab.internal.multilabel_utils"]], "get_onehot_num_classes() (in module cleanlab.internal.multilabel_utils)": [[50, "cleanlab.internal.multilabel_utils.get_onehot_num_classes"]], "int2onehot() (in module cleanlab.internal.multilabel_utils)": [[50, "cleanlab.internal.multilabel_utils.int2onehot"]], "onehot2int() (in module cleanlab.internal.multilabel_utils)": [[50, "cleanlab.internal.multilabel_utils.onehot2int"]], "stack_complement() (in module cleanlab.internal.multilabel_utils)": [[50, "cleanlab.internal.multilabel_utils.stack_complement"]], "cleanlab.internal.neighbor": [[51, "module-cleanlab.internal.neighbor"]], "default_k (in module cleanlab.internal.neighbor.knn_graph)": [[52, "cleanlab.internal.neighbor.knn_graph.DEFAULT_K"]], "cleanlab.internal.neighbor.knn_graph": [[52, "module-cleanlab.internal.neighbor.knn_graph"]], "construct_knn_graph_from_index() (in module cleanlab.internal.neighbor.knn_graph)": [[52, "cleanlab.internal.neighbor.knn_graph.construct_knn_graph_from_index"]], "correct_knn_distances_and_indices() (in module cleanlab.internal.neighbor.knn_graph)": [[52, "cleanlab.internal.neighbor.knn_graph.correct_knn_distances_and_indices"]], "correct_knn_distances_and_indices_with_exact_duplicate_sets_inplace() (in module cleanlab.internal.neighbor.knn_graph)": [[52, "cleanlab.internal.neighbor.knn_graph.correct_knn_distances_and_indices_with_exact_duplicate_sets_inplace"]], "correct_knn_graph() (in module cleanlab.internal.neighbor.knn_graph)": [[52, "cleanlab.internal.neighbor.knn_graph.correct_knn_graph"]], "create_knn_graph_and_index() (in module cleanlab.internal.neighbor.knn_graph)": [[52, "cleanlab.internal.neighbor.knn_graph.create_knn_graph_and_index"]], "features_to_knn() (in module cleanlab.internal.neighbor.knn_graph)": [[52, "cleanlab.internal.neighbor.knn_graph.features_to_knn"]], "high_dimension_cutoff (in module cleanlab.internal.neighbor.metric)": [[53, "cleanlab.internal.neighbor.metric.HIGH_DIMENSION_CUTOFF"]], "row_count_cutoff (in module cleanlab.internal.neighbor.metric)": [[53, "cleanlab.internal.neighbor.metric.ROW_COUNT_CUTOFF"]], "cleanlab.internal.neighbor.metric": [[53, "module-cleanlab.internal.neighbor.metric"]], "decide_default_metric() (in module cleanlab.internal.neighbor.metric)": [[53, "cleanlab.internal.neighbor.metric.decide_default_metric"]], "decide_euclidean_metric() (in module cleanlab.internal.neighbor.metric)": [[53, "cleanlab.internal.neighbor.metric.decide_euclidean_metric"]], "cleanlab.internal.neighbor.search": [[54, "module-cleanlab.internal.neighbor.search"]], "construct_knn() (in module cleanlab.internal.neighbor.search)": [[54, "cleanlab.internal.neighbor.search.construct_knn"]], "cleanlab.internal.outlier": [[55, "module-cleanlab.internal.outlier"]], "correct_precision_errors() (in module cleanlab.internal.outlier)": [[55, "cleanlab.internal.outlier.correct_precision_errors"]], "transform_distances_to_scores() (in module cleanlab.internal.outlier)": [[55, "cleanlab.internal.outlier.transform_distances_to_scores"]], "cleanlab.internal.token_classification_utils": [[56, "module-cleanlab.internal.token_classification_utils"]], "color_sentence() (in module cleanlab.internal.token_classification_utils)": [[56, "cleanlab.internal.token_classification_utils.color_sentence"]], "filter_sentence() (in module cleanlab.internal.token_classification_utils)": [[56, "cleanlab.internal.token_classification_utils.filter_sentence"]], "get_sentence() (in module cleanlab.internal.token_classification_utils)": [[56, "cleanlab.internal.token_classification_utils.get_sentence"]], "mapping() (in module cleanlab.internal.token_classification_utils)": [[56, "cleanlab.internal.token_classification_utils.mapping"]], "merge_probs() (in module cleanlab.internal.token_classification_utils)": [[56, "cleanlab.internal.token_classification_utils.merge_probs"]], "process_token() (in module cleanlab.internal.token_classification_utils)": [[56, "cleanlab.internal.token_classification_utils.process_token"]], "append_extra_datapoint() (in module cleanlab.internal.util)": [[57, "cleanlab.internal.util.append_extra_datapoint"]], "cleanlab.internal.util": [[57, "module-cleanlab.internal.util"]], "clip_noise_rates() (in module cleanlab.internal.util)": [[57, "cleanlab.internal.util.clip_noise_rates"]], "clip_values() (in module cleanlab.internal.util)": [[57, "cleanlab.internal.util.clip_values"]], "compress_int_array() (in module cleanlab.internal.util)": [[57, "cleanlab.internal.util.compress_int_array"]], "confusion_matrix() (in module cleanlab.internal.util)": [[57, "cleanlab.internal.util.confusion_matrix"]], "csr_vstack() (in module cleanlab.internal.util)": [[57, "cleanlab.internal.util.csr_vstack"]], "estimate_pu_f1() (in module cleanlab.internal.util)": [[57, "cleanlab.internal.util.estimate_pu_f1"]], "extract_indices_tf() (in module cleanlab.internal.util)": [[57, "cleanlab.internal.util.extract_indices_tf"]], "force_two_dimensions() (in module cleanlab.internal.util)": [[57, "cleanlab.internal.util.force_two_dimensions"]], "format_labels() (in module cleanlab.internal.util)": [[57, "cleanlab.internal.util.format_labels"]], "get_missing_classes() (in module cleanlab.internal.util)": [[57, "cleanlab.internal.util.get_missing_classes"]], "get_num_classes() (in module cleanlab.internal.util)": [[57, "cleanlab.internal.util.get_num_classes"]], "get_unique_classes() (in module cleanlab.internal.util)": [[57, "cleanlab.internal.util.get_unique_classes"]], "is_tensorflow_dataset() (in module cleanlab.internal.util)": [[57, "cleanlab.internal.util.is_tensorflow_dataset"]], "is_torch_dataset() (in module cleanlab.internal.util)": [[57, "cleanlab.internal.util.is_torch_dataset"]], "num_unique_classes() (in module cleanlab.internal.util)": [[57, "cleanlab.internal.util.num_unique_classes"]], "print_inverse_noise_matrix() (in module cleanlab.internal.util)": [[57, "cleanlab.internal.util.print_inverse_noise_matrix"]], "print_joint_matrix() (in module cleanlab.internal.util)": [[57, "cleanlab.internal.util.print_joint_matrix"]], "print_noise_matrix() (in module cleanlab.internal.util)": [[57, "cleanlab.internal.util.print_noise_matrix"]], "print_square_matrix() (in module cleanlab.internal.util)": [[57, "cleanlab.internal.util.print_square_matrix"]], "remove_noise_from_class() (in module cleanlab.internal.util)": [[57, "cleanlab.internal.util.remove_noise_from_class"]], "round_preserving_row_totals() (in module cleanlab.internal.util)": [[57, "cleanlab.internal.util.round_preserving_row_totals"]], "round_preserving_sum() (in module cleanlab.internal.util)": [[57, "cleanlab.internal.util.round_preserving_sum"]], "smart_display_dataframe() (in module cleanlab.internal.util)": [[57, "cleanlab.internal.util.smart_display_dataframe"]], "subset_x_y() (in module cleanlab.internal.util)": [[57, "cleanlab.internal.util.subset_X_y"]], "subset_data() (in module cleanlab.internal.util)": [[57, "cleanlab.internal.util.subset_data"]], "subset_labels() (in module cleanlab.internal.util)": [[57, "cleanlab.internal.util.subset_labels"]], "train_val_split() (in module cleanlab.internal.util)": [[57, "cleanlab.internal.util.train_val_split"]], "unshuffle_tensorflow_dataset() (in module cleanlab.internal.util)": [[57, "cleanlab.internal.util.unshuffle_tensorflow_dataset"]], "value_counts() (in module cleanlab.internal.util)": [[57, "cleanlab.internal.util.value_counts"]], "value_counts_fill_missing_classes() (in module cleanlab.internal.util)": [[57, "cleanlab.internal.util.value_counts_fill_missing_classes"]], "assert_indexing_works() (in module cleanlab.internal.validation)": [[58, "cleanlab.internal.validation.assert_indexing_works"]], "assert_nonempty_input() (in module cleanlab.internal.validation)": [[58, "cleanlab.internal.validation.assert_nonempty_input"]], "assert_valid_class_labels() (in module cleanlab.internal.validation)": [[58, "cleanlab.internal.validation.assert_valid_class_labels"]], "assert_valid_inputs() (in module cleanlab.internal.validation)": [[58, "cleanlab.internal.validation.assert_valid_inputs"]], "cleanlab.internal.validation": [[58, "module-cleanlab.internal.validation"]], "labels_to_array() (in module cleanlab.internal.validation)": [[58, "cleanlab.internal.validation.labels_to_array"]], "labels_to_list_multilabel() (in module cleanlab.internal.validation)": [[58, "cleanlab.internal.validation.labels_to_list_multilabel"]], "cleanlab.models": [[59, "module-cleanlab.models"]], "keraswrappermodel (class in cleanlab.models.keras)": [[60, "cleanlab.models.keras.KerasWrapperModel"]], "keraswrappersequential (class in cleanlab.models.keras)": [[60, "cleanlab.models.keras.KerasWrapperSequential"]], "cleanlab.models.keras": [[60, "module-cleanlab.models.keras"]], "fit() (cleanlab.models.keras.keraswrappermodel method)": [[60, "cleanlab.models.keras.KerasWrapperModel.fit"]], "fit() (cleanlab.models.keras.keraswrappersequential method)": [[60, "cleanlab.models.keras.KerasWrapperSequential.fit"]], "get_params() (cleanlab.models.keras.keraswrappermodel method)": [[60, "cleanlab.models.keras.KerasWrapperModel.get_params"]], "get_params() (cleanlab.models.keras.keraswrappersequential method)": [[60, "cleanlab.models.keras.KerasWrapperSequential.get_params"]], "predict() (cleanlab.models.keras.keraswrappermodel method)": [[60, "cleanlab.models.keras.KerasWrapperModel.predict"]], "predict() (cleanlab.models.keras.keraswrappersequential method)": [[60, "cleanlab.models.keras.KerasWrapperSequential.predict"]], "predict_proba() (cleanlab.models.keras.keraswrappermodel method)": [[60, "cleanlab.models.keras.KerasWrapperModel.predict_proba"]], "predict_proba() (cleanlab.models.keras.keraswrappersequential method)": [[60, "cleanlab.models.keras.KerasWrapperSequential.predict_proba"]], "set_params() (cleanlab.models.keras.keraswrappermodel method)": [[60, "cleanlab.models.keras.KerasWrapperModel.set_params"]], "set_params() (cleanlab.models.keras.keraswrappersequential method)": [[60, "cleanlab.models.keras.KerasWrapperSequential.set_params"]], "summary() (cleanlab.models.keras.keraswrappermodel method)": [[60, "cleanlab.models.keras.KerasWrapperModel.summary"]], "summary() (cleanlab.models.keras.keraswrappersequential method)": [[60, "cleanlab.models.keras.KerasWrapperSequential.summary"]], "cleanlab.multiannotator": [[61, "module-cleanlab.multiannotator"]], "convert_long_to_wide_dataset() (in module cleanlab.multiannotator)": [[61, "cleanlab.multiannotator.convert_long_to_wide_dataset"]], "get_active_learning_scores() (in module cleanlab.multiannotator)": [[61, "cleanlab.multiannotator.get_active_learning_scores"]], "get_active_learning_scores_ensemble() (in module cleanlab.multiannotator)": [[61, "cleanlab.multiannotator.get_active_learning_scores_ensemble"]], "get_label_quality_multiannotator() (in module cleanlab.multiannotator)": [[61, "cleanlab.multiannotator.get_label_quality_multiannotator"]], "get_label_quality_multiannotator_ensemble() (in module cleanlab.multiannotator)": [[61, "cleanlab.multiannotator.get_label_quality_multiannotator_ensemble"]], "get_majority_vote_label() (in module cleanlab.multiannotator)": [[61, "cleanlab.multiannotator.get_majority_vote_label"]], "cleanlab.multilabel_classification.dataset": [[62, "module-cleanlab.multilabel_classification.dataset"]], "common_multilabel_issues() (in module cleanlab.multilabel_classification.dataset)": [[62, "cleanlab.multilabel_classification.dataset.common_multilabel_issues"]], "multilabel_health_summary() (in module cleanlab.multilabel_classification.dataset)": [[62, "cleanlab.multilabel_classification.dataset.multilabel_health_summary"]], "overall_multilabel_health_score() (in module cleanlab.multilabel_classification.dataset)": [[62, "cleanlab.multilabel_classification.dataset.overall_multilabel_health_score"]], "rank_classes_by_multilabel_quality() (in module cleanlab.multilabel_classification.dataset)": [[62, "cleanlab.multilabel_classification.dataset.rank_classes_by_multilabel_quality"]], "cleanlab.multilabel_classification.filter": [[63, "module-cleanlab.multilabel_classification.filter"]], "find_label_issues() (in module cleanlab.multilabel_classification.filter)": [[63, "cleanlab.multilabel_classification.filter.find_label_issues"]], "find_multilabel_issues_per_class() (in module cleanlab.multilabel_classification.filter)": [[63, "cleanlab.multilabel_classification.filter.find_multilabel_issues_per_class"]], "cleanlab.multilabel_classification": [[64, "module-cleanlab.multilabel_classification"]], "cleanlab.multilabel_classification.rank": [[65, "module-cleanlab.multilabel_classification.rank"]], "get_label_quality_scores() (in module cleanlab.multilabel_classification.rank)": [[65, "cleanlab.multilabel_classification.rank.get_label_quality_scores"]], "get_label_quality_scores_per_class() (in module cleanlab.multilabel_classification.rank)": [[65, "cleanlab.multilabel_classification.rank.get_label_quality_scores_per_class"]], "cleanlab.object_detection.filter": [[66, "module-cleanlab.object_detection.filter"]], "find_label_issues() (in module cleanlab.object_detection.filter)": [[66, "cleanlab.object_detection.filter.find_label_issues"]], "cleanlab.object_detection": [[67, "module-cleanlab.object_detection"]], "cleanlab.object_detection.rank": [[68, "module-cleanlab.object_detection.rank"]], "compute_badloc_box_scores() (in module cleanlab.object_detection.rank)": [[68, "cleanlab.object_detection.rank.compute_badloc_box_scores"]], "compute_overlooked_box_scores() (in module cleanlab.object_detection.rank)": [[68, "cleanlab.object_detection.rank.compute_overlooked_box_scores"]], "compute_swap_box_scores() (in module cleanlab.object_detection.rank)": [[68, "cleanlab.object_detection.rank.compute_swap_box_scores"]], "get_label_quality_scores() (in module cleanlab.object_detection.rank)": [[68, "cleanlab.object_detection.rank.get_label_quality_scores"]], "issues_from_scores() (in module cleanlab.object_detection.rank)": [[68, "cleanlab.object_detection.rank.issues_from_scores"]], "pool_box_scores_per_image() (in module cleanlab.object_detection.rank)": [[68, "cleanlab.object_detection.rank.pool_box_scores_per_image"]], "bounding_box_size_distribution() (in module cleanlab.object_detection.summary)": [[69, "cleanlab.object_detection.summary.bounding_box_size_distribution"]], "calculate_per_class_metrics() (in module cleanlab.object_detection.summary)": [[69, "cleanlab.object_detection.summary.calculate_per_class_metrics"]], "class_label_distribution() (in module cleanlab.object_detection.summary)": [[69, "cleanlab.object_detection.summary.class_label_distribution"]], "cleanlab.object_detection.summary": [[69, "module-cleanlab.object_detection.summary"]], "get_average_per_class_confusion_matrix() (in module cleanlab.object_detection.summary)": [[69, "cleanlab.object_detection.summary.get_average_per_class_confusion_matrix"]], "get_sorted_bbox_count_idxs() (in module cleanlab.object_detection.summary)": [[69, "cleanlab.object_detection.summary.get_sorted_bbox_count_idxs"]], "object_counts_per_image() (in module cleanlab.object_detection.summary)": [[69, "cleanlab.object_detection.summary.object_counts_per_image"]], "plot_class_distribution() (in module cleanlab.object_detection.summary)": [[69, "cleanlab.object_detection.summary.plot_class_distribution"]], "plot_class_size_distributions() (in module cleanlab.object_detection.summary)": [[69, "cleanlab.object_detection.summary.plot_class_size_distributions"]], "visualize() (in module cleanlab.object_detection.summary)": [[69, "cleanlab.object_detection.summary.visualize"]], "outofdistribution (class in cleanlab.outlier)": [[70, "cleanlab.outlier.OutOfDistribution"]], "cleanlab.outlier": [[70, "module-cleanlab.outlier"]], "fit() (cleanlab.outlier.outofdistribution method)": [[70, "cleanlab.outlier.OutOfDistribution.fit"]], "fit_score() (cleanlab.outlier.outofdistribution method)": [[70, "cleanlab.outlier.OutOfDistribution.fit_score"]], "score() (cleanlab.outlier.outofdistribution method)": [[70, "cleanlab.outlier.OutOfDistribution.score"]], "cleanlab.rank": [[71, "module-cleanlab.rank"]], "find_top_issues() (in module cleanlab.rank)": [[71, "cleanlab.rank.find_top_issues"]], "get_confidence_weighted_entropy_for_each_label() (in module cleanlab.rank)": [[71, "cleanlab.rank.get_confidence_weighted_entropy_for_each_label"]], "get_label_quality_ensemble_scores() (in module cleanlab.rank)": [[71, "cleanlab.rank.get_label_quality_ensemble_scores"]], "get_label_quality_scores() (in module cleanlab.rank)": [[71, "cleanlab.rank.get_label_quality_scores"]], "get_normalized_margin_for_each_label() (in module cleanlab.rank)": [[71, "cleanlab.rank.get_normalized_margin_for_each_label"]], "get_self_confidence_for_each_label() (in module cleanlab.rank)": [[71, "cleanlab.rank.get_self_confidence_for_each_label"]], "order_label_issues() (in module cleanlab.rank)": [[71, "cleanlab.rank.order_label_issues"]], "cleanlab.regression": [[72, "module-cleanlab.regression"]], "cleanlearning (class in cleanlab.regression.learn)": [[73, "cleanlab.regression.learn.CleanLearning"]], "__init_subclass__() (cleanlab.regression.learn.cleanlearning class method)": [[73, "cleanlab.regression.learn.CleanLearning.__init_subclass__"]], "cleanlab.regression.learn": [[73, "module-cleanlab.regression.learn"]], "find_label_issues() (cleanlab.regression.learn.cleanlearning method)": [[73, "cleanlab.regression.learn.CleanLearning.find_label_issues"]], "fit() (cleanlab.regression.learn.cleanlearning method)": [[73, "cleanlab.regression.learn.CleanLearning.fit"]], "get_aleatoric_uncertainty() (cleanlab.regression.learn.cleanlearning method)": [[73, "cleanlab.regression.learn.CleanLearning.get_aleatoric_uncertainty"]], "get_epistemic_uncertainty() (cleanlab.regression.learn.cleanlearning method)": [[73, "cleanlab.regression.learn.CleanLearning.get_epistemic_uncertainty"]], "get_label_issues() (cleanlab.regression.learn.cleanlearning method)": [[73, "cleanlab.regression.learn.CleanLearning.get_label_issues"]], "get_metadata_routing() (cleanlab.regression.learn.cleanlearning method)": [[73, "cleanlab.regression.learn.CleanLearning.get_metadata_routing"]], "get_params() (cleanlab.regression.learn.cleanlearning method)": [[73, "cleanlab.regression.learn.CleanLearning.get_params"]], "predict() (cleanlab.regression.learn.cleanlearning method)": [[73, "cleanlab.regression.learn.CleanLearning.predict"]], "save_space() (cleanlab.regression.learn.cleanlearning method)": [[73, "cleanlab.regression.learn.CleanLearning.save_space"]], "score() (cleanlab.regression.learn.cleanlearning method)": [[73, "cleanlab.regression.learn.CleanLearning.score"]], "set_fit_request() (cleanlab.regression.learn.cleanlearning method)": [[73, "cleanlab.regression.learn.CleanLearning.set_fit_request"]], "set_params() (cleanlab.regression.learn.cleanlearning method)": [[73, "cleanlab.regression.learn.CleanLearning.set_params"]], "set_score_request() (cleanlab.regression.learn.cleanlearning method)": [[73, "cleanlab.regression.learn.CleanLearning.set_score_request"]], "cleanlab.regression.rank": [[74, "module-cleanlab.regression.rank"]], "get_label_quality_scores() (in module cleanlab.regression.rank)": [[74, "cleanlab.regression.rank.get_label_quality_scores"]], "cleanlab.segmentation.filter": [[75, "module-cleanlab.segmentation.filter"]], "find_label_issues() (in module cleanlab.segmentation.filter)": [[75, "cleanlab.segmentation.filter.find_label_issues"]], "cleanlab.segmentation": [[76, "module-cleanlab.segmentation"]], "cleanlab.segmentation.rank": [[77, "module-cleanlab.segmentation.rank"]], "get_label_quality_scores() (in module cleanlab.segmentation.rank)": [[77, "cleanlab.segmentation.rank.get_label_quality_scores"]], "issues_from_scores() (in module cleanlab.segmentation.rank)": [[77, "cleanlab.segmentation.rank.issues_from_scores"]], "cleanlab.segmentation.summary": [[78, "module-cleanlab.segmentation.summary"]], "common_label_issues() (in module cleanlab.segmentation.summary)": [[78, "cleanlab.segmentation.summary.common_label_issues"]], "display_issues() (in module cleanlab.segmentation.summary)": [[78, "cleanlab.segmentation.summary.display_issues"]], "filter_by_class() (in module cleanlab.segmentation.summary)": [[78, "cleanlab.segmentation.summary.filter_by_class"]], "cleanlab.token_classification.filter": [[79, "module-cleanlab.token_classification.filter"]], "find_label_issues() (in module cleanlab.token_classification.filter)": [[79, "cleanlab.token_classification.filter.find_label_issues"]], "cleanlab.token_classification": [[80, "module-cleanlab.token_classification"]], "cleanlab.token_classification.rank": [[81, "module-cleanlab.token_classification.rank"]], "get_label_quality_scores() (in module cleanlab.token_classification.rank)": [[81, "cleanlab.token_classification.rank.get_label_quality_scores"]], "issues_from_scores() (in module cleanlab.token_classification.rank)": [[81, "cleanlab.token_classification.rank.issues_from_scores"]], "cleanlab.token_classification.summary": [[82, "module-cleanlab.token_classification.summary"]], "common_label_issues() (in module cleanlab.token_classification.summary)": [[82, "cleanlab.token_classification.summary.common_label_issues"]], "display_issues() (in module cleanlab.token_classification.summary)": [[82, "cleanlab.token_classification.summary.display_issues"]], "filter_by_token() (in module cleanlab.token_classification.summary)": [[82, "cleanlab.token_classification.summary.filter_by_token"]]}})