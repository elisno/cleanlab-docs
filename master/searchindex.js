Search.setIndex({"docnames": ["cleanlab/benchmarking/index", "cleanlab/benchmarking/noise_generation", "cleanlab/classification", "cleanlab/count", "cleanlab/data_valuation", "cleanlab/datalab/datalab", "cleanlab/datalab/guide/_templates/issue_types_tip", "cleanlab/datalab/guide/custom_issue_manager", "cleanlab/datalab/guide/generating_cluster_ids", "cleanlab/datalab/guide/index", "cleanlab/datalab/guide/issue_type_description", "cleanlab/datalab/index", "cleanlab/datalab/internal/data", "cleanlab/datalab/internal/data_issues", "cleanlab/datalab/internal/factory", "cleanlab/datalab/internal/index", "cleanlab/datalab/internal/issue_finder", "cleanlab/datalab/internal/issue_manager/_notices/not_registered", "cleanlab/datalab/internal/issue_manager/data_valuation", "cleanlab/datalab/internal/issue_manager/duplicate", "cleanlab/datalab/internal/issue_manager/imbalance", "cleanlab/datalab/internal/issue_manager/index", "cleanlab/datalab/internal/issue_manager/issue_manager", "cleanlab/datalab/internal/issue_manager/label", "cleanlab/datalab/internal/issue_manager/multilabel/index", "cleanlab/datalab/internal/issue_manager/multilabel/label", "cleanlab/datalab/internal/issue_manager/noniid", "cleanlab/datalab/internal/issue_manager/null", "cleanlab/datalab/internal/issue_manager/outlier", "cleanlab/datalab/internal/issue_manager/regression/index", "cleanlab/datalab/internal/issue_manager/regression/label", "cleanlab/datalab/internal/issue_manager/underperforming_group", "cleanlab/datalab/internal/model_outputs", "cleanlab/datalab/internal/report", "cleanlab/datalab/internal/task", "cleanlab/datalab/optional_dependencies", "cleanlab/dataset", "cleanlab/experimental/cifar_cnn", "cleanlab/experimental/coteaching", "cleanlab/experimental/index", "cleanlab/experimental/label_issues_batched", "cleanlab/experimental/mnist_pytorch", "cleanlab/experimental/span_classification", "cleanlab/filter", "cleanlab/internal/index", "cleanlab/internal/label_quality_utils", "cleanlab/internal/latent_algebra", "cleanlab/internal/multiannotator_utils", "cleanlab/internal/multilabel_scorer", "cleanlab/internal/multilabel_utils", "cleanlab/internal/neighbor/index", "cleanlab/internal/neighbor/knn_graph", "cleanlab/internal/neighbor/metric", "cleanlab/internal/neighbor/search", "cleanlab/internal/outlier", "cleanlab/internal/token_classification_utils", "cleanlab/internal/util", "cleanlab/internal/validation", "cleanlab/models/fasttext", "cleanlab/models/index", "cleanlab/models/keras", "cleanlab/multiannotator", "cleanlab/multilabel_classification/dataset", "cleanlab/multilabel_classification/filter", "cleanlab/multilabel_classification/index", "cleanlab/multilabel_classification/rank", "cleanlab/object_detection/filter", "cleanlab/object_detection/index", "cleanlab/object_detection/rank", "cleanlab/object_detection/summary", "cleanlab/outlier", "cleanlab/rank", "cleanlab/regression/index", "cleanlab/regression/learn", "cleanlab/regression/rank", "cleanlab/segmentation/filter", "cleanlab/segmentation/index", "cleanlab/segmentation/rank", "cleanlab/segmentation/summary", "cleanlab/token_classification/filter", "cleanlab/token_classification/index", "cleanlab/token_classification/rank", "cleanlab/token_classification/summary", "index", "migrating/migrate_v2", "tutorials/clean_learning/index", "tutorials/clean_learning/tabular", "tutorials/clean_learning/text", "tutorials/datalab/audio", "tutorials/datalab/data_monitor", "tutorials/datalab/datalab_advanced", "tutorials/datalab/datalab_quickstart", "tutorials/datalab/image", "tutorials/datalab/index", "tutorials/datalab/tabular", "tutorials/datalab/text", "tutorials/dataset_health", "tutorials/faq", "tutorials/indepth_overview", "tutorials/index", "tutorials/multiannotator", "tutorials/multilabel_classification", "tutorials/object_detection", "tutorials/outliers", "tutorials/pred_probs_cross_val", "tutorials/regression", "tutorials/segmentation", "tutorials/token_classification"], "filenames": ["cleanlab/benchmarking/index.rst", "cleanlab/benchmarking/noise_generation.rst", "cleanlab/classification.rst", "cleanlab/count.rst", "cleanlab/data_valuation.rst", "cleanlab/datalab/datalab.rst", "cleanlab/datalab/guide/_templates/issue_types_tip.rst", "cleanlab/datalab/guide/custom_issue_manager.rst", "cleanlab/datalab/guide/generating_cluster_ids.rst", "cleanlab/datalab/guide/index.rst", "cleanlab/datalab/guide/issue_type_description.rst", "cleanlab/datalab/index.rst", "cleanlab/datalab/internal/data.rst", "cleanlab/datalab/internal/data_issues.rst", "cleanlab/datalab/internal/factory.rst", "cleanlab/datalab/internal/index.rst", "cleanlab/datalab/internal/issue_finder.rst", "cleanlab/datalab/internal/issue_manager/_notices/not_registered.rst", "cleanlab/datalab/internal/issue_manager/data_valuation.rst", "cleanlab/datalab/internal/issue_manager/duplicate.rst", "cleanlab/datalab/internal/issue_manager/imbalance.rst", "cleanlab/datalab/internal/issue_manager/index.rst", "cleanlab/datalab/internal/issue_manager/issue_manager.rst", "cleanlab/datalab/internal/issue_manager/label.rst", "cleanlab/datalab/internal/issue_manager/multilabel/index.rst", "cleanlab/datalab/internal/issue_manager/multilabel/label.rst", "cleanlab/datalab/internal/issue_manager/noniid.rst", "cleanlab/datalab/internal/issue_manager/null.rst", "cleanlab/datalab/internal/issue_manager/outlier.rst", "cleanlab/datalab/internal/issue_manager/regression/index.rst", "cleanlab/datalab/internal/issue_manager/regression/label.rst", "cleanlab/datalab/internal/issue_manager/underperforming_group.rst", "cleanlab/datalab/internal/model_outputs.rst", "cleanlab/datalab/internal/report.rst", "cleanlab/datalab/internal/task.rst", "cleanlab/datalab/optional_dependencies.rst", "cleanlab/dataset.rst", "cleanlab/experimental/cifar_cnn.rst", "cleanlab/experimental/coteaching.rst", "cleanlab/experimental/index.rst", "cleanlab/experimental/label_issues_batched.rst", "cleanlab/experimental/mnist_pytorch.rst", "cleanlab/experimental/span_classification.rst", "cleanlab/filter.rst", "cleanlab/internal/index.rst", "cleanlab/internal/label_quality_utils.rst", "cleanlab/internal/latent_algebra.rst", "cleanlab/internal/multiannotator_utils.rst", "cleanlab/internal/multilabel_scorer.rst", "cleanlab/internal/multilabel_utils.rst", "cleanlab/internal/neighbor/index.rst", "cleanlab/internal/neighbor/knn_graph.rst", "cleanlab/internal/neighbor/metric.rst", "cleanlab/internal/neighbor/search.rst", "cleanlab/internal/outlier.rst", "cleanlab/internal/token_classification_utils.rst", "cleanlab/internal/util.rst", "cleanlab/internal/validation.rst", "cleanlab/models/fasttext.rst", "cleanlab/models/index.rst", "cleanlab/models/keras.rst", "cleanlab/multiannotator.rst", "cleanlab/multilabel_classification/dataset.rst", "cleanlab/multilabel_classification/filter.rst", "cleanlab/multilabel_classification/index.rst", "cleanlab/multilabel_classification/rank.rst", "cleanlab/object_detection/filter.rst", "cleanlab/object_detection/index.rst", "cleanlab/object_detection/rank.rst", "cleanlab/object_detection/summary.rst", "cleanlab/outlier.rst", "cleanlab/rank.rst", "cleanlab/regression/index.rst", "cleanlab/regression/learn.rst", "cleanlab/regression/rank.rst", "cleanlab/segmentation/filter.rst", "cleanlab/segmentation/index.rst", "cleanlab/segmentation/rank.rst", "cleanlab/segmentation/summary.rst", "cleanlab/token_classification/filter.rst", "cleanlab/token_classification/index.rst", "cleanlab/token_classification/rank.rst", "cleanlab/token_classification/summary.rst", "index.rst", "migrating/migrate_v2.rst", "tutorials/clean_learning/index.rst", "tutorials/clean_learning/tabular.ipynb", "tutorials/clean_learning/text.ipynb", "tutorials/datalab/audio.ipynb", "tutorials/datalab/data_monitor.ipynb", "tutorials/datalab/datalab_advanced.ipynb", "tutorials/datalab/datalab_quickstart.ipynb", "tutorials/datalab/image.ipynb", "tutorials/datalab/index.rst", "tutorials/datalab/tabular.ipynb", "tutorials/datalab/text.ipynb", "tutorials/dataset_health.ipynb", "tutorials/faq.ipynb", "tutorials/indepth_overview.ipynb", "tutorials/index.rst", "tutorials/multiannotator.ipynb", "tutorials/multilabel_classification.ipynb", "tutorials/object_detection.ipynb", "tutorials/outliers.ipynb", "tutorials/pred_probs_cross_val.rst", "tutorials/regression.ipynb", "tutorials/segmentation.ipynb", "tutorials/token_classification.ipynb"], "titles": ["benchmarking", "noise_generation", "classification", "count", "data_valuation", "datalab", "&lt;no title&gt;", "Creating Your Own Issues Manager", "Generating Cluster IDs", "Datalab guides", "Datalab Issue Types", "datalab", "data", "data_issues", "factory", "internal", "issue_finder", "&lt;no title&gt;", "data_valuation", "duplicate", "imbalance", "issue_manager", "issue_manager", "label", "multilabel", "label", "noniid", "null", "outlier", "regression", "label", "underperforming_group", "model_outputs", "report", "task", "&lt;no title&gt;", "dataset", "cifar_cnn", "coteaching", "experimental", "label_issues_batched", "mnist_pytorch", "span_classification", "filter", "internal", "label_quality_utils", "latent_algebra", "multiannotator_utils", "multilabel_scorer", "multilabel_utils", "neighbor", "knn_graph", "metric", "search", "outlier", "token_classification_utils", "util", "validation", "fasttext", "models", "keras", "multiannotator", "dataset", "filter", "multilabel_classification", "rank", "filter", "object_detection", "rank", "summary", "outlier", "rank", "regression", "regression.learn", "regression.rank", "filter", "segmentation", "rank", "summary", "filter", "token_classification", "rank", "summary", "cleanlab open-source documentation", "How to migrate to versions &gt;= 2.0.0 from pre 1.0.1", "CleanLearning Tutorials", "Classification with Structured/Tabular Data and Noisy Labels", "Text Classification with Noisy Labels", "Detecting Issues in an Audio Dataset with Datalab", "DataMonitor: Leverage statistics from Datalab to audit new data", "Datalab: Advanced workflows to audit your data", "Datalab: A unified audit to detect all kinds of issues in data and labels", "Detecting Issues in an Image Dataset with Datalab", "Datalab Tutorials", "Detecting Issues in Tabular Data\u00a0(Numeric/Categorical columns) with Datalab", "Detecting Issues in a Text Dataset with Datalab", "Understanding Dataset-level Labeling Issues", "FAQ", "The Workflows of Data-centric AI for Classification with Noisy Labels", "Tutorials", "Estimate Consensus and Annotator Quality for Data Labeled by Multiple Annotators", "Find Label Errors in Multi-Label Classification Datasets", "Finding Label Errors in Object Detection Datasets", "Detect Outliers with Cleanlab and PyTorch Image Models (timm)", "Computing Out-of-Sample Predicted Probabilities with Cross-Validation", "Find Noisy Labels in Regression Datasets", "Find Label Errors in Semantic Segmentation Datasets", "Find Label Errors in Token Classification (Text) Datasets"], "terms": {"noise_gener": [0, 84, 89, 90, 91, 98, 100, 101], "noise_matrix_is_valid": [0, 1], "generate_noisy_label": [0, 1, 89, 90, 91, 98, 100, 101], "generate_noise_matrix_from_trac": [0, 1, 89, 90, 91, 98, 100, 101], "generate_n_rand_probabilities_that_sum_to_m": [0, 1], "randomly_distribute_n_balls_into_k_bin": [0, 1], "helper": [1, 16, 40, 45, 47, 48, 49, 50, 54, 55, 56, 68, 92, 96, 107], "method": [1, 2, 3, 4, 5, 7, 10, 12, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 53, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 86, 87, 88, 89, 90, 91, 92, 94, 95, 97, 100, 101, 102, 103, 104, 105, 106, 107], "ar": [1, 2, 3, 4, 5, 7, 10, 12, 13, 14, 15, 16, 18, 20, 21, 22, 23, 24, 26, 29, 30, 32, 34, 36, 37, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 65, 66, 68, 69, 70, 71, 73, 74, 75, 77, 78, 79, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 94, 95, 97, 98, 100, 101, 102, 103, 104, 105, 107], "us": [1, 2, 3, 4, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 59, 60, 61, 62, 63, 65, 66, 68, 69, 70, 71, 73, 74, 75, 77, 78, 79, 81, 83, 84, 90, 96, 104], "benchmark": [1, 37, 83, 84, 89, 90, 91, 98, 100, 101], "cleanlab": [1, 2, 3, 4, 5, 7, 11, 12, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 65, 66, 68, 69, 70, 71, 73, 74, 75, 77, 78, 79, 81, 82, 84, 89, 90, 91, 96, 99, 104], "": [1, 2, 3, 4, 10, 18, 32, 36, 37, 41, 45, 48, 51, 53, 54, 56, 61, 62, 66, 68, 69, 70, 71, 73, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 100, 101, 102, 103, 104, 105, 106, 107], "core": [1, 40, 43, 75, 77], "algorithm": [1, 2, 8, 10, 31, 38, 42, 53, 54, 56, 61, 70, 79, 81, 83, 97, 98, 100, 107], "These": [1, 2, 3, 4, 5, 8, 10, 21, 37, 39, 41, 42, 43, 44, 51, 59, 61, 62, 65, 69, 70, 74, 78, 79, 81, 82, 86, 87, 88, 89, 91, 92, 94, 95, 97, 98, 100, 101, 102, 103, 105, 106, 107], "introduc": [1, 88, 97, 98], "synthet": [1, 100, 101, 106], "nois": [1, 2, 3, 36, 43, 46, 56, 62, 89, 90, 91, 96, 100, 105], "label": [1, 2, 3, 4, 5, 7, 8, 9, 12, 14, 15, 16, 20, 21, 22, 24, 29, 31, 34, 36, 37, 38, 40, 41, 42, 43, 45, 46, 47, 48, 49, 56, 57, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 90, 99, 103, 104], "classif": [1, 3, 4, 5, 7, 10, 12, 14, 16, 32, 34, 36, 40, 42, 43, 46, 48, 49, 56, 61, 62, 63, 64, 65, 70, 71, 79, 80, 81, 82, 83, 84, 85, 88, 89, 90, 91, 99, 100, 103, 104, 105, 106], "dataset": [1, 2, 3, 4, 5, 7, 9, 10, 12, 13, 14, 16, 18, 19, 20, 22, 25, 26, 27, 28, 30, 31, 39, 40, 41, 42, 43, 46, 48, 52, 56, 60, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 86, 90, 94, 99, 100, 104], "specif": [1, 3, 5, 9, 14, 15, 16, 27, 33, 34, 39, 51, 52, 53, 59, 63, 66, 69, 78, 82, 92, 94, 95, 98, 102, 107], "thi": [1, 2, 3, 4, 5, 6, 7, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 65, 66, 68, 69, 70, 71, 73, 74, 75, 77, 78, 79, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 100, 101, 102, 103, 104, 105, 106, 107], "modul": [1, 3, 13, 14, 15, 16, 21, 24, 29, 32, 33, 34, 36, 37, 38, 39, 40, 41, 43, 48, 50, 51, 53, 54, 56, 59, 61, 66, 69, 70, 71, 83, 92, 97, 101], "provid": [1, 2, 3, 4, 5, 7, 8, 9, 10, 14, 16, 18, 23, 30, 34, 36, 37, 38, 40, 41, 43, 46, 50, 51, 53, 54, 56, 60, 61, 62, 63, 68, 69, 70, 71, 73, 75, 77, 78, 81, 82, 83, 86, 87, 88, 89, 90, 91, 92, 94, 95, 97, 98, 100, 103, 104, 105, 106, 107], "gener": [1, 2, 3, 7, 10, 18, 23, 25, 33, 36, 48, 51, 53, 56, 57, 70, 71, 73, 78, 87, 88, 89, 90, 91, 92, 95, 96, 97, 98, 100, 101, 103, 104, 106, 107], "valid": [1, 2, 3, 5, 10, 12, 32, 34, 36, 43, 44, 46, 47, 48, 51, 53, 54, 56, 61, 63, 66, 69, 71, 73, 74, 82, 84, 86, 87, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 101, 102, 105, 106, 107], "matric": [1, 3, 46, 97], "which": [1, 2, 3, 5, 7, 10, 12, 13, 14, 16, 18, 22, 26, 32, 33, 34, 36, 37, 41, 42, 43, 46, 48, 52, 53, 55, 56, 61, 62, 63, 66, 68, 69, 70, 71, 73, 74, 77, 78, 79, 81, 83, 84, 86, 87, 88, 89, 90, 91, 92, 94, 95, 97, 98, 100, 101, 102, 103, 104, 105, 107], "learn": [1, 2, 3, 4, 5, 9, 10, 14, 16, 22, 30, 33, 38, 39, 40, 41, 43, 45, 47, 52, 53, 56, 59, 61, 63, 70, 72, 74, 77, 81, 83, 86, 87, 88, 90, 92, 94, 95, 96, 100, 101, 105], "i": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 16, 18, 19, 20, 22, 23, 25, 26, 27, 28, 30, 31, 32, 33, 34, 36, 37, 38, 40, 41, 42, 43, 45, 46, 47, 48, 51, 52, 53, 54, 55, 56, 57, 60, 61, 62, 63, 65, 66, 68, 69, 70, 71, 73, 74, 75, 77, 78, 79, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 100, 101, 102, 103, 105, 106, 107], "possibl": [1, 2, 3, 7, 10, 36, 37, 41, 43, 45, 46, 48, 63, 64, 65, 66, 68, 69, 70, 71, 73, 79, 81, 82, 89, 91, 97, 98, 100, 101, 102, 105, 106, 107], "noisi": [1, 2, 3, 10, 36, 38, 41, 43, 46, 56, 62, 63, 65, 71, 73, 74, 75, 77, 78, 84, 89, 90, 91, 94, 95, 97, 99, 100], "given": [1, 2, 3, 5, 10, 14, 30, 36, 37, 38, 40, 41, 42, 43, 45, 46, 47, 48, 55, 56, 61, 62, 63, 66, 68, 69, 70, 71, 73, 74, 78, 79, 81, 82, 84, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 100, 102, 103, 105, 106, 107], "matrix": [1, 2, 3, 5, 10, 16, 18, 31, 36, 43, 45, 46, 49, 51, 56, 57, 63, 66, 68, 69, 70, 71, 94, 102, 103], "trace": [1, 89, 90, 91, 98, 100, 101], "valu": [1, 2, 3, 4, 5, 10, 12, 13, 16, 18, 22, 26, 27, 32, 34, 36, 37, 38, 40, 41, 43, 45, 46, 48, 51, 52, 53, 54, 56, 61, 62, 63, 65, 66, 68, 69, 70, 71, 73, 74, 75, 77, 78, 79, 82, 87, 88, 89, 91, 92, 94, 95, 97, 98, 100, 101, 102, 103, 105, 106, 107], "more": [1, 2, 3, 4, 5, 7, 9, 10, 13, 14, 16, 18, 26, 36, 37, 40, 41, 42, 45, 48, 51, 52, 53, 54, 56, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 73, 74, 77, 78, 79, 81, 83, 88, 90, 92, 94, 95, 96, 97, 100, 101, 102, 103, 106, 107], "function": [1, 2, 3, 4, 5, 7, 10, 13, 14, 16, 23, 26, 30, 36, 37, 38, 40, 41, 42, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 60, 61, 62, 63, 65, 66, 68, 69, 70, 71, 73, 74, 75, 77, 78, 79, 81, 82, 86, 87, 88, 89, 91, 92, 94, 95, 96, 97, 98, 100, 101, 102, 106, 107], "noise_matrix": [1, 2, 3, 10, 46, 56, 89, 90, 91, 98, 100, 101], "py": [1, 3, 33, 37, 38, 43, 46, 48, 87, 88, 89, 90, 91, 92, 94, 95, 97, 98, 100, 101], "verbos": [1, 2, 5, 7, 16, 18, 19, 20, 22, 23, 25, 26, 27, 28, 30, 31, 33, 36, 40, 43, 61, 62, 63, 68, 70, 71, 73, 75, 77, 78, 82, 90, 98, 100], "fals": [1, 2, 3, 5, 7, 12, 18, 19, 20, 22, 23, 25, 26, 28, 30, 31, 33, 34, 36, 37, 40, 41, 43, 47, 55, 56, 57, 61, 62, 63, 65, 66, 68, 69, 70, 71, 73, 75, 77, 78, 79, 87, 88, 89, 90, 91, 92, 94, 95, 97, 98, 100, 102, 103, 105, 106], "sourc": [1, 2, 3, 4, 5, 7, 9, 10, 11, 12, 13, 14, 16, 18, 19, 20, 22, 23, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 60, 61, 62, 63, 65, 66, 68, 69, 70, 71, 73, 74, 75, 77, 78, 79, 81, 82, 89], "prior": [1, 2, 3, 36, 43, 46, 48], "repres": [1, 2, 3, 7, 10, 12, 16, 18, 26, 32, 34, 36, 40, 43, 46, 49, 51, 52, 54, 56, 61, 62, 63, 66, 68, 69, 70, 71, 73, 75, 77, 78, 82, 86, 87, 88, 89, 90, 91, 92, 94, 95, 97, 98, 100, 101, 102, 103, 105, 107], "p": [1, 2, 3, 5, 10, 36, 43, 45, 46, 54, 56, 61, 69, 70, 71, 75, 94, 95, 98, 100, 107], "true_label": [1, 2, 3, 36, 46, 56, 98, 100], "k": [1, 2, 3, 4, 5, 8, 10, 12, 16, 18, 19, 23, 26, 28, 31, 36, 40, 42, 43, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 61, 62, 63, 64, 65, 66, 69, 70, 71, 73, 75, 77, 78, 79, 81, 82, 86, 88, 89, 90, 91, 97, 98, 100, 101, 102, 103, 106, 107], "check": [1, 2, 5, 6, 9, 10, 12, 16, 27, 34, 37, 40, 41, 47, 57, 60, 66, 69, 73, 83, 86, 87, 88, 89, 90, 91, 92, 97, 98, 100, 101, 105], "learnabl": 1, "mean": [1, 2, 7, 8, 12, 13, 22, 26, 38, 41, 46, 48, 54, 68, 73, 87, 91, 95, 97, 98, 100, 101, 102, 103, 105], "achiev": [1, 2, 37, 38, 41, 73, 97, 100, 107], "better": [1, 5, 10, 43, 52, 61, 63, 71, 73, 74, 83, 87, 88, 91, 94, 95, 97, 98, 101, 102, 103, 107], "than": [1, 2, 3, 4, 7, 9, 10, 26, 28, 31, 36, 43, 52, 56, 60, 61, 66, 68, 70, 71, 73, 77, 81, 86, 88, 89, 91, 92, 94, 95, 97, 98, 100, 101, 102, 103, 104, 105, 106, 107], "random": [1, 2, 3, 7, 10, 18, 31, 40, 48, 51, 61, 71, 73, 86, 88, 89, 90, 91, 92, 94, 97, 98, 100, 101, 103], "perform": [1, 2, 4, 7, 10, 26, 28, 31, 37, 41, 48, 50, 51, 52, 69, 73, 83, 86, 87, 90, 97, 98, 100, 101, 104, 105], "averag": [1, 3, 5, 10, 22, 28, 36, 37, 41, 48, 54, 61, 62, 69, 70, 71, 97, 100, 103], "amount": [1, 3, 92], "paramet": [1, 2, 3, 4, 5, 9, 12, 13, 14, 16, 18, 19, 20, 22, 23, 25, 26, 27, 28, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 48, 49, 51, 52, 53, 54, 55, 56, 57, 60, 61, 62, 63, 65, 66, 68, 69, 70, 71, 73, 74, 75, 77, 78, 79, 81, 82, 86, 87, 88, 91, 92, 95], "np": [1, 2, 3, 4, 5, 7, 16, 18, 31, 36, 38, 40, 42, 43, 45, 46, 48, 49, 51, 53, 54, 55, 56, 57, 60, 61, 62, 63, 65, 66, 68, 69, 70, 71, 73, 74, 75, 78, 79, 81, 82, 86, 87, 88, 89, 90, 91, 92, 94, 96, 97, 98, 100, 101, 102, 103, 105, 106, 107], "ndarrai": [1, 2, 3, 4, 5, 16, 23, 25, 26, 30, 31, 32, 36, 38, 40, 42, 43, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 61, 62, 63, 65, 66, 68, 69, 70, 71, 73, 74, 75, 77, 78, 81, 107], "an": [1, 2, 3, 4, 5, 7, 9, 10, 12, 13, 14, 16, 18, 19, 20, 22, 23, 25, 26, 28, 30, 31, 32, 33, 34, 36, 37, 38, 40, 41, 42, 43, 45, 46, 47, 48, 51, 53, 54, 56, 57, 60, 61, 62, 63, 65, 66, 68, 69, 70, 71, 73, 75, 77, 78, 82, 83, 86, 87, 89, 90, 91, 94, 95, 96, 98, 100, 101, 102, 103, 104, 105, 106, 107], "arrai": [1, 2, 3, 4, 5, 7, 10, 12, 16, 18, 26, 32, 36, 38, 40, 41, 42, 43, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 60, 61, 62, 63, 65, 66, 68, 69, 70, 71, 73, 74, 75, 77, 78, 79, 81, 82, 86, 87, 88, 89, 90, 91, 95, 97, 98, 100, 101, 102, 103, 105, 106, 107], "shape": [1, 2, 3, 4, 5, 16, 18, 36, 38, 40, 42, 43, 45, 46, 47, 48, 51, 52, 54, 55, 56, 60, 61, 62, 63, 65, 66, 68, 69, 70, 71, 73, 74, 75, 77, 78, 79, 81, 82, 88, 96, 97, 98, 101, 102, 103, 106, 107], "condit": [1, 2, 3, 46, 52, 55, 56, 71, 92, 98, 107], "probabl": [1, 2, 3, 5, 8, 10, 16, 23, 25, 28, 32, 36, 40, 41, 42, 43, 45, 46, 48, 49, 55, 56, 60, 61, 62, 63, 65, 66, 68, 69, 70, 71, 73, 75, 77, 78, 79, 81, 82, 83, 84, 96, 97, 98, 99, 101, 102, 103, 106, 107], "k_": [1, 2, 3, 46, 56], "k_y": [1, 2, 3, 46, 56], "contain": [1, 2, 3, 5, 10, 12, 13, 18, 19, 20, 22, 23, 25, 26, 27, 28, 30, 31, 32, 33, 34, 36, 37, 38, 40, 41, 43, 45, 46, 50, 51, 55, 56, 60, 61, 62, 63, 65, 66, 68, 69, 70, 71, 73, 74, 77, 78, 79, 81, 82, 84, 86, 87, 88, 90, 91, 92, 94, 95, 96, 97, 98, 100, 101, 102, 103, 105, 106], "fraction": [1, 2, 3, 10, 20, 38, 46, 56, 61, 73, 94, 97], "exampl": [1, 2, 3, 4, 5, 7, 8, 10, 12, 13, 14, 16, 18, 19, 20, 22, 23, 25, 26, 27, 28, 30, 31, 33, 34, 36, 37, 38, 40, 41, 42, 43, 45, 46, 48, 49, 51, 54, 55, 56, 60, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 73, 74, 75, 77, 78, 79, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 94, 95, 96, 100, 101, 102, 104, 105, 106, 107], "everi": [1, 2, 3, 4, 5, 16, 37, 41, 43, 46, 55, 56, 63, 71, 73, 74, 86, 88, 89, 90, 91, 92, 94, 95, 97, 100, 102, 104, 106, 107], "class": [1, 2, 3, 4, 5, 7, 9, 12, 13, 14, 16, 18, 19, 20, 22, 23, 25, 26, 27, 28, 30, 31, 32, 33, 34, 36, 37, 38, 40, 41, 42, 43, 45, 46, 47, 48, 49, 53, 55, 56, 60, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 73, 75, 77, 78, 79, 81, 82, 83, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 100, 101, 102, 103, 104, 105, 107], "other": [1, 2, 3, 5, 10, 16, 22, 27, 36, 37, 39, 40, 41, 43, 46, 49, 51, 56, 57, 59, 61, 62, 65, 69, 70, 71, 73, 78, 86, 87, 88, 89, 90, 91, 92, 94, 95, 97, 98, 101, 103, 106, 107], "assum": [1, 2, 3, 12, 43, 46, 51, 55, 56, 71, 75, 78, 97, 101, 103, 105, 106, 107], "column": [1, 2, 3, 5, 10, 12, 13, 30, 36, 40, 43, 46, 48, 49, 52, 55, 56, 61, 62, 63, 65, 66, 69, 70, 71, 73, 78, 79, 81, 82, 86, 87, 88, 89, 90, 91, 92, 95, 96, 97, 98, 100, 101, 102, 105, 106, 107], "sum": [1, 2, 3, 26, 31, 32, 36, 46, 48, 56, 62, 63, 65, 68, 73, 89, 90, 91, 92, 97, 98, 100, 101, 106, 107], "1": [1, 2, 3, 4, 5, 7, 10, 12, 16, 18, 19, 20, 22, 23, 25, 26, 27, 28, 30, 31, 32, 33, 34, 36, 37, 38, 40, 41, 42, 43, 45, 46, 47, 48, 49, 51, 54, 55, 56, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 73, 74, 75, 77, 78, 79, 81, 82, 96, 97, 104], "each": [1, 2, 3, 4, 5, 7, 8, 9, 12, 13, 14, 16, 20, 22, 23, 25, 26, 31, 32, 33, 36, 37, 38, 40, 41, 42, 43, 45, 46, 48, 49, 51, 53, 54, 56, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 73, 74, 75, 77, 78, 79, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 100, 101, 102, 103, 104, 105, 106, 107], "true": [1, 2, 3, 5, 7, 10, 12, 18, 19, 20, 22, 23, 25, 26, 28, 30, 31, 33, 34, 36, 37, 38, 40, 41, 43, 46, 48, 51, 55, 56, 57, 60, 61, 62, 63, 66, 68, 69, 70, 71, 73, 75, 77, 78, 82, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 100, 101, 102, 103, 105, 106, 107], "return": [1, 2, 3, 4, 5, 10, 12, 13, 14, 16, 18, 19, 20, 22, 23, 25, 26, 27, 28, 30, 31, 33, 34, 36, 37, 40, 41, 42, 43, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 60, 61, 62, 63, 65, 66, 68, 69, 70, 71, 73, 74, 75, 77, 78, 79, 81, 82, 83, 87, 88, 89, 90, 91, 92, 95, 96, 97, 98, 100, 101, 102, 103, 105, 106, 107], "type": [1, 2, 3, 4, 5, 6, 7, 11, 12, 13, 14, 16, 18, 19, 20, 22, 23, 25, 26, 27, 28, 30, 31, 32, 33, 34, 36, 37, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 59, 61, 62, 63, 65, 66, 68, 69, 70, 71, 73, 74, 75, 77, 78, 79, 81, 82, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 101, 102, 105, 106, 107], "bool": [1, 2, 3, 5, 12, 18, 19, 20, 22, 23, 25, 26, 28, 30, 31, 33, 34, 36, 37, 40, 41, 43, 48, 51, 55, 56, 61, 63, 65, 66, 68, 69, 70, 71, 73, 75, 77, 78, 82], "is_valid": 1, "whether": [1, 3, 5, 10, 12, 13, 18, 19, 20, 22, 23, 25, 26, 28, 30, 31, 33, 37, 40, 41, 43, 51, 56, 61, 62, 63, 65, 66, 82, 87, 88, 91, 92, 94, 95, 96, 97, 98, 105, 107], "from": [1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 16, 18, 22, 23, 27, 30, 31, 32, 33, 35, 36, 37, 38, 40, 41, 42, 43, 46, 48, 49, 51, 52, 54, 55, 56, 61, 63, 65, 68, 69, 70, 71, 73, 74, 79, 81, 82, 83, 88, 92, 94, 95, 96, 97, 100, 101, 102, 103, 104, 106, 107], "perfect": [1, 2, 36, 73, 98, 102], "exactli": [1, 3, 10, 36, 37, 41, 43, 64, 70, 90, 91, 92, 94, 95, 98], "yield": [1, 37, 41, 89], "between": [1, 5, 10, 15, 16, 21, 22, 24, 26, 29, 32, 36, 37, 38, 39, 40, 41, 43, 44, 45, 47, 51, 52, 53, 54, 59, 61, 62, 65, 68, 70, 71, 73, 74, 77, 81, 82, 84, 87, 88, 90, 91, 92, 94, 95, 96, 98, 100, 101, 102, 103, 105, 106, 107], "below": [1, 3, 4, 5, 10, 36, 37, 40, 41, 43, 45, 48, 54, 61, 62, 63, 68, 69, 77, 81, 84, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 100, 101, 102, 103, 104, 105, 106, 107], "we": [1, 2, 3, 5, 7, 10, 13, 22, 37, 40, 41, 43, 48, 56, 57, 60, 61, 68, 69, 71, 83, 84, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 100, 101, 102, 103, 104, 105, 106, 107], "loop": [1, 3, 46, 56, 92, 102], "implement": [1, 2, 3, 4, 9, 14, 22, 37, 38, 40, 41, 46, 50, 52, 53, 56, 70, 73, 83, 86, 88, 90, 94, 103, 104], "what": [1, 5, 9, 10, 16, 33, 36, 38, 40, 43, 61, 62, 66, 68, 86, 87, 88, 89, 90, 91, 92, 94, 95, 100, 101, 102, 103, 105, 106, 107], "doe": [1, 2, 3, 7, 10, 40, 41, 43, 48, 51, 54, 57, 68, 69, 73, 75, 77, 81, 87, 88, 90, 91, 92, 94, 95, 96, 101, 105, 106], "do": [1, 2, 5, 9, 10, 36, 40, 41, 56, 57, 70, 71, 75, 86, 87, 88, 89, 90, 91, 92, 94, 95, 100, 101, 102, 103, 105, 106, 107], "fast": 1, "explain": [1, 10], "python": [1, 2, 41, 60, 73, 87, 88, 90, 91, 92, 94, 95, 96, 98, 103], "pseudocod": [1, 104], "happen": [1, 10, 43, 63, 89, 95, 100, 106], "n": [1, 2, 3, 5, 7, 36, 37, 40, 41, 43, 45, 46, 47, 48, 51, 52, 54, 55, 56, 61, 62, 63, 65, 66, 68, 69, 70, 71, 73, 74, 75, 77, 78, 81, 86, 87, 88, 89, 92, 95, 96, 97, 100, 101, 102, 105, 106, 107], "without": [1, 2, 5, 9, 10, 12, 14, 20, 37, 41, 53, 65, 73, 83, 87, 88, 89, 95, 97, 98, 102, 103], "ani": [1, 2, 3, 5, 7, 9, 10, 12, 13, 14, 16, 18, 19, 20, 22, 23, 25, 26, 27, 28, 30, 31, 36, 37, 40, 41, 43, 45, 47, 54, 55, 56, 60, 61, 63, 65, 66, 68, 69, 71, 73, 75, 77, 78, 83, 86, 87, 88, 89, 90, 91, 92, 94, 95, 97, 100, 101, 102, 103, 104, 105, 106], "distinct": [1, 18, 56, 107], "natur": [1, 10, 100, 103], "number": [1, 2, 3, 4, 5, 7, 8, 10, 12, 13, 16, 18, 19, 20, 22, 23, 25, 26, 28, 30, 31, 33, 34, 36, 37, 38, 40, 41, 43, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 61, 62, 63, 65, 66, 68, 69, 70, 71, 73, 74, 75, 77, 78, 81, 82, 84, 88, 89, 90, 91, 92, 94, 95, 97, 98, 100, 101, 102, 106, 107], "0": [1, 2, 3, 4, 5, 7, 10, 12, 18, 19, 20, 22, 23, 25, 26, 27, 28, 30, 31, 32, 36, 37, 38, 40, 41, 42, 43, 45, 46, 47, 48, 49, 51, 54, 55, 56, 61, 62, 63, 65, 66, 68, 69, 70, 71, 73, 74, 75, 77, 78, 79, 81, 82, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 100, 101, 102, 103, 104, 105, 106, 107], "count_joint": 1, "len": [1, 2, 3, 7, 36, 40, 46, 55, 56, 57, 70, 71, 73, 86, 87, 89, 90, 91, 92, 95, 96, 97, 98, 100, 101, 102, 103, 105, 107], "y": [1, 2, 3, 5, 8, 18, 30, 31, 41, 46, 48, 56, 57, 60, 69, 73, 74, 87, 88, 89, 90, 91, 94, 97, 98, 100, 101, 103, 105], "round": [1, 40, 43, 56, 73, 97, 105], "astyp": [1, 100], "int": [1, 2, 3, 4, 5, 7, 16, 18, 19, 20, 22, 23, 25, 26, 27, 28, 30, 31, 33, 36, 37, 38, 40, 41, 43, 48, 49, 51, 52, 53, 54, 55, 56, 57, 62, 63, 65, 69, 70, 71, 73, 75, 77, 78, 79, 82, 88, 90, 92, 102, 103], "rang": [1, 3, 5, 7, 12, 46, 48, 54, 56, 69, 73, 74, 89, 92, 96, 97, 98, 100, 101, 102, 103, 105, 106, 107], "idx_flip": 1, "where": [1, 2, 3, 5, 7, 10, 12, 13, 16, 22, 36, 40, 43, 46, 47, 48, 49, 51, 52, 54, 55, 56, 57, 61, 62, 63, 65, 66, 68, 69, 70, 71, 73, 74, 75, 77, 78, 79, 81, 87, 88, 92, 94, 95, 97, 98, 100, 101, 102, 103, 104, 105, 106, 107], "pragma": 1, "cover": [1, 3, 84, 96, 97], "choic": [1, 8, 43, 52, 54, 92, 97, 101, 103], "replac": [1, 55, 60, 71, 86, 87, 89, 90, 91, 92, 95, 96, 97, 100, 103], "max_trace_prob": 1, "min_trace_prob": 1, "1e": [1, 3, 51, 71, 88, 89, 90, 91], "05": [1, 10, 26, 30, 55, 69, 73, 79, 81, 94, 96, 97, 98, 102, 107], "max_noise_r": 1, "99999": 1, "min_noise_r": 1, "valid_noise_matrix": [1, 89, 90, 91, 98, 100, 101], "none": [1, 2, 3, 4, 5, 7, 12, 13, 16, 18, 19, 20, 22, 23, 25, 26, 27, 28, 30, 31, 33, 34, 36, 37, 38, 40, 41, 42, 43, 45, 46, 47, 48, 49, 51, 53, 54, 55, 56, 57, 60, 61, 62, 63, 64, 65, 68, 69, 70, 71, 73, 75, 77, 78, 81, 82, 89, 90, 91, 92, 97, 98, 100, 101, 106], "frac_zero_noise_r": 1, "seed": [1, 2, 3, 10, 26, 39, 41, 48, 73, 86, 88, 89, 90, 91, 94, 96, 98, 100, 101], "max_it": [1, 87, 88, 95, 103], "10000": [1, 40, 96, 97], "x": [1, 2, 3, 5, 10, 18, 19, 20, 22, 23, 25, 26, 28, 30, 31, 36, 37, 38, 41, 43, 45, 46, 48, 51, 53, 55, 56, 57, 60, 61, 63, 69, 70, 71, 73, 75, 86, 87, 88, 89, 90, 91, 92, 94, 96, 97, 98, 100, 101, 103, 105], "diagon": [1, 3, 5, 43, 46, 56], "equal": [1, 3, 10, 12, 51, 63, 68, 78, 104], "creat": [1, 2, 9, 16, 18, 37, 40, 41, 43, 56, 73, 83, 87, 88, 92, 94, 95, 97, 106, 107], "impli": [1, 10, 36, 62, 69], "float": [1, 2, 10, 18, 19, 20, 22, 23, 25, 26, 27, 28, 30, 31, 36, 37, 38, 39, 40, 41, 43, 45, 47, 48, 54, 55, 56, 61, 62, 63, 65, 68, 69, 73, 77, 81, 88, 89, 90, 91, 98, 100, 101], "entri": [1, 3, 5, 36, 37, 41, 43, 45, 49, 51, 54, 56, 61, 62, 63, 66, 86, 87, 94, 95, 98, 101, 102, 105], "maximum": [1, 10, 70, 78, 82, 106], "minimum": [1, 8, 10, 20, 43, 45, 63, 68, 81], "noise_r": 1, "non": [1, 2, 3, 5, 7, 9, 16, 26, 37, 41, 43, 51, 68, 73, 90, 97, 98, 100, 102, 103], "default": [1, 2, 3, 4, 5, 7, 10, 14, 16, 28, 30, 33, 36, 37, 38, 40, 41, 43, 45, 46, 48, 50, 51, 52, 53, 54, 56, 60, 61, 62, 63, 65, 66, 68, 69, 70, 71, 73, 74, 75, 77, 78, 79, 81, 82, 90, 92, 97, 105, 106], "If": [1, 2, 3, 4, 5, 10, 12, 13, 16, 26, 28, 34, 36, 37, 40, 41, 43, 45, 46, 48, 51, 52, 55, 56, 60, 61, 62, 63, 66, 68, 69, 70, 73, 74, 75, 77, 78, 81, 82, 83, 84, 86, 87, 88, 90, 92, 94, 95, 97, 98, 100, 101, 102, 103, 105, 106, 107], "have": [1, 2, 3, 4, 5, 7, 9, 10, 16, 21, 24, 26, 29, 36, 37, 39, 40, 41, 43, 46, 48, 51, 56, 60, 61, 62, 63, 66, 68, 69, 70, 71, 73, 74, 78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 100, 101, 102, 103, 105, 106, 107], "all": [1, 2, 3, 5, 7, 8, 9, 10, 13, 14, 16, 22, 33, 36, 37, 40, 41, 42, 43, 46, 48, 49, 51, 55, 56, 60, 61, 62, 63, 64, 65, 68, 69, 70, 71, 73, 75, 77, 78, 79, 81, 82, 83, 84, 86, 87, 88, 89, 90, 92, 94, 95, 96, 97, 100, 101, 102, 103, 104, 105, 106, 107], "necessari": [1, 2, 3, 4, 7, 10, 12, 55, 89, 90], "In": [1, 2, 3, 5, 10, 36, 37, 40, 41, 51, 60, 61, 62, 64, 86, 87, 88, 90, 91, 92, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107], "particular": [1, 5, 6, 10, 13, 14, 16, 19, 20, 22, 26, 27, 28, 31, 37, 41, 56, 61, 65, 69, 73, 78, 82, 83, 86, 87, 88, 89, 91, 95, 97, 100, 101, 103, 105], "satisfi": [1, 3, 36], "requir": [1, 2, 5, 7, 8, 9, 10, 11, 12, 30, 35, 37, 38, 39, 40, 41, 43, 46, 51, 53, 56, 59, 60, 63, 70, 71, 73, 75, 83, 84, 88, 96, 97, 98, 104], "argument": [1, 2, 3, 5, 10, 16, 23, 27, 30, 31, 32, 37, 40, 41, 42, 43, 48, 51, 53, 57, 60, 61, 62, 63, 65, 68, 69, 70, 71, 73, 77, 78, 79, 81, 87, 89, 91, 92, 95, 96, 97, 101, 102, 105, 107], "when": [1, 2, 3, 4, 5, 10, 12, 14, 23, 26, 37, 41, 43, 46, 48, 51, 53, 54, 56, 60, 63, 65, 66, 68, 70, 71, 73, 74, 86, 87, 89, 90, 91, 92, 94, 95, 96, 100, 104, 105, 106, 107], "The": [1, 2, 3, 4, 5, 7, 8, 10, 12, 13, 14, 16, 18, 19, 20, 22, 23, 25, 26, 27, 28, 30, 31, 32, 33, 34, 36, 37, 40, 41, 42, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 60, 61, 62, 63, 66, 68, 69, 70, 71, 73, 75, 78, 79, 81, 83, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 99, 100, 101, 102, 103, 104, 105, 106, 107], "rate": [1, 2, 3, 10, 38, 56, 88, 107], "set": [1, 2, 3, 5, 9, 10, 12, 13, 16, 17, 18, 19, 20, 22, 23, 25, 26, 27, 28, 30, 31, 33, 36, 37, 40, 41, 43, 47, 48, 50, 51, 52, 54, 56, 60, 61, 63, 66, 68, 69, 70, 71, 73, 75, 77, 78, 86, 87, 89, 90, 91, 94, 95, 97, 100, 101, 103, 104, 105, 106, 107], "note": [1, 2, 3, 7, 8, 10, 12, 27, 31, 34, 37, 40, 41, 42, 43, 48, 51, 56, 60, 61, 66, 68, 69, 70, 71, 73, 74, 78, 84, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 98, 100, 101, 102, 103, 105, 106, 107], "you": [1, 2, 3, 5, 7, 9, 10, 14, 16, 36, 37, 39, 40, 41, 43, 48, 53, 59, 60, 61, 63, 66, 68, 69, 70, 71, 73, 74, 75, 78, 79, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 100, 101, 102, 103, 104, 105, 106, 107], "high": [1, 2, 16, 40, 43, 51, 52, 56, 68, 71, 73, 86, 87, 89, 90, 91, 92, 96, 98, 102, 105, 106, 107], "mai": [1, 2, 3, 4, 5, 10, 13, 21, 22, 24, 29, 32, 36, 37, 39, 40, 41, 43, 46, 48, 51, 56, 61, 62, 66, 68, 69, 70, 71, 73, 75, 78, 82, 84, 87, 89, 90, 91, 92, 94, 95, 96, 97, 98, 100, 101, 102, 104, 105, 106, 107], "imposs": [1, 10, 98], "also": [1, 2, 3, 5, 7, 9, 10, 22, 34, 36, 37, 40, 41, 43, 48, 55, 60, 61, 70, 73, 78, 81, 82, 83, 86, 87, 88, 90, 91, 92, 94, 95, 96, 97, 98, 100, 101, 102, 104, 105, 106, 107], "low": [1, 10, 56, 61, 83, 89, 90, 91, 95, 98, 102, 106], "zero": [1, 3, 5, 37, 41, 45, 51, 56, 57, 90, 92, 101, 102, 103], "forc": [1, 2, 3, 5, 41, 90, 107], "instead": [1, 2, 3, 10, 13, 16, 33, 36, 37, 40, 41, 43, 46, 56, 60, 61, 63, 65, 69, 70, 71, 73, 74, 77, 79, 81, 84, 86, 87, 88, 92, 94, 95, 97, 98, 101, 102, 103, 105, 106, 107], "onli": [1, 2, 3, 4, 5, 7, 10, 16, 23, 26, 30, 36, 37, 40, 41, 42, 43, 45, 46, 51, 52, 54, 55, 56, 57, 60, 61, 70, 71, 73, 75, 77, 81, 82, 83, 87, 88, 90, 91, 92, 95, 100, 101, 102, 103, 104, 105, 106, 107], "guarante": [1, 3, 5, 15, 21, 24, 29, 37, 39, 41, 44, 46, 59, 84], "produc": [1, 2, 5, 9, 10, 16, 48, 61, 71, 73, 75, 77, 83, 86, 87, 88, 92, 94, 95, 97, 98, 100, 101, 102, 103, 104, 106, 107], "higher": [1, 5, 10, 36, 43, 45, 46, 48, 54, 60, 61, 62, 73, 91, 95, 97, 102], "opposit": [1, 107], "occur": [1, 3, 10, 36, 55, 68, 90, 91, 92, 97, 103], "small": [1, 3, 10, 36, 40, 48, 51, 54, 56, 62, 69, 87, 92, 95, 96, 101, 103], "numpi": [1, 3, 4, 5, 7, 10, 12, 18, 31, 32, 40, 41, 42, 48, 51, 54, 55, 57, 60, 65, 68, 73, 74, 79, 81, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 100, 101, 102, 103, 105, 106, 107], "max": [1, 43, 70, 71, 91, 92, 103], "tri": [1, 37, 41, 104], "befor": [1, 2, 3, 37, 41, 54, 56, 70, 73, 78, 86, 87, 89, 95, 97, 98, 100, 103, 105], "option": [1, 2, 3, 4, 5, 7, 8, 9, 12, 13, 16, 23, 30, 36, 37, 40, 41, 43, 46, 48, 51, 53, 54, 55, 56, 57, 60, 61, 62, 63, 65, 66, 68, 69, 70, 71, 73, 75, 77, 78, 81, 82, 83, 86, 88, 90, 91, 92, 94, 97, 98, 101, 105, 106], "left": [1, 2, 43, 45, 54, 56, 63, 66, 69, 89, 90, 91, 101, 102, 103, 106], "stochast": 1, "exceed": 1, "m": [1, 5, 37, 41, 47, 48, 51, 52, 61, 66, 68, 69, 70, 89, 90, 91, 96, 100, 101, 102, 107], "max_prob": 1, "min_prob": 1, "dirichlet": 1, "ones": [1, 37, 41, 60, 97, 98, 106], "length": [1, 5, 12, 26, 27, 36, 38, 43, 56, 63, 66, 70, 71, 73, 75, 78, 82, 86, 88, 101, 103, 106, 107], "must": [1, 2, 3, 4, 5, 7, 16, 36, 37, 38, 39, 41, 43, 46, 48, 49, 54, 56, 59, 60, 61, 62, 63, 70, 71, 73, 75, 77, 78, 79, 81, 82, 88, 100, 104, 106, 107], "max_balls_per_bin": 1, "min_balls_per_bin": 1, "uniformli": 1, "integ": [1, 2, 3, 10, 12, 36, 40, 43, 49, 56, 57, 61, 63, 69, 75, 77, 78, 79, 81, 82, 86, 87, 88, 97, 100, 101, 102, 106, 107], "ball": [1, 96], "bin": [1, 3, 63, 89, 90, 91, 103], "ensur": [1, 2, 10, 37, 41, 51, 53, 54, 56, 57, 60, 68, 71, 73, 86, 87, 88, 90, 91, 92, 95, 97, 98, 103, 104, 105], "most": [1, 3, 5, 7, 10, 16, 36, 40, 43, 48, 60, 61, 62, 63, 66, 68, 69, 70, 71, 74, 77, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 94, 95, 97, 98, 100, 101, 102, 103, 105, 106], "least": [1, 4, 10, 18, 31, 36, 40, 61, 62, 68, 71, 81, 91, 92, 97, 100, 103, 106], "int_arrai": [1, 56], "can": [2, 3, 4, 5, 7, 8, 9, 13, 14, 16, 33, 34, 36, 37, 38, 39, 40, 41, 43, 47, 48, 49, 51, 52, 53, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 73, 74, 75, 78, 79, 82, 83, 84, 86, 87, 88, 90, 92, 94, 95, 101, 102, 103, 104, 105, 106, 107], "model": [2, 3, 4, 5, 9, 10, 16, 18, 30, 32, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 53, 55, 60, 61, 62, 63, 65, 66, 68, 69, 70, 71, 73, 74, 75, 77, 78, 79, 81, 82, 84, 89, 90, 91, 96, 99, 104, 106, 107], "For": [2, 3, 5, 7, 9, 10, 11, 16, 22, 35, 36, 37, 40, 41, 43, 46, 48, 51, 54, 56, 60, 61, 62, 63, 65, 66, 68, 69, 70, 71, 73, 75, 77, 79, 81, 82, 83, 86, 87, 88, 89, 91, 92, 94, 96, 97, 98, 100, 101, 102, 103, 104, 106, 107], "regular": [2, 3, 40, 60], "multi": [2, 3, 4, 10, 32, 36, 37, 40, 41, 43, 47, 48, 49, 56, 57, 62, 63, 64, 65, 70, 71, 83, 97, 98, 99], "task": [2, 5, 7, 10, 11, 12, 14, 15, 16, 25, 30, 33, 36, 40, 46, 48, 49, 54, 56, 61, 63, 71, 73, 83, 87, 88, 89, 95, 96, 97, 98, 101, 103, 105, 106, 107], "cleanlearn": [2, 3, 10, 23, 30, 37, 56, 60, 72, 73, 74, 83, 84, 86, 87, 105], "wrap": [2, 37, 41, 50, 60, 70, 73, 83, 86, 87, 89, 90, 91, 94, 95, 98, 105], "instanc": [2, 3, 5, 6, 7, 10, 13, 16, 18, 19, 20, 22, 23, 25, 26, 27, 28, 30, 31, 33, 37, 41, 48, 60, 69, 70, 73, 78, 86, 87, 88, 89, 90, 91, 92, 94, 95, 97, 98, 102], "sklearn": [2, 3, 4, 5, 8, 10, 18, 31, 36, 41, 48, 52, 53, 56, 60, 70, 73, 74, 83, 86, 87, 88, 89, 90, 91, 92, 94, 95, 97, 98, 100, 101, 103, 104, 105], "classifi": [2, 3, 41, 48, 56, 61, 64, 70, 71, 83, 84, 86, 87, 88, 94, 95, 97, 100, 101, 103, 104, 106, 107], "adher": [2, 41, 73], "estim": [2, 3, 4, 5, 9, 13, 22, 36, 40, 41, 43, 46, 56, 61, 62, 63, 68, 70, 73, 75, 77, 81, 83, 84, 88, 89, 90, 91, 92, 94, 95, 97, 99, 102, 103, 104, 105, 106, 107], "api": [2, 3, 14, 60, 66, 69, 70, 73, 84, 97, 105], "defin": [2, 3, 5, 7, 10, 14, 22, 36, 37, 38, 40, 41, 43, 71, 73, 75, 88, 90, 91, 94, 96, 97, 100, 103, 107], "four": [2, 10, 96, 98, 107], "clf": [2, 3, 5, 48, 73, 83, 86, 94, 97, 98, 101], "fit": [2, 3, 5, 8, 10, 18, 39, 41, 51, 53, 59, 60, 70, 72, 73, 83, 86, 87, 89, 90, 91, 92, 94, 95, 97, 98, 100, 101, 103, 104, 105, 107], "sample_weight": [2, 41, 73, 98], "predict_proba": [2, 5, 36, 39, 41, 48, 59, 60, 86, 88, 89, 90, 91, 94, 95, 97, 98, 100, 101, 103], "predict": [2, 3, 4, 5, 8, 9, 10, 16, 22, 23, 25, 28, 30, 32, 34, 36, 39, 40, 41, 42, 43, 45, 46, 48, 49, 55, 56, 59, 60, 61, 62, 63, 65, 66, 68, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 81, 82, 83, 84, 87, 96, 97, 98, 99, 103, 105, 106, 107], "score": [2, 3, 4, 5, 7, 10, 13, 18, 19, 20, 22, 23, 25, 26, 27, 28, 30, 31, 36, 40, 42, 43, 45, 48, 54, 61, 62, 63, 65, 66, 68, 69, 70, 71, 72, 73, 74, 77, 79, 81, 83, 84, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 103, 105], "data": [2, 3, 4, 5, 7, 8, 9, 11, 13, 14, 15, 16, 18, 19, 20, 22, 23, 25, 26, 27, 28, 30, 31, 32, 33, 36, 38, 39, 40, 41, 42, 43, 48, 49, 51, 52, 53, 56, 59, 60, 61, 62, 63, 64, 68, 70, 71, 72, 73, 78, 79, 80, 81, 82, 84, 87, 92, 93, 99, 104], "e": [2, 3, 5, 10, 12, 22, 32, 36, 37, 40, 41, 43, 46, 48, 49, 51, 56, 57, 61, 62, 63, 64, 66, 69, 70, 71, 73, 75, 83, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 100, 101, 102, 103, 104, 105], "featur": [2, 3, 4, 5, 8, 10, 16, 18, 19, 23, 26, 27, 28, 30, 31, 48, 51, 52, 53, 56, 70, 73, 83, 86, 89, 90, 91, 94, 95, 97, 98, 100, 101, 105], "element": [2, 3, 5, 36, 42, 43, 45, 56, 61, 63, 71, 78, 79, 81, 87, 88, 95, 97, 107], "first": [2, 5, 10, 17, 26, 27, 36, 40, 48, 51, 56, 61, 62, 66, 69, 71, 73, 86, 87, 88, 90, 92, 94, 97, 100, 101, 102, 103, 105, 106, 107], "index": [2, 10, 26, 36, 43, 50, 51, 53, 55, 56, 57, 62, 71, 73, 78, 81, 82, 87, 88, 90, 91, 92, 94, 96, 97, 98, 100, 101, 102, 103, 105, 106, 107], "should": [2, 3, 5, 7, 10, 14, 22, 26, 31, 32, 36, 37, 40, 41, 43, 45, 46, 48, 51, 53, 54, 55, 56, 60, 61, 62, 65, 66, 68, 69, 70, 71, 73, 74, 78, 79, 81, 82, 86, 87, 88, 89, 90, 91, 92, 94, 95, 98, 100, 101, 102, 103, 104, 105, 106, 107], "correspond": [2, 3, 5, 10, 13, 14, 16, 18, 19, 20, 22, 23, 25, 26, 27, 28, 30, 31, 34, 36, 37, 40, 41, 42, 43, 45, 46, 48, 51, 55, 56, 61, 62, 63, 65, 66, 68, 69, 70, 71, 73, 75, 78, 79, 81, 82, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 100, 101, 102, 103, 105, 106, 107], "differ": [2, 5, 7, 10, 13, 15, 21, 24, 26, 27, 29, 36, 37, 39, 40, 41, 43, 44, 48, 51, 54, 56, 57, 59, 61, 66, 68, 70, 73, 86, 88, 89, 90, 91, 92, 94, 95, 96, 98, 100, 101, 103, 104, 105], "sampl": [2, 3, 5, 8, 10, 16, 20, 43, 45, 48, 51, 52, 53, 63, 66, 69, 71, 73, 74, 83, 84, 87, 96, 97, 98, 99, 101, 102, 105, 106, 107], "size": [2, 10, 31, 37, 40, 41, 43, 48, 51, 52, 63, 68, 69, 73, 75, 77, 87, 89, 92, 94, 97, 98, 100, 101, 102, 104, 106], "here": [2, 5, 7, 10, 14, 40, 43, 46, 60, 61, 62, 63, 65, 66, 69, 70, 81, 83, 84, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 100, 101, 102, 103, 104, 105, 106, 107], "re": [2, 5, 37, 41, 53, 55, 61, 73, 83, 86, 87, 88, 89, 90, 94, 95, 97, 105, 106, 107], "weight": [2, 10, 37, 38, 41, 48, 51, 61, 68, 71, 73, 87, 88, 89, 90, 91, 95], "loss": [2, 38, 60, 71, 73, 92], "while": [2, 3, 10, 37, 40, 41, 47, 48, 56, 73, 83, 92, 97, 98, 100, 101, 105], "train": [2, 3, 4, 5, 9, 10, 16, 18, 32, 37, 38, 39, 41, 48, 56, 60, 61, 66, 69, 70, 73, 74, 84, 89, 90, 91, 92, 94, 95, 96, 98, 100, 101, 102, 104, 106, 107], "support": [2, 3, 4, 5, 12, 14, 33, 34, 40, 42, 48, 56, 57, 60, 70, 71, 81, 83, 84, 88, 89, 90, 91, 92, 97], "your": [2, 3, 5, 9, 10, 16, 36, 37, 39, 40, 41, 43, 48, 53, 56, 59, 60, 61, 62, 63, 65, 70, 71, 73, 74, 75, 77, 78, 84, 86, 87, 88, 89, 92, 94, 96, 100, 101, 102, 103, 104, 105, 106, 107], "recommend": [2, 5, 7, 10, 13, 16, 40, 43, 61, 90, 91, 92, 97, 104, 105], "furthermor": 2, "correctli": [2, 3, 10, 36, 37, 41, 43, 46, 51, 57, 62, 63, 68, 69, 73, 75, 87, 95, 97, 101, 102, 105, 106], "clonabl": [2, 73], "via": [2, 5, 7, 10, 13, 16, 18, 22, 36, 38, 40, 41, 48, 52, 56, 61, 66, 69, 70, 71, 73, 74, 77, 81, 86, 87, 88, 90, 91, 92, 94, 95, 96, 97, 101, 102, 103, 104, 105, 106, 107], "base": [2, 3, 4, 5, 7, 10, 12, 13, 16, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 30, 31, 32, 33, 34, 37, 40, 41, 42, 43, 46, 47, 48, 51, 52, 54, 55, 56, 57, 60, 61, 62, 63, 65, 68, 70, 71, 73, 74, 77, 79, 81, 86, 88, 89, 90, 91, 92, 94, 95, 96, 98, 100, 101, 102, 103, 105, 106, 107], "clone": [2, 73, 101], "intern": [2, 3, 7, 10, 11, 12, 13, 14, 16, 18, 19, 20, 22, 23, 25, 26, 27, 28, 30, 31, 32, 33, 34, 40, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 65, 69, 73, 79, 84, 88, 90, 97, 98, 100, 101, 102, 103, 105, 107], "multipl": [2, 3, 5, 12, 13, 34, 36, 43, 54, 55, 61, 62, 63, 65, 68, 69, 73, 83, 90, 91, 92, 94, 97, 99, 101, 102, 105], "g": [2, 3, 5, 10, 12, 22, 32, 36, 37, 41, 43, 49, 51, 56, 63, 64, 66, 69, 70, 71, 73, 83, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 100, 101, 102, 103, 104, 105], "manual": [2, 73, 86, 87, 88, 97, 103, 104, 105, 107], "pytorch": [2, 37, 38, 41, 73, 83, 88, 92, 97, 99, 101, 106], "call": [2, 3, 5, 6, 10, 13, 14, 18, 19, 20, 22, 23, 25, 26, 27, 28, 30, 31, 37, 41, 48, 56, 60, 70, 73, 87, 88, 89, 90, 91, 95, 97, 98, 101, 103, 104, 105, 106, 107], "__init__": [2, 38, 73, 92], "independ": [2, 3, 10, 62, 73, 95, 104, 105, 107], "compat": [2, 37, 40, 41, 53, 60, 73, 74, 77, 81, 83, 86, 87, 97, 104, 105], "neural": [2, 38, 60, 70, 73, 88, 92, 97, 101, 103, 105], "network": [2, 37, 38, 41, 60, 70, 73, 87, 88, 92, 95, 97, 101, 103, 105], "typic": [2, 37, 41, 53, 70, 73, 86, 87, 88, 91, 92, 94, 95, 103, 104], "initi": [2, 3, 13, 18, 37, 41, 51, 61, 73, 86, 95, 97], "insid": [2, 41, 73, 97, 98], "There": [2, 3, 7, 51, 83, 98, 100], "two": [2, 3, 10, 18, 26, 36, 37, 40, 41, 49, 51, 52, 53, 56, 66, 68, 69, 84, 87, 89, 90, 91, 92, 94, 95, 96, 97, 98, 101, 105, 106, 107], "new": [2, 7, 9, 10, 14, 22, 37, 40, 41, 47, 51, 55, 56, 61, 73, 87, 88, 90, 95, 96, 97, 103, 104, 107], "notion": 2, "confid": [2, 3, 10, 22, 36, 40, 43, 46, 48, 56, 61, 62, 63, 66, 68, 69, 70, 71, 73, 77, 81, 83, 86, 92, 94, 95, 98, 100, 101, 102, 104, 106, 107], "packag": [2, 5, 7, 9, 10, 11, 15, 35, 39, 43, 44, 56, 59, 60, 66, 69, 73, 83, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 100, 101, 102, 103, 105, 106, 107], "prune": [2, 3, 43, 63, 73, 84, 102], "everyth": [2, 69, 98], "els": [2, 69, 89, 90, 92, 96, 97, 100, 101, 102], "mathemat": [2, 3, 10, 46, 101], "keep": [2, 13, 14, 56, 83, 89, 90, 96, 97, 106], "belong": [2, 3, 10, 36, 43, 45, 46, 51, 62, 63, 64, 65, 70, 71, 75, 79, 81, 82, 91, 92, 98, 101, 103, 106, 107], "2": [2, 3, 4, 5, 7, 12, 18, 19, 20, 22, 23, 25, 26, 27, 28, 30, 31, 36, 37, 38, 40, 41, 43, 45, 46, 47, 48, 49, 51, 53, 54, 55, 56, 60, 62, 63, 65, 66, 69, 70, 71, 73, 74, 78, 79, 81, 82, 96, 97, 104], "error": [2, 3, 5, 10, 37, 41, 42, 43, 45, 46, 56, 62, 63, 65, 66, 68, 69, 71, 73, 75, 77, 78, 81, 84, 86, 88, 89, 90, 91, 94, 95, 96, 99], "erron": [2, 3, 36, 43, 46, 56, 62, 63, 71, 73, 74, 75, 103, 105], "import": [2, 3, 4, 5, 7, 8, 10, 12, 13, 14, 18, 19, 20, 22, 23, 25, 26, 28, 30, 31, 33, 36, 40, 42, 48, 51, 54, 55, 61, 65, 68, 73, 74, 79, 81, 82, 83, 86, 87, 94, 95, 97, 101, 102, 103, 105, 106, 107], "linear_model": [2, 5, 36, 56, 73, 83, 87, 88, 89, 90, 91, 95, 97, 98, 100, 103], "logisticregress": [2, 3, 5, 36, 56, 83, 87, 88, 89, 90, 91, 95, 97, 98, 100, 103], "logreg": 2, "cl": [2, 14, 30, 73, 83, 86, 87, 97, 98, 105], "pass": [2, 3, 5, 8, 10, 12, 13, 14, 16, 23, 30, 33, 37, 40, 41, 43, 47, 48, 51, 53, 56, 60, 61, 63, 69, 70, 71, 73, 78, 79, 83, 87, 88, 89, 90, 91, 95, 96, 97, 98, 100, 102, 103, 105], "x_train": [2, 86, 89, 90, 91, 98, 100, 101, 105], "labels_maybe_with_error": 2, "had": [2, 3, 73, 102], "issu": [2, 3, 4, 5, 6, 8, 11, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 36, 37, 39, 40, 41, 42, 43, 51, 59, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 87, 93, 99, 100, 104, 105], "pred": [2, 43, 56, 86, 87, 104, 105], "x_test": [2, 86, 89, 90, 91, 98, 101, 105], "might": [2, 5, 10, 51, 61, 73, 78, 86, 87, 90, 91, 92, 97, 102], "case": [2, 3, 10, 13, 36, 48, 51, 61, 73, 86, 87, 88, 90, 91, 92, 94, 96, 97, 98, 103, 105, 107], "standard": [2, 3, 5, 30, 36, 43, 60, 62, 63, 65, 71, 73, 83, 86, 90, 91, 94, 96, 98, 102], "adapt": [2, 37, 39, 56, 59, 73, 103], "skorch": [2, 73, 83, 97], "kera": [2, 59, 66, 69, 73, 83, 97, 102], "scikera": [2, 60, 73, 97], "open": [2, 40, 96, 102, 107], "doesn": [2, 10, 73, 83], "t": [2, 3, 4, 7, 10, 17, 27, 37, 38, 40, 41, 42, 43, 48, 54, 55, 65, 70, 71, 73, 79, 81, 82, 83, 90, 91, 92, 94, 95, 96, 98, 101, 102, 105, 107], "alreadi": [2, 5, 10, 16, 37, 40, 41, 46, 51, 60, 61, 73, 83, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 100, 102, 103, 105], "exist": [2, 5, 10, 12, 18, 37, 40, 41, 53, 55, 60, 66, 68, 70, 73, 83, 84, 86, 87, 90, 91, 95, 100, 107], "made": [2, 5, 16, 37, 41, 52, 73, 86, 87, 92, 95, 97, 100, 102, 104, 105], "easi": [2, 11, 46, 73, 90, 91, 96, 97, 98, 101], "inherit": [2, 7, 38, 73], "baseestim": [2, 41, 73], "yourmodel": [2, 73], "def": [2, 7, 14, 37, 41, 60, 73, 87, 88, 89, 90, 91, 92, 96, 97, 98, 100, 101, 103, 105, 107], "self": [2, 3, 5, 7, 10, 12, 13, 14, 16, 31, 37, 38, 40, 41, 43, 48, 70, 71, 73, 86, 87, 90, 92, 95, 96, 101, 106, 107], "refer": [2, 10, 16, 37, 41, 42, 62, 63, 65, 66, 68, 69, 70, 73, 77, 78, 90, 91, 92, 94, 95, 97, 98, 101, 104, 105], "origin": [2, 5, 10, 41, 42, 43, 55, 56, 60, 62, 63, 66, 69, 70, 73, 74, 77, 79, 81, 86, 87, 90, 92, 94, 95, 97, 98, 102, 103, 105, 107], "total": [2, 3, 4, 36, 40, 56, 62, 82, 89, 92, 97, 106], "state": [2, 3, 5, 37, 38, 41, 47, 73, 98, 101, 102, 107], "art": [2, 38, 98, 101], "northcutt": [2, 3, 36, 70, 71], "et": [2, 3, 36, 38, 70, 71], "al": [2, 3, 36, 38, 70, 71], "2021": [2, 3, 36, 70, 71], "weak": [2, 69], "supervis": [2, 10, 90, 91, 97, 100], "find": [2, 5, 9, 10, 13, 14, 16, 19, 20, 22, 23, 25, 26, 27, 28, 31, 32, 36, 37, 39, 40, 41, 42, 43, 47, 53, 55, 56, 59, 66, 69, 70, 71, 73, 75, 79, 81, 84, 90, 99, 104], "uncertainti": [2, 10, 45, 70, 73, 97, 103, 105], "It": [2, 3, 5, 7, 10, 12, 13, 16, 22, 27, 30, 32, 33, 34, 37, 41, 43, 46, 48, 51, 52, 54, 61, 68, 69, 73, 83, 87, 90, 91, 92, 95, 97, 98, 101, 104], "work": [2, 3, 7, 10, 12, 30, 36, 37, 40, 41, 43, 46, 55, 56, 57, 60, 61, 71, 73, 83, 84, 87, 89, 90, 91, 96, 103, 105], "includ": [2, 3, 5, 7, 10, 13, 18, 19, 20, 22, 23, 25, 26, 28, 30, 31, 33, 36, 37, 39, 40, 41, 51, 55, 56, 59, 61, 62, 65, 66, 70, 71, 73, 77, 78, 79, 81, 83, 84, 90, 91, 92, 94, 95, 97, 98, 101, 102, 103, 107], "deep": [2, 39, 41, 59, 60, 73, 95], "see": [2, 3, 5, 7, 10, 13, 14, 33, 36, 37, 40, 41, 42, 43, 48, 53, 56, 60, 62, 63, 65, 66, 69, 70, 71, 73, 79, 81, 83, 84, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 100, 101, 102, 103, 105, 106, 107], "subfield": 2, "theori": [2, 98], "machin": [2, 4, 5, 9, 10, 14, 16, 33, 39, 54, 59, 73, 86, 87, 90, 91, 96, 100], "across": [2, 3, 5, 7, 10, 13, 22, 36, 40, 48, 62, 69, 70, 89, 90, 91, 92, 94, 95, 96, 97, 98, 101, 102, 104, 105], "varieti": [2, 86, 87, 97], "like": [2, 3, 5, 6, 7, 10, 14, 32, 36, 37, 40, 41, 43, 46, 56, 60, 61, 62, 65, 66, 68, 71, 73, 74, 77, 78, 79, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 94, 95, 97, 98, 100, 101, 102, 103, 105, 106, 107], "pu": [2, 56], "input": [2, 3, 5, 10, 16, 26, 36, 37, 40, 41, 46, 48, 51, 52, 55, 56, 57, 60, 69, 73, 83, 84, 87, 88, 89, 91, 92, 94, 95, 96, 97, 98, 100, 101, 102, 105, 106, 107], "discret": [2, 34, 43, 46, 56, 70, 71, 75, 77, 78], "vector": [2, 3, 4, 5, 10, 16, 43, 46, 48, 49, 51, 56, 70, 71, 83, 87, 88, 90, 91, 92, 94, 95, 98, 101, 102, 103, 106, 107], "would": [2, 3, 5, 37, 40, 41, 43, 52, 56, 63, 73, 83, 87, 89, 90, 92, 97, 98, 103, 105, 107], "obtain": [2, 5, 8, 10, 16, 43, 61, 63, 66, 69, 71, 74, 88, 91, 95, 97, 100, 102, 104, 106, 107], "been": [2, 4, 36, 43, 46, 51, 55, 56, 61, 62, 66, 68, 70, 71, 73, 88, 90, 94, 97, 98, 100, 101, 102, 103, 106, 107], "dure": [2, 10, 16, 51, 53, 70, 73, 86, 87, 88, 89, 94, 95, 97, 98, 101, 104, 105, 107], "denot": [2, 3, 46, 48, 56, 63, 70, 71, 81], "tild": 2, "paper": [2, 4, 10, 61, 70, 79, 81, 96, 98, 100, 103, 105, 107], "cv_n_fold": [2, 3, 73, 87], "5": [2, 3, 4, 5, 8, 18, 19, 20, 22, 23, 25, 26, 28, 30, 31, 33, 36, 41, 43, 45, 47, 48, 56, 61, 62, 65, 66, 69, 73, 74, 81, 87, 90, 95, 96, 97, 101, 102, 103, 104, 106, 107], "converge_latent_estim": [2, 3], "pulearn": [2, 56], "find_label_issues_kwarg": [2, 10, 73, 84, 97, 98], "label_quality_scores_kwarg": [2, 10], "low_memori": [2, 63, 79, 97], "clean": [2, 68, 71, 73, 74, 83, 86, 87, 89, 90, 91, 96, 105], "even": [2, 3, 7, 9, 10, 36, 40, 45, 46, 56, 73, 88, 97, 98, 100, 101, 102], "messi": [2, 73, 98], "ridden": [2, 73], "autom": [2, 9, 10, 73, 83, 91, 96, 97], "robust": [2, 46, 51, 73, 91, 97], "prone": [2, 73], "out": [2, 3, 5, 10, 16, 28, 37, 41, 43, 48, 51, 60, 63, 64, 66, 69, 70, 71, 73, 74, 82, 83, 84, 87, 96, 97, 98, 99, 101, 102, 103, 105, 106, 107], "current": [2, 3, 5, 7, 10, 13, 14, 22, 37, 41, 42, 43, 48, 61, 68, 73, 89, 90, 91, 97, 100, 102], "intend": [2, 13, 14, 15, 16, 32, 33, 34, 44, 51, 61, 77, 81, 88, 90, 91, 95, 98], "A": [2, 3, 4, 5, 7, 10, 12, 13, 14, 18, 19, 20, 22, 23, 25, 26, 27, 28, 30, 31, 32, 33, 36, 37, 38, 41, 43, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 60, 61, 62, 65, 68, 69, 70, 71, 73, 75, 77, 78, 82, 84, 86, 87, 88, 90, 92, 94, 95, 96, 97, 98, 100, 102, 104, 107], "follow": [2, 3, 10, 14, 30, 34, 36, 37, 40, 41, 48, 50, 54, 61, 62, 66, 68, 69, 70, 73, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 100, 101, 102, 103, 105, 106, 107], "experiment": [2, 37, 38, 40, 41, 42, 63, 84, 89, 97], "wrapper": [2, 60, 86, 87, 88, 105], "around": [2, 68, 89, 90, 91, 102, 103, 107], "fasttext": [2, 59], "store": [2, 4, 5, 10, 12, 13, 18, 19, 20, 22, 23, 25, 26, 27, 28, 30, 31, 33, 37, 40, 41, 70, 73, 86, 87, 89, 94, 95, 96, 97, 106, 107], "along": [2, 48, 63, 81, 89, 90, 91, 92, 97, 103], "dimens": [2, 56, 75, 78, 92, 97, 103, 106], "select": [2, 9, 10, 26, 50, 61, 71, 92, 97, 100, 103], "split": [2, 3, 5, 10, 12, 40, 48, 55, 56, 73, 86, 88, 89, 90, 91, 92, 94, 95, 96, 98, 101, 104, 107], "cross": [2, 3, 10, 36, 43, 46, 47, 48, 63, 66, 69, 71, 73, 74, 84, 86, 87, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 101, 102, 105, 106, 107], "fold": [2, 3, 36, 43, 46, 73, 86, 88, 94, 96, 97, 102, 106], "By": [2, 36, 62, 63, 73, 90, 97, 106], "need": [2, 3, 10, 36, 37, 40, 41, 43, 51, 53, 62, 63, 65, 70, 73, 83, 87, 88, 90, 91, 95, 97, 98, 100, 101, 102, 106], "holdout": [2, 3, 73], "comput": [2, 3, 4, 5, 7, 8, 10, 19, 20, 22, 23, 26, 27, 28, 31, 36, 37, 38, 40, 41, 43, 45, 46, 47, 48, 51, 52, 53, 56, 61, 62, 63, 65, 68, 69, 70, 71, 73, 74, 75, 77, 83, 84, 87, 90, 91, 96, 98, 99, 102, 103, 105, 106], "them": [2, 3, 5, 7, 9, 10, 11, 12, 27, 32, 35, 37, 39, 40, 41, 43, 53, 59, 61, 70, 73, 84, 86, 87, 89, 90, 91, 92, 94, 95, 97, 100, 101, 103, 105, 106, 107], "numer": [2, 3, 4, 5, 10, 13, 22, 30, 34, 48, 51, 52, 68, 70, 73, 78, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 95, 98, 100, 101, 103, 105], "consist": [2, 3, 37, 41, 50, 56, 61, 106, 107], "latent": [2, 3, 46], "thei": [2, 3, 5, 15, 21, 24, 26, 29, 37, 38, 39, 41, 43, 44, 51, 54, 56, 60, 63, 68, 71, 73, 74, 77, 81, 83, 87, 88, 89, 90, 91, 92, 94, 95, 97, 98, 100, 103, 105, 107], "relat": [2, 3, 13, 19, 20, 26, 27, 28, 31, 46, 56, 62, 73, 91, 95], "close": [2, 3, 10, 40, 46, 70, 88, 90, 91, 92, 94, 95, 97, 98, 102], "form": [2, 3, 10, 37, 38, 41, 46, 55, 56, 71, 73, 97], "equival": [2, 3, 37, 41, 46, 70, 103, 105], "iter": [2, 3, 36, 37, 41, 43, 56, 62, 63, 73, 89, 97, 100, 106], "enforc": [2, 37, 41, 56], "perfectli": [2, 36, 62, 98], "certain": [2, 3, 5, 37, 41, 60, 69, 73, 89, 90, 91, 96, 102, 103], "dict": [2, 3, 5, 10, 12, 13, 14, 16, 18, 19, 20, 22, 23, 25, 26, 27, 28, 30, 31, 36, 37, 40, 41, 43, 47, 48, 56, 60, 61, 62, 63, 65, 66, 68, 69, 70, 71, 73, 81, 89, 90, 91, 92, 97, 107], "keyword": [2, 3, 5, 10, 16, 23, 27, 30, 37, 40, 41, 43, 45, 48, 51, 53, 55, 60, 61, 63, 69, 70, 71, 73, 78, 79, 81, 90], "filter": [2, 3, 10, 40, 42, 55, 62, 64, 65, 67, 69, 76, 77, 78, 80, 81, 82, 83, 84, 86, 87, 88, 91, 92, 95, 96, 97, 101, 102, 105, 106, 107], "find_label_issu": [2, 3, 10, 30, 39, 40, 42, 43, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 97, 101, 102, 105, 106, 107], "particularli": [2, 83, 100, 103], "filter_bi": [2, 3, 40, 43, 63, 84, 97], "frac_nois": [2, 43, 63, 79, 97], "min_examples_per_class": [2, 43, 63, 91, 97, 98], "impact": [2, 4, 10, 90, 91, 92], "ml": [2, 4, 5, 9, 10, 15, 73, 83, 86, 87, 90, 91, 92, 94, 95, 100, 101, 105], "accuraci": [2, 38, 71, 86, 87, 88, 92, 97, 98, 100, 103, 105, 106], "n_job": [2, 40, 43, 63, 75, 77, 79, 97, 103, 106], "disabl": [2, 37, 41, 43, 103], "process": [2, 3, 7, 13, 16, 32, 37, 40, 41, 43, 51, 55, 61, 63, 69, 75, 77, 79, 87, 88, 89, 90, 97, 100, 104], "caus": [2, 43, 48, 90, 91, 97], "rank": [2, 3, 10, 36, 40, 42, 43, 48, 62, 63, 64, 66, 67, 69, 70, 72, 76, 78, 79, 80, 82, 83, 84, 86, 87, 90, 91, 96, 97, 101, 102, 103, 106, 107], "get_label_quality_scor": [2, 39, 40, 42, 43, 44, 48, 61, 63, 64, 65, 66, 67, 68, 71, 72, 74, 76, 77, 79, 80, 81, 84, 97, 98, 101, 102, 106, 107], "adjust_pred_prob": [2, 10, 65, 70, 71, 98], "control": [2, 5, 9, 10, 16, 40, 43, 61, 69, 70, 73, 79, 81, 90, 91, 96, 97], "how": [2, 3, 5, 10, 12, 13, 14, 16, 22, 36, 37, 38, 40, 41, 46, 56, 61, 62, 65, 66, 68, 70, 71, 73, 77, 81, 83, 86, 87, 89, 90, 91, 92, 94, 95, 96, 102, 103, 104, 105, 106], "much": [2, 10, 36, 40, 43, 73, 89, 96, 97, 98, 100, 103], "output": [2, 3, 5, 10, 16, 32, 37, 38, 41, 46, 56, 60, 61, 62, 66, 68, 69, 70, 73, 77, 78, 81, 82, 83, 84, 87, 88, 90, 92, 95, 96, 97, 102, 103, 104, 105], "print": [2, 5, 7, 18, 19, 20, 22, 23, 25, 26, 27, 28, 30, 31, 33, 34, 36, 37, 40, 41, 43, 56, 61, 62, 63, 68, 70, 71, 73, 75, 77, 78, 82, 84, 86, 87, 88, 89, 91, 92, 95, 96, 97, 98, 100, 101, 102, 103, 105, 106, 107], "suppress": [2, 40, 61, 68, 70, 71, 73, 75, 77, 78, 106, 107], "statement": [2, 40, 61, 68, 70, 71, 73, 75, 77, 78], "big": [2, 40, 63, 69, 73, 98], "limit": [2, 5, 16, 40, 51, 63, 89, 102, 106, 107], "memori": [2, 37, 40, 41, 63, 69, 75, 77, 89, 90, 106], "label_issues_batch": [2, 39, 63, 97], "find_label_issues_batch": [2, 39, 40, 63, 97], "pred_prob": [2, 3, 5, 8, 10, 16, 23, 25, 26, 28, 31, 32, 36, 40, 42, 43, 45, 46, 47, 48, 49, 56, 57, 61, 62, 63, 65, 66, 69, 70, 71, 75, 77, 78, 79, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 100, 101, 102, 105], "threshold": [2, 3, 4, 7, 10, 18, 19, 20, 22, 28, 30, 31, 40, 54, 68, 69, 70, 71, 77, 81, 90, 102, 103, 106, 107], "inverse_noise_matrix": [2, 3, 10, 46, 56, 84, 98], "label_issu": [2, 40, 43, 63, 66, 73, 75, 84, 86, 87, 88, 92, 95, 97, 98, 101, 105], "clf_kwarg": [2, 3, 10, 73], "clf_final_kwarg": [2, 73], "validation_func": [2, 3, 10], "correct": [2, 5, 9, 10, 36, 40, 43, 45, 51, 61, 62, 63, 65, 66, 68, 69, 71, 73, 74, 77, 81, 83, 88, 92, 94, 95, 98, 100, 102, 104, 105], "result": [2, 3, 9, 10, 13, 16, 18, 19, 20, 22, 23, 25, 26, 27, 28, 30, 31, 37, 40, 41, 43, 45, 54, 56, 63, 65, 66, 69, 71, 73, 74, 75, 77, 81, 86, 87, 88, 89, 90, 91, 92, 94, 95, 97, 98, 100, 101, 105, 106, 107], "identifi": [2, 3, 5, 7, 9, 10, 12, 16, 27, 33, 36, 40, 42, 43, 51, 63, 66, 69, 71, 73, 74, 75, 78, 79, 81, 82, 83, 86, 87, 88, 90, 91, 92, 94, 95, 96, 98, 101, 103, 105, 106, 107], "final": [2, 10, 73, 86, 94, 102, 104, 105], "remain": [2, 73, 84, 86, 87, 92, 101, 105, 107], "datasetlik": [2, 56, 73], "beyond": [2, 5, 7, 9, 10, 11, 35, 83, 86, 87, 105, 106], "pd": [2, 3, 5, 7, 13, 18, 19, 20, 22, 23, 25, 26, 28, 30, 31, 36, 47, 60, 61, 62, 73, 81, 86, 87, 88, 90, 91, 94, 95, 97, 98, 100, 105, 107], "datafram": [2, 3, 5, 7, 12, 13, 18, 19, 20, 22, 23, 25, 26, 27, 28, 30, 31, 36, 40, 47, 56, 57, 60, 61, 62, 73, 78, 82, 84, 87, 88, 89, 90, 91, 92, 94, 95, 97, 98, 100, 105, 106, 107], "scipi": [2, 4, 5, 13, 52, 56, 70], "spars": [2, 4, 5, 10, 13, 16, 18, 31, 51, 56, 57, 91, 92, 94, 95, 98], "csr_matrix": [2, 4, 5, 13, 16, 18, 31, 51], "torch": [2, 37, 38, 41, 87, 88, 92, 95, 96, 103], "util": [2, 5, 10, 16, 33, 37, 38, 41, 44, 51, 60, 61, 66, 69, 73, 83, 84, 88, 90, 91, 92, 97, 98, 103], "tensorflow": [2, 56, 60, 83, 88, 97], "object": [2, 5, 10, 12, 13, 16, 32, 33, 37, 38, 40, 41, 48, 51, 53, 56, 57, 60, 63, 66, 67, 68, 69, 70, 73, 81, 83, 87, 88, 91, 92, 94, 97, 98, 99, 101, 105], "list": [2, 3, 5, 12, 14, 18, 19, 20, 22, 23, 25, 26, 27, 28, 30, 31, 36, 37, 38, 40, 41, 42, 43, 49, 51, 55, 56, 57, 60, 61, 62, 63, 65, 66, 68, 69, 70, 71, 73, 77, 78, 79, 81, 82, 84, 87, 88, 89, 90, 91, 92, 96, 97, 98, 101, 102, 105, 107], "index_list": 2, "subset": [2, 3, 5, 16, 36, 40, 43, 56, 71, 78, 82, 86, 87, 88, 92, 94, 95, 97, 101, 102, 103, 104, 105, 107], "wa": [2, 3, 12, 14, 40, 54, 56, 61, 62, 68, 70, 82, 86, 87, 88, 89, 90, 91, 92, 94, 95, 97, 98, 101, 102, 104, 106, 107], "abl": [2, 3, 10, 73, 88, 97, 98, 100, 101], "format": [2, 3, 5, 10, 12, 32, 37, 40, 41, 43, 46, 47, 48, 49, 51, 56, 57, 60, 61, 62, 63, 66, 69, 70, 71, 73, 75, 77, 78, 81, 82, 86, 88, 90, 91, 92, 94, 96, 100, 105, 106, 107], "make": [2, 3, 5, 18, 37, 40, 41, 48, 60, 83, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 100, 101, 102, 103, 105], "sure": [2, 5, 40, 43, 48, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 100, 101, 102, 103, 105], "shuffl": [2, 10, 56, 88, 92, 95, 101, 103], "ha": [2, 3, 5, 6, 10, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 30, 31, 37, 41, 42, 46, 48, 51, 55, 56, 61, 66, 68, 73, 79, 81, 82, 83, 86, 87, 88, 89, 90, 91, 94, 95, 98, 100, 101, 102, 103, 104, 105, 107], "batch": [2, 40, 56, 60, 61, 75, 77, 89, 92, 97, 103], "order": [2, 5, 10, 34, 36, 37, 41, 42, 43, 46, 47, 48, 54, 56, 61, 62, 63, 66, 69, 70, 71, 75, 78, 79, 81, 82, 84, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 101, 102, 105, 106, 107], "destroi": [2, 56], "oper": [2, 37, 40, 41, 51, 56, 60, 71, 83, 86, 87, 95, 97, 103], "eg": [2, 5, 10, 56, 66, 69, 90, 91, 97], "repeat": [2, 56, 61, 100, 103], "appli": [2, 34, 37, 39, 41, 43, 48, 49, 51, 55, 56, 65, 70, 79, 86, 87, 88, 89, 90, 91, 92, 94, 97, 100, 101, 103, 104, 105, 106], "array_lik": [2, 3, 36, 43, 56, 63, 70, 74], "some": [2, 3, 5, 10, 14, 22, 36, 37, 39, 41, 43, 46, 51, 55, 56, 59, 61, 62, 63, 65, 66, 69, 70, 71, 73, 75, 84, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 100, 101, 102, 104, 105, 106, 107], "seri": [2, 3, 40, 56, 57, 73, 81, 97], "row": [2, 3, 5, 10, 13, 27, 32, 36, 40, 43, 45, 46, 51, 52, 56, 61, 62, 63, 65, 70, 71, 73, 78, 79, 81, 82, 86, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 100, 101, 103, 107], "rather": [2, 3, 5, 26, 36, 56, 60, 61, 68, 77, 81, 87, 96, 100, 104, 105, 106, 107], "leav": [2, 43], "per": [2, 3, 5, 7, 10, 13, 36, 40, 43, 48, 55, 61, 62, 63, 65, 68, 69, 71, 74, 75, 77, 81, 91, 97, 102, 107], "determin": [2, 3, 10, 12, 16, 22, 26, 30, 36, 40, 43, 48, 51, 56, 61, 63, 66, 68, 71, 77, 81, 90, 97, 100, 102, 103, 105], "cutoff": [2, 3, 52, 103], "consid": [2, 3, 4, 5, 10, 13, 16, 23, 26, 28, 31, 36, 37, 41, 43, 51, 53, 56, 61, 68, 70, 71, 74, 77, 81, 86, 87, 88, 92, 94, 95, 97, 98, 102, 103, 104, 105, 106], "section": [2, 3, 7, 10, 84, 92, 94, 97, 102], "3": [2, 3, 4, 5, 7, 10, 34, 36, 37, 41, 43, 46, 47, 48, 49, 52, 54, 55, 56, 60, 63, 70, 71, 73, 74, 79, 81, 96, 97, 104], "equat": [2, 3, 46], "advanc": [2, 3, 5, 9, 10, 16, 68, 70, 81, 84, 91, 93, 97, 98], "user": [2, 3, 5, 9, 10, 14, 16, 27, 32, 33, 34, 37, 41, 43, 51, 60, 68, 70, 71, 73, 77, 81, 89, 98], "specifi": [2, 3, 4, 5, 8, 10, 13, 14, 16, 18, 31, 33, 37, 40, 41, 43, 48, 51, 53, 55, 60, 61, 62, 63, 66, 68, 70, 71, 73, 74, 82, 84, 87, 88, 91, 92, 95, 100, 102, 105], "automat": [2, 3, 5, 26, 36, 83, 86, 87, 92, 94, 95, 96, 97, 100, 101, 102, 105, 106, 107], "greater": [2, 3, 4, 5, 7, 9, 10, 28, 40, 52, 56, 68, 91, 96, 97, 107], "count": [2, 22, 26, 36, 40, 43, 46, 56, 62, 63, 69, 84, 92, 97, 102], "observ": [2, 3, 46, 53, 88, 89, 90, 91, 100, 103, 105], "mislabel": [2, 10, 36, 40, 42, 43, 46, 61, 62, 63, 66, 68, 71, 77, 79, 81, 83, 86, 87, 88, 92, 94, 95, 97, 98, 102, 105], "one": [2, 3, 5, 7, 10, 26, 36, 37, 40, 41, 42, 43, 48, 54, 56, 61, 62, 63, 65, 66, 68, 69, 70, 71, 73, 74, 75, 77, 78, 79, 81, 82, 83, 86, 87, 88, 89, 90, 91, 92, 94, 95, 100, 103, 104, 105, 107], "get_label_issu": [2, 39, 40, 72, 73, 86, 87, 98, 105], "either": [2, 3, 4, 7, 10, 37, 40, 41, 43, 52, 61, 63, 68, 70, 71, 75, 77, 89, 91, 97, 101, 102], "boolean": [2, 7, 10, 22, 40, 43, 53, 55, 61, 63, 66, 71, 73, 75, 77, 78, 83, 87, 88, 91, 92, 95, 97, 102, 105, 106], "label_issues_mask": [2, 43, 71, 73, 84], "indic": [2, 3, 4, 5, 7, 10, 13, 22, 36, 40, 41, 42, 43, 45, 48, 51, 53, 56, 60, 61, 62, 63, 65, 66, 68, 69, 70, 71, 73, 74, 77, 79, 81, 86, 87, 88, 90, 91, 92, 94, 95, 96, 97, 98, 100, 101, 102, 103, 105, 106, 107], "its": [2, 5, 7, 9, 10, 16, 37, 40, 41, 43, 51, 53, 54, 55, 63, 66, 69, 70, 71, 73, 75, 79, 81, 83, 87, 88, 90, 91, 92, 94, 95, 96, 97, 98, 100, 102, 103, 104, 105, 106, 107], "return_indices_ranked_bi": [2, 40, 43, 63, 79, 84, 86, 87, 97, 98], "significantli": [2, 92, 98, 100, 104], "reduc": [2, 40, 43, 56, 88, 97], "time": [2, 10, 37, 40, 41, 56, 61, 84, 86, 87, 89, 90, 92, 94, 96, 97, 98, 102, 103, 105, 106, 107], "take": [2, 5, 10, 36, 37, 41, 47, 48, 51, 53, 56, 60, 71, 86, 89, 92, 94, 100, 101, 102, 107], "run": [2, 5, 6, 7, 9, 10, 11, 14, 16, 26, 27, 32, 35, 37, 40, 41, 53, 73, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 98, 100, 101, 102, 103, 105, 107], "skip": [2, 10, 37, 41, 73, 88, 97, 101, 107], "slow": [2, 3], "step": [2, 7, 26, 48, 69, 89, 92, 98, 100, 104], "caution": [2, 5, 97], "previous": [2, 5, 13, 56, 70, 73, 84, 86, 88, 90, 94, 95, 100, 104], "assign": [2, 7, 10, 18, 19, 20, 22, 23, 25, 26, 27, 28, 30, 31, 32, 37, 41, 47, 48, 56, 73, 86, 90, 92, 94, 97, 105, 106, 107], "individu": [2, 4, 7, 10, 13, 26, 37, 41, 42, 61, 65, 68, 71, 73, 79, 81, 84, 86, 91, 94, 96, 97, 100, 101, 102, 107], "still": [2, 40, 41, 56, 70, 86, 88, 92, 97, 103], "extra": [2, 37, 41, 56, 60, 61, 62, 73, 92, 95, 97, 100, 103], "receiv": [2, 10, 37, 41, 42, 62, 65, 66, 73, 75, 79, 91, 102], "overwritten": [2, 73], "callabl": [2, 3, 4, 10, 26, 37, 41, 48, 51, 52, 53, 55, 60, 65, 97], "x_val": 2, "y_val": 2, "map": [2, 3, 12, 40, 41, 44, 47, 55, 56, 69, 71, 73, 78, 88, 89, 90, 91, 92, 97, 98, 101, 107], "appropri": [2, 10, 16, 34, 52, 63, 71, 90, 94, 101, 102], "earli": [2, 92], "stop": [2, 92], "x_valid": 2, "y_valid": 2, "could": [2, 7, 10, 22, 36, 56, 70, 86, 90, 92, 94, 101, 105, 107], "f": [2, 7, 86, 87, 88, 89, 90, 92, 94, 95, 96, 97, 98, 100, 101, 102, 103, 105], "ignor": [2, 37, 41, 55, 60, 73, 78, 82, 88, 89, 90, 91, 92, 96, 98, 100, 101, 103, 105, 107], "allow": [2, 36, 37, 40, 41, 45, 53, 56, 61, 69, 70, 73, 75, 77, 87, 88, 89, 92, 97, 104, 106], "access": [2, 10, 13, 37, 41, 73, 87, 91, 92, 95, 96, 101], "hyperparamet": [2, 65, 70, 92], "purpos": [2, 51, 90, 91, 97, 101, 105], "want": [2, 5, 10, 36, 40, 51, 57, 61, 63, 73, 87, 89, 90, 92, 95, 96, 100, 102, 103, 104, 106, 107], "explicitli": [2, 8, 10, 41, 51, 73, 97], "yourself": [2, 5, 40, 91], "altern": [2, 7, 10, 48, 53, 56, 60, 61, 71, 84, 87, 88, 92, 94, 95, 96, 97, 98, 100, 101, 103, 105], "same": [2, 3, 5, 7, 9, 10, 12, 14, 16, 26, 30, 37, 40, 41, 43, 51, 56, 60, 61, 63, 70, 71, 73, 77, 78, 81, 82, 83, 86, 87, 89, 90, 91, 92, 94, 95, 97, 101, 102, 103, 104, 105, 106], "effect": [2, 10, 27, 37, 41, 61, 70, 73, 92, 94, 95, 97, 103], "offer": [2, 5, 9, 10, 87, 88, 90, 91, 95, 97, 98, 101], "after": [2, 3, 5, 13, 18, 19, 20, 22, 23, 25, 26, 27, 28, 30, 31, 37, 41, 56, 61, 73, 87, 90, 92, 95, 97, 98, 100, 102, 103, 104, 105, 106], "attribut": [2, 5, 7, 10, 12, 13, 16, 18, 19, 20, 22, 23, 25, 26, 27, 28, 30, 31, 32, 33, 34, 37, 40, 41, 48, 53, 70, 73, 86, 90], "label_issues_df": [2, 73, 92], "similar": [2, 10, 36, 37, 41, 53, 56, 61, 65, 66, 68, 70, 73, 77, 81, 89, 90, 91, 92, 94, 95, 97, 98, 102, 103, 106], "document": [2, 3, 5, 14, 16, 36, 37, 40, 41, 42, 43, 48, 55, 60, 62, 63, 65, 68, 69, 70, 73, 77, 78, 79, 81, 84, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 100, 101, 102, 103, 105, 107], "descript": [2, 5, 7, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 36, 42, 56, 66, 73, 90, 91], "were": [2, 3, 5, 36, 41, 51, 62, 68, 81, 86, 88, 94, 97, 98, 100, 102, 104, 106], "present": [2, 3, 5, 10, 12, 13, 20, 36, 56, 70, 78, 83, 92, 97, 103], "actual": [2, 3, 5, 36, 51, 61, 62, 71, 91, 97, 98, 107], "num_class": [2, 36, 40, 56, 60, 86, 87, 88, 89, 90, 91, 92, 94, 95, 97, 98, 100, 101, 103], "uniqu": [2, 31, 56, 78, 90, 97, 101, 103], "given_label": [2, 5, 25, 30, 36, 46, 73, 78, 82, 87, 88, 89, 90, 91, 92, 94, 95, 98, 105, 106, 107], "normal": [2, 3, 18, 26, 31, 43, 45, 48, 54, 55, 56, 71, 97, 98, 103], "trick": [2, 97], "distribut": [2, 3, 5, 10, 26, 28, 36, 41, 43, 47, 54, 61, 69, 70, 71, 83, 89, 90, 91, 92, 94, 95, 102, 103], "account": [2, 36, 61, 65, 70, 71, 87, 95, 97, 98, 100, 101, 103, 105], "word": [2, 3, 55, 81, 82, 97], "remov": [2, 10, 31, 36, 37, 41, 43, 73, 83, 86, 87, 91, 92, 94, 95, 96, 97, 98, 101, 103, 105], "so": [2, 3, 5, 6, 7, 10, 14, 26, 34, 36, 37, 40, 41, 43, 51, 56, 61, 62, 68, 71, 73, 77, 81, 88, 90, 91, 92, 95, 98, 101, 103, 106], "proportion": [2, 10, 43], "just": [2, 3, 5, 10, 13, 32, 36, 38, 40, 56, 60, 71, 73, 75, 83, 84, 86, 87, 88, 91, 92, 94, 95, 97, 98, 101, 102, 103, 104, 105, 106], "procedur": 2, "get": [2, 3, 5, 8, 13, 31, 37, 38, 41, 43, 48, 54, 55, 56, 61, 63, 65, 70, 71, 73, 74, 75, 83, 86, 87, 88, 92, 95, 96, 97, 98, 103, 104, 105], "detect": [2, 5, 7, 9, 13, 14, 16, 18, 22, 28, 42, 51, 54, 64, 66, 67, 68, 69, 70, 71, 72, 73, 76, 80, 83, 86, 87, 89, 90, 93, 96, 99, 101, 105, 106, 107], "arg": [2, 12, 22, 27, 31, 37, 38, 41, 48, 56, 71, 73], "kwarg": [2, 7, 10, 14, 16, 18, 19, 20, 22, 23, 25, 26, 27, 28, 30, 31, 33, 37, 40, 41, 42, 48, 51, 60, 69, 73, 75, 77, 78, 79, 97], "test": [2, 5, 10, 26, 41, 48, 51, 60, 73, 83, 86, 87, 89, 90, 91, 92, 94, 95, 104, 105, 107], "expect": [2, 3, 37, 41, 43, 48, 51, 61, 70, 71, 73, 86, 87, 97, 98, 100, 101, 102, 105, 107], "class_predict": 2, "evalu": [2, 10, 37, 38, 39, 40, 41, 69, 73, 86, 87, 88, 90, 91, 92, 97, 98, 100, 104, 105, 106], "simpli": [2, 10, 36, 71, 87, 90, 91, 94, 95, 97, 98, 101, 105, 106, 107], "quantifi": [2, 4, 5, 7, 10, 13, 43, 65, 70, 73, 83, 91, 92, 94, 95, 98, 102], "save_spac": [2, 10, 72, 73], "potenti": [2, 10, 36, 43, 55, 63, 66, 69, 71, 73, 75, 77, 84, 86, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 101, 102, 106, 107], "cach": [2, 87, 95], "panda": [2, 5, 7, 12, 18, 19, 20, 22, 23, 25, 26, 28, 30, 31, 36, 56, 57, 60, 61, 62, 84, 86, 87, 88, 90, 91, 94, 95, 96, 97, 98, 100, 105, 106], "unlik": [2, 10, 43, 45, 48, 60, 62, 63, 65, 81, 90, 100, 101, 103, 105], "both": [2, 5, 10, 16, 26, 36, 37, 41, 43, 51, 56, 61, 63, 71, 75, 77, 82, 83, 90, 92, 97, 98, 100, 107], "mask": [2, 40, 43, 55, 56, 63, 66, 71, 73, 75, 77, 78, 83, 89, 96, 97, 100, 102, 106, 107], "prefer": [2, 71, 79, 101], "plan": 2, "subsequ": [2, 3, 37, 41, 53, 87, 95, 97, 98, 102], "invok": [2, 37, 41, 98, 104], "scratch": [2, 51, 73], "To": [2, 5, 7, 9, 10, 11, 13, 16, 26, 35, 37, 40, 41, 42, 43, 60, 61, 63, 65, 69, 70, 71, 73, 74, 75, 77, 83, 86, 87, 88, 89, 90, 91, 92, 94, 95, 97, 100, 101, 102, 103, 104, 105, 106, 107], "share": [2, 71, 73], "mostli": [2, 56, 68, 73, 101, 105], "longer": [2, 34, 47, 48, 55, 73, 84, 87, 95, 97, 102], "info": [2, 5, 7, 13, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 36, 62, 73, 81, 90, 91, 96, 107], "about": [2, 3, 5, 7, 10, 13, 18, 19, 20, 22, 23, 25, 26, 27, 28, 30, 31, 33, 36, 38, 40, 45, 61, 62, 65, 69, 73, 78, 81, 88, 90, 92, 94, 95, 96, 97, 98, 100, 103], "docstr": [2, 36, 37, 41, 56, 73, 96, 98], "unless": [2, 37, 41, 51, 73, 97], "our": [2, 3, 10, 60, 61, 71, 73, 83, 86, 87, 88, 90, 91, 92, 94, 95, 97, 98, 100, 101, 102, 103, 104, 105, 106, 107], "is_label_issu": [2, 30, 73, 87, 88, 89, 90, 91, 92, 94, 95, 98, 101, 105], "entir": [2, 10, 26, 40, 43, 46, 62, 63, 68, 71, 73, 75, 77, 78, 83, 89, 90, 91, 97, 102, 103, 104, 106, 107], "accur": [2, 3, 5, 9, 10, 16, 36, 40, 43, 52, 61, 62, 63, 66, 69, 71, 73, 74, 75, 77, 78, 84, 91, 92, 94, 95, 97, 100, 105], "label_qu": [2, 61, 73, 87, 98, 100, 105], "measur": [2, 5, 36, 61, 62, 73, 83, 86, 96, 97, 98, 100, 101, 105, 106, 107], "qualiti": [2, 3, 5, 7, 9, 10, 13, 30, 31, 36, 40, 42, 43, 45, 48, 61, 62, 63, 65, 66, 68, 71, 73, 74, 77, 79, 81, 83, 84, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 99, 105], "lower": [2, 4, 5, 7, 10, 13, 28, 40, 48, 54, 61, 62, 65, 68, 69, 71, 73, 74, 77, 81, 87, 88, 91, 92, 94, 95, 97, 100, 101, 102, 103, 105, 106, 107], "eas": 2, "comparison": [2, 37, 41, 69, 98, 100], "against": [2, 37, 41, 90, 94, 97, 100, 101], "predicted_label": [2, 5, 25, 30, 73, 78, 82, 87, 88, 89, 90, 91, 92, 94, 95, 98, 105, 106], "ad": [2, 37, 41, 89, 91, 100, 105], "precis": [2, 52, 54, 63, 66, 69, 96, 97, 98, 106, 107], "definit": [2, 7, 34, 48, 73, 86, 94], "accessor": [2, 73], "describ": [2, 10, 18, 61, 70, 71, 73, 79, 81, 98, 100, 101, 102, 104, 107], "precomput": [2, 4, 5, 46, 51, 73, 91, 92, 94, 95, 96, 98], "clear": [2, 37, 41, 53, 73, 87, 95, 105], "save": [2, 5, 16, 37, 40, 41, 69, 73, 97, 102, 106, 107], "space": [2, 5, 10, 70, 73, 92, 94, 96], "place": [2, 37, 41, 51, 56, 73, 86, 100], "larg": [2, 9, 10, 40, 51, 73, 92, 94, 95, 97, 102, 103, 106, 107], "deploi": [2, 9, 10, 73, 92, 94, 95, 97], "care": [2, 10, 37, 41, 51, 73, 95, 97, 98], "avail": [2, 4, 5, 7, 10, 12, 14, 33, 41, 53, 73, 89, 97, 98, 100, 102, 105], "cannot": [2, 5, 12, 14, 56, 104, 107], "anymor": 2, "classmethod": [2, 18, 19, 20, 22, 23, 25, 26, 27, 28, 30, 31, 34, 41, 48, 73], "__init_subclass__": [2, 39, 41, 72, 73], "set_": [2, 41, 73], "_request": [2, 41, 73], "pep": [2, 41, 73], "487": [2, 41, 73], "look": [2, 5, 7, 16, 37, 41, 56, 73, 78, 86, 90, 91, 94, 95, 97, 98, 100, 101, 102, 103, 106, 107], "inform": [2, 5, 7, 10, 13, 16, 33, 37, 41, 53, 56, 61, 62, 66, 69, 73, 78, 81, 82, 83, 88, 89, 90, 94, 95, 96, 98, 100, 103, 106, 107], "__metadata_request__": [2, 41, 73], "infer": [2, 41, 56, 73, 78, 82, 86, 87, 92, 100, 101], "signatur": [2, 37, 41, 73], "accept": [2, 37, 41, 53, 54, 71, 73, 90, 91, 97], "metadata": [2, 41, 73, 92, 94, 95, 107], "through": [2, 5, 7, 41, 73, 87, 88, 89, 91, 95, 96, 97, 100, 102, 103], "develop": [2, 9, 41, 53, 73, 97, 98, 107], "request": [2, 41, 73, 86, 87, 91, 95, 96, 101, 107], "those": [2, 3, 4, 10, 40, 41, 43, 50, 60, 61, 63, 69, 73, 77, 81, 82, 83, 88, 92, 97, 102, 106], "http": [2, 4, 5, 7, 9, 10, 11, 18, 35, 37, 38, 40, 41, 45, 53, 56, 66, 69, 70, 73, 83, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 98, 100, 101, 102, 103, 105, 106, 107], "www": [2, 41, 73, 103], "org": [2, 4, 18, 37, 38, 41, 53, 56, 70, 73, 97, 98, 107], "dev": [2, 41, 73], "0487": [2, 41, 73], "get_metadata_rout": [2, 39, 41, 72, 73], "rout": [2, 41, 73], "pleas": [2, 37, 41, 60, 73, 83, 87, 88, 89, 90, 91, 92, 95, 96, 97, 98, 100, 101, 103, 105, 107], "guid": [2, 7, 10, 41, 73, 84, 92, 93], "mechan": [2, 37, 41, 73], "metadatarequest": [2, 41, 73], "encapsul": [2, 16, 41, 68, 73], "get_param": [2, 39, 41, 59, 60, 72, 73], "subobject": [2, 41, 73], "param": [2, 10, 37, 41, 60, 70, 73, 97], "name": [2, 5, 6, 7, 10, 12, 13, 32, 34, 36, 37, 41, 47, 48, 52, 56, 60, 61, 62, 69, 73, 78, 82, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 101, 105, 106, 107], "set_fit_request": [2, 39, 41, 72, 73], "str": [2, 3, 4, 5, 12, 13, 14, 16, 18, 19, 20, 22, 23, 25, 26, 27, 28, 30, 31, 33, 34, 36, 37, 40, 41, 43, 46, 48, 51, 52, 53, 54, 55, 56, 60, 61, 62, 66, 68, 69, 71, 73, 78, 82, 88, 89, 90, 97, 100, 101, 102, 107], "unchang": [2, 37, 41, 73, 107], "relev": [2, 16, 26, 41, 73, 92, 94], "enable_metadata_rout": [2, 41, 73], "set_config": [2, 41, 73], "meta": [2, 41, 73], "rais": [2, 4, 5, 12, 13, 34, 37, 41, 45, 48, 51, 54, 73, 88, 97], "alia": [2, 37, 41, 73], "metadata_rout": [2, 41, 73], "retain": [2, 41, 56, 73], "chang": [2, 32, 34, 37, 40, 41, 45, 73, 81, 86, 87, 88, 90, 95, 97, 102, 103, 107], "version": [2, 4, 5, 7, 9, 10, 11, 15, 21, 24, 29, 35, 37, 39, 41, 44, 45, 56, 59, 60, 71, 73, 83, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 100, 101, 102, 103, 105, 107], "sub": [2, 41, 68, 73], "pipelin": [2, 41, 73, 105], "otherwis": [2, 4, 7, 10, 34, 36, 37, 40, 41, 43, 49, 52, 54, 55, 56, 63, 73, 75, 77, 78, 82, 87, 95, 97], "updat": [2, 13, 37, 40, 41, 51, 60, 73, 84, 89, 90, 92], "set_param": [2, 39, 41, 59, 60, 72, 73], "simpl": [2, 37, 41, 43, 61, 71, 73, 86, 87, 89, 90, 91, 92, 94, 95, 100, 103, 105], "well": [2, 3, 9, 10, 37, 41, 45, 46, 61, 63, 69, 71, 73, 78, 81, 82, 84, 90, 91, 92, 94, 95, 97, 98, 100, 102, 103], "nest": [2, 37, 41, 42, 57, 73, 79, 81, 82, 107], "latter": [2, 37, 41, 73, 103], "compon": [2, 41, 73], "__": [2, 41, 73], "set_score_request": [2, 72, 73], "structur": [3, 70, 89, 94, 97], "unobserv": 3, "less": [3, 4, 5, 10, 31, 40, 48, 61, 70, 71, 75, 77, 81, 91, 92, 94, 96, 97, 98, 102, 107], "channel": [3, 88, 98], "character": 3, "flip": 3, "nm": 3, "invers": [3, 10, 36, 46, 56, 62, 87, 91, 96], "inv": 3, "confident_joint": [3, 22, 36, 43, 56, 62, 63, 84, 97, 98], "un": 3, "under": [3, 10, 37, 41, 62, 69, 70, 91, 103], "joint": [3, 36, 43, 46, 56, 62, 63, 96], "num_label_issu": [3, 40, 43, 63, 78, 82, 84], "estimation_method": [3, 40], "off_diagon": 3, "multi_label": [3, 36, 43, 56, 57, 63, 101], "don": [3, 83, 91, 92, 94, 95, 98, 102, 105], "statis": 3, "compute_confident_joint": [3, 36, 43, 56, 63, 98], "off": [3, 43, 56, 68, 92, 98, 102, 103], "j": [3, 5, 36, 37, 41, 42, 43, 63, 66, 69, 70, 79, 81, 82, 89, 90, 91, 98, 106, 107], "confident_learn": [3, 43, 63, 98], "off_diagonal_calibr": 3, "calibr": [3, 4, 43, 56, 61, 100], "cj": [3, 46, 56], "axi": [3, 31, 46, 48, 54, 75, 78, 88, 89, 90, 91, 92, 97, 98, 100, 101, 103, 105, 106], "bincount": [3, 89, 90, 91, 98, 100, 101], "alwai": [3, 10, 37, 41, 56, 86, 87, 88, 98, 105], "estimate_issu": 3, "over": [3, 5, 10, 37, 40, 41, 68, 69, 75, 77, 86, 91, 92, 94, 96, 97, 98, 103, 105], "As": [3, 7, 83, 90, 91, 95, 98, 105, 107], "add": [3, 5, 7, 12, 13, 37, 41, 60, 69, 87, 88, 89, 90, 91, 92, 95, 97, 98, 101], "approach": [3, 36, 40, 43, 60, 86, 89, 94, 98, 101, 103, 105], "custom": [3, 7, 10, 11, 30, 37, 40, 41, 48, 55, 71, 87, 91, 95, 98, 105], "know": [3, 10, 90, 91, 92, 94, 95, 97, 98, 100, 105], "cut": [3, 68, 83, 98], "off_diagonal_custom": 3, "tl": 3, "dr": 3, "sometim": [3, 32, 102, 103, 107], "underestim": 3, "few": [3, 9, 10, 69, 83, 91, 97, 100, 101, 102, 103, 107], "4": [3, 4, 5, 18, 19, 20, 22, 23, 25, 26, 28, 30, 31, 47, 48, 55, 65, 66, 68, 69, 71, 74, 81, 96, 97, 101, 106, 107], "detail": [3, 4, 5, 10, 14, 16, 33, 36, 37, 41, 42, 48, 53, 56, 60, 61, 62, 63, 65, 66, 68, 69, 70, 77, 78, 79, 83, 84, 88, 97, 101, 103, 107], "num_issu": [3, 7, 40, 88, 89, 90, 91, 92, 94, 95, 98], "calibrate_confident_joint": 3, "up": [3, 7, 10, 17, 26, 27, 30, 43, 48, 50, 60, 61, 87, 89, 96, 97, 102, 105, 107], "p_": [3, 36, 43], "pair": [3, 5, 10, 36, 43, 98], "v": [3, 10, 40, 62, 63, 65, 71, 89, 90, 91, 101, 102, 103, 104], "rest": [3, 5, 7, 9, 10, 11, 35, 62, 63, 65, 73, 86, 87, 89, 90, 91, 92, 94, 95, 97, 98, 100, 105], "fashion": [3, 5, 75, 86], "2x2": 3, "incorrectli": [3, 36, 62, 63, 66, 94, 107], "calibrated_cj": 3, "c": [3, 10, 54, 55, 63, 71, 83, 86, 88, 90, 91, 94, 95, 97, 98, 101, 102, 103, 104, 105], "whose": [3, 4, 5, 10, 28, 37, 41, 46, 51, 55, 61, 65, 68, 74, 77, 81, 82, 88, 89, 90, 91, 92, 94, 95, 97, 98, 101, 102, 103, 106, 107], "truli": [3, 103, 106], "estimate_joint": [3, 36, 98], "joint_estim": 3, "confident_joint_distribut": 3, "recal": [3, 63, 69, 98, 102, 104, 106, 107], "return_indices_of_off_diagon": 3, "frequenc": [3, 26, 61, 62, 69, 78, 102, 103], "done": [3, 10, 60, 73, 90, 97, 98, 101, 103, 104], "overfit": [3, 10, 66, 69, 86, 88, 89, 90, 91, 92, 94, 95, 104], "classifict": 3, "singl": [3, 5, 9, 10, 12, 26, 36, 37, 41, 42, 48, 49, 56, 61, 62, 68, 69, 70, 71, 81, 86, 88, 89, 90, 97, 98, 101, 102], "baselin": [3, 37, 43, 87, 103, 105], "proxi": 3, "union": [3, 5, 12, 26, 48, 51, 52, 53, 56, 57, 63, 69, 73, 81, 97], "tupl": [3, 31, 37, 41, 42, 46, 47, 49, 51, 55, 56, 61, 63, 69, 77, 79, 81, 82, 88, 107], "confident_joint_count": 3, "indices_off_diagon": 3, "simplif": 3, "effici": [3, 4, 5, 10, 40, 46, 51, 52, 61, 70, 75, 77, 83, 87, 89, 92, 97, 106], "practic": [3, 86, 87, 91, 92, 98, 103, 105], "complet": [3, 88, 89, 90, 91, 92, 94, 95, 97, 98, 101, 102, 105], "gist": 3, "cj_ish": 3, "guess": [3, 46, 98, 100], "8": [3, 5, 7, 8, 47, 48, 49, 55, 65, 79, 81, 86, 87, 88, 90, 91, 92, 94, 95, 97, 100, 101, 102, 103, 105, 106, 107], "parallel": [3, 43, 69, 79, 96], "again": [3, 60, 86, 97, 103], "simplifi": [3, 14, 97], "understand": [3, 9, 10, 36, 62, 69, 91, 98, 99, 105, 106, 107], "100": [3, 4, 37, 41, 51, 52, 54, 70, 71, 86, 87, 90, 91, 92, 94, 96, 97, 98, 101, 102, 103, 107], "optim": [3, 37, 38, 41, 60, 92, 100], "speed": [3, 43, 87, 96, 97, 105], "dtype": [3, 23, 25, 26, 31, 37, 41, 55, 56, 65, 81, 88, 102], "enumer": [3, 37, 41, 88, 89, 90, 91, 92, 107], "s_label": 3, "confident_bin": 3, "6": [3, 5, 41, 48, 56, 81, 86, 87, 88, 90, 91, 92, 94, 95, 96, 97, 100, 101, 102, 103, 105, 106, 107], "num_confident_bin": 3, "argmax": [3, 43, 71, 75, 78, 88, 97, 98, 102, 103, 106], "elif": 3, "estimate_lat": 3, "py_method": [3, 46], "cnt": [3, 46], "1d": [3, 5, 12, 16, 32, 40, 43, 48, 49, 51, 56, 57, 65, 74, 86, 88], "eqn": [3, 46], "margin": [3, 43, 46, 48, 71], "marginal_p": [3, 46], "shorthand": [3, 13], "proport": [3, 10, 36, 62, 98, 104], "poorli": [3, 46, 86], "inv_noise_matrix": 3, "estimate_py_and_noise_matrices_from_prob": [3, 98], "variabl": [3, 7, 14, 27, 56, 73, 74, 88, 90, 94, 98, 101, 105], "exact": [3, 46, 51, 86, 89, 90, 91, 92, 94], "within": [3, 4, 5, 10, 15, 32, 37, 38, 41, 42, 44, 63, 68, 77, 79, 81, 90, 91, 92, 97, 102, 106], "percent": 3, "often": [3, 36, 46, 62, 97, 98, 104, 106], "estimate_confident_joint_and_cv_pred_proba": 3, "mani": [3, 9, 10, 56, 57, 69, 86, 87, 88, 89, 90, 92, 94, 95, 97, 101, 102, 103, 105], "wai": [3, 5, 51, 60, 83, 84, 86, 87, 88, 89, 90, 91, 94, 95, 97, 98, 100, 101, 102, 104], "pro": 3, "con": 3, "pred_proba": [3, 104], "combin": [3, 36, 90, 92, 96, 97, 98, 104, 105], "becaus": [3, 46, 52, 56, 68, 95, 97, 98, 100, 102], "littl": [3, 40, 96, 102, 107], "uniform": [3, 71, 96, 97, 98], "20": [3, 7, 42, 82, 88, 89, 92, 95, 96, 97, 98, 102, 105, 106, 107], "Such": [3, 92, 103], "bound": [3, 23, 25, 37, 41, 55, 65, 66, 68, 69, 102], "reason": [3, 22, 37, 41, 52, 70], "comment": [3, 55, 107], "end": [3, 5, 37, 41, 53, 69], "file": [3, 5, 12, 39, 40, 59, 69, 86, 88, 90, 94, 95, 96, 97, 102, 103, 106, 107], "estimate_py_noise_matrices_and_cv_pred_proba": [3, 98], "handl": [3, 5, 7, 10, 16, 18, 19, 20, 22, 23, 25, 26, 27, 28, 30, 31, 33, 37, 40, 41, 51, 52, 53, 84, 86, 87, 89, 90, 91, 92, 94, 95, 98, 106, 107], "five": [3, 66, 69, 98, 102], "estimate_cv_predicted_prob": [3, 98], "estimate_noise_matric": 3, "get_confident_threshold": [3, 39, 40], "amongst": [3, 10, 102], "confident_threshold": [3, 10, 22, 23, 40, 70], "point": [4, 5, 7, 9, 10, 18, 26, 37, 41, 51, 53, 89, 90, 91, 92, 94, 95, 96, 97, 98, 100], "valuat": [4, 9, 18], "help": [4, 36, 37, 41, 69, 83, 84, 86, 87, 88, 90, 92, 94, 95, 96, 97, 100, 101, 105, 106, 107], "u": [4, 86, 87, 88, 90, 92, 94, 97, 98, 100, 101, 104, 105, 106, 107], "assess": [4, 102], "contribut": [4, 10, 18, 102], "data_shapley_knn": 4, "knn_graph": [4, 5, 10, 16, 18, 19, 26, 28, 31, 44, 50, 94], "metric": [4, 5, 10, 18, 19, 26, 31, 44, 50, 51, 53, 54, 56, 60, 69, 70, 86, 87, 88, 92, 94, 95, 98, 105], "10": [4, 10, 18, 19, 23, 26, 31, 37, 38, 51, 69, 70, 71, 82, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 100, 101, 102, 103, 104, 105, 106, 107], "shaplei": [4, 10, 18], "nearest": [4, 5, 10, 16, 23, 26, 28, 50, 51, 52, 53, 54, 70, 91, 95, 103], "neighbor": [4, 5, 10, 16, 18, 23, 26, 28, 44, 51, 52, 53, 54, 70, 90, 91, 92, 94, 95, 97, 98, 103], "knn": [4, 10, 13, 18, 26, 31, 50, 51, 52, 53, 54, 70, 94, 103], "graph": [4, 5, 10, 13, 16, 18, 26, 31, 50, 51], "calcul": [4, 10, 18, 26, 40, 48, 50, 51, 54, 61, 65, 66, 68, 69, 70, 73, 77, 92, 96], "directli": [4, 5, 14, 16, 33, 34, 40, 53, 60, 61, 87, 91, 95, 97, 101, 102, 105], "lowest": [4, 10, 61, 69, 91, 92, 94, 97, 100, 101, 102, 106], "fall": [4, 10, 68, 77, 81, 98, 103], "flag": [4, 10, 22, 26, 43, 48, 62, 63, 66, 73, 83, 87, 88, 89, 90, 91, 92, 94, 95, 96, 98, 102, 103, 105, 106], "approxim": [4, 10, 18, 40, 53, 70, 100], "top": [4, 5, 10, 36, 40, 42, 43, 56, 63, 66, 69, 71, 78, 82, 83, 87, 88, 90, 91, 95, 96, 97, 98, 102, 103, 105, 107], "found": [4, 5, 7, 10, 13, 14, 18, 19, 20, 22, 23, 25, 26, 27, 28, 30, 31, 37, 41, 56, 83, 86, 87, 88, 89, 90, 91, 92, 94, 95, 97, 101, 103, 105, 107], "arxiv": [4, 18, 98], "ab": [4, 18, 98, 102], "1908": 4, "08619": 4, "1911": [4, 18], "07128": [4, 18], "embed": [4, 5, 10, 16, 70, 83, 87, 88, 90, 91, 94, 95, 98, 101, 105], "represent": [4, 5, 10, 16, 34, 37, 41, 49, 51, 63, 83, 87, 88, 90, 91, 92, 95, 97, 98, 103], "suppli": [4, 101, 102, 105], "2d": [4, 5, 16, 32, 40, 48, 49, 51, 55, 56, 61, 86, 88, 101], "num_exampl": [4, 5, 16, 18, 19, 20, 22, 23, 25, 26, 28, 30, 31, 33, 36, 62, 88, 89, 90, 91, 92, 94, 95, 98], "num_featur": [4, 5, 16, 37, 41, 60], "distanc": [4, 5, 10, 16, 18, 26, 28, 31, 50, 51, 52, 53, 54, 68, 70, 94, 103], "construct": [4, 5, 7, 10, 14, 18, 19, 20, 22, 23, 25, 26, 27, 28, 30, 31, 33, 37, 41, 48, 50, 51, 53, 60], "nearestneighbor": [4, 5, 10, 18, 51, 53, 70, 94, 103], "cosin": [4, 10, 51, 52, 54, 70, 103], "dim": [4, 70, 92, 106], "euclidean": [4, 5, 10, 51, 52, 54, 68, 70, 94], "dimension": [4, 26, 52, 56, 88, 98, 103], "scikit": [4, 41, 52, 53, 56, 70, 83, 86, 87, 88, 89, 90, 91, 94, 95, 97, 105], "fewer": [4, 10, 43, 56, 70, 102], "stabl": [4, 15, 21, 24, 29, 39, 44, 53, 56, 59, 70, 84], "exce": [4, 51, 89, 92], "transform": [4, 10, 32, 48, 51, 54, 56, 70, 71, 86, 87, 91, 92, 95, 103, 107], "rel": [4, 10, 36, 51, 61, 62, 70, 90, 91, 92, 94, 95, 98, 103], "adjust": [4, 38, 43, 51, 65, 70, 71, 83, 98], "closer": [4, 10, 68, 102], "highli": [4, 91, 92], "influenti": 4, "posit": [4, 5, 37, 41, 54, 56, 69, 96, 103], "convers": 4, "neg": [4, 10, 68, 69, 90, 91, 96], "valueerror": [4, 5, 12, 13, 34, 45, 48, 51, 54, 97], "neither": [4, 5, 10, 14, 52, 102], "nor": [4, 5, 10, 14], "larger": [4, 18, 52, 73, 75, 77, 89, 92, 95, 96, 97], "55": [4, 55, 96, 102, 105], "525": 4, "unifi": 5, "audit": [5, 9, 12, 13, 16, 88, 92, 93, 94, 95, 97, 98, 101, 102, 105], "kind": [5, 6, 7, 10, 88, 89, 90, 92, 94, 95, 96, 98], "addit": [5, 7, 9, 11, 13, 33, 35, 37, 41, 48, 51, 53, 57, 61, 69, 78, 79, 86, 87, 88, 90, 94, 95, 98, 100, 103, 104], "depend": [5, 7, 9, 11, 12, 13, 35, 39, 43, 45, 56, 59, 63, 70, 73, 74, 83], "instal": [5, 7, 9, 11, 35, 37, 39, 40, 41, 43, 59, 60, 75, 77], "pip": [5, 7, 9, 11, 35, 60, 83, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 98, 100, 101, 102, 103, 105, 106, 107], "development": [5, 7, 9, 11, 35], "git": [5, 7, 9, 11, 35, 83, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 98, 100, 101, 102, 103, 105], "github": [5, 7, 9, 11, 35, 37, 38, 56, 83, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 100, 101, 102, 103, 105], "com": [5, 7, 9, 11, 35, 37, 38, 40, 45, 56, 70, 83, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 98, 100, 101, 102, 103, 105, 106, 107], "egg": [5, 7, 9, 11, 35, 83, 96], "label_nam": [5, 7, 8, 10, 12, 18, 31, 83, 88, 89, 90, 91, 92, 94, 95, 97, 98, 101, 102, 105], "image_kei": [5, 10, 92], "interfac": [5, 9, 10, 53, 83, 97, 98], "librari": [5, 10, 41, 53, 66, 69, 70, 83, 87, 90, 95, 96, 97], "goal": [5, 105], "track": [5, 7, 13, 14, 83, 89, 90, 96, 97, 98], "intermedi": [5, 9, 91], "statist": [5, 10, 13, 22, 26, 36, 61, 62, 69, 91, 94, 95, 98], "convert": [5, 10, 12, 34, 37, 41, 49, 54, 57, 61, 68, 77, 81, 84, 87, 88, 92, 95, 96, 97, 100, 101, 102], "hug": [5, 10, 12, 92], "face": [5, 10, 12, 16, 92, 96, 101], "kei": [5, 7, 10, 12, 16, 18, 19, 20, 22, 23, 25, 26, 27, 28, 30, 31, 36, 37, 41, 48, 61, 62, 68, 70, 89, 90, 91, 92, 95, 97, 98, 100, 102], "string": [5, 10, 12, 14, 18, 19, 20, 22, 23, 25, 26, 27, 28, 30, 31, 33, 34, 36, 37, 41, 52, 56, 61, 62, 74, 78, 81, 82, 87, 94, 95, 97, 100, 101, 107], "dictionari": [5, 7, 10, 12, 13, 16, 18, 19, 20, 22, 23, 25, 26, 27, 28, 30, 31, 36, 37, 41, 47, 56, 61, 62, 65, 66, 68, 69, 90, 91, 94, 95, 98, 100, 101, 102], "path": [5, 12, 37, 40, 41, 69, 88, 90, 97, 102], "local": [5, 7, 10, 12, 37, 38, 41, 88, 89, 90, 91, 92, 96, 97, 98, 100, 101, 103, 105, 107], "text": [5, 7, 10, 12, 18, 19, 20, 22, 23, 25, 26, 27, 28, 30, 31, 42, 48, 70, 79, 81, 82, 83, 85, 90, 91, 93, 96, 97, 98, 99, 100, 103], "txt": [5, 12, 107], "csv": [5, 12, 86, 87, 94, 95, 105], "json": [5, 12], "hub": [5, 12], "multiclass": [5, 12, 15, 48, 56, 61, 101], "regress": [5, 7, 10, 12, 14, 16, 21, 30, 32, 34, 87, 89, 90, 91, 95, 99, 100, 103], "multilabel": [5, 12, 14, 15, 21, 25, 32, 34, 49, 101], "imag": [5, 9, 36, 41, 66, 68, 69, 70, 75, 77, 78, 83, 90, 91, 93, 96, 97, 99, 100, 101, 102, 104, 106], "field": [5, 10, 37, 41], "themselv": [5, 86, 87, 105], "pil": [5, 92], "cleanvis": [5, 10], "level": [5, 10, 16, 18, 19, 20, 22, 23, 25, 26, 27, 28, 30, 31, 33, 36, 51, 55, 79, 81, 91, 92, 97, 99, 101, 106], "load_dataset": [5, 12, 92], "glue": 5, "sst2": 5, "properti": [5, 12, 13, 34, 37, 41, 89], "has_label": [5, 12], "class_nam": [5, 12, 20, 36, 42, 62, 69, 78, 82, 83, 96, 98, 102, 106, 107], "empti": [5, 12, 46, 61, 91, 97, 101], "find_issu": [5, 6, 7, 8, 10, 14, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 83, 88, 89, 90, 91, 92, 94, 95, 97, 98, 101, 105], "issue_typ": [5, 6, 7, 8, 10, 13, 14, 16, 18, 19, 20, 22, 23, 25, 26, 28, 30, 31, 88, 89, 90, 91, 92, 94, 95, 97, 98, 101, 105], "sort": [5, 16, 40, 43, 48, 61, 63, 66, 68, 69, 71, 77, 79, 81, 86, 87, 88, 89, 90, 91, 92, 94, 95, 97, 98, 100, 101, 102, 105, 106, 107], "common": [5, 13, 16, 91, 93, 96, 97, 98, 101, 102, 106], "real": [5, 16, 83, 90, 91, 97, 98, 100, 105, 106], "world": [5, 16, 83, 90, 91, 97, 98, 100, 105, 106], "interact": [5, 16, 95, 97], "thereof": [5, 16], "insight": [5, 16, 69, 100], "best": [5, 9, 10, 16, 47, 61, 71, 86, 87, 90, 91, 92, 94, 95, 97, 100, 101, 103, 105, 107], "properli": [5, 10, 40, 47, 51, 56, 57, 75, 88, 89, 90, 91, 92, 94, 95, 97, 98, 101, 103, 105, 106], "respect": [5, 37, 41, 66, 69, 88, 89, 90, 91, 92, 94, 95, 98, 101, 102], "lexicograph": [5, 47, 56, 88, 89, 90, 91, 92, 94, 95, 98, 101], "squar": [5, 56, 73, 96, 105], "csr": [5, 51], "evenli": 5, "omit": [5, 68, 69, 92, 102], "itself": [5, 32, 37, 41, 51, 102], "three": [5, 10, 36, 61, 62, 73, 78, 86, 88, 89, 90, 91, 94, 96, 98, 100, 104, 105, 106, 107], "indptr": 5, "wise": 5, "start": [5, 7, 10, 34, 37, 38, 41, 48, 83, 101, 107], "th": [5, 42, 47, 55, 56, 61, 63, 66, 68, 69, 70, 79, 81, 82, 95, 101, 102, 107], "ascend": [5, 36, 62, 92, 98], "segment": [5, 75, 77, 78, 99], "reflect": [5, 51, 86, 87, 94, 95, 100, 102, 103, 105], "maintain": [5, 60], "kneighbors_graph": [5, 18, 53, 94], "illustr": 5, "todens": 5, "second": [5, 48, 56, 69, 71, 90, 94, 97, 98, 107], "duplic": [5, 9, 21, 22, 37, 41, 51, 83, 89, 90, 98, 105], "explicit": 5, "precend": 5, "collect": [5, 10, 13, 16, 18, 19, 20, 22, 23, 25, 26, 27, 28, 30, 31, 32, 61, 97, 100, 107], "unspecifi": [5, 16, 43, 63], "interest": [5, 16, 22, 78, 82, 86, 87, 95, 98, 105, 106, 107], "constructor": [5, 10, 16, 23, 30, 51, 53], "issuemanag": [5, 9, 13, 14, 16, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 30, 31, 33], "respons": [5, 16, 22, 53, 73, 74, 96, 105, 107], "random_st": [5, 86, 88, 89, 90, 91, 92, 98, 101, 103], "lab": [5, 6, 8, 10, 18, 19, 20, 22, 23, 25, 26, 27, 28, 30, 31, 40, 83, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 101, 105], "comprehens": [5, 83, 92, 101, 105], "nbr": 5, "n_neighbor": [5, 10, 18, 51, 53, 70], "mode": [5, 11, 18, 37, 40, 41, 103], "4x4": 5, "float64": [5, 26, 37, 41, 81], "compress": [5, 10, 51, 56, 75, 77], "toarrai": [5, 51], "NOT": [5, 40, 95], "23606798": 5, "41421356": [5, 51], "configur": [5, 16, 48, 91], "suppos": [5, 10, 66, 86, 87, 103, 105], "who": [5, 68, 86, 94, 98, 107], "manag": [5, 8, 9, 10, 13, 14, 15, 16, 17, 19, 20, 22, 23, 25, 26, 27, 28, 30, 31, 60, 90, 97], "clean_learning_kwarg": [5, 10, 23, 30, 97, 105], "labelissuemanag": [5, 10, 14, 21, 23], "prune_method": [5, 84], "prune_by_noise_r": [5, 43, 63, 98], "report": [5, 7, 11, 15, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 36, 62, 82, 83, 88, 89, 90, 91, 94, 95, 97, 98, 101, 105, 107], "include_descript": [5, 18, 19, 20, 22, 23, 25, 26, 28, 30, 31, 33], "show_summary_scor": [5, 33], "show_all_issu": [5, 33], "summari": [5, 7, 13, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 36, 42, 59, 60, 62, 67, 76, 77, 79, 80, 81, 84, 88, 89, 90, 91, 92, 94, 95, 96, 98, 102, 105, 106, 107], "show": [5, 7, 26, 37, 41, 47, 56, 69, 78, 82, 86, 89, 91, 92, 94, 95, 96, 97, 98, 100, 103, 105, 106, 107], "suffer": [5, 10, 13, 22, 63, 71, 82, 107], "onc": [5, 22, 36, 37, 41, 86, 89, 90, 97, 98, 101, 102], "familiar": 5, "overal": [5, 7, 10, 13, 18, 19, 20, 22, 23, 25, 26, 27, 28, 30, 31, 36, 42, 48, 61, 62, 65, 68, 69, 73, 77, 78, 79, 81, 83, 84, 88, 89, 90, 91, 92, 94, 95, 96, 97, 100, 102, 107], "sever": [5, 7, 10, 12, 13, 22, 37, 40, 41, 43, 65, 68, 70, 71, 77, 81, 83, 86, 87, 88, 89, 90, 91, 94, 95, 96, 97, 98, 102, 103, 107], "compar": [5, 61, 70, 81, 90, 91, 94, 98, 102], "issue_summari": [5, 7, 10, 13, 89, 90], "With": [5, 9, 10, 40, 87, 95, 97, 98, 100, 105, 106, 107], "usag": [5, 40, 60], "usual": [5, 12, 32, 33, 92, 100, 105], "ti": [5, 61], "exhibit": [5, 7, 10, 13, 78, 91, 92, 94, 95, 98, 102], "ie": [5, 73], "likelihood": [5, 10, 40, 42, 43, 63, 68, 70, 71, 75, 79], "wherea": [5, 56, 63, 86, 87, 104], "outlier": [5, 9, 14, 21, 22, 31, 44, 51, 71, 83, 90, 91, 98, 99, 105], "fundament": [5, 10], "incompar": 5, "quantiti": [5, 98, 105], "global": [5, 7, 22, 37, 41, 96], "non_iid": [5, 10, 14, 26, 91, 92, 94, 95, 98], "hypothesi": 5, "iid": [5, 7, 9, 26, 94, 98], "never": [5, 88, 98, 101, 103, 104], "someth": [5, 7, 10, 37, 41, 71, 102], "123": [5, 89, 90, 91], "456": [5, 86, 87, 88], "nearest_neighbor": 5, "7": [5, 48, 49, 60, 79, 81, 86, 87, 88, 90, 91, 94, 95, 96, 97, 100, 101, 102, 103, 105, 106, 107], "9": [5, 18, 19, 20, 22, 23, 25, 26, 28, 30, 31, 42, 48, 49, 65, 79, 81, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 98, 100, 101, 102, 103, 105, 106, 107], "distance_to_nearest_neighbor": [5, 90, 91, 92, 94, 95, 98], "789": 5, "get_issu": [5, 10, 13, 88, 89, 91, 92, 94, 95, 97, 101, 105], "issue_nam": [5, 6, 7, 10, 13, 14, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 90, 91], "focu": [5, 10, 13, 95, 106, 107], "full": [5, 10, 13, 40, 60, 69, 89, 92, 107], "summar": [5, 13, 18, 19, 20, 22, 23, 25, 26, 27, 28, 30, 31, 36, 62, 78, 82, 83, 106], "specific_issu": [5, 13], "lie": [5, 10, 70, 71, 87, 88, 90, 91, 92, 94, 95, 98], "get_issue_summari": [5, 13, 89, 91], "get_info": [5, 13, 91, 95, 96], "yet": [5, 17, 27, 60, 96, 100], "list_possible_issue_typ": [5, 14, 15], "regist": [5, 7, 14, 15, 17, 27, 37, 41, 90], "rtype": [5, 14, 18, 19, 20, 22, 23, 25, 26, 27, 28, 30, 31, 37, 41], "registri": [5, 14, 15], "list_default_issue_typ": [5, 14, 15], "folder": [5, 88, 90, 92], "load": [5, 12, 40, 69, 92, 96, 97, 98, 102, 103, 106, 107], "futur": [5, 10, 22, 37, 41, 61, 83, 87, 88, 90, 95, 97], "overwrit": [5, 90], "separ": [5, 36, 48, 65, 90, 91, 92, 97, 102, 104], "static": 5, "rememb": [5, 95, 97, 98], "part": [5, 10, 37, 41, 43, 66, 68, 69, 88, 90, 96, 106, 107], "ident": [5, 10, 22, 56, 89, 95], "datalab": [6, 8, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 83, 86, 87, 96, 97, 100, 105], "walk": 7, "alongsid": [7, 37, 41, 90, 97], "pre": [7, 8, 10, 37, 41, 90, 91, 105], "runtim": [7, 37, 40, 41, 73, 75, 77, 88, 92, 97], "issue_manager_factori": [7, 14, 90], "myissuemanag": [7, 14], "myissuemanagerforregress": 7, "decor": [7, 14], "ll": [7, 48, 86, 87, 88, 89, 90, 91, 92, 94, 95, 97, 98, 100, 101, 102, 103, 104, 105, 107], "thing": [7, 41, 87, 98, 105], "next": [7, 61, 83, 86, 87, 88, 89, 94, 95, 97, 100, 102, 105, 107], "dummi": 7, "randint": [7, 31, 48, 89, 90, 91, 97], "mark": [7, 10, 84, 102, 103, 105], "regard": [7, 91, 98], "rand": [7, 48, 51, 89, 90, 91], "is_": [7, 10, 90], "_issu": [7, 10, 90], "issue_score_kei": [7, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 90], "whole": [7, 26, 37, 41, 91], "make_summari": [7, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 90], "popul": [7, 91, 95], "verbosity_level": [7, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], "std": [7, 102], "raw_scor": 7, "bit": 7, "involv": [7, 40, 78, 82, 89, 97, 101], "intermediate_arg": 7, "min": [7, 48, 68, 81, 90, 97, 103], "sin_filt": 7, "sin": 7, "arang": 7, "kernel": 7, "affect": [7, 10, 37, 41, 52, 75, 81, 95, 97], "easili": [7, 46, 84, 86, 87, 88, 89, 91, 94, 95, 98, 100, 101, 103, 104, 105, 106], "hard": [7, 41, 96, 103], "sai": [7, 10, 37, 41, 101, 106], "anoth": [7, 22, 36, 40, 52, 55, 68, 71, 87, 94, 95, 97, 98, 100, 103], "try": [7, 9, 10, 40, 43, 60, 61, 75, 77, 83, 89, 91, 92, 94, 95, 97, 98, 106], "won": [7, 37, 41, 90, 91, 97, 101], "issue_manag": [7, 10, 11, 13, 15, 18, 19, 20, 23, 25, 26, 27, 28, 30, 31, 90], "instanti": [7, 16, 40, 60, 70, 87, 88, 91, 94], "477762": 7, "286455": 7, "term": [7, 10, 46, 56, 69, 88, 89, 90, 91, 92, 94, 95, 98], "4778": 7, "is_basic_issu": 7, "basic_scor": 7, "13": [7, 19, 28, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 98, 100, 102, 103, 105, 106, 107], "003042": 7, "058117": 7, "11": [7, 60, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 100, 101, 102, 103, 105, 106, 107], "121908": 7, "15": [7, 54, 60, 73, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 100, 102, 103, 105, 106, 107], "169312": 7, "17": [7, 87, 88, 89, 91, 92, 94, 95, 96, 97, 98, 100, 102, 103, 105, 106, 107], "229044": 7, "2865": 7, "is_intermediate_issu": 7, "intermediate_scor": 7, "000000": [7, 90, 91, 96, 98], "007059": 7, "009967": 7, "010995": 7, "087332": 7, "016296": 7, "03947": 7, "019459": 7, "794251": 7, "underperform": [8, 9, 31], "group": [8, 9, 26, 31, 96, 102, 107], "dbscan": [8, 10, 31, 97], "hdbscan": [8, 97], "etc": [8, 10, 22, 32, 37, 41, 46, 60, 61, 79, 83, 90, 91, 94, 95, 97, 98, 101, 105], "sensit": [8, 10, 54], "ep": [8, 31, 69], "radiu": 8, "min_sampl": [8, 31], "kmean": [8, 97], "your_data": 8, "get_pred_prob": [8, 89], "n_cluster": [8, 31, 97], "cluster_id": [8, 10, 31, 97], "labels_": 8, "underperforming_group": [8, 10, 14, 21, 91, 92, 94, 95, 97, 98], "search": [9, 10, 20, 26, 27, 44, 50, 51, 52, 55, 73, 97, 104], "nondefault": 9, "Near": [9, 97], "imbal": [9, 21, 65, 70, 71, 91], "null": [9, 14, 21, 91, 92, 95, 98], "togeth": [9, 10, 46, 87, 90, 91, 92, 94, 95, 98, 105, 107], "built": [9, 48], "own": [9, 37, 39, 41, 53, 59, 65, 66, 69, 75, 79, 86, 87, 88, 91, 92, 94, 95, 97, 100, 101, 105, 106, 107], "prerequisit": 9, "basic": [9, 41, 60, 94, 95, 103], "fulli": [9, 10, 37, 41, 60, 97], "platform": [9, 10, 83, 92, 94, 95, 97], "write": [9, 10], "code": [9, 10, 37, 41, 46, 56, 60, 83, 84, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 100, 101, 102, 103, 105, 106, 107], "being": [9, 10, 13, 36, 37, 41, 43, 48, 55, 56, 71, 86, 94, 97, 98, 105, 106], "100x": [9, 10], "faster": [9, 10, 40, 70, 73, 75, 77, 97, 98], "intellig": [9, 10], "quickli": [9, 10, 38, 86, 88, 92, 94, 95, 97, 101, 103, 106, 107], "fix": [9, 10, 61, 87, 89, 95, 98, 105], "scientist": [9, 10], "million": [9, 10, 107], "thank": [9, 10], "ai": [9, 10, 83, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 99, 100, 101, 103, 105, 107], "suggest": [9, 10, 36, 61, 62, 68, 87, 92, 95, 97, 105], "power": [9, 10, 92, 94, 95, 96, 98, 107], "automl": [9, 10, 83, 97], "system": [9, 10, 88, 89, 92, 94, 95, 106], "foundat": [9, 10, 83], "improv": [9, 10, 61, 86, 87, 91, 92, 96, 97, 98, 105, 106], "click": [9, 10, 88, 89, 90, 91, 92, 96, 98, 100, 101, 103, 105, 107], "tune": [9, 10, 87, 88, 95, 96, 103], "serv": [9, 10, 13, 16, 100], "auto": [9, 10, 86, 87, 89, 91, 96, 97, 105], "free": [9, 10, 83, 88, 91, 92, 94, 95, 97, 98], "page": [10, 91, 97, 98], "variou": [10, 13, 30, 39, 57, 59, 83, 86, 90, 91, 94, 95, 96, 97, 98, 100, 102], "why": [10, 89, 95], "matter": [10, 36, 62, 87, 95], "didn": 10, "plu": [10, 105], "_score": 10, "badli": [10, 68, 86, 87, 107], "issue_scor": 10, "outlier_scor": [10, 28, 89, 90, 91, 92, 94, 95, 98, 103], "atyp": [10, 70, 90, 91, 92, 94, 95, 98, 103], "datapoint": [10, 31, 43, 48, 56, 71, 74, 83, 86, 87, 88, 90, 91, 94, 95, 97, 104, 105], "is_issu": [10, 22], "is_outlier_issu": [10, 89, 90, 91, 92, 94, 95, 98], "annot": [10, 36, 47, 61, 62, 63, 65, 66, 68, 69, 78, 81, 82, 83, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 99, 102, 106], "dissimilar": [10, 94, 95], "preced": 10, "incorrect": [10, 68, 71, 74, 86, 88, 89, 90, 91, 92, 94, 95, 98, 102, 105], "due": [10, 40, 43, 71, 75, 77, 88, 89, 90, 91, 92, 94, 95, 98, 105], "appear": [10, 36, 47, 62, 63, 66, 74, 91, 92, 94, 95, 105, 106], "now": [10, 40, 84, 86, 87, 88, 89, 91, 100, 102, 103, 105, 107], "token": [10, 42, 55, 77, 78, 79, 80, 81, 82, 97, 98, 99], "hamper": [10, 92, 96], "analyt": [10, 83, 97, 100], "lead": [10, 68, 71, 92, 102], "draw": [10, 89, 90, 91], "conclus": [10, 95], "veri": [10, 36, 62, 66, 68, 87, 89, 90, 91, 92, 94, 95, 97, 98, 100, 103, 105], "rare": [10, 43, 69, 89, 90, 91, 92, 94, 95, 97, 98], "anomal": [10, 71, 89, 90, 91, 92, 94, 95, 98], "articl": [10, 40, 97], "blog": 10, "unexpect": [10, 37, 41, 95], "consequ": 10, "inspect": [10, 87, 88, 89, 91, 92, 98, 102, 105], "extrem": [10, 90, 91, 92, 94, 95, 97, 98], "record": [10, 37, 41, 88, 94, 105], "abbrevi": 10, "misspel": 10, "typo": [10, 82], "resolut": 10, "video": [10, 96], "audio": [10, 90, 91, 93, 97], "minor": [10, 55], "variat": 10, "translat": 10, "d": [10, 54, 86, 94, 95, 97, 98, 101, 105, 107], "constant": [10, 31, 73], "median": [10, 30, 54], "question": [10, 22, 83, 98], "nearli": [10, 22, 91, 92, 94, 95], "awar": [10, 84, 98], "presenc": [10, 51, 53, 98], "near_dupl": [10, 14, 19, 89, 90, 91, 92, 94, 95, 97, 98], "signific": [10, 94, 95, 98], "violat": [10, 94, 95, 98], "assumpt": [10, 94, 95, 98], "changepoint": [10, 94, 95, 98], "shift": [10, 51, 53, 94, 95, 98], "drift": [10, 91, 94, 98], "autocorrel": [10, 94, 95, 98], "almost": [10, 94, 95, 98], "adjac": [10, 51, 94, 95, 98], "tend": [10, 36, 46, 94, 95, 98, 106, 107], "sequenti": [10, 37, 41, 60, 92], "realli": [10, 87, 95, 100, 106], "mere": 10, "highlight": [10, 78, 82, 89, 90, 91, 94, 106], "necessarili": [10, 61, 69, 95, 98], "wrong": [10, 61, 66, 68, 84, 87, 89, 90, 91, 95, 97, 98, 102], "gap": 10, "b": [10, 18, 19, 20, 22, 23, 25, 26, 28, 30, 31, 36, 55, 56, 81, 86, 94, 95, 96, 97, 98, 104, 107], "x1": [10, 66, 69, 102], "x2": [10, 66, 69, 102], "10th": 10, "100th": 10, "90": [10, 81, 86, 94, 98, 104, 105], "similarli": [10, 37, 41, 90, 92, 94, 97, 102], "math": [10, 92], "behind": [10, 70, 98], "proper": [10, 56, 61, 66, 69, 86, 92, 95, 97, 100, 102], "scenario": [10, 51, 53, 71, 89, 90, 91], "underli": [10, 42, 53, 70, 79, 81, 107], "stem": [10, 70, 103], "evolv": 10, "influenc": 10, "act": [10, 68, 90], "accordingli": [10, 32, 51], "emploi": [10, 101, 103], "partit": [10, 104], "ahead": 10, "good": [10, 37, 41, 54, 60, 62, 68, 71, 75, 77, 78, 83, 89, 92, 94, 95], "problem": [10, 32, 40, 48, 78, 83, 90, 91, 92, 95, 97], "deploy": [10, 86, 87, 98, 105], "overlook": [10, 68, 102], "fact": 10, "thu": [10, 36, 41, 62, 86, 88, 94, 95, 98, 104, 107], "diagnos": [10, 91, 97], "rarest": [10, 91], "q": [10, 102], "subpar": 10, "special": [10, 51, 55], "techniqu": [10, 102], "smote": 10, "asymmetr": [10, 36], "class_imbal": [10, 14, 20, 91, 92, 94, 95, 98], "excess": [10, 92], "dark": [10, 106], "bright": [10, 107], "blurri": [10, 92], "lack": [10, 60], "unusu": [10, 102, 103], "cluster": [10, 18, 31], "slice": 10, "poor": 10, "subpopul": 10, "faq": [10, 83, 91, 92, 94, 95, 99], "get_self_confidence_for_each_label": [10, 48, 71], "r": [10, 40, 73, 89, 90, 91, 105, 106], "tabular": [10, 83, 85, 90, 91, 93, 97, 100], "categor": [10, 70, 85, 86, 90, 91, 93, 97, 105], "encod": [10, 49, 69, 75, 78, 86, 87, 94, 95, 97, 105, 106], "miss": [10, 27, 37, 41, 56, 66, 68, 89, 97, 102, 105], "pattern": 10, "isn": [10, 17, 27], "scalabl": 10, "sacrific": 10, "One": [10, 56, 70, 97], "quantif": 10, "data_valu": [10, 14, 21], "exert": [10, 91], "possible_issue_typ": 10, "label_kwarg": 10, "outlier_kwarg": 10, "near_duplicate_kwarg": 10, "non_iid_kwarg": 10, "class_imbalance_kwarg": 10, "underperforming_group_kwarg": 10, "null_kwarg": 10, "data_valuation_kwarg": 10, "health_summary_paramet": [10, 21, 23, 30], "health_summari": [10, 23, 36, 83, 96], "health_summary_kwarg": 10, "tandem": [10, 96], "view": [10, 37, 41, 42, 43, 77, 79, 81, 83, 86, 87, 88, 89, 90, 91, 94, 95, 96, 98, 100, 101, 102, 103, 104, 105, 107], "ood_kwarg": 10, "outofdistribut": [10, 28, 70, 103], "outsid": [10, 97, 101], "outlierissuemanag": [10, 14, 21, 28, 90], "nearduplicateissuemanag": [10, 14, 19, 21], "noniidissuemanag": [10, 14, 21, 26], "num_permut": [10, 26], "permut": [10, 26], "significance_threshold": [10, 26], "signic": 10, "noniid": [10, 21], "classimbalanceissuemanag": [10, 14, 20, 21], "underperforminggroupissuemanag": [10, 14, 21, 31], "determinin": 10, "neighbour": 10, "min_cluster_sampl": [10, 31], "filter_cluster_id": [10, 21, 31], "clustering_kwarg": [10, 31], "nullissuemanag": [10, 14, 21, 27], "datavaluationissuemanag": [10, 14, 18, 21], "codeblock": 10, "demonstr": [10, 40, 51, 90, 91, 92, 95, 96, 97, 98, 100, 101, 102, 105, 106], "howev": [10, 37, 41, 51, 56, 86, 87, 88, 92, 94, 95, 100, 104, 106], "mandatori": 10, "image_issue_types_kwarg": 10, "32": [10, 88, 90, 96, 100, 102], "vice": [10, 62], "versa": [10, 62], "light": [10, 92, 96, 102, 106], "29": [10, 89, 92, 96, 100, 101, 102, 106, 107], "low_inform": [10, 92], "odd_aspect_ratio": [10, 92], "35": [10, 89, 90, 96, 100, 101, 102], "odd_siz": [10, 92], "doc": [10, 37, 41, 70, 83, 88, 89, 90, 91, 92, 96, 98, 100, 101, 103, 105, 107], "studio": [11, 83, 91, 92, 94, 95, 97], "data_issu": [11, 15, 16, 33, 90], "issue_find": [11, 15], "factori": [11, 15, 16], "model_output": [11, 15], "except": [12, 37, 41, 60, 71, 89, 90, 91, 92, 100], "dataformaterror": [12, 15], "add_not": 12, "with_traceback": 12, "tb": 12, "__traceback__": 12, "datasetdicterror": [12, 15], "datasetdict": 12, "datasetloaderror": [12, 15], "dataset_typ": 12, "fail": 12, "hold": 12, "associ": [12, 16, 32, 34, 37, 41, 69, 100], "sublist": 12, "map_to_int": 12, "abc": [12, 22, 32], "is_avail": [12, 92], "dataissu": [13, 15, 16, 33], "central": [13, 107], "repositori": 13, "strategi": [13, 48, 97], "_infostrategi": 13, "basi": 13, "collect_statist": 13, "reus": [13, 22], "avoid": [13, 37, 40, 41, 43, 51, 56, 63, 66, 69, 73, 75, 77, 89, 90, 91, 97], "recomput": [13, 87], "weighted_knn_graph": 13, "issue_manager_that_computes_knn_graph": 13, "collect_issues_from_issue_manag": 13, "collect_issues_from_imagelab": 13, "imagelab": 13, "set_health_scor": 13, "health": [13, 23, 36, 62, 83], "get_data_statist": [13, 15], "concret": 14, "subclass": [14, 37, 41, 70, 90], "regressionlabelissuemanag": [14, 21, 29, 30], "multilabelissuemanag": [14, 21, 24, 25], "from_str": [14, 34, 44, 48], "my_issu": 14, "logic": [14, 34, 40, 43, 75, 77], "issuefind": [15, 16, 33], "modeloutput": [15, 32], "multiclasspredprob": [15, 32], "regressionpredict": [15, 32], "multilabelpredprob": [15, 32], "instati": 16, "public": [16, 98, 102, 106, 107], "creation": [16, 41], "execut": [16, 37, 41, 90, 97, 102], "coordin": [16, 66, 68, 69, 102, 107], "behavior": [16, 36, 37, 41, 69, 89, 97], "At": [16, 69, 97], "get_available_issue_typ": 16, "direct": [17, 27, 37, 41, 53, 60], "valuabl": 18, "vstack": [18, 56, 92, 96, 97, 98, 100, 101], "25": [18, 26, 37, 48, 54, 89, 91, 92, 96, 98, 100, 101, 102, 107], "classvar": [18, 19, 20, 22, 23, 25, 26, 27, 28, 30, 31], "short": [18, 19, 20, 22, 23, 25, 26, 27, 28, 30, 31, 55, 56], "data_valuation_scor": 18, "item": [18, 19, 20, 22, 23, 25, 26, 27, 28, 30, 31, 37, 41, 56, 89, 90, 91, 92, 97, 98, 100, 101], "some_info_kei": [18, 19, 20, 22, 23, 25, 26, 27, 28, 30, 31], "additional_info_kei": [18, 19, 20, 22, 23, 25, 26, 27, 28, 30, 31], "default_threshold": [18, 21, 28], "collect_info": [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], "info_to_omit": [18, 19, 20, 22, 23, 25, 26, 28, 30, 31], "compos": [18, 19, 20, 22, 23, 25, 26, 28, 30, 31, 37, 41, 87, 95, 103], "is_x_issu": [18, 19, 20, 22, 23, 25, 26, 28, 30, 31], "x_score": [18, 19, 20, 22, 23, 25, 26, 28, 30, 31], "val_a": [18, 19, 20, 22, 23, 25, 26, 28, 30, 31], "val_b1": [18, 19, 20, 22, 23, 25, 26, 28, 30, 31], "val_b2": [18, 19, 20, 22, 23, 25, 26, 28, 30, 31], "report_str": [18, 19, 20, 22, 23, 25, 26, 27, 28, 30, 31, 33], "_": [19, 20, 22, 23, 25, 26, 27, 30, 31, 48, 55, 56, 86, 88, 90, 92, 96, 98, 101], "near_duplicate_set": [19, 21, 90, 91, 92, 94, 95, 97, 98], "occurr": [19, 20, 22, 26, 27, 28, 31, 55], "median_nn_dist": 19, "near_duplicate_scor": [19, 90, 91, 92, 94, 95, 97, 98], "class_imbalance_scor": [20, 91], "bleed": [21, 24, 29, 39], "edg": [21, 24, 29, 39, 68, 83, 98, 107], "sharp": [21, 24, 29, 39], "get_health_summari": [21, 23], "ood": [21, 28, 70, 71, 89, 90, 91, 92, 95, 98, 103], "simplified_kolmogorov_smirnov_test": [21, 26], "outlier_cluster_label": [21, 31], "no_underperforming_cluster_id": [21, 31], "set_knn_graph": [21, 31], "perform_clust": [21, 31], "get_worst_clust": [21, 31], "find_issues_with_predict": [21, 29, 30], "find_issues_with_featur": [21, 29, 30], "believ": [22, 106], "priori": [22, 98], "abstract": [22, 32], "applic": [23, 61, 97, 98, 100, 107], "typevar": [23, 25, 37, 41, 55, 65, 68, 69], "scalartyp": [23, 25], "covari": [23, 25, 73, 105], "summary_dict": 23, "label_scor": [23, 25, 30, 88, 89, 90, 91, 92, 94, 95, 98, 101, 105], "neighbor_histogram": 26, "non_neighbor_histogram": 26, "kolmogorov": 26, "smirnov": 26, "largest": [26, 40, 48, 51, 71, 75, 77, 102, 106], "empir": [26, 47, 61], "cumul": 26, "ecdf": 26, "histogram": [26, 94, 105], "absolut": [26, 30], "trial": 26, "non_iid_scor": [26, 91, 94, 95, 98], "null_track": 27, "extend": [27, 49, 60, 92, 102, 103, 107], "superclass": 27, "arbitrari": [27, 36, 77, 81, 90, 103, 105], "prompt": 27, "address": [27, 87, 90, 91, 95, 97], "enabl": [27, 41, 53], "null_scor": [27, 91], "37037": 28, "q3_avg_dist": 28, "iqr_avg_dist": 28, "median_outlier_scor": 28, "issue_threshold": 28, "multipli": [30, 54], "deleg": 30, "confus": [31, 32, 36, 37, 41, 43, 56, 69, 87, 107], "50": [31, 41, 89, 97, 98, 100, 102, 103, 105], "keepdim": [31, 97], "signifi": 31, "absenc": 31, "find_issues_kwarg": 31, "int64": [31, 88, 100], "npt": 31, "int_": 31, "id": [31, 61, 90, 92, 97, 100], "unique_cluster_id": 31, "_description_": 31, "performed_clust": 31, "worst_cluster_id": 31, "underperforming_group_scor": [31, 91], "convent": [32, 34], "subject": [32, 34], "meant": [32, 34], "Not": [32, 53], "mainli": [32, 103, 107], "content": [32, 70, 88, 89, 90, 91, 92, 96, 98, 100, 101, 103, 105, 107], "fetch": [32, 40, 88, 91, 97], "datset": 33, "exclud": [33, 42, 78, 82, 90, 97, 107], "get_report": 33, "enum": [34, 48], "qualnam": [34, 48], "boundari": [34, 48, 89, 90, 91], "continu": [34, 60, 86, 87, 92, 95, 97, 100, 102, 105, 107], "binari": [34, 48, 56, 63, 65, 98, 107], "simultan": [34, 105], "task_str": 34, "is_classif": 34, "__contains__": [34, 44, 48], "member": [34, 37, 41, 48, 90, 91], "typeerror": [34, 48], "12": [34, 48, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 100, 102, 103, 105, 106, 107], "__getitem__": [34, 44, 48], "match": [34, 36, 37, 41, 43, 48, 61, 62, 71, 89, 90, 91, 92, 96, 102, 104, 106], "__iter__": [34, 44, 48], "__len__": [34, 44, 48], "alias": [34, 48], "is_regress": 34, "is_multilabel": 34, "overview": [36, 51, 86, 87, 88, 91, 92, 94, 95, 100, 102, 103, 105, 107], "modifi": [36, 37, 40, 41, 51, 53, 56, 97, 98], "rank_classes_by_label_qu": [36, 91], "merg": [36, 51, 55, 83, 96, 97, 107], "find_overlapping_class": [36, 97, 98], "problemat": [36, 62, 78, 82, 88, 102, 107], "unnorm": [36, 62, 98], "abov": [36, 37, 40, 41, 53, 56, 61, 68, 69, 71, 77, 81, 86, 87, 88, 90, 91, 92, 94, 95, 97, 98, 100, 101, 102, 104, 105, 106, 107], "model_select": [36, 48, 86, 87, 88, 89, 90, 91, 92, 94, 95, 97, 98, 100, 101, 103, 105], "cross_val_predict": [36, 41, 86, 87, 88, 89, 90, 91, 94, 95, 97, 98, 100, 104, 105], "get_data_labels_from_dataset": 36, "yourfavoritemodel": [36, 98], "cv": [36, 48, 86, 88, 89, 90, 91, 94, 98, 100], "df": [36, 56, 82, 88, 97], "overall_label_qu": [36, 62], "col": 36, "prob": [36, 55, 98, 104], "divid": [36, 62, 71], "label_nois": [36, 62], "human": [36, 96, 106, 107], "clearli": [36, 71, 92, 102, 106], "num": [36, 62, 96, 98], "overlap": [36, 83, 96, 97, 98], "ontolog": 36, "publish": [36, 107], "therefor": [36, 71], "vehicl": [36, 96], "truck": [36, 96, 103, 106], "intuit": [36, 62, 89], "car": [36, 96, 102, 106], "frequent": [36, 61, 97, 105], "characterist": 36, "l": [36, 37, 41, 66, 68, 69], "class1": 36, "class2": 36, "relationship": 36, "dog": [36, 56, 62, 64, 78, 96, 97, 103, 104, 107], "cat": [36, 56, 62, 64, 96, 97, 103, 104], "captur": [36, 88, 102, 103, 106], "co": [36, 37, 38], "noisy_label": [36, 89, 90, 91, 101], "overlapping_class": 36, "descend": [36, 37, 41, 48, 62, 69], "overall_label_health_scor": [36, 62, 98], "half": [36, 37, 39, 41, 62, 96, 107], "health_scor": [36, 62], "classes_by_label_qu": [36, 91], "cnn": [37, 39, 41, 92], "cifar": [37, 38, 96, 103], "teach": [37, 38], "bhanml": 37, "blob": 37, "master": [37, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 98, 100, 101, 102, 103, 105], "call_bn": [37, 39], "bn": 37, "input_channel": 37, "n_output": 37, "dropout_r": 37, "top_bn": 37, "architectur": [37, 41], "shown": [37, 69, 89, 90, 97, 100, 103, 104, 106, 107], "forward": [37, 38, 39, 41, 92, 100], "overridden": [37, 41], "although": [37, 41, 70, 86, 94], "recip": [37, 41], "afterward": [37, 41], "sinc": [37, 41, 45, 57, 62, 69, 77, 81, 97, 100, 101, 102, 104, 107], "former": [37, 41], "hook": [37, 41, 96], "silent": [37, 40, 41], "t_destin": [37, 39, 41], "__call__": [37, 39, 41, 44, 48], "add_modul": [37, 39, 41], "child": [37, 41], "fn": [37, 41, 69], "recurs": [37, 41, 48], "submodul": [37, 41, 50], "children": [37, 39, 41, 107], "nn": [37, 38, 41, 51, 92], "init": [37, 41, 98], "no_grad": [37, 41, 92, 103], "init_weight": [37, 41], "linear": [37, 41, 87, 92, 95], "fill_": [37, 41], "net": [37, 41, 88, 92, 96], "in_featur": [37, 41], "out_featur": [37, 41], "bia": [37, 41, 92], "tensor": [37, 38, 41, 87, 88, 92, 95, 103], "requires_grad": [37, 41], "bfloat16": [37, 39, 41], "cast": [37, 41, 88], "buffer": [37, 39, 41], "datatyp": [37, 41], "xdoctest": [37, 41], "undefin": [37, 41], "var": [37, 41], "buf": [37, 41], "20l": [37, 41], "1l": [37, 41], "5l": [37, 41], "call_super_init": [37, 39, 41], "immedi": [37, 41, 103], "compil": [37, 39, 41, 60], "cpu": [37, 39, 41, 43, 88, 92], "move": [37, 41, 48, 84, 96], "cuda": [37, 39, 41, 88, 92], "devic": [37, 41, 88, 92], "gpu": [37, 41, 87, 88, 95], "live": [37, 41], "copi": [37, 41, 73, 86, 88, 89, 90, 91, 94, 97, 101, 104, 105], "doubl": [37, 39, 41], "dump_patch": [37, 39, 41], "eval": [37, 39, 41, 92, 101, 103], "dropout": [37, 41], "batchnorm": [37, 41], "grad": [37, 41], "extra_repr": [37, 39, 41], "line": [37, 41, 83, 90, 96, 100, 103, 107], "get_buff": [37, 39, 41], "target": [37, 38, 41, 73, 74, 103, 105], "throw": [37, 41], "get_submodul": [37, 39, 41], "explan": [37, 41], "qualifi": [37, 41], "referenc": [37, 41], "attributeerror": [37, 41], "invalid": [37, 41, 95], "resolv": [37, 41, 89, 107], "get_extra_st": [37, 39, 41], "state_dict": [37, 39, 41], "set_extra_st": [37, 39, 41], "build": [37, 41, 51, 92, 106], "picklabl": [37, 41], "serial": [37, 41], "backward": [37, 41, 92], "break": [37, 41, 92, 102], "pickl": [37, 41, 102], "get_paramet": [37, 39, 41], "let": [37, 41, 70, 71, 86, 87, 88, 89, 91, 92, 94, 95, 97, 100, 101, 102, 103, 105, 106, 107], "net_b": [37, 41], "net_c": [37, 41], "conv": [37, 41], "conv2d": [37, 41, 92], "16": [37, 41, 48, 51, 60, 77, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 100, 102, 103, 106, 107], "33": [37, 41, 96, 102], "kernel_s": [37, 41], "stride": [37, 41], "200": [37, 41, 71, 89, 96, 102, 107], "diagram": [37, 41, 104], "degre": [37, 41], "queri": [37, 41, 51, 53, 91, 92, 97, 101], "named_modul": [37, 39, 41], "o": [37, 41, 54, 55, 88, 89, 90, 91, 96, 97, 98, 101, 102, 107], "transit": [37, 41], "ipu": [37, 39, 41], "load_state_dict": [37, 39, 41], "strict": [37, 41, 48], "persist": [37, 41], "strictli": [37, 41], "inplac": [37, 41, 100], "preserv": [37, 41, 56], "namedtupl": [37, 41], "missing_kei": [37, 41], "unexpected_kei": [37, 41], "runtimeerror": [37, 41], "idx": [37, 41, 56, 57, 69, 90, 92, 97, 98, 100, 102, 103], "named_buff": [37, 39, 41], "prefix": [37, 41, 88, 107], "remove_dupl": [37, 41], "prepend": [37, 41], "running_var": [37, 41], "named_children": [37, 39, 41], "conv4": [37, 41], "conv5": [37, 41], "memo": [37, 41], "named_paramet": [37, 39, 41], "register_backward_hook": [37, 39, 41], "deprec": [37, 41, 45, 87, 88, 95, 97], "favor": [37, 41], "register_full_backward_hook": [37, 39, 41], "removablehandl": [37, 41], "register_buff": [37, 39, 41], "running_mean": [37, 41], "register_forward_hook": [37, 39, 41], "with_kwarg": [37, 41], "always_cal": [37, 41], "possibli": [37, 41, 86, 94], "fire": [37, 41, 96], "register_module_forward_hook": [37, 41], "regardless": [37, 41, 90, 91], "register_forward_pre_hook": [37, 39, 41], "And": [37, 41], "forward_pr": [37, 41], "register_module_forward_pre_hook": [37, 41], "gradient": [37, 41, 92, 94, 105], "grad_input": [37, 41], "grad_output": [37, 41], "technic": [37, 41], "caller": [37, 41], "register_module_full_backward_hook": [37, 41], "register_full_backward_pre_hook": [37, 39, 41], "backward_pr": [37, 41], "register_module_full_backward_pre_hook": [37, 41], "register_load_state_dict_post_hook": [37, 39, 41], "post": [37, 41, 51], "incompatible_kei": [37, 41], "modif": [37, 41, 51], "thrown": [37, 41], "register_modul": [37, 39, 41], "register_paramet": [37, 39, 41], "register_state_dict_pre_hook": [37, 39, 41], "keep_var": [37, 41], "requires_grad_": [37, 39, 41], "autograd": [37, 41], "freez": [37, 41, 87, 88, 95], "finetun": [37, 41], "gan": [37, 41], "share_memori": [37, 39, 41], "share_memory_": [37, 41], "destin": [37, 41], "shallow": [37, 41], "releas": [37, 41, 60, 84, 88, 97], "design": [37, 41, 51, 89], "ordereddict": [37, 41], "detach": [37, 41, 92], "non_block": [37, 41], "memory_format": [37, 41], "channels_last": [37, 41], "Its": [37, 41, 48, 62, 68], "complex": [37, 41, 88], "integr": [37, 41, 53, 83, 97], "asynchron": [37, 41], "host": [37, 41], "pin": [37, 41, 87, 95, 96], "desir": [37, 41, 51, 55, 69], "4d": [37, 41], "ignore_w": [37, 41], "determinist": [37, 41, 88], "1913": [37, 41], "3420": [37, 41], "5113": [37, 41], "2325": [37, 41], "env": [37, 41], "torch_doctest_cuda1": [37, 41], "gpu1": [37, 41], "1914": [37, 41], "5112": [37, 41], "2324": [37, 41], "float16": [37, 41], "cdoubl": [37, 41], "3741": [37, 41], "2382": [37, 41], "5593": [37, 41], "4443": [37, 41], "complex128": [37, 41], "6122": [37, 41], "1150": [37, 41], "to_empti": [37, 39, 41], "storag": [37, 41, 87, 95], "dst_type": [37, 41], "xpu": [37, 39, 41], "zero_grad": [37, 39, 41, 92], "set_to_non": [37, 41], "reset": [37, 41], "context": [37, 41, 102], "noisili": [38, 98], "han": 38, "2018": 38, "cifar_cnn": [38, 39], "loss_coteach": [38, 39], "y_1": 38, "y_2": 38, "forget_r": 38, "class_weight": 38, "logit": [38, 60, 92], "decim": [38, 56], "forget": [38, 48, 107], "rate_schedul": 38, "epoch": [38, 39, 41, 92, 97], "initialize_lr_schedul": [38, 39], "lr": [38, 39, 41], "001": [38, 71, 97], "250": [38, 90, 91, 98, 102], "epoch_decay_start": 38, "80": [38, 86, 94, 101, 105], "schedul": 38, "beta": 38, "adam": 38, "adjust_learning_r": [38, 39], "alpha_plan": 38, "beta1_plan": 38, "forget_rate_schedul": [38, 39], "num_gradu": 38, "expon": 38, "tell": [38, 87, 92, 95, 98], "train_load": [38, 41], "model1": [38, 98], "optimizer1": 38, "model2": [38, 98], "optimizer2": 38, "dataload": [38, 92, 103], "parser": 38, "parse_arg": 38, "num_iter_per_epoch": 38, "print_freq": 38, "topk": 38, "top1": 38, "top5": 38, "test_load": 38, "offici": [39, 59, 107], "wish": [39, 59, 103, 106, 107], "adj_confident_thresholds_shar": [39, 40], "labels_shar": [39, 40], "pred_probs_shar": [39, 40], "labelinspector": [39, 40, 97], "get_num_issu": [39, 40], "get_quality_scor": [39, 40], "update_confident_threshold": [39, 40], "score_label_qu": [39, 40], "split_arr": [39, 40], "span_classif": 39, "display_issu": [39, 42, 76, 77, 78, 79, 80, 81, 82, 106, 107], "mnist_pytorch": 39, "get_mnist_dataset": [39, 41], "get_sklearn_digits_dataset": [39, 41], "simplenet": [39, 41], "batch_siz": [39, 40, 41, 75, 77, 89, 92, 97, 103, 106], "log_interv": [39, 41], "momentum": [39, 41], "no_cuda": [39, 41], "test_batch_s": [39, 41, 92], "loader": [39, 41, 92], "set_predict_proba_request": [39, 41], "set_predict_request": [39, 41], "coteach": [39, 84], "mini": [40, 75, 77, 97], "low_self_confid": [40, 43, 63], "self_confid": [40, 43, 44, 48, 63, 65, 71, 79, 81, 86, 87, 97, 98], "conveni": [40, 53, 86, 87, 88, 95], "script": 40, "labels_fil": [40, 97], "pred_probs_fil": [40, 97], "quality_score_kwarg": 40, "num_issue_kwarg": 40, "return_mask": 40, "variant": [40, 61, 106], "read": [40, 45, 91, 97, 98, 103, 107], "zarr": [40, 97], "memmap": [40, 106], "pythonspe": 40, "mmap": [40, 97], "hdf5": 40, "further": [40, 42, 62, 63, 65, 68, 69, 77, 78, 88, 97], "yourfil": 40, "npy": [40, 96, 97, 106], "mmap_mod": [40, 106], "tip": [40, 43, 60, 97], "save_arrai": 40, "your_arrai": 40, "disk": [40, 96, 97], "npz": [40, 107], "maxim": [40, 61, 75, 77, 106], "multiprocess": [40, 43, 63, 75, 77, 92, 97], "linux": [40, 75, 77], "physic": [40, 43, 75, 77, 102], "psutil": [40, 43, 75, 77], "labels_arrai": [40, 57], "predprob": 40, "pred_probs_arrai": 40, "back": [40, 51, 69, 90, 97, 102, 103], "store_result": 40, "becom": [40, 103], "verifi": [40, 53, 97, 100, 103], "long": [40, 61, 70, 100], "enough": [40, 56, 97], "chunk": [40, 104], "ram": [40, 96], "end_index": 40, "labels_batch": 40, "pred_probs_batch": 40, "batch_result": 40, "indices_of_examples_with_issu": [40, 97], "shortcut": 40, "encount": [40, 43, 75], "1000": [40, 88, 95, 97, 103], "aggreg": [40, 44, 48, 61, 65, 68, 71, 81, 97, 98, 100], "seen": [40, 89, 97, 103, 107], "far": [40, 61], "label_quality_scor": [40, 65, 68, 71, 74, 98, 102], "method1": 40, "method2": 40, "normalized_margin": [40, 43, 44, 48, 63, 65, 71, 79, 81], "low_normalized_margin": [40, 43, 63], "issue_indic": [40, 68, 92], "update_num_issu": 40, "arr": [40, 97], "chunksiz": 40, "convnet": 41, "bespok": [41, 60], "download": [41, 88, 97, 103], "mnist": [41, 83, 88, 96], "handwritten": 41, "digit": [41, 88, 96], "last": [41, 48, 66, 69, 89, 90, 91, 97, 100, 102, 107], "sklearn_digits_test_s": 41, "64": [41, 86, 92, 94, 98, 102], "01": [41, 71, 73, 88, 98, 101, 102, 107], "templat": 41, "flexibli": 41, "among": [41, 61, 98], "test_set": 41, "Be": 41, "overrid": 41, "train_idx": [41, 56, 103], "train_label": [41, 87, 103], "span": 42, "sentenc": [42, 55, 79, 81, 82, 87, 95], "token_classif": [42, 55, 79, 81, 82, 97], "encourag": [43, 63, 71, 74], "multilabel_classif": [43, 62, 63, 65, 71, 97, 101], "pred_probs_by_class": 43, "prune_count_matrix_col": 43, "rank_by_kwarg": [43, 63, 71, 98], "num_to_remove_per_class": [43, 63], "bad": [43, 51, 63, 68, 71, 95, 97], "seem": [43, 98, 101], "aren": 43, "confidence_weighted_entropi": [43, 44, 48, 63, 65, 71, 79, 81], "label_issues_idx": [43, 71], "entropi": [43, 45, 47, 48, 70, 71], "prune_by_class": [43, 63, 98], "predicted_neq_given": [43, 63, 98], "prune_counts_matrix": 43, "smallest": [43, 71], "unus": 43, "number_of_mislabeled_examples_in_class_k": 43, "delet": [43, 83, 87, 97], "too": [43, 48, 51, 70, 91, 92, 97, 102], "thread": [43, 63], "window": [43, 88, 96], "shorter": [43, 66], "find_predicted_neq_given": 43, "find_label_issues_using_argmax_confusion_matrix": 43, "remove_noise_from_class": [44, 56], "clip_noise_r": [44, 56], "clip_valu": [44, 56], "value_count": [44, 56, 97], "value_counts_fill_missing_class": [44, 56], "get_missing_class": [44, 56], "round_preserving_sum": [44, 56], "round_preserving_row_tot": [44, 56], "estimate_pu_f1": [44, 56], "confusion_matrix": [44, 56], "print_square_matrix": [44, 56], "print_noise_matrix": [44, 56, 98], "print_inverse_noise_matrix": [44, 56], "print_joint_matrix": [44, 56, 98], "compress_int_arrai": [44, 56], "train_val_split": [44, 56], "subset_x_i": [44, 56], "subset_label": [44, 56], "subset_data": [44, 56], "extract_indices_tf": [44, 56], "unshuffle_tensorflow_dataset": [44, 56], "is_torch_dataset": [44, 56], "is_tensorflow_dataset": [44, 56], "csr_vstack": [44, 56], "append_extra_datapoint": [44, 56], "get_num_class": [44, 56], "num_unique_class": [44, 56], "get_unique_class": [44, 56], "format_label": [44, 56], "smart_display_datafram": [44, 56], "force_two_dimens": [44, 56], "latent_algebra": [44, 84], "compute_ps_py_inv_noise_matrix": [44, 46], "compute_py_inv_noise_matrix": [44, 46], "compute_inv_noise_matrix": [44, 46], "compute_noise_matrix_from_invers": [44, 46], "compute_pi": [44, 46], "compute_pyx": [44, 46], "label_quality_util": 44, "get_normalized_entropi": [44, 45], "multilabel_util": [44, 101], "stack_compl": [44, 49], "get_onehot_num_class": [44, 49], "int2onehot": [44, 49, 101], "onehot2int": [44, 49, 101], "multilabel_scor": [44, 65], "classlabelscor": [44, 48], "exponential_moving_averag": [44, 48, 65], "softmin": [44, 48, 65, 68, 77, 81], "possible_method": [44, 48], "multilabelscor": [44, 48], "get_class_label_quality_scor": [44, 48], "multilabel_pi": [44, 48], "get_cross_validated_multilabel_pred_prob": [44, 48], "default_k": [44, 50, 51], "features_to_knn": [44, 50, 51], "construct_knn_graph_from_index": [44, 50, 51, 53], "create_knn_graph_and_index": [44, 50, 51], "correct_knn_graph": [44, 50, 51], "correct_knn_distances_and_indices_with_exact_duplicate_sets_inplac": [44, 50, 51], "correct_knn_distances_and_indic": [44, 50, 51], "high_dimension_cutoff": [44, 50, 52], "row_count_cutoff": [44, 50, 52], "decide_euclidean_metr": [44, 50, 52], "decide_default_metr": [44, 50, 52], "construct_knn": [44, 50, 53], "transform_distances_to_scor": [44, 54], "correct_precision_error": [44, 54], "token_classification_util": [44, 107], "get_sent": [44, 55, 107], "filter_sent": [44, 55, 107], "process_token": [44, 55], "merge_prob": [44, 55], "color_sent": [44, 55], "assert_valid_input": [44, 57], "assert_valid_class_label": [44, 57], "assert_nonempty_input": [44, 57], "assert_indexing_work": [44, 57], "labels_to_arrai": [44, 57], "labels_to_list_multilabel": [44, 57], "min_allowed_prob": 45, "wikipedia": 45, "activ": [45, 47, 60, 61, 83, 100], "towardsdatasci": 45, "cheatsheet": 45, "ec57bc067c0b": 45, "clip": [45, 56, 88], "behav": 45, "unnecessari": [45, 97], "slightli": [45, 86, 87, 89], "interv": [45, 48, 103], "herein": 46, "inexact": 46, "cours": 46, "propag": 46, "throughout": [46, 56, 73, 88, 100, 106, 107], "increas": [46, 54, 68, 70, 71, 88, 90, 97, 100, 101, 107], "dot": [46, 81, 97], "true_labels_class_count": 46, "pyx": 46, "multiannot": 47, "assert_valid_inputs_multiannot": 47, "labels_multiannot": [47, 61], "ensembl": [47, 48, 61, 71, 86, 94, 97, 101, 103, 105], "allow_single_label": 47, "annotator_id": 47, "assert_valid_pred_prob": 47, "pred_probs_unlabel": [47, 61], "format_multiannotator_label": [47, 61, 100], "formatted_label": [47, 56], "old": [47, 56, 84, 88, 96], "check_consensus_label_class": 47, "consensus_label": [47, 61, 100], "consensus_method": [47, 61], "consensu": [47, 61, 83, 99, 107], "establish": [47, 60, 87, 105], "compute_soft_cross_entropi": 47, "soft": [47, 96], "find_best_temp_scal": 47, "coarse_search_rang": [47, 73, 97], "fine_search_s": [47, 73, 97], "temperatur": [47, 48, 68, 77, 81], "scale": [47, 54, 86, 96, 97, 103, 106], "factor": [47, 48, 54, 75, 77], "minim": [47, 68, 103], "temp_scale_pred_prob": 47, "temp": 47, "sharpen": [47, 96], "smoothen": 47, "get_normalized_margin_for_each_label": [48, 71], "get_confidence_weighted_entropy_for_each_label": [48, 71], "75": [48, 89, 90, 91, 96, 100, 101, 102, 105, 107], "scorer": 48, "alpha": [48, 65, 68, 89, 90, 91, 98, 101, 105], "exponenti": 48, "ema": 48, "s_1": 48, "s_k": 48, "ema_k": 48, "accord": [48, 63, 94, 95, 98, 107], "formula": [48, 54], "_t": 48, "cdot": 48, "s_t": 48, "qquad": 48, "leq": 48, "_1": 48, "give": [48, 71, 98, 100, 106], "recent": [48, 107], "success": 48, "previou": [48, 51, 92, 94, 97, 102], "discount": 48, "s_ema": 48, "175": [48, 92, 98, 102], "underflow": 48, "nan": [48, 61, 86, 94, 100, 105], "aggregated_scor": 48, "base_scor": 48, "base_scorer_kwarg": 48, "aggregator_kwarg": [48, 65], "n_sampl": 48, "n_label": 48, "worst": [48, 100], "class_label_quality_scor": 48, "42": [48, 95, 96, 102, 107], "452": 48, "new_scor": 48, "575": 48, "get_label_quality_scores_per_class": [48, 64, 65], "ml_scorer": 48, "binar": [48, 49], "reformat": [48, 88], "wider": 48, "splitter": 48, "kfold": [48, 92], "onevsrestclassifi": [48, 101], "randomforestclassifi": [48, 98, 101], "n_split": [48, 91, 92, 101], "pred_prob_slic": 49, "onehot": 49, "hot": [49, 63, 69, 75, 78, 86, 94, 96, 97, 105, 106], "onehot_matrix": 49, "pairwis": [50, 52, 70], "reli": [51, 70, 87, 88, 89, 90, 91, 95, 102, 103, 105], "sklearn_knn_kwarg": 51, "correction_featur": 51, "discourag": 51, "flexibl": [51, 97], "manner": [51, 65, 86, 87, 100, 105], "701": 51, "900": [51, 86, 94, 105], "436": 51, "000": [51, 87, 92, 95, 96, 107], "idea": [51, 71, 89, 102], "dens": [51, 60], "33140006": 51, "76210367": 51, "correct_exact_dupl": 51, "mutual": [51, 62, 101], "vari": [51, 68, 91], "exact_duplicate_set": 51, "main": [51, 61, 89], "front": [51, 96], "consider": 51, "capabl": [51, 83], "come": [51, 56, 89, 90, 91, 97, 106], "misidentif": 51, "corrected_dist": 51, "corrected_indic": 51, "sqrt": 51, "distant": 51, "suitabl": [52, 61, 86, 94], "slower": 52, "decid": [52, 61, 87, 95, 96, 100, 105, 107], "predefin": 52, "met": [52, 107], "euclidean_dist": [52, 70], "spatial": [52, 70], "decis": [52, 86, 89, 90, 91], "That": [52, 98, 101], "cosine_dist": 52, "knn_kwarg": 53, "html": [53, 56, 66, 69, 70, 94, 97, 98], "kneighbor": 53, "metric_param": 53, "n_features_in_": 53, "effective_metric_params_": 53, "effective_metric_": 53, "n_samples_fit_": 53, "__sklearn_is_fitted__": 53, "conduct": 53, "is_fit": 53, "trail": 53, "underscor": 53, "avg_dist": 54, "scaling_factor": 54, "exp": [54, 70, 71, 90], "dt": 54, "right": [54, 66, 69, 87, 95, 101, 102, 103], "strength": [54, 69], "pronounc": 54, "differenti": 54, "ly": 54, "rule": [54, 55, 96], "thumb": 54, "ood_features_scor": [54, 70, 103], "88988177": 54, "80519832": 54, "toler": 54, "minkowski": 54, "noth": 54, "epsilon": 54, "sensibl": 54, "fixed_scor": 54, "readabl": 55, "lambda": [55, 88, 90, 97, 100], "long_sent": 55, "headlin": 55, "charact": [55, 56], "s1": 55, "s2": 55, "processed_token": 55, "alecnlcb": 55, "entiti": [55, 83, 97, 107], "mapped_ent": 55, "unique_ident": 55, "loc": [55, 89, 90, 91, 92, 94, 107], "nbitbas": [55, 65], "probs_merg": 55, "0125": [55, 81], "0375": 55, "075": 55, "025": 55, "color": [55, 78, 89, 90, 91, 94, 98, 101, 103, 105, 106], "red": [55, 69, 89, 90, 91, 96, 98, 101, 102, 103, 106], "colored_sent": 55, "termcolor": 55, "31msentenc": 55, "0m": 55, "ancillari": 56, "class_without_nois": 56, "any_other_class": 56, "choos": [56, 71, 86, 94, 97, 98, 105], "tradition": 56, "new_sum": 56, "fill": 56, "major": [56, 61, 84, 89, 92, 103], "versu": [56, 98], "obviou": 56, "cgdeboer": 56, "iteround": 56, "reach": 56, "prob_s_eq_1": 56, "claesen": 56, "f1": [56, 69, 95, 98], "BE": 56, "left_nam": 56, "top_nam": 56, "titl": [56, 89, 90, 91, 98, 101, 103], "short_titl": 56, "round_plac": 56, "pretti": [56, 89, 98], "joint_matrix": 56, "num_possible_valu": 56, "holdout_idx": 56, "extract": [56, 70, 87, 88, 94, 95, 100, 103, 106], "allow_shuffl": 56, "turn": [56, 83, 102], "shuffledataset": 56, "histori": 56, "pre_x": 56, "buffer_s": 56, "csr_matric": 56, "append": [56, 88, 89, 92, 96, 97, 98, 100, 101, 102, 103, 107], "bottom": [56, 66, 69, 102], "to_data": 56, "from_data": 56, "taken": 56, "label_matrix": 56, "canon": 56, "displai": [56, 69, 78, 82, 87, 88, 89, 94, 95, 98, 107], "jupyt": [56, 88, 89, 90, 91, 92, 96, 97, 98, 100, 101, 103, 105, 107], "notebook": [56, 61, 88, 89, 91, 96, 97, 98, 100, 101, 102, 106, 107], "consol": 56, "allow_missing_class": 57, "allow_one_class": 57, "length_x": 57, "labellik": 57, "labels_list": [57, 63], "keraswrappermodel": [59, 60, 83], "keraswrappersequenti": [59, 60], "tf": [60, 88], "legaci": 60, "newer": 60, "interim": 60, "advis": [60, 101], "stabil": [60, 70], "until": 60, "accommod": 60, "keraswrapp": 60, "huggingface_keras_imdb": 60, "unit": [60, 107], "model_kwarg": [60, 73], "compile_kwarg": 60, "sparsecategoricalcrossentropi": 60, "layer": [60, 87, 88, 95, 103], "my_keras_model": 60, "from_logit": 60, "declar": 60, "apply_softmax": 60, "analysi": 61, "analyz": [61, 83, 98, 100, 101], "get_label_quality_multiannot": [61, 100], "vote": 61, "crowdsourc": [61, 83, 100], "dawid": [61, 100], "skene": [61, 100], "analog": [61, 89, 96, 100], "chosen": [61, 71, 97, 100], "crowdlab": [61, 100], "unlabel": [61, 92, 94, 95, 100, 103, 106], "get_active_learning_scor": [61, 100], "activelab": [61, 100], "priorit": [61, 68, 102, 106, 107], "showcas": 61, "best_qual": 61, "quality_method": 61, "calibrate_prob": 61, "return_detailed_qu": 61, "return_annotator_stat": 61, "return_weight": 61, "label_quality_score_kwarg": 61, "did": [61, 62, 86, 87, 88, 94, 98, 100, 105], "majority_vot": 61, "broken": [61, 69, 96, 105], "highest": [61, 69, 90, 92, 104], "0th": 61, "consensus_quality_scor": [61, 100], "annotator_agr": [61, 100], "reman": 61, "1st": 61, "2nd": [61, 75], "3rd": 61, "consensus_label_suffix": 61, "consensus_quality_score_suffix": 61, "suffix": 61, "emsembl": 61, "weigh": [61, 96], "agreement": [61, 100], "agre": 61, "prevent": [61, 97], "overconfid": [61, 104], "detailed_label_qu": [61, 100], "annotator_stat": [61, 100], "model_weight": 61, "annotator_weight": 61, "warn": [61, 90, 91, 92, 94, 95, 97, 98], "labels_info": 61, "num_annot": [61, 100], "deriv": [61, 100], "quality_annotator_1": 61, "quality_annotator_2": 61, "quality_annotator_m": 61, "annotator_qu": [61, 100], "num_examples_label": [61, 100], "agreement_with_consensu": [61, 100], "worst_class": [61, 100], "trustworthi": [61, 100, 105], "get_label_quality_multiannotator_ensembl": 61, "weigtht": 61, "budget": 61, "retrain": [61, 87, 105], "active_learning_scor": 61, "active_learning_scores_unlabel": 61, "get_active_learning_scores_ensembl": 61, "henc": [61, 88, 90, 100], "get_majority_vote_label": [61, 100], "event": 61, "lastli": [61, 94], "convert_long_to_wide_dataset": 61, "labels_multiannotator_long": 61, "wide": [61, 86, 87, 88], "labels_multiannotator_wid": 61, "common_multilabel_issu": [62, 64], "exclus": [62, 101], "rank_classes_by_multilabel_qu": [62, 64], "overall_multilabel_health_scor": [62, 64], "multilabel_health_summari": [62, 64], "classes_by_multilabel_qu": 62, "inner": [63, 77], "find_multilabel_issues_per_class": [63, 64], "per_class_label_issu": 63, "label_issues_list": 63, "pred_probs_list": [63, 71, 92, 98], "anim": [64, 103], "rat": 64, "predat": 64, "pet": 64, "reptil": 64, "box": [66, 68, 69, 96, 102], "object_detect": [66, 68, 69, 102], "return_indices_ranked_by_scor": [66, 102], "overlapping_label_check": [66, 68], "suboptim": [66, 68], "locat": [66, 68, 102, 106, 107], "bbox": [66, 69, 102], "image_nam": [66, 69], "y1": [66, 69, 102], "y2": [66, 69, 102], "later": [66, 69, 70, 87, 107], "corner": [66, 69, 102], "xyxi": [66, 69, 102], "io": [66, 69, 88, 96], "keras_cv": [66, 69], "bounding_box": [66, 69, 102], "detectron": [66, 69, 102], "detectron2": [66, 69, 102], "readthedoc": [66, 69], "en": [66, 69], "latest": [66, 69], "visual": [66, 67, 69, 86, 89, 90, 91, 92, 105, 107], "draw_box": [66, 69], "mmdetect": [66, 69, 102], "swap": [66, 68, 78, 82], "penal": [66, 68], "concern": [66, 68, 83, 91], "issues_from_scor": [67, 68, 76, 77, 78, 80, 81, 82, 102, 106, 107], "compute_overlooked_box_scor": [67, 68], "compute_badloc_box_scor": [67, 68], "compute_swap_box_scor": [67, 68], "pool_box_scores_per_imag": [67, 68], "object_counts_per_imag": [67, 69, 102], "bounding_box_size_distribut": [67, 69, 102], "class_label_distribut": [67, 69, 102], "get_sorted_bbox_count_idx": [67, 69], "plot_class_size_distribut": [67, 69], "plot_class_distribut": [67, 69], "get_average_per_class_confusion_matrix": [67, 69], "calculate_per_class_metr": [67, 69], "aggregation_weight": 68, "imperfect": [68, 97], "chose": [68, 100, 102], "imperfectli": [68, 102], "dirti": [68, 71, 74, 105], "subtyp": 68, "badloc": 68, "nonneg": 68, "high_probability_threshold": 68, "auxiliary_input": [68, 69], "iou": [68, 69], "heavili": 68, "auxiliarytypesdict": 68, "pred_label": [68, 87], "pred_label_prob": 68, "pred_bbox": 68, "lab_label": 68, "lab_bbox": 68, "similarity_matrix": 68, "min_possible_similar": 68, "scores_overlook": 68, "low_probability_threshold": 68, "scores_badloc": 68, "accident": [68, 87, 94, 95, 97], "scores_swap": 68, "box_scor": 68, "image_scor": [68, 77, 106], "discov": [69, 91, 107], "abnorm": [69, 92, 102], "auxiliari": [69, 103, 106], "_get_valid_inputs_for_compute_scor": 69, "object_count": 69, "down": 69, "bbox_siz": 69, "class_distribut": 69, "plot": [69, 89, 90, 91, 98, 101, 103, 105, 106], "sorted_idx": [69, 103], "class_to_show": 69, "hidden": [69, 89, 103], "max_class_to_show": 69, "plt": [69, 78, 89, 90, 91, 92, 98, 101, 103, 105], "matplotlib": [69, 78, 89, 90, 91, 92, 98, 101, 102, 103, 105], "pyplot": [69, 78, 89, 90, 91, 92, 98, 101, 103, 105], "prediction_threshold": 69, "overlai": [69, 102], "figsiz": [69, 89, 90, 91, 92, 98, 101, 103], "save_path": [69, 102], "blue": [69, 96, 98, 102], "overlaid": 69, "side": [69, 96, 102], "figur": [69, 98, 101, 103, 105], "extens": [69, 98, 100], "png": [69, 102], "pdf": [69, 70], "svg": 69, "num_proc": [69, 92], "intersect": [69, 97], "tp": 69, "fp": 69, "ground": [69, 96, 98, 100, 105], "truth": [69, 98, 100, 105], "bias": 69, "avg_metr": 69, "distionari": 69, "95": [69, 79, 81, 94, 96, 98, 105], "per_class_metr": 69, "Of": 70, "li": 70, "smaller": [70, 89, 101, 102], "find_top_issu": [70, 71, 103], "dist_metr": 70, "subtract": [70, 71], "renorm": [70, 71, 97], "least_confid": 70, "sum_": 70, "log": [70, 71, 84], "softmax": [70, 77, 81, 92], "literatur": 70, "gen": 70, "liu": 70, "lochman": 70, "zach": 70, "openaccess": 70, "thecvf": 70, "cvpr2023": 70, "liu_gen_pushing_the_limits_of_softmax": 70, "based_out": 70, "distribution_detection_cvpr_2023_pap": 70, "fit_scor": [70, 103], "ood_predictions_scor": 70, "pretrain": [70, 87, 88, 95, 103], "adjust_confident_threshold": 70, "probabilist": [70, 86, 88, 90, 91, 94, 95, 103, 104], "order_label_issu": [71, 84], "whichev": [71, 104], "argsort": [71, 87, 92, 95, 98, 102, 103, 105], "max_": 71, "get_label_quality_ensemble_scor": [71, 97, 98], "weight_ensemble_members_bi": 71, "custom_weight": 71, "log_loss_search_t_valu": 71, "0001": [71, 96], "scheme": 71, "log_loss_search": 71, "log_loss": [71, 95], "1e0": 71, "1e1": 71, "1e2": 71, "2e2": 71, "quality_scor": [71, 103], "forth": 71, "top_issue_indic": 71, "rank_bi": [71, 84], "weird": [71, 82], "minu": 71, "prob_label": 71, "max_prob_not_label": 71, "AND": [71, 95], "get_epistemic_uncertainti": [72, 73], "get_aleatoric_uncertainti": [72, 73], "corrupt": [73, 105], "linearregress": [73, 97, 105], "y_with_nois": 73, "n_boot": [73, 97], "include_aleatoric_uncertainti": [73, 97], "sole": [73, 86, 90, 100, 103], "bootstrap": [73, 97, 105], "resampl": [73, 88, 97], "epistem": [73, 97, 103, 105], "aleator": [73, 97, 105], "model_final_kwarg": 73, "coars": 73, "thorough": [73, 97], "fine": [73, 87, 88, 95, 103], "grain": 73, "grid": 73, "varianc": [73, 98], "epistemic_uncertainti": 73, "residu": [73, 74, 97], "deviat": [73, 102, 105], "aleatoric_uncertainti": 73, "outr": 74, "contin": 74, "raw": [74, 83, 84, 91, 92, 96, 97, 100, 102, 103, 105], "aka": [74, 88, 98, 102, 105, 107], "00323821": 74, "33692597": 74, "00191686": 74, "semant": [75, 77, 78, 99], "pixel": [75, 77, 78, 92, 103, 106], "h": [75, 77, 78, 106], "height": [75, 77, 78, 106], "w": [75, 77, 78, 106], "width": [75, 77, 78, 106], "labels_one_hot": [75, 78, 106], "stream": [75, 89, 103, 107], "downsampl": [75, 77, 106], "shrink": [75, 77], "divis": [75, 77, 90], "common_label_issu": [76, 78, 80, 82, 106, 107], "filter_by_class": [76, 78, 106], "segmant": [77, 78], "num_pixel_issu": [77, 106], "product": [77, 92, 97], "pixel_scor": [77, 106], "enter": 78, "legend": [78, 89, 90, 91, 101, 102, 105, 106], "colormap": 78, "background": 78, "person": [78, 97, 102, 106, 107], "ambigu": [78, 82, 87, 88, 95, 96, 98, 107], "systemat": [78, 82, 100], "misunderstood": [78, 82], "issues_df": [78, 92], "class_index": 78, "issues_subset": [78, 82], "filter_by_token": [80, 82, 107], "token_score_method": 81, "sentence_score_method": 81, "sentence_score_kwarg": 81, "compris": [81, 82], "token_scor": [81, 107], "converg": 81, "toward": 81, "_softmin_sentence_scor": 81, "sentence_scor": [81, 107], "token_info": 81, "70": [81, 94], "02": [81, 90, 91, 98, 102, 103], "03": [81, 94, 96, 98, 102, 107], "04": [81, 94, 102], "08": [81, 98, 102, 105, 107], "commonli": [82, 84, 90, 91, 101, 107], "But": [82, 95, 98, 105, 107], "restrict": [82, 97], "reliabl": [83, 86, 88, 97, 100, 106], "thousand": 83, "imagenet": [83, 96], "popular": [83, 100, 102], "centric": [83, 92, 94, 95, 99], "minut": [83, 86, 87, 88, 94, 95, 96, 100, 101, 102, 105, 106, 107], "conda": 83, "feature_embed": [83, 103], "Then": [83, 86, 87, 92, 97], "your_dataset": [83, 88, 90, 91, 92, 94, 95, 97], "column_name_of_label": [83, 88, 90, 91, 92, 94, 95], "plagu": [83, 91], "untrain": 83, "\u30c4": 83, "label_issues_info": [83, 91], "sklearn_compatible_model": 83, "framework": [83, 101, 102], "complianc": 83, "tag": [83, 101, 107], "sequenc": 83, "recognit": [83, 88, 97, 107], "train_data": [83, 86, 87, 103, 105], "gotten": 83, "test_data": [83, 86, 87, 89, 98, 101, 103, 105], "deal": [83, 91], "tutori": [83, 86, 87, 88, 89, 90, 91, 92, 94, 95, 97, 98, 100, 101, 102, 103, 105, 106, 107], "feel": [83, 88, 91, 97], "ask": [83, 97], "slack": [83, 97], "project": [83, 105], "welcom": 83, "commun": [83, 97], "guidelin": [83, 102], "piec": 83, "smart": [83, 92, 94, 95, 97], "edit": [83, 97], "easier": [83, 98], "unreli": [83, 86, 88, 94, 95], "link": [83, 88, 96, 102], "older": 84, "outlin": 84, "substitut": 84, "v2": [84, 86, 94], "get_noise_indic": 84, "psx": 84, "sorted_index_method": 84, "order_label_error": 84, "label_errors_bool": 84, "latent_estim": 84, "num_label_error": 84, "learningwithnoisylabel": 84, "neatli": 84, "organ": [84, 86, 94, 96, 107], "reorgan": 84, "baseline_method": 84, "incorpor": [84, 98], "research": [84, 98], "polyplex": 84, "terminologi": 84, "label_error": 84, "quickstart": [86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 100, 101, 102, 103, 105, 106, 107], "sql": [86, 94], "databas": [86, 94], "excel": [86, 94], "parquet": [86, 94], "student": [86, 94, 105, 107], "grade": [86, 94, 105], "exam": [86, 94, 105], "letter": [86, 94, 107], "hundr": [86, 94], "mistak": [86, 87, 92, 94, 95], "No": [86, 87, 95, 97], "extratreesclassifi": 86, "extratre": 86, "ranked_label_issu": [86, 87], "branch": [86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 98, 100, 101, 102, 103, 105], "preprocess": [86, 87, 91, 94, 103, 105], "standardscal": [86, 94, 103], "labelencod": [86, 87], "train_test_split": [86, 87, 89, 90, 91, 103], "accuracy_scor": [86, 87, 88, 95, 98], "grades_data": [86, 94], "read_csv": [86, 87, 94, 95, 105], "demo": [86, 91, 94, 101], "head": [86, 87, 88, 91, 92, 94, 95, 96, 98, 100, 105], "stud_id": [86, 94], "exam_1": [86, 94, 105], "exam_2": [86, 94, 105], "exam_3": [86, 94, 105], "letter_grad": [86, 94], "f48f73": [86, 94], "53": [86, 89, 90, 91, 94, 96, 101, 102, 107], "00": [86, 90, 91, 94, 96, 103], "77": [86, 90, 91, 94, 102], "0bd4e7": [86, 94], "81": [86, 94, 95, 102, 105, 107], "great": [86, 89, 94, 96], "particip": [86, 94], "cb9d7a": [86, 94], "61": [86, 94, 98, 102, 105], "94": [86, 94, 96, 98, 102, 105], "78": [86, 94, 96, 98, 102, 105], "9acca4": [86, 94], "48": [86, 94, 96, 98, 102], "x_raw": [86, 94], "labels_raw": 86, "interg": [86, 87], "categorical_featur": [86, 105], "x_encod": [86, 94], "get_dummi": [86, 94, 105], "drop_first": [86, 94], "numeric_featur": [86, 94], "scaler": [86, 94, 103], "x_process": [86, 94], "fit_transform": [86, 94], "bring": [86, 87, 92, 94, 95, 100, 105], "byod": [86, 87, 92, 94, 95, 100, 105], "tress": 86, "held": [86, 88, 94, 95, 96, 102, 103, 104], "straightforward": [86, 88, 94], "benefit": [86, 88, 104, 106], "num_crossval_fold": [86, 88, 94, 100], "tabl": [86, 94, 96, 100], "212": [86, 98], "review": [86, 87, 91, 94, 95, 96, 97, 98, 102, 105, 106, 107], "iloc": [86, 87, 88, 94, 95, 105], "58": [86, 91, 96, 98, 102], "92": [86, 90, 98, 102], "93": [86, 96, 102, 105], "827": 86, "99": [86, 96, 98, 107], "86": [86, 91, 92, 94, 98, 102, 105], "74": [86, 102, 105], "637": [86, 94], "79": [86, 96, 102], "65": [86, 90, 102], "cheat": 86, "0pt": 86, "120": [86, 90, 91], "97": [86, 96, 97, 98, 102, 105, 107], "233": 86, "68": [86, 96, 98, 102], "83": [86, 98, 102, 105, 107], "76": [86, 89, 98, 101, 102, 105], "suspici": [86, 94], "carefulli": [86, 92, 94, 95], "examin": [86, 89, 90, 91, 94, 102], "labels_train": 86, "labels_test": 86, "test_siz": [86, 87, 89, 90, 91], "acc_og": [86, 87], "783068783068783": 86, "robustli": [86, 87, 105], "14": [86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 100, 101, 102, 103, 105, 106, 107], "acc_cl": [86, 87], "8095238095238095": 86, "especi": [86, 87, 89, 92, 97, 105], "blindli": [86, 87, 88, 97, 105], "trust": [86, 87, 88, 97, 98, 100, 104, 105], "effort": [86, 87, 105], "intent": [87, 95], "servic": [87, 95, 97], "onlin": [87, 95], "bank": [87, 95, 96], "banking77": [87, 95], "oo": [87, 95], "categori": [87, 92, 95], "shortlist": [87, 95, 105], "scope": [87, 95], "logist": [87, 89, 90, 91, 95, 100, 103], "probabilit": [87, 88], "drop": [87, 94, 97, 100, 105], "earlier": [87, 107], "sentence_transform": [87, 95], "sentencetransform": [87, 95], "payment": [87, 95], "cancel_transf": [87, 95], "transfer": [87, 95], "fund": [87, 95], "cancel": [87, 95], "transact": [87, 95], "my": [87, 95], "revert": [87, 95], "morn": [87, 95], "realis": [87, 95], "yesterdai": [87, 95], "rent": [87, 95], "tomorrow": [87, 95], "raw_text": [87, 95], "raw_label": 87, "raw_train_text": 87, "raw_test_text": 87, "raw_train_label": 87, "raw_test_label": 87, "39": [87, 88, 90, 92, 95, 96, 97, 102, 105, 106, 107], "getting_spare_card": [87, 95], "card_about_to_expir": [87, 95], "supported_cards_and_curr": [87, 95], "card_payment_fee_charg": [87, 95], "lost_or_stolen_phon": [87, 95], "change_pin": [87, 95], "apple_pay_or_google_pai": [87, 95], "visa_or_mastercard": [87, 95], "beneficiary_not_allow": [87, 95], "card": [87, 95, 96], "utter": [87, 95], "encond": 87, "test_label": [87, 98, 101, 103], "suit": [87, 95, 96, 97], "electra": [87, 95], "discrimin": [87, 95], "googl": [87, 89, 95], "train_text": 87, "test_text": 87, "home": [87, 90, 91, 95, 96], "runner": [87, 90, 91, 95], "google_electra": [87, 95], "pool": [87, 95, 97, 103], "opt": [87, 88, 91, 92, 94, 95, 98], "hostedtoolcach": [87, 88, 91, 92, 94, 95, 98], "x64": [87, 88, 91, 92, 94, 95, 98], "lib": [87, 88, 91, 92, 94, 95, 98], "python3": [87, 88, 91, 92, 94, 95, 98], "site": [87, 88, 91, 92, 94, 95, 98], "_util": [87, 95], "831": [87, 95], "userwarn": [87, 88, 90, 91, 95], "typedstorag": [87, 95], "untypedstorag": [87, 95], "untyped_storag": [87, 95], "fget": [87, 95], "__get__": [87, 95], "owner": [87, 95], "leverag": [87, 88, 95, 97, 98, 100], "computation": [87, 88, 95], "intens": [87, 88, 95], "400": [87, 89, 95], "858371": 87, "547274": 87, "826228": 87, "966008": 87, "792449": 87, "identified_issu": [87, 105], "lowest_quality_label": [87, 88, 95, 98, 105], "to_numpi": [87, 95, 97, 105], "44": [87, 96, 101, 102], "646": 87, "390": 87, "628": 87, "121": [87, 89, 98], "702": 87, "863": [87, 88], "135": 87, "337": [87, 102], "735": 87, "print_as_df": 87, "inverse_transform": 87, "charg": [87, 95], "cash": [87, 95], "holidai": [87, 95], "sent": [87, 95, 107], "mine": [87, 95], "expir": [87, 95], "fight": 87, "hors": [87, 96, 103], "duck": [87, 96], "me": [87, 95], "whoever": [87, 95], "consum": [87, 105], "18": [87, 88, 89, 95, 96, 97, 98, 102, 103, 105, 106], "baseline_model": [87, 105], "87": [87, 91, 92, 102, 105], "acceler": [87, 105], "19": [87, 88, 89, 92, 95, 96, 97, 98, 102, 103, 105, 106, 107], "89": [87, 89, 90, 94, 102, 105], "spoken": 88, "500": [88, 103, 107], "english": [88, 96], "pronunci": 88, "wav": 88, "huggingfac": [88, 90, 91, 92, 97], "voxceleb": 88, "speech": [88, 107], "your_pred_prob": [88, 89, 90, 91, 94, 95], "tensorflow_io": 88, "huggingface_hub": 88, "reproduc": [88, 94, 98, 100], "command": 88, "wget": [88, 102, 106, 107], "navig": 88, "browser": 88, "jakobovski": 88, "archiv": [88, 107], "v1": 88, "tar": [88, 103], "gz": [88, 103], "mkdir": [88, 107], "spoken_digit": 88, "xf": 88, "6_nicolas_32": 88, "data_path": 88, "listdir": 88, "nondeterminist": 88, "file_nam": 88, "endswith": 88, "file_path": 88, "join": [88, 89, 92, 97], "7_george_26": 88, "0_nicolas_24": 88, "0_nicolas_6": 88, "listen": 88, "display_exampl": 88, "expand": [88, 89, 90, 91, 92, 96, 98, 100, 101, 103, 105, 107], "pulldown": [88, 89, 90, 91, 92, 96, 98, 100, 101, 103, 105, 107], "colab": [88, 89, 90, 91, 92, 96, 97, 98, 100, 101, 103, 105, 107], "tfio": 88, "pathlib": 88, "ipython": 88, "load_wav_16k_mono": 88, "filenam": 88, "khz": 88, "file_cont": 88, "read_fil": 88, "sample_r": 88, "decode_wav": 88, "desired_channel": 88, "squeez": 88, "rate_in": 88, "rate_out": 88, "16000": 88, "wav_file_nam": 88, "audio_r": 88, "wav_file_exampl": 88, "plai": [88, 96, 97], "button": 88, "wav_file_name_exampl": 88, "7_jackson_43": 88, "hear": 88, "extractor": 88, "encoderclassifi": 88, "spkrec": 88, "xvect": 88, "feature_extractor": 88, "from_hparam": 88, "run_opt": 88, "uncom": 88, "ffmpeg": 88, "backend": 88, "wav_audio_file_path": 88, "torchaudio": 88, "extract_audio_embed": 88, "emb": [88, 92], "signal": 88, "encode_batch": 88, "embeddings_list": [88, 92], "embeddings_arrai": 88, "650": 88, "stft": 88, "return_complex": 88, "view_as_r": 88, "recov": 88, "trigger": 88, "aten": 88, "src": 88, "nativ": 88, "spectralop": 88, "cpp": 88, "_vf": 88, "n_fft": 88, "hop_length": 88, "win_length": 88, "attr": 88, "512": [88, 92], "196311": 88, "319459": 88, "478975": 88, "2890875": 88, "8170238": 88, "89265": 88, "24": [88, 89, 96, 98, 100, 102, 105], "898056": 88, "256195": 88, "559641": 88, "559721": 88, "62067": 88, "285245": 88, "21": [88, 89, 90, 96, 97, 98, 102, 105, 107], "709627": 88, "5033693": 88, "913803": 88, "819831": 88, "1831515": 88, "208763": 88, "084257": 88, "3210397": 88, "005453": 88, "216152": 88, "478235": 88, "6821785": 88, "053807": 88, "242471": 88, "091424": 88, "78334856": 88, "03954": 88, "23": [88, 89, 92, 96, 98, 102, 105], "569176": 88, "761097": 88, "1258295": 88, "753237": 88, "3508866": 88, "598274": 88, "23712": 88, "2500": 88, "tol": 88, "decreas": [88, 97], "cv_accuraci": 88, "9708": 88, "9976": 88, "986": 88, "002161": 88, "176": [88, 96, 98, 101], "002483": 88, "2318": 88, "004411": 88, "1005": 88, "004857": 88, "1871": 88, "007494": 88, "investig": [88, 89], "040587": 88, "999207": 88, "999377": 88, "975220": 88, "999367": 88, "identified_label_issu": [88, 95], "sort_valu": [88, 89, 91, 92, 94, 95, 97, 98, 100, 101, 105], "516": 88, "1946": 88, "469": 88, "2132": 88, "worth": [88, 98], "6_yweweler_25": 88, "7_nicolas_43": 88, "6_theo_27": 88, "6_yweweler_36": 88, "6_yweweler_14": 88, "6_yweweler_35": 88, "6_nicolas_8": 88, "sound": 88, "quit": [88, 103], "22": [88, 89, 90, 92, 96, 97, 98, 101, 102, 107], "load_ext": 89, "autoreload": 89, "ve": [89, 96, 97, 98, 100, 102], "prove": 89, "monitor": [89, 96], "ran": 89, "data_monitor": 89, "your_datalab": 89, "new_data_batch": 89, "your_label": 89, "get_your_label": 89, "your_featur": [89, 95], "get_featur": 89, "websit": [89, 96], "todo": 89, "get_ipython": 89, "elisno": 89, "75a9d1c1b9619810a274c70287e00e6f0268cfb5": 89, "cmd": 89, "dep": 89, "dependencies_test": 89, "missing_depend": 89, "__import__": 89, "importerror": 89, "sep": [89, 107], "npleas": 89, "toi": [89, 90, 91, 92, 96, 98, 100], "mid": [89, 90, 91], "workflow": [89, 99, 105], "unseen": 89, "inf": [89, 90, 91], "bins_map": [89, 90, 91], "create_data": [89, 90, 91], "800": 89, "y_bin": [89, 90, 91], "y_i": [89, 90, 91], "y_bin_idx": [89, 90, 91], "y_train": [89, 90, 91, 98, 105], "y_test": [89, 90, 91, 98, 105], "y_train_idx": [89, 90, 91], "y_test_idx": [89, 90, 91], "slide": [89, 90, 91, 96], "frame": [89, 90, 91], "x_out": [89, 90, 91], "tini": [89, 90, 91], "concaten": [89, 90, 91, 97, 104], "y_out": [89, 90, 91], "y_out_bin": [89, 90, 91], "y_out_bin_idx": [89, 90, 91], "exact_duplicate_idx": [89, 90, 91], "x_duplic": [89, 90, 91], "y_duplic": [89, 90, 91], "y_duplicate_idx": [89, 90, 91], "noisy_labels_idx": [89, 90, 91, 101], "train_x": 89, "test_x": 89, "train_y_tru": 89, "test_y_tru": 89, "train_i": 89, "test_i": 89, "train_y_idx": 89, "test_y_idx": 89, "scatter": [89, 90, 91, 98, 101, 105], "black": [89, 90, 91, 96, 105], "cyan": [89, 90, 91], "plot_data": [89, 90, 91, 98, 101, 105], "fig": [89, 90, 91, 92, 96, 103, 105], "ax": [89, 90, 91, 92, 103, 105], "subplot": [89, 90, 91, 92, 103], "set_titl": [89, 90, 91, 92, 103], "set_xlabel": [89, 90, 91], "x_1": [89, 90, 91], "fontsiz": [89, 90, 91, 92, 98, 101], "set_ylabel": [89, 90, 91], "x_2": [89, 90, 91], "set_xlim": [89, 90, 91], "set_ylim": [89, 90, 91], "linestyl": [89, 90, 91], "circl": [89, 90, 91, 98, 101], "misclassifi": [89, 90, 91], "zip": [89, 90, 91, 92, 102, 107], "label_err": [89, 90, 91], "180": [89, 90, 91, 102], "marker": [89, 90, 91], "facecolor": [89, 90, 91], "edgecolor": [89, 90, 91], "linewidth": [89, 90, 91, 103], "title_fontproperti": [89, 90, 91], "semibold": [89, 90, 91], "first_legend": [89, 90, 91], "align": [89, 90, 91], "markerscal": 89, "second_legend": [89, 90, 91], "46": [89, 94, 96, 98, 102], "gca": [89, 90, 91], "add_artist": [89, 90, 91], "tight_layout": [89, 90, 91], "ideal": [89, 90, 91], "simplic": [89, 101], "327": [89, 102], "9297": 89, "000124": 89, "259": 89, "000725": 89, "269": 89, "000794": 89, "002061": 89, "125": [89, 90], "002908": 89, "fly": [89, 96], "feed": [89, 97], "simul": 89, "tqdm": [89, 92], "sleep": [89, 96], "generate_stream": 89, "sleep_tim": 89, "desc": 89, "singleton_stream": 89, "seamless": [89, 97], "singleton": 89, "batched_stream": 89, "processed_singleton": 89, "suggested_label": [89, 95], "250997": 89, "285757": 89, "43": [89, 90, 96, 98, 102], "120906": 89, "principl": 89, "processed_batch": 89, "51": [89, 90, 91, 94, 96, 98, 102, 107], "002748": 89, "189996": 89, "093505": 89, "037250": 89, "149": [89, 102], "076397": 89, "154": 89, "294010": 89, "160": [89, 95, 105], "073622": 89, "166": [89, 92], "140832": 89, "167": [89, 96, 98, 102], "041743": 89, "181": 89, "169429": 89, "127304": 89, "235": [89, 102], "090310": 89, "254": [89, 96, 102], "183343": 89, "256": [89, 96, 97, 102], "048720": 89, "263": [89, 101, 102], "138820": 89, "292": 89, "239609": 89, "295": [89, 102], "022075": 89, "306": 89, "103040": 89, "343": 89, "234755": 89, "354": 89, "001612": 89, "359": 89, "068359": 89, "367": [89, 105], "015793": 89, "368": 89, "029022": 89, "391": 89, "106761": 89, "troublesom": 89, "623844": 89, "812647": 89, "816854": 89, "661968": 89, "632244": 89, "395": 89, "474599": 89, "396": 89, "653901": 89, "397": [89, 92], "584554": 89, "398": 89, "817287": 89, "399": 89, "881545": 89, "183": 89, "937927": 89, "309": 89, "939505": 89, "133": 89, "947290": 89, "177": [89, 107], "952187": 89, "314": [89, 102], "997293": 89, "27": [89, 94, 96, 98, 102, 107], "655501": 89, "3603": 89, "173": [89, 102], "000330": 89, "000626": 89, "296": 89, "002004": 89, "304": 89, "165496": 89, "275": [89, 101], "179811": 89, "001317": 89, "005943": 89, "001426": 89, "320": [89, 102], "186355": 89, "349": 89, "187305": 89, "393": 89, "169838": 89, "185770": 89, "369889": 89, "285297": 89, "406162": 89, "516543": 89, "440142": 89, "476283": 89, "382757": 89, "466786": 89, "522078": 89, "276298": 89, "328181": 89, "409633": 89, "281425": 89, "518102": 89, "360596": 89, "underneath": 90, "hood": [90, 97], "alert": 90, "introduct": 90, "mayb": [90, 91, 95], "your_feature_matrix": [90, 91], "dup": [90, 91], "45": [90, 91, 96, 98, 102], "remaind": 90, "modal": [90, 91, 97, 100], "132": [90, 91, 98, 102], "9318": 90, "006940": 90, "007830": 90, "40": [90, 91, 95, 96], "014828": 90, "107": [90, 91, 98, 101], "021241": 90, "026407": 90, "notic": [90, 98, 100, 102], "3558": [90, 91], "126": [90, 91, 98, 102], "006636": [90, 91], "130": [90, 91], "012571": [90, 91], "129": [90, 91], "127": [90, 91], "014909": [90, 91], "128": [90, 91, 92], "017443": [90, 91], "6160": [90, 91], "is_near_duplicate_issu": [90, 91, 92, 94, 95, 97, 98], "131": [90, 91, 106], "000000e": [90, 91], "000002": [90, 91], "463180e": [90, 91], "07": [90, 91, 92, 94, 98, 102, 105], "161148": [90, 91], "859087e": [90, 91], "30": [90, 91, 92, 96, 97, 101, 106, 107], "3453": 90, "029542": 90, "031182": 90, "057961": 90, "058244": 90, "348": 90, "378": 90, "357": 90, "34": [90, 96, 98, 100, 102, 107], "54": [90, 96, 98, 102, 107], "039122": 90, "044598": 90, "105": [90, 102], "105196": 90, "133654": 90, "168033": 90, "101107": 90, "37": [90, 96], "183382": 90, "109": [90, 96, 102], "209259": 90, "211042": 90, "221316": 90, "average_ood_scor": 90, "34530442089193386": 90, "52": [90, 96, 102, 107], "169820": 90, "087324e": 90, "259024": 90, "583757e": 90, "91": [90, 102], "346458": 90, "341292e": 90, "specfi": 90, "new_lab": 90, "scoring_funct": 90, "div": 90, "rem": 90, "inv_scal": 90, "49": [90, 96, 98, 102], "superstitionissuemanag": 90, "unlucki": 90, "superstit": 90, "to_seri": 90, "issues_mask": 90, "summary_scor": 90, "9242": 90, "is_superstition_issu": 90, "superstition_scor": 90, "26": [90, 92, 96, 98, 100, 102], "047581": 90, "090635": 90, "129591": 90, "164840": 90, "lurk": [91, 92, 98], "_split": 91, "776": 91, "thoroughli": 91, "904": 91, "_base": [91, 92, 94, 95, 98], "246": [91, 92, 94, 95, 98, 102], "efficiencywarn": [91, 92, 94, 95, 98], "sort_graph_by_row_valu": [91, 92, 94, 95, 98], "warn_when_not_sort": [91, 92, 94, 95, 98], "8561": 91, "001908": 91, "003564": 91, "007331": 91, "008963": 91, "009664": 91, "0227": 91, "is_class_imbalance_issu": 91, "022727": 91, "conceptu": 91, "856061": 91, "355772": 91, "616034": 91, "821750": 91, "901562": 91, "betweeen": 91, "is_null_issu": 91, "is_non_iid_issu": [91, 94, 95, 98], "is_underperforming_group_issu": 91, "859131": 91, "417707": 91, "664083": 91, "970324": 91, "816953": 91, "375317": 91, "641516": 91, "890575": 91, "531021": 91, "460593": 91, "601188": 91, "826147": 91, "752808": 91, "321635": 91, "562539": 91, "948362": 91, "090243": 91, "472909": 91, "746763": 91, "878267": 91, "examples_w_issu": [91, 97], "013445": 91, "025184": 91, "026376": 91, "inde": [91, 95], "miscellan": [91, 107], "428571": 91, "111111": 91, "571429": 91, "407407": 91, "592593": 91, "337838": 91, "092593": 91, "662162": 91, "333333": [91, 96], "952381": 91, "666667": 91, "portion": 91, "huge": [91, 98], "worri": [91, 95], "critic": 91, "60": [92, 98, 105], "torchvis": [92, 103], "tensordataset": 92, "stratifiedkfold": [92, 101], "autonotebook": 92, "fashion_mnist": 92, "num_row": 92, "60000": 92, "transformed_dataset": 92, "with_format": 92, "255": [92, 96], "cpu_count": 92, "torch_dataset": 92, "quick": [92, 101, 103], "super": [92, 94, 95], "relu": 92, "batchnorm2d": 92, "maxpool2d": 92, "lazylinear": 92, "flatten": 92, "get_test_accuraci": 92, "testload": [92, 103], "energi": 92, "trainload": [92, 103], "n_epoch": 92, "patienc": 92, "criterion": 92, "crossentropyloss": 92, "adamw": 92, "best_test_accuraci": 92, "start_epoch": 92, "running_loss": 92, "best_epoch": 92, "end_epoch": 92, "3f": [92, 105], "acc": [92, 98], "time_taken": 92, "compute_embed": 92, "compute_pred_prob": 92, "train_batch_s": 92, "num_work": 92, "worker": [92, 107], "train_id_list": 92, "test_id_list": 92, "train_id": 92, "test_id": 92, "embeddings_model": 92, "ntrain": 92, "trainset": 92, "testset": 92, "pin_memori": 92, "fold_embed": 92, "fold_pred_prob": 92, "finish": 92, "482": 92, "720": 92, "693": 92, "329": [92, 102], "88": [92, 96, 97, 98, 101, 102, 105], "195": 92, "379": 92, "493": 92, "060": 92, "619": 92, "330": [92, 102], "505": 92, "420": 92, "476": 92, "340": 92, "585": 92, "328": [92, 102], "310": 92, "reorder": 92, "hstack": [92, 97, 98, 100], "vision": 92, "grayscal": 92, "max_preval": 92, "7714": 92, "3772": 92, "3585": 92, "3651": 92, "27080": 92, "873833e": 92, "40378": 92, "915575e": 92, "25316": 92, "390277e": 92, "06": [92, 98, 102, 107], "2090": 92, "751164e": 92, "14999": 92, "881301e": 92, "9569": 92, "11262": 92, "000003": 92, "coat": [92, 96], "shirt": [92, 96], "19228": 92, "000010": 92, "dress": 92, "32657": 92, "000013": 92, "bag": [92, 96, 103, 104], "21282": 92, "000016": 92, "53564": 92, "000018": 92, "pullov": 92, "6321": 92, "30968": 92, "001267": 92, "30659": 92, "000022": [92, 107], "47824": 92, "001454": 92, "3370": 92, "000026": 92, "54565": 92, "001854": 92, "9762": 92, "258": 92, "47139": 92, "000033": 92, "166980": 92, "986195": 92, "997205": 92, "sandal": [92, 96], "948781": 92, "999358": 92, "54078": 92, "17371": 92, "000025": 92, "plot_label_issue_exampl": 92, "ncol": [92, 103], "nrow": [92, 103], "ceil": 92, "axes_list": 92, "label_issue_indic": 92, "gl": 92, "sl": 92, "fontdict": 92, "imshow": [92, 103], "cmap": [92, 105], "grai": 92, "subplots_adjust": 92, "hspace": 92, "outsiz": 92, "outlier_issu": [92, 95], "outlier_issues_df": 92, "depict": [92, 101, 102, 103, 104, 106], "plot_outlier_issues_exampl": 92, "n_comparison_imag": 92, "sample_from_class": 92, "number_of_sampl": 92, "non_outlier_indic": 92, "isnul": 92, "non_outlier_indices_excluding_curr": 92, "sampled_indic": 92, "label_scores_of_sampl": 92, "top_score_indic": 92, "top_label_indic": 92, "sampled_imag": 92, "get_image_given_label_and_sampl": 92, "image_from_dataset": 92, "corresponding_label": 92, "comparison_imag": 92, "images_to_plot": 92, "idlist": 92, "iterrow": 92, "near_duplicate_issu": [92, 97], "closest": 92, "counterpart": 92, "near_duplicate_issues_df": 92, "plot_near_duplicate_issue_exampl": 92, "seen_id_pair": 92, "get_image_and_given_label_and_predicted_label": 92, "duplicate_imag": 92, "nd_set": 92, "challeng": 92, "dark_issu": 92, "reveal": [92, 102, 106], "dark_scor": 92, "dark_issues_df": 92, "is_dark_issu": 92, "34848": 92, "203922": 92, "50270": 92, "204588": 92, "3936": 92, "213098": 92, "733": 92, "217686": 92, "8094": 92, "230118": 92, "plot_image_issue_exampl": 92, "28": [92, 95, 96, 98, 100, 107], "difficult": 92, "disproportion": 92, "lowinfo_issu": 92, "low_information_scor": 92, "lowinfo_issues_df": 92, "is_low_information_issu": 92, "53050": 92, "067975": 92, "40875": 92, "089929": 92, "9594": 92, "092601": 92, "34825": 92, "107744": 92, "37530": 92, "108516": 92, "lot": 92, "histgradientboostingclassifi": 94, "cat_featur": 94, "boost": [94, 97, 100, 105], "xgboost": [94, 97, 105], "think": [94, 95, 97, 101, 106, 107], "nonzero": 94, "358": 94, "294": [94, 102], "941": 94, "7109": 94, "000005": [94, 95], "886": 94, "000059": 94, "709": 94, "000104": 94, "723": 94, "000169": 94, "689": 94, "000181": 94, "3590": 94, "051882e": 94, "683133e": 94, "536582e": 94, "406589e": 94, "324246e": 94, "6165": 94, "582": 94, "185": [94, 96, 102], "187": [94, 96], "898": 94, "0014": [94, 96], "595": 94, "702427": 94, "147": [94, 98, 102], "711186": 94, "157": [94, 98], "721394": 94, "771": 94, "731979": 94, "740335": 94, "0014153602099278074": 94, "issue_result": 94, "000842": 94, "555944": 94, "004374": 94, "sorted_issu": 94, "73": [94, 96, 101, 102, 105], "deserv": 94, "outlier_result": 94, "sorted_outli": 94, "56": [94, 96, 105], "96": [94, 96, 98, 101, 102, 105], "lt": [94, 95, 96, 100, 103], "style": [94, 106], "font": 94, "18px": 94, "ff00ff": 94, "bac": 94, "unintend": [94, 95], "duplicate_result": 94, "lowest_scoring_dupl": 94, "idxmin": [94, 97], "indices_to_displai": 94, "tolist": [94, 97, 101], "perhap": [94, 98, 100], "second_lowest_scoring_dupl": 94, "next_indices_to_displai": 94, "wari": [94, 95, 97], "dive": 95, "text_embed": 95, "data_dict": [95, 98, 100], "85": [95, 102], "38": [95, 96, 102], "9710": 95, "981": 95, "974": 95, "000146": 95, "982": [95, 96], "000224": 95, "971": 95, "000507": 95, "980": [95, 96], "000960": 95, "3584": 95, "994": 95, "009642": 95, "999": 95, "013067": 95, "013841": 95, "433": 95, "014722": 95, "989": 95, "018224": 95, "6070": 95, "095724": 95, "148": 95, "006237": 95, "546": 95, "099341": 95, "514": 95, "006485": 95, "481": 95, "123418": 95, "008165": 95, "0000": [95, 96, 98], "313": [95, 102], "564102": 95, "572258": 95, "574915": 95, "31": [95, 96, 98, 100, 102], "575507": 95, "575874": 95, "792090": 95, "257611": 95, "698710": 95, "182121": 95, "771619": 95, "data_with_suggested_label": 95, "withdraw": 95, "monei": 95, "lowest_quality_outli": 95, "OR": 95, "636c65616e6c616220697320617765736f6d6521": 95, "phone": [95, 96], "gone": 95, "gt": [95, 100, 107], "samp": 95, "br": 95, "press": [95, 107], "nonsens": 95, "sens": 95, "detriment": 95, "duplicate_issu": 95, "fee": 95, "pai": 95, "go": [95, 96, 98], "strongli": 95, "p_valu": 95, "benign": 95, "curat": 95, "refin": 96, "instruct": 96, "studi": [96, 102], "mnist_test_set": 96, "imagenet_val_set": 96, "tench": 96, "goldfish": 96, "white": [96, 107], "shark": 96, "tiger": 96, "hammerhead": 96, "electr": 96, "rai": 96, "stingrai": 96, "cock": 96, "hen": 96, "ostrich": 96, "brambl": 96, "goldfinch": 96, "hous": 96, "finch": 96, "junco": 96, "indigo": 96, "bunt": 96, "american": [96, 107], "robin": 96, "bulbul": 96, "jai": 96, "magpi": 96, "chickade": 96, "dipper": 96, "kite": 96, "bald": 96, "eagl": 96, "vultur": 96, "grei": 96, "owl": 96, "salamand": 96, "smooth": 96, "newt": 96, "spot": [96, 97, 102], "axolotl": 96, "bullfrog": 96, "tree": 96, "frog": [96, 103], "tail": 96, "loggerhead": 96, "sea": 96, "turtl": 96, "leatherback": 96, "mud": 96, "terrapin": 96, "band": 96, "gecko": 96, "green": [96, 107], "iguana": 96, "carolina": 96, "anol": 96, "desert": 96, "grassland": 96, "whiptail": 96, "lizard": 96, "agama": 96, "frill": 96, "neck": 96, "allig": 96, "gila": 96, "monster": 96, "european": 96, "chameleon": 96, "komodo": 96, "dragon": 96, "nile": 96, "crocodil": 96, "triceratop": 96, "worm": 96, "snake": 96, "ring": 96, "eastern": 96, "hog": 96, "nose": 96, "kingsnak": 96, "garter": 96, "water": 96, "vine": 96, "night": 96, "boa": 96, "constrictor": 96, "african": 96, "rock": 96, "indian": 96, "cobra": 96, "mamba": 96, "saharan": 96, "horn": 96, "viper": 96, "diamondback": 96, "rattlesnak": 96, "sidewind": 96, "trilobit": 96, "harvestman": 96, "scorpion": 96, "yellow": 96, "garden": 96, "spider": 96, "barn": 96, "southern": 96, "widow": 96, "tarantula": 96, "wolf": 96, "tick": 96, "centiped": 96, "grous": 96, "ptarmigan": 96, "ruf": 96, "prairi": 96, "peacock": 96, "quail": 96, "partridg": 96, "parrot": 96, "macaw": 96, "sulphur": 96, "crest": 96, "cockatoo": 96, "lorikeet": 96, "coucal": 96, "bee": 96, "eater": 96, "hornbil": 96, "hummingbird": 96, "jacamar": 96, "toucan": 96, "breast": 96, "mergans": 96, "goos": 96, "swan": 96, "tusker": 96, "echidna": 96, "platypu": 96, "wallabi": 96, "koala": 96, "wombat": 96, "jellyfish": 96, "anemon": 96, "brain": 96, "coral": 96, "flatworm": 96, "nematod": 96, "conch": 96, "snail": 96, "slug": 96, "chiton": 96, "chamber": 96, "nautilu": 96, "dung": 96, "crab": 96, "fiddler": 96, "king": 96, "lobster": 96, "spini": 96, "crayfish": 96, "hermit": 96, "isopod": 96, "stork": 96, "spoonbil": 96, "flamingo": 96, "heron": 96, "egret": 96, "bittern": 96, "crane": 96, "bird": [96, 103], "limpkin": 96, "gallinul": 96, "coot": 96, "bustard": 96, "ruddi": 96, "turnston": 96, "dunlin": 96, "redshank": 96, "dowitch": 96, "oystercatch": 96, "pelican": 96, "penguin": 96, "albatross": 96, "whale": 96, "killer": 96, "dugong": 96, "lion": 96, "chihuahua": 96, "japanes": 96, "chin": 96, "maltes": 96, "pekinges": 96, "shih": 96, "tzu": 96, "charl": 96, "spaniel": 96, "papillon": 96, "terrier": 96, "rhodesian": 96, "ridgeback": 96, "afghan": [96, 107], "hound": 96, "basset": 96, "beagl": 96, "bloodhound": 96, "bluetick": 96, "coonhound": 96, "tan": 96, "walker": 96, "foxhound": 96, "redbon": 96, "borzoi": 96, "irish": 96, "wolfhound": 96, "italian": 96, "greyhound": 96, "whippet": 96, "ibizan": 96, "norwegian": 96, "elkhound": 96, "otterhound": 96, "saluki": 96, "scottish": 96, "deerhound": 96, "weimaran": 96, "staffordshir": 96, "bull": 96, "bedlington": 96, "border": 96, "kerri": 96, "norfolk": 96, "norwich": 96, "yorkshir": 96, "wire": 96, "fox": 96, "lakeland": 96, "sealyham": 96, "airedal": 96, "cairn": 96, "australian": 96, "dandi": 96, "dinmont": 96, "boston": 96, "miniatur": 96, "schnauzer": 96, "giant": 96, "tibetan": 96, "silki": 96, "wheaten": 96, "west": 96, "highland": 96, "lhasa": 96, "apso": 96, "flat": 96, "retriev": 96, "curli": 96, "golden": 96, "labrador": 96, "chesapeak": 96, "bai": 96, "german": [96, 107], "shorthair": 96, "pointer": 96, "vizsla": 96, "setter": 96, "gordon": 96, "brittani": 96, "clumber": 96, "springer": 96, "welsh": 96, "cocker": 96, "sussex": 96, "kuvasz": 96, "schipperk": 96, "groenendael": 96, "malinoi": 96, "briard": 96, "kelpi": 96, "komondor": 96, "sheepdog": 96, "shetland": 96, "colli": 96, "bouvier": 96, "de": 96, "flandr": 96, "rottweil": 96, "shepherd": 96, "dobermann": 96, "pinscher": 96, "swiss": [96, 107], "mountain": 96, "bernes": 96, "appenzel": 96, "sennenhund": 96, "entlebuch": 96, "boxer": 96, "bullmastiff": 96, "mastiff": 96, "french": 96, "bulldog": 96, "dane": 96, "st": 96, "bernard": 96, "huski": 96, "alaskan": 96, "malamut": 96, "siberian": 96, "dalmatian": 96, "affenpinsch": 96, "basenji": 96, "pug": 96, "leonberg": 96, "newfoundland": 96, "pyrenean": 96, "samoi": 96, "pomeranian": 96, "chow": 96, "keeshond": 96, "griffon": 96, "bruxelloi": 96, "pembrok": 96, "corgi": 96, "cardigan": 96, "poodl": 96, "mexican": 96, "hairless": 96, "tundra": 96, "coyot": 96, "dingo": 96, "dhole": 96, "wild": 96, "hyena": 96, "kit": 96, "arctic": 96, "tabbi": 96, "persian": 96, "siames": 96, "egyptian": 96, "mau": 96, "cougar": 96, "lynx": 96, "leopard": 96, "snow": 96, "jaguar": 96, "cheetah": 96, "brown": [96, 106], "bear": 96, "polar": 96, "sloth": 96, "mongoos": 96, "meerkat": 96, "beetl": 96, "ladybug": 96, "longhorn": 96, "leaf": 96, "rhinocero": 96, "weevil": 96, "ant": 96, "grasshopp": 96, "cricket": 96, "stick": 96, "insect": 96, "cockroach": 96, "manti": 96, "cicada": 96, "leafhopp": 96, "lacew": 96, "dragonfli": 96, "damselfli": 96, "admir": 96, "ringlet": 96, "monarch": 96, "butterfli": 96, "gossam": 96, "wing": 96, "starfish": 96, "urchin": 96, "cucumb": 96, "cottontail": 96, "rabbit": 96, "hare": 96, "angora": 96, "hamster": 96, "porcupin": 96, "squirrel": 96, "marmot": 96, "beaver": 96, "guinea": 96, "pig": 96, "sorrel": 96, "zebra": 96, "boar": 96, "warthog": 96, "hippopotamu": 96, "ox": 96, "buffalo": 96, "bison": 96, "bighorn": 96, "sheep": 96, "alpin": 96, "ibex": 96, "hartebeest": 96, "impala": 96, "gazel": 96, "dromedari": 96, "llama": 96, "weasel": 96, "mink": 96, "polecat": 96, "foot": 96, "ferret": 96, "otter": 96, "skunk": 96, "badger": 96, "armadillo": 96, "toed": 96, "orangutan": 96, "gorilla": 96, "chimpanze": 96, "gibbon": 96, "siamang": 96, "guenon": 96, "pata": 96, "monkei": 96, "baboon": 96, "macaqu": 96, "langur": 96, "colobu": 96, "probosci": 96, "marmoset": 96, "capuchin": 96, "howler": 96, "titi": 96, "geoffroi": 96, "lemur": 96, "indri": 96, "asian": 96, "eleph": 96, "bush": 96, "snoek": 96, "eel": 96, "coho": 96, "salmon": 96, "beauti": 96, "clownfish": 96, "sturgeon": 96, "garfish": 96, "lionfish": 96, "pufferfish": 96, "abacu": 96, "abaya": 96, "academ": 96, "gown": 96, "accordion": 96, "acoust": 96, "guitar": 96, "aircraft": 96, "carrier": 96, "airlin": 96, "airship": 96, "altar": 96, "ambul": 96, "amphibi": 96, "clock": [96, 107], "apiari": 96, "apron": 96, "wast": 96, "assault": 96, "rifl": 96, "backpack": 96, "bakeri": 96, "balanc": 96, "beam": 96, "balloon": 96, "ballpoint": 96, "pen": 96, "aid": 96, "banjo": 96, "balust": 96, "barbel": 96, "barber": 96, "chair": [96, 102], "barbershop": 96, "baromet": 96, "barrel": 96, "wheelbarrow": 96, "basebal": 96, "basketbal": 96, "bassinet": 96, "bassoon": 96, "swim": 96, "cap": 96, "bath": 96, "towel": 96, "bathtub": 96, "station": 96, "wagon": 96, "lighthous": 96, "beaker": 96, "militari": 96, "beer": 96, "bottl": 96, "glass": 96, "bell": 96, "cot": 96, "bib": 96, "bicycl": [96, 106], "bikini": 96, "binder": 96, "binocular": 96, "birdhous": 96, "boathous": 96, "bobsleigh": 96, "bolo": 96, "tie": 96, "poke": 96, "bonnet": 96, "bookcas": 96, "bookstor": 96, "bow": 96, "brass": 96, "bra": 96, "breakwat": 96, "breastplat": 96, "broom": 96, "bucket": 96, "buckl": 96, "bulletproof": 96, "vest": 96, "butcher": 96, "shop": 96, "taxicab": 96, "cauldron": 96, "candl": 96, "cannon": 96, "cano": 96, "mirror": [96, 102], "carousel": 96, "tool": [96, 98, 100], "carton": 96, "wheel": 96, "teller": 96, "cassett": 96, "player": 96, "castl": 96, "catamaran": 96, "cd": 96, "cello": 96, "mobil": [96, 107], "chain": 96, "fenc": [96, 106], "mail": 96, "chainsaw": 96, "chest": 96, "chiffoni": 96, "chime": 96, "china": 96, "cabinet": 96, "christma": 96, "stock": 96, "church": 96, "movi": 96, "theater": 96, "cleaver": 96, "cliff": 96, "dwell": 96, "cloak": 96, "clog": 96, "cocktail": 96, "shaker": 96, "coffe": 96, "mug": 96, "coffeemak": 96, "coil": 96, "lock": 96, "keyboard": 96, "confectioneri": 96, "ship": [96, 103], "corkscrew": 96, "cornet": 96, "cowboi": 96, "boot": 96, "hat": 96, "cradl": 96, "crash": 96, "helmet": 96, "crate": 96, "infant": 96, "bed": 96, "crock": 96, "pot": 96, "croquet": 96, "crutch": 96, "cuirass": 96, "dam": 96, "desk": 96, "desktop": 96, "rotari": 96, "dial": 96, "telephon": 96, "diaper": 96, "watch": 96, "dine": 96, "dishcloth": 96, "dishwash": 96, "disc": 96, "brake": 96, "dock": 96, "sled": 96, "dome": 96, "doormat": 96, "drill": 96, "rig": 96, "drum": 96, "drumstick": 96, "dumbbel": 96, "dutch": 96, "oven": 96, "fan": 96, "locomot": 96, "entertain": 96, "center": 96, "envelop": 96, "espresso": 96, "powder": 96, "feather": 96, "fireboat": 96, "engin": [96, 106], "screen": 96, "sheet": 96, "flagpol": 96, "flute": 96, "footbal": 96, "forklift": 96, "fountain": 96, "poster": 96, "freight": 96, "fry": 96, "pan": 96, "fur": 96, "garbag": 96, "ga": 96, "pump": 96, "goblet": 96, "kart": 96, "golf": 96, "cart": 96, "gondola": 96, "gong": 96, "grand": 96, "piano": 96, "greenhous": 96, "grill": 96, "groceri": 96, "guillotin": 96, "barrett": 96, "hair": 96, "sprai": 96, "hammer": 96, "dryer": 96, "hand": [96, 98], "handkerchief": 96, "drive": 96, "harmonica": 96, "harp": 96, "harvest": 96, "hatchet": 96, "holster": 96, "honeycomb": 96, "hoop": 96, "skirt": 96, "horizont": 96, "bar": 96, "drawn": 96, "hourglass": 96, "ipod": 96, "cloth": 96, "iron": 96, "jack": 96, "lantern": 96, "jean": 96, "jeep": 96, "jigsaw": 96, "puzzl": 96, "pull": 96, "rickshaw": 96, "joystick": 96, "kimono": 96, "knee": 96, "pad": 96, "knot": 96, "ladl": 96, "lampshad": 96, "laptop": 96, "lawn": 96, "mower": 96, "knife": 96, "lifeboat": 96, "lighter": 96, "limousin": 96, "ocean": 96, "liner": 96, "lipstick": 96, "slip": 96, "shoe": 96, "lotion": 96, "speaker": 96, "loup": 96, "sawmil": 96, "magnet": 96, "compass": 96, "mailbox": 96, "tight": 96, "tank": 96, "manhol": 96, "maraca": 96, "marimba": 96, "maypol": 96, "maze": 96, "cup": [96, 102], "medicin": 96, "megalith": 96, "microphon": 96, "microwav": 96, "milk": 96, "minibu": 96, "miniskirt": 96, "minivan": 96, "missil": 96, "mitten": [96, 97], "mix": 96, "bowl": 96, "modem": 96, "monasteri": 96, "mope": 96, "mortar": 96, "mosqu": 96, "mosquito": 96, "scooter": 96, "bike": 96, "tent": 96, "mous": [96, 97], "mousetrap": 96, "van": 96, "muzzl": 96, "nail": 96, "brace": 96, "necklac": 96, "nippl": 96, "obelisk": 96, "obo": 96, "ocarina": 96, "odomet": 96, "oil": 96, "oscilloscop": 96, "overskirt": 96, "bullock": 96, "oxygen": 96, "packet": 96, "paddl": 96, "padlock": 96, "paintbrush": 96, "pajama": 96, "palac": [96, 107], "parachut": 96, "park": 96, "bench": 96, "meter": 96, "passeng": 96, "patio": 96, "payphon": 96, "pedest": 96, "pencil": 96, "perfum": 96, "petri": 96, "dish": 96, "photocopi": 96, "plectrum": 96, "pickelhaub": 96, "picket": 96, "pickup": 96, "pier": 96, "piggi": 96, "pill": 96, "pillow": 96, "ping": 96, "pong": 96, "pinwheel": 96, "pirat": 96, "pitcher": 96, "plane": 96, "planetarium": 96, "plastic": 96, "plate": 96, "rack": 96, "plow": 96, "plunger": 96, "polaroid": 96, "camera": 96, "pole": [96, 106], "polic": 96, "poncho": 96, "billiard": 96, "soda": 96, "potter": 96, "prayer": 96, "rug": 96, "printer": 96, "prison": 96, "projectil": 96, "projector": 96, "hockei": 96, "puck": 96, "punch": 96, "purs": 96, "quill": 96, "quilt": 96, "race": 96, "racket": 96, "radiat": 96, "radio": 96, "telescop": 96, "rain": 96, "recreat": 96, "reel": 96, "reflex": 96, "refriger": 96, "remot": 96, "restaur": 96, "revolv": 96, "rotisseri": 96, "eras": 96, "rugbi": 96, "ruler": 96, "safe": 96, "safeti": 96, "salt": 96, "sarong": 96, "saxophon": 96, "scabbard": 96, "school": 96, "bu": [96, 106], "schooner": 96, "scoreboard": 96, "crt": 96, "screw": 96, "screwdriv": 96, "seat": 96, "belt": 96, "sew": 96, "shield": 96, "shoji": 96, "basket": 96, "shovel": 96, "shower": 96, "curtain": 96, "ski": 96, "door": 96, "slot": 96, "snorkel": 96, "snowmobil": 96, "snowplow": 96, "soap": 96, "dispens": 96, "soccer": [96, 107], "sock": [96, 97], "solar": 96, "thermal": 96, "collector": 96, "sombrero": 96, "soup": 96, "heater": 96, "shuttl": 96, "spatula": 96, "motorboat": 96, "web": 96, "spindl": 96, "sport": [96, 107], "spotlight": 96, "stage": 96, "steam": 96, "arch": 96, "bridg": 96, "steel": 96, "stethoscop": 96, "scarf": 96, "stone": 96, "wall": [96, 106], "stopwatch": 96, "stove": 96, "strainer": 96, "tram": 96, "stretcher": 96, "couch": 96, "stupa": 96, "submarin": 96, "sundial": 96, "sunglass": 96, "sunscreen": 96, "suspens": 96, "mop": 96, "sweatshirt": 96, "swimsuit": 96, "swing": 96, "switch": 96, "syring": 96, "lamp": 96, "tape": 96, "teapot": 96, "teddi": 96, "televis": [96, 107], "tenni": 96, "thatch": 96, "roof": 96, "thimbl": 96, "thresh": 96, "throne": 96, "tile": 96, "toaster": 96, "tobacco": 96, "toilet": 96, "totem": 96, "tow": 96, "tractor": 96, "semi": 96, "trailer": 96, "trai": 96, "trench": 96, "tricycl": 96, "trimaran": 96, "tripod": 96, "triumphal": 96, "trolleybu": 96, "trombon": 96, "tub": 96, "turnstil": 96, "typewrit": 96, "umbrella": 96, "unicycl": 96, "upright": 96, "vacuum": 96, "cleaner": 96, "vase": 96, "vault": 96, "velvet": 96, "vend": 96, "vestment": 96, "viaduct": 96, "violin": 96, "volleybal": 96, "waffl": 96, "wallet": 96, "wardrob": 96, "sink": 96, "wash": 96, "jug": 96, "tower": 96, "whiskei": 96, "whistl": 96, "wig": 96, "shade": [96, 106], "windsor": 96, "wine": 96, "wok": 96, "wooden": 96, "spoon": 96, "wool": 96, "rail": 96, "shipwreck": 96, "yawl": 96, "yurt": 96, "comic": 96, "book": 96, "crossword": 96, "traffic": [96, 102, 106], "sign": [96, 106, 107], "dust": 96, "jacket": [96, 102], "menu": 96, "guacamol": 96, "consomm": 96, "trifl": 96, "ic": 96, "cream": 96, "pop": 96, "baguett": 96, "bagel": 96, "pretzel": 96, "cheeseburg": 96, "mash": 96, "potato": 96, "cabbag": 96, "broccoli": 96, "cauliflow": 96, "zucchini": 96, "spaghetti": 96, "squash": 96, "acorn": 96, "butternut": 96, "artichok": 96, "pepper": [96, 97], "cardoon": 96, "mushroom": 96, "granni": 96, "smith": 96, "strawberri": 96, "orang": 96, "lemon": 96, "pineappl": 96, "banana": 96, "jackfruit": 96, "custard": 96, "appl": 96, "pomegran": 96, "hai": 96, "carbonara": 96, "chocol": 96, "syrup": 96, "dough": 96, "meatloaf": 96, "pizza": 96, "pie": 96, "burrito": 96, "eggnog": 96, "alp": 96, "bubbl": 96, "reef": 96, "geyser": 96, "lakeshor": 96, "promontori": 96, "shoal": 96, "seashor": 96, "vallei": 96, "volcano": 96, "bridegroom": 96, "scuba": 96, "diver": 96, "rapese": 96, "daisi": 96, "ladi": 96, "slipper": 96, "corn": 96, "rose": 96, "hip": 96, "chestnut": 96, "fungu": 96, "agar": 96, "gyromitra": 96, "stinkhorn": 96, "earth": 96, "star": 96, "wood": 96, "bolet": 96, "ear": 96, "cifar10_test_set": 96, "airplan": [96, 103], "automobil": [96, 103], "deer": [96, 103], "cifar100_test_set": 96, "aquarium_fish": 96, "babi": 96, "boi": 96, "camel": 96, "caterpillar": 96, "cattl": [96, 107], "cloud": 96, "dinosaur": 96, "dolphin": 96, "flatfish": 96, "forest": 96, "girl": 96, "kangaroo": 96, "lawn_mow": 96, "man": 96, "maple_tre": 96, "motorcycl": [96, 106], "oak_tre": 96, "orchid": 96, "palm_tre": 96, "pear": 96, "pickup_truck": 96, "pine_tre": 96, "plain": 96, "poppi": 96, "possum": 96, "raccoon": 96, "road": [96, 106], "rocket": 96, "seal": 96, "shrew": 96, "skyscrap": 96, "streetcar": 96, "sunflow": 96, "sweet_pepp": 96, "trout": 96, "tulip": 96, "willow_tre": 96, "woman": [96, 102], "caltech256": 96, "ak47": 96, "bat": 96, "glove": 96, "birdbath": 96, "blimp": 96, "bonsai": 96, "boom": 96, "breadmak": 96, "buddha": 96, "bulldoz": 96, "cactu": 96, "cake": 96, "tire": 96, "cartman": 96, "cereal": 96, "chandeli": 96, "chess": 96, "board": 96, "chimp": 96, "chopstick": 96, "coffin": 96, "coin": 96, "comet": 96, "cormor": 96, "globe": 96, "diamond": 96, "dice": 96, "doorknob": 96, "drink": 96, "straw": 96, "dumb": 96, "eiffel": 96, "elk": 96, "ewer": 96, "eyeglass": 96, "fern": 96, "fighter": 96, "jet": [96, 105], "extinguish": 96, "hydrant": 96, "firework": 96, "flashlight": 96, "floppi": 96, "fri": 96, "frisbe": 96, "galaxi": 96, "giraff": 96, "goat": 96, "gate": 96, "grape": 96, "pick": [96, 97], "hamburg": 96, "hammock": 96, "harpsichord": 96, "hawksbil": 96, "helicopt": 96, "hibiscu": 96, "homer": 96, "simpson": 96, "horsesho": 96, "air": 96, "skeleton": 96, "ibi": 96, "cone": 96, "iri": 96, "jesu": 96, "christ": 96, "joi": 96, "kayak": 96, "ketch": 96, "ladder": 96, "lath": 96, "licens": 96, "lightbulb": 96, "lightn": 96, "mandolin": 96, "mar": 96, "mattress": 96, "megaphon": 96, "menorah": 96, "microscop": 96, "minaret": 96, "minotaur": 96, "motorbik": 96, "mussel": 96, "neckti": 96, "octopu": 96, "palm": 96, "pilot": 96, "paperclip": 96, "shredder": 96, "pci": 96, "peopl": [96, 102], "pez": 96, "picnic": 96, "pram": 96, "prai": 96, "pyramid": 96, "rainbow": 96, "roulett": 96, "saddl": 96, "saturn": 96, "segwai": 96, "propel": 96, "sextant": 96, "music": 96, "skateboard": 96, "smokestack": 96, "sneaker": 96, "boat": 96, "stain": 96, "steer": 96, "stirrup": 96, "superman": 96, "sushi": 96, "armi": [96, 107], "sword": 96, "tambourin": 96, "teepe": 96, "court": 96, "theodolit": 96, "tomato": 96, "tombston": 96, "tour": 96, "pisa": 96, "treadmil": 96, "fork": 96, "tweezer": 96, "unicorn": 96, "vcr": 96, "waterfal": 96, "watermelon": 96, "weld": 96, "windmil": 96, "xylophon": 96, "yarmulk": 96, "yo": 96, "toad": 96, "twenty_news_test_set": 96, "alt": 96, "atheism": 96, "comp": 96, "graphic": [96, 106], "misc": [96, 107], "sy": 96, "ibm": 96, "pc": 96, "hardwar": 96, "mac": 96, "forsal": 96, "rec": 96, "sci": 96, "crypt": 96, "electron": 96, "med": 96, "soc": 96, "religion": 96, "christian": [96, 107], "talk": [96, 107], "polit": 96, "gun": 96, "mideast": 96, "amazon": 96, "neutral": 96, "imdb_test_set": 96, "all_class": 96, "20news_test_set": 96, "_load_classes_predprobs_label": 96, "dataset_nam": 96, "labelerror": 96, "url_bas": 96, "5392f6c71473055060be3044becdde1cbc18284d": 96, "url_label": 96, "original_test_label": 96, "_original_label": 96, "url_prob": 96, "cross_validated_predicted_prob": 96, "_pyx": 96, "num_part": 96, "datatset": 96, "bytesio": 96, "allow_pickl": 96, "pred_probs_part": 96, "url": 96, "_of_": 96, "nload": 96, "imdb": 96, "interpret": [96, 97, 98, 101, 105], "capit": 96, "29780": 96, "780": 96, "medic": [96, 107], "doctor": 96, "359223": 96, "640777": 96, "184": [96, 98], "258427": 96, "341176": 96, "263158": 96, "658824": 96, "337349": 96, "246575": 96, "662651": 96, "248": 96, "330000": 96, "355769": 96, "670000": 96, "251": [96, 102], "252": 96, "112": 96, "253": [96, 102], "022989": 96, "049505": 96, "190": [96, 98, 102], "66": 96, "002216": 96, "000974": 96, "59": [96, 102], "000873": 96, "000739": 96, "32635": 96, "32636": 96, "47": [96, 102], "32637": 96, "32638": 96, "32639": 96, "32640": 96, "051": 96, "002242": 96, "997758": 96, "002088": 96, "001045": 96, "997912": 96, "002053": 96, "997947": 96, "001980": 96, "000991": 96, "998020": 96, "001946": 96, "002915": 96, "998054": 96, "001938": 96, "002904": 96, "998062": 96, "001020": 96, "998980": 96, "001018": 96, "002035": 96, "998982": 96, "999009": 96, "0003": 96, "0002": 96, "36": [96, 107], "41": [96, 102, 105], "71": [96, 98, 102, 105], "67": [96, 102, 105], "071": 96, "067269": 96, "929": 96, "046": 96, "058243": 96, "954": 96, "035": 96, "032096": 96, "965": 96, "031": 96, "012232": 96, "969": 96, "022": 96, "025896": 96, "978": 96, "020": [96, 98], "013092": 96, "018": 96, "013065": 96, "016": 96, "030542": 96, "984": 96, "013": 96, "020833": 96, "987": 96, "012": 96, "010020": 96, "988": 96, "0073": 96, "0020": 96, "0016": 96, "0015": 96, "0013": 96, "0012": 96, "0010": 96, "0008": 96, "0007": 96, "0006": 96, "0005": 96, "0004": 96, "244": [96, 102], "98": [96, 97, 105], "452381": 96, "459770": 96, "72": [96, 98, 101, 105], "523364": 96, "460784": 96, "446602": 96, "57": [96, 98], "103774": 96, "030612": 96, "110092": 96, "049020": 96, "0034": 96, "0032": 96, "0026": 96, "0025": 96, "4945": 96, "4946": 96, "4947": 96, "4948": 96, "4949": 96, "4950": 96, "846": 96, "82": [96, 98, 102, 105], "7532": 96, "532": 96, "034483": 96, "009646": 96, "965517": 96, "030457": 96, "020513": 96, "969543": 96, "028061": 96, "035443": 96, "971939": 96, "025316": 96, "005168": 96, "974684": 96, "049751": 96, "979487": 96, "019920": 96, "042802": 96, "980080": 96, "017677": 96, "005115": 96, "982323": 96, "012987": 96, "005236": 96, "987013": 96, "012723": 96, "025126": 96, "987277": 96, "010989": 96, "008264": 96, "989011": 96, "010283": 96, "027778": 96, "989717": 96, "009677": 96, "990323": 96, "007614": 96, "010127": 96, "992386": 96, "005051": 96, "994949": 96, "005025": 96, "994975": 96, "005013": 96, "994987": 96, "001859": 96, "001328": 96, "000929": 96, "000664": 96, "186": [96, 98], "188": [96, 98, 101], "189": [96, 98], "snippet": 97, "nlp": [97, 107], "mind": [97, 98], "alphanumer": 97, "facilit": 97, "classlabel": 97, "guidanc": 97, "labels_str": 97, "datalab_str": 97, "labels_int": 97, "remap": 97, "datalab_int": 97, "my_dict": 97, "pet_nam": 97, "rover": 97, "rocki": 97, "speci": 97, "from_dict": 97, "datalab_dataset": 97, "number_of_class": 97, "total_number_of_data_point": 97, "alphabet": 97, "labels_proper_format": 97, "your_classifi": 97, "issues_datafram": 97, "class_predicted_for_flagged_exampl": 97, "class_predicted_for_all_exampl": 97, "grant": 97, "On": [97, 98, 102], "merged_dataset": 97, "label_column_nam": 97, "datataset": 97, "fair": [97, 98], "game": 97, "speedup": [97, 103], "tempfil": 97, "mkdtemp": 97, "sped": 97, "anywai": 97, "pred_probs_merg": 97, "merge_rare_class": 97, "count_threshold": 97, "class_mapping_orig2new": 97, "heath_summari": 97, "num_examples_per_class": 97, "rare_class": 97, "num_classes_merg": 97, "other_class": 97, "labels_merg": 97, "new_c": 97, "merged_prob": 97, "new_class": 97, "original_class": 97, "num_check": 97, "ones_array_ref": 97, "isclos": 97, "though": [97, 98, 107], "successfulli": 97, "meaning": [97, 103], "virtuou": [97, 100], "cycl": [97, 100], "jointli": 97, "junk": 97, "clutter": 97, "unknown": 97, "caltech": 97, "combined_boolean_mask": 97, "mask1": 97, "mask2": 97, "gradientboostingclassifi": [97, 98], "true_error": [97, 98, 101], "101": [97, 102], "102": [97, 101, 102], "104": [97, 98, 102], "model_to_find_error": 97, "model_to_return": 97, "cl0": 97, "randomizedsearchcv": 97, "expens": 97, "param_distribut": 97, "learning_r": [97, 98], "max_depth": [97, 98], "magnitud": 97, "coeffici": [97, 105], "optin": 97, "environ": [97, 98], "rerun": [97, 98], "cell": [97, 98], "unabl": [97, 98], "render": [97, 98], "nbviewer": [97, 98], "nbsp": [97, 98], "cleanlearninginot": [97, 98], "fittedcleanlearn": [97, 98], "linearregressionlinearregress": 97, "n_init": 97, "fit_predict": 97, "continuous_column": 97, "categorical_column": 97, "data_df": 97, "feature_a": 97, "feature_b": 97, "unexpectedli": 97, "emphas": 97, "crucial": 97, "merge_duplicate_set": 97, "merge_kei": 97, "construct_group_kei": 97, "merged_set": 97, "consolidate_set": 97, "issubset": 97, "frozenset": 97, "sets_list": 97, "mutabl": 97, "new_set": 97, "current_set": 97, "intersecting_set": 97, "lowest_score_strategi": 97, "sub_df": 97, "filter_near_dupl": 97, "strategy_fn": 97, "strategy_kwarg": 97, "duplicate_row": 97, "group_kei": 97, "to_keep_indic": 97, "groupbi": 97, "explod": 97, "to_remov": 97, "isin": [97, 103], "kept": 97, "ids_to_remove_seri": 97, "tmp": 97, "ipykernel_7812": 97, "1995098996": 97, "deprecationwarn": 97, "dataframegroupbi": 97, "include_group": 97, "silenc": 97, "assist": 97, "streamlin": 97, "ux": 97, "agpl": 97, "compani": 97, "commerci": 97, "alter": 97, "email": 97, "team": 97, "discuss": 97, "anywher": 97, "profession": 97, "expert": 97, "depth": 98, "survei": [98, 107], "focus": [98, 100, 101, 105], "scienc": 98, "multivariate_norm": [98, 100, 101], "make_data": [98, 100], "cov": [98, 100, 101], "avg_trac": [98, 101], "py_tru": 98, "noise_matrix_tru": 98, "noise_marix": 98, "s_test": 98, "noisy_test_label": 98, "purpl": 98, "val": 98, "namespac": 98, "exec": 98, "markerfacecolor": [98, 101], "markeredgecolor": [98, 101, 105], "markers": [98, 101, 105], "markeredgewidth": [98, 101, 105], "realist": 98, "7560": 98, "637318e": 98, "896262e": 98, "548391e": 98, "923417e": 98, "375075e": 98, "3454": 98, "014051": 98, "020451": 98, "249": [98, 102], "042594": 98, "043859": 98, "045954": 98, "6120": 98, "023714": 98, "007136": 98, "119": [98, 102], "107266": 98, "103": [98, 102], "033738": 98, "238": [98, 102], "119505": 98, "236": [98, 102, 107], "037843": 98, "222": 98, "614915": 98, "122": [98, 102], "624422": 98, "625965": 98, "626079": 98, "118": 98, "627675": 98, "695223": 98, "323529": 98, "523015": 98, "013720": 98, "675727": 98, "646521": 98, "anyth": 98, "enhanc": [98, 100, 102], "magic": 98, "liter": 98, "identif": 98, "x27": 98, "logisticregressionlogisticregress": 98, "ever": 98, "092": 98, "040": 98, "024": 98, "004": 98, "surpris": 98, "1705": 98, "01936": 98, "ton": 98, "yourfavoritemodel1": 98, "merged_label": 98, "merged_test_label": 98, "newli": [98, 100], "yourfavoritemodel2": 98, "yourfavoritemodel3": 98, "cl3": 98, "takeawai": 98, "randomli": 98, "my_test_pred_prob": 98, "my_test_pr": 98, "issues_test": 98, "corrected_test_label": 98, "pretend": 98, "cl_test_pr": 98, "69": [98, 105], "fairli": 98, "label_acc": 98, "percentag": 98, "offset": 98, "nquestion": 98, "overestim": 98, "answer": 98, "experienc": 98, "knowledg": 98, "prioiri": 98, "known": 98, "versatil": 98, "label_issues_indic": 98, "213": [98, 102], "218": [98, 102], "152": 98, "197": [98, 102], "196": [98, 102], "170": 98, "214": 98, "164": [98, 101], "198": [98, 102], "191": [98, 102], "63": [98, 102, 105], "117": [98, 105], "62": [98, 102, 105], "206": [98, 102], "115": [98, 102], "193": 98, "194": 98, "201": [98, 102], "174": 98, "163": 98, "150": [98, 100, 102, 107], "169": [98, 107], "151": [98, 102], "168": 98, "precision_scor": 98, "recall_scor": 98, "f1_score": 98, "true_label_issu": 98, "filter_by_list": 98, "718750": [98, 100], "807018": 98, "912": 98, "733333": 98, "800000": 98, "721311": 98, "792793": 98, "908": 98, "676923": 98, "765217": 98, "892": 98, "567901": 98, "702290": 98, "844": 98, "gaug": 98, "label_issues_count": 98, "155": [98, 102], "156": 98, "172": [98, 101], "easiest": 98, "modular": 98, "penalti": 98, "l2": 98, "model3": 98, "n_estim": 98, "cv_pred_probs_1": 98, "cv_pred_probs_2": 98, "cv_pred_probs_3": 98, "label_quality_scores_best": 98, "cv_pred_probs_ensembl": 98, "label_quality_scores_bett": 98, "superior": [98, 104], "timm": 99, "glad": 100, "multiannotator_label": 100, "300": [100, 107], "noisier": 100, "111": [100, 105], "local_data": [100, 101], "true_labels_train": [100, 101], "noise_matrix_bett": 100, "noise_matrix_wors": 100, "transpos": [100, 103], "dropna": 100, "zfill": 100, "row_na_check": 100, "notna": 100, "reset_index": 100, "a0001": 100, "a0002": 100, "a0003": 100, "a0004": 100, "a0005": 100, "a0006": 100, "a0007": 100, "a0008": 100, "a0009": 100, "a0010": 100, "a0041": 100, "a0042": 100, "a0043": 100, "a0044": 100, "a0045": 100, "a0046": 100, "a0047": 100, "a0048": 100, "a0049": 100, "a0050": 100, "na": 100, "60856743": 100, "41693214": 100, "40908785": 100, "87147629": 100, "64941785": 100, "10774851": 100, "0524466": 100, "71853246": 100, "37169848": 100, "66031048": 100, "multiannotator_util": 100, "crude": 100, "straight": 100, "majority_vote_label": 100, "736118": 100, "757751": 100, "782232": 100, "715565": 100, "824256": 100, "quality_annotator_a0001": 100, "quality_annotator_a0002": 100, "quality_annotator_a0003": 100, "quality_annotator_a0004": 100, "quality_annotator_a0005": 100, "quality_annotator_a0006": 100, "quality_annotator_a0007": 100, "quality_annotator_a0008": 100, "quality_annotator_a0009": 100, "quality_annotator_a0010": 100, "quality_annotator_a0041": 100, "quality_annotator_a0042": 100, "quality_annotator_a0043": 100, "quality_annotator_a0044": 100, "quality_annotator_a0045": 100, "quality_annotator_a0046": 100, "quality_annotator_a0047": 100, "quality_annotator_a0048": 100, "quality_annotator_a0049": 100, "quality_annotator_a0050": 100, "070564": 100, "216078": 100, "119188": 100, "alongisd": 100, "244981": 100, "208333": 100, "295979": 100, "294118": 100, "324197": 100, "310345": 100, "355316": 100, "346154": 100, "439732": 100, "480000": 100, "a0031": 100, "523205": 100, "580645": 100, "a0034": 100, "535313": 100, "607143": 100, "a0021": 100, "606999": 100, "a0015": 100, "609526": 100, "678571": 100, "a0011": 100, "621103": 100, "692308": 100, "wors": 100, "improved_consensus_label": 100, "majority_vote_accuraci": 100, "cleanlab_label_accuraci": 100, "8581081081081081": 100, "9797297297297297": 100, "besid": 100, "sorted_consensus_quality_scor": 100, "worst_qual": 100, "better_qu": 100, "worst_quality_accuraci": 100, "better_quality_accuraci": 100, "9893238434163701": 100, "improved_pred_prob": 100, "treat": [100, 101, 105, 107], "analzi": 100, "copyright": 101, "advertis": 101, "violenc": 101, "nsfw": 101, "celeba": 101, "make_multilabel_data": 101, "boxes_coordin": 101, "box_multilabel": 101, "make_multi": 101, "bx1": 101, "by1": 101, "bx2": 101, "by2": 101, "label_list": 101, "ur": 101, "upper": 101, "inidx": 101, "logical_and": 101, "inv_d": 101, "labels_idx": 101, "true_labels_test": 101, "dict_unique_label": 101, "get_color_arrai": 101, "dcolor": 101, "aa4400": 101, "55227f": 101, "55a100": 101, "00ff00": 101, "007f7f": 101, "386b55": 101, "0000ff": 101, "y_onehot": 101, "single_class_label": 101, "stratifi": [101, 104], "kf": 101, "train_index": 101, "test_index": 101, "clf_cv": 101, "x_train_cv": 101, "x_test_cv": 101, "y_train_cv": 101, "y_test_cv": 101, "y_pred_cv": 101, "saw": 101, "num_to_displai": 101, "09": [101, 102, 105], "267": 101, "225": 101, "171": 101, "234": 101, "165": 101, "227": [101, 102], "262": [101, 102], "266": [101, 102], "139": 101, "143": [101, 102], "216": [101, 102, 107], "265": 101, "159": [101, 102], "despit": [101, 107], "suspect": 101, "888": 101, "8224": 101, "9632": 101, "968": 101, "6512": 101, "0444": 101, "774": 101, "labels_binary_format": 101, "labels_list_format": 101, "surround": 102, "scene": 102, "coco": 102, "everydai": 102, "has_label_issu": 102, "nc": [102, 106, 107], "s3": [102, 106, 107], "amazonaw": [102, 106, 107], "objectdetectionbenchmark": 102, "tutorial_obj": 102, "pkl": 102, "example_imag": 102, "unzip": [102, 107], "_separate_label": 102, "_separate_predict": 102, "begin": 102, "image_path": 102, "rb": 102, "image_to_visu": 102, "seg_map": 102, "334": 102, "float32": 102, "bboxes_ignor": 102, "290": 102, "286": 102, "285": 102, "224": 102, "231": [102, 107], "293": 102, "289": 102, "282": 102, "281": 102, "271": 102, "280": 102, "277": 102, "279": 102, "287": 102, "299": 102, "276": 102, "307": 102, "321": 102, "326": 102, "333": 102, "261": 102, "319": 102, "257": 102, "283": 102, "243": 102, "303": 102, "316": 102, "247": 102, "323": 102, "226": 102, "228": 102, "232": 102, "219": 102, "239": 102, "240": 102, "209": 102, "242": 102, "202": 102, "230": 102, "215": 102, "220": 102, "229": 102, "217": 102, "237": 102, "207": 102, "204": 102, "84": [102, 105], "205": 102, "223": 102, "153": 102, "140": 102, "124": 102, "268": 102, "273": 102, "108": 102, "284": 102, "110": 102, "136": 102, "145": 102, "297": 102, "317": 102, "192": 102, "332": 102, "324": 102, "203": 102, "199": 102, "291": 102, "000000481413": 102, "jpg": 102, "42398": 102, "44503": 102, "29968": 102, "336": 102, "21005": 102, "9978472": 102, "forgot": 102, "drew": 102, "label_issue_idx": 102, "num_examples_to_show": 102, "138": [102, 107], "candid": 102, "97489622": 102, "70610878": 102, "98764951": 102, "88899237": 102, "99085805": 102, "issue_idx": 102, "95569726e": 102, "03354841e": 102, "57510169e": 102, "58447666e": 102, "39755858e": 102, "issue_to_visu": 102, "000000009483": 102, "95569726168054e": 102, "addition": [102, 106], "visibl": 102, "missmatch": 102, "likelei": 102, "agnost": 102, "vaidat": 102, "inconsist": 102, "000000395701": 102, "033548411774308e": 102, "armchair": 102, "tv": 102, "000000154004": 102, "38300759625496356": 102, "foreground": 102, "000000448410": 102, "0008575101690203273": 102, "crowd": 102, "alon": 102, "explor": [102, 103], "resembl": [102, 103], "000000499768": 102, "9748962231208227": 102, "000000521141": 102, "8889923658893665": 102, "000000143931": 102, "9876495074395956": 102, "bonu": 102, "uncov": 102, "irregular": 102, "anomali": 102, "object_detection_util": 102, "calculate_bounding_box_area": 102, "num_imgs_to_show": 102, "lab_object_count": 102, "pred_object_count": 102, "000000430073": 102, "000000183709": 102, "000000189475": 102, "label_norm": 102, "pred_norm": 102, "area": [102, 106], "lab_area": 102, "pred_area": 102, "lab_area_mean": 102, "lab_area_std": 102, "max_deviation_valu": 102, "max_deviation_class": 102, "deviation_valu": 102, "deviation_class": 102, "mean_area": 102, "std_area": 102, "class_area": 102, "deviations_awai": 102, "max_deviation_index": 102, "num_imgs_to_show_per_class": 102, "class_num": 102, "sorted_indic": 102, "000000422886": 102, "000000341828": 102, "000000461009": 102, "train_feature_embed": 103, "ood_train_feature_scor": 103, "test_feature_embed": 103, "ood_test_feature_scor": 103, "ood_train_predictions_scor": 103, "train_pred_prob": 103, "ood_test_predictions_scor": 103, "test_pred_prob": 103, "pylab": 103, "rcparam": 103, "baggingclassifi": 103, "therebi": 103, "rescal": 103, "transform_norm": 103, "totensor": 103, "root": 103, "animal_class": 103, "non_animal_class": 103, "animal_idx": 103, "test_idx": 103, "toronto": 103, "edu": 103, "kriz": 103, "170498071": 103, "67536453": 103, "01it": 103, "5000": 103, "plot_imag": 103, "visualize_outli": 103, "txt_class": 103, "img": [103, 105], "npimg": 103, "show_label": 103, "data_subset": 103, "resnet50": 103, "corpu": 103, "2048": 103, "embed_imag": 103, "create_model": 103, "strang": 103, "odd": 103, "train_ood_features_scor": 103, "top_train_ood_features_idx": 103, "fun": 103, "negat": 103, "homogen": 103, "bottom_train_ood_features_idx": 103, "test_ood_features_scor": 103, "top_ood_features_idx": 103, "inevit": 103, "trade": 103, "5th": 103, "percentil": 103, "fifth_percentil": 103, "plt_rang": 103, "hist": 103, "train_outlier_scor": 103, "ylabel": 103, "axvlin": 103, "test_outlier_scor": 103, "ood_features_indic": 103, "revisit": 103, "return_invers": 103, "train_feature_embeddings_sc": 103, "test_feature_embeddings_sc": 103, "train_pred_label": 103, "9702": 103, "train_ood_predictions_scor": 103, "test_ood_predictions_scor": 103, "lost": 103, "unsuit": 104, "ok": [104, 107], "convention": 104, "aforement": 104, "hypothet": 104, "contrast": 104, "tradit": 104, "disjoint": 104, "out_of_sample_pred_probs_for_a": 104, "out_of_sample_pred_probs_for_b": 104, "out_of_sample_pred_probs_for_c": 104, "out_of_sample_pred_prob": 104, "price": 105, "incom": 105, "ag": 105, "sensor": 105, "histgradientboostingregressor": 105, "r2_score": 105, "student_grades_r": 105, "final_scor": 105, "true_final_scor": 105, "homework": 105, "3d": 105, "hue": 105, "mpl_toolkit": 105, "mplot3d": 105, "axes3d": 105, "errors_idx": 105, "add_subplot": 105, "z": 105, "colorbar": 105, "errors_mask": 105, "feature_column": 105, "predicted_column": 105, "x_train_raw": 105, "x_test_raw": 105, "randomforestregressor": 105, "385101": 105, "499503": 105, "698255": 105, "776647": 105, "109373": 105, "170547": 105, "481096": 105, "984759": 105, "645270": 105, "795928": 105, "141": 105, "659": 105, "318": 105, "305": 105, "560": 105, "657": 105, "688": 105, "view_datapoint": 105, "concat": 105, "preds_og": 105, "r2_og": 105, "838": 105, "found_label_issu": 105, "preds_cl": 105, "r2_cl": 105, "926": 105, "favorit": 105, "968627e": 105, "228799": 105, "646674e": 105, "402962": 105, "323818e": 105, "952758": 105, "422144e": 105, "456908": 105, "465815e": 105, "753968": 105, "791186e": 105, "110719": 105, "485156e": 105, "670640": 105, "225300e": 105, "749976": 105, "499679e": 105, "947007": 105, "067882e": 105, "648396": 105, "synthia": 106, "imagesegment": 106, "given_mask": 106, "predicted_mask": 106, "set_printopt": [106, 107], "sky": 106, "sidewalk": 106, "veget": 106, "terrain": 106, "rider": 106, "pred_probs_filepath": 106, "1088": 106, "1920": 106, "label_filepath": 106, "synthia_class": 106, "maunal": 106, "100000": 106, "244800": 106, "leftmost": 106, "middl": [106, 107], "infact": 106, "rightmost": 106, "discrep": 106, "3263230": 106, "783381": 106, "275110": 106, "255917": 106, "78225": 106, "55990": 106, "54315": 106, "33591": 106, "24645": 106, "21054": 106, "15045": 106, "14171": 106, "13832": 106, "13498": 106, "11490": 106, "9164": 106, "8769": 106, "6999": 106, "6031": 106, "5011": 106, "mistakenli": 106, "class_issu": 106, "aim": [106, 107], "domin": 106, "bunch": 107, "conll": 107, "2003": 107, "love": 107, "n_i": 107, "optional_list_of_ordered_class_nam": 107, "deepai": 107, "conll2003": 107, "rm": 107, "tokenclassif": 107, "2024": 107, "2400": 107, "52e0": 107, "1a00": 107, "1067": 107, "connect": 107, "443": 107, "await": 107, "982975": 107, "960k": 107, "959": 107, "94k": 107, "42mb": 107, "mb": 107, "directori": 107, "inflat": 107, "17045998": 107, "16m": 107, "octet": 107, "26m": 107, "1mb": 107, "bert": 107, "read_npz": 107, "filepath": 107, "corrsespond": 107, "iob2": 107, "given_ent": 107, "entity_map": 107, "readfil": 107, "startswith": 107, "docstart": 107, "isalpha": 107, "isupp": 107, "indices_to_preview": 107, "nsentenc": 107, "eu": 107, "reject": 107, "boycott": 107, "british": 107, "lamb": 107, "00030412": 107, "00023826": 107, "99936208": 107, "00007009": 107, "00002545": 107, "99998795": 107, "00000401": 107, "00000218": 107, "00000455": 107, "00000131": 107, "00000749": 107, "99996115": 107, "00001371": 107, "0000087": 107, "00000895": 107, "99998936": 107, "00000382": 107, "00000178": 107, "00000366": 107, "00000137": 107, "99999101": 107, "00000266": 107, "00000174": 107, "0000035": 107, "00000109": 107, "99998768": 107, "00000482": 107, "00000202": 107, "00000438": 107, "0000011": 107, "00000465": 107, "99996392": 107, "00001105": 107, "0000116": 107, "00000878": 107, "99998671": 107, "00000364": 107, "00000213": 107, "00000472": 107, "00000281": 107, "99999073": 107, "00000211": 107, "00000159": 107, "00000442": 107, "00000115": 107, "peter": 107, "blackburn": 107, "00000358": 107, "00000529": 107, "99995623": 107, "0000129": 107, "0000024": 107, "00001812": 107, "99994141": 107, "00001645": 107, "00002162": 107, "brussel": 107, "1996": 107, "00001172": 107, "00000821": 107, "00004661": 107, "0000618": 107, "99987167": 107, "99999061": 107, "00000201": 107, "00000195": 107, "00000408": 107, "00000135": 107, "2254": 107, "2907": 107, "19392": 107, "9962": 107, "8904": 107, "19303": 107, "12918": 107, "9256": 107, "11855": 107, "18392": 107, "20426": 107, "19402": 107, "14744": 107, "19371": 107, "4645": 107, "10331": 107, "9430": 107, "6143": 107, "18367": 107, "12914": 107, "todai": 107, "weather": 107, "march": 107, "scalfaro": 107, "northern": 107, "himself": 107, "said": 107, "germani": 107, "nastja": 107, "rysich": 107, "north": 107, "spla": 107, "fought": 107, "khartoum": 107, "govern": 107, "south": 107, "1983": 107, "autonomi": 107, "animist": 107, "region": 107, "moslem": 107, "arabis": 107, "mayor": 107, "antonio": 107, "gonzalez": 107, "garcia": 107, "revolutionari": 107, "parti": 107, "wednesdai": 107, "troop": 107, "raid": 107, "farm": 107, "stole": 107, "rape": 107, "women": 107, "spring": 107, "chg": 107, "hrw": 107, "12pct": 107, "princ": 107, "photo": 107, "moment": 107, "spokeswoman": 107, "rainier": 107, "told": 107, "reuter": 107, "danila": 107, "carib": 107, "w224": 107, "equip": 107, "radiomet": 107, "earn": 107, "19996": 107, "london": 107, "denom": 107, "sale": 107, "uk": 107, "jp": 107, "fr": 107, "maccabi": 107, "hapoel": 107, "haifa": 107, "tel": 107, "aviv": 107, "hospit": 107, "rever": 107, "roman": 107, "cathol": 107, "nun": 107, "admit": 107, "calcutta": 107, "week": 107, "ago": 107, "fever": 107, "vomit": 107, "allianc": 107, "embattl": 107, "kabul": 107, "salang": 107, "highwai": 107, "mondai": 107, "tuesdai": 107, "suprem": 107, "council": 107, "led": 107, "jumbish": 107, "milli": 107, "movement": 107, "warlord": 107, "abdul": 107, "rashid": 107, "dostum": 107, "dollar": 107, "exchang": 107, "3570": 107, "12049": 107, "born": 107, "1937": 107, "provinc": 107, "anhui": 107, "dai": 107, "came": 107, "shanghai": 107, "citi": 107, "prolif": 107, "author": 107, "teacher": 107, "chines": 107, "16764": 107, "1990": 107, "historian": 107, "alan": 107, "john": 107, "percival": 107, "taylor": 107, "di": 107, "20446": 107, "pace": 107, "bowler": 107, "ian": 107, "harvei": 107, "claim": 107, "victoria": 107, "15514": 107, "cotti": 107, "osc": 107, "foreign": 107, "minist": 107, "7525": 107, "sultan": 107, "specter": 107, "crown": 107, "abdullah": 107, "defenc": 107, "aviat": 107, "jeddah": 107, "saudi": 107, "agenc": 107, "2288": 107, "hi": 107, "customari": 107, "outfit": 107, "champion": 107, "damp": 107, "scalp": 107, "canada": 107, "reign": 107, "olymp": 107, "donovan": 107, "bailei": 107, "1992": 107, "linford": 107, "christi": 107, "britain": 107, "1984": 107, "1988": 107, "carl": 107, "lewi": 107, "ambigi": 107, "punctuat": 107, "chicago": 107, "digest": 107, "philadelphia": 107, "usda": 107, "york": 107, "token_issu": 107, "471": 107, "kean": 107, "year": 107, "contract": 107, "manchest": 107, "19072": 107, "societi": 107, "bite": 107, "deliv": 107, "19910": 107, "father": 107, "clarenc": 107, "woolmer": 107, "renam": 107, "uttar": 107, "pradesh": 107, "india": 107, "ranji": 107, "trophi": 107, "nation": 107, "championship": 107, "captain": 107, "1949": 107, "15658": 107, "19879": 107, "iii": 107, "brian": 107, "shimer": 107, "randi": 107, "jone": 107, "19104": 107}, "objects": {"cleanlab": [[0, 0, 0, "-", "benchmarking"], [2, 0, 0, "-", "classification"], [3, 0, 0, "-", "count"], [4, 0, 0, "-", "data_valuation"], [11, 0, 0, "-", "datalab"], [36, 0, 0, "-", "dataset"], [39, 0, 0, "-", "experimental"], [43, 0, 0, "-", "filter"], [44, 0, 0, "-", "internal"], [59, 0, 0, "-", "models"], [61, 0, 0, "-", "multiannotator"], [64, 0, 0, "-", "multilabel_classification"], [67, 0, 0, "-", "object_detection"], [70, 0, 0, "-", "outlier"], [71, 0, 0, "-", "rank"], [72, 0, 0, "-", "regression"], [76, 0, 0, "-", "segmentation"], [80, 0, 0, "-", "token_classification"]], "cleanlab.benchmarking": [[1, 0, 0, "-", "noise_generation"]], "cleanlab.benchmarking.noise_generation": [[1, 1, 1, "", "generate_n_rand_probabilities_that_sum_to_m"], [1, 1, 1, "", "generate_noise_matrix_from_trace"], [1, 1, 1, "", "generate_noisy_labels"], [1, 1, 1, "", "noise_matrix_is_valid"], [1, 1, 1, "", "randomly_distribute_N_balls_into_K_bins"]], "cleanlab.classification": [[2, 2, 1, "", "CleanLearning"]], "cleanlab.classification.CleanLearning": [[2, 3, 1, "", "__init_subclass__"], [2, 3, 1, "", "find_label_issues"], [2, 3, 1, "", "fit"], [2, 3, 1, "", "get_label_issues"], [2, 3, 1, "", "get_metadata_routing"], [2, 3, 1, "", "get_params"], [2, 3, 1, "", "predict"], [2, 3, 1, "", "predict_proba"], [2, 3, 1, "", "save_space"], [2, 3, 1, "", "score"], [2, 3, 1, "", "set_fit_request"], [2, 3, 1, "", "set_params"], [2, 3, 1, "", "set_score_request"]], "cleanlab.count": [[3, 1, 1, "", "calibrate_confident_joint"], [3, 1, 1, "", "compute_confident_joint"], [3, 1, 1, "", "estimate_confident_joint_and_cv_pred_proba"], [3, 1, 1, "", "estimate_cv_predicted_probabilities"], [3, 1, 1, "", "estimate_joint"], [3, 1, 1, "", "estimate_latent"], [3, 1, 1, "", "estimate_noise_matrices"], [3, 1, 1, "", "estimate_py_and_noise_matrices_from_probabilities"], [3, 1, 1, "", "estimate_py_noise_matrices_and_cv_pred_proba"], [3, 1, 1, "", "get_confident_thresholds"], [3, 1, 1, "", "num_label_issues"]], "cleanlab.data_valuation": [[4, 1, 1, "", "data_shapley_knn"]], "cleanlab.datalab": [[5, 0, 0, "-", "datalab"], [15, 0, 0, "-", "internal"]], "cleanlab.datalab.datalab": [[5, 2, 1, "", "Datalab"]], "cleanlab.datalab.datalab.Datalab": [[5, 4, 1, "", "class_names"], [5, 3, 1, "", "find_issues"], [5, 3, 1, "", "get_info"], [5, 3, 1, "", "get_issue_summary"], [5, 3, 1, "", "get_issues"], [5, 4, 1, "", "has_labels"], [5, 4, 1, "", "info"], [5, 4, 1, "", "issue_summary"], [5, 4, 1, "", "issues"], [5, 4, 1, "", "labels"], [5, 3, 1, "", "list_default_issue_types"], [5, 3, 1, "", "list_possible_issue_types"], [5, 3, 1, "", "load"], [5, 3, 1, "", "report"], [5, 3, 1, "", "save"]], "cleanlab.datalab.internal": [[12, 0, 0, "-", "data"], [13, 0, 0, "-", "data_issues"], [16, 0, 0, "-", "issue_finder"], [14, 0, 0, "-", "issue_manager_factory"], [32, 0, 0, "-", "model_outputs"], [33, 0, 0, "-", "report"], [34, 0, 0, "-", "task"]], "cleanlab.datalab.internal.data": [[12, 2, 1, "", "Data"], [12, 5, 1, "", "DataFormatError"], [12, 5, 1, "", "DatasetDictError"], [12, 5, 1, "", "DatasetLoadError"], [12, 2, 1, "", "Label"], [12, 2, 1, "", "MultiClass"], [12, 2, 1, "", "MultiLabel"]], "cleanlab.datalab.internal.data.Data": [[12, 4, 1, "", "class_names"], [12, 4, 1, "", "has_labels"]], "cleanlab.datalab.internal.data.DataFormatError": [[12, 3, 1, "", "add_note"], [12, 6, 1, "", "args"], [12, 3, 1, "", "with_traceback"]], "cleanlab.datalab.internal.data.DatasetDictError": [[12, 3, 1, "", "add_note"], [12, 6, 1, "", "args"], [12, 3, 1, "", "with_traceback"]], "cleanlab.datalab.internal.data.DatasetLoadError": [[12, 3, 1, "", "add_note"], [12, 6, 1, "", "args"], [12, 3, 1, "", "with_traceback"]], "cleanlab.datalab.internal.data.Label": [[12, 4, 1, "", "class_names"], [12, 4, 1, "", "is_available"]], "cleanlab.datalab.internal.data.MultiClass": [[12, 4, 1, "", "class_names"], [12, 4, 1, "", "is_available"]], "cleanlab.datalab.internal.data.MultiLabel": [[12, 4, 1, "", "class_names"], [12, 4, 1, "", "is_available"]], "cleanlab.datalab.internal.data_issues": [[13, 2, 1, "", "DataIssues"], [13, 1, 1, "", "get_data_statistics"]], "cleanlab.datalab.internal.data_issues.DataIssues": [[13, 3, 1, "", "collect_issues_from_imagelab"], [13, 3, 1, "", "collect_issues_from_issue_manager"], [13, 3, 1, "", "collect_statistics"], [13, 3, 1, "", "get_info"], [13, 3, 1, "", "get_issue_summary"], [13, 3, 1, "", "get_issues"], [13, 6, 1, "", "info"], [13, 6, 1, "", "issue_summary"], [13, 6, 1, "", "issues"], [13, 3, 1, "", "set_health_score"], [13, 4, 1, "", "statistics"]], "cleanlab.datalab.internal.issue_finder": [[16, 2, 1, "", "IssueFinder"]], "cleanlab.datalab.internal.issue_finder.IssueFinder": [[16, 3, 1, "", "find_issues"], [16, 3, 1, "", "get_available_issue_types"]], "cleanlab.datalab.internal.issue_manager": [[18, 0, 0, "-", "data_valuation"], [19, 0, 0, "-", "duplicate"], [20, 0, 0, "-", "imbalance"], [22, 0, 0, "-", "issue_manager"], [23, 0, 0, "-", "label"], [26, 0, 0, "-", "noniid"], [27, 0, 0, "-", "null"], [28, 0, 0, "-", "outlier"], [31, 0, 0, "-", "underperforming_group"]], "cleanlab.datalab.internal.issue_manager.data_valuation": [[18, 2, 1, "", "DataValuationIssueManager"]], "cleanlab.datalab.internal.issue_manager.data_valuation.DataValuationIssueManager": [[18, 6, 1, "", "DEFAULT_THRESHOLD"], [18, 3, 1, "", "collect_info"], [18, 6, 1, "", "description"], [18, 3, 1, "", "find_issues"], [18, 6, 1, "", "info"], [18, 6, 1, "", "issue_name"], [18, 6, 1, "", "issue_score_key"], [18, 6, 1, "", "issues"], [18, 3, 1, "", "make_summary"], [18, 3, 1, "", "report"], [18, 6, 1, "", "summary"], [18, 6, 1, "", "verbosity_levels"]], "cleanlab.datalab.internal.issue_manager.duplicate": [[19, 2, 1, "", "NearDuplicateIssueManager"]], "cleanlab.datalab.internal.issue_manager.duplicate.NearDuplicateIssueManager": [[19, 3, 1, "", "collect_info"], [19, 6, 1, "", "description"], [19, 3, 1, "", "find_issues"], [19, 6, 1, "", "info"], [19, 6, 1, "", "issue_name"], [19, 6, 1, "", "issue_score_key"], [19, 6, 1, "", "issues"], [19, 3, 1, "", "make_summary"], [19, 6, 1, "", "near_duplicate_sets"], [19, 3, 1, "", "report"], [19, 6, 1, "", "summary"], [19, 6, 1, "", "verbosity_levels"]], "cleanlab.datalab.internal.issue_manager.imbalance": [[20, 2, 1, "", "ClassImbalanceIssueManager"]], "cleanlab.datalab.internal.issue_manager.imbalance.ClassImbalanceIssueManager": [[20, 3, 1, "", "collect_info"], [20, 6, 1, "", "description"], [20, 3, 1, "", "find_issues"], [20, 6, 1, "", "info"], [20, 6, 1, "", "issue_name"], [20, 6, 1, "", "issue_score_key"], [20, 6, 1, "", "issues"], [20, 3, 1, "", "make_summary"], [20, 3, 1, "", "report"], [20, 6, 1, "", "summary"], [20, 6, 1, "", "verbosity_levels"]], "cleanlab.datalab.internal.issue_manager.issue_manager": [[22, 2, 1, "", "IssueManager"]], "cleanlab.datalab.internal.issue_manager.issue_manager.IssueManager": [[22, 3, 1, "", "collect_info"], [22, 6, 1, "", "description"], [22, 3, 1, "", "find_issues"], [22, 6, 1, "", "info"], [22, 6, 1, "", "issue_name"], [22, 6, 1, "", "issue_score_key"], [22, 6, 1, "", "issues"], [22, 3, 1, "", "make_summary"], [22, 3, 1, "", "report"], [22, 6, 1, "", "summary"], [22, 6, 1, "", "verbosity_levels"]], "cleanlab.datalab.internal.issue_manager.label": [[23, 2, 1, "", "LabelIssueManager"]], "cleanlab.datalab.internal.issue_manager.label.LabelIssueManager": [[23, 3, 1, "", "collect_info"], [23, 6, 1, "", "description"], [23, 3, 1, "", "find_issues"], [23, 3, 1, "", "get_health_summary"], [23, 6, 1, "", "health_summary_parameters"], [23, 6, 1, "", "info"], [23, 6, 1, "", "issue_name"], [23, 6, 1, "", "issue_score_key"], [23, 6, 1, "", "issues"], [23, 3, 1, "", "make_summary"], [23, 3, 1, "", "report"], [23, 6, 1, "", "summary"], [23, 6, 1, "", "verbosity_levels"]], "cleanlab.datalab.internal.issue_manager.multilabel": [[25, 0, 0, "-", "label"]], "cleanlab.datalab.internal.issue_manager.multilabel.label": [[25, 2, 1, "", "MultilabelIssueManager"]], "cleanlab.datalab.internal.issue_manager.multilabel.label.MultilabelIssueManager": [[25, 3, 1, "", "collect_info"], [25, 6, 1, "", "description"], [25, 3, 1, "", "find_issues"], [25, 6, 1, "", "info"], [25, 6, 1, "", "issue_name"], [25, 6, 1, "", "issue_score_key"], [25, 6, 1, "", "issues"], [25, 3, 1, "", "make_summary"], [25, 3, 1, "", "report"], [25, 6, 1, "", "summary"], [25, 6, 1, "", "verbosity_levels"]], "cleanlab.datalab.internal.issue_manager.noniid": [[26, 2, 1, "", "NonIIDIssueManager"], [26, 1, 1, "", "simplified_kolmogorov_smirnov_test"]], "cleanlab.datalab.internal.issue_manager.noniid.NonIIDIssueManager": [[26, 3, 1, "", "collect_info"], [26, 6, 1, "", "description"], [26, 3, 1, "", "find_issues"], [26, 6, 1, "", "info"], [26, 6, 1, "", "issue_name"], [26, 6, 1, "", "issue_score_key"], [26, 6, 1, "", "issues"], [26, 3, 1, "", "make_summary"], [26, 3, 1, "", "report"], [26, 6, 1, "", "summary"], [26, 6, 1, "", "verbosity_levels"]], "cleanlab.datalab.internal.issue_manager.null": [[27, 2, 1, "", "NullIssueManager"]], "cleanlab.datalab.internal.issue_manager.null.NullIssueManager": [[27, 3, 1, "", "collect_info"], [27, 6, 1, "", "description"], [27, 3, 1, "", "find_issues"], [27, 6, 1, "", "info"], [27, 6, 1, "", "issue_name"], [27, 6, 1, "", "issue_score_key"], [27, 6, 1, "", "issues"], [27, 3, 1, "", "make_summary"], [27, 3, 1, "", "report"], [27, 6, 1, "", "summary"], [27, 6, 1, "", "verbosity_levels"]], "cleanlab.datalab.internal.issue_manager.outlier": [[28, 2, 1, "", "OutlierIssueManager"]], "cleanlab.datalab.internal.issue_manager.outlier.OutlierIssueManager": [[28, 6, 1, "", "DEFAULT_THRESHOLDS"], [28, 3, 1, "", "collect_info"], [28, 6, 1, "", "description"], [28, 3, 1, "", "find_issues"], [28, 6, 1, "", "info"], [28, 6, 1, "", "issue_name"], [28, 6, 1, "", "issue_score_key"], [28, 6, 1, "", "issues"], [28, 3, 1, "", "make_summary"], [28, 6, 1, "", "ood"], [28, 3, 1, "", "report"], [28, 6, 1, "", "summary"], [28, 6, 1, "", "verbosity_levels"]], "cleanlab.datalab.internal.issue_manager.regression": [[30, 0, 0, "-", "label"]], "cleanlab.datalab.internal.issue_manager.regression.label": [[30, 2, 1, "", "RegressionLabelIssueManager"], [30, 1, 1, "", "find_issues_with_features"], [30, 1, 1, "", "find_issues_with_predictions"]], "cleanlab.datalab.internal.issue_manager.regression.label.RegressionLabelIssueManager": [[30, 3, 1, "", "collect_info"], [30, 6, 1, "", "description"], [30, 3, 1, "", "find_issues"], [30, 6, 1, "", "info"], [30, 6, 1, "", "issue_name"], [30, 6, 1, "", "issue_score_key"], [30, 6, 1, "", "issues"], [30, 3, 1, "", "make_summary"], [30, 3, 1, "", "report"], [30, 6, 1, "", "summary"], [30, 6, 1, "", "verbosity_levels"]], "cleanlab.datalab.internal.issue_manager.underperforming_group": [[31, 2, 1, "", "UnderperformingGroupIssueManager"]], "cleanlab.datalab.internal.issue_manager.underperforming_group.UnderperformingGroupIssueManager": [[31, 6, 1, "", "NO_UNDERPERFORMING_CLUSTER_ID"], [31, 6, 1, "", "OUTLIER_CLUSTER_LABELS"], [31, 3, 1, "", "collect_info"], [31, 6, 1, "", "description"], [31, 3, 1, "", "filter_cluster_ids"], [31, 3, 1, "", "find_issues"], [31, 3, 1, "", "get_worst_cluster"], [31, 6, 1, "", "info"], [31, 6, 1, "", "issue_name"], [31, 6, 1, "", "issue_score_key"], [31, 6, 1, "", "issues"], [31, 3, 1, "", "make_summary"], [31, 3, 1, "", "perform_clustering"], [31, 3, 1, "", "report"], [31, 3, 1, "", "set_knn_graph"], [31, 6, 1, "", "summary"], [31, 6, 1, "", "verbosity_levels"]], "cleanlab.datalab.internal.issue_manager_factory": [[14, 7, 1, "", "REGISTRY"], [14, 1, 1, "", "list_default_issue_types"], [14, 1, 1, "", "list_possible_issue_types"], [14, 1, 1, "", "register"]], "cleanlab.datalab.internal.model_outputs": [[32, 2, 1, "", "ModelOutput"], [32, 2, 1, "", "MultiClassPredProbs"], [32, 2, 1, "", "MultiLabelPredProbs"], [32, 2, 1, "", "RegressionPredictions"]], "cleanlab.datalab.internal.model_outputs.ModelOutput": [[32, 3, 1, "", "collect"], [32, 6, 1, "", "data"], [32, 3, 1, "", "validate"]], "cleanlab.datalab.internal.model_outputs.MultiClassPredProbs": [[32, 6, 1, "", "argument"], [32, 3, 1, "", "collect"], [32, 6, 1, "", "data"], [32, 3, 1, "", "validate"]], "cleanlab.datalab.internal.model_outputs.MultiLabelPredProbs": [[32, 6, 1, "", "argument"], [32, 3, 1, "", "collect"], [32, 6, 1, "", "data"], [32, 3, 1, "", "validate"]], "cleanlab.datalab.internal.model_outputs.RegressionPredictions": [[32, 6, 1, "", "argument"], [32, 3, 1, "", "collect"], [32, 6, 1, "", "data"], [32, 3, 1, "", "validate"]], "cleanlab.datalab.internal.report": [[33, 2, 1, "", "Reporter"]], "cleanlab.datalab.internal.report.Reporter": [[33, 3, 1, "", "get_report"], [33, 3, 1, "", "report"]], "cleanlab.datalab.internal.task": [[34, 2, 1, "", "Task"]], "cleanlab.datalab.internal.task.Task": [[34, 6, 1, "", "CLASSIFICATION"], [34, 6, 1, "", "MULTILABEL"], [34, 6, 1, "", "REGRESSION"], [34, 3, 1, "", "__contains__"], [34, 3, 1, "", "__getitem__"], [34, 3, 1, "", "__iter__"], [34, 3, 1, "", "__len__"], [34, 3, 1, "", "from_str"], [34, 4, 1, "", "is_classification"], [34, 4, 1, "", "is_multilabel"], [34, 4, 1, "", "is_regression"]], "cleanlab.dataset": [[36, 1, 1, "", "find_overlapping_classes"], [36, 1, 1, "", "health_summary"], [36, 1, 1, "", "overall_label_health_score"], [36, 1, 1, "", "rank_classes_by_label_quality"]], "cleanlab.experimental": [[37, 0, 0, "-", "cifar_cnn"], [38, 0, 0, "-", "coteaching"], [40, 0, 0, "-", "label_issues_batched"], [41, 0, 0, "-", "mnist_pytorch"], [42, 0, 0, "-", "span_classification"]], "cleanlab.experimental.cifar_cnn": [[37, 2, 1, "", "CNN"], [37, 1, 1, "", "call_bn"]], "cleanlab.experimental.cifar_cnn.CNN": [[37, 6, 1, "", "T_destination"], [37, 3, 1, "", "__call__"], [37, 3, 1, "", "add_module"], [37, 3, 1, "", "apply"], [37, 3, 1, "", "bfloat16"], [37, 3, 1, "", "buffers"], [37, 6, 1, "", "call_super_init"], [37, 3, 1, "", "children"], [37, 3, 1, "", "compile"], [37, 3, 1, "", "cpu"], [37, 3, 1, "", "cuda"], [37, 3, 1, "", "double"], [37, 6, 1, "", "dump_patches"], [37, 3, 1, "", "eval"], [37, 3, 1, "", "extra_repr"], [37, 3, 1, "", "float"], [37, 3, 1, "id0", "forward"], [37, 3, 1, "", "get_buffer"], [37, 3, 1, "", "get_extra_state"], [37, 3, 1, "", "get_parameter"], [37, 3, 1, "", "get_submodule"], [37, 3, 1, "", "half"], [37, 3, 1, "", "ipu"], [37, 3, 1, "", "load_state_dict"], [37, 3, 1, "", "modules"], [37, 3, 1, "", "named_buffers"], [37, 3, 1, "", "named_children"], [37, 3, 1, "", "named_modules"], [37, 3, 1, "", "named_parameters"], [37, 3, 1, "", "parameters"], [37, 3, 1, "", "register_backward_hook"], [37, 3, 1, "", "register_buffer"], [37, 3, 1, "", "register_forward_hook"], [37, 3, 1, "", "register_forward_pre_hook"], [37, 3, 1, "", "register_full_backward_hook"], [37, 3, 1, "", "register_full_backward_pre_hook"], [37, 3, 1, "", "register_load_state_dict_post_hook"], [37, 3, 1, "", "register_module"], [37, 3, 1, "", "register_parameter"], [37, 3, 1, "", "register_state_dict_pre_hook"], [37, 3, 1, "", "requires_grad_"], [37, 3, 1, "", "set_extra_state"], [37, 3, 1, "", "share_memory"], [37, 3, 1, "", "state_dict"], [37, 3, 1, "", "to"], [37, 3, 1, "", "to_empty"], [37, 3, 1, "", "train"], [37, 6, 1, "", "training"], [37, 3, 1, "", "type"], [37, 3, 1, "", "xpu"], [37, 3, 1, "", "zero_grad"]], "cleanlab.experimental.coteaching": [[38, 1, 1, "", "adjust_learning_rate"], [38, 1, 1, "", "evaluate"], [38, 1, 1, "", "forget_rate_scheduler"], [38, 1, 1, "", "initialize_lr_scheduler"], [38, 1, 1, "", "loss_coteaching"], [38, 1, 1, "", "train"]], "cleanlab.experimental.label_issues_batched": [[40, 2, 1, "", "LabelInspector"], [40, 7, 1, "", "adj_confident_thresholds_shared"], [40, 1, 1, "", "find_label_issues_batched"], [40, 7, 1, "", "labels_shared"], [40, 7, 1, "", "pred_probs_shared"], [40, 1, 1, "", "split_arr"]], "cleanlab.experimental.label_issues_batched.LabelInspector": [[40, 3, 1, "", "get_confident_thresholds"], [40, 3, 1, "", "get_label_issues"], [40, 3, 1, "", "get_num_issues"], [40, 3, 1, "", "get_quality_scores"], [40, 3, 1, "", "score_label_quality"], [40, 3, 1, "", "update_confident_thresholds"]], "cleanlab.experimental.mnist_pytorch": [[41, 2, 1, "", "CNN"], [41, 2, 1, "", "SimpleNet"], [41, 1, 1, "", "get_mnist_dataset"], [41, 1, 1, "", "get_sklearn_digits_dataset"]], "cleanlab.experimental.mnist_pytorch.CNN": [[41, 3, 1, "", "__init_subclass__"], [41, 6, 1, "", "batch_size"], [41, 6, 1, "", "dataset"], [41, 6, 1, "", "epochs"], [41, 3, 1, "id0", "fit"], [41, 3, 1, "", "get_metadata_routing"], [41, 3, 1, "", "get_params"], [41, 6, 1, "", "loader"], [41, 6, 1, "", "log_interval"], [41, 6, 1, "", "lr"], [41, 6, 1, "", "momentum"], [41, 6, 1, "", "no_cuda"], [41, 3, 1, "id1", "predict"], [41, 3, 1, "id4", "predict_proba"], [41, 6, 1, "", "seed"], [41, 3, 1, "", "set_fit_request"], [41, 3, 1, "", "set_params"], [41, 3, 1, "", "set_predict_proba_request"], [41, 3, 1, "", "set_predict_request"], [41, 6, 1, "", "test_batch_size"]], "cleanlab.experimental.mnist_pytorch.SimpleNet": [[41, 6, 1, "", "T_destination"], [41, 3, 1, "", "__call__"], [41, 3, 1, "", "add_module"], [41, 3, 1, "", "apply"], [41, 3, 1, "", "bfloat16"], [41, 3, 1, "", "buffers"], [41, 6, 1, "", "call_super_init"], [41, 3, 1, "", "children"], [41, 3, 1, "", "compile"], [41, 3, 1, "", "cpu"], [41, 3, 1, "", "cuda"], [41, 3, 1, "", "double"], [41, 6, 1, "", "dump_patches"], [41, 3, 1, "", "eval"], [41, 3, 1, "", "extra_repr"], [41, 3, 1, "", "float"], [41, 3, 1, "", "forward"], [41, 3, 1, "", "get_buffer"], [41, 3, 1, "", "get_extra_state"], [41, 3, 1, "", "get_parameter"], [41, 3, 1, "", "get_submodule"], [41, 3, 1, "", "half"], [41, 3, 1, "", "ipu"], [41, 3, 1, "", "load_state_dict"], [41, 3, 1, "", "modules"], [41, 3, 1, "", "named_buffers"], [41, 3, 1, "", "named_children"], [41, 3, 1, "", "named_modules"], [41, 3, 1, "", "named_parameters"], [41, 3, 1, "", "parameters"], [41, 3, 1, "", "register_backward_hook"], [41, 3, 1, "", "register_buffer"], [41, 3, 1, "", "register_forward_hook"], [41, 3, 1, "", "register_forward_pre_hook"], [41, 3, 1, "", "register_full_backward_hook"], [41, 3, 1, "", "register_full_backward_pre_hook"], [41, 3, 1, "", "register_load_state_dict_post_hook"], [41, 3, 1, "", "register_module"], [41, 3, 1, "", "register_parameter"], [41, 3, 1, "", "register_state_dict_pre_hook"], [41, 3, 1, "", "requires_grad_"], [41, 3, 1, "", "set_extra_state"], [41, 3, 1, "", "share_memory"], [41, 3, 1, "", "state_dict"], [41, 3, 1, "", "to"], [41, 3, 1, "", "to_empty"], [41, 3, 1, "", "train"], [41, 6, 1, "", "training"], [41, 3, 1, "", "type"], [41, 3, 1, "", "xpu"], [41, 3, 1, "", "zero_grad"]], "cleanlab.experimental.span_classification": [[42, 1, 1, "", "display_issues"], [42, 1, 1, "", "find_label_issues"], [42, 1, 1, "", "get_label_quality_scores"]], "cleanlab.filter": [[43, 1, 1, "", "find_label_issues"], [43, 1, 1, "", "find_label_issues_using_argmax_confusion_matrix"], [43, 1, 1, "", "find_predicted_neq_given"], [43, 7, 1, "", "pred_probs_by_class"], [43, 7, 1, "", "prune_count_matrix_cols"]], "cleanlab.internal": [[45, 0, 0, "-", "label_quality_utils"], [46, 0, 0, "-", "latent_algebra"], [47, 0, 0, "-", "multiannotator_utils"], [48, 0, 0, "-", "multilabel_scorer"], [49, 0, 0, "-", "multilabel_utils"], [50, 0, 0, "-", "neighbor"], [54, 0, 0, "-", "outlier"], [55, 0, 0, "-", "token_classification_utils"], [56, 0, 0, "-", "util"], [57, 0, 0, "-", "validation"]], "cleanlab.internal.label_quality_utils": [[45, 1, 1, "", "get_normalized_entropy"]], "cleanlab.internal.latent_algebra": [[46, 1, 1, "", "compute_inv_noise_matrix"], [46, 1, 1, "", "compute_noise_matrix_from_inverse"], [46, 1, 1, "", "compute_ps_py_inv_noise_matrix"], [46, 1, 1, "", "compute_py"], [46, 1, 1, "", "compute_py_inv_noise_matrix"], [46, 1, 1, "", "compute_pyx"]], "cleanlab.internal.multiannotator_utils": [[47, 1, 1, "", "assert_valid_inputs_multiannotator"], [47, 1, 1, "", "assert_valid_pred_probs"], [47, 1, 1, "", "check_consensus_label_classes"], [47, 1, 1, "", "compute_soft_cross_entropy"], [47, 1, 1, "", "find_best_temp_scaler"], [47, 1, 1, "", "format_multiannotator_labels"], [47, 1, 1, "", "temp_scale_pred_probs"]], "cleanlab.internal.multilabel_scorer": [[48, 2, 1, "", "Aggregator"], [48, 2, 1, "", "ClassLabelScorer"], [48, 2, 1, "", "MultilabelScorer"], [48, 1, 1, "", "exponential_moving_average"], [48, 1, 1, "", "get_cross_validated_multilabel_pred_probs"], [48, 1, 1, "", "get_label_quality_scores"], [48, 1, 1, "", "multilabel_py"], [48, 1, 1, "", "softmin"]], "cleanlab.internal.multilabel_scorer.Aggregator": [[48, 3, 1, "", "__call__"], [48, 6, 1, "", "possible_methods"]], "cleanlab.internal.multilabel_scorer.ClassLabelScorer": [[48, 6, 1, "", "CONFIDENCE_WEIGHTED_ENTROPY"], [48, 6, 1, "", "NORMALIZED_MARGIN"], [48, 6, 1, "", "SELF_CONFIDENCE"], [48, 3, 1, "", "__call__"], [48, 3, 1, "", "__contains__"], [48, 3, 1, "", "__getitem__"], [48, 3, 1, "", "__iter__"], [48, 3, 1, "", "__len__"], [48, 3, 1, "", "from_str"]], "cleanlab.internal.multilabel_scorer.MultilabelScorer": [[48, 3, 1, "", "__call__"], [48, 3, 1, "", "aggregate"], [48, 3, 1, "", "get_class_label_quality_scores"]], "cleanlab.internal.multilabel_utils": [[49, 1, 1, "", "get_onehot_num_classes"], [49, 1, 1, "", "int2onehot"], [49, 1, 1, "", "onehot2int"], [49, 1, 1, "", "stack_complement"]], "cleanlab.internal.neighbor": [[51, 0, 0, "-", "knn_graph"], [52, 0, 0, "-", "metric"], [53, 0, 0, "-", "search"]], "cleanlab.internal.neighbor.knn_graph": [[51, 7, 1, "", "DEFAULT_K"], [51, 1, 1, "", "construct_knn_graph_from_index"], [51, 1, 1, "", "correct_knn_distances_and_indices"], [51, 1, 1, "", "correct_knn_distances_and_indices_with_exact_duplicate_sets_inplace"], [51, 1, 1, "", "correct_knn_graph"], [51, 1, 1, "", "create_knn_graph_and_index"], [51, 1, 1, "", "features_to_knn"]], "cleanlab.internal.neighbor.metric": [[52, 7, 1, "", "HIGH_DIMENSION_CUTOFF"], [52, 7, 1, "", "ROW_COUNT_CUTOFF"], [52, 1, 1, "", "decide_default_metric"], [52, 1, 1, "", "decide_euclidean_metric"]], "cleanlab.internal.neighbor.search": [[53, 1, 1, "", "construct_knn"]], "cleanlab.internal.outlier": [[54, 1, 1, "", "correct_precision_errors"], [54, 1, 1, "", "transform_distances_to_scores"]], "cleanlab.internal.token_classification_utils": [[55, 1, 1, "", "color_sentence"], [55, 1, 1, "", "filter_sentence"], [55, 1, 1, "", "get_sentence"], [55, 1, 1, "", "mapping"], [55, 1, 1, "", "merge_probs"], [55, 1, 1, "", "process_token"]], "cleanlab.internal.util": [[56, 1, 1, "", "append_extra_datapoint"], [56, 1, 1, "", "clip_noise_rates"], [56, 1, 1, "", "clip_values"], [56, 1, 1, "", "compress_int_array"], [56, 1, 1, "", "confusion_matrix"], [56, 1, 1, "", "csr_vstack"], [56, 1, 1, "", "estimate_pu_f1"], [56, 1, 1, "", "extract_indices_tf"], [56, 1, 1, "", "force_two_dimensions"], [56, 1, 1, "", "format_labels"], [56, 1, 1, "", "get_missing_classes"], [56, 1, 1, "", "get_num_classes"], [56, 1, 1, "", "get_unique_classes"], [56, 1, 1, "", "is_tensorflow_dataset"], [56, 1, 1, "", "is_torch_dataset"], [56, 1, 1, "", "num_unique_classes"], [56, 1, 1, "", "print_inverse_noise_matrix"], [56, 1, 1, "", "print_joint_matrix"], [56, 1, 1, "", "print_noise_matrix"], [56, 1, 1, "", "print_square_matrix"], [56, 1, 1, "", "remove_noise_from_class"], [56, 1, 1, "", "round_preserving_row_totals"], [56, 1, 1, "", "round_preserving_sum"], [56, 1, 1, "", "smart_display_dataframe"], [56, 1, 1, "", "subset_X_y"], [56, 1, 1, "", "subset_data"], [56, 1, 1, "", "subset_labels"], [56, 1, 1, "", "train_val_split"], [56, 1, 1, "", "unshuffle_tensorflow_dataset"], [56, 1, 1, "", "value_counts"], [56, 1, 1, "", "value_counts_fill_missing_classes"]], "cleanlab.internal.validation": [[57, 1, 1, "", "assert_indexing_works"], [57, 1, 1, "", "assert_nonempty_input"], [57, 1, 1, "", "assert_valid_class_labels"], [57, 1, 1, "", "assert_valid_inputs"], [57, 1, 1, "", "labels_to_array"], [57, 1, 1, "", "labels_to_list_multilabel"]], "cleanlab.models": [[60, 0, 0, "-", "keras"]], "cleanlab.models.keras": [[60, 2, 1, "", "KerasWrapperModel"], [60, 2, 1, "", "KerasWrapperSequential"]], "cleanlab.models.keras.KerasWrapperModel": [[60, 3, 1, "", "fit"], [60, 3, 1, "", "get_params"], [60, 3, 1, "", "predict"], [60, 3, 1, "", "predict_proba"], [60, 3, 1, "", "set_params"], [60, 3, 1, "", "summary"]], "cleanlab.models.keras.KerasWrapperSequential": [[60, 3, 1, "", "fit"], [60, 3, 1, "", "get_params"], [60, 3, 1, "", "predict"], [60, 3, 1, "", "predict_proba"], [60, 3, 1, "", "set_params"], [60, 3, 1, "", "summary"]], "cleanlab.multiannotator": [[61, 1, 1, "", "convert_long_to_wide_dataset"], [61, 1, 1, "", "get_active_learning_scores"], [61, 1, 1, "", "get_active_learning_scores_ensemble"], [61, 1, 1, "", "get_label_quality_multiannotator"], [61, 1, 1, "", "get_label_quality_multiannotator_ensemble"], [61, 1, 1, "", "get_majority_vote_label"]], "cleanlab.multilabel_classification": [[62, 0, 0, "-", "dataset"], [63, 0, 0, "-", "filter"], [65, 0, 0, "-", "rank"]], "cleanlab.multilabel_classification.dataset": [[62, 1, 1, "", "common_multilabel_issues"], [62, 1, 1, "", "multilabel_health_summary"], [62, 1, 1, "", "overall_multilabel_health_score"], [62, 1, 1, "", "rank_classes_by_multilabel_quality"]], "cleanlab.multilabel_classification.filter": [[63, 1, 1, "", "find_label_issues"], [63, 1, 1, "", "find_multilabel_issues_per_class"]], "cleanlab.multilabel_classification.rank": [[65, 1, 1, "", "get_label_quality_scores"], [65, 1, 1, "", "get_label_quality_scores_per_class"]], "cleanlab.object_detection": [[66, 0, 0, "-", "filter"], [68, 0, 0, "-", "rank"], [69, 0, 0, "-", "summary"]], "cleanlab.object_detection.filter": [[66, 1, 1, "", "find_label_issues"]], "cleanlab.object_detection.rank": [[68, 1, 1, "", "compute_badloc_box_scores"], [68, 1, 1, "", "compute_overlooked_box_scores"], [68, 1, 1, "", "compute_swap_box_scores"], [68, 1, 1, "", "get_label_quality_scores"], [68, 1, 1, "", "issues_from_scores"], [68, 1, 1, "", "pool_box_scores_per_image"]], "cleanlab.object_detection.summary": [[69, 1, 1, "", "bounding_box_size_distribution"], [69, 1, 1, "", "calculate_per_class_metrics"], [69, 1, 1, "", "class_label_distribution"], [69, 1, 1, "", "get_average_per_class_confusion_matrix"], [69, 1, 1, "", "get_sorted_bbox_count_idxs"], [69, 1, 1, "", "object_counts_per_image"], [69, 1, 1, "", "plot_class_distribution"], [69, 1, 1, "", "plot_class_size_distributions"], [69, 1, 1, "", "visualize"]], "cleanlab.outlier": [[70, 2, 1, "", "OutOfDistribution"]], "cleanlab.outlier.OutOfDistribution": [[70, 3, 1, "", "fit"], [70, 3, 1, "", "fit_score"], [70, 3, 1, "", "score"]], "cleanlab.rank": [[71, 1, 1, "", "find_top_issues"], [71, 1, 1, "", "get_confidence_weighted_entropy_for_each_label"], [71, 1, 1, "", "get_label_quality_ensemble_scores"], [71, 1, 1, "", "get_label_quality_scores"], [71, 1, 1, "", "get_normalized_margin_for_each_label"], [71, 1, 1, "", "get_self_confidence_for_each_label"], [71, 1, 1, "", "order_label_issues"]], "cleanlab.regression": [[73, 0, 0, "-", "learn"], [74, 0, 0, "-", "rank"]], "cleanlab.regression.learn": [[73, 2, 1, "", "CleanLearning"]], "cleanlab.regression.learn.CleanLearning": [[73, 3, 1, "", "__init_subclass__"], [73, 3, 1, "", "find_label_issues"], [73, 3, 1, "", "fit"], [73, 3, 1, "", "get_aleatoric_uncertainty"], [73, 3, 1, "", "get_epistemic_uncertainty"], [73, 3, 1, "", "get_label_issues"], [73, 3, 1, "", "get_metadata_routing"], [73, 3, 1, "", "get_params"], [73, 3, 1, "", "predict"], [73, 3, 1, "", "save_space"], [73, 3, 1, "", "score"], [73, 3, 1, "", "set_fit_request"], [73, 3, 1, "", "set_params"], [73, 3, 1, "", "set_score_request"]], "cleanlab.regression.rank": [[74, 1, 1, "", "get_label_quality_scores"]], "cleanlab.segmentation": [[75, 0, 0, "-", "filter"], [77, 0, 0, "-", "rank"], [78, 0, 0, "-", "summary"]], "cleanlab.segmentation.filter": [[75, 1, 1, "", "find_label_issues"]], "cleanlab.segmentation.rank": [[77, 1, 1, "", "get_label_quality_scores"], [77, 1, 1, "", "issues_from_scores"]], "cleanlab.segmentation.summary": [[78, 1, 1, "", "common_label_issues"], [78, 1, 1, "", "display_issues"], [78, 1, 1, "", "filter_by_class"]], "cleanlab.token_classification": [[79, 0, 0, "-", "filter"], [81, 0, 0, "-", "rank"], [82, 0, 0, "-", "summary"]], "cleanlab.token_classification.filter": [[79, 1, 1, "", "find_label_issues"]], "cleanlab.token_classification.rank": [[81, 1, 1, "", "get_label_quality_scores"], [81, 1, 1, "", "issues_from_scores"]], "cleanlab.token_classification.summary": [[82, 1, 1, "", "common_label_issues"], [82, 1, 1, "", "display_issues"], [82, 1, 1, "", "filter_by_token"]]}, "objtypes": {"0": "py:module", "1": "py:function", "2": "py:class", "3": "py:method", "4": "py:property", "5": "py:exception", "6": "py:attribute", "7": "py:data"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "function", "Python function"], "2": ["py", "class", "Python class"], "3": ["py", "method", "Python method"], "4": ["py", "property", "Python property"], "5": ["py", "exception", "Python exception"], "6": ["py", "attribute", "Python attribute"], "7": ["py", "data", "Python data"]}, "titleterms": {"benchmark": 0, "noise_gener": 1, "classif": [2, 86, 87, 92, 94, 95, 97, 98, 101, 107], "count": [3, 98], "data_valu": [4, 18], "datalab": [5, 7, 9, 10, 11, 88, 89, 90, 91, 92, 93, 94, 95, 98, 101], "creat": [7, 89, 90, 91, 98, 100], "your": [7, 83, 90, 91, 95, 97, 98], "own": 7, "issu": [7, 9, 10, 21, 30, 83, 86, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 101, 102, 106, 107], "manag": [7, 21], "prerequisit": 7, "implement": 7, "issuemanag": [7, 90], "basic": 7, "check": 7, "intermedi": 7, "advanc": [7, 90], "us": [7, 86, 87, 88, 89, 91, 92, 94, 95, 97, 98, 100, 101, 102, 103, 105, 106, 107], "gener": 8, "cluster": [8, 97], "id": 8, "guid": [9, 11], "type": [9, 10, 98], "custom": [9, 90], "cleanlab": [9, 10, 83, 86, 87, 88, 92, 94, 95, 97, 98, 100, 101, 102, 103, 105, 106, 107], "studio": [9, 10], "easi": [9, 10, 83, 92, 94, 95], "mode": [9, 10, 83, 92, 94, 95], "can": [10, 89, 91, 96, 97, 98, 100], "detect": [10, 88, 91, 92, 94, 95, 97, 98, 102, 103], "estim": [10, 98, 100, 101], "each": 10, "label": [10, 23, 25, 30, 83, 86, 87, 88, 89, 91, 92, 94, 95, 96, 97, 98, 100, 101, 102, 105, 106, 107], "outlier": [10, 28, 54, 70, 89, 92, 94, 95, 101, 103], "Near": [10, 91, 92, 94, 95], "duplic": [10, 19, 91, 92, 94, 95, 97, 101], "non": [10, 95], "iid": [10, 95], "class": [10, 84, 98, 106], "imbal": [10, 20], "imag": [10, 92, 103], "specif": [10, 21, 106], "underperform": [10, 97], "group": [10, 97], "null": [10, 27], "data": [10, 12, 83, 86, 88, 89, 90, 91, 94, 95, 96, 97, 98, 100, 101, 102, 103, 105, 106, 107], "valuat": 10, "option": 10, "paramet": [10, 98], "get": [11, 89, 90, 91, 100, 101, 102, 106, 107], "start": [11, 96], "api": 11, "refer": 11, "data_issu": 13, "factori": 14, "intern": [15, 44], "issue_find": 16, "issue_manag": [21, 22], "regist": 21, "ml": [21, 97, 98], "task": [21, 34], "multilabel": 24, "noniid": 26, "regress": [29, 72, 73, 74, 97, 105], "prioriti": 30, "order": 30, "find": [30, 83, 86, 87, 88, 89, 91, 92, 94, 95, 97, 98, 100, 101, 102, 103, 105, 106, 107], "underperforming_group": 31, "model_output": 32, "report": [33, 92], "dataset": [36, 62, 83, 87, 88, 89, 91, 92, 95, 96, 97, 98, 101, 102, 103, 105, 106, 107], "cifar_cnn": 37, "coteach": 38, "experiment": 39, "label_issues_batch": 40, "mnist_pytorch": 41, "span_classif": 42, "filter": [43, 63, 66, 75, 79, 98], "label_quality_util": 45, "latent_algebra": 46, "multiannotator_util": 47, "multilabel_scor": 48, "multilabel_util": 49, "neighbor": 50, "knn_graph": 51, "metric": 52, "search": [53, 90], "token_classification_util": 55, "util": 56, "valid": [57, 92, 104], "fasttext": 58, "model": [59, 83, 86, 87, 88, 92, 94, 95, 97, 98, 100, 101, 102, 103, 105], "kera": 60, "multiannot": [61, 100], "multilabel_classif": 64, "rank": [65, 68, 71, 74, 77, 81, 98], "object_detect": 67, "summari": [69, 78, 82], "learn": [73, 89, 91, 97, 98], "segment": [76, 106], "token_classif": [80, 107], "open": [83, 97], "sourc": [83, 97], "document": 83, "quickstart": 83, "1": [83, 84, 86, 87, 88, 89, 90, 91, 92, 94, 95, 98, 100, 101, 102, 103, 105, 106, 107], "instal": [83, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 98, 100, 101, 102, 103, 105, 106, 107], "2": [83, 84, 86, 87, 88, 89, 90, 91, 92, 94, 95, 98, 100, 101, 102, 103, 105, 106, 107], "common": [83, 84, 107], "3": [83, 86, 87, 88, 89, 90, 91, 92, 94, 95, 98, 100, 101, 102, 103, 105, 106, 107], "handl": [83, 97], "error": [83, 87, 92, 97, 98, 100, 101, 102, 105, 106, 107], "train": [83, 86, 87, 88, 97, 103, 105], "robust": [83, 86, 87, 98, 105], "noisi": [83, 86, 87, 98, 105], "4": [83, 86, 87, 88, 89, 90, 91, 92, 94, 95, 98, 100, 102, 103, 105], "curat": 83, "fix": [83, 97], "level": [83, 96, 98, 107], "5": [83, 86, 88, 89, 91, 92, 94, 98, 100, 105], "improv": [83, 100], "via": [83, 98, 100], "mani": [83, 98], "other": [83, 100, 102, 105], "techniqu": 83, "contribut": 83, "how": [84, 97, 98, 100, 101, 107], "migrat": 84, "version": 84, "0": 84, "from": [84, 86, 87, 89, 90, 91, 98, 105], "pre": [84, 88, 97, 103], "function": [84, 90], "name": 84, "chang": 84, "modul": [84, 98], "new": [84, 89], "remov": 84, "argument": [84, 90], "variabl": 84, "cleanlearn": [85, 97, 98], "tutori": [85, 93, 96, 99], "structur": 86, "tabular": [86, 94], "requir": [86, 87, 89, 90, 91, 92, 94, 95, 100, 101, 102, 103, 105, 106, 107], "depend": [86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 98, 100, 101, 102, 103, 105, 106, 107], "load": [86, 87, 88, 89, 90, 91, 94, 95, 105], "process": [86, 94, 103, 105], "select": [86, 94], "comput": [86, 88, 92, 94, 95, 97, 100, 104], "out": [86, 88, 89, 90, 91, 92, 94, 95, 100, 104], "sampl": [86, 88, 89, 90, 91, 92, 94, 95, 100, 104], "predict": [86, 88, 89, 90, 91, 92, 94, 95, 100, 101, 102, 104], "probabl": [86, 88, 89, 90, 91, 92, 94, 95, 100, 104], "more": [86, 87, 89, 91, 98, 105], "text": [87, 95, 107], "format": [87, 95, 97, 101, 102], "defin": [87, 92, 95, 105], "potenti": [87, 100, 105], "an": [88, 92, 97], "audio": 88, "import": [88, 89, 90, 91, 92, 96, 98, 100], "them": [88, 96, 98], "speechbrain": 88, "featur": [88, 92, 103], "fit": 88, "linear": 88, "datamonitor": 89, "leverag": 89, "statist": [89, 100], "audit": [89, 90, 91], "skip": [89, 91, 96, 98, 100], "detail": [89, 91, 96, 98, 100], "classifi": [89, 90, 91], "6": [89, 98], "about": [89, 91], "addit": [89, 91], "7": [89, 92, 98], "8": [89, 96, 98], "look": 89, "both": 89, "workflow": [90, 98], "instanti": 90, "object": [90, 102], "increment": 90, "specifi": [90, 97], "nondefault": 90, "save": 90, "ad": 90, "A": 91, "unifi": 91, "all": [91, 98], "kind": [91, 102], "inform": [91, 92], "fetch": [92, 96], "normal": 92, "fashion": 92, "mnist": 92, "prepar": 92, "k": [92, 94, 104], "fold": [92, 104], "cross": [92, 104], "embed": [92, 103], "view": 92, "most": [92, 107], "like": 92, "exampl": [92, 97, 98, 103], "sever": 92, "set": [92, 98], "dark": 92, "top": [92, 106], "low": 92, "numer": 94, "categor": 94, "column": 94, "construct": 94, "nearest": 94, "neighbour": 94, "graph": 94, "drift": [95, 101], "understand": 96, "evalu": 96, "health": [96, 98], "popular": 96, "faq": 97, "what": [97, 98, 104], "do": [97, 98], "i": [97, 98, 104], "infer": 97, "correct": 97, "ha": 97, "flag": 97, "should": 97, "v": 97, "test": [97, 98, 103], "big": 97, "limit": 97, "memori": 97, "why": 97, "isn": 97, "t": 97, "work": [97, 98, 100, 107], "me": 97, "differ": [97, 102], "clean": [97, 98], "final": 97, "hyperparamet": 97, "tune": 97, "onli": 97, "one": [97, 98, 101, 106], "doe": [97, 100, 107], "take": 97, "so": 97, "long": 97, "slice": 97, "when": [97, 98], "identifi": [97, 102], "run": 97, "licens": 97, "under": 97, "answer": 97, "question": 97, "The": 98, "centric": 98, "ai": 98, "machin": 98, "find_label_issu": 98, "line": 98, "code": 98, "visual": [98, 102, 103, 106], "twenti": 98, "lowest": 98, "qualiti": [98, 100, 101, 102, 106, 107], "see": 98, "now": 98, "let": 98, "": 98, "happen": 98, "we": 98, "merg": 98, "seafoam": 98, "green": 98, "yellow": 98, "too": 98, "you": 98, "re": 98, "One": 98, "score": [98, 100, 101, 102, 106, 107], "rule": 98, "overal": [98, 106], "accur": 98, "thi": 98, "directli": 98, "fulli": 98, "character": 98, "nois": 98, "matrix": [98, 101], "joint": 98, "prior": 98, "true": 98, "distribut": 98, "flip": 98, "rate": 98, "ani": 98, "again": 98, "support": 98, "lot": 98, "method": 98, "filter_bi": 98, "automat": 98, "everi": 98, "uniqu": 98, "num_label_issu": 98, "threshold": 98, "found": 98, "Not": 98, "sure": 98, "ensembl": 98, "multipl": [98, 100], "predictor": 98, "consensu": 100, "annot": 100, "initi": 100, "major": 100, "vote": 100, "better": 100, "compar": 100, "inspect": 100, "retrain": 100, "further": 100, "multi": 101, "beyond": 101, "mislabel": [101, 106, 107], "given": 101, "hot": 101, "binari": 101, "without": 101, "applic": 101, "real": 101, "download": [102, 106, 107], "objectlab": 102, "exploratori": 102, "analysi": 102, "pytorch": 103, "timm": 103, "cifar10": 103, "some": 103, "pred_prob": [103, 106, 107], "wai": 105, "semant": 106, "which": 106, "ar": 106, "commonli": 106, "focus": 106, "token": 107, "word": 107, "sentenc": 107, "contain": 107, "particular": 107}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "nbsphinx": 4, "sphinx.ext.viewcode": 1, "sphinx.ext.todo": 2, "sphinx": 58}, "alltitles": {"benchmarking": [[0, "module-cleanlab.benchmarking"]], "noise_generation": [[1, "module-cleanlab.benchmarking.noise_generation"]], "classification": [[2, "module-cleanlab.classification"]], "count": [[3, "module-cleanlab.count"]], "data_valuation": [[4, "module-cleanlab.data_valuation"], [18, "data-valuation"]], "datalab": [[5, "module-cleanlab.datalab.datalab"], [11, "module-cleanlab.datalab"]], "Creating Your Own Issues Manager": [[7, "creating-your-own-issues-manager"]], "Prerequisites": [[7, "prerequisites"]], "Implementing IssueManagers": [[7, "implementing-issuemanagers"]], "Basic Issue Check": [[7, "basic-issue-check"]], "Intermediate Issue Check": [[7, "intermediate-issue-check"]], "Advanced Issue Check": [[7, "advanced-issue-check"]], "Use with Datalab": [[7, "use-with-datalab"]], "Generating Cluster IDs": [[8, "generating-cluster-ids"]], "Datalab guides": [[9, "datalab-guides"]], "Types of issues": [[9, "types-of-issues"]], "Customizing issue types": [[9, "customizing-issue-types"]], "Cleanlab Studio (Easy Mode)": [[9, "cleanlab-studio-easy-mode"], [10, "cleanlab-studio-easy-mode"]], "Datalab Issue Types": [[10, "datalab-issue-types"]], "Types of issues Datalab can detect": [[10, "types-of-issues-datalab-can-detect"]], "Estimates for Each Issue Type": [[10, "estimates-for-each-issue-type"]], "Label Issue": [[10, "label-issue"]], "Outlier Issue": [[10, "outlier-issue"]], "(Near) Duplicate Issue": [[10, "near-duplicate-issue"]], "Non-IID Issue": [[10, "non-iid-issue"]], "Class Imbalance Issue": [[10, "class-imbalance-issue"]], "Image-specific Issues": [[10, "image-specific-issues"]], "Underperforming Group Issue": [[10, "underperforming-group-issue"]], "Null Issue": [[10, "null-issue"]], "Data Valuation Issue": [[10, "data-valuation-issue"]], "Optional Issue Parameters": [[10, "optional-issue-parameters"]], "Label Issue Parameters": [[10, "label-issue-parameters"]], "Outlier Issue Parameters": [[10, "outlier-issue-parameters"]], "Duplicate Issue Parameters": [[10, "duplicate-issue-parameters"]], "Non-IID Issue Parameters": [[10, "non-iid-issue-parameters"]], "Imbalance Issue Parameters": [[10, "imbalance-issue-parameters"]], "Underperforming Group Issue Parameters": [[10, "underperforming-group-issue-parameters"]], "Null Issue Parameters": [[10, "null-issue-parameters"]], "Data Valuation Issue Parameters": [[10, "data-valuation-issue-parameters"]], "Image Issue Parameters": [[10, "image-issue-parameters"]], "Getting Started": [[11, "getting-started"]], "Guides": [[11, "guides"]], "API Reference": [[11, "api-reference"]], "data": [[12, "module-cleanlab.datalab.internal.data"]], "data_issues": [[13, "module-cleanlab.datalab.internal.data_issues"]], "factory": [[14, "module-cleanlab.datalab.internal.issue_manager_factory"]], "internal": [[15, "internal"], [44, "internal"]], "issue_finder": [[16, "issue-finder"]], "duplicate": [[19, "module-cleanlab.datalab.internal.issue_manager.duplicate"]], "imbalance": [[20, "module-cleanlab.datalab.internal.issue_manager.imbalance"]], "issue_manager": [[21, "issue-manager"], [22, "module-cleanlab.datalab.internal.issue_manager.issue_manager"]], "Registered issue managers": [[21, "registered-issue-managers"]], "ML task-specific issue managers": [[21, "ml-task-specific-issue-managers"]], "label": [[23, "module-cleanlab.datalab.internal.issue_manager.label"], [25, "module-cleanlab.datalab.internal.issue_manager.multilabel.label"], [30, "module-cleanlab.datalab.internal.issue_manager.regression.label"]], "multilabel": [[24, "multilabel"]], "noniid": [[26, "module-cleanlab.datalab.internal.issue_manager.noniid"]], "null": [[27, "null"]], "outlier": [[28, "module-cleanlab.datalab.internal.issue_manager.outlier"], [54, "module-cleanlab.internal.outlier"], [70, "module-cleanlab.outlier"]], "regression": [[29, "regression"], [72, "regression"]], "Priority Order for finding issues:": [[30, null]], "underperforming_group": [[31, "underperforming-group"]], "model_outputs": [[32, "module-cleanlab.datalab.internal.model_outputs"]], "report": [[33, "report"]], "task": [[34, "task"]], "dataset": [[36, "module-cleanlab.dataset"], [62, "module-cleanlab.multilabel_classification.dataset"]], "cifar_cnn": [[37, "module-cleanlab.experimental.cifar_cnn"]], "coteaching": [[38, "module-cleanlab.experimental.coteaching"]], "experimental": [[39, "experimental"]], "label_issues_batched": [[40, "module-cleanlab.experimental.label_issues_batched"]], "mnist_pytorch": [[41, "module-cleanlab.experimental.mnist_pytorch"]], "span_classification": [[42, "module-cleanlab.experimental.span_classification"]], "filter": [[43, "module-cleanlab.filter"], [63, "module-cleanlab.multilabel_classification.filter"], [66, "filter"], [75, "filter"], [79, "module-cleanlab.token_classification.filter"]], "label_quality_utils": [[45, "module-cleanlab.internal.label_quality_utils"]], "latent_algebra": [[46, "module-cleanlab.internal.latent_algebra"]], "multiannotator_utils": [[47, "module-cleanlab.internal.multiannotator_utils"]], "multilabel_scorer": [[48, "module-cleanlab.internal.multilabel_scorer"]], "multilabel_utils": [[49, "module-cleanlab.internal.multilabel_utils"]], "neighbor": [[50, "neighbor"]], "knn_graph": [[51, "module-cleanlab.internal.neighbor.knn_graph"]], "metric": [[52, "module-cleanlab.internal.neighbor.metric"]], "search": [[53, "module-cleanlab.internal.neighbor.search"]], "token_classification_utils": [[55, "module-cleanlab.internal.token_classification_utils"]], "util": [[56, "module-cleanlab.internal.util"]], "validation": [[57, "module-cleanlab.internal.validation"]], "fasttext": [[58, "fasttext"]], "models": [[59, "models"]], "keras": [[60, "module-cleanlab.models.keras"]], "multiannotator": [[61, "module-cleanlab.multiannotator"]], "multilabel_classification": [[64, "multilabel-classification"]], "rank": [[65, "module-cleanlab.multilabel_classification.rank"], [68, "module-cleanlab.object_detection.rank"], [71, "module-cleanlab.rank"], [77, "module-cleanlab.segmentation.rank"], [81, "module-cleanlab.token_classification.rank"]], "object_detection": [[67, "object-detection"]], "summary": [[69, "summary"], [78, "module-cleanlab.segmentation.summary"], [82, "module-cleanlab.token_classification.summary"]], "regression.learn": [[73, "module-cleanlab.regression.learn"]], "regression.rank": [[74, "module-cleanlab.regression.rank"]], "segmentation": [[76, "segmentation"]], "token_classification": [[80, "token-classification"]], "cleanlab open-source documentation": [[83, "cleanlab-open-source-documentation"]], "Quickstart": [[83, "quickstart"]], "1. Install cleanlab": [[83, "install-cleanlab"]], "2. Find common issues in your data": [[83, "find-common-issues-in-your-data"]], "3. Handle label errors and train robust models with noisy labels": [[83, "handle-label-errors-and-train-robust-models-with-noisy-labels"]], "4. Dataset curation: fix dataset-level issues": [[83, "dataset-curation-fix-dataset-level-issues"]], "5. Improve your data via many other techniques": [[83, "improve-your-data-via-many-other-techniques"]], "Contributing": [[83, "contributing"]], "Easy Mode": [[83, "easy-mode"], [92, "Easy-Mode"], [94, "Easy-Mode"], [95, "Easy-Mode"]], "How to migrate to versions >= 2.0.0 from pre 1.0.1": [[84, "how-to-migrate-to-versions-2-0-0-from-pre-1-0-1"]], "Function and class name changes": [[84, "function-and-class-name-changes"]], "Module name changes": [[84, "module-name-changes"]], "New modules": [[84, "new-modules"]], "Removed modules": [[84, "removed-modules"]], "Common argument and variable name changes": [[84, "common-argument-and-variable-name-changes"]], "CleanLearning Tutorials": [[85, "cleanlearning-tutorials"]], "Classification with Structured/Tabular Data and Noisy Labels": [[86, "Classification-with-Structured/Tabular-Data-and-Noisy-Labels"]], "1. Install required dependencies": [[86, "1.-Install-required-dependencies"], [87, "1.-Install-required-dependencies"], [94, "1.-Install-required-dependencies"], [95, "1.-Install-required-dependencies"], [105, "1.-Install-required-dependencies"]], "2. Load and process the data": [[86, "2.-Load-and-process-the-data"], [94, "2.-Load-and-process-the-data"], [105, "2.-Load-and-process-the-data"]], "3. Select a classification model and compute out-of-sample predicted probabilities": [[86, "3.-Select-a-classification-model-and-compute-out-of-sample-predicted-probabilities"], [94, "3.-Select-a-classification-model-and-compute-out-of-sample-predicted-probabilities"]], "4. Use cleanlab to find label issues": [[86, "4.-Use-cleanlab-to-find-label-issues"]], "5. Train a more robust model from noisy labels": [[86, "5.-Train-a-more-robust-model-from-noisy-labels"]], "Text Classification with Noisy Labels": [[87, "Text-Classification-with-Noisy-Labels"]], "2. Load and format the text dataset": [[87, "2.-Load-and-format-the-text-dataset"], [95, "2.-Load-and-format-the-text-dataset"]], "3. Define a classification model and use cleanlab to find potential label errors": [[87, "3.-Define-a-classification-model-and-use-cleanlab-to-find-potential-label-errors"]], "4. Train a more robust model from noisy labels": [[87, "4.-Train-a-more-robust-model-from-noisy-labels"], [105, "4.-Train-a-more-robust-model-from-noisy-labels"]], "Detecting Issues in an Audio Dataset with Datalab": [[88, "Detecting-Issues-in-an-Audio-Dataset-with-Datalab"]], "1. Install dependencies and import them": [[88, "1.-Install-dependencies-and-import-them"]], "2. Load the data": [[88, "2.-Load-the-data"]], "3. Use pre-trained SpeechBrain model to featurize audio": [[88, "3.-Use-pre-trained-SpeechBrain-model-to-featurize-audio"]], "4. Fit linear model and compute out-of-sample predicted probabilities": [[88, "4.-Fit-linear-model-and-compute-out-of-sample-predicted-probabilities"]], "5. Use cleanlab to find label issues": [[88, "5.-Use-cleanlab-to-find-label-issues"], [94, "5.-Use-cleanlab-to-find-label-issues"]], "DataMonitor: Leverage statistics from Datalab to audit new data": [[89, "DataMonitor:-Leverage-statistics-from-Datalab-to-audit-new-data"]], "1. Install and import required dependencies": [[89, "1.-Install-and-import-required-dependencies"], [91, "1.-Install-and-import-required-dependencies"], [92, "1.-Install-and-import-required-dependencies"], [100, "1.-Install-and-import-required-dependencies"]], "2. Create and load the data (can skip these details)": [[89, "2.-Create-and-load-the-data-(can-skip-these-details)"], [91, "2.-Create-and-load-the-data-(can-skip-these-details)"]], "3. Get out-of-sample predicted probabilities from a classifier": [[89, "3.-Get-out-of-sample-predicted-probabilities-from-a-classifier"], [91, "3.-Get-out-of-sample-predicted-probabilities-from-a-classifier"]], "4. Use Datalab to find issues in the dataset": [[89, "4.-Use-Datalab-to-find-issues-in-the-dataset"], [91, "4.-Use-Datalab-to-find-issues-in-the-dataset"]], "5. Use DataMonitor to find issues in new data": [[89, "5.-Use-DataMonitor-to-find-issues-in-new-data"]], "6. Learn more about the issues in the additional data": [[89, "6.-Learn-more-about-the-issues-in-the-additional-data"]], "7. Finding outliers in new data": [[89, "7.-Finding-outliers-in-new-data"]], "8. Looking for both label issues and outliers": [[89, "8.-Looking-for-both-label-issues-and-outliers"]], "Datalab: Advanced workflows to audit your data": [[90, "Datalab:-Advanced-workflows-to-audit-your-data"]], "Install and import required dependencies": [[90, "Install-and-import-required-dependencies"]], "Create and load the data": [[90, "Create-and-load-the-data"]], "Get out-of-sample predicted probabilities from a classifier": [[90, "Get-out-of-sample-predicted-probabilities-from-a-classifier"]], "Instantiate Datalab object": [[90, "Instantiate-Datalab-object"]], "Functionality 1: Incremental issue search": [[90, "Functionality-1:-Incremental-issue-search"]], "Functionality 2: Specifying nondefault arguments": [[90, "Functionality-2:-Specifying-nondefault-arguments"]], "Functionality 3: Save and load Datalab objects": [[90, "Functionality-3:-Save-and-load-Datalab-objects"]], "Functionality 4: Adding a custom IssueManager": [[90, "Functionality-4:-Adding-a-custom-IssueManager"]], "Datalab: A unified audit to detect all kinds of issues in data and labels": [[91, "Datalab:-A-unified-audit-to-detect-all-kinds-of-issues-in-data-and-labels"]], "5. Learn more about the issues in your dataset": [[91, "5.-Learn-more-about-the-issues-in-your-dataset"]], "Get additional information": [[91, "Get-additional-information"]], "Near duplicate issues": [[91, "Near-duplicate-issues"], [92, "Near-duplicate-issues"]], "Detecting Issues in an Image Dataset with Datalab": [[92, "Detecting-Issues-in-an-Image-Dataset-with-Datalab"]], "2. Fetch and normalize the Fashion-MNIST dataset": [[92, "2.-Fetch-and-normalize-the-Fashion-MNIST-dataset"]], "3. Define a classification model": [[92, "3.-Define-a-classification-model"]], "4. Prepare the dataset for K-fold cross-validation": [[92, "4.-Prepare-the-dataset-for-K-fold-cross-validation"]], "5. Compute out-of-sample predicted probabilities and feature embeddings": [[92, "5.-Compute-out-of-sample-predicted-probabilities-and-feature-embeddings"]], "7. Use cleanlab to find issues": [[92, "7.-Use-cleanlab-to-find-issues"]], "View report": [[92, "View-report"]], "Label issues": [[92, "Label-issues"], [94, "Label-issues"], [95, "Label-issues"]], "View most likely examples with label errors": [[92, "View-most-likely-examples-with-label-errors"]], "Outlier issues": [[92, "Outlier-issues"], [94, "Outlier-issues"], [95, "Outlier-issues"]], "View most severe outliers": [[92, "View-most-severe-outliers"]], "View sets of near duplicate images": [[92, "View-sets-of-near-duplicate-images"]], "Dark images": [[92, "Dark-images"]], "View top examples of dark images": [[92, "View-top-examples-of-dark-images"]], "Low information images": [[92, "Low-information-images"]], "Datalab Tutorials": [[93, "datalab-tutorials"]], "Detecting Issues in Tabular Data\u00a0(Numeric/Categorical columns) with Datalab": [[94, "Detecting-Issues-in-Tabular-Data\u00a0(Numeric/Categorical-columns)-with-Datalab"]], "4. Construct K nearest neighbours graph": [[94, "4.-Construct-K-nearest-neighbours-graph"]], "Near-duplicate issues": [[94, "Near-duplicate-issues"], [95, "Near-duplicate-issues"]], "Detecting Issues in a Text Dataset with Datalab": [[95, "Detecting-Issues-in-a-Text-Dataset-with-Datalab"]], "3. Define a classification model and compute out-of-sample predicted probabilities": [[95, "3.-Define-a-classification-model-and-compute-out-of-sample-predicted-probabilities"]], "4. Use cleanlab to find issues in your dataset": [[95, "4.-Use-cleanlab-to-find-issues-in-your-dataset"]], "Non-IID issues (data drift)": [[95, "Non-IID-issues-(data-drift)"]], "Understanding Dataset-level Labeling Issues": [[96, "Understanding-Dataset-level-Labeling-Issues"]], "Install dependencies and import them": [[96, "Install-dependencies-and-import-them"], [98, "Install-dependencies-and-import-them"]], "Fetch the data (can skip these details)": [[96, "Fetch-the-data-(can-skip-these-details)"]], "Start of tutorial: Evaluate the health of 8 popular datasets": [[96, "Start-of-tutorial:-Evaluate-the-health-of-8-popular-datasets"]], "FAQ": [[97, "FAQ"]], "What data can cleanlab detect issues in?": [[97, "What-data-can-cleanlab-detect-issues-in?"]], "How do I format classification labels for cleanlab?": [[97, "How-do-I-format-classification-labels-for-cleanlab?"]], "How do I infer the correct labels for examples cleanlab has flagged?": [[97, "How-do-I-infer-the-correct-labels-for-examples-cleanlab-has-flagged?"]], "How should I handle label errors in train vs. test data?": [[97, "How-should-I-handle-label-errors-in-train-vs.-test-data?"]], "How can I find label issues in big datasets with limited memory?": [[97, "How-can-I-find-label-issues-in-big-datasets-with-limited-memory?"]], "Why isn\u2019t CleanLearning working for me?": [[97, "Why-isn\u2019t-CleanLearning-working-for-me?"]], "How can I use different models for data cleaning vs. final training in CleanLearning?": [[97, "How-can-I-use-different-models-for-data-cleaning-vs.-final-training-in-CleanLearning?"]], "How do I hyperparameter tune only the final model trained (and not the one finding label issues) in CleanLearning?": [[97, "How-do-I-hyperparameter-tune-only-the-final-model-trained-(and-not-the-one-finding-label-issues)-in-CleanLearning?"]], "Why does regression.learn.CleanLearning take so long?": [[97, "Why-does-regression.learn.CleanLearning-take-so-long?"]], "How do I specify pre-computed data slices/clusters when detecting the Underperforming Group Issue?": [[97, "How-do-I-specify-pre-computed-data-slices/clusters-when-detecting-the-Underperforming-Group-Issue?"]], "How to handle near-duplicate data identified by cleanlab?": [[97, "How-to-handle-near-duplicate-data-identified-by-cleanlab?"]], "What ML models should I run cleanlab with? How do I fix the issues cleanlab has identified?": [[97, "What-ML-models-should-I-run-cleanlab-with?-How-do-I-fix-the-issues-cleanlab-has-identified?"]], "What license is cleanlab open-sourced under?": [[97, "What-license-is-cleanlab-open-sourced-under?"]], "Can\u2019t find an answer to your question?": [[97, "Can't-find-an-answer-to-your-question?"]], "The Workflows of Data-centric AI for Classification with Noisy Labels": [[98, "The-Workflows-of-Data-centric-AI-for-Classification-with-Noisy-Labels"]], "Create the data (can skip these details)": [[98, "Create-the-data-(can-skip-these-details)"]], "Workflow 1: Use Datalab to detect many types of issues": [[98, "Workflow-1:-Use-Datalab-to-detect-many-types-of-issues"]], "Workflow 2: Use CleanLearning for more robust Machine Learning": [[98, "Workflow-2:-Use-CleanLearning-for-more-robust-Machine-Learning"]], "Clean Learning = Machine Learning with cleaned data": [[98, "Clean-Learning-=-Machine-Learning-with-cleaned-data"]], "Workflow 3: Use CleanLearning to find_label_issues in one line of code": [[98, "Workflow-3:-Use-CleanLearning-to-find_label_issues-in-one-line-of-code"]], "Visualize the twenty examples with lowest label quality to see if Cleanlab works.": [[98, "Visualize-the-twenty-examples-with-lowest-label-quality-to-see-if-Cleanlab-works."]], "Workflow 4: Use cleanlab to find dataset-level and class-level issues": [[98, "Workflow-4:-Use-cleanlab-to-find-dataset-level-and-class-level-issues"]], "Now, let\u2019s see what happens if we merge classes \u201cseafoam green\u201d and \u201cyellow\u201d": [[98, "Now,-let's-see-what-happens-if-we-merge-classes-%22seafoam-green%22-and-%22yellow%22"]], "Workflow 5: Clean your test set too if you\u2019re doing ML with noisy labels!": [[98, "Workflow-5:-Clean-your-test-set-too-if-you're-doing-ML-with-noisy-labels!"]], "Workflow 6: One score to rule them all \u2013 use cleanlab\u2019s overall dataset health score": [[98, "Workflow-6:-One-score-to-rule-them-all----use-cleanlab's-overall-dataset-health-score"]], "How accurate is this dataset health score?": [[98, "How-accurate-is-this-dataset-health-score?"]], "Workflow(s) 7: Use count, rank, filter modules directly": [[98, "Workflow(s)-7:-Use-count,-rank,-filter-modules-directly"]], "Workflow 7.1 (count): Fully characterize label noise (noise matrix, joint, prior of true labels, \u2026)": [[98, "Workflow-7.1-(count):-Fully-characterize-label-noise-(noise-matrix,-joint,-prior-of-true-labels,-...)"]], "Use cleanlab to estimate and visualize the joint distribution of label noise and noise matrix of label flipping rates:": [[98, "Use-cleanlab-to-estimate-and-visualize-the-joint-distribution-of-label-noise-and-noise-matrix-of-label-flipping-rates:"]], "Workflow 7.2 (filter): Find label issues for any dataset and any model in one line of code": [[98, "Workflow-7.2-(filter):-Find-label-issues-for-any-dataset-and-any-model-in-one-line-of-code"]], "Again, we can visualize the twenty examples with lowest label quality to see if Cleanlab works.": [[98, "Again,-we-can-visualize-the-twenty-examples-with-lowest-label-quality-to-see-if-Cleanlab-works."]], "Workflow 7.2 supports lots of methods to find_label_issues() via the filter_by parameter.": [[98, "Workflow-7.2-supports-lots-of-methods-to-find_label_issues()-via-the-filter_by-parameter."]], "Workflow 7.3 (rank): Automatically rank every example by a unique label quality score. Find errors using cleanlab.count.num_label_issues as a threshold.": [[98, "Workflow-7.3-(rank):-Automatically-rank-every-example-by-a-unique-label-quality-score.-Find-errors-using-cleanlab.count.num_label_issues-as-a-threshold."]], "Again, we can visualize the label issues found to see if Cleanlab works.": [[98, "Again,-we-can-visualize-the-label-issues-found-to-see-if-Cleanlab-works."]], "Not sure when to use Workflow 7.2 or 7.3 to find label issues?": [[98, "Not-sure-when-to-use-Workflow-7.2-or-7.3-to-find-label-issues?"]], "Workflow 8: Ensembling label quality scores from multiple predictors": [[98, "Workflow-8:-Ensembling-label-quality-scores-from-multiple-predictors"]], "Tutorials": [[99, "tutorials"]], "Estimate Consensus and Annotator Quality for Data Labeled by Multiple Annotators": [[100, "Estimate-Consensus-and-Annotator-Quality-for-Data-Labeled-by-Multiple-Annotators"]], "2. Create the data (can skip these details)": [[100, "2.-Create-the-data-(can-skip-these-details)"]], "3. Get initial consensus labels via majority vote and compute out-of-sample predicted probabilities": [[100, "3.-Get-initial-consensus-labels-via-majority-vote-and-compute-out-of-sample-predicted-probabilities"]], "4. Use cleanlab to get better consensus labels and other statistics": [[100, "4.-Use-cleanlab-to-get-better-consensus-labels-and-other-statistics"]], "Comparing improved consensus labels": [[100, "Comparing-improved-consensus-labels"]], "Inspecting consensus quality scores to find potential consensus label errors": [[100, "Inspecting-consensus-quality-scores-to-find-potential-consensus-label-errors"]], "5. Retrain model using improved consensus labels": [[100, "5.-Retrain-model-using-improved-consensus-labels"]], "Further improvements": [[100, "Further-improvements"]], "How does cleanlab.multiannotator work?": [[100, "How-does-cleanlab.multiannotator-work?"]], "Find Label Errors in Multi-Label Classification Datasets": [[101, "Find-Label-Errors-in-Multi-Label-Classification-Datasets"]], "1. Install required dependencies and get dataset": [[101, "1.-Install-required-dependencies-and-get-dataset"]], "2. Format data, labels, and model predictions": [[101, "2.-Format-data,-labels,-and-model-predictions"], [102, "2.-Format-data,-labels,-and-model-predictions"]], "3. Use cleanlab to find label issues": [[101, "3.-Use-cleanlab-to-find-label-issues"], [102, "3.-Use-cleanlab-to-find-label-issues"], [106, "3.-Use-cleanlab-to-find-label-issues"], [107, "3.-Use-cleanlab-to-find-label-issues"]], "Label quality scores": [[101, "Label-quality-scores"]], "Data issues beyond mislabeling (outliers, duplicates, drift, \u2026)": [[101, "Data-issues-beyond-mislabeling-(outliers,-duplicates,-drift,-...)"]], "How to format labels given as a one-hot (multi-hot) binary matrix?": [[101, "How-to-format-labels-given-as-a-one-hot-(multi-hot)-binary-matrix?"]], "Estimate label issues without Datalab": [[101, "Estimate-label-issues-without-Datalab"]], "Application to Real Data": [[101, "Application-to-Real-Data"]], "Finding Label Errors in Object Detection Datasets": [[102, "Finding-Label-Errors-in-Object-Detection-Datasets"]], "1. Install required dependencies and download data": [[102, "1.-Install-required-dependencies-and-download-data"], [106, "1.-Install-required-dependencies-and-download-data"], [107, "1.-Install-required-dependencies-and-download-data"]], "Get label quality scores": [[102, "Get-label-quality-scores"], [106, "Get-label-quality-scores"]], "4. Use ObjectLab to visualize label issues": [[102, "4.-Use-ObjectLab-to-visualize-label-issues"]], "Different kinds of label issues identified by ObjectLab": [[102, "Different-kinds-of-label-issues-identified-by-ObjectLab"]], "Other uses of visualize": [[102, "Other-uses-of-visualize"]], "Exploratory data analysis": [[102, "Exploratory-data-analysis"]], "Detect Outliers with Cleanlab and PyTorch Image Models (timm)": [[103, "Detect-Outliers-with-Cleanlab-and-PyTorch-Image-Models-(timm)"]], "1. Install the required dependencies": [[103, "1.-Install-the-required-dependencies"]], "2. Pre-process the Cifar10 dataset": [[103, "2.-Pre-process-the-Cifar10-dataset"]], "Visualize some of the training and test examples": [[103, "Visualize-some-of-the-training-and-test-examples"]], "3. Use cleanlab and feature embeddings to find outliers in the data": [[103, "3.-Use-cleanlab-and-feature-embeddings-to-find-outliers-in-the-data"]], "4. Use cleanlab and pred_probs to find outliers in the data": [[103, "4.-Use-cleanlab-and-pred_probs-to-find-outliers-in-the-data"]], "Computing Out-of-Sample Predicted Probabilities with Cross-Validation": [[104, "computing-out-of-sample-predicted-probabilities-with-cross-validation"]], "Out-of-sample predicted probabilities?": [[104, "out-of-sample-predicted-probabilities"]], "What is K-fold cross-validation?": [[104, "what-is-k-fold-cross-validation"]], "Find Noisy Labels in Regression Datasets": [[105, "Find-Noisy-Labels-in-Regression-Datasets"]], "3. Define a regression model and use cleanlab to find potential label errors": [[105, "3.-Define-a-regression-model-and-use-cleanlab-to-find-potential-label-errors"]], "5. Other ways to find noisy labels in regression datasets": [[105, "5.-Other-ways-to-find-noisy-labels-in-regression-datasets"]], "Find Label Errors in Semantic Segmentation Datasets": [[106, "Find-Label-Errors-in-Semantic-Segmentation-Datasets"]], "2. Get data, labels, and pred_probs": [[106, "2.-Get-data,-labels,-and-pred_probs"], [107, "2.-Get-data,-labels,-and-pred_probs"]], "Visualize top label issues": [[106, "Visualize-top-label-issues"]], "Classes which are commonly mislabeled overall": [[106, "Classes-which-are-commonly-mislabeled-overall"]], "Focusing on one specific class": [[106, "Focusing-on-one-specific-class"]], "Find Label Errors in Token Classification (Text) Datasets": [[107, "Find-Label-Errors-in-Token-Classification-(Text)-Datasets"]], "Most common word-level token mislabels": [[107, "Most-common-word-level-token-mislabels"]], "Find sentences containing a particular mislabeled word": [[107, "Find-sentences-containing-a-particular-mislabeled-word"]], "Sentence label quality score": [[107, "Sentence-label-quality-score"]], "How does cleanlab.token_classification work?": [[107, "How-does-cleanlab.token_classification-work?"]]}, "indexentries": {"cleanlab.benchmarking": [[0, "module-cleanlab.benchmarking"]], "module": [[0, "module-cleanlab.benchmarking"], [1, "module-cleanlab.benchmarking.noise_generation"], [2, "module-cleanlab.classification"], [3, "module-cleanlab.count"], [4, "module-cleanlab.data_valuation"], [5, "module-cleanlab.datalab.datalab"], [11, "module-cleanlab.datalab"], [12, "module-cleanlab.datalab.internal.data"], [13, "module-cleanlab.datalab.internal.data_issues"], [14, "module-cleanlab.datalab.internal.issue_manager_factory"], [15, "module-cleanlab.datalab.internal"], [16, "module-cleanlab.datalab.internal.issue_finder"], [18, "module-cleanlab.datalab.internal.issue_manager.data_valuation"], [19, "module-cleanlab.datalab.internal.issue_manager.duplicate"], [20, "module-cleanlab.datalab.internal.issue_manager.imbalance"], [22, "module-cleanlab.datalab.internal.issue_manager.issue_manager"], [23, "module-cleanlab.datalab.internal.issue_manager.label"], [25, "module-cleanlab.datalab.internal.issue_manager.multilabel.label"], [26, "module-cleanlab.datalab.internal.issue_manager.noniid"], [27, "module-cleanlab.datalab.internal.issue_manager.null"], [28, "module-cleanlab.datalab.internal.issue_manager.outlier"], [30, "module-cleanlab.datalab.internal.issue_manager.regression.label"], [31, "module-cleanlab.datalab.internal.issue_manager.underperforming_group"], [32, "module-cleanlab.datalab.internal.model_outputs"], [33, "module-cleanlab.datalab.internal.report"], [34, "module-cleanlab.datalab.internal.task"], [36, "module-cleanlab.dataset"], [37, "module-cleanlab.experimental.cifar_cnn"], [38, "module-cleanlab.experimental.coteaching"], [39, "module-cleanlab.experimental"], [40, "module-cleanlab.experimental.label_issues_batched"], [41, "module-cleanlab.experimental.mnist_pytorch"], [42, "module-cleanlab.experimental.span_classification"], [43, "module-cleanlab.filter"], [44, "module-cleanlab.internal"], [45, "module-cleanlab.internal.label_quality_utils"], [46, "module-cleanlab.internal.latent_algebra"], [47, "module-cleanlab.internal.multiannotator_utils"], [48, "module-cleanlab.internal.multilabel_scorer"], [49, "module-cleanlab.internal.multilabel_utils"], [50, "module-cleanlab.internal.neighbor"], [51, "module-cleanlab.internal.neighbor.knn_graph"], [52, "module-cleanlab.internal.neighbor.metric"], [53, "module-cleanlab.internal.neighbor.search"], [54, "module-cleanlab.internal.outlier"], [55, "module-cleanlab.internal.token_classification_utils"], [56, "module-cleanlab.internal.util"], [57, "module-cleanlab.internal.validation"], [59, "module-cleanlab.models"], [60, "module-cleanlab.models.keras"], [61, "module-cleanlab.multiannotator"], [62, "module-cleanlab.multilabel_classification.dataset"], [63, "module-cleanlab.multilabel_classification.filter"], [64, "module-cleanlab.multilabel_classification"], [65, "module-cleanlab.multilabel_classification.rank"], [66, "module-cleanlab.object_detection.filter"], [67, "module-cleanlab.object_detection"], [68, "module-cleanlab.object_detection.rank"], [69, "module-cleanlab.object_detection.summary"], [70, "module-cleanlab.outlier"], [71, "module-cleanlab.rank"], [72, "module-cleanlab.regression"], [73, "module-cleanlab.regression.learn"], [74, "module-cleanlab.regression.rank"], [75, "module-cleanlab.segmentation.filter"], [76, "module-cleanlab.segmentation"], [77, "module-cleanlab.segmentation.rank"], [78, "module-cleanlab.segmentation.summary"], [79, "module-cleanlab.token_classification.filter"], [80, "module-cleanlab.token_classification"], [81, "module-cleanlab.token_classification.rank"], [82, "module-cleanlab.token_classification.summary"]], "cleanlab.benchmarking.noise_generation": [[1, "module-cleanlab.benchmarking.noise_generation"]], "generate_n_rand_probabilities_that_sum_to_m() (in module cleanlab.benchmarking.noise_generation)": [[1, "cleanlab.benchmarking.noise_generation.generate_n_rand_probabilities_that_sum_to_m"]], "generate_noise_matrix_from_trace() (in module cleanlab.benchmarking.noise_generation)": [[1, "cleanlab.benchmarking.noise_generation.generate_noise_matrix_from_trace"]], "generate_noisy_labels() (in module cleanlab.benchmarking.noise_generation)": [[1, "cleanlab.benchmarking.noise_generation.generate_noisy_labels"]], "noise_matrix_is_valid() (in module cleanlab.benchmarking.noise_generation)": [[1, "cleanlab.benchmarking.noise_generation.noise_matrix_is_valid"]], "randomly_distribute_n_balls_into_k_bins() (in module cleanlab.benchmarking.noise_generation)": [[1, "cleanlab.benchmarking.noise_generation.randomly_distribute_N_balls_into_K_bins"]], "cleanlearning (class in cleanlab.classification)": [[2, "cleanlab.classification.CleanLearning"]], "__init_subclass__() (cleanlab.classification.cleanlearning class method)": [[2, "cleanlab.classification.CleanLearning.__init_subclass__"]], "cleanlab.classification": [[2, "module-cleanlab.classification"]], "find_label_issues() (cleanlab.classification.cleanlearning method)": [[2, "cleanlab.classification.CleanLearning.find_label_issues"]], "fit() (cleanlab.classification.cleanlearning method)": [[2, "cleanlab.classification.CleanLearning.fit"]], "get_label_issues() (cleanlab.classification.cleanlearning method)": [[2, "cleanlab.classification.CleanLearning.get_label_issues"]], "get_metadata_routing() (cleanlab.classification.cleanlearning method)": [[2, "cleanlab.classification.CleanLearning.get_metadata_routing"]], "get_params() (cleanlab.classification.cleanlearning method)": [[2, "cleanlab.classification.CleanLearning.get_params"]], "predict() (cleanlab.classification.cleanlearning method)": [[2, "cleanlab.classification.CleanLearning.predict"]], "predict_proba() (cleanlab.classification.cleanlearning method)": [[2, "cleanlab.classification.CleanLearning.predict_proba"]], "save_space() (cleanlab.classification.cleanlearning method)": [[2, "cleanlab.classification.CleanLearning.save_space"]], "score() (cleanlab.classification.cleanlearning method)": [[2, "cleanlab.classification.CleanLearning.score"]], "set_fit_request() (cleanlab.classification.cleanlearning method)": [[2, "cleanlab.classification.CleanLearning.set_fit_request"]], "set_params() (cleanlab.classification.cleanlearning method)": [[2, "cleanlab.classification.CleanLearning.set_params"]], "set_score_request() (cleanlab.classification.cleanlearning method)": [[2, "cleanlab.classification.CleanLearning.set_score_request"]], "calibrate_confident_joint() (in module cleanlab.count)": [[3, "cleanlab.count.calibrate_confident_joint"]], "cleanlab.count": [[3, "module-cleanlab.count"]], "compute_confident_joint() (in module cleanlab.count)": [[3, "cleanlab.count.compute_confident_joint"]], "estimate_confident_joint_and_cv_pred_proba() (in module cleanlab.count)": [[3, "cleanlab.count.estimate_confident_joint_and_cv_pred_proba"]], "estimate_cv_predicted_probabilities() (in module cleanlab.count)": [[3, "cleanlab.count.estimate_cv_predicted_probabilities"]], "estimate_joint() (in module cleanlab.count)": [[3, "cleanlab.count.estimate_joint"]], "estimate_latent() (in module cleanlab.count)": [[3, "cleanlab.count.estimate_latent"]], "estimate_noise_matrices() (in module cleanlab.count)": [[3, "cleanlab.count.estimate_noise_matrices"]], "estimate_py_and_noise_matrices_from_probabilities() (in module cleanlab.count)": [[3, "cleanlab.count.estimate_py_and_noise_matrices_from_probabilities"]], "estimate_py_noise_matrices_and_cv_pred_proba() (in module cleanlab.count)": [[3, "cleanlab.count.estimate_py_noise_matrices_and_cv_pred_proba"]], "get_confident_thresholds() (in module cleanlab.count)": [[3, "cleanlab.count.get_confident_thresholds"]], "num_label_issues() (in module cleanlab.count)": [[3, "cleanlab.count.num_label_issues"]], "cleanlab.data_valuation": [[4, "module-cleanlab.data_valuation"]], "data_shapley_knn() (in module cleanlab.data_valuation)": [[4, "cleanlab.data_valuation.data_shapley_knn"]], "datalab (class in cleanlab.datalab.datalab)": [[5, "cleanlab.datalab.datalab.Datalab"]], "class_names (cleanlab.datalab.datalab.datalab property)": [[5, "cleanlab.datalab.datalab.Datalab.class_names"]], "cleanlab.datalab.datalab": [[5, "module-cleanlab.datalab.datalab"]], "find_issues() (cleanlab.datalab.datalab.datalab method)": [[5, "cleanlab.datalab.datalab.Datalab.find_issues"]], "get_info() (cleanlab.datalab.datalab.datalab method)": [[5, "cleanlab.datalab.datalab.Datalab.get_info"]], "get_issue_summary() (cleanlab.datalab.datalab.datalab method)": [[5, "cleanlab.datalab.datalab.Datalab.get_issue_summary"]], "get_issues() (cleanlab.datalab.datalab.datalab method)": [[5, "cleanlab.datalab.datalab.Datalab.get_issues"]], "has_labels (cleanlab.datalab.datalab.datalab property)": [[5, "cleanlab.datalab.datalab.Datalab.has_labels"]], "info (cleanlab.datalab.datalab.datalab property)": [[5, "cleanlab.datalab.datalab.Datalab.info"]], "issue_summary (cleanlab.datalab.datalab.datalab property)": [[5, "cleanlab.datalab.datalab.Datalab.issue_summary"]], "issues (cleanlab.datalab.datalab.datalab property)": [[5, "cleanlab.datalab.datalab.Datalab.issues"]], "labels (cleanlab.datalab.datalab.datalab property)": [[5, "cleanlab.datalab.datalab.Datalab.labels"]], "list_default_issue_types() (cleanlab.datalab.datalab.datalab method)": [[5, "cleanlab.datalab.datalab.Datalab.list_default_issue_types"]], "list_possible_issue_types() (cleanlab.datalab.datalab.datalab method)": [[5, "cleanlab.datalab.datalab.Datalab.list_possible_issue_types"]], "load() (cleanlab.datalab.datalab.datalab static method)": [[5, "cleanlab.datalab.datalab.Datalab.load"]], "report() (cleanlab.datalab.datalab.datalab method)": [[5, "cleanlab.datalab.datalab.Datalab.report"]], "save() (cleanlab.datalab.datalab.datalab method)": [[5, "cleanlab.datalab.datalab.Datalab.save"]], "cleanlab.datalab": [[11, "module-cleanlab.datalab"]], "data (class in cleanlab.datalab.internal.data)": [[12, "cleanlab.datalab.internal.data.Data"]], "dataformaterror": [[12, "cleanlab.datalab.internal.data.DataFormatError"]], "datasetdicterror": [[12, "cleanlab.datalab.internal.data.DatasetDictError"]], "datasetloaderror": [[12, "cleanlab.datalab.internal.data.DatasetLoadError"]], "label (class in cleanlab.datalab.internal.data)": [[12, "cleanlab.datalab.internal.data.Label"]], "multiclass (class in cleanlab.datalab.internal.data)": [[12, "cleanlab.datalab.internal.data.MultiClass"]], "multilabel (class in cleanlab.datalab.internal.data)": [[12, "cleanlab.datalab.internal.data.MultiLabel"]], "add_note() (cleanlab.datalab.internal.data.dataformaterror method)": [[12, "cleanlab.datalab.internal.data.DataFormatError.add_note"]], "add_note() (cleanlab.datalab.internal.data.datasetdicterror method)": [[12, "cleanlab.datalab.internal.data.DatasetDictError.add_note"]], "add_note() (cleanlab.datalab.internal.data.datasetloaderror method)": [[12, "cleanlab.datalab.internal.data.DatasetLoadError.add_note"]], "args (cleanlab.datalab.internal.data.dataformaterror attribute)": [[12, "cleanlab.datalab.internal.data.DataFormatError.args"]], "args (cleanlab.datalab.internal.data.datasetdicterror attribute)": [[12, "cleanlab.datalab.internal.data.DatasetDictError.args"]], "args (cleanlab.datalab.internal.data.datasetloaderror attribute)": [[12, "cleanlab.datalab.internal.data.DatasetLoadError.args"]], "class_names (cleanlab.datalab.internal.data.data property)": [[12, "cleanlab.datalab.internal.data.Data.class_names"]], "class_names (cleanlab.datalab.internal.data.label property)": [[12, "cleanlab.datalab.internal.data.Label.class_names"]], "class_names (cleanlab.datalab.internal.data.multiclass property)": [[12, "cleanlab.datalab.internal.data.MultiClass.class_names"]], "class_names (cleanlab.datalab.internal.data.multilabel property)": [[12, "cleanlab.datalab.internal.data.MultiLabel.class_names"]], "cleanlab.datalab.internal.data": [[12, "module-cleanlab.datalab.internal.data"]], "has_labels (cleanlab.datalab.internal.data.data property)": [[12, "cleanlab.datalab.internal.data.Data.has_labels"]], "is_available (cleanlab.datalab.internal.data.label property)": [[12, "cleanlab.datalab.internal.data.Label.is_available"]], "is_available (cleanlab.datalab.internal.data.multiclass property)": [[12, "cleanlab.datalab.internal.data.MultiClass.is_available"]], "is_available (cleanlab.datalab.internal.data.multilabel property)": [[12, "cleanlab.datalab.internal.data.MultiLabel.is_available"]], "with_traceback() (cleanlab.datalab.internal.data.dataformaterror method)": [[12, "cleanlab.datalab.internal.data.DataFormatError.with_traceback"]], "with_traceback() (cleanlab.datalab.internal.data.datasetdicterror method)": [[12, "cleanlab.datalab.internal.data.DatasetDictError.with_traceback"]], "with_traceback() (cleanlab.datalab.internal.data.datasetloaderror method)": [[12, "cleanlab.datalab.internal.data.DatasetLoadError.with_traceback"]], "dataissues (class in cleanlab.datalab.internal.data_issues)": [[13, "cleanlab.datalab.internal.data_issues.DataIssues"]], "cleanlab.datalab.internal.data_issues": [[13, "module-cleanlab.datalab.internal.data_issues"]], "collect_issues_from_imagelab() (cleanlab.datalab.internal.data_issues.dataissues method)": [[13, "cleanlab.datalab.internal.data_issues.DataIssues.collect_issues_from_imagelab"]], "collect_issues_from_issue_manager() (cleanlab.datalab.internal.data_issues.dataissues method)": [[13, "cleanlab.datalab.internal.data_issues.DataIssues.collect_issues_from_issue_manager"]], "collect_statistics() (cleanlab.datalab.internal.data_issues.dataissues method)": [[13, "cleanlab.datalab.internal.data_issues.DataIssues.collect_statistics"]], "get_data_statistics() (in module cleanlab.datalab.internal.data_issues)": [[13, "cleanlab.datalab.internal.data_issues.get_data_statistics"]], "get_info() (cleanlab.datalab.internal.data_issues.dataissues method)": [[13, "cleanlab.datalab.internal.data_issues.DataIssues.get_info"]], "get_issue_summary() (cleanlab.datalab.internal.data_issues.dataissues method)": [[13, "cleanlab.datalab.internal.data_issues.DataIssues.get_issue_summary"]], "get_issues() (cleanlab.datalab.internal.data_issues.dataissues method)": [[13, "cleanlab.datalab.internal.data_issues.DataIssues.get_issues"]], "info (cleanlab.datalab.internal.data_issues.dataissues attribute)": [[13, "cleanlab.datalab.internal.data_issues.DataIssues.info"]], "issue_summary (cleanlab.datalab.internal.data_issues.dataissues attribute)": [[13, "cleanlab.datalab.internal.data_issues.DataIssues.issue_summary"]], "issues (cleanlab.datalab.internal.data_issues.dataissues attribute)": [[13, "cleanlab.datalab.internal.data_issues.DataIssues.issues"]], "set_health_score() (cleanlab.datalab.internal.data_issues.dataissues method)": [[13, "cleanlab.datalab.internal.data_issues.DataIssues.set_health_score"]], "statistics (cleanlab.datalab.internal.data_issues.dataissues property)": [[13, "cleanlab.datalab.internal.data_issues.DataIssues.statistics"]], "registry (in module cleanlab.datalab.internal.issue_manager_factory)": [[14, "cleanlab.datalab.internal.issue_manager_factory.REGISTRY"]], "cleanlab.datalab.internal.issue_manager_factory": [[14, "module-cleanlab.datalab.internal.issue_manager_factory"]], "list_default_issue_types() (in module cleanlab.datalab.internal.issue_manager_factory)": [[14, "cleanlab.datalab.internal.issue_manager_factory.list_default_issue_types"]], "list_possible_issue_types() (in module cleanlab.datalab.internal.issue_manager_factory)": [[14, "cleanlab.datalab.internal.issue_manager_factory.list_possible_issue_types"]], "register() (in module cleanlab.datalab.internal.issue_manager_factory)": [[14, "cleanlab.datalab.internal.issue_manager_factory.register"]], "cleanlab.datalab.internal": [[15, "module-cleanlab.datalab.internal"]], "issuefinder (class in cleanlab.datalab.internal.issue_finder)": [[16, "cleanlab.datalab.internal.issue_finder.IssueFinder"]], "cleanlab.datalab.internal.issue_finder": [[16, "module-cleanlab.datalab.internal.issue_finder"]], "find_issues() (cleanlab.datalab.internal.issue_finder.issuefinder method)": [[16, "cleanlab.datalab.internal.issue_finder.IssueFinder.find_issues"]], "get_available_issue_types() (cleanlab.datalab.internal.issue_finder.issuefinder method)": [[16, "cleanlab.datalab.internal.issue_finder.IssueFinder.get_available_issue_types"]], "default_threshold (cleanlab.datalab.internal.issue_manager.data_valuation.datavaluationissuemanager attribute)": [[18, "cleanlab.datalab.internal.issue_manager.data_valuation.DataValuationIssueManager.DEFAULT_THRESHOLD"]], "datavaluationissuemanager (class in cleanlab.datalab.internal.issue_manager.data_valuation)": [[18, "cleanlab.datalab.internal.issue_manager.data_valuation.DataValuationIssueManager"]], "cleanlab.datalab.internal.issue_manager.data_valuation": [[18, "module-cleanlab.datalab.internal.issue_manager.data_valuation"]], "collect_info() (cleanlab.datalab.internal.issue_manager.data_valuation.datavaluationissuemanager method)": [[18, "cleanlab.datalab.internal.issue_manager.data_valuation.DataValuationIssueManager.collect_info"]], "description (cleanlab.datalab.internal.issue_manager.data_valuation.datavaluationissuemanager attribute)": [[18, "cleanlab.datalab.internal.issue_manager.data_valuation.DataValuationIssueManager.description"]], "find_issues() (cleanlab.datalab.internal.issue_manager.data_valuation.datavaluationissuemanager method)": [[18, "cleanlab.datalab.internal.issue_manager.data_valuation.DataValuationIssueManager.find_issues"]], "info (cleanlab.datalab.internal.issue_manager.data_valuation.datavaluationissuemanager attribute)": [[18, "cleanlab.datalab.internal.issue_manager.data_valuation.DataValuationIssueManager.info"]], "issue_name (cleanlab.datalab.internal.issue_manager.data_valuation.datavaluationissuemanager attribute)": [[18, "cleanlab.datalab.internal.issue_manager.data_valuation.DataValuationIssueManager.issue_name"]], "issue_score_key (cleanlab.datalab.internal.issue_manager.data_valuation.datavaluationissuemanager attribute)": [[18, "cleanlab.datalab.internal.issue_manager.data_valuation.DataValuationIssueManager.issue_score_key"]], "issues (cleanlab.datalab.internal.issue_manager.data_valuation.datavaluationissuemanager attribute)": [[18, "cleanlab.datalab.internal.issue_manager.data_valuation.DataValuationIssueManager.issues"]], "make_summary() (cleanlab.datalab.internal.issue_manager.data_valuation.datavaluationissuemanager class method)": [[18, "cleanlab.datalab.internal.issue_manager.data_valuation.DataValuationIssueManager.make_summary"]], "report() (cleanlab.datalab.internal.issue_manager.data_valuation.datavaluationissuemanager class method)": [[18, "cleanlab.datalab.internal.issue_manager.data_valuation.DataValuationIssueManager.report"]], "summary (cleanlab.datalab.internal.issue_manager.data_valuation.datavaluationissuemanager attribute)": [[18, "cleanlab.datalab.internal.issue_manager.data_valuation.DataValuationIssueManager.summary"]], "verbosity_levels (cleanlab.datalab.internal.issue_manager.data_valuation.datavaluationissuemanager attribute)": [[18, "cleanlab.datalab.internal.issue_manager.data_valuation.DataValuationIssueManager.verbosity_levels"]], "nearduplicateissuemanager (class in cleanlab.datalab.internal.issue_manager.duplicate)": [[19, "cleanlab.datalab.internal.issue_manager.duplicate.NearDuplicateIssueManager"]], "cleanlab.datalab.internal.issue_manager.duplicate": [[19, "module-cleanlab.datalab.internal.issue_manager.duplicate"]], "collect_info() (cleanlab.datalab.internal.issue_manager.duplicate.nearduplicateissuemanager method)": [[19, "cleanlab.datalab.internal.issue_manager.duplicate.NearDuplicateIssueManager.collect_info"]], "description (cleanlab.datalab.internal.issue_manager.duplicate.nearduplicateissuemanager attribute)": [[19, "cleanlab.datalab.internal.issue_manager.duplicate.NearDuplicateIssueManager.description"]], "find_issues() (cleanlab.datalab.internal.issue_manager.duplicate.nearduplicateissuemanager method)": [[19, "cleanlab.datalab.internal.issue_manager.duplicate.NearDuplicateIssueManager.find_issues"]], "info (cleanlab.datalab.internal.issue_manager.duplicate.nearduplicateissuemanager attribute)": [[19, "cleanlab.datalab.internal.issue_manager.duplicate.NearDuplicateIssueManager.info"]], "issue_name (cleanlab.datalab.internal.issue_manager.duplicate.nearduplicateissuemanager attribute)": [[19, "cleanlab.datalab.internal.issue_manager.duplicate.NearDuplicateIssueManager.issue_name"]], "issue_score_key (cleanlab.datalab.internal.issue_manager.duplicate.nearduplicateissuemanager attribute)": [[19, "cleanlab.datalab.internal.issue_manager.duplicate.NearDuplicateIssueManager.issue_score_key"]], "issues (cleanlab.datalab.internal.issue_manager.duplicate.nearduplicateissuemanager attribute)": [[19, "cleanlab.datalab.internal.issue_manager.duplicate.NearDuplicateIssueManager.issues"]], "make_summary() (cleanlab.datalab.internal.issue_manager.duplicate.nearduplicateissuemanager class method)": [[19, "cleanlab.datalab.internal.issue_manager.duplicate.NearDuplicateIssueManager.make_summary"]], "near_duplicate_sets (cleanlab.datalab.internal.issue_manager.duplicate.nearduplicateissuemanager attribute)": [[19, "cleanlab.datalab.internal.issue_manager.duplicate.NearDuplicateIssueManager.near_duplicate_sets"]], "report() (cleanlab.datalab.internal.issue_manager.duplicate.nearduplicateissuemanager class method)": [[19, "cleanlab.datalab.internal.issue_manager.duplicate.NearDuplicateIssueManager.report"]], "summary (cleanlab.datalab.internal.issue_manager.duplicate.nearduplicateissuemanager attribute)": [[19, "cleanlab.datalab.internal.issue_manager.duplicate.NearDuplicateIssueManager.summary"]], "verbosity_levels (cleanlab.datalab.internal.issue_manager.duplicate.nearduplicateissuemanager attribute)": [[19, "cleanlab.datalab.internal.issue_manager.duplicate.NearDuplicateIssueManager.verbosity_levels"]], "classimbalanceissuemanager (class in cleanlab.datalab.internal.issue_manager.imbalance)": [[20, "cleanlab.datalab.internal.issue_manager.imbalance.ClassImbalanceIssueManager"]], "cleanlab.datalab.internal.issue_manager.imbalance": [[20, "module-cleanlab.datalab.internal.issue_manager.imbalance"]], "collect_info() (cleanlab.datalab.internal.issue_manager.imbalance.classimbalanceissuemanager method)": [[20, "cleanlab.datalab.internal.issue_manager.imbalance.ClassImbalanceIssueManager.collect_info"]], "description (cleanlab.datalab.internal.issue_manager.imbalance.classimbalanceissuemanager attribute)": [[20, "cleanlab.datalab.internal.issue_manager.imbalance.ClassImbalanceIssueManager.description"]], "find_issues() (cleanlab.datalab.internal.issue_manager.imbalance.classimbalanceissuemanager method)": [[20, "cleanlab.datalab.internal.issue_manager.imbalance.ClassImbalanceIssueManager.find_issues"]], "info (cleanlab.datalab.internal.issue_manager.imbalance.classimbalanceissuemanager attribute)": [[20, "cleanlab.datalab.internal.issue_manager.imbalance.ClassImbalanceIssueManager.info"]], "issue_name (cleanlab.datalab.internal.issue_manager.imbalance.classimbalanceissuemanager attribute)": [[20, "cleanlab.datalab.internal.issue_manager.imbalance.ClassImbalanceIssueManager.issue_name"]], "issue_score_key (cleanlab.datalab.internal.issue_manager.imbalance.classimbalanceissuemanager attribute)": [[20, "cleanlab.datalab.internal.issue_manager.imbalance.ClassImbalanceIssueManager.issue_score_key"]], "issues (cleanlab.datalab.internal.issue_manager.imbalance.classimbalanceissuemanager attribute)": [[20, "cleanlab.datalab.internal.issue_manager.imbalance.ClassImbalanceIssueManager.issues"]], "make_summary() (cleanlab.datalab.internal.issue_manager.imbalance.classimbalanceissuemanager class method)": [[20, "cleanlab.datalab.internal.issue_manager.imbalance.ClassImbalanceIssueManager.make_summary"]], "report() (cleanlab.datalab.internal.issue_manager.imbalance.classimbalanceissuemanager class method)": [[20, "cleanlab.datalab.internal.issue_manager.imbalance.ClassImbalanceIssueManager.report"]], "summary (cleanlab.datalab.internal.issue_manager.imbalance.classimbalanceissuemanager attribute)": [[20, "cleanlab.datalab.internal.issue_manager.imbalance.ClassImbalanceIssueManager.summary"]], "verbosity_levels (cleanlab.datalab.internal.issue_manager.imbalance.classimbalanceissuemanager attribute)": [[20, "cleanlab.datalab.internal.issue_manager.imbalance.ClassImbalanceIssueManager.verbosity_levels"]], "issuemanager (class in cleanlab.datalab.internal.issue_manager.issue_manager)": [[22, "cleanlab.datalab.internal.issue_manager.issue_manager.IssueManager"]], "cleanlab.datalab.internal.issue_manager.issue_manager": [[22, "module-cleanlab.datalab.internal.issue_manager.issue_manager"]], "collect_info() (cleanlab.datalab.internal.issue_manager.issue_manager.issuemanager method)": [[22, "cleanlab.datalab.internal.issue_manager.issue_manager.IssueManager.collect_info"]], "description (cleanlab.datalab.internal.issue_manager.issue_manager.issuemanager attribute)": [[22, "cleanlab.datalab.internal.issue_manager.issue_manager.IssueManager.description"]], "find_issues() (cleanlab.datalab.internal.issue_manager.issue_manager.issuemanager method)": [[22, "cleanlab.datalab.internal.issue_manager.issue_manager.IssueManager.find_issues"]], "info (cleanlab.datalab.internal.issue_manager.issue_manager.issuemanager attribute)": [[22, "cleanlab.datalab.internal.issue_manager.issue_manager.IssueManager.info"]], "issue_name (cleanlab.datalab.internal.issue_manager.issue_manager.issuemanager attribute)": [[22, "cleanlab.datalab.internal.issue_manager.issue_manager.IssueManager.issue_name"]], "issue_score_key (cleanlab.datalab.internal.issue_manager.issue_manager.issuemanager attribute)": [[22, "cleanlab.datalab.internal.issue_manager.issue_manager.IssueManager.issue_score_key"]], "issues (cleanlab.datalab.internal.issue_manager.issue_manager.issuemanager attribute)": [[22, "cleanlab.datalab.internal.issue_manager.issue_manager.IssueManager.issues"]], "make_summary() (cleanlab.datalab.internal.issue_manager.issue_manager.issuemanager class method)": [[22, "cleanlab.datalab.internal.issue_manager.issue_manager.IssueManager.make_summary"]], "report() (cleanlab.datalab.internal.issue_manager.issue_manager.issuemanager class method)": [[22, "cleanlab.datalab.internal.issue_manager.issue_manager.IssueManager.report"]], "summary (cleanlab.datalab.internal.issue_manager.issue_manager.issuemanager attribute)": [[22, "cleanlab.datalab.internal.issue_manager.issue_manager.IssueManager.summary"]], "verbosity_levels (cleanlab.datalab.internal.issue_manager.issue_manager.issuemanager attribute)": [[22, "cleanlab.datalab.internal.issue_manager.issue_manager.IssueManager.verbosity_levels"]], "labelissuemanager (class in cleanlab.datalab.internal.issue_manager.label)": [[23, "cleanlab.datalab.internal.issue_manager.label.LabelIssueManager"]], "cleanlab.datalab.internal.issue_manager.label": [[23, "module-cleanlab.datalab.internal.issue_manager.label"]], "collect_info() (cleanlab.datalab.internal.issue_manager.label.labelissuemanager method)": [[23, "cleanlab.datalab.internal.issue_manager.label.LabelIssueManager.collect_info"]], "description (cleanlab.datalab.internal.issue_manager.label.labelissuemanager attribute)": [[23, "cleanlab.datalab.internal.issue_manager.label.LabelIssueManager.description"]], "find_issues() (cleanlab.datalab.internal.issue_manager.label.labelissuemanager method)": [[23, "cleanlab.datalab.internal.issue_manager.label.LabelIssueManager.find_issues"]], "get_health_summary() (cleanlab.datalab.internal.issue_manager.label.labelissuemanager method)": [[23, "cleanlab.datalab.internal.issue_manager.label.LabelIssueManager.get_health_summary"]], "health_summary_parameters (cleanlab.datalab.internal.issue_manager.label.labelissuemanager attribute)": [[23, "cleanlab.datalab.internal.issue_manager.label.LabelIssueManager.health_summary_parameters"]], "info (cleanlab.datalab.internal.issue_manager.label.labelissuemanager attribute)": [[23, "cleanlab.datalab.internal.issue_manager.label.LabelIssueManager.info"]], "issue_name (cleanlab.datalab.internal.issue_manager.label.labelissuemanager attribute)": [[23, "cleanlab.datalab.internal.issue_manager.label.LabelIssueManager.issue_name"]], "issue_score_key (cleanlab.datalab.internal.issue_manager.label.labelissuemanager attribute)": [[23, "cleanlab.datalab.internal.issue_manager.label.LabelIssueManager.issue_score_key"]], "issues (cleanlab.datalab.internal.issue_manager.label.labelissuemanager attribute)": [[23, "cleanlab.datalab.internal.issue_manager.label.LabelIssueManager.issues"]], "make_summary() (cleanlab.datalab.internal.issue_manager.label.labelissuemanager class method)": [[23, "cleanlab.datalab.internal.issue_manager.label.LabelIssueManager.make_summary"]], "report() (cleanlab.datalab.internal.issue_manager.label.labelissuemanager class method)": [[23, "cleanlab.datalab.internal.issue_manager.label.LabelIssueManager.report"]], "summary (cleanlab.datalab.internal.issue_manager.label.labelissuemanager attribute)": [[23, "cleanlab.datalab.internal.issue_manager.label.LabelIssueManager.summary"]], "verbosity_levels (cleanlab.datalab.internal.issue_manager.label.labelissuemanager attribute)": [[23, "cleanlab.datalab.internal.issue_manager.label.LabelIssueManager.verbosity_levels"]], "multilabelissuemanager (class in cleanlab.datalab.internal.issue_manager.multilabel.label)": [[25, "cleanlab.datalab.internal.issue_manager.multilabel.label.MultilabelIssueManager"]], "cleanlab.datalab.internal.issue_manager.multilabel.label": [[25, "module-cleanlab.datalab.internal.issue_manager.multilabel.label"]], "collect_info() (cleanlab.datalab.internal.issue_manager.multilabel.label.multilabelissuemanager method)": [[25, "cleanlab.datalab.internal.issue_manager.multilabel.label.MultilabelIssueManager.collect_info"]], "description (cleanlab.datalab.internal.issue_manager.multilabel.label.multilabelissuemanager attribute)": [[25, "cleanlab.datalab.internal.issue_manager.multilabel.label.MultilabelIssueManager.description"]], "find_issues() (cleanlab.datalab.internal.issue_manager.multilabel.label.multilabelissuemanager method)": [[25, "cleanlab.datalab.internal.issue_manager.multilabel.label.MultilabelIssueManager.find_issues"]], "info (cleanlab.datalab.internal.issue_manager.multilabel.label.multilabelissuemanager attribute)": [[25, "cleanlab.datalab.internal.issue_manager.multilabel.label.MultilabelIssueManager.info"]], "issue_name (cleanlab.datalab.internal.issue_manager.multilabel.label.multilabelissuemanager attribute)": [[25, "cleanlab.datalab.internal.issue_manager.multilabel.label.MultilabelIssueManager.issue_name"]], "issue_score_key (cleanlab.datalab.internal.issue_manager.multilabel.label.multilabelissuemanager attribute)": [[25, "cleanlab.datalab.internal.issue_manager.multilabel.label.MultilabelIssueManager.issue_score_key"]], "issues (cleanlab.datalab.internal.issue_manager.multilabel.label.multilabelissuemanager attribute)": [[25, "cleanlab.datalab.internal.issue_manager.multilabel.label.MultilabelIssueManager.issues"]], "make_summary() (cleanlab.datalab.internal.issue_manager.multilabel.label.multilabelissuemanager class method)": [[25, "cleanlab.datalab.internal.issue_manager.multilabel.label.MultilabelIssueManager.make_summary"]], "report() (cleanlab.datalab.internal.issue_manager.multilabel.label.multilabelissuemanager class method)": [[25, "cleanlab.datalab.internal.issue_manager.multilabel.label.MultilabelIssueManager.report"]], "summary (cleanlab.datalab.internal.issue_manager.multilabel.label.multilabelissuemanager attribute)": [[25, "cleanlab.datalab.internal.issue_manager.multilabel.label.MultilabelIssueManager.summary"]], "verbosity_levels (cleanlab.datalab.internal.issue_manager.multilabel.label.multilabelissuemanager attribute)": [[25, "cleanlab.datalab.internal.issue_manager.multilabel.label.MultilabelIssueManager.verbosity_levels"]], "noniidissuemanager (class in cleanlab.datalab.internal.issue_manager.noniid)": [[26, "cleanlab.datalab.internal.issue_manager.noniid.NonIIDIssueManager"]], "cleanlab.datalab.internal.issue_manager.noniid": [[26, "module-cleanlab.datalab.internal.issue_manager.noniid"]], "collect_info() (cleanlab.datalab.internal.issue_manager.noniid.noniidissuemanager method)": [[26, "cleanlab.datalab.internal.issue_manager.noniid.NonIIDIssueManager.collect_info"]], "description (cleanlab.datalab.internal.issue_manager.noniid.noniidissuemanager attribute)": [[26, "cleanlab.datalab.internal.issue_manager.noniid.NonIIDIssueManager.description"]], "find_issues() (cleanlab.datalab.internal.issue_manager.noniid.noniidissuemanager method)": [[26, "cleanlab.datalab.internal.issue_manager.noniid.NonIIDIssueManager.find_issues"]], "info (cleanlab.datalab.internal.issue_manager.noniid.noniidissuemanager attribute)": [[26, "cleanlab.datalab.internal.issue_manager.noniid.NonIIDIssueManager.info"]], "issue_name (cleanlab.datalab.internal.issue_manager.noniid.noniidissuemanager attribute)": [[26, "cleanlab.datalab.internal.issue_manager.noniid.NonIIDIssueManager.issue_name"]], "issue_score_key (cleanlab.datalab.internal.issue_manager.noniid.noniidissuemanager attribute)": [[26, "cleanlab.datalab.internal.issue_manager.noniid.NonIIDIssueManager.issue_score_key"]], "issues (cleanlab.datalab.internal.issue_manager.noniid.noniidissuemanager attribute)": [[26, "cleanlab.datalab.internal.issue_manager.noniid.NonIIDIssueManager.issues"]], "make_summary() (cleanlab.datalab.internal.issue_manager.noniid.noniidissuemanager class method)": [[26, "cleanlab.datalab.internal.issue_manager.noniid.NonIIDIssueManager.make_summary"]], "report() (cleanlab.datalab.internal.issue_manager.noniid.noniidissuemanager class method)": [[26, "cleanlab.datalab.internal.issue_manager.noniid.NonIIDIssueManager.report"]], "simplified_kolmogorov_smirnov_test() (in module cleanlab.datalab.internal.issue_manager.noniid)": [[26, "cleanlab.datalab.internal.issue_manager.noniid.simplified_kolmogorov_smirnov_test"]], "summary (cleanlab.datalab.internal.issue_manager.noniid.noniidissuemanager attribute)": [[26, "cleanlab.datalab.internal.issue_manager.noniid.NonIIDIssueManager.summary"]], "verbosity_levels (cleanlab.datalab.internal.issue_manager.noniid.noniidissuemanager attribute)": [[26, "cleanlab.datalab.internal.issue_manager.noniid.NonIIDIssueManager.verbosity_levels"]], "nullissuemanager (class in cleanlab.datalab.internal.issue_manager.null)": [[27, "cleanlab.datalab.internal.issue_manager.null.NullIssueManager"]], "cleanlab.datalab.internal.issue_manager.null": [[27, "module-cleanlab.datalab.internal.issue_manager.null"]], "collect_info() (cleanlab.datalab.internal.issue_manager.null.nullissuemanager method)": [[27, "cleanlab.datalab.internal.issue_manager.null.NullIssueManager.collect_info"]], "description (cleanlab.datalab.internal.issue_manager.null.nullissuemanager attribute)": [[27, "cleanlab.datalab.internal.issue_manager.null.NullIssueManager.description"]], "find_issues() (cleanlab.datalab.internal.issue_manager.null.nullissuemanager method)": [[27, "cleanlab.datalab.internal.issue_manager.null.NullIssueManager.find_issues"]], "info (cleanlab.datalab.internal.issue_manager.null.nullissuemanager attribute)": [[27, "cleanlab.datalab.internal.issue_manager.null.NullIssueManager.info"]], "issue_name (cleanlab.datalab.internal.issue_manager.null.nullissuemanager attribute)": [[27, "cleanlab.datalab.internal.issue_manager.null.NullIssueManager.issue_name"]], "issue_score_key (cleanlab.datalab.internal.issue_manager.null.nullissuemanager attribute)": [[27, "cleanlab.datalab.internal.issue_manager.null.NullIssueManager.issue_score_key"]], "issues (cleanlab.datalab.internal.issue_manager.null.nullissuemanager attribute)": [[27, "cleanlab.datalab.internal.issue_manager.null.NullIssueManager.issues"]], "make_summary() (cleanlab.datalab.internal.issue_manager.null.nullissuemanager class method)": [[27, "cleanlab.datalab.internal.issue_manager.null.NullIssueManager.make_summary"]], "report() (cleanlab.datalab.internal.issue_manager.null.nullissuemanager class method)": [[27, "cleanlab.datalab.internal.issue_manager.null.NullIssueManager.report"]], "summary (cleanlab.datalab.internal.issue_manager.null.nullissuemanager attribute)": [[27, "cleanlab.datalab.internal.issue_manager.null.NullIssueManager.summary"]], "verbosity_levels (cleanlab.datalab.internal.issue_manager.null.nullissuemanager attribute)": [[27, "cleanlab.datalab.internal.issue_manager.null.NullIssueManager.verbosity_levels"]], "default_thresholds (cleanlab.datalab.internal.issue_manager.outlier.outlierissuemanager attribute)": [[28, "cleanlab.datalab.internal.issue_manager.outlier.OutlierIssueManager.DEFAULT_THRESHOLDS"]], "outlierissuemanager (class in cleanlab.datalab.internal.issue_manager.outlier)": [[28, "cleanlab.datalab.internal.issue_manager.outlier.OutlierIssueManager"]], "cleanlab.datalab.internal.issue_manager.outlier": [[28, "module-cleanlab.datalab.internal.issue_manager.outlier"]], "collect_info() (cleanlab.datalab.internal.issue_manager.outlier.outlierissuemanager method)": [[28, "cleanlab.datalab.internal.issue_manager.outlier.OutlierIssueManager.collect_info"]], "description (cleanlab.datalab.internal.issue_manager.outlier.outlierissuemanager attribute)": [[28, "cleanlab.datalab.internal.issue_manager.outlier.OutlierIssueManager.description"]], "find_issues() (cleanlab.datalab.internal.issue_manager.outlier.outlierissuemanager method)": [[28, "cleanlab.datalab.internal.issue_manager.outlier.OutlierIssueManager.find_issues"]], "info (cleanlab.datalab.internal.issue_manager.outlier.outlierissuemanager attribute)": [[28, "cleanlab.datalab.internal.issue_manager.outlier.OutlierIssueManager.info"]], "issue_name (cleanlab.datalab.internal.issue_manager.outlier.outlierissuemanager attribute)": [[28, "cleanlab.datalab.internal.issue_manager.outlier.OutlierIssueManager.issue_name"]], "issue_score_key (cleanlab.datalab.internal.issue_manager.outlier.outlierissuemanager attribute)": [[28, "cleanlab.datalab.internal.issue_manager.outlier.OutlierIssueManager.issue_score_key"]], "issues (cleanlab.datalab.internal.issue_manager.outlier.outlierissuemanager attribute)": [[28, "cleanlab.datalab.internal.issue_manager.outlier.OutlierIssueManager.issues"]], "make_summary() (cleanlab.datalab.internal.issue_manager.outlier.outlierissuemanager class method)": [[28, "cleanlab.datalab.internal.issue_manager.outlier.OutlierIssueManager.make_summary"]], "ood (cleanlab.datalab.internal.issue_manager.outlier.outlierissuemanager attribute)": [[28, "cleanlab.datalab.internal.issue_manager.outlier.OutlierIssueManager.ood"]], "report() (cleanlab.datalab.internal.issue_manager.outlier.outlierissuemanager class method)": [[28, "cleanlab.datalab.internal.issue_manager.outlier.OutlierIssueManager.report"]], "summary (cleanlab.datalab.internal.issue_manager.outlier.outlierissuemanager attribute)": [[28, "cleanlab.datalab.internal.issue_manager.outlier.OutlierIssueManager.summary"]], "verbosity_levels (cleanlab.datalab.internal.issue_manager.outlier.outlierissuemanager attribute)": [[28, "cleanlab.datalab.internal.issue_manager.outlier.OutlierIssueManager.verbosity_levels"]], "regressionlabelissuemanager (class in cleanlab.datalab.internal.issue_manager.regression.label)": [[30, "cleanlab.datalab.internal.issue_manager.regression.label.RegressionLabelIssueManager"]], "cleanlab.datalab.internal.issue_manager.regression.label": [[30, "module-cleanlab.datalab.internal.issue_manager.regression.label"]], "collect_info() (cleanlab.datalab.internal.issue_manager.regression.label.regressionlabelissuemanager method)": [[30, "cleanlab.datalab.internal.issue_manager.regression.label.RegressionLabelIssueManager.collect_info"]], "description (cleanlab.datalab.internal.issue_manager.regression.label.regressionlabelissuemanager attribute)": [[30, "cleanlab.datalab.internal.issue_manager.regression.label.RegressionLabelIssueManager.description"]], "find_issues() (cleanlab.datalab.internal.issue_manager.regression.label.regressionlabelissuemanager method)": [[30, "cleanlab.datalab.internal.issue_manager.regression.label.RegressionLabelIssueManager.find_issues"]], "find_issues_with_features() (in module cleanlab.datalab.internal.issue_manager.regression.label)": [[30, "cleanlab.datalab.internal.issue_manager.regression.label.find_issues_with_features"]], "find_issues_with_predictions() (in module cleanlab.datalab.internal.issue_manager.regression.label)": [[30, "cleanlab.datalab.internal.issue_manager.regression.label.find_issues_with_predictions"]], "info (cleanlab.datalab.internal.issue_manager.regression.label.regressionlabelissuemanager attribute)": [[30, "cleanlab.datalab.internal.issue_manager.regression.label.RegressionLabelIssueManager.info"]], "issue_name (cleanlab.datalab.internal.issue_manager.regression.label.regressionlabelissuemanager attribute)": [[30, "cleanlab.datalab.internal.issue_manager.regression.label.RegressionLabelIssueManager.issue_name"]], "issue_score_key (cleanlab.datalab.internal.issue_manager.regression.label.regressionlabelissuemanager attribute)": [[30, "cleanlab.datalab.internal.issue_manager.regression.label.RegressionLabelIssueManager.issue_score_key"]], "issues (cleanlab.datalab.internal.issue_manager.regression.label.regressionlabelissuemanager attribute)": [[30, "cleanlab.datalab.internal.issue_manager.regression.label.RegressionLabelIssueManager.issues"]], "make_summary() (cleanlab.datalab.internal.issue_manager.regression.label.regressionlabelissuemanager class method)": [[30, "cleanlab.datalab.internal.issue_manager.regression.label.RegressionLabelIssueManager.make_summary"]], "report() (cleanlab.datalab.internal.issue_manager.regression.label.regressionlabelissuemanager class method)": [[30, "cleanlab.datalab.internal.issue_manager.regression.label.RegressionLabelIssueManager.report"]], "summary (cleanlab.datalab.internal.issue_manager.regression.label.regressionlabelissuemanager attribute)": [[30, "cleanlab.datalab.internal.issue_manager.regression.label.RegressionLabelIssueManager.summary"]], "verbosity_levels (cleanlab.datalab.internal.issue_manager.regression.label.regressionlabelissuemanager attribute)": [[30, "cleanlab.datalab.internal.issue_manager.regression.label.RegressionLabelIssueManager.verbosity_levels"]], "no_underperforming_cluster_id (cleanlab.datalab.internal.issue_manager.underperforming_group.underperforminggroupissuemanager attribute)": [[31, "cleanlab.datalab.internal.issue_manager.underperforming_group.UnderperformingGroupIssueManager.NO_UNDERPERFORMING_CLUSTER_ID"]], "outlier_cluster_labels (cleanlab.datalab.internal.issue_manager.underperforming_group.underperforminggroupissuemanager attribute)": [[31, "cleanlab.datalab.internal.issue_manager.underperforming_group.UnderperformingGroupIssueManager.OUTLIER_CLUSTER_LABELS"]], "underperforminggroupissuemanager (class in cleanlab.datalab.internal.issue_manager.underperforming_group)": [[31, "cleanlab.datalab.internal.issue_manager.underperforming_group.UnderperformingGroupIssueManager"]], "cleanlab.datalab.internal.issue_manager.underperforming_group": [[31, "module-cleanlab.datalab.internal.issue_manager.underperforming_group"]], "collect_info() (cleanlab.datalab.internal.issue_manager.underperforming_group.underperforminggroupissuemanager method)": [[31, "cleanlab.datalab.internal.issue_manager.underperforming_group.UnderperformingGroupIssueManager.collect_info"]], "description (cleanlab.datalab.internal.issue_manager.underperforming_group.underperforminggroupissuemanager attribute)": [[31, "cleanlab.datalab.internal.issue_manager.underperforming_group.UnderperformingGroupIssueManager.description"]], "filter_cluster_ids() (cleanlab.datalab.internal.issue_manager.underperforming_group.underperforminggroupissuemanager method)": [[31, "cleanlab.datalab.internal.issue_manager.underperforming_group.UnderperformingGroupIssueManager.filter_cluster_ids"]], "find_issues() (cleanlab.datalab.internal.issue_manager.underperforming_group.underperforminggroupissuemanager method)": [[31, "cleanlab.datalab.internal.issue_manager.underperforming_group.UnderperformingGroupIssueManager.find_issues"]], "get_worst_cluster() (cleanlab.datalab.internal.issue_manager.underperforming_group.underperforminggroupissuemanager method)": [[31, "cleanlab.datalab.internal.issue_manager.underperforming_group.UnderperformingGroupIssueManager.get_worst_cluster"]], "info (cleanlab.datalab.internal.issue_manager.underperforming_group.underperforminggroupissuemanager attribute)": [[31, "cleanlab.datalab.internal.issue_manager.underperforming_group.UnderperformingGroupIssueManager.info"]], "issue_name (cleanlab.datalab.internal.issue_manager.underperforming_group.underperforminggroupissuemanager attribute)": [[31, "cleanlab.datalab.internal.issue_manager.underperforming_group.UnderperformingGroupIssueManager.issue_name"]], "issue_score_key (cleanlab.datalab.internal.issue_manager.underperforming_group.underperforminggroupissuemanager attribute)": [[31, "cleanlab.datalab.internal.issue_manager.underperforming_group.UnderperformingGroupIssueManager.issue_score_key"]], "issues (cleanlab.datalab.internal.issue_manager.underperforming_group.underperforminggroupissuemanager attribute)": [[31, "cleanlab.datalab.internal.issue_manager.underperforming_group.UnderperformingGroupIssueManager.issues"]], "make_summary() (cleanlab.datalab.internal.issue_manager.underperforming_group.underperforminggroupissuemanager class method)": [[31, "cleanlab.datalab.internal.issue_manager.underperforming_group.UnderperformingGroupIssueManager.make_summary"]], "perform_clustering() (cleanlab.datalab.internal.issue_manager.underperforming_group.underperforminggroupissuemanager method)": [[31, "cleanlab.datalab.internal.issue_manager.underperforming_group.UnderperformingGroupIssueManager.perform_clustering"]], "report() (cleanlab.datalab.internal.issue_manager.underperforming_group.underperforminggroupissuemanager class method)": [[31, "cleanlab.datalab.internal.issue_manager.underperforming_group.UnderperformingGroupIssueManager.report"]], "set_knn_graph() (cleanlab.datalab.internal.issue_manager.underperforming_group.underperforminggroupissuemanager method)": [[31, "cleanlab.datalab.internal.issue_manager.underperforming_group.UnderperformingGroupIssueManager.set_knn_graph"]], "summary (cleanlab.datalab.internal.issue_manager.underperforming_group.underperforminggroupissuemanager attribute)": [[31, "cleanlab.datalab.internal.issue_manager.underperforming_group.UnderperformingGroupIssueManager.summary"]], "verbosity_levels (cleanlab.datalab.internal.issue_manager.underperforming_group.underperforminggroupissuemanager attribute)": [[31, "cleanlab.datalab.internal.issue_manager.underperforming_group.UnderperformingGroupIssueManager.verbosity_levels"]], "modeloutput (class in cleanlab.datalab.internal.model_outputs)": [[32, "cleanlab.datalab.internal.model_outputs.ModelOutput"]], "multiclasspredprobs (class in cleanlab.datalab.internal.model_outputs)": [[32, "cleanlab.datalab.internal.model_outputs.MultiClassPredProbs"]], "multilabelpredprobs (class in cleanlab.datalab.internal.model_outputs)": [[32, "cleanlab.datalab.internal.model_outputs.MultiLabelPredProbs"]], "regressionpredictions (class in cleanlab.datalab.internal.model_outputs)": [[32, "cleanlab.datalab.internal.model_outputs.RegressionPredictions"]], "argument (cleanlab.datalab.internal.model_outputs.multiclasspredprobs attribute)": [[32, "cleanlab.datalab.internal.model_outputs.MultiClassPredProbs.argument"]], "argument (cleanlab.datalab.internal.model_outputs.multilabelpredprobs attribute)": [[32, "cleanlab.datalab.internal.model_outputs.MultiLabelPredProbs.argument"]], "argument (cleanlab.datalab.internal.model_outputs.regressionpredictions attribute)": [[32, "cleanlab.datalab.internal.model_outputs.RegressionPredictions.argument"]], "cleanlab.datalab.internal.model_outputs": [[32, "module-cleanlab.datalab.internal.model_outputs"]], "collect() (cleanlab.datalab.internal.model_outputs.modeloutput method)": [[32, "cleanlab.datalab.internal.model_outputs.ModelOutput.collect"]], "collect() (cleanlab.datalab.internal.model_outputs.multiclasspredprobs method)": [[32, "cleanlab.datalab.internal.model_outputs.MultiClassPredProbs.collect"]], "collect() (cleanlab.datalab.internal.model_outputs.multilabelpredprobs method)": [[32, "cleanlab.datalab.internal.model_outputs.MultiLabelPredProbs.collect"]], "collect() (cleanlab.datalab.internal.model_outputs.regressionpredictions method)": [[32, "cleanlab.datalab.internal.model_outputs.RegressionPredictions.collect"]], "data (cleanlab.datalab.internal.model_outputs.modeloutput attribute)": [[32, "cleanlab.datalab.internal.model_outputs.ModelOutput.data"]], "data (cleanlab.datalab.internal.model_outputs.multiclasspredprobs attribute)": [[32, "cleanlab.datalab.internal.model_outputs.MultiClassPredProbs.data"]], "data (cleanlab.datalab.internal.model_outputs.multilabelpredprobs attribute)": [[32, "cleanlab.datalab.internal.model_outputs.MultiLabelPredProbs.data"]], "data (cleanlab.datalab.internal.model_outputs.regressionpredictions attribute)": [[32, "cleanlab.datalab.internal.model_outputs.RegressionPredictions.data"]], "validate() (cleanlab.datalab.internal.model_outputs.modeloutput method)": [[32, "cleanlab.datalab.internal.model_outputs.ModelOutput.validate"]], "validate() (cleanlab.datalab.internal.model_outputs.multiclasspredprobs method)": [[32, "cleanlab.datalab.internal.model_outputs.MultiClassPredProbs.validate"]], "validate() (cleanlab.datalab.internal.model_outputs.multilabelpredprobs method)": [[32, "cleanlab.datalab.internal.model_outputs.MultiLabelPredProbs.validate"]], "validate() (cleanlab.datalab.internal.model_outputs.regressionpredictions method)": [[32, "cleanlab.datalab.internal.model_outputs.RegressionPredictions.validate"]], "reporter (class in cleanlab.datalab.internal.report)": [[33, "cleanlab.datalab.internal.report.Reporter"]], "cleanlab.datalab.internal.report": [[33, "module-cleanlab.datalab.internal.report"]], "get_report() (cleanlab.datalab.internal.report.reporter method)": [[33, "cleanlab.datalab.internal.report.Reporter.get_report"]], "report() (cleanlab.datalab.internal.report.reporter method)": [[33, "cleanlab.datalab.internal.report.Reporter.report"]], "classification (cleanlab.datalab.internal.task.task attribute)": [[34, "cleanlab.datalab.internal.task.Task.CLASSIFICATION"]], "multilabel (cleanlab.datalab.internal.task.task attribute)": [[34, "cleanlab.datalab.internal.task.Task.MULTILABEL"]], "regression (cleanlab.datalab.internal.task.task attribute)": [[34, "cleanlab.datalab.internal.task.Task.REGRESSION"]], "task (class in cleanlab.datalab.internal.task)": [[34, "cleanlab.datalab.internal.task.Task"]], "__contains__() (cleanlab.datalab.internal.task.task class method)": [[34, "cleanlab.datalab.internal.task.Task.__contains__"]], "__getitem__() (cleanlab.datalab.internal.task.task class method)": [[34, "cleanlab.datalab.internal.task.Task.__getitem__"]], "__iter__() (cleanlab.datalab.internal.task.task class method)": [[34, "cleanlab.datalab.internal.task.Task.__iter__"]], "__len__() (cleanlab.datalab.internal.task.task class method)": [[34, "cleanlab.datalab.internal.task.Task.__len__"]], "cleanlab.datalab.internal.task": [[34, "module-cleanlab.datalab.internal.task"]], "from_str() (cleanlab.datalab.internal.task.task class method)": [[34, "cleanlab.datalab.internal.task.Task.from_str"]], "is_classification (cleanlab.datalab.internal.task.task property)": [[34, "cleanlab.datalab.internal.task.Task.is_classification"]], "is_multilabel (cleanlab.datalab.internal.task.task property)": [[34, "cleanlab.datalab.internal.task.Task.is_multilabel"]], "is_regression (cleanlab.datalab.internal.task.task property)": [[34, "cleanlab.datalab.internal.task.Task.is_regression"]], "cleanlab.dataset": [[36, "module-cleanlab.dataset"]], "find_overlapping_classes() (in module cleanlab.dataset)": [[36, "cleanlab.dataset.find_overlapping_classes"]], "health_summary() (in module cleanlab.dataset)": [[36, "cleanlab.dataset.health_summary"]], "overall_label_health_score() (in module cleanlab.dataset)": [[36, "cleanlab.dataset.overall_label_health_score"]], "rank_classes_by_label_quality() (in module cleanlab.dataset)": [[36, "cleanlab.dataset.rank_classes_by_label_quality"]], "cnn (class in cleanlab.experimental.cifar_cnn)": [[37, "cleanlab.experimental.cifar_cnn.CNN"]], "t_destination (cleanlab.experimental.cifar_cnn.cnn attribute)": [[37, "cleanlab.experimental.cifar_cnn.CNN.T_destination"]], "__call__() (cleanlab.experimental.cifar_cnn.cnn method)": [[37, "cleanlab.experimental.cifar_cnn.CNN.__call__"]], "add_module() (cleanlab.experimental.cifar_cnn.cnn method)": [[37, "cleanlab.experimental.cifar_cnn.CNN.add_module"]], "apply() (cleanlab.experimental.cifar_cnn.cnn method)": [[37, "cleanlab.experimental.cifar_cnn.CNN.apply"]], "bfloat16() (cleanlab.experimental.cifar_cnn.cnn method)": [[37, "cleanlab.experimental.cifar_cnn.CNN.bfloat16"]], "buffers() (cleanlab.experimental.cifar_cnn.cnn method)": [[37, "cleanlab.experimental.cifar_cnn.CNN.buffers"]], "call_bn() (in module cleanlab.experimental.cifar_cnn)": [[37, "cleanlab.experimental.cifar_cnn.call_bn"]], "call_super_init (cleanlab.experimental.cifar_cnn.cnn attribute)": [[37, "cleanlab.experimental.cifar_cnn.CNN.call_super_init"]], "children() (cleanlab.experimental.cifar_cnn.cnn method)": [[37, "cleanlab.experimental.cifar_cnn.CNN.children"]], "cleanlab.experimental.cifar_cnn": [[37, "module-cleanlab.experimental.cifar_cnn"]], "compile() (cleanlab.experimental.cifar_cnn.cnn method)": [[37, "cleanlab.experimental.cifar_cnn.CNN.compile"]], "cpu() (cleanlab.experimental.cifar_cnn.cnn method)": [[37, "cleanlab.experimental.cifar_cnn.CNN.cpu"]], "cuda() (cleanlab.experimental.cifar_cnn.cnn method)": [[37, "cleanlab.experimental.cifar_cnn.CNN.cuda"]], "double() (cleanlab.experimental.cifar_cnn.cnn method)": [[37, "cleanlab.experimental.cifar_cnn.CNN.double"]], "dump_patches (cleanlab.experimental.cifar_cnn.cnn attribute)": [[37, "cleanlab.experimental.cifar_cnn.CNN.dump_patches"]], "eval() (cleanlab.experimental.cifar_cnn.cnn method)": [[37, "cleanlab.experimental.cifar_cnn.CNN.eval"]], "extra_repr() (cleanlab.experimental.cifar_cnn.cnn method)": [[37, "cleanlab.experimental.cifar_cnn.CNN.extra_repr"]], "float() (cleanlab.experimental.cifar_cnn.cnn method)": [[37, "cleanlab.experimental.cifar_cnn.CNN.float"]], "forward() (cleanlab.experimental.cifar_cnn.cnn method)": [[37, "cleanlab.experimental.cifar_cnn.CNN.forward"], [37, "id0"]], "get_buffer() (cleanlab.experimental.cifar_cnn.cnn method)": [[37, "cleanlab.experimental.cifar_cnn.CNN.get_buffer"]], "get_extra_state() (cleanlab.experimental.cifar_cnn.cnn method)": [[37, "cleanlab.experimental.cifar_cnn.CNN.get_extra_state"]], "get_parameter() (cleanlab.experimental.cifar_cnn.cnn method)": [[37, "cleanlab.experimental.cifar_cnn.CNN.get_parameter"]], "get_submodule() (cleanlab.experimental.cifar_cnn.cnn method)": [[37, "cleanlab.experimental.cifar_cnn.CNN.get_submodule"]], "half() (cleanlab.experimental.cifar_cnn.cnn method)": [[37, "cleanlab.experimental.cifar_cnn.CNN.half"]], "ipu() (cleanlab.experimental.cifar_cnn.cnn method)": [[37, "cleanlab.experimental.cifar_cnn.CNN.ipu"]], "load_state_dict() (cleanlab.experimental.cifar_cnn.cnn method)": [[37, "cleanlab.experimental.cifar_cnn.CNN.load_state_dict"]], "modules() (cleanlab.experimental.cifar_cnn.cnn method)": [[37, "cleanlab.experimental.cifar_cnn.CNN.modules"]], "named_buffers() (cleanlab.experimental.cifar_cnn.cnn method)": [[37, "cleanlab.experimental.cifar_cnn.CNN.named_buffers"]], "named_children() (cleanlab.experimental.cifar_cnn.cnn method)": [[37, "cleanlab.experimental.cifar_cnn.CNN.named_children"]], "named_modules() (cleanlab.experimental.cifar_cnn.cnn method)": [[37, "cleanlab.experimental.cifar_cnn.CNN.named_modules"]], "named_parameters() (cleanlab.experimental.cifar_cnn.cnn method)": [[37, "cleanlab.experimental.cifar_cnn.CNN.named_parameters"]], "parameters() (cleanlab.experimental.cifar_cnn.cnn method)": [[37, "cleanlab.experimental.cifar_cnn.CNN.parameters"]], "register_backward_hook() (cleanlab.experimental.cifar_cnn.cnn method)": [[37, "cleanlab.experimental.cifar_cnn.CNN.register_backward_hook"]], "register_buffer() (cleanlab.experimental.cifar_cnn.cnn method)": [[37, "cleanlab.experimental.cifar_cnn.CNN.register_buffer"]], "register_forward_hook() (cleanlab.experimental.cifar_cnn.cnn method)": [[37, "cleanlab.experimental.cifar_cnn.CNN.register_forward_hook"]], "register_forward_pre_hook() (cleanlab.experimental.cifar_cnn.cnn method)": [[37, "cleanlab.experimental.cifar_cnn.CNN.register_forward_pre_hook"]], "register_full_backward_hook() (cleanlab.experimental.cifar_cnn.cnn method)": [[37, "cleanlab.experimental.cifar_cnn.CNN.register_full_backward_hook"]], "register_full_backward_pre_hook() (cleanlab.experimental.cifar_cnn.cnn method)": [[37, "cleanlab.experimental.cifar_cnn.CNN.register_full_backward_pre_hook"]], "register_load_state_dict_post_hook() (cleanlab.experimental.cifar_cnn.cnn method)": [[37, "cleanlab.experimental.cifar_cnn.CNN.register_load_state_dict_post_hook"]], "register_module() (cleanlab.experimental.cifar_cnn.cnn method)": [[37, "cleanlab.experimental.cifar_cnn.CNN.register_module"]], "register_parameter() (cleanlab.experimental.cifar_cnn.cnn method)": [[37, "cleanlab.experimental.cifar_cnn.CNN.register_parameter"]], "register_state_dict_pre_hook() (cleanlab.experimental.cifar_cnn.cnn method)": [[37, "cleanlab.experimental.cifar_cnn.CNN.register_state_dict_pre_hook"]], "requires_grad_() (cleanlab.experimental.cifar_cnn.cnn method)": [[37, "cleanlab.experimental.cifar_cnn.CNN.requires_grad_"]], "set_extra_state() (cleanlab.experimental.cifar_cnn.cnn method)": [[37, "cleanlab.experimental.cifar_cnn.CNN.set_extra_state"]], "share_memory() (cleanlab.experimental.cifar_cnn.cnn method)": [[37, "cleanlab.experimental.cifar_cnn.CNN.share_memory"]], "state_dict() (cleanlab.experimental.cifar_cnn.cnn method)": [[37, "cleanlab.experimental.cifar_cnn.CNN.state_dict"]], "to() (cleanlab.experimental.cifar_cnn.cnn method)": [[37, "cleanlab.experimental.cifar_cnn.CNN.to"]], "to_empty() (cleanlab.experimental.cifar_cnn.cnn method)": [[37, "cleanlab.experimental.cifar_cnn.CNN.to_empty"]], "train() (cleanlab.experimental.cifar_cnn.cnn method)": [[37, "cleanlab.experimental.cifar_cnn.CNN.train"]], "training (cleanlab.experimental.cifar_cnn.cnn attribute)": [[37, "cleanlab.experimental.cifar_cnn.CNN.training"]], "type() (cleanlab.experimental.cifar_cnn.cnn method)": [[37, "cleanlab.experimental.cifar_cnn.CNN.type"]], "xpu() (cleanlab.experimental.cifar_cnn.cnn method)": [[37, "cleanlab.experimental.cifar_cnn.CNN.xpu"]], "zero_grad() (cleanlab.experimental.cifar_cnn.cnn method)": [[37, "cleanlab.experimental.cifar_cnn.CNN.zero_grad"]], "adjust_learning_rate() (in module cleanlab.experimental.coteaching)": [[38, "cleanlab.experimental.coteaching.adjust_learning_rate"]], "cleanlab.experimental.coteaching": [[38, "module-cleanlab.experimental.coteaching"]], "evaluate() (in module cleanlab.experimental.coteaching)": [[38, "cleanlab.experimental.coteaching.evaluate"]], "forget_rate_scheduler() (in module cleanlab.experimental.coteaching)": [[38, "cleanlab.experimental.coteaching.forget_rate_scheduler"]], "initialize_lr_scheduler() (in module cleanlab.experimental.coteaching)": [[38, "cleanlab.experimental.coteaching.initialize_lr_scheduler"]], "loss_coteaching() (in module cleanlab.experimental.coteaching)": [[38, "cleanlab.experimental.coteaching.loss_coteaching"]], "train() (in module cleanlab.experimental.coteaching)": [[38, "cleanlab.experimental.coteaching.train"]], "cleanlab.experimental": [[39, "module-cleanlab.experimental"]], "labelinspector (class in cleanlab.experimental.label_issues_batched)": [[40, "cleanlab.experimental.label_issues_batched.LabelInspector"]], "adj_confident_thresholds_shared (in module cleanlab.experimental.label_issues_batched)": [[40, "cleanlab.experimental.label_issues_batched.adj_confident_thresholds_shared"]], "cleanlab.experimental.label_issues_batched": [[40, "module-cleanlab.experimental.label_issues_batched"]], "find_label_issues_batched() (in module cleanlab.experimental.label_issues_batched)": [[40, "cleanlab.experimental.label_issues_batched.find_label_issues_batched"]], "get_confident_thresholds() (cleanlab.experimental.label_issues_batched.labelinspector method)": [[40, "cleanlab.experimental.label_issues_batched.LabelInspector.get_confident_thresholds"]], "get_label_issues() (cleanlab.experimental.label_issues_batched.labelinspector method)": [[40, "cleanlab.experimental.label_issues_batched.LabelInspector.get_label_issues"]], "get_num_issues() (cleanlab.experimental.label_issues_batched.labelinspector method)": [[40, "cleanlab.experimental.label_issues_batched.LabelInspector.get_num_issues"]], "get_quality_scores() (cleanlab.experimental.label_issues_batched.labelinspector method)": [[40, "cleanlab.experimental.label_issues_batched.LabelInspector.get_quality_scores"]], "labels_shared (in module cleanlab.experimental.label_issues_batched)": [[40, "cleanlab.experimental.label_issues_batched.labels_shared"]], "pred_probs_shared (in module cleanlab.experimental.label_issues_batched)": [[40, "cleanlab.experimental.label_issues_batched.pred_probs_shared"]], "score_label_quality() (cleanlab.experimental.label_issues_batched.labelinspector method)": [[40, "cleanlab.experimental.label_issues_batched.LabelInspector.score_label_quality"]], "split_arr() (in module cleanlab.experimental.label_issues_batched)": [[40, "cleanlab.experimental.label_issues_batched.split_arr"]], "update_confident_thresholds() (cleanlab.experimental.label_issues_batched.labelinspector method)": [[40, "cleanlab.experimental.label_issues_batched.LabelInspector.update_confident_thresholds"]], "cnn (class in cleanlab.experimental.mnist_pytorch)": [[41, "cleanlab.experimental.mnist_pytorch.CNN"]], "simplenet (class in cleanlab.experimental.mnist_pytorch)": [[41, "cleanlab.experimental.mnist_pytorch.SimpleNet"]], "t_destination (cleanlab.experimental.mnist_pytorch.simplenet attribute)": [[41, "cleanlab.experimental.mnist_pytorch.SimpleNet.T_destination"]], "__call__() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[41, "cleanlab.experimental.mnist_pytorch.SimpleNet.__call__"]], "__init_subclass__() (cleanlab.experimental.mnist_pytorch.cnn class method)": [[41, "cleanlab.experimental.mnist_pytorch.CNN.__init_subclass__"]], "add_module() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[41, "cleanlab.experimental.mnist_pytorch.SimpleNet.add_module"]], "apply() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[41, "cleanlab.experimental.mnist_pytorch.SimpleNet.apply"]], "batch_size (cleanlab.experimental.mnist_pytorch.cnn attribute)": [[41, "cleanlab.experimental.mnist_pytorch.CNN.batch_size"]], "bfloat16() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[41, "cleanlab.experimental.mnist_pytorch.SimpleNet.bfloat16"]], "buffers() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[41, "cleanlab.experimental.mnist_pytorch.SimpleNet.buffers"]], "call_super_init (cleanlab.experimental.mnist_pytorch.simplenet attribute)": [[41, "cleanlab.experimental.mnist_pytorch.SimpleNet.call_super_init"]], "children() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[41, "cleanlab.experimental.mnist_pytorch.SimpleNet.children"]], "cleanlab.experimental.mnist_pytorch": [[41, "module-cleanlab.experimental.mnist_pytorch"]], "compile() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[41, "cleanlab.experimental.mnist_pytorch.SimpleNet.compile"]], "cpu() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[41, "cleanlab.experimental.mnist_pytorch.SimpleNet.cpu"]], "cuda() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[41, "cleanlab.experimental.mnist_pytorch.SimpleNet.cuda"]], "dataset (cleanlab.experimental.mnist_pytorch.cnn attribute)": [[41, "cleanlab.experimental.mnist_pytorch.CNN.dataset"]], "double() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[41, "cleanlab.experimental.mnist_pytorch.SimpleNet.double"]], "dump_patches (cleanlab.experimental.mnist_pytorch.simplenet attribute)": [[41, "cleanlab.experimental.mnist_pytorch.SimpleNet.dump_patches"]], "epochs (cleanlab.experimental.mnist_pytorch.cnn attribute)": [[41, "cleanlab.experimental.mnist_pytorch.CNN.epochs"]], "eval() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[41, "cleanlab.experimental.mnist_pytorch.SimpleNet.eval"]], "extra_repr() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[41, "cleanlab.experimental.mnist_pytorch.SimpleNet.extra_repr"]], "fit() (cleanlab.experimental.mnist_pytorch.cnn method)": [[41, "cleanlab.experimental.mnist_pytorch.CNN.fit"], [41, "id0"]], "float() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[41, "cleanlab.experimental.mnist_pytorch.SimpleNet.float"]], "forward() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[41, "cleanlab.experimental.mnist_pytorch.SimpleNet.forward"]], "get_buffer() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[41, "cleanlab.experimental.mnist_pytorch.SimpleNet.get_buffer"]], "get_extra_state() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[41, "cleanlab.experimental.mnist_pytorch.SimpleNet.get_extra_state"]], "get_metadata_routing() (cleanlab.experimental.mnist_pytorch.cnn method)": [[41, "cleanlab.experimental.mnist_pytorch.CNN.get_metadata_routing"]], "get_mnist_dataset() (in module cleanlab.experimental.mnist_pytorch)": [[41, "cleanlab.experimental.mnist_pytorch.get_mnist_dataset"]], "get_parameter() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[41, "cleanlab.experimental.mnist_pytorch.SimpleNet.get_parameter"]], "get_params() (cleanlab.experimental.mnist_pytorch.cnn method)": [[41, "cleanlab.experimental.mnist_pytorch.CNN.get_params"]], "get_sklearn_digits_dataset() (in module cleanlab.experimental.mnist_pytorch)": [[41, "cleanlab.experimental.mnist_pytorch.get_sklearn_digits_dataset"]], "get_submodule() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[41, "cleanlab.experimental.mnist_pytorch.SimpleNet.get_submodule"]], "half() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[41, "cleanlab.experimental.mnist_pytorch.SimpleNet.half"]], "ipu() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[41, "cleanlab.experimental.mnist_pytorch.SimpleNet.ipu"]], "load_state_dict() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[41, "cleanlab.experimental.mnist_pytorch.SimpleNet.load_state_dict"]], "loader (cleanlab.experimental.mnist_pytorch.cnn attribute)": [[41, "cleanlab.experimental.mnist_pytorch.CNN.loader"]], "log_interval (cleanlab.experimental.mnist_pytorch.cnn attribute)": [[41, "cleanlab.experimental.mnist_pytorch.CNN.log_interval"]], "lr (cleanlab.experimental.mnist_pytorch.cnn attribute)": [[41, "cleanlab.experimental.mnist_pytorch.CNN.lr"]], "modules() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[41, "cleanlab.experimental.mnist_pytorch.SimpleNet.modules"]], "momentum (cleanlab.experimental.mnist_pytorch.cnn attribute)": [[41, "cleanlab.experimental.mnist_pytorch.CNN.momentum"]], "named_buffers() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[41, "cleanlab.experimental.mnist_pytorch.SimpleNet.named_buffers"]], "named_children() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[41, "cleanlab.experimental.mnist_pytorch.SimpleNet.named_children"]], "named_modules() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[41, "cleanlab.experimental.mnist_pytorch.SimpleNet.named_modules"]], "named_parameters() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[41, "cleanlab.experimental.mnist_pytorch.SimpleNet.named_parameters"]], "no_cuda (cleanlab.experimental.mnist_pytorch.cnn attribute)": [[41, "cleanlab.experimental.mnist_pytorch.CNN.no_cuda"]], "parameters() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[41, "cleanlab.experimental.mnist_pytorch.SimpleNet.parameters"]], "predict() (cleanlab.experimental.mnist_pytorch.cnn method)": [[41, "cleanlab.experimental.mnist_pytorch.CNN.predict"], [41, "id1"]], "predict_proba() (cleanlab.experimental.mnist_pytorch.cnn method)": [[41, "cleanlab.experimental.mnist_pytorch.CNN.predict_proba"], [41, "id4"]], "register_backward_hook() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[41, "cleanlab.experimental.mnist_pytorch.SimpleNet.register_backward_hook"]], "register_buffer() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[41, "cleanlab.experimental.mnist_pytorch.SimpleNet.register_buffer"]], "register_forward_hook() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[41, "cleanlab.experimental.mnist_pytorch.SimpleNet.register_forward_hook"]], "register_forward_pre_hook() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[41, "cleanlab.experimental.mnist_pytorch.SimpleNet.register_forward_pre_hook"]], "register_full_backward_hook() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[41, "cleanlab.experimental.mnist_pytorch.SimpleNet.register_full_backward_hook"]], "register_full_backward_pre_hook() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[41, "cleanlab.experimental.mnist_pytorch.SimpleNet.register_full_backward_pre_hook"]], "register_load_state_dict_post_hook() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[41, "cleanlab.experimental.mnist_pytorch.SimpleNet.register_load_state_dict_post_hook"]], "register_module() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[41, "cleanlab.experimental.mnist_pytorch.SimpleNet.register_module"]], "register_parameter() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[41, "cleanlab.experimental.mnist_pytorch.SimpleNet.register_parameter"]], "register_state_dict_pre_hook() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[41, "cleanlab.experimental.mnist_pytorch.SimpleNet.register_state_dict_pre_hook"]], "requires_grad_() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[41, "cleanlab.experimental.mnist_pytorch.SimpleNet.requires_grad_"]], "seed (cleanlab.experimental.mnist_pytorch.cnn attribute)": [[41, "cleanlab.experimental.mnist_pytorch.CNN.seed"]], "set_extra_state() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[41, "cleanlab.experimental.mnist_pytorch.SimpleNet.set_extra_state"]], "set_fit_request() (cleanlab.experimental.mnist_pytorch.cnn method)": [[41, "cleanlab.experimental.mnist_pytorch.CNN.set_fit_request"]], "set_params() (cleanlab.experimental.mnist_pytorch.cnn method)": [[41, "cleanlab.experimental.mnist_pytorch.CNN.set_params"]], "set_predict_proba_request() (cleanlab.experimental.mnist_pytorch.cnn method)": [[41, "cleanlab.experimental.mnist_pytorch.CNN.set_predict_proba_request"]], "set_predict_request() (cleanlab.experimental.mnist_pytorch.cnn method)": [[41, "cleanlab.experimental.mnist_pytorch.CNN.set_predict_request"]], "share_memory() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[41, "cleanlab.experimental.mnist_pytorch.SimpleNet.share_memory"]], "state_dict() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[41, "cleanlab.experimental.mnist_pytorch.SimpleNet.state_dict"]], "test_batch_size (cleanlab.experimental.mnist_pytorch.cnn attribute)": [[41, "cleanlab.experimental.mnist_pytorch.CNN.test_batch_size"]], "to() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[41, "cleanlab.experimental.mnist_pytorch.SimpleNet.to"]], "to_empty() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[41, "cleanlab.experimental.mnist_pytorch.SimpleNet.to_empty"]], "train() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[41, "cleanlab.experimental.mnist_pytorch.SimpleNet.train"]], "training (cleanlab.experimental.mnist_pytorch.simplenet attribute)": [[41, "cleanlab.experimental.mnist_pytorch.SimpleNet.training"]], "type() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[41, "cleanlab.experimental.mnist_pytorch.SimpleNet.type"]], "xpu() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[41, "cleanlab.experimental.mnist_pytorch.SimpleNet.xpu"]], "zero_grad() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[41, "cleanlab.experimental.mnist_pytorch.SimpleNet.zero_grad"]], "cleanlab.experimental.span_classification": [[42, "module-cleanlab.experimental.span_classification"]], "display_issues() (in module cleanlab.experimental.span_classification)": [[42, "cleanlab.experimental.span_classification.display_issues"]], "find_label_issues() (in module cleanlab.experimental.span_classification)": [[42, "cleanlab.experimental.span_classification.find_label_issues"]], "get_label_quality_scores() (in module cleanlab.experimental.span_classification)": [[42, "cleanlab.experimental.span_classification.get_label_quality_scores"]], "cleanlab.filter": [[43, "module-cleanlab.filter"]], "find_label_issues() (in module cleanlab.filter)": [[43, "cleanlab.filter.find_label_issues"]], "find_label_issues_using_argmax_confusion_matrix() (in module cleanlab.filter)": [[43, "cleanlab.filter.find_label_issues_using_argmax_confusion_matrix"]], "find_predicted_neq_given() (in module cleanlab.filter)": [[43, "cleanlab.filter.find_predicted_neq_given"]], "pred_probs_by_class (in module cleanlab.filter)": [[43, "cleanlab.filter.pred_probs_by_class"]], "prune_count_matrix_cols (in module cleanlab.filter)": [[43, "cleanlab.filter.prune_count_matrix_cols"]], "cleanlab.internal": [[44, "module-cleanlab.internal"]], "cleanlab.internal.label_quality_utils": [[45, "module-cleanlab.internal.label_quality_utils"]], "get_normalized_entropy() (in module cleanlab.internal.label_quality_utils)": [[45, "cleanlab.internal.label_quality_utils.get_normalized_entropy"]], "cleanlab.internal.latent_algebra": [[46, "module-cleanlab.internal.latent_algebra"]], "compute_inv_noise_matrix() (in module cleanlab.internal.latent_algebra)": [[46, "cleanlab.internal.latent_algebra.compute_inv_noise_matrix"]], "compute_noise_matrix_from_inverse() (in module cleanlab.internal.latent_algebra)": [[46, "cleanlab.internal.latent_algebra.compute_noise_matrix_from_inverse"]], "compute_ps_py_inv_noise_matrix() (in module cleanlab.internal.latent_algebra)": [[46, "cleanlab.internal.latent_algebra.compute_ps_py_inv_noise_matrix"]], "compute_py() (in module cleanlab.internal.latent_algebra)": [[46, "cleanlab.internal.latent_algebra.compute_py"]], "compute_py_inv_noise_matrix() (in module cleanlab.internal.latent_algebra)": [[46, "cleanlab.internal.latent_algebra.compute_py_inv_noise_matrix"]], "compute_pyx() (in module cleanlab.internal.latent_algebra)": [[46, "cleanlab.internal.latent_algebra.compute_pyx"]], "assert_valid_inputs_multiannotator() (in module cleanlab.internal.multiannotator_utils)": [[47, "cleanlab.internal.multiannotator_utils.assert_valid_inputs_multiannotator"]], "assert_valid_pred_probs() (in module cleanlab.internal.multiannotator_utils)": [[47, "cleanlab.internal.multiannotator_utils.assert_valid_pred_probs"]], "check_consensus_label_classes() (in module cleanlab.internal.multiannotator_utils)": [[47, "cleanlab.internal.multiannotator_utils.check_consensus_label_classes"]], "cleanlab.internal.multiannotator_utils": [[47, "module-cleanlab.internal.multiannotator_utils"]], "compute_soft_cross_entropy() (in module cleanlab.internal.multiannotator_utils)": [[47, "cleanlab.internal.multiannotator_utils.compute_soft_cross_entropy"]], "find_best_temp_scaler() (in module cleanlab.internal.multiannotator_utils)": [[47, "cleanlab.internal.multiannotator_utils.find_best_temp_scaler"]], "format_multiannotator_labels() (in module cleanlab.internal.multiannotator_utils)": [[47, "cleanlab.internal.multiannotator_utils.format_multiannotator_labels"]], "temp_scale_pred_probs() (in module cleanlab.internal.multiannotator_utils)": [[47, "cleanlab.internal.multiannotator_utils.temp_scale_pred_probs"]], "aggregator (class in cleanlab.internal.multilabel_scorer)": [[48, "cleanlab.internal.multilabel_scorer.Aggregator"]], "confidence_weighted_entropy (cleanlab.internal.multilabel_scorer.classlabelscorer attribute)": [[48, "cleanlab.internal.multilabel_scorer.ClassLabelScorer.CONFIDENCE_WEIGHTED_ENTROPY"]], "classlabelscorer (class in cleanlab.internal.multilabel_scorer)": [[48, "cleanlab.internal.multilabel_scorer.ClassLabelScorer"]], "multilabelscorer (class in cleanlab.internal.multilabel_scorer)": [[48, "cleanlab.internal.multilabel_scorer.MultilabelScorer"]], "normalized_margin (cleanlab.internal.multilabel_scorer.classlabelscorer attribute)": [[48, "cleanlab.internal.multilabel_scorer.ClassLabelScorer.NORMALIZED_MARGIN"]], "self_confidence (cleanlab.internal.multilabel_scorer.classlabelscorer attribute)": [[48, "cleanlab.internal.multilabel_scorer.ClassLabelScorer.SELF_CONFIDENCE"]], "__call__() (cleanlab.internal.multilabel_scorer.aggregator method)": [[48, "cleanlab.internal.multilabel_scorer.Aggregator.__call__"]], "__call__() (cleanlab.internal.multilabel_scorer.classlabelscorer method)": [[48, "cleanlab.internal.multilabel_scorer.ClassLabelScorer.__call__"]], "__call__() (cleanlab.internal.multilabel_scorer.multilabelscorer method)": [[48, "cleanlab.internal.multilabel_scorer.MultilabelScorer.__call__"]], "__contains__() (cleanlab.internal.multilabel_scorer.classlabelscorer class method)": [[48, "cleanlab.internal.multilabel_scorer.ClassLabelScorer.__contains__"]], "__getitem__() (cleanlab.internal.multilabel_scorer.classlabelscorer class method)": [[48, "cleanlab.internal.multilabel_scorer.ClassLabelScorer.__getitem__"]], "__iter__() (cleanlab.internal.multilabel_scorer.classlabelscorer class method)": [[48, "cleanlab.internal.multilabel_scorer.ClassLabelScorer.__iter__"]], "__len__() (cleanlab.internal.multilabel_scorer.classlabelscorer class method)": [[48, "cleanlab.internal.multilabel_scorer.ClassLabelScorer.__len__"]], "aggregate() (cleanlab.internal.multilabel_scorer.multilabelscorer method)": [[48, "cleanlab.internal.multilabel_scorer.MultilabelScorer.aggregate"]], "cleanlab.internal.multilabel_scorer": [[48, "module-cleanlab.internal.multilabel_scorer"]], "exponential_moving_average() (in module cleanlab.internal.multilabel_scorer)": [[48, "cleanlab.internal.multilabel_scorer.exponential_moving_average"]], "from_str() (cleanlab.internal.multilabel_scorer.classlabelscorer class method)": [[48, "cleanlab.internal.multilabel_scorer.ClassLabelScorer.from_str"]], "get_class_label_quality_scores() (cleanlab.internal.multilabel_scorer.multilabelscorer method)": [[48, "cleanlab.internal.multilabel_scorer.MultilabelScorer.get_class_label_quality_scores"]], "get_cross_validated_multilabel_pred_probs() (in module cleanlab.internal.multilabel_scorer)": [[48, "cleanlab.internal.multilabel_scorer.get_cross_validated_multilabel_pred_probs"]], "get_label_quality_scores() (in module cleanlab.internal.multilabel_scorer)": [[48, "cleanlab.internal.multilabel_scorer.get_label_quality_scores"]], "multilabel_py() (in module cleanlab.internal.multilabel_scorer)": [[48, "cleanlab.internal.multilabel_scorer.multilabel_py"]], "possible_methods (cleanlab.internal.multilabel_scorer.aggregator attribute)": [[48, "cleanlab.internal.multilabel_scorer.Aggregator.possible_methods"]], "softmin() (in module cleanlab.internal.multilabel_scorer)": [[48, "cleanlab.internal.multilabel_scorer.softmin"]], "cleanlab.internal.multilabel_utils": [[49, "module-cleanlab.internal.multilabel_utils"]], "get_onehot_num_classes() (in module cleanlab.internal.multilabel_utils)": [[49, "cleanlab.internal.multilabel_utils.get_onehot_num_classes"]], "int2onehot() (in module cleanlab.internal.multilabel_utils)": [[49, "cleanlab.internal.multilabel_utils.int2onehot"]], "onehot2int() (in module cleanlab.internal.multilabel_utils)": [[49, "cleanlab.internal.multilabel_utils.onehot2int"]], "stack_complement() (in module cleanlab.internal.multilabel_utils)": [[49, "cleanlab.internal.multilabel_utils.stack_complement"]], "cleanlab.internal.neighbor": [[50, "module-cleanlab.internal.neighbor"]], "default_k (in module cleanlab.internal.neighbor.knn_graph)": [[51, "cleanlab.internal.neighbor.knn_graph.DEFAULT_K"]], "cleanlab.internal.neighbor.knn_graph": [[51, "module-cleanlab.internal.neighbor.knn_graph"]], "construct_knn_graph_from_index() (in module cleanlab.internal.neighbor.knn_graph)": [[51, "cleanlab.internal.neighbor.knn_graph.construct_knn_graph_from_index"]], "correct_knn_distances_and_indices() (in module cleanlab.internal.neighbor.knn_graph)": [[51, "cleanlab.internal.neighbor.knn_graph.correct_knn_distances_and_indices"]], "correct_knn_distances_and_indices_with_exact_duplicate_sets_inplace() (in module cleanlab.internal.neighbor.knn_graph)": [[51, "cleanlab.internal.neighbor.knn_graph.correct_knn_distances_and_indices_with_exact_duplicate_sets_inplace"]], "correct_knn_graph() (in module cleanlab.internal.neighbor.knn_graph)": [[51, "cleanlab.internal.neighbor.knn_graph.correct_knn_graph"]], "create_knn_graph_and_index() (in module cleanlab.internal.neighbor.knn_graph)": [[51, "cleanlab.internal.neighbor.knn_graph.create_knn_graph_and_index"]], "features_to_knn() (in module cleanlab.internal.neighbor.knn_graph)": [[51, "cleanlab.internal.neighbor.knn_graph.features_to_knn"]], "high_dimension_cutoff (in module cleanlab.internal.neighbor.metric)": [[52, "cleanlab.internal.neighbor.metric.HIGH_DIMENSION_CUTOFF"]], "row_count_cutoff (in module cleanlab.internal.neighbor.metric)": [[52, "cleanlab.internal.neighbor.metric.ROW_COUNT_CUTOFF"]], "cleanlab.internal.neighbor.metric": [[52, "module-cleanlab.internal.neighbor.metric"]], "decide_default_metric() (in module cleanlab.internal.neighbor.metric)": [[52, "cleanlab.internal.neighbor.metric.decide_default_metric"]], "decide_euclidean_metric() (in module cleanlab.internal.neighbor.metric)": [[52, "cleanlab.internal.neighbor.metric.decide_euclidean_metric"]], "cleanlab.internal.neighbor.search": [[53, "module-cleanlab.internal.neighbor.search"]], "construct_knn() (in module cleanlab.internal.neighbor.search)": [[53, "cleanlab.internal.neighbor.search.construct_knn"]], "cleanlab.internal.outlier": [[54, "module-cleanlab.internal.outlier"]], "correct_precision_errors() (in module cleanlab.internal.outlier)": [[54, "cleanlab.internal.outlier.correct_precision_errors"]], "transform_distances_to_scores() (in module cleanlab.internal.outlier)": [[54, "cleanlab.internal.outlier.transform_distances_to_scores"]], "cleanlab.internal.token_classification_utils": [[55, "module-cleanlab.internal.token_classification_utils"]], "color_sentence() (in module cleanlab.internal.token_classification_utils)": [[55, "cleanlab.internal.token_classification_utils.color_sentence"]], "filter_sentence() (in module cleanlab.internal.token_classification_utils)": [[55, "cleanlab.internal.token_classification_utils.filter_sentence"]], "get_sentence() (in module cleanlab.internal.token_classification_utils)": [[55, "cleanlab.internal.token_classification_utils.get_sentence"]], "mapping() (in module cleanlab.internal.token_classification_utils)": [[55, "cleanlab.internal.token_classification_utils.mapping"]], "merge_probs() (in module cleanlab.internal.token_classification_utils)": [[55, "cleanlab.internal.token_classification_utils.merge_probs"]], "process_token() (in module cleanlab.internal.token_classification_utils)": [[55, "cleanlab.internal.token_classification_utils.process_token"]], "append_extra_datapoint() (in module cleanlab.internal.util)": [[56, "cleanlab.internal.util.append_extra_datapoint"]], "cleanlab.internal.util": [[56, "module-cleanlab.internal.util"]], "clip_noise_rates() (in module cleanlab.internal.util)": [[56, "cleanlab.internal.util.clip_noise_rates"]], "clip_values() (in module cleanlab.internal.util)": [[56, "cleanlab.internal.util.clip_values"]], "compress_int_array() (in module cleanlab.internal.util)": [[56, "cleanlab.internal.util.compress_int_array"]], "confusion_matrix() (in module cleanlab.internal.util)": [[56, "cleanlab.internal.util.confusion_matrix"]], "csr_vstack() (in module cleanlab.internal.util)": [[56, "cleanlab.internal.util.csr_vstack"]], "estimate_pu_f1() (in module cleanlab.internal.util)": [[56, "cleanlab.internal.util.estimate_pu_f1"]], "extract_indices_tf() (in module cleanlab.internal.util)": [[56, "cleanlab.internal.util.extract_indices_tf"]], "force_two_dimensions() (in module cleanlab.internal.util)": [[56, "cleanlab.internal.util.force_two_dimensions"]], "format_labels() (in module cleanlab.internal.util)": [[56, "cleanlab.internal.util.format_labels"]], "get_missing_classes() (in module cleanlab.internal.util)": [[56, "cleanlab.internal.util.get_missing_classes"]], "get_num_classes() (in module cleanlab.internal.util)": [[56, "cleanlab.internal.util.get_num_classes"]], "get_unique_classes() (in module cleanlab.internal.util)": [[56, "cleanlab.internal.util.get_unique_classes"]], "is_tensorflow_dataset() (in module cleanlab.internal.util)": [[56, "cleanlab.internal.util.is_tensorflow_dataset"]], "is_torch_dataset() (in module cleanlab.internal.util)": [[56, "cleanlab.internal.util.is_torch_dataset"]], "num_unique_classes() (in module cleanlab.internal.util)": [[56, "cleanlab.internal.util.num_unique_classes"]], "print_inverse_noise_matrix() (in module cleanlab.internal.util)": [[56, "cleanlab.internal.util.print_inverse_noise_matrix"]], "print_joint_matrix() (in module cleanlab.internal.util)": [[56, "cleanlab.internal.util.print_joint_matrix"]], "print_noise_matrix() (in module cleanlab.internal.util)": [[56, "cleanlab.internal.util.print_noise_matrix"]], "print_square_matrix() (in module cleanlab.internal.util)": [[56, "cleanlab.internal.util.print_square_matrix"]], "remove_noise_from_class() (in module cleanlab.internal.util)": [[56, "cleanlab.internal.util.remove_noise_from_class"]], "round_preserving_row_totals() (in module cleanlab.internal.util)": [[56, "cleanlab.internal.util.round_preserving_row_totals"]], "round_preserving_sum() (in module cleanlab.internal.util)": [[56, "cleanlab.internal.util.round_preserving_sum"]], "smart_display_dataframe() (in module cleanlab.internal.util)": [[56, "cleanlab.internal.util.smart_display_dataframe"]], "subset_x_y() (in module cleanlab.internal.util)": [[56, "cleanlab.internal.util.subset_X_y"]], "subset_data() (in module cleanlab.internal.util)": [[56, "cleanlab.internal.util.subset_data"]], "subset_labels() (in module cleanlab.internal.util)": [[56, "cleanlab.internal.util.subset_labels"]], "train_val_split() (in module cleanlab.internal.util)": [[56, "cleanlab.internal.util.train_val_split"]], "unshuffle_tensorflow_dataset() (in module cleanlab.internal.util)": [[56, "cleanlab.internal.util.unshuffle_tensorflow_dataset"]], "value_counts() (in module cleanlab.internal.util)": [[56, "cleanlab.internal.util.value_counts"]], "value_counts_fill_missing_classes() (in module cleanlab.internal.util)": [[56, "cleanlab.internal.util.value_counts_fill_missing_classes"]], "assert_indexing_works() (in module cleanlab.internal.validation)": [[57, "cleanlab.internal.validation.assert_indexing_works"]], "assert_nonempty_input() (in module cleanlab.internal.validation)": [[57, "cleanlab.internal.validation.assert_nonempty_input"]], "assert_valid_class_labels() (in module cleanlab.internal.validation)": [[57, "cleanlab.internal.validation.assert_valid_class_labels"]], "assert_valid_inputs() (in module cleanlab.internal.validation)": [[57, "cleanlab.internal.validation.assert_valid_inputs"]], "cleanlab.internal.validation": [[57, "module-cleanlab.internal.validation"]], "labels_to_array() (in module cleanlab.internal.validation)": [[57, "cleanlab.internal.validation.labels_to_array"]], "labels_to_list_multilabel() (in module cleanlab.internal.validation)": [[57, "cleanlab.internal.validation.labels_to_list_multilabel"]], "cleanlab.models": [[59, "module-cleanlab.models"]], "keraswrappermodel (class in cleanlab.models.keras)": [[60, "cleanlab.models.keras.KerasWrapperModel"]], "keraswrappersequential (class in cleanlab.models.keras)": [[60, "cleanlab.models.keras.KerasWrapperSequential"]], "cleanlab.models.keras": [[60, "module-cleanlab.models.keras"]], "fit() (cleanlab.models.keras.keraswrappermodel method)": [[60, "cleanlab.models.keras.KerasWrapperModel.fit"]], "fit() (cleanlab.models.keras.keraswrappersequential method)": [[60, "cleanlab.models.keras.KerasWrapperSequential.fit"]], "get_params() (cleanlab.models.keras.keraswrappermodel method)": [[60, "cleanlab.models.keras.KerasWrapperModel.get_params"]], "get_params() (cleanlab.models.keras.keraswrappersequential method)": [[60, "cleanlab.models.keras.KerasWrapperSequential.get_params"]], "predict() (cleanlab.models.keras.keraswrappermodel method)": [[60, "cleanlab.models.keras.KerasWrapperModel.predict"]], "predict() (cleanlab.models.keras.keraswrappersequential method)": [[60, "cleanlab.models.keras.KerasWrapperSequential.predict"]], "predict_proba() (cleanlab.models.keras.keraswrappermodel method)": [[60, "cleanlab.models.keras.KerasWrapperModel.predict_proba"]], "predict_proba() (cleanlab.models.keras.keraswrappersequential method)": [[60, "cleanlab.models.keras.KerasWrapperSequential.predict_proba"]], "set_params() (cleanlab.models.keras.keraswrappermodel method)": [[60, "cleanlab.models.keras.KerasWrapperModel.set_params"]], "set_params() (cleanlab.models.keras.keraswrappersequential method)": [[60, "cleanlab.models.keras.KerasWrapperSequential.set_params"]], "summary() (cleanlab.models.keras.keraswrappermodel method)": [[60, "cleanlab.models.keras.KerasWrapperModel.summary"]], "summary() (cleanlab.models.keras.keraswrappersequential method)": [[60, "cleanlab.models.keras.KerasWrapperSequential.summary"]], "cleanlab.multiannotator": [[61, "module-cleanlab.multiannotator"]], "convert_long_to_wide_dataset() (in module cleanlab.multiannotator)": [[61, "cleanlab.multiannotator.convert_long_to_wide_dataset"]], "get_active_learning_scores() (in module cleanlab.multiannotator)": [[61, "cleanlab.multiannotator.get_active_learning_scores"]], "get_active_learning_scores_ensemble() (in module cleanlab.multiannotator)": [[61, "cleanlab.multiannotator.get_active_learning_scores_ensemble"]], "get_label_quality_multiannotator() (in module cleanlab.multiannotator)": [[61, "cleanlab.multiannotator.get_label_quality_multiannotator"]], "get_label_quality_multiannotator_ensemble() (in module cleanlab.multiannotator)": [[61, "cleanlab.multiannotator.get_label_quality_multiannotator_ensemble"]], "get_majority_vote_label() (in module cleanlab.multiannotator)": [[61, "cleanlab.multiannotator.get_majority_vote_label"]], "cleanlab.multilabel_classification.dataset": [[62, "module-cleanlab.multilabel_classification.dataset"]], "common_multilabel_issues() (in module cleanlab.multilabel_classification.dataset)": [[62, "cleanlab.multilabel_classification.dataset.common_multilabel_issues"]], "multilabel_health_summary() (in module cleanlab.multilabel_classification.dataset)": [[62, "cleanlab.multilabel_classification.dataset.multilabel_health_summary"]], "overall_multilabel_health_score() (in module cleanlab.multilabel_classification.dataset)": [[62, "cleanlab.multilabel_classification.dataset.overall_multilabel_health_score"]], "rank_classes_by_multilabel_quality() (in module cleanlab.multilabel_classification.dataset)": [[62, "cleanlab.multilabel_classification.dataset.rank_classes_by_multilabel_quality"]], "cleanlab.multilabel_classification.filter": [[63, "module-cleanlab.multilabel_classification.filter"]], "find_label_issues() (in module cleanlab.multilabel_classification.filter)": [[63, "cleanlab.multilabel_classification.filter.find_label_issues"]], "find_multilabel_issues_per_class() (in module cleanlab.multilabel_classification.filter)": [[63, "cleanlab.multilabel_classification.filter.find_multilabel_issues_per_class"]], "cleanlab.multilabel_classification": [[64, "module-cleanlab.multilabel_classification"]], "cleanlab.multilabel_classification.rank": [[65, "module-cleanlab.multilabel_classification.rank"]], "get_label_quality_scores() (in module cleanlab.multilabel_classification.rank)": [[65, "cleanlab.multilabel_classification.rank.get_label_quality_scores"]], "get_label_quality_scores_per_class() (in module cleanlab.multilabel_classification.rank)": [[65, "cleanlab.multilabel_classification.rank.get_label_quality_scores_per_class"]], "cleanlab.object_detection.filter": [[66, "module-cleanlab.object_detection.filter"]], "find_label_issues() (in module cleanlab.object_detection.filter)": [[66, "cleanlab.object_detection.filter.find_label_issues"]], "cleanlab.object_detection": [[67, "module-cleanlab.object_detection"]], "cleanlab.object_detection.rank": [[68, "module-cleanlab.object_detection.rank"]], "compute_badloc_box_scores() (in module cleanlab.object_detection.rank)": [[68, "cleanlab.object_detection.rank.compute_badloc_box_scores"]], "compute_overlooked_box_scores() (in module cleanlab.object_detection.rank)": [[68, "cleanlab.object_detection.rank.compute_overlooked_box_scores"]], "compute_swap_box_scores() (in module cleanlab.object_detection.rank)": [[68, "cleanlab.object_detection.rank.compute_swap_box_scores"]], "get_label_quality_scores() (in module cleanlab.object_detection.rank)": [[68, "cleanlab.object_detection.rank.get_label_quality_scores"]], "issues_from_scores() (in module cleanlab.object_detection.rank)": [[68, "cleanlab.object_detection.rank.issues_from_scores"]], "pool_box_scores_per_image() (in module cleanlab.object_detection.rank)": [[68, "cleanlab.object_detection.rank.pool_box_scores_per_image"]], "bounding_box_size_distribution() (in module cleanlab.object_detection.summary)": [[69, "cleanlab.object_detection.summary.bounding_box_size_distribution"]], "calculate_per_class_metrics() (in module cleanlab.object_detection.summary)": [[69, "cleanlab.object_detection.summary.calculate_per_class_metrics"]], "class_label_distribution() (in module cleanlab.object_detection.summary)": [[69, "cleanlab.object_detection.summary.class_label_distribution"]], "cleanlab.object_detection.summary": [[69, "module-cleanlab.object_detection.summary"]], "get_average_per_class_confusion_matrix() (in module cleanlab.object_detection.summary)": [[69, "cleanlab.object_detection.summary.get_average_per_class_confusion_matrix"]], "get_sorted_bbox_count_idxs() (in module cleanlab.object_detection.summary)": [[69, "cleanlab.object_detection.summary.get_sorted_bbox_count_idxs"]], "object_counts_per_image() (in module cleanlab.object_detection.summary)": [[69, "cleanlab.object_detection.summary.object_counts_per_image"]], "plot_class_distribution() (in module cleanlab.object_detection.summary)": [[69, "cleanlab.object_detection.summary.plot_class_distribution"]], "plot_class_size_distributions() (in module cleanlab.object_detection.summary)": [[69, "cleanlab.object_detection.summary.plot_class_size_distributions"]], "visualize() (in module cleanlab.object_detection.summary)": [[69, "cleanlab.object_detection.summary.visualize"]], "outofdistribution (class in cleanlab.outlier)": [[70, "cleanlab.outlier.OutOfDistribution"]], "cleanlab.outlier": [[70, "module-cleanlab.outlier"]], "fit() (cleanlab.outlier.outofdistribution method)": [[70, "cleanlab.outlier.OutOfDistribution.fit"]], "fit_score() (cleanlab.outlier.outofdistribution method)": [[70, "cleanlab.outlier.OutOfDistribution.fit_score"]], "score() (cleanlab.outlier.outofdistribution method)": [[70, "cleanlab.outlier.OutOfDistribution.score"]], "cleanlab.rank": [[71, "module-cleanlab.rank"]], "find_top_issues() (in module cleanlab.rank)": [[71, "cleanlab.rank.find_top_issues"]], "get_confidence_weighted_entropy_for_each_label() (in module cleanlab.rank)": [[71, "cleanlab.rank.get_confidence_weighted_entropy_for_each_label"]], "get_label_quality_ensemble_scores() (in module cleanlab.rank)": [[71, "cleanlab.rank.get_label_quality_ensemble_scores"]], "get_label_quality_scores() (in module cleanlab.rank)": [[71, "cleanlab.rank.get_label_quality_scores"]], "get_normalized_margin_for_each_label() (in module cleanlab.rank)": [[71, "cleanlab.rank.get_normalized_margin_for_each_label"]], "get_self_confidence_for_each_label() (in module cleanlab.rank)": [[71, "cleanlab.rank.get_self_confidence_for_each_label"]], "order_label_issues() (in module cleanlab.rank)": [[71, "cleanlab.rank.order_label_issues"]], "cleanlab.regression": [[72, "module-cleanlab.regression"]], "cleanlearning (class in cleanlab.regression.learn)": [[73, "cleanlab.regression.learn.CleanLearning"]], "__init_subclass__() (cleanlab.regression.learn.cleanlearning class method)": [[73, "cleanlab.regression.learn.CleanLearning.__init_subclass__"]], "cleanlab.regression.learn": [[73, "module-cleanlab.regression.learn"]], "find_label_issues() (cleanlab.regression.learn.cleanlearning method)": [[73, "cleanlab.regression.learn.CleanLearning.find_label_issues"]], "fit() (cleanlab.regression.learn.cleanlearning method)": [[73, "cleanlab.regression.learn.CleanLearning.fit"]], "get_aleatoric_uncertainty() (cleanlab.regression.learn.cleanlearning method)": [[73, "cleanlab.regression.learn.CleanLearning.get_aleatoric_uncertainty"]], "get_epistemic_uncertainty() (cleanlab.regression.learn.cleanlearning method)": [[73, "cleanlab.regression.learn.CleanLearning.get_epistemic_uncertainty"]], "get_label_issues() (cleanlab.regression.learn.cleanlearning method)": [[73, "cleanlab.regression.learn.CleanLearning.get_label_issues"]], "get_metadata_routing() (cleanlab.regression.learn.cleanlearning method)": [[73, "cleanlab.regression.learn.CleanLearning.get_metadata_routing"]], "get_params() (cleanlab.regression.learn.cleanlearning method)": [[73, "cleanlab.regression.learn.CleanLearning.get_params"]], "predict() (cleanlab.regression.learn.cleanlearning method)": [[73, "cleanlab.regression.learn.CleanLearning.predict"]], "save_space() (cleanlab.regression.learn.cleanlearning method)": [[73, "cleanlab.regression.learn.CleanLearning.save_space"]], "score() (cleanlab.regression.learn.cleanlearning method)": [[73, "cleanlab.regression.learn.CleanLearning.score"]], "set_fit_request() (cleanlab.regression.learn.cleanlearning method)": [[73, "cleanlab.regression.learn.CleanLearning.set_fit_request"]], "set_params() (cleanlab.regression.learn.cleanlearning method)": [[73, "cleanlab.regression.learn.CleanLearning.set_params"]], "set_score_request() (cleanlab.regression.learn.cleanlearning method)": [[73, "cleanlab.regression.learn.CleanLearning.set_score_request"]], "cleanlab.regression.rank": [[74, "module-cleanlab.regression.rank"]], "get_label_quality_scores() (in module cleanlab.regression.rank)": [[74, "cleanlab.regression.rank.get_label_quality_scores"]], "cleanlab.segmentation.filter": [[75, "module-cleanlab.segmentation.filter"]], "find_label_issues() (in module cleanlab.segmentation.filter)": [[75, "cleanlab.segmentation.filter.find_label_issues"]], "cleanlab.segmentation": [[76, "module-cleanlab.segmentation"]], "cleanlab.segmentation.rank": [[77, "module-cleanlab.segmentation.rank"]], "get_label_quality_scores() (in module cleanlab.segmentation.rank)": [[77, "cleanlab.segmentation.rank.get_label_quality_scores"]], "issues_from_scores() (in module cleanlab.segmentation.rank)": [[77, "cleanlab.segmentation.rank.issues_from_scores"]], "cleanlab.segmentation.summary": [[78, "module-cleanlab.segmentation.summary"]], "common_label_issues() (in module cleanlab.segmentation.summary)": [[78, "cleanlab.segmentation.summary.common_label_issues"]], "display_issues() (in module cleanlab.segmentation.summary)": [[78, "cleanlab.segmentation.summary.display_issues"]], "filter_by_class() (in module cleanlab.segmentation.summary)": [[78, "cleanlab.segmentation.summary.filter_by_class"]], "cleanlab.token_classification.filter": [[79, "module-cleanlab.token_classification.filter"]], "find_label_issues() (in module cleanlab.token_classification.filter)": [[79, "cleanlab.token_classification.filter.find_label_issues"]], "cleanlab.token_classification": [[80, "module-cleanlab.token_classification"]], "cleanlab.token_classification.rank": [[81, "module-cleanlab.token_classification.rank"]], "get_label_quality_scores() (in module cleanlab.token_classification.rank)": [[81, "cleanlab.token_classification.rank.get_label_quality_scores"]], "issues_from_scores() (in module cleanlab.token_classification.rank)": [[81, "cleanlab.token_classification.rank.issues_from_scores"]], "cleanlab.token_classification.summary": [[82, "module-cleanlab.token_classification.summary"]], "common_label_issues() (in module cleanlab.token_classification.summary)": [[82, "cleanlab.token_classification.summary.common_label_issues"]], "display_issues() (in module cleanlab.token_classification.summary)": [[82, "cleanlab.token_classification.summary.display_issues"]], "filter_by_token() (in module cleanlab.token_classification.summary)": [[82, "cleanlab.token_classification.summary.filter_by_token"]]}})