Search.setIndex({"docnames": ["cleanlab/benchmarking/index", "cleanlab/benchmarking/noise_generation", "cleanlab/classification", "cleanlab/count", "cleanlab/datalab/datalab", "cleanlab/datalab/guide/custom_issue_manager", "cleanlab/datalab/guide/generating_cluster_ids", "cleanlab/datalab/guide/index", "cleanlab/datalab/guide/issue_type_description", "cleanlab/datalab/index", "cleanlab/datalab/internal/data", "cleanlab/datalab/internal/data_issues", "cleanlab/datalab/internal/factory", "cleanlab/datalab/internal/index", "cleanlab/datalab/internal/issue_finder", "cleanlab/datalab/internal/issue_manager/_notices/not_registered", "cleanlab/datalab/internal/issue_manager/data_valuation", "cleanlab/datalab/internal/issue_manager/duplicate", "cleanlab/datalab/internal/issue_manager/imbalance", "cleanlab/datalab/internal/issue_manager/index", "cleanlab/datalab/internal/issue_manager/issue_manager", "cleanlab/datalab/internal/issue_manager/label", "cleanlab/datalab/internal/issue_manager/noniid", "cleanlab/datalab/internal/issue_manager/null", "cleanlab/datalab/internal/issue_manager/outlier", "cleanlab/datalab/internal/issue_manager/regression/index", "cleanlab/datalab/internal/issue_manager/regression/label", "cleanlab/datalab/internal/issue_manager/underperforming_group", "cleanlab/datalab/internal/report", "cleanlab/datalab/internal/task", "cleanlab/datalab/optional_dependencies", "cleanlab/dataset", "cleanlab/experimental/cifar_cnn", "cleanlab/experimental/coteaching", "cleanlab/experimental/index", "cleanlab/experimental/label_issues_batched", "cleanlab/experimental/mnist_pytorch", "cleanlab/filter", "cleanlab/internal/index", "cleanlab/internal/label_quality_utils", "cleanlab/internal/latent_algebra", "cleanlab/internal/multiannotator_utils", "cleanlab/internal/multilabel_scorer", "cleanlab/internal/multilabel_utils", "cleanlab/internal/outlier", "cleanlab/internal/token_classification_utils", "cleanlab/internal/util", "cleanlab/internal/validation", "cleanlab/models/fasttext", "cleanlab/models/index", "cleanlab/models/keras", "cleanlab/multiannotator", "cleanlab/multilabel_classification/dataset", "cleanlab/multilabel_classification/filter", "cleanlab/multilabel_classification/index", "cleanlab/multilabel_classification/rank", "cleanlab/object_detection/filter", "cleanlab/object_detection/index", "cleanlab/object_detection/rank", "cleanlab/object_detection/summary", "cleanlab/outlier", "cleanlab/rank", "cleanlab/regression/index", "cleanlab/regression/learn", "cleanlab/regression/rank", "cleanlab/segmentation/filter", "cleanlab/segmentation/index", "cleanlab/segmentation/rank", "cleanlab/segmentation/summary", "cleanlab/token_classification/filter", "cleanlab/token_classification/index", "cleanlab/token_classification/rank", "cleanlab/token_classification/summary", "index", "migrating/migrate_v2", "tutorials/audio", "tutorials/datalab/datalab_advanced", "tutorials/datalab/datalab_quickstart", "tutorials/datalab/index", "tutorials/datalab/tabular", "tutorials/datalab/text", "tutorials/dataset_health", "tutorials/faq", "tutorials/image", "tutorials/indepth_overview", "tutorials/index", "tutorials/multiannotator", "tutorials/multilabel_classification", "tutorials/object_detection", "tutorials/outliers", "tutorials/pred_probs_cross_val", "tutorials/regression", "tutorials/segmentation", "tutorials/tabular", "tutorials/text", "tutorials/token_classification"], "filenames": ["cleanlab/benchmarking/index.rst", "cleanlab/benchmarking/noise_generation.rst", "cleanlab/classification.rst", "cleanlab/count.rst", "cleanlab/datalab/datalab.rst", "cleanlab/datalab/guide/custom_issue_manager.rst", "cleanlab/datalab/guide/generating_cluster_ids.rst", "cleanlab/datalab/guide/index.rst", "cleanlab/datalab/guide/issue_type_description.rst", "cleanlab/datalab/index.rst", "cleanlab/datalab/internal/data.rst", "cleanlab/datalab/internal/data_issues.rst", "cleanlab/datalab/internal/factory.rst", "cleanlab/datalab/internal/index.rst", "cleanlab/datalab/internal/issue_finder.rst", "cleanlab/datalab/internal/issue_manager/_notices/not_registered.rst", "cleanlab/datalab/internal/issue_manager/data_valuation.rst", "cleanlab/datalab/internal/issue_manager/duplicate.rst", "cleanlab/datalab/internal/issue_manager/imbalance.rst", "cleanlab/datalab/internal/issue_manager/index.rst", "cleanlab/datalab/internal/issue_manager/issue_manager.rst", "cleanlab/datalab/internal/issue_manager/label.rst", "cleanlab/datalab/internal/issue_manager/noniid.rst", "cleanlab/datalab/internal/issue_manager/null.rst", "cleanlab/datalab/internal/issue_manager/outlier.rst", "cleanlab/datalab/internal/issue_manager/regression/index.rst", "cleanlab/datalab/internal/issue_manager/regression/label.rst", "cleanlab/datalab/internal/issue_manager/underperforming_group.rst", "cleanlab/datalab/internal/report.rst", "cleanlab/datalab/internal/task.rst", "cleanlab/datalab/optional_dependencies.rst", "cleanlab/dataset.rst", "cleanlab/experimental/cifar_cnn.rst", "cleanlab/experimental/coteaching.rst", "cleanlab/experimental/index.rst", "cleanlab/experimental/label_issues_batched.rst", "cleanlab/experimental/mnist_pytorch.rst", "cleanlab/filter.rst", "cleanlab/internal/index.rst", "cleanlab/internal/label_quality_utils.rst", "cleanlab/internal/latent_algebra.rst", "cleanlab/internal/multiannotator_utils.rst", "cleanlab/internal/multilabel_scorer.rst", "cleanlab/internal/multilabel_utils.rst", "cleanlab/internal/outlier.rst", "cleanlab/internal/token_classification_utils.rst", "cleanlab/internal/util.rst", "cleanlab/internal/validation.rst", "cleanlab/models/fasttext.rst", "cleanlab/models/index.rst", "cleanlab/models/keras.rst", "cleanlab/multiannotator.rst", "cleanlab/multilabel_classification/dataset.rst", "cleanlab/multilabel_classification/filter.rst", "cleanlab/multilabel_classification/index.rst", "cleanlab/multilabel_classification/rank.rst", "cleanlab/object_detection/filter.rst", "cleanlab/object_detection/index.rst", "cleanlab/object_detection/rank.rst", "cleanlab/object_detection/summary.rst", "cleanlab/outlier.rst", "cleanlab/rank.rst", "cleanlab/regression/index.rst", "cleanlab/regression/learn.rst", "cleanlab/regression/rank.rst", "cleanlab/segmentation/filter.rst", "cleanlab/segmentation/index.rst", "cleanlab/segmentation/rank.rst", "cleanlab/segmentation/summary.rst", "cleanlab/token_classification/filter.rst", "cleanlab/token_classification/index.rst", "cleanlab/token_classification/rank.rst", "cleanlab/token_classification/summary.rst", "index.rst", "migrating/migrate_v2.rst", "tutorials/audio.ipynb", "tutorials/datalab/datalab_advanced.ipynb", "tutorials/datalab/datalab_quickstart.ipynb", "tutorials/datalab/index.rst", "tutorials/datalab/tabular.ipynb", "tutorials/datalab/text.ipynb", "tutorials/dataset_health.ipynb", "tutorials/faq.ipynb", "tutorials/image.ipynb", "tutorials/indepth_overview.ipynb", "tutorials/index.rst", "tutorials/multiannotator.ipynb", "tutorials/multilabel_classification.ipynb", "tutorials/object_detection.ipynb", "tutorials/outliers.ipynb", "tutorials/pred_probs_cross_val.rst", "tutorials/regression.ipynb", "tutorials/segmentation.ipynb", "tutorials/tabular.ipynb", "tutorials/text.ipynb", "tutorials/token_classification.ipynb"], "titles": ["benchmarking", "noise_generation", "classification", "count", "datalab", "Creating Your Own Issues Manager", "Generating Cluster IDs", "Datalab guides", "Datalab Issue Types", "datalab", "data", "data_issues", "factory", "internal", "issue_finder", "&lt;no title&gt;", "data_valuation", "duplicate", "imbalance", "issue_manager", "issue_manager", "label", "noniid", "null", "outlier", "regression", "label", "underperforming_group", "report", "task", "&lt;no title&gt;", "dataset", "cifar_cnn", "coteaching", "experimental", "label_issues_batched", "mnist_pytorch", "filter", "internal", "label_quality_utils", "latent_algebra", "multiannotator_utils", "multilabel_scorer", "multilabel_utils", "outlier", "token_classification_utils", "util", "validation", "fasttext", "models", "keras", "multiannotator", "dataset", "filter", "multilabel_classification", "rank", "filter", "object_detection", "rank", "summary", "outlier", "rank", "regression", "regression.learn", "regression.rank", "filter", "segmentation", "rank", "summary", "filter", "token_classification", "rank", "summary", "cleanlab open-source documentation", "How to migrate to versions &gt;= 2.0.0 from pre 1.0.1", "Audio Classification with SpeechBrain and Cleanlab", "Datalab: Advanced workflows to audit your data", "Datalab: A unified audit to detect all kinds of issues in data and labels", "Datalab Tutorials", "Detecting Issues in Tabular Data\u00a0(Numeric/Categorical columns) with Datalab", "Detecting Issues in a Text Dataset with Datalab", "Find Dataset-level Issues for Dataset Curation", "FAQ", "Image Classification with PyTorch and Cleanlab", "The Workflows of Data-centric AI for Classification with Noisy Labels", "Tutorials", "Estimate Consensus and Annotator Quality for Data Labeled by Multiple Annotators", "Find Label Errors in Multi-Label Classification Datasets", "Finding Label Errors in Object Detection Datasets", "Detect Outliers with Cleanlab and PyTorch Image Models (timm)", "Computing Out-of-Sample Predicted Probabilities with Cross-Validation", "Find Noisy Labels in Regression Datasets", "Find Label Errors in Semantic Segmentation Datasets", "Classification with Tabular Data using Scikit-Learn and Cleanlab", "Text Classification with Noisy Labels", "Find Label Errors in Token Classification (Text) Datasets"], "terms": {"noise_gener": [0, 74, 76, 77, 84, 86, 87], "noise_matrix_is_valid": [0, 1], "generate_noisy_label": [0, 1, 76, 77, 84, 86, 87], "generate_noise_matrix_from_trac": [0, 1, 76, 77, 84, 86, 87], "generate_n_rand_probabilities_that_sum_to_m": [0, 1], "randomly_distribute_n_balls_into_k_bin": [0, 1], "helper": [1, 14, 35, 39, 41, 42, 43, 44, 45, 46, 58, 81, 83, 95], "method": [1, 2, 3, 4, 5, 8, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 79, 80, 82, 83, 86, 88, 89, 90, 91, 92, 93, 94, 95], "ar": [1, 2, 3, 4, 5, 8, 10, 11, 12, 13, 14, 16, 18, 19, 20, 21, 22, 25, 26, 31, 32, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 55, 56, 58, 59, 60, 61, 63, 64, 65, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 79, 80, 82, 83, 84, 86, 87, 88, 89, 90, 91, 93, 94, 95], "us": [1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 50, 51, 52, 53, 55, 56, 58, 59, 60, 61, 63, 64, 65, 67, 68, 69, 71, 73, 74, 76, 81, 85, 90], "benchmark": [1, 32, 73, 74, 76, 77, 84, 86, 87], "cleanlab": [1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 55, 56, 58, 59, 60, 61, 63, 64, 65, 67, 68, 69, 71, 72, 74, 76, 77, 81, 85, 90], "": [1, 2, 3, 8, 16, 31, 32, 36, 39, 42, 44, 46, 51, 52, 56, 58, 59, 60, 61, 63, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95], "core": [1, 4, 35, 37, 65, 67], "algorithm": [1, 2, 6, 8, 27, 33, 46, 51, 60, 69, 71, 73, 82, 84, 86, 95], "These": [1, 2, 3, 6, 8, 19, 32, 34, 36, 37, 38, 49, 51, 52, 55, 59, 60, 64, 68, 69, 71, 72, 75, 77, 79, 80, 82, 83, 84, 86, 87, 88, 89, 91, 92, 93, 94, 95], "introduc": [1, 75, 82, 84], "synthet": [1, 86, 87, 92], "nois": [1, 2, 3, 31, 37, 40, 46, 52, 76, 77, 81, 86], "label": [1, 2, 3, 4, 5, 6, 7, 10, 12, 13, 14, 18, 19, 20, 25, 27, 29, 31, 32, 33, 35, 36, 37, 39, 40, 41, 42, 43, 46, 47, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 76, 81, 85, 89, 90], "classif": [1, 3, 4, 5, 8, 10, 12, 14, 29, 31, 35, 37, 40, 42, 43, 46, 51, 52, 53, 54, 55, 60, 61, 69, 70, 71, 72, 73, 74, 76, 77, 85, 86, 89, 90, 91, 92], "dataset": [1, 2, 3, 4, 5, 8, 10, 11, 12, 14, 16, 17, 18, 20, 22, 23, 24, 26, 27, 34, 35, 36, 37, 40, 42, 46, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 78, 79, 85, 86, 90, 93], "specif": [1, 3, 4, 7, 12, 13, 14, 23, 28, 34, 49, 53, 56, 59, 68, 72, 79, 80, 83, 84, 88, 95], "thi": [1, 2, 3, 4, 5, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 39, 40, 42, 43, 45, 46, 47, 49, 50, 51, 52, 53, 55, 56, 58, 59, 60, 61, 63, 64, 65, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95], "modul": [1, 3, 11, 12, 13, 14, 19, 25, 28, 29, 31, 32, 33, 34, 35, 36, 37, 42, 44, 46, 49, 51, 56, 59, 60, 61, 73, 82, 83], "provid": [1, 2, 3, 4, 5, 6, 8, 12, 14, 16, 21, 26, 29, 31, 32, 33, 35, 36, 37, 40, 46, 50, 51, 52, 53, 58, 59, 60, 61, 63, 65, 67, 68, 71, 72, 73, 75, 76, 77, 79, 80, 82, 83, 84, 86, 89, 90, 91, 92, 93, 94, 95], "gener": [1, 2, 3, 5, 8, 16, 21, 28, 31, 42, 46, 47, 60, 61, 63, 68, 75, 76, 77, 80, 81, 82, 83, 84, 86, 87, 89, 90, 91, 92, 94, 95], "valid": [1, 2, 3, 4, 8, 10, 29, 31, 37, 38, 40, 41, 42, 44, 46, 51, 53, 56, 59, 61, 63, 64, 72, 74, 75, 76, 77, 79, 80, 81, 82, 84, 85, 87, 88, 91, 92, 93, 94, 95], "matric": [1, 3, 40, 82], "which": [1, 2, 3, 4, 8, 10, 11, 12, 14, 16, 20, 22, 28, 31, 32, 36, 37, 40, 42, 45, 46, 51, 52, 53, 56, 58, 59, 60, 61, 63, 64, 67, 68, 69, 71, 73, 74, 75, 76, 77, 79, 80, 82, 83, 84, 86, 87, 88, 89, 90, 91, 93, 94, 95], "learn": [1, 2, 3, 4, 8, 12, 14, 20, 26, 28, 33, 34, 35, 36, 37, 39, 41, 46, 49, 51, 53, 60, 62, 64, 67, 71, 73, 75, 76, 79, 80, 81, 83, 85, 86, 87, 91, 94], "i": [1, 2, 3, 4, 5, 6, 8, 10, 11, 12, 14, 16, 17, 18, 20, 21, 22, 23, 24, 26, 27, 28, 29, 31, 32, 33, 35, 36, 37, 39, 40, 41, 42, 44, 45, 46, 47, 50, 51, 52, 53, 55, 56, 58, 59, 60, 61, 63, 64, 65, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 83, 86, 87, 88, 89, 91, 92, 93, 94, 95], "possibl": [1, 2, 3, 8, 31, 32, 36, 37, 39, 40, 42, 53, 54, 55, 56, 58, 59, 60, 61, 63, 69, 71, 72, 77, 82, 84, 86, 87, 88, 91, 92, 95], "noisi": [1, 2, 3, 8, 31, 33, 36, 37, 40, 46, 52, 53, 55, 61, 63, 64, 65, 67, 68, 74, 76, 77, 79, 80, 82, 85, 86], "given": [1, 2, 3, 8, 12, 26, 31, 32, 33, 35, 36, 37, 39, 40, 41, 42, 45, 46, 51, 52, 53, 56, 58, 59, 60, 61, 63, 64, 68, 69, 71, 72, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 86, 88, 89, 91, 92, 93, 94, 95], "matrix": [1, 2, 3, 4, 8, 14, 16, 27, 31, 37, 39, 40, 43, 46, 47, 53, 56, 58, 59, 60, 61, 79, 88, 89], "trace": [1, 76, 77, 84, 86, 87], "valu": [1, 2, 3, 4, 8, 10, 11, 14, 16, 20, 22, 23, 29, 31, 32, 33, 35, 36, 37, 39, 40, 42, 44, 46, 51, 52, 53, 55, 56, 58, 59, 60, 61, 63, 64, 65, 67, 68, 69, 72, 75, 77, 79, 80, 82, 83, 84, 86, 87, 88, 89, 91, 92, 94, 95], "more": [1, 2, 3, 4, 5, 8, 11, 12, 14, 16, 22, 31, 32, 35, 36, 39, 42, 44, 46, 51, 52, 53, 54, 55, 56, 58, 59, 61, 63, 64, 67, 68, 69, 71, 73, 75, 76, 79, 80, 81, 82, 83, 86, 87, 88, 89, 92, 95], "function": [1, 2, 3, 4, 5, 11, 12, 14, 21, 22, 26, 31, 32, 33, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 50, 51, 52, 53, 55, 56, 58, 59, 60, 61, 63, 64, 65, 67, 68, 69, 71, 72, 75, 77, 81, 82, 84, 86, 87, 88, 92, 93, 94, 95], "noise_matrix": [1, 2, 3, 8, 40, 46, 76, 77, 84, 86, 87], "py": [1, 3, 28, 32, 33, 37, 40, 42, 75, 76, 77, 80, 82, 84, 86, 87, 94], "verbos": [1, 2, 4, 5, 14, 16, 17, 18, 20, 21, 22, 23, 24, 26, 27, 28, 31, 35, 37, 51, 52, 53, 58, 60, 61, 63, 65, 67, 68, 72, 76, 84, 86], "fals": [1, 2, 3, 4, 5, 10, 16, 17, 18, 20, 21, 22, 24, 26, 27, 28, 29, 31, 32, 35, 36, 37, 41, 45, 46, 47, 51, 52, 53, 55, 56, 58, 59, 60, 61, 63, 65, 67, 68, 69, 75, 76, 77, 79, 80, 82, 83, 84, 86, 88, 89, 91, 92, 94], "sourc": [1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 14, 16, 17, 18, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 50, 51, 52, 53, 55, 56, 58, 59, 60, 61, 63, 64, 65, 67, 68, 69, 71, 72], "prior": [1, 2, 3, 31, 37, 40, 42], "repres": [1, 2, 3, 5, 8, 10, 14, 16, 22, 29, 31, 35, 37, 40, 43, 44, 46, 51, 52, 53, 56, 58, 59, 60, 61, 63, 65, 67, 68, 72, 75, 76, 77, 79, 80, 82, 83, 84, 86, 87, 88, 89, 91, 93, 94, 95], "p": [1, 2, 3, 8, 31, 37, 39, 40, 46, 51, 59, 60, 61, 65, 79, 80, 84, 86, 95], "true_label": [1, 2, 3, 31, 40, 46, 84, 86], "k": [1, 2, 3, 4, 6, 8, 10, 14, 16, 17, 21, 22, 24, 27, 31, 35, 37, 39, 40, 41, 42, 43, 44, 45, 46, 51, 52, 53, 54, 55, 56, 59, 60, 61, 63, 65, 67, 68, 69, 71, 72, 75, 76, 77, 82, 84, 86, 87, 88, 89, 92, 93, 95], "check": [1, 2, 4, 7, 8, 10, 14, 23, 29, 32, 35, 36, 41, 47, 50, 56, 59, 63, 73, 75, 76, 77, 82, 83, 84, 86, 87, 91, 93, 94], "learnabl": 1, "mean": [1, 2, 5, 6, 10, 11, 20, 22, 33, 36, 40, 42, 44, 58, 63, 77, 80, 82, 84, 86, 87, 88, 89, 91, 94], "achiev": [1, 2, 32, 33, 36, 63, 82, 86, 95], "better": [1, 4, 37, 51, 53, 61, 63, 64, 73, 75, 77, 79, 80, 82, 84, 87, 88, 89, 94, 95], "than": [1, 2, 3, 5, 8, 22, 24, 27, 31, 37, 46, 50, 51, 56, 58, 60, 61, 63, 67, 71, 75, 77, 79, 80, 82, 83, 84, 86, 87, 88, 89, 90, 92, 93, 95], "random": [1, 2, 3, 5, 8, 16, 27, 35, 42, 51, 61, 63, 75, 76, 77, 79, 82, 83, 84, 86, 87, 89, 93], "perform": [1, 2, 5, 8, 22, 24, 27, 32, 36, 42, 59, 63, 73, 76, 82, 84, 86, 87, 90, 91, 93, 94], "averag": [1, 3, 8, 20, 24, 31, 32, 36, 42, 44, 51, 52, 59, 60, 61, 82, 86, 89], "amount": [1, 3, 83], "paramet": [1, 2, 3, 4, 7, 10, 11, 12, 14, 16, 17, 18, 20, 21, 22, 23, 24, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 39, 40, 42, 43, 44, 45, 46, 47, 50, 51, 52, 53, 55, 56, 58, 59, 60, 61, 63, 64, 65, 67, 68, 69, 71, 72, 75, 77, 80, 83, 93, 94], "np": [1, 2, 3, 4, 5, 14, 16, 27, 31, 33, 35, 37, 39, 40, 42, 43, 44, 45, 46, 47, 50, 51, 52, 53, 55, 56, 58, 59, 60, 61, 63, 64, 65, 68, 69, 71, 72, 75, 76, 77, 79, 81, 82, 83, 84, 86, 87, 88, 89, 91, 92, 93, 94, 95], "ndarrai": [1, 2, 3, 4, 14, 21, 22, 26, 27, 31, 33, 35, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 51, 52, 53, 55, 56, 58, 59, 60, 61, 63, 64, 65, 67, 68, 71, 95], "an": [1, 2, 3, 4, 5, 8, 10, 11, 12, 14, 16, 17, 18, 20, 21, 22, 24, 26, 27, 28, 29, 31, 32, 33, 35, 36, 37, 39, 40, 41, 42, 44, 46, 47, 50, 51, 52, 53, 55, 56, 58, 59, 60, 61, 63, 65, 67, 68, 72, 73, 75, 76, 77, 79, 80, 81, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95], "arrai": [1, 2, 3, 4, 5, 8, 10, 14, 16, 22, 31, 33, 35, 36, 37, 40, 41, 42, 43, 44, 45, 46, 47, 50, 51, 52, 53, 55, 56, 58, 59, 60, 61, 63, 64, 65, 67, 68, 69, 71, 72, 75, 76, 77, 80, 82, 84, 86, 87, 88, 89, 91, 92, 93, 94, 95], "shape": [1, 2, 3, 4, 14, 16, 31, 33, 35, 37, 39, 40, 41, 42, 44, 45, 46, 50, 51, 52, 53, 55, 56, 58, 59, 60, 61, 63, 64, 65, 67, 68, 69, 71, 72, 75, 81, 82, 84, 87, 88, 89, 92, 95], "condit": [1, 2, 3, 40, 45, 46, 61, 83, 84, 95], "probabl": [1, 2, 3, 4, 6, 8, 14, 21, 24, 31, 35, 36, 37, 39, 40, 42, 43, 45, 46, 50, 51, 52, 53, 55, 56, 58, 59, 60, 61, 63, 65, 67, 68, 69, 71, 72, 73, 74, 81, 82, 84, 85, 87, 88, 89, 92, 95], "k_": [1, 2, 3, 40, 46], "k_y": [1, 2, 3, 40, 46], "contain": [1, 2, 3, 4, 8, 10, 11, 16, 17, 18, 20, 21, 22, 23, 24, 26, 27, 28, 31, 32, 33, 35, 36, 37, 39, 40, 45, 46, 50, 51, 52, 53, 55, 56, 58, 59, 60, 61, 63, 64, 67, 68, 69, 71, 72, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 91, 92, 93, 94], "fraction": [1, 2, 3, 8, 18, 33, 40, 46, 51, 63, 79, 82], "exampl": [1, 2, 3, 4, 5, 6, 8, 10, 11, 12, 14, 16, 17, 18, 20, 21, 22, 23, 24, 26, 27, 28, 29, 31, 32, 33, 35, 36, 37, 39, 40, 42, 43, 44, 45, 46, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 63, 64, 65, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 86, 87, 88, 90, 91, 92, 93, 94, 95], "everi": [1, 2, 3, 4, 14, 32, 36, 37, 40, 45, 46, 53, 61, 63, 64, 75, 76, 77, 79, 80, 82, 83, 86, 88, 90, 92, 93, 95], "class": [1, 2, 3, 4, 5, 7, 10, 11, 12, 14, 16, 17, 18, 20, 21, 22, 23, 24, 26, 27, 28, 29, 31, 32, 33, 35, 36, 37, 39, 40, 41, 42, 43, 45, 46, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 63, 65, 67, 68, 69, 71, 72, 73, 75, 76, 77, 79, 80, 81, 82, 83, 86, 87, 88, 89, 90, 91, 93, 94, 95], "other": [1, 2, 3, 4, 8, 14, 20, 23, 31, 32, 34, 35, 36, 37, 40, 43, 46, 47, 49, 51, 52, 55, 59, 60, 61, 63, 68, 75, 76, 77, 79, 80, 82, 83, 84, 87, 89, 92, 95], "assum": [1, 2, 3, 10, 37, 40, 45, 46, 61, 65, 68, 82, 87, 89, 92, 95], "column": [1, 2, 3, 4, 8, 10, 11, 26, 31, 35, 37, 40, 42, 43, 45, 46, 51, 52, 53, 55, 56, 59, 60, 61, 63, 68, 69, 71, 72, 75, 76, 77, 80, 81, 82, 83, 86, 87, 88, 91, 92, 93, 94, 95], "sum": [1, 2, 3, 22, 27, 31, 40, 42, 46, 52, 53, 55, 58, 63, 76, 77, 82, 83, 84, 86, 87, 92, 95], "1": [1, 2, 3, 4, 5, 8, 10, 14, 16, 17, 18, 20, 21, 22, 23, 24, 26, 27, 28, 29, 31, 32, 33, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 63, 64, 65, 67, 68, 69, 71, 72, 81, 82, 90], "each": [1, 2, 3, 4, 5, 6, 7, 10, 11, 12, 14, 18, 20, 21, 22, 27, 28, 31, 32, 33, 35, 36, 37, 39, 40, 42, 43, 44, 46, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 63, 64, 65, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95], "true": [1, 2, 3, 4, 5, 8, 10, 16, 17, 18, 20, 21, 22, 24, 26, 27, 28, 29, 31, 32, 33, 35, 36, 37, 40, 42, 45, 46, 47, 50, 51, 52, 53, 56, 58, 59, 60, 61, 63, 65, 67, 68, 72, 75, 76, 77, 79, 80, 81, 82, 83, 86, 87, 88, 89, 91, 92, 93, 94, 95], "return": [1, 2, 3, 4, 10, 11, 12, 14, 16, 17, 18, 20, 21, 22, 23, 24, 26, 27, 28, 29, 31, 32, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 50, 51, 52, 53, 55, 56, 58, 59, 60, 61, 63, 64, 65, 67, 68, 69, 71, 72, 73, 75, 76, 77, 80, 81, 82, 83, 84, 86, 87, 88, 89, 91, 92, 94, 95], "type": [1, 2, 3, 4, 5, 9, 10, 11, 12, 14, 16, 17, 18, 20, 21, 22, 23, 24, 26, 27, 28, 29, 31, 32, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 51, 52, 53, 55, 56, 58, 59, 60, 61, 63, 64, 65, 67, 68, 69, 71, 72, 74, 75, 76, 77, 79, 80, 82, 83, 87, 88, 92, 93, 95], "bool": [1, 2, 3, 4, 10, 16, 17, 18, 20, 21, 22, 24, 26, 27, 28, 29, 31, 32, 35, 36, 37, 42, 45, 46, 51, 53, 55, 56, 58, 59, 60, 61, 63, 65, 67, 68, 72], "is_valid": 1, "whether": [1, 3, 4, 8, 10, 11, 16, 17, 18, 20, 21, 22, 24, 26, 27, 28, 32, 35, 36, 37, 46, 51, 52, 53, 55, 56, 72, 75, 77, 79, 80, 81, 82, 83, 84, 91, 94, 95], "from": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 16, 20, 21, 23, 26, 27, 28, 30, 31, 32, 33, 35, 36, 37, 40, 42, 43, 44, 45, 46, 51, 53, 55, 58, 59, 60, 61, 63, 64, 69, 71, 72, 73, 75, 79, 80, 81, 82, 83, 86, 87, 88, 89, 90, 92, 95], "perfect": [1, 2, 31, 63, 84, 88], "exactli": [1, 3, 8, 31, 32, 36, 37, 54, 60, 76, 77, 79, 80, 83, 84], "yield": [1, 32, 36], "between": [1, 4, 8, 13, 14, 19, 20, 22, 25, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 44, 49, 51, 52, 55, 58, 60, 61, 63, 64, 67, 71, 72, 74, 75, 76, 77, 79, 80, 83, 84, 86, 87, 88, 89, 91, 92, 94, 95], "below": [1, 3, 4, 8, 31, 32, 35, 36, 37, 39, 42, 51, 52, 53, 58, 59, 67, 71, 74, 75, 76, 77, 79, 80, 81, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95], "we": [1, 2, 3, 4, 5, 8, 11, 20, 32, 35, 36, 37, 42, 46, 47, 51, 58, 59, 61, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95], "loop": [1, 3, 40, 46, 83, 88], "implement": [1, 2, 3, 4, 7, 12, 20, 32, 33, 35, 36, 40, 46, 63, 73, 75, 76, 79, 89, 90, 93], "what": [1, 4, 7, 8, 14, 28, 31, 33, 35, 37, 51, 52, 56, 58, 75, 76, 77, 79, 80, 83, 86, 87, 88, 89, 91, 92, 93, 94, 95], "doe": [1, 2, 3, 8, 35, 36, 37, 42, 47, 58, 59, 63, 65, 67, 71, 75, 76, 77, 79, 80, 83, 87, 91, 92, 94], "do": [1, 2, 4, 8, 31, 35, 36, 46, 47, 60, 61, 65, 75, 76, 77, 79, 80, 83, 86, 87, 88, 89, 91, 92, 93, 94, 95], "fast": 1, "explain": [1, 8], "python": [1, 2, 36, 50, 63, 75, 76, 77, 80, 81, 89, 94], "pseudocod": [1, 90], "happen": [1, 8, 37, 53, 80, 86, 92], "n": [1, 2, 3, 4, 5, 31, 32, 35, 36, 37, 39, 40, 41, 42, 44, 45, 46, 51, 52, 53, 55, 56, 58, 59, 60, 61, 63, 64, 65, 67, 68, 71, 75, 80, 81, 82, 83, 86, 87, 88, 91, 92, 93, 94, 95], "without": [1, 2, 4, 8, 10, 12, 18, 32, 36, 55, 63, 73, 75, 80, 84, 88, 89, 94], "ani": [1, 2, 3, 4, 5, 8, 10, 11, 12, 14, 16, 17, 18, 20, 21, 22, 23, 24, 26, 27, 31, 32, 35, 36, 37, 39, 41, 44, 45, 46, 50, 51, 53, 55, 56, 58, 59, 61, 63, 65, 67, 68, 73, 75, 76, 77, 79, 80, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94], "distinct": [1, 16, 46, 95], "natur": [1, 8, 86, 89], "number": [1, 2, 3, 4, 5, 6, 8, 10, 11, 14, 16, 17, 18, 20, 21, 22, 24, 26, 27, 28, 29, 31, 32, 33, 35, 36, 37, 40, 41, 42, 43, 44, 45, 46, 51, 52, 53, 55, 56, 58, 59, 60, 61, 63, 64, 65, 67, 68, 71, 72, 74, 75, 76, 77, 79, 80, 82, 83, 84, 86, 87, 88, 92, 95], "0": [1, 2, 3, 4, 5, 8, 10, 16, 17, 18, 20, 21, 22, 23, 24, 26, 27, 31, 32, 33, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 51, 52, 53, 55, 56, 58, 59, 60, 61, 63, 64, 65, 67, 68, 69, 71, 72, 75, 76, 77, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95], "count_joint": 1, "len": [1, 2, 3, 5, 31, 35, 40, 45, 46, 47, 60, 61, 63, 76, 77, 80, 81, 82, 83, 84, 86, 87, 88, 89, 91, 93, 94, 95], "y": [1, 2, 3, 4, 6, 16, 26, 27, 36, 40, 42, 46, 47, 50, 59, 63, 64, 75, 76, 77, 79, 82, 84, 86, 87, 89, 91, 94], "round": [1, 35, 37, 46, 63, 82, 91], "astyp": [1, 86], "int": [1, 2, 3, 4, 5, 14, 16, 17, 18, 20, 21, 22, 23, 24, 26, 27, 28, 31, 32, 33, 35, 36, 37, 42, 43, 44, 45, 46, 47, 52, 53, 55, 59, 60, 61, 63, 65, 67, 68, 69, 72, 75, 76, 83, 88, 89], "rang": [1, 3, 4, 5, 10, 40, 42, 44, 46, 59, 63, 64, 81, 82, 83, 84, 86, 87, 88, 89, 91, 92, 95], "idx_flip": 1, "where": [1, 2, 3, 4, 5, 8, 10, 11, 14, 20, 31, 35, 37, 40, 41, 42, 43, 44, 45, 46, 47, 51, 52, 53, 55, 56, 58, 59, 60, 61, 63, 64, 65, 67, 68, 69, 71, 75, 79, 80, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 94, 95], "pragma": 1, "cover": [1, 3, 74, 81], "choic": [1, 6, 37, 44, 82, 83, 87, 89], "replac": [1, 45, 50, 61, 76, 77, 80, 81, 82, 83, 86, 89, 93, 94], "max_trace_prob": 1, "min_trace_prob": 1, "1e": [1, 3, 61, 75, 76, 77], "05": [1, 8, 22, 26, 45, 59, 63, 69, 71, 79, 81, 82, 84, 88, 92], "max_noise_r": 1, "99999": 1, "min_noise_r": 1, "valid_noise_matrix": [1, 76, 77, 84, 86, 87], "none": [1, 2, 3, 4, 5, 10, 11, 14, 16, 17, 18, 20, 21, 22, 23, 24, 26, 27, 28, 29, 31, 32, 33, 35, 36, 37, 39, 40, 41, 42, 43, 45, 46, 47, 50, 51, 52, 53, 54, 55, 58, 59, 60, 61, 63, 65, 67, 68, 71, 72, 76, 77, 82, 83, 84, 86, 87, 92], "frac_zero_noise_r": 1, "seed": [1, 2, 3, 8, 22, 34, 36, 42, 63, 75, 76, 77, 79, 81, 84, 86, 87, 93], "max_it": [1, 75, 80, 89, 94], "10000": [1, 35, 81, 82], "x": [1, 2, 3, 4, 8, 16, 17, 18, 20, 21, 22, 24, 26, 27, 31, 32, 33, 36, 37, 39, 40, 42, 45, 46, 47, 50, 51, 53, 59, 60, 61, 63, 65, 75, 76, 77, 79, 81, 82, 83, 84, 86, 87, 89, 91, 93, 94], "diagon": [1, 3, 4, 37, 40, 46], "equal": [1, 3, 8, 10, 53, 58, 68, 90], "creat": [1, 2, 7, 14, 16, 32, 35, 36, 37, 46, 63, 73, 75, 79, 80, 82, 83, 92, 94, 95], "impli": [1, 8, 31, 52, 59], "float": [1, 2, 8, 16, 17, 18, 20, 21, 22, 23, 24, 26, 27, 31, 32, 33, 34, 35, 36, 37, 39, 41, 42, 44, 45, 46, 51, 52, 53, 55, 58, 59, 63, 67, 71, 75, 76, 77, 84, 86, 87], "entri": [1, 3, 4, 31, 32, 36, 37, 39, 43, 44, 46, 51, 52, 53, 56, 79, 80, 84, 87, 88, 93, 94], "maximum": [1, 8, 60, 68, 72, 92], "minimum": [1, 6, 8, 18, 37, 39, 53, 58, 71], "noise_r": 1, "non": [1, 2, 3, 4, 7, 14, 22, 32, 36, 37, 58, 63, 76, 82, 84, 86, 88, 89], "default": [1, 2, 3, 4, 5, 8, 12, 14, 24, 26, 28, 31, 32, 33, 35, 36, 37, 39, 40, 42, 46, 50, 51, 52, 53, 55, 56, 58, 59, 60, 61, 63, 64, 65, 67, 68, 69, 71, 72, 76, 82, 83, 92], "If": [1, 2, 3, 4, 8, 10, 11, 14, 22, 24, 29, 31, 32, 35, 36, 37, 39, 40, 42, 45, 46, 50, 51, 52, 53, 56, 58, 59, 60, 63, 64, 65, 67, 68, 71, 72, 73, 74, 75, 76, 79, 80, 82, 83, 84, 86, 87, 88, 89, 91, 92, 93, 94, 95], "have": [1, 2, 3, 4, 8, 14, 19, 22, 25, 31, 32, 34, 35, 36, 37, 40, 42, 46, 50, 51, 52, 53, 56, 58, 59, 60, 61, 63, 64, 68, 72, 73, 75, 76, 77, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 91, 92, 93, 94, 95], "all": [1, 2, 3, 4, 5, 6, 8, 11, 12, 14, 20, 28, 31, 32, 35, 36, 37, 40, 42, 43, 45, 46, 50, 51, 52, 53, 54, 55, 58, 59, 60, 61, 63, 65, 67, 68, 69, 71, 72, 73, 74, 75, 76, 79, 80, 81, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95], "necessari": [1, 2, 3, 5, 8, 10, 45, 76], "In": [1, 2, 3, 8, 31, 32, 35, 36, 51, 52, 54, 75, 76, 77, 79, 80, 81, 82, 83, 84, 87, 88, 89, 90, 91, 92, 93, 94, 95], "particular": [1, 4, 8, 11, 12, 14, 17, 18, 20, 22, 23, 24, 27, 32, 36, 46, 51, 55, 59, 63, 68, 72, 73, 75, 77, 80, 82, 86, 87, 89, 91, 93, 94], "satisfi": [1, 3, 31], "requir": [1, 2, 4, 5, 6, 7, 8, 9, 10, 26, 30, 32, 33, 34, 35, 36, 37, 40, 46, 49, 50, 53, 60, 61, 63, 65, 73, 74, 75, 81, 82, 84, 90], "argument": [1, 2, 3, 4, 8, 14, 21, 23, 26, 27, 32, 35, 36, 37, 42, 47, 50, 51, 52, 53, 55, 58, 59, 60, 61, 63, 67, 68, 69, 71, 77, 80, 81, 82, 83, 87, 88, 91, 94, 95], "when": [1, 2, 3, 4, 8, 10, 12, 21, 22, 32, 36, 37, 40, 42, 46, 50, 53, 55, 56, 58, 60, 61, 63, 64, 76, 77, 79, 80, 83, 86, 90, 91, 92, 93, 94, 95], "The": [1, 2, 3, 4, 5, 6, 8, 10, 11, 12, 14, 16, 17, 18, 20, 21, 22, 23, 24, 26, 27, 28, 29, 31, 32, 35, 36, 37, 39, 40, 41, 42, 43, 44, 46, 50, 51, 52, 53, 56, 58, 59, 60, 61, 63, 65, 68, 69, 71, 73, 75, 76, 77, 79, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95], "rate": [1, 2, 3, 8, 33, 46, 75, 95], "set": [1, 2, 3, 4, 7, 8, 10, 11, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 26, 27, 28, 31, 32, 35, 36, 37, 41, 42, 44, 46, 50, 51, 53, 56, 58, 59, 60, 61, 63, 65, 67, 68, 76, 77, 79, 80, 82, 86, 87, 89, 90, 91, 92, 93, 94, 95], "note": [1, 2, 3, 5, 6, 8, 10, 23, 27, 29, 32, 35, 36, 37, 42, 46, 51, 56, 58, 59, 60, 61, 63, 64, 68, 74, 75, 76, 77, 79, 80, 81, 83, 84, 86, 87, 88, 89, 91, 92, 93, 94, 95], "you": [1, 2, 3, 4, 5, 8, 12, 14, 31, 32, 34, 35, 36, 37, 42, 49, 50, 51, 53, 56, 58, 59, 60, 61, 63, 64, 65, 68, 69, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95], "high": [1, 2, 14, 35, 37, 46, 58, 61, 63, 76, 77, 81, 83, 84, 88, 91, 92, 93, 94, 95], "mai": [1, 2, 3, 4, 8, 11, 19, 20, 25, 31, 32, 34, 35, 36, 37, 40, 42, 46, 51, 52, 56, 58, 59, 60, 61, 63, 65, 68, 72, 74, 76, 77, 79, 80, 81, 82, 83, 84, 86, 87, 88, 90, 91, 92, 94, 95], "imposs": [1, 8, 84], "also": [1, 2, 3, 4, 5, 8, 20, 29, 31, 32, 35, 36, 37, 42, 45, 50, 51, 60, 63, 68, 71, 72, 73, 75, 76, 77, 79, 80, 82, 83, 84, 86, 87, 88, 90, 91, 92, 93, 94, 95], "low": [1, 8, 46, 51, 73, 76, 77, 80, 84, 88, 92], "zero": [1, 3, 4, 32, 36, 39, 46, 47, 76, 83, 87, 88, 89], "forc": [1, 2, 3, 4, 36, 76, 95], "instead": [1, 2, 3, 8, 11, 14, 28, 31, 32, 35, 36, 37, 40, 46, 50, 51, 53, 55, 59, 60, 61, 63, 64, 67, 69, 71, 74, 75, 79, 80, 82, 83, 84, 87, 88, 89, 91, 92, 93, 94, 95], "onli": [1, 2, 3, 4, 5, 8, 14, 21, 22, 26, 31, 32, 35, 36, 37, 39, 40, 45, 46, 47, 50, 51, 60, 61, 63, 65, 67, 71, 72, 73, 75, 76, 77, 80, 83, 86, 87, 88, 89, 90, 91, 92, 94, 95], "guarante": [1, 3, 4, 13, 19, 25, 32, 34, 36, 38, 40, 49, 74], "produc": [1, 2, 4, 8, 14, 42, 51, 61, 63, 65, 67, 73, 75, 79, 80, 82, 83, 84, 86, 87, 88, 89, 90, 92, 93, 94, 95], "higher": [1, 4, 8, 31, 37, 39, 40, 42, 44, 51, 52, 63, 77, 80, 82, 88], "opposit": [1, 95], "occur": [1, 3, 8, 31, 45, 58, 76, 77, 82, 83, 89], "small": [1, 3, 8, 31, 35, 42, 46, 52, 59, 80, 81, 83, 87, 89, 94], "numpi": [1, 3, 4, 5, 8, 10, 16, 27, 35, 36, 42, 44, 45, 47, 50, 55, 58, 63, 64, 69, 71, 75, 76, 77, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 91, 92, 93, 94, 95], "max": [1, 37, 60, 61, 77, 83, 89], "tri": [1, 32, 36, 90], "befor": [1, 2, 3, 32, 36, 44, 46, 60, 63, 68, 80, 82, 84, 86, 89, 91, 93, 94], "option": [1, 2, 3, 4, 5, 6, 7, 10, 11, 14, 21, 22, 26, 31, 32, 35, 36, 37, 40, 42, 45, 46, 47, 50, 51, 52, 53, 55, 56, 58, 59, 60, 61, 63, 65, 67, 68, 71, 72, 73, 75, 76, 77, 79, 82, 83, 84, 87, 91, 92, 93], "left": [1, 2, 37, 39, 44, 46, 53, 56, 59, 76, 77, 87, 88, 89, 92], "stochast": 1, "exceed": 1, "m": [1, 4, 32, 36, 41, 42, 51, 56, 58, 59, 60, 76, 77, 81, 86, 87, 88, 95], "max_prob": 1, "min_prob": 1, "dirichlet": 1, "ones": [1, 32, 36, 50, 82, 84, 92], "length": [1, 4, 10, 22, 23, 31, 33, 37, 46, 53, 56, 60, 61, 63, 65, 68, 72, 75, 87, 89, 92, 93, 95], "must": [1, 2, 3, 4, 14, 31, 32, 33, 34, 36, 37, 40, 42, 43, 46, 49, 50, 51, 52, 53, 60, 61, 63, 65, 67, 68, 69, 71, 72, 75, 86, 90, 92, 95], "max_balls_per_bin": 1, "min_balls_per_bin": 1, "uniformli": 1, "integ": [1, 2, 3, 8, 10, 31, 35, 37, 43, 46, 47, 51, 53, 59, 65, 67, 68, 69, 71, 72, 75, 82, 86, 87, 88, 92, 93, 94, 95], "ball": [1, 81], "bin": [1, 3, 53, 76, 77, 89], "ensur": [1, 2, 8, 32, 36, 46, 47, 58, 61, 63, 75, 76, 77, 80, 82, 83, 84, 89, 90, 91, 93, 94], "most": [1, 3, 4, 5, 8, 14, 31, 35, 37, 42, 50, 51, 52, 53, 56, 58, 59, 60, 61, 64, 67, 71, 72, 73, 74, 75, 76, 77, 79, 80, 82, 84, 86, 87, 88, 89, 91, 92, 93, 94], "least": [1, 8, 16, 27, 31, 35, 51, 52, 58, 61, 71, 77, 82, 83, 86, 89, 92], "int_arrai": [1, 46], "can": [2, 3, 4, 5, 6, 7, 11, 12, 14, 28, 31, 32, 33, 34, 35, 36, 37, 41, 42, 43, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 63, 64, 65, 68, 69, 72, 73, 74, 75, 76, 79, 80, 83, 87, 88, 89, 90, 91, 92, 93, 94, 95], "model": [2, 3, 4, 8, 14, 16, 26, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 45, 50, 51, 52, 53, 55, 56, 58, 59, 60, 61, 63, 64, 65, 67, 68, 69, 71, 72, 74, 76, 77, 81, 85, 90, 92, 95], "For": [2, 3, 4, 5, 7, 8, 9, 14, 20, 30, 31, 32, 35, 36, 37, 40, 42, 46, 50, 51, 52, 53, 55, 56, 58, 59, 60, 61, 63, 65, 67, 69, 71, 72, 73, 75, 77, 79, 81, 82, 83, 84, 86, 87, 88, 89, 90, 92, 93, 94, 95], "regular": [2, 3, 35, 50], "multi": [2, 3, 8, 31, 32, 35, 36, 37, 41, 42, 43, 46, 47, 52, 53, 54, 55, 60, 61, 73, 82, 84, 85], "task": [2, 4, 5, 8, 9, 10, 12, 13, 14, 26, 28, 31, 35, 40, 42, 43, 44, 46, 51, 53, 61, 63, 73, 75, 80, 81, 82, 84, 87, 89, 92, 94, 95], "cleanlearn": [2, 3, 8, 21, 26, 32, 46, 50, 62, 63, 64, 73, 74, 91, 93, 94], "wrap": [2, 32, 36, 50, 60, 63, 73, 76, 77, 79, 80, 84, 91, 93, 94], "instanc": [2, 3, 4, 5, 8, 11, 14, 16, 17, 18, 20, 21, 22, 23, 24, 26, 27, 28, 32, 36, 42, 50, 59, 60, 63, 68, 75, 76, 77, 79, 80, 83, 84, 88, 93, 94], "sklearn": [2, 3, 4, 6, 8, 16, 27, 31, 36, 42, 46, 50, 60, 63, 64, 73, 75, 76, 77, 79, 80, 82, 83, 84, 86, 87, 89, 90, 91, 93, 94], "classifi": [2, 3, 36, 42, 46, 51, 54, 60, 61, 73, 74, 75, 79, 80, 82, 86, 87, 89, 90, 92, 93, 94, 95], "adher": [2, 36, 63], "estim": [2, 3, 4, 7, 11, 20, 31, 35, 36, 37, 40, 46, 51, 52, 53, 58, 60, 63, 65, 67, 71, 73, 74, 75, 76, 77, 79, 80, 82, 83, 85, 87, 88, 89, 90, 91, 92, 95], "api": [2, 3, 12, 50, 56, 59, 60, 63, 74, 82, 91], "defin": [2, 3, 4, 5, 8, 12, 20, 31, 32, 33, 35, 36, 37, 61, 63, 65, 75, 76, 77, 79, 82, 86, 89, 95], "four": [2, 8, 81, 84, 95], "clf": [2, 3, 4, 42, 63, 73, 79, 82, 84, 87, 93], "fit": [2, 3, 4, 6, 8, 16, 34, 36, 49, 50, 60, 62, 63, 73, 76, 77, 79, 80, 82, 83, 84, 86, 87, 89, 90, 91, 93, 94, 95], "sample_weight": [2, 36, 63, 84], "predict_proba": [2, 4, 31, 34, 36, 42, 49, 50, 75, 76, 77, 79, 80, 82, 84, 86, 87, 89, 93], "predict": [2, 3, 4, 6, 8, 14, 20, 21, 24, 26, 29, 31, 34, 35, 36, 37, 39, 40, 42, 43, 45, 46, 49, 50, 51, 52, 53, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 71, 72, 73, 74, 81, 82, 84, 85, 89, 91, 92, 94, 95], "score": [2, 3, 4, 5, 8, 11, 16, 17, 18, 20, 21, 22, 23, 24, 26, 27, 31, 35, 37, 39, 42, 44, 51, 52, 53, 55, 56, 58, 59, 60, 61, 62, 63, 64, 67, 69, 71, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 89, 91, 93, 94], "data": [2, 3, 4, 5, 6, 7, 9, 11, 12, 13, 14, 16, 17, 18, 20, 21, 22, 23, 24, 26, 27, 28, 31, 33, 34, 35, 36, 37, 42, 43, 46, 49, 50, 51, 52, 53, 54, 58, 60, 61, 62, 63, 68, 69, 70, 71, 72, 74, 78, 83, 85, 90, 94], "e": [2, 3, 4, 8, 10, 20, 31, 32, 35, 36, 37, 40, 42, 43, 46, 47, 51, 52, 53, 54, 56, 59, 60, 61, 63, 65, 73, 75, 76, 77, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 93, 94], "featur": [2, 3, 4, 6, 8, 14, 17, 21, 22, 23, 24, 26, 27, 42, 46, 60, 63, 73, 76, 77, 79, 80, 82, 84, 86, 87, 91, 93], "element": [2, 3, 4, 31, 37, 39, 46, 51, 53, 61, 68, 69, 71, 75, 80, 82, 94, 95], "first": [2, 4, 8, 15, 22, 23, 31, 35, 42, 46, 51, 52, 56, 59, 61, 63, 75, 76, 79, 82, 83, 86, 87, 88, 89, 91, 92, 93, 94, 95], "index": [2, 8, 22, 31, 37, 45, 46, 47, 52, 61, 63, 68, 71, 72, 75, 76, 77, 79, 81, 82, 83, 84, 86, 87, 88, 89, 91, 92, 94, 95], "should": [2, 3, 4, 5, 8, 12, 20, 22, 27, 31, 32, 35, 36, 37, 39, 40, 42, 44, 45, 46, 50, 51, 52, 55, 56, 58, 59, 60, 61, 63, 64, 68, 69, 71, 72, 75, 76, 77, 79, 80, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95], "correspond": [2, 3, 4, 8, 11, 12, 14, 16, 17, 18, 20, 21, 22, 23, 24, 26, 27, 29, 31, 32, 35, 36, 37, 39, 40, 42, 45, 46, 51, 52, 53, 55, 56, 58, 59, 60, 61, 63, 65, 68, 69, 71, 72, 75, 76, 77, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 91, 92, 93, 94, 95], "differ": [2, 4, 5, 8, 11, 13, 19, 22, 23, 25, 31, 32, 34, 35, 36, 37, 38, 42, 46, 47, 49, 51, 56, 58, 60, 63, 75, 76, 77, 79, 80, 83, 84, 86, 87, 89, 90, 93], "sampl": [2, 3, 4, 6, 8, 14, 18, 37, 39, 42, 53, 56, 59, 61, 63, 64, 73, 74, 81, 82, 84, 85, 87, 88, 91, 92, 94, 95], "size": [2, 8, 27, 32, 35, 36, 37, 42, 53, 58, 59, 63, 65, 67, 79, 82, 83, 84, 86, 87, 88, 90, 92, 94], "here": [2, 4, 5, 8, 12, 35, 37, 40, 50, 51, 52, 53, 55, 56, 59, 60, 71, 73, 74, 75, 76, 77, 79, 80, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95], "re": [2, 4, 32, 36, 45, 51, 63, 73, 75, 76, 79, 80, 82, 91, 92, 93, 94, 95], "weight": [2, 8, 32, 33, 36, 42, 51, 58, 61, 63, 75, 76, 77, 80, 94], "loss": [2, 33, 50, 61, 63, 83], "while": [2, 3, 8, 32, 35, 36, 41, 42, 46, 63, 73, 82, 83, 84, 86, 87, 91], "train": [2, 3, 4, 8, 14, 16, 32, 33, 34, 36, 42, 46, 50, 51, 56, 59, 60, 63, 64, 74, 76, 77, 79, 80, 81, 83, 84, 86, 87, 88, 90, 92, 95], "support": [2, 3, 4, 10, 12, 28, 29, 35, 42, 46, 47, 60, 61, 71, 73, 74, 75, 76, 77, 82, 83], "your": [2, 3, 4, 7, 8, 14, 31, 32, 34, 35, 36, 37, 42, 46, 49, 50, 51, 52, 53, 55, 60, 61, 63, 64, 65, 67, 68, 74, 75, 79, 81, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95], "recommend": [2, 4, 8, 11, 14, 35, 37, 51, 76, 77, 82, 83, 90, 91], "furthermor": 2, "correctli": [2, 3, 8, 31, 32, 36, 37, 40, 47, 52, 53, 58, 59, 63, 65, 80, 82, 87, 88, 91, 92, 94], "clonabl": [2, 63], "via": [2, 4, 8, 11, 14, 16, 20, 31, 33, 35, 36, 42, 46, 51, 56, 59, 60, 61, 63, 64, 67, 71, 75, 76, 77, 79, 80, 81, 82, 83, 87, 88, 89, 90, 91, 92, 93, 94, 95], "base": [2, 3, 4, 5, 8, 10, 11, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 32, 35, 36, 37, 40, 41, 42, 44, 45, 46, 47, 50, 51, 52, 53, 55, 58, 60, 61, 63, 64, 67, 69, 71, 75, 76, 77, 79, 80, 81, 83, 84, 86, 87, 88, 89, 91, 92, 93, 95], "clone": [2, 63, 87], "intern": [2, 3, 5, 8, 9, 10, 11, 12, 14, 16, 17, 18, 20, 21, 22, 23, 24, 26, 27, 28, 29, 35, 39, 40, 41, 42, 43, 44, 45, 46, 47, 55, 59, 63, 69, 74, 75, 76, 82, 84, 86, 87, 88, 89, 95], "multipl": [2, 3, 4, 10, 11, 29, 31, 37, 45, 51, 52, 53, 55, 58, 59, 63, 73, 76, 77, 82, 83, 85, 87, 88, 91], "g": [2, 3, 4, 8, 10, 20, 31, 32, 36, 37, 43, 46, 53, 54, 56, 59, 60, 61, 63, 73, 75, 76, 77, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 93, 94], "manual": [2, 63, 75, 82, 89, 90, 91, 93, 94, 95], "pytorch": [2, 32, 33, 36, 63, 73, 75, 82, 85, 87, 92], "call": [2, 3, 4, 8, 11, 12, 16, 17, 18, 20, 21, 22, 23, 24, 26, 27, 32, 36, 42, 46, 50, 60, 63, 75, 76, 77, 80, 82, 84, 87, 89, 90, 92, 94, 95], "__init__": [2, 33, 63, 83], "independ": [2, 3, 8, 52, 63, 80, 90, 95], "compat": [2, 32, 35, 36, 50, 63, 64, 67, 71, 73, 82, 90, 91, 93, 94], "neural": [2, 33, 50, 60, 63, 75, 82, 83, 87, 89], "network": [2, 32, 33, 36, 50, 60, 63, 75, 80, 82, 83, 87, 89, 94], "typic": [2, 32, 36, 60, 63, 75, 77, 79, 80, 83, 89, 90, 93, 94], "initi": [2, 3, 11, 16, 32, 36, 51, 63, 80, 82, 93], "insid": [2, 36, 63, 82, 84], "There": [2, 3, 73, 84, 86], "two": [2, 3, 8, 16, 22, 31, 32, 35, 36, 43, 46, 56, 58, 59, 74, 76, 77, 79, 80, 82, 83, 84, 87, 91, 92, 94, 95], "new": [2, 5, 12, 20, 32, 35, 36, 41, 45, 46, 51, 63, 75, 76, 80, 81, 82, 89, 90, 94, 95], "notion": 2, "confid": [2, 3, 8, 20, 31, 35, 37, 40, 42, 46, 51, 52, 53, 56, 58, 59, 60, 61, 63, 67, 71, 73, 79, 80, 83, 84, 86, 87, 88, 90, 92, 93, 95], "packag": [2, 4, 5, 7, 8, 9, 13, 30, 34, 37, 38, 46, 49, 56, 59, 63, 73, 75, 76, 77, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 91, 92, 93, 94, 95], "prune": [2, 3, 37, 53, 63, 74, 88], "everyth": [2, 59, 84], "els": [2, 59, 76, 81, 82, 83, 86, 87, 88], "mathemat": [2, 3, 8, 40], "keep": [2, 11, 12, 46, 73, 76, 81, 82, 92], "belong": [2, 3, 8, 31, 37, 39, 40, 52, 53, 54, 55, 60, 61, 65, 69, 71, 72, 77, 83, 84, 87, 89, 92, 95], "2": [2, 3, 4, 5, 10, 16, 17, 18, 20, 21, 22, 23, 24, 26, 27, 31, 32, 33, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 50, 52, 53, 55, 56, 59, 60, 61, 63, 64, 68, 69, 71, 72, 81, 82, 90], "error": [2, 3, 4, 8, 32, 36, 37, 39, 40, 46, 52, 53, 55, 56, 58, 59, 61, 63, 65, 67, 68, 71, 74, 75, 76, 77, 79, 80, 81, 85, 93], "erron": [2, 3, 31, 37, 40, 46, 52, 53, 61, 63, 64, 65, 89, 91], "import": [2, 3, 4, 5, 6, 8, 10, 11, 12, 16, 17, 18, 20, 21, 22, 24, 26, 27, 28, 31, 35, 42, 44, 45, 51, 55, 58, 63, 64, 69, 71, 72, 73, 79, 80, 82, 87, 88, 89, 91, 92, 93, 94, 95], "linear_model": [2, 4, 31, 46, 63, 73, 75, 76, 77, 80, 82, 84, 86, 89, 94], "logisticregress": [2, 3, 4, 31, 46, 73, 75, 76, 77, 80, 82, 84, 86, 89, 94], "logreg": 2, "cl": [2, 12, 26, 63, 73, 82, 84, 91, 93, 94], "pass": [2, 3, 4, 6, 8, 10, 11, 12, 14, 21, 26, 28, 32, 35, 36, 37, 41, 42, 46, 50, 51, 53, 60, 61, 63, 69, 73, 75, 76, 77, 80, 81, 82, 84, 86, 88, 89, 91, 94], "x_train": [2, 76, 77, 84, 86, 87, 91, 93], "labels_maybe_with_error": 2, "had": [2, 3, 63, 88], "issu": [2, 3, 4, 6, 9, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 27, 28, 31, 32, 34, 35, 36, 37, 49, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 78, 85, 86, 90, 91, 94], "pred": [2, 37, 46, 90, 91, 93, 94], "x_test": [2, 76, 77, 84, 87, 91, 93], "might": [2, 51, 63, 68, 76, 77, 82, 83, 88, 93, 94], "case": [2, 3, 11, 31, 42, 51, 63, 75, 76, 77, 79, 81, 82, 83, 84, 89, 91, 93, 94, 95], "standard": [2, 3, 4, 26, 31, 37, 50, 52, 53, 55, 61, 63, 73, 76, 77, 79, 81, 84, 88, 93], "adapt": [2, 32, 34, 46, 49, 63, 89], "skorch": [2, 63, 73, 82], "kera": [2, 49, 56, 59, 63, 73, 82, 88], "scikera": [2, 50, 63, 82], "open": [2, 35, 81, 88, 95], "doesn": [2, 63, 73], "t": [2, 3, 8, 15, 23, 32, 33, 35, 36, 37, 42, 44, 45, 55, 60, 61, 63, 69, 71, 72, 73, 76, 77, 79, 80, 81, 83, 84, 87, 88, 95], "alreadi": [2, 4, 8, 14, 32, 35, 36, 40, 50, 51, 63, 73, 75, 76, 77, 79, 80, 81, 82, 83, 84, 86, 88, 89, 91, 93, 94], "exist": [2, 4, 8, 10, 16, 32, 35, 36, 45, 50, 56, 58, 60, 63, 73, 74, 76, 77, 80, 86, 94, 95], "made": [2, 4, 14, 32, 36, 63, 80, 82, 83, 86, 88, 90, 91, 93, 94], "easi": [2, 40, 63, 76, 77, 81, 82, 84, 87], "inherit": [2, 5, 33, 63], "baseestim": [2, 36, 63], "yourmodel": [2, 63], "def": [2, 5, 12, 32, 36, 50, 63, 75, 76, 77, 81, 82, 83, 84, 86, 87, 89, 91, 94, 95], "self": [2, 3, 4, 5, 8, 10, 11, 12, 14, 27, 32, 33, 35, 36, 37, 42, 60, 61, 63, 76, 80, 81, 83, 87, 92, 93, 94, 95], "refer": [2, 8, 14, 32, 36, 52, 53, 55, 56, 58, 59, 63, 67, 68, 76, 77, 79, 80, 82, 83, 84, 87, 90, 91], "origin": [2, 4, 8, 36, 37, 45, 46, 50, 52, 53, 56, 59, 60, 63, 64, 67, 69, 71, 76, 79, 80, 82, 83, 84, 88, 89, 91, 93, 94, 95], "total": [2, 3, 31, 35, 46, 52, 72, 82, 83, 92], "state": [2, 3, 4, 32, 33, 36, 41, 63, 84, 87, 88, 95], "art": [2, 33, 84, 87], "northcutt": [2, 3, 31, 60, 61], "et": [2, 3, 31, 33, 60, 61], "al": [2, 3, 31, 33, 60, 61], "2021": [2, 3, 31, 60, 61], "weak": [2, 59], "supervis": [2, 8, 76, 77, 82, 86], "find": [2, 4, 8, 11, 12, 14, 17, 18, 20, 21, 22, 23, 24, 27, 31, 32, 34, 35, 36, 37, 41, 45, 46, 49, 56, 59, 60, 61, 63, 65, 69, 71, 74, 76, 85, 90], "uncertainti": [2, 8, 39, 60, 63, 82, 89, 91], "It": [2, 3, 4, 5, 8, 10, 11, 14, 20, 23, 26, 28, 29, 32, 36, 37, 40, 42, 51, 58, 59, 63, 73, 76, 77, 80, 82, 83, 84, 87, 90, 94], "work": [2, 3, 5, 8, 10, 26, 31, 32, 35, 36, 37, 40, 45, 46, 47, 50, 51, 61, 63, 73, 74, 76, 77, 81, 89, 91, 94], "includ": [2, 3, 4, 5, 8, 11, 16, 17, 18, 20, 21, 22, 24, 26, 27, 28, 31, 32, 34, 35, 36, 45, 46, 49, 51, 52, 55, 56, 60, 61, 63, 67, 68, 69, 71, 73, 74, 76, 77, 79, 80, 82, 83, 84, 87, 88, 89, 95], "deep": [2, 34, 36, 49, 50, 63, 80], "see": [2, 3, 4, 11, 12, 28, 31, 32, 35, 36, 37, 42, 46, 50, 52, 53, 55, 56, 59, 60, 61, 63, 69, 71, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 86, 87, 88, 89, 91, 92, 93, 94, 95], "subfield": 2, "theori": [2, 84], "machin": [2, 4, 12, 14, 28, 34, 49, 63, 76, 77, 81, 86], "across": [2, 3, 4, 5, 8, 11, 20, 31, 35, 42, 52, 59, 60, 76, 77, 79, 80, 81, 82, 83, 84, 87, 88, 90], "varieti": [2, 82, 93, 94], "like": [2, 3, 4, 5, 8, 12, 31, 32, 35, 36, 37, 40, 46, 50, 51, 52, 55, 56, 58, 61, 63, 64, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 79, 80, 82, 84, 86, 87, 88, 89, 91, 92, 93, 94, 95], "pu": [2, 46], "input": [2, 3, 4, 8, 14, 22, 31, 32, 35, 36, 40, 42, 45, 46, 47, 50, 59, 63, 73, 74, 75, 77, 80, 81, 82, 83, 84, 86, 87, 88, 91, 92, 94, 95], "discret": [2, 29, 37, 40, 46, 60, 61, 65, 67, 68], "vector": [2, 3, 4, 8, 14, 37, 40, 42, 43, 46, 60, 61, 73, 75, 76, 77, 79, 80, 83, 84, 87, 88, 89, 92, 94, 95], "would": [2, 3, 4, 32, 35, 36, 37, 46, 53, 63, 73, 76, 82, 83, 84, 89, 91, 94, 95], "obtain": [2, 4, 6, 8, 14, 37, 51, 53, 56, 59, 61, 64, 75, 77, 80, 82, 86, 88, 90, 92, 95], "been": [2, 31, 37, 40, 45, 46, 51, 52, 56, 58, 60, 61, 63, 75, 76, 79, 82, 84, 86, 87, 88, 89, 92, 95], "dure": [2, 8, 14, 60, 63, 75, 79, 80, 82, 84, 87, 90, 91, 93, 94, 95], "denot": [2, 3, 40, 42, 46, 53, 60, 61, 71], "tild": 2, "paper": [2, 8, 51, 60, 69, 71, 81, 84, 86, 89, 91, 95], "cv_n_fold": [2, 3, 63, 94], "5": [2, 3, 4, 6, 16, 17, 18, 20, 21, 22, 24, 26, 27, 28, 31, 36, 37, 39, 41, 42, 46, 51, 52, 55, 56, 59, 63, 64, 71, 76, 80, 81, 82, 87, 88, 89, 90, 92, 94, 95], "converge_latent_estim": [2, 3], "pulearn": [2, 46], "find_label_issues_kwarg": [2, 8, 63, 74, 82, 84], "label_quality_scores_kwarg": [2, 8], "low_memori": [2, 53, 69, 82], "clean": [2, 58, 61, 63, 64, 73, 76, 77, 81, 91, 93, 94], "even": [2, 3, 31, 35, 39, 40, 46, 63, 75, 82, 84, 86, 87, 88], "messi": [2, 63, 84], "ridden": [2, 63], "autom": [2, 63, 73, 77, 81, 82], "robust": [2, 40, 63, 77, 82], "prone": [2, 63], "out": [2, 3, 4, 8, 14, 24, 32, 36, 37, 42, 50, 53, 54, 56, 59, 60, 61, 63, 64, 72, 73, 74, 81, 82, 84, 85, 87, 88, 89, 91, 92, 94, 95], "current": [2, 3, 5, 8, 11, 12, 20, 32, 36, 37, 42, 51, 58, 63, 76, 77, 82, 86, 88], "intend": [2, 11, 12, 13, 14, 28, 29, 38, 51, 67, 71, 75, 76, 77, 80, 84], "A": [2, 3, 4, 5, 8, 10, 11, 12, 16, 17, 18, 20, 21, 22, 23, 24, 26, 27, 28, 31, 32, 33, 36, 37, 40, 41, 42, 43, 44, 45, 46, 50, 51, 52, 55, 58, 59, 60, 61, 63, 65, 67, 68, 72, 74, 75, 76, 79, 80, 81, 82, 83, 84, 86, 88, 90, 93, 94, 95], "follow": [2, 3, 8, 12, 26, 29, 31, 32, 35, 36, 42, 44, 51, 52, 56, 58, 59, 60, 63, 75, 76, 77, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 91, 92, 93, 94, 95], "experiment": [2, 32, 33, 35, 36, 53, 74, 82], "wrapper": [2, 4, 50, 75, 91, 93, 94], "around": [2, 4, 58, 76, 77, 88, 89, 95], "fasttext": [2, 49], "store": [2, 4, 8, 10, 11, 16, 17, 18, 20, 21, 22, 23, 24, 26, 27, 28, 32, 35, 36, 60, 63, 79, 80, 81, 82, 92, 93, 94, 95], "along": [2, 42, 53, 71, 76, 77, 82, 83, 89], "dimens": [2, 46, 65, 68, 82, 83, 89, 92], "select": [2, 7, 8, 22, 51, 61, 82, 83, 86, 89], "split": [2, 3, 4, 8, 10, 35, 42, 45, 46, 63, 75, 76, 77, 79, 80, 81, 83, 84, 87, 90, 93, 95], "cross": [2, 3, 8, 31, 37, 40, 41, 42, 53, 56, 59, 61, 63, 64, 74, 75, 76, 77, 79, 80, 81, 82, 84, 85, 87, 88, 91, 92, 93, 94, 95], "fold": [2, 3, 31, 37, 40, 63, 75, 79, 81, 82, 88, 92, 93], "By": [2, 31, 52, 53, 63, 76, 82, 92], "need": [2, 3, 8, 31, 32, 35, 36, 37, 52, 53, 55, 60, 63, 73, 75, 76, 77, 80, 82, 84, 86, 87, 88, 92, 94], "holdout": [2, 3, 63], "comput": [2, 3, 4, 5, 6, 8, 17, 18, 20, 21, 22, 23, 24, 27, 31, 32, 33, 35, 36, 37, 39, 40, 41, 42, 46, 51, 52, 53, 55, 58, 59, 60, 61, 63, 64, 65, 67, 73, 74, 76, 77, 81, 84, 85, 88, 89, 91, 92, 94], "them": [2, 3, 4, 5, 7, 8, 9, 10, 23, 30, 32, 34, 35, 36, 37, 49, 51, 60, 63, 74, 76, 77, 79, 80, 82, 83, 86, 87, 89, 91, 92, 93, 94, 95], "numer": [2, 3, 4, 8, 11, 20, 26, 29, 42, 58, 60, 63, 68, 73, 74, 75, 76, 77, 78, 80, 83, 84, 86, 87, 89, 91, 93, 94], "consist": [2, 3, 32, 36, 46, 51, 92, 95], "latent": [2, 3, 40], "thei": [2, 3, 4, 13, 19, 22, 25, 32, 33, 34, 36, 37, 38, 44, 46, 50, 53, 58, 61, 63, 64, 67, 71, 73, 75, 76, 77, 79, 80, 82, 83, 84, 86, 89, 91, 94, 95], "relat": [2, 3, 11, 17, 18, 22, 23, 24, 27, 40, 46, 52, 63, 77, 80], "close": [2, 3, 8, 35, 40, 60, 75, 76, 77, 79, 80, 82, 83, 84, 88], "form": [2, 3, 8, 32, 33, 36, 40, 45, 46, 61, 63, 82], "equival": [2, 3, 32, 36, 40, 60, 89], "iter": [2, 3, 31, 32, 36, 37, 46, 52, 53, 63, 82, 86, 92], "enforc": [2, 32, 36, 46], "perfectli": [2, 31, 52, 84], "certain": [2, 3, 4, 32, 36, 50, 59, 63, 76, 77, 81, 88, 89], "dict": [2, 3, 4, 8, 10, 11, 12, 14, 16, 17, 18, 20, 21, 22, 23, 24, 26, 27, 31, 32, 35, 36, 37, 41, 42, 46, 50, 51, 52, 53, 55, 56, 58, 59, 60, 61, 63, 71, 76, 77, 82, 83, 95], "keyword": [2, 3, 4, 8, 14, 21, 23, 26, 32, 35, 36, 37, 39, 42, 45, 50, 51, 53, 60, 61, 63, 69, 71, 76], "filter": [2, 3, 8, 35, 45, 52, 54, 55, 57, 59, 66, 67, 68, 70, 71, 72, 73, 74, 75, 77, 80, 81, 82, 83, 88, 91, 92, 93, 94, 95], "find_label_issu": [2, 3, 8, 26, 35, 37, 52, 53, 54, 55, 56, 57, 58, 59, 62, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 82, 88, 91, 92, 93, 94, 95], "particularli": [2, 73, 86, 89], "filter_bi": [2, 3, 35, 37, 53, 74, 82], "frac_nois": [2, 37, 53, 69, 82], "min_examples_per_class": [2, 37, 53, 77, 82, 84], "impact": [2, 8, 76, 77, 83], "ml": [2, 4, 8, 13, 63, 73, 76, 77, 79, 80, 83, 86, 87, 93, 94], "accuraci": [2, 33, 61, 75, 82, 83, 84, 86, 89, 91, 92, 93, 94], "n_job": [2, 35, 37, 53, 65, 67, 69, 82, 89, 92], "disabl": [2, 32, 36, 37, 89], "process": [2, 3, 5, 11, 14, 32, 35, 36, 37, 45, 51, 53, 59, 65, 67, 69, 75, 76, 82, 86, 90, 94], "caus": [2, 37, 42, 76, 77, 82], "rank": [2, 3, 8, 31, 35, 37, 42, 52, 53, 54, 56, 57, 59, 60, 62, 66, 68, 69, 70, 72, 73, 74, 76, 77, 81, 82, 88, 89, 91, 92, 93, 94, 95], "get_label_quality_scor": [2, 35, 37, 38, 42, 51, 53, 54, 55, 56, 57, 58, 61, 62, 64, 66, 67, 69, 70, 71, 74, 84, 88, 91, 92, 95], "adjust_pred_prob": [2, 8, 55, 60, 61, 84], "control": [2, 4, 7, 8, 14, 35, 37, 51, 59, 60, 63, 69, 71, 76, 77, 81, 82], "how": [2, 3, 4, 8, 10, 11, 12, 14, 20, 31, 32, 33, 35, 36, 40, 46, 51, 52, 55, 56, 58, 60, 61, 63, 67, 71, 73, 76, 77, 79, 80, 81, 83, 88, 89, 90, 91, 92, 93, 94], "much": [2, 8, 31, 35, 37, 63, 82, 84, 86, 89], "output": [2, 3, 4, 8, 14, 32, 33, 36, 40, 46, 50, 51, 52, 56, 58, 59, 60, 63, 67, 68, 71, 72, 73, 74, 75, 76, 80, 81, 82, 83, 88, 89, 90, 91, 94], "print": [2, 4, 5, 16, 17, 18, 20, 21, 22, 23, 24, 26, 27, 28, 29, 31, 32, 35, 36, 37, 46, 51, 52, 53, 58, 60, 61, 63, 65, 67, 68, 72, 74, 75, 77, 80, 81, 82, 83, 84, 86, 87, 88, 89, 91, 92, 93, 94, 95], "suppress": [2, 35, 51, 58, 60, 61, 63, 65, 67, 68, 92, 95], "statement": [2, 35, 51, 58, 60, 61, 63, 65, 67, 68], "big": [2, 35, 53, 59, 63, 84], "limit": [2, 4, 14, 35, 53, 88, 92, 95], "memori": [2, 32, 35, 36, 53, 59, 65, 67, 76, 92], "label_issues_batch": [2, 34, 53, 82], "find_label_issues_batch": [2, 34, 35, 53, 82], "pred_prob": [2, 3, 4, 6, 8, 14, 21, 22, 24, 27, 31, 35, 37, 39, 40, 41, 42, 43, 46, 47, 51, 52, 53, 55, 56, 59, 60, 61, 65, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 86, 87, 88, 93, 94], "threshold": [2, 3, 5, 8, 16, 17, 18, 20, 24, 26, 27, 35, 58, 59, 60, 61, 67, 71, 76, 88, 89, 92, 95], "inverse_noise_matrix": [2, 3, 8, 40, 46, 74, 84], "label_issu": [2, 35, 37, 53, 56, 63, 65, 74, 75, 80, 82, 83, 84, 87, 91, 93, 94], "clf_kwarg": [2, 3, 8, 63], "clf_final_kwarg": [2, 63], "validation_func": [2, 3, 8], "correct": [2, 4, 8, 31, 35, 37, 39, 51, 52, 53, 55, 56, 58, 59, 61, 63, 64, 67, 71, 73, 75, 79, 80, 83, 84, 86, 88, 90, 91], "result": [2, 3, 8, 11, 14, 16, 17, 18, 20, 21, 22, 23, 24, 26, 27, 32, 35, 36, 37, 39, 44, 46, 53, 55, 56, 59, 61, 63, 64, 65, 67, 71, 75, 76, 77, 79, 80, 82, 83, 84, 86, 87, 91, 92, 93, 94, 95], "identifi": [2, 3, 4, 5, 8, 10, 14, 23, 28, 31, 35, 37, 53, 56, 59, 61, 63, 64, 65, 68, 69, 71, 72, 73, 75, 76, 77, 79, 80, 81, 83, 84, 87, 89, 91, 92, 93, 94, 95], "final": [2, 8, 63, 79, 88, 90, 91, 93], "remain": [2, 63, 74, 83, 87, 91, 93, 94, 95], "datasetlik": [2, 46, 63], "beyond": [2, 4, 5, 7, 9, 30, 73, 92], "pd": [2, 3, 4, 5, 11, 16, 17, 18, 20, 21, 22, 24, 26, 27, 31, 41, 50, 51, 52, 63, 71, 75, 76, 77, 79, 80, 82, 84, 86, 91, 93, 94, 95], "datafram": [2, 3, 4, 5, 10, 11, 16, 17, 18, 20, 21, 22, 23, 24, 26, 27, 31, 35, 41, 46, 47, 50, 51, 52, 63, 68, 72, 74, 75, 76, 77, 79, 80, 82, 83, 84, 86, 91, 92, 94, 95], "scipi": [2, 4, 11, 46], "spars": [2, 4, 8, 11, 14, 16, 27, 46, 47, 79], "csr_matrix": [2, 4, 11, 14, 16, 27], "torch": [2, 32, 33, 36, 75, 80, 81, 83, 89, 94], "util": [2, 4, 8, 14, 28, 32, 33, 36, 38, 51, 56, 59, 63, 73, 74, 75, 76, 77, 82, 83, 84, 89], "tensorflow": [2, 46, 50, 73, 75, 82], "object": [2, 4, 8, 10, 11, 14, 28, 32, 33, 35, 36, 42, 46, 47, 50, 53, 56, 57, 58, 59, 60, 63, 71, 73, 75, 77, 79, 83, 84, 85, 87, 91, 94], "list": [2, 3, 4, 10, 12, 16, 17, 18, 20, 21, 22, 23, 24, 26, 27, 31, 32, 33, 35, 36, 37, 43, 45, 46, 47, 50, 51, 52, 53, 55, 56, 58, 59, 60, 61, 63, 67, 68, 69, 71, 72, 74, 75, 76, 77, 81, 82, 83, 84, 87, 88, 91, 94, 95], "index_list": 2, "subset": [2, 3, 4, 14, 31, 35, 37, 46, 61, 68, 72, 75, 79, 80, 82, 83, 87, 88, 89, 90, 91, 93, 94, 95], "wa": [2, 3, 10, 12, 35, 46, 51, 52, 58, 60, 72, 75, 76, 77, 79, 80, 82, 84, 87, 88, 90, 92, 93, 94, 95], "abl": [2, 3, 8, 63, 75, 82, 84, 86, 87], "format": [2, 3, 4, 8, 10, 32, 35, 36, 37, 40, 41, 42, 43, 46, 47, 50, 51, 52, 53, 56, 59, 60, 61, 63, 65, 67, 68, 71, 72, 75, 76, 77, 79, 81, 83, 86, 91, 92, 93, 95], "make": [2, 3, 16, 32, 35, 36, 42, 50, 73, 75, 76, 77, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 91, 93, 94], "sure": [2, 35, 37, 42, 75, 76, 77, 79, 80, 81, 83, 86, 87, 88, 89, 91, 93, 94], "shuffl": [2, 8, 46, 75, 80, 83, 87, 89], "ha": [2, 3, 4, 8, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 32, 36, 40, 42, 45, 46, 51, 56, 58, 63, 69, 71, 72, 73, 75, 76, 77, 79, 80, 84, 86, 87, 88, 89, 90, 91, 93, 94, 95], "batch": [2, 35, 46, 50, 51, 65, 67, 82, 83, 89], "order": [2, 4, 8, 29, 31, 32, 36, 37, 40, 41, 42, 46, 51, 52, 53, 56, 59, 60, 61, 65, 68, 69, 71, 72, 74, 75, 76, 79, 80, 81, 82, 83, 84, 88, 91, 92, 94, 95], "destroi": [2, 46], "oper": [2, 32, 35, 36, 46, 50, 61, 73, 80, 82, 89, 93, 94], "eg": [2, 8, 46, 56, 59, 76, 77, 82], "repeat": [2, 46, 51, 86, 89], "appli": [2, 32, 34, 36, 37, 42, 43, 45, 46, 55, 60, 69, 75, 76, 77, 79, 82, 83, 86, 87, 89, 90, 91, 92, 93, 94], "array_lik": [2, 3, 31, 37, 46, 53, 60, 64], "some": [2, 3, 4, 8, 12, 20, 31, 32, 34, 36, 37, 40, 45, 46, 49, 51, 52, 53, 55, 56, 59, 60, 61, 63, 65, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 86, 87, 88, 90, 91, 92, 93, 94, 95], "seri": [2, 3, 35, 46, 47, 63, 71, 82], "row": [2, 3, 4, 8, 11, 23, 31, 35, 37, 39, 40, 46, 51, 52, 53, 55, 60, 61, 63, 68, 69, 71, 72, 75, 76, 79, 80, 81, 82, 83, 86, 87, 89, 93, 95], "rather": [2, 3, 22, 31, 46, 50, 51, 58, 67, 71, 86, 90, 92, 94, 95], "leav": [2, 37], "per": [2, 3, 11, 31, 35, 37, 42, 45, 51, 52, 53, 55, 58, 59, 61, 64, 65, 67, 71, 77, 82, 88, 95], "determin": [2, 3, 8, 10, 14, 20, 22, 26, 31, 35, 37, 42, 46, 51, 53, 56, 58, 61, 67, 71, 76, 82, 86, 88, 89, 91], "cutoff": [2, 3, 89], "consid": [2, 3, 4, 8, 11, 14, 21, 22, 24, 27, 31, 32, 36, 37, 46, 51, 58, 60, 61, 64, 67, 71, 75, 79, 80, 82, 83, 84, 88, 89, 90, 91, 92, 93, 94], "section": [2, 3, 5, 8, 74, 79, 83, 88], "3": [2, 3, 4, 5, 8, 29, 31, 32, 36, 37, 40, 41, 42, 43, 44, 45, 46, 50, 53, 60, 61, 63, 64, 69, 71, 81, 82, 90], "equat": [2, 3, 40], "advanc": [2, 3, 4, 7, 8, 14, 58, 60, 71, 74, 77, 78, 84], "user": [2, 3, 4, 8, 12, 14, 23, 28, 29, 32, 36, 37, 58, 60, 61, 63, 67, 71, 84], "specifi": [2, 3, 4, 6, 8, 11, 12, 14, 16, 27, 28, 32, 35, 36, 37, 42, 45, 51, 52, 53, 56, 58, 60, 61, 63, 64, 72, 74, 75, 77, 80, 83, 86, 88, 91, 94], "automat": [2, 3, 4, 22, 31, 73, 79, 80, 81, 82, 83, 86, 87, 88, 91, 92, 93, 94, 95], "greater": [2, 3, 4, 7, 8, 24, 35, 46, 58, 77, 81, 82, 95], "count": [2, 20, 22, 31, 35, 37, 40, 46, 52, 53, 59, 74, 82, 83, 88], "observ": [2, 3, 40, 75, 76, 77, 86, 89, 91], "mislabel": [2, 8, 31, 35, 37, 40, 51, 52, 53, 56, 58, 61, 67, 69, 71, 73, 75, 79, 80, 82, 83, 84, 87, 88, 91, 93, 94], "one": [2, 3, 4, 8, 22, 31, 32, 35, 36, 37, 42, 46, 51, 52, 53, 55, 56, 58, 59, 60, 61, 63, 64, 65, 67, 68, 69, 71, 72, 73, 75, 76, 77, 79, 80, 83, 86, 89, 90, 91, 93, 94, 95], "get_label_issu": [2, 34, 35, 62, 63, 84, 91, 93, 94], "either": [2, 3, 5, 8, 32, 35, 36, 37, 51, 53, 58, 60, 61, 65, 67, 77, 82, 87, 88], "boolean": [2, 5, 8, 20, 35, 37, 45, 51, 53, 56, 61, 63, 65, 67, 68, 73, 75, 77, 80, 82, 83, 88, 91, 92, 94], "label_issues_mask": [2, 37, 61, 63, 74], "indic": [2, 3, 4, 5, 8, 11, 20, 31, 35, 36, 37, 39, 42, 46, 50, 51, 52, 53, 55, 56, 58, 59, 60, 61, 63, 64, 67, 69, 71, 75, 76, 77, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 91, 92, 93, 94, 95], "its": [2, 4, 7, 8, 14, 32, 35, 36, 37, 44, 45, 53, 56, 59, 60, 61, 63, 65, 69, 71, 73, 75, 76, 77, 79, 80, 81, 82, 83, 84, 86, 88, 89, 90, 91, 92, 94, 95], "return_indices_ranked_bi": [2, 35, 37, 53, 69, 74, 82, 84, 93, 94], "significantli": [2, 83, 84, 86, 90], "reduc": [2, 35, 37, 46, 75, 82], "time": [2, 8, 32, 35, 36, 46, 51, 74, 76, 81, 82, 83, 84, 88, 89, 91, 92, 93, 94, 95], "take": [2, 4, 8, 31, 32, 36, 41, 42, 46, 50, 61, 79, 83, 86, 87, 88, 93, 95], "run": [2, 4, 5, 7, 9, 12, 14, 22, 23, 30, 32, 35, 36, 63, 75, 76, 77, 79, 80, 81, 83, 84, 86, 87, 88, 89, 91, 93, 94, 95], "skip": [2, 8, 32, 36, 63, 75, 82, 87, 95], "slow": [2, 3], "step": [2, 5, 22, 42, 59, 82, 83, 84, 86, 90], "caution": [2, 4, 82], "previous": [2, 4, 11, 46, 60, 63, 74, 75, 76, 79, 80, 86, 90, 93], "assign": [2, 5, 8, 16, 17, 18, 20, 21, 22, 23, 24, 26, 27, 32, 36, 41, 42, 46, 63, 76, 79, 82, 83, 91, 92, 93, 95], "individu": [2, 8, 11, 22, 32, 36, 51, 55, 58, 61, 63, 69, 71, 74, 77, 79, 82, 86, 87, 88, 93, 95], "still": [2, 35, 36, 46, 60, 75, 82, 83, 89, 93], "extra": [2, 32, 36, 46, 50, 51, 52, 63, 80, 82, 83, 86, 89], "receiv": [2, 8, 32, 36, 52, 55, 56, 63, 65, 69, 77, 88], "overwritten": [2, 63], "callabl": [2, 3, 32, 36, 42, 45, 50, 55, 82], "x_val": 2, "y_val": 2, "map": [2, 3, 10, 35, 36, 38, 41, 45, 46, 59, 61, 63, 68, 75, 76, 77, 82, 83, 84, 87, 95], "appropri": [2, 8, 14, 53, 61, 76, 79, 87, 88], "earli": [2, 83], "stop": [2, 83], "x_valid": 2, "y_valid": 2, "could": [2, 8, 20, 31, 46, 60, 76, 79, 83, 87, 91, 93, 95], "f": [2, 5, 75, 76, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 91, 93, 94], "ignor": [2, 32, 36, 45, 50, 63, 68, 72, 75, 76, 77, 81, 83, 84, 86, 87, 89, 91, 95], "allow": [2, 31, 32, 35, 36, 39, 46, 51, 59, 60, 63, 65, 67, 75, 82, 83, 90, 92, 94], "access": [2, 8, 11, 32, 36, 63, 77, 80, 83, 87, 94], "hyperparamet": [2, 55, 60, 83], "purpos": [2, 76, 77, 82, 87, 91], "want": [2, 4, 8, 31, 35, 47, 51, 53, 63, 76, 80, 81, 83, 86, 88, 89, 90, 92, 94, 95], "explicitli": [2, 6, 8, 36, 63, 82], "yourself": [2, 4, 35, 77], "altern": [2, 5, 8, 42, 46, 50, 51, 61, 74, 75, 79, 80, 82, 83, 84, 86, 87, 89, 91, 94], "same": [2, 3, 4, 5, 8, 10, 12, 14, 22, 26, 32, 35, 36, 37, 46, 50, 51, 53, 60, 61, 63, 67, 68, 71, 72, 73, 76, 77, 79, 80, 82, 83, 87, 88, 89, 90, 91, 92, 93, 94], "effect": [2, 8, 23, 32, 36, 51, 60, 63, 79, 80, 82, 83, 89], "offer": [2, 4, 75, 76, 77, 80, 82, 84, 87, 94], "after": [2, 3, 4, 11, 16, 17, 18, 20, 21, 22, 23, 24, 26, 27, 32, 36, 46, 51, 63, 76, 80, 82, 83, 84, 86, 88, 89, 90, 91, 92, 94], "attribut": [2, 4, 5, 8, 10, 11, 14, 16, 17, 18, 20, 21, 22, 23, 24, 26, 27, 28, 29, 32, 35, 36, 42, 60, 63, 76, 93], "label_issues_df": [2, 63, 83], "similar": [2, 8, 31, 32, 36, 46, 51, 55, 56, 58, 60, 63, 67, 71, 76, 77, 79, 80, 82, 83, 84, 88, 89, 92], "document": [2, 3, 4, 8, 12, 14, 31, 32, 35, 36, 37, 42, 45, 50, 52, 53, 55, 58, 59, 60, 63, 67, 68, 69, 71, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 91, 93, 94, 95], "descript": [2, 4, 5, 8, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 46, 56, 63, 76, 77], "were": [2, 3, 4, 31, 36, 52, 58, 71, 75, 79, 82, 84, 86, 88, 90, 92, 93], "present": [2, 3, 4, 8, 10, 11, 18, 31, 46, 60, 68, 73, 79, 82, 83, 89], "actual": [2, 3, 4, 31, 51, 52, 61, 77, 82, 84, 95], "num_class": [2, 31, 35, 46, 50, 75, 76, 77, 79, 80, 82, 83, 84, 86, 87, 89, 93, 94], "uniqu": [2, 27, 46, 68, 76, 82, 87, 89], "given_label": [2, 4, 26, 31, 40, 63, 68, 72, 75, 76, 77, 79, 80, 83, 84, 91, 92, 94, 95], "normal": [2, 3, 16, 22, 27, 37, 39, 42, 44, 45, 46, 61, 82, 84, 89], "trick": [2, 82], "distribut": [2, 3, 4, 8, 22, 24, 31, 36, 37, 41, 44, 51, 59, 60, 61, 73, 76, 77, 79, 80, 83, 88, 89], "account": [2, 31, 51, 55, 60, 61, 80, 82, 84, 86, 87, 89, 91, 94], "word": [2, 3, 45, 71, 72, 82], "remov": [2, 8, 27, 31, 32, 36, 37, 63, 73, 80, 81, 82, 83, 87, 89, 91, 93, 94], "so": [2, 3, 4, 5, 8, 12, 22, 31, 32, 35, 36, 37, 46, 51, 52, 58, 61, 63, 67, 71, 75, 76, 77, 80, 83, 84, 89, 92], "proportion": [2, 8, 37], "just": [2, 3, 4, 8, 11, 31, 33, 35, 46, 50, 61, 63, 65, 73, 74, 75, 77, 79, 80, 82, 83, 84, 87, 88, 89, 90, 92, 93, 94], "procedur": 2, "get": [2, 3, 4, 6, 11, 27, 32, 33, 36, 37, 42, 45, 46, 51, 53, 55, 60, 61, 63, 64, 65, 73, 75, 80, 81, 82, 83, 84, 89, 90, 91, 93, 94], "detect": [2, 4, 5, 7, 11, 12, 14, 16, 20, 24, 44, 54, 56, 57, 58, 59, 60, 61, 62, 63, 66, 70, 73, 76, 78, 83, 85, 87, 91, 92, 93, 94, 95], "arg": [2, 10, 20, 23, 27, 32, 33, 36, 42, 46, 61, 63], "kwarg": [2, 5, 8, 12, 14, 16, 17, 18, 20, 21, 22, 23, 24, 26, 27, 28, 32, 35, 36, 42, 50, 63, 65, 67, 69, 82], "test": [2, 8, 22, 36, 42, 50, 63, 73, 76, 77, 79, 80, 83, 90, 91, 93, 94, 95], "expect": [2, 3, 32, 36, 37, 42, 51, 60, 61, 63, 82, 84, 86, 87, 88, 91, 93, 94, 95], "class_predict": 2, "evalu": [2, 8, 32, 33, 34, 35, 36, 59, 63, 75, 76, 77, 82, 83, 84, 86, 90, 91, 92, 93, 94], "simpli": [2, 31, 61, 76, 77, 79, 80, 82, 84, 87, 91, 92, 94, 95], "quantifi": [2, 4, 5, 8, 11, 37, 55, 60, 63, 73, 77, 79, 80, 83, 84, 88], "save_spac": [2, 8, 62, 63], "potenti": [2, 8, 31, 37, 45, 53, 56, 59, 61, 63, 65, 67, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 87, 88, 92, 93, 95], "cach": [2, 80, 94], "panda": [2, 4, 5, 10, 16, 17, 18, 20, 21, 22, 24, 26, 27, 31, 46, 47, 50, 51, 52, 74, 75, 76, 77, 79, 80, 81, 82, 84, 86, 91, 92, 93, 94], "unlik": [2, 8, 37, 39, 42, 50, 52, 53, 55, 71, 76, 86, 87, 89, 91], "both": [2, 4, 8, 14, 22, 31, 32, 36, 37, 46, 51, 53, 61, 65, 67, 72, 73, 76, 82, 83, 84, 86, 95], "mask": [2, 35, 37, 45, 46, 53, 56, 61, 63, 65, 67, 68, 73, 81, 82, 86, 88, 92, 95], "prefer": [2, 61, 69], "plan": 2, "subsequ": [2, 3, 32, 36, 80, 82, 84, 88, 94], "invok": [2, 32, 36, 84, 90], "scratch": [2, 63], "To": [2, 4, 5, 7, 8, 9, 11, 14, 22, 30, 32, 35, 36, 37, 50, 51, 53, 55, 59, 60, 61, 63, 64, 65, 67, 73, 75, 76, 77, 79, 80, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95], "share": [2, 61, 63], "mostli": [2, 46, 58, 63, 87], "longer": [2, 29, 41, 42, 45, 63, 74, 80, 82, 88, 94], "info": [2, 4, 5, 11, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 31, 52, 63, 71, 76, 77, 81, 82, 95], "about": [2, 3, 4, 5, 8, 11, 16, 17, 18, 20, 21, 22, 23, 24, 26, 27, 28, 31, 33, 35, 39, 51, 52, 55, 59, 63, 68, 71, 75, 76, 79, 80, 81, 82, 83, 84, 86, 89], "docstr": [2, 31, 32, 36, 46, 63, 81, 84], "unless": [2, 32, 36, 63, 82], "our": [2, 3, 8, 50, 51, 61, 63, 73, 75, 76, 77, 79, 80, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95], "is_label_issu": [2, 26, 63, 75, 76, 77, 79, 80, 83, 84, 87, 91, 94], "entir": [2, 8, 22, 35, 37, 40, 52, 53, 58, 61, 63, 65, 67, 68, 73, 76, 77, 82, 88, 89, 90, 92, 95], "accur": [2, 3, 4, 8, 14, 31, 35, 37, 51, 52, 53, 56, 59, 61, 63, 64, 65, 67, 68, 74, 77, 79, 80, 82, 83, 86, 91], "label_qu": [2, 51, 63, 84, 86, 91, 94], "measur": [2, 31, 51, 52, 63, 73, 81, 82, 84, 86, 87, 92, 93, 95], "qualiti": [2, 3, 4, 5, 8, 11, 26, 27, 31, 35, 37, 39, 42, 51, 52, 53, 55, 56, 58, 61, 63, 64, 67, 69, 71, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 85, 91, 93, 94], "lower": [2, 4, 5, 8, 11, 24, 35, 42, 44, 51, 52, 55, 58, 59, 61, 63, 64, 67, 71, 75, 77, 79, 80, 83, 86, 87, 88, 89, 91, 92, 94, 95], "eas": 2, "comparison": [2, 32, 36, 59, 84, 86, 91], "against": [2, 32, 36, 76, 79, 82, 86, 87], "predicted_label": [2, 4, 26, 63, 68, 72, 75, 76, 77, 79, 80, 83, 84, 91, 92, 94], "ad": [2, 32, 36, 77, 86, 91], "precis": [2, 53, 56, 59, 82, 84, 92, 95], "definit": [2, 5, 29, 42, 63, 79, 93], "accessor": [2, 63], "describ": [2, 8, 16, 51, 60, 61, 63, 69, 71, 84, 86, 87, 88, 90, 95], "precomput": [2, 4, 40, 63, 81], "clear": [2, 32, 36, 63, 80, 91, 94], "save": [2, 4, 14, 32, 35, 36, 59, 63, 82, 88, 92, 95], "space": [2, 8, 60, 63, 79, 81, 83], "place": [2, 32, 36, 46, 63, 86, 93], "larg": [2, 35, 63, 79, 80, 82, 83, 88, 89, 92, 95], "deploi": [2, 63, 79, 80, 82, 83], "care": [2, 8, 32, 36, 63, 80, 82, 84], "avail": [2, 4, 5, 10, 12, 28, 36, 63, 82, 84, 86, 88, 91], "cannot": [2, 4, 10, 12, 46, 90, 95], "anymor": 2, "classmethod": [2, 16, 17, 18, 20, 21, 22, 23, 24, 26, 27, 29, 36, 42, 63], "__init_subclass__": [2, 34, 36, 62, 63], "set_": [2, 36, 63], "_request": [2, 36, 63], "pep": [2, 36, 63], "487": [2, 36, 63], "look": [2, 4, 5, 14, 32, 36, 46, 63, 68, 76, 77, 79, 80, 82, 84, 86, 87, 88, 89, 92, 93, 95], "inform": [2, 4, 5, 8, 11, 14, 28, 32, 36, 46, 51, 52, 56, 59, 63, 68, 71, 72, 73, 75, 76, 79, 80, 84, 86, 89, 92, 95], "__metadata_request__": [2, 36, 63], "infer": [2, 36, 46, 63, 68, 72, 83, 86, 87, 91, 93, 94], "signatur": [2, 32, 36, 63], "accept": [2, 32, 36, 61, 63, 76, 77], "metadata": [2, 36, 63, 79, 80, 83, 95], "through": [2, 4, 5, 36, 63, 75, 77, 80, 81, 82, 86, 88, 89, 91, 94], "develop": [2, 7, 36, 63, 82, 84, 95], "request": [2, 36, 63, 77, 80, 81, 87, 93, 94, 95], "those": [2, 3, 8, 35, 36, 37, 50, 51, 53, 59, 63, 67, 71, 72, 73, 75, 82, 83, 88, 92], "http": [2, 4, 5, 7, 8, 9, 16, 30, 32, 33, 35, 36, 39, 46, 56, 59, 60, 63, 73, 75, 76, 77, 79, 80, 81, 83, 84, 86, 87, 88, 89, 91, 92, 93, 94, 95], "www": [2, 36, 63, 89], "org": [2, 16, 32, 33, 36, 46, 60, 63, 82, 84, 95], "dev": [2, 36, 63], "0487": [2, 36, 63], "get_metadata_rout": [2, 34, 36, 62, 63], "rout": [2, 36, 63], "pleas": [2, 32, 36, 50, 63, 73, 75, 76, 77, 80, 81, 82, 83, 84, 86, 87, 89, 91, 94, 95], "guid": [2, 5, 36, 63, 74, 83], "mechan": [2, 32, 36, 63], "metadatarequest": [2, 36, 63], "encapsul": [2, 14, 36, 58, 63], "get_param": [2, 34, 36, 49, 50, 62, 63], "subobject": [2, 36, 63], "param": [2, 8, 32, 36, 50, 60, 63, 82], "name": [2, 4, 5, 8, 10, 11, 29, 31, 32, 36, 41, 42, 46, 50, 51, 52, 59, 63, 68, 72, 75, 77, 80, 81, 82, 83, 84, 87, 92, 94, 95], "set_fit_request": [2, 34, 36, 62, 63], "str": [2, 3, 4, 10, 11, 12, 14, 16, 17, 18, 20, 21, 22, 23, 24, 26, 27, 28, 29, 31, 32, 35, 36, 37, 40, 42, 45, 46, 50, 51, 52, 56, 58, 59, 61, 63, 68, 72, 75, 76, 82, 86, 87, 88, 95], "unchang": [2, 32, 36, 63, 95], "relev": [2, 14, 22, 36, 63, 83], "enable_metadata_rout": [2, 36, 63], "set_config": [2, 36, 63], "meta": [2, 36, 63], "rais": [2, 4, 10, 11, 29, 32, 36, 39, 42, 63, 75, 82], "alia": [2, 32, 36, 63], "metadata_rout": [2, 36, 63], "retain": [2, 36, 46, 63], "chang": [2, 32, 35, 36, 39, 63, 71, 75, 76, 80, 82, 88, 89, 94, 95], "version": [2, 4, 5, 7, 8, 9, 13, 19, 25, 30, 32, 34, 36, 38, 39, 46, 49, 50, 61, 63, 73, 75, 76, 77, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 91, 93, 94, 95], "sub": [2, 36, 58, 63], "pipelin": [2, 36, 63], "otherwis": [2, 8, 29, 31, 32, 35, 36, 37, 43, 45, 46, 53, 60, 63, 65, 67, 68, 72, 80, 82, 94], "updat": [2, 11, 32, 35, 36, 63, 74, 76, 83], "set_param": [2, 34, 36, 49, 50, 62, 63], "simpl": [2, 32, 36, 37, 51, 61, 63, 76, 77, 79, 80, 83, 86, 89, 91, 93, 94], "well": [2, 3, 8, 32, 36, 39, 40, 51, 53, 59, 61, 63, 68, 71, 72, 74, 76, 77, 79, 80, 82, 83, 84, 86, 88, 89], "nest": [2, 32, 36, 47, 63, 69, 71, 72, 95], "latter": [2, 32, 36, 63, 89], "compon": [2, 36, 63], "__": [2, 36, 63], "set_score_request": [2, 62, 63], "structur": [3, 60, 79, 93], "unobserv": 3, "less": [3, 4, 8, 27, 35, 42, 51, 60, 61, 65, 67, 71, 77, 79, 81, 82, 83, 84, 88, 95], "channel": [3, 75, 84], "character": 3, "flip": 3, "nm": 3, "invers": [3, 8, 31, 40, 46, 52, 77, 81, 94], "inv": 3, "confident_joint": [3, 20, 31, 37, 46, 52, 53, 74, 82, 84], "un": 3, "under": [3, 8, 32, 36, 52, 59, 60, 77, 89], "joint": [3, 31, 37, 40, 46, 52, 53, 81], "num_label_issu": [3, 35, 37, 53, 68, 72, 74], "estimation_method": [3, 35], "off_diagon": 3, "multi_label": [3, 31, 37, 46, 47, 53, 87], "don": [3, 73, 77, 79, 80, 83, 84, 88], "statis": 3, "compute_confident_joint": [3, 31, 37, 46, 53, 84], "off": [3, 37, 46, 58, 83, 84, 88, 89], "j": [3, 4, 31, 32, 36, 37, 53, 56, 59, 60, 69, 71, 72, 76, 77, 84, 92, 95], "confident_learn": [3, 37, 53, 84], "off_diagonal_calibr": 3, "calibr": [3, 37, 46, 51, 86], "cj": [3, 40, 46], "axi": [3, 27, 40, 42, 44, 65, 68, 75, 76, 77, 82, 83, 84, 86, 87, 89, 91, 92], "bincount": [3, 76, 77, 84, 86, 87], "alwai": [3, 8, 32, 36, 46, 75, 84, 91, 93, 94], "estimate_issu": 3, "over": [3, 8, 32, 35, 36, 58, 59, 65, 67, 77, 79, 81, 82, 83, 84, 89, 91, 93], "As": [3, 5, 73, 76, 77, 80, 84, 91, 95], "add": [3, 4, 5, 10, 11, 32, 36, 50, 59, 75, 76, 77, 80, 82, 83, 84, 87, 94], "approach": [3, 31, 35, 37, 79, 84, 87, 89, 91, 93], "custom": [3, 5, 8, 9, 26, 32, 35, 36, 42, 45, 61, 77, 80, 84, 94], "know": [3, 76, 77, 79, 80, 82, 83, 84, 86], "cut": [3, 58, 73, 84], "off_diagonal_custom": 3, "tl": 3, "dr": 3, "sometim": [3, 88, 89, 95], "underestim": 3, "few": [3, 59, 73, 77, 82, 86, 87, 88, 89, 95], "4": [3, 4, 16, 17, 18, 20, 21, 22, 24, 26, 27, 41, 42, 45, 55, 56, 58, 59, 61, 64, 71, 81, 82, 87, 92, 95], "detail": [3, 4, 8, 12, 14, 28, 31, 32, 36, 42, 46, 50, 51, 52, 53, 55, 56, 58, 59, 60, 67, 68, 69, 73, 74, 75, 87, 89, 95], "num_issu": [3, 5, 35, 75, 76, 77, 79, 80, 83, 84], "calibrate_confident_joint": 3, "up": [3, 8, 15, 22, 23, 26, 37, 42, 51, 81, 82, 88, 91, 94, 95], "p_": [3, 31, 37], "pair": [3, 4, 8, 31, 37, 84], "v": [3, 8, 35, 52, 53, 55, 61, 76, 77, 87, 88, 89, 90], "rest": [3, 4, 5, 7, 8, 9, 30, 52, 53, 55, 63, 76, 77, 79, 80, 82, 83, 84, 86, 91, 93, 94], "fashion": [3, 4, 65, 93], "2x2": 3, "incorrectli": [3, 31, 52, 53, 56, 79, 95], "calibrated_cj": 3, "c": [3, 8, 45, 53, 61, 73, 75, 76, 77, 79, 80, 82, 84, 87, 88, 89, 90, 91, 93], "whose": [3, 4, 8, 24, 32, 36, 40, 45, 51, 55, 58, 64, 67, 71, 72, 75, 76, 77, 79, 80, 82, 83, 84, 87, 88, 89, 92, 95], "truli": [3, 89, 92], "estimate_joint": [3, 31, 84], "joint_estim": 3, "confident_joint_distribut": 3, "recal": [3, 53, 59, 84, 88, 90, 92, 95], "return_indices_of_off_diagon": 3, "frequenc": [3, 22, 51, 52, 59, 68, 88, 89], "done": [3, 8, 63, 76, 82, 84, 87, 89, 90], "overfit": [3, 8, 56, 59, 75, 76, 77, 79, 80, 83, 90, 93], "classifict": 3, "singl": [3, 4, 10, 22, 31, 32, 36, 42, 43, 46, 51, 52, 58, 59, 60, 61, 71, 75, 76, 82, 84, 87, 88, 93], "baselin": [3, 32, 37, 89, 91, 94], "proxi": 3, "union": [3, 4, 10, 42, 46, 47, 53, 59, 63, 67, 71, 82], "tupl": [3, 27, 32, 36, 40, 41, 43, 45, 46, 51, 53, 59, 67, 69, 71, 72, 75, 95], "confident_joint_count": 3, "indices_off_diagon": 3, "simplif": 3, "effici": [3, 4, 8, 35, 40, 51, 65, 67, 73, 82, 83, 92, 94], "practic": [3, 77, 83, 84, 89, 91, 93, 94], "complet": [3, 75, 76, 77, 79, 80, 82, 83, 84, 87, 88], "gist": 3, "cj_ish": 3, "guess": [3, 40, 84, 86], "8": [3, 4, 5, 6, 41, 42, 43, 45, 55, 69, 71, 75, 76, 77, 79, 80, 82, 83, 86, 87, 88, 89, 91, 92, 93, 94, 95], "parallel": [3, 37, 59, 69, 81], "again": [3, 50, 82, 89, 93], "simplifi": [3, 12], "understand": [3, 7, 31, 52, 59, 77, 84, 91, 92, 95], "100": [3, 32, 36, 61, 76, 77, 79, 81, 82, 83, 84, 87, 88, 89, 92, 93, 94, 95], "optim": [3, 32, 33, 36, 50, 83, 86], "speed": [3, 37, 81, 82, 91, 94], "dtype": [3, 21, 22, 27, 32, 36, 45, 46, 55, 71, 75, 88], "enumer": [3, 32, 36, 75, 76, 77, 83, 95], "s_label": 3, "confident_bin": 3, "6": [3, 4, 36, 42, 46, 71, 75, 76, 77, 79, 80, 81, 82, 83, 86, 87, 88, 89, 91, 92, 93, 94, 95], "num_confident_bin": 3, "argmax": [3, 37, 61, 65, 68, 75, 82, 84, 88, 89, 92], "elif": 3, "estimate_lat": 3, "py_method": [3, 40], "cnt": [3, 40], "1d": [3, 4, 10, 14, 35, 37, 42, 43, 46, 47, 55, 64, 75, 93], "eqn": [3, 40], "margin": [3, 37, 40, 42, 61], "marginal_p": [3, 40], "shorthand": [3, 11], "proport": [3, 8, 31, 52, 84, 90], "poorli": [3, 40, 93], "inv_noise_matrix": 3, "estimate_py_and_noise_matrices_from_prob": [3, 84], "variabl": [3, 5, 12, 23, 46, 63, 64, 75, 76, 79, 84, 87, 91], "exact": [3, 40, 76, 77, 79, 83, 93], "within": [3, 4, 8, 13, 32, 33, 36, 38, 53, 58, 67, 69, 71, 76, 77, 82, 83, 88, 92], "percent": 3, "often": [3, 31, 40, 52, 82, 84, 90, 92], "estimate_confident_joint_and_cv_pred_proba": 3, "mani": [3, 8, 46, 47, 59, 75, 76, 79, 80, 82, 83, 87, 88, 89, 94], "wai": [3, 4, 50, 73, 74, 75, 76, 77, 79, 80, 82, 84, 86, 87, 88, 90, 93, 94], "pro": 3, "con": 3, "pred_proba": [3, 90], "combin": [3, 31, 76, 81, 82, 83, 84, 90, 91], "becaus": [3, 40, 46, 58, 80, 82, 84, 86, 88], "littl": [3, 35, 81, 88, 95], "uniform": [3, 61, 81, 82, 84], "20": [3, 5, 72, 75, 80, 81, 82, 83, 84, 88, 92, 95], "Such": [3, 83, 89], "bound": [3, 21, 32, 36, 45, 55, 56, 58, 59, 88], "reason": [3, 20, 32, 36], "comment": [3, 45, 95], "end": [3, 4, 32, 36, 59, 83, 89, 92, 95], "file": [3, 4, 10, 34, 35, 49, 59, 75, 76, 79, 80, 81, 82, 88, 89, 92, 93, 95], "estimate_py_noise_matrices_and_cv_pred_proba": [3, 84], "handl": [3, 4, 5, 8, 14, 16, 17, 18, 20, 21, 22, 23, 24, 26, 27, 28, 32, 35, 36, 74, 76, 77, 79, 80, 83, 84, 92, 93, 95], "five": [3, 56, 59, 84, 88], "estimate_cv_predicted_prob": [3, 84], "estimate_noise_matric": 3, "get_confident_threshold": [3, 34, 35], "amongst": [3, 8, 88], "confident_threshold": [3, 8, 20, 35, 60], "unifi": 4, "audit": [4, 7, 10, 11, 14, 75, 78, 79, 80, 82, 83, 84, 87, 88], "kind": [4, 5, 75, 76, 79, 80, 81, 83, 84], "addit": [4, 5, 7, 8, 9, 11, 28, 30, 32, 36, 42, 47, 51, 59, 69, 75, 76, 79, 80, 84, 86, 89, 90, 93, 94], "depend": [4, 5, 7, 8, 9, 10, 11, 30, 34, 37, 39, 46, 49, 53, 60, 63, 64, 73], "instal": [4, 5, 7, 8, 9, 30, 32, 34, 35, 36, 37, 49, 50, 65, 67], "pip": [4, 5, 7, 9, 30, 73, 75, 76, 77, 79, 80, 81, 83, 84, 86, 87, 88, 89, 91, 92, 93, 94, 95], "development": [4, 5, 7, 9, 30], "git": [4, 5, 7, 9, 30, 73, 75, 76, 77, 79, 80, 81, 83, 84, 86, 87, 88, 89, 91, 93, 94], "github": [4, 5, 7, 9, 30, 32, 33, 46, 73, 75, 76, 77, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 91, 93, 94], "com": [4, 5, 7, 9, 30, 32, 33, 35, 39, 46, 60, 73, 75, 76, 77, 79, 80, 81, 83, 84, 86, 87, 88, 89, 91, 92, 93, 94, 95], "egg": [4, 5, 7, 9, 30, 73, 81], "label_nam": [4, 5, 6, 8, 10, 16, 27, 73, 75, 76, 77, 79, 80, 82, 83, 84, 87, 88], "image_kei": [4, 83], "interfac": [4, 73, 82, 84], "librari": [4, 8, 36, 56, 59, 60, 73, 76, 80, 81, 82, 94], "goal": 4, "track": [4, 11, 12, 73, 76, 81, 82, 84], "intermedi": [4, 7, 77], "statist": [4, 8, 11, 20, 22, 31, 51, 52, 59, 77, 79, 80, 84], "convert": [4, 10, 29, 32, 36, 43, 44, 47, 51, 58, 67, 71, 74, 75, 80, 81, 82, 83, 86, 87, 88, 94], "hug": [4, 10, 83], "face": [4, 10, 14, 81, 83, 87], "kei": [4, 5, 8, 10, 14, 16, 17, 18, 20, 21, 22, 23, 24, 26, 27, 31, 32, 36, 42, 51, 52, 58, 60, 76, 77, 80, 82, 83, 84, 86, 88], "string": [4, 8, 10, 12, 16, 17, 18, 20, 21, 22, 23, 24, 26, 27, 28, 29, 31, 32, 36, 46, 51, 52, 64, 68, 71, 72, 79, 80, 82, 86, 87, 94, 95], "dictionari": [4, 5, 8, 10, 11, 14, 16, 17, 18, 20, 21, 22, 23, 24, 26, 27, 31, 32, 36, 41, 46, 51, 52, 55, 56, 58, 59, 76, 77, 79, 80, 84, 86, 87, 88], "path": [4, 10, 32, 35, 36, 59, 75, 76, 82, 88], "local": [4, 10, 32, 33, 36, 75, 76, 77, 81, 82, 83, 84, 86, 87, 89, 91, 95], "text": [4, 5, 8, 10, 16, 17, 18, 20, 21, 22, 23, 24, 26, 27, 42, 60, 69, 71, 72, 73, 76, 77, 78, 81, 82, 84, 85, 86, 89], "txt": [4, 10, 95], "csv": [4, 10, 79, 80, 91, 93, 94], "json": [4, 10], "hub": [4, 10], "multiclass": [4, 10, 13, 42, 46, 51, 87], "regress": [4, 5, 10, 12, 14, 19, 26, 29, 76, 77, 80, 85, 86, 89, 94], "multilabel": [4, 10, 12, 13, 29, 43, 87], "imag": [4, 7, 31, 36, 56, 58, 59, 60, 65, 67, 68, 73, 76, 77, 81, 82, 85, 86, 87, 88, 90, 92], "point": [4, 5, 8, 16, 22, 32, 36, 76, 77, 79, 80, 82, 83, 84, 86], "field": [4, 8, 32, 36], "themselv": [4, 91, 93, 94], "cleanvis": [4, 8], "level": [4, 14, 16, 17, 18, 20, 21, 22, 23, 24, 26, 27, 28, 31, 45, 69, 71, 77, 83, 85, 92], "load_dataset": [4, 10, 83], "glue": 4, "sst2": 4, "properti": [4, 10, 11, 29, 32, 36], "has_label": [4, 10], "class_nam": [4, 10, 18, 31, 52, 59, 68, 72, 73, 81, 84, 88, 92, 95], "empti": [4, 10, 40, 51, 77, 82, 87], "find_issu": [4, 5, 6, 8, 12, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 73, 75, 76, 77, 79, 80, 82, 83, 84, 87], "knn_graph": [4, 8, 14, 16, 17, 22, 24, 27, 79], "issue_typ": [4, 5, 6, 8, 11, 12, 14, 16, 17, 18, 20, 21, 22, 24, 26, 27, 75, 76, 77, 79, 80, 82, 83, 84, 87], "sort": [4, 14, 35, 37, 42, 51, 53, 56, 58, 59, 61, 67, 69, 71, 75, 77, 79, 80, 82, 83, 84, 86, 87, 88, 91, 92, 93, 94, 95], "common": [4, 11, 14, 77, 78, 81, 82, 84, 87, 88, 92], "real": [4, 14, 73, 76, 77, 82, 84, 86, 87, 91, 92], "world": [4, 14, 73, 76, 77, 82, 84, 86, 91, 92], "interact": [4, 14, 80, 82], "embed": [4, 8, 14, 60, 73, 75, 76, 77, 79, 80, 84, 87, 94], "thereof": [4, 14], "insight": [4, 14, 59, 86], "act": [4, 8, 58, 76], "issuefind": [4, 13, 14, 28], "logic": [4, 12, 35, 37, 65, 67], "best": [4, 14, 41, 51, 61, 76, 77, 79, 80, 82, 83, 86, 87, 89, 91, 93, 94, 95], "2d": [4, 14, 35, 42, 43, 45, 46, 51, 75, 87, 93], "num_exampl": [4, 14, 16, 17, 18, 20, 21, 22, 24, 26, 27, 28, 31, 52, 75, 76, 77, 79, 80, 83, 84], "represent": [4, 8, 14, 29, 32, 36, 43, 53, 73, 75, 76, 77, 80, 82, 83, 84, 89, 94], "num_featur": [4, 14, 32, 36, 50], "distanc": [4, 8, 14, 16, 22, 24, 27, 44, 58, 60, 79, 89], "nearest": [4, 8, 14, 21, 22, 24, 44, 60, 77, 80, 89], "neighbor": [4, 8, 14, 16, 21, 22, 24, 44, 60, 76, 77, 79, 80, 82, 83, 89], "graph": [4, 8, 11, 14, 16, 22, 27], "squar": [4, 46, 63, 81, 91], "csr": 4, "evenli": 4, "omit": [4, 58, 59, 83, 88], "itself": [4, 32, 36, 88], "three": [4, 8, 31, 51, 52, 63, 68, 75, 76, 77, 79, 81, 84, 86, 90, 91, 92, 93, 95], "indptr": 4, "wise": 4, "start": [4, 5, 8, 29, 32, 33, 36, 42, 73, 79, 87, 95], "th": [4, 41, 45, 46, 51, 53, 56, 58, 59, 60, 69, 71, 72, 80, 87, 88, 95], "ascend": [4, 31, 52, 83, 84], "segment": [4, 65, 67, 68, 85], "reflect": [4, 79, 80, 86, 88, 89, 91, 93, 94], "maintain": 4, "posit": [4, 32, 36, 44, 46, 59, 81, 89], "nearestneighbor": [4, 8, 16, 60, 79, 89], "kneighbors_graph": [4, 16, 79], "illustr": 4, "todens": 4, "second": [4, 42, 46, 59, 61, 76, 82, 84, 95], "duplic": [4, 7, 19, 20, 32, 36, 73, 76, 84, 87], "explicit": 4, "precend": 4, "construct": [4, 5, 8, 12, 16, 17, 18, 20, 21, 22, 23, 24, 26, 27, 28, 32, 36, 42, 50], "neither": [4, 8, 12, 88], "nor": [4, 8, 12], "collect": [4, 8, 11, 14, 16, 17, 18, 20, 21, 22, 23, 24, 26, 27, 51, 82, 86, 95], "unspecifi": [4, 14, 37, 53], "interest": [4, 14, 20, 68, 72, 80, 84, 92, 93, 94, 95], "constructor": [4, 8, 14, 21, 26], "issuemanag": [4, 7, 11, 12, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28], "respons": [4, 14, 20, 63, 64, 81, 91, 95], "random_st": [4, 75, 76, 77, 83, 84, 87, 89, 93], "lab": [4, 6, 16, 17, 18, 20, 21, 22, 23, 24, 26, 27, 35, 73, 75, 76, 77, 79, 80, 81, 82, 83, 84, 87], "comprehens": [4, 73, 83, 87], "nbr": 4, "n_neighbor": [4, 8, 16, 60], "metric": [4, 8, 17, 22, 27, 46, 50, 59, 60, 75, 79, 80, 83, 84, 91, 93, 94], "euclidean": [4, 8, 58, 60, 79], "mode": [4, 16, 32, 35, 36, 89], "4x4": 4, "float64": [4, 22, 32, 36, 71], "compress": [4, 8, 46, 65, 67], "toarrai": 4, "NOT": [4, 35, 80], "23606798": 4, "41421356": 4, "configur": [4, 14, 42, 77], "suppos": [4, 8, 56, 89, 91, 93, 94], "who": [4, 58, 79, 84, 93, 95], "manag": [4, 6, 7, 8, 11, 12, 13, 14, 15, 17, 18, 20, 21, 22, 23, 24, 26, 27, 76], "clean_learning_kwarg": [4, 8, 21, 26], "labelissuemanag": [4, 8, 12, 19, 21], "prune_method": [4, 74], "prune_by_noise_r": [4, 37, 53, 84], "report": [4, 5, 9, 13, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 31, 52, 72, 73, 75, 76, 77, 79, 80, 84, 87, 95], "include_descript": [4, 16, 17, 18, 20, 21, 22, 24, 26, 27, 28], "show_summary_scor": [4, 28], "show_all_issu": [4, 28], "summari": [4, 5, 11, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 31, 49, 50, 52, 57, 66, 67, 69, 70, 71, 74, 75, 76, 77, 79, 80, 81, 83, 84, 88, 92, 95], "show": [4, 22, 32, 36, 41, 46, 59, 68, 72, 77, 79, 80, 81, 82, 83, 84, 86, 89, 91, 92, 93, 95], "top": [4, 8, 31, 35, 37, 46, 53, 56, 59, 61, 68, 72, 73, 75, 76, 77, 79, 80, 81, 82, 84, 88, 89, 91, 94, 95], "suffer": [4, 8, 11, 20, 53, 61, 72, 95], "onc": [4, 20, 31, 32, 36, 76, 82, 84, 87, 88, 93], "familiar": 4, "overal": [4, 5, 8, 11, 16, 17, 18, 20, 21, 22, 23, 24, 26, 27, 31, 42, 51, 52, 55, 58, 59, 63, 67, 68, 69, 71, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 86, 88, 95], "sever": [4, 5, 8, 10, 11, 20, 32, 35, 36, 37, 55, 58, 60, 61, 67, 71, 73, 75, 76, 77, 79, 80, 81, 82, 84, 88, 89, 93, 94, 95], "found": [4, 5, 8, 11, 12, 16, 17, 18, 20, 21, 22, 23, 24, 26, 27, 32, 36, 46, 73, 75, 76, 77, 79, 80, 82, 83, 87, 89, 91, 93, 94, 95], "With": [4, 35, 80, 84, 86, 91, 92, 94, 95], "usag": [4, 35, 50], "issue_summari": [4, 8, 11, 76], "dataissu": [4, 11, 13, 14, 28], "outlier": [4, 7, 12, 19, 20, 27, 38, 61, 73, 76, 77, 84, 85, 87], "someth": [4, 5, 32, 36, 61, 88], "123": [4, 76, 77], "456": [4, 75, 93, 94], "nearest_neighbor": 4, "7": [4, 42, 43, 50, 69, 71, 75, 76, 77, 79, 80, 81, 82, 86, 87, 88, 89, 91, 92, 93, 94, 95], "9": [4, 16, 17, 18, 20, 21, 22, 24, 26, 27, 42, 43, 55, 69, 71, 75, 76, 77, 79, 80, 81, 83, 84, 86, 87, 88, 89, 91, 92, 93, 94, 95], "distance_to_nearest_neighbor": [4, 76, 77, 79, 80, 83, 84], "789": 4, "get_issu": [4, 8, 11, 75, 77, 79, 80, 82, 83, 87], "issue_nam": [4, 5, 8, 11, 12, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 76, 77], "focu": [4, 11, 80, 92, 95], "full": [4, 8, 11, 35, 59, 83, 95], "summar": [4, 11, 16, 17, 18, 20, 21, 22, 23, 24, 26, 27, 31, 52, 68, 72, 73, 92], "valueerror": [4, 10, 11, 29, 39, 42, 82], "specific_issu": [4, 11], "exhibit": [4, 8, 11, 68, 77, 79, 80, 83, 84, 88], "lie": [4, 8, 60, 61, 75, 76, 77, 79, 80, 83, 84, 94], "directli": [4, 12, 14, 28, 29, 35, 50, 51, 77, 80, 88, 91, 94], "compar": [4, 51, 60, 71, 76, 77, 79, 84, 88], "get_issue_summari": [4, 11, 77], "get_info": [4, 11, 77, 80], "yet": [4, 15, 19, 23, 81, 86], "list_possible_issue_typ": [4, 12, 13], "regist": [4, 5, 12, 13, 15, 23, 32, 36, 76], "rtype": [4, 12, 16, 17, 18, 20, 21, 22, 23, 24, 26, 27, 32, 36], "registri": [4, 12, 13], "list_default_issue_typ": [4, 12, 13], "folder": [4, 75, 76, 83], "load": [4, 10, 35, 59, 81, 82, 83, 84, 88, 89, 92, 95], "futur": [4, 8, 20, 32, 36, 51, 73, 75, 76, 80, 82, 94], "overwrit": [4, 76], "separ": [4, 31, 42, 55, 76, 77, 82, 83, 88, 90], "static": 4, "rememb": [4, 80, 82, 84], "part": [4, 8, 32, 36, 37, 56, 58, 59, 75, 76, 81, 92, 95], "ident": [4, 8, 20, 46, 80], "walk": 5, "alongsid": [5, 32, 36, 76, 82], "pre": [5, 6, 8, 32, 36, 76, 77, 83, 92, 95], "runtim": [5, 32, 35, 36, 63, 65, 67, 75, 82, 83], "issue_manager_factori": [5, 12, 76], "myissuemanag": [5, 12], "myissuemanagerforregress": 5, "decor": [5, 12], "ll": [5, 42, 75, 76, 77, 79, 80, 82, 83, 84, 86, 87, 88, 89, 90, 91, 93, 94, 95], "thing": [5, 36, 84, 91, 94], "next": [5, 51, 73, 75, 79, 80, 82, 86, 88, 91, 93, 94, 95], "dummi": 5, "randint": [5, 27, 42, 76, 77, 82], "mark": [5, 8, 74, 88, 89, 91], "regard": [5, 77, 84], "rand": [5, 42, 76, 77], "is_": [5, 8, 76], "_issu": [5, 8, 76], "issue_score_kei": [5, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 76], "whole": [5, 22, 32, 36, 77], "make_summari": [5, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 76], "popul": [5, 77, 80], "verbosity_level": [5, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27], "std": [5, 88], "raw_scor": 5, "bit": 5, "involv": [5, 35, 68, 72, 82, 87], "intermediate_arg": 5, "min": [5, 42, 58, 71, 76, 82, 89], "sin_filt": 5, "sin": 5, "arang": 5, "kernel": 5, "wip": 5, "progress": 5, "issue_manag": [5, 8, 9, 11, 13, 16, 17, 18, 21, 22, 23, 24, 26, 27, 76], "instanti": [5, 14, 35, 50, 60, 75, 77, 79, 94], "477762": 5, "286455": 5, "term": [5, 8, 40, 46, 59, 75, 76, 77, 79, 80, 83, 84], "4778": 5, "is_basic_issu": 5, "basic_scor": 5, "13": [5, 17, 24, 75, 76, 77, 79, 80, 81, 83, 84, 86, 88, 89, 91, 92, 93, 94, 95], "003042": 5, "058117": 5, "11": [5, 50, 75, 76, 77, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 91, 92, 93, 94, 95], "121908": 5, "15": [5, 44, 63, 75, 76, 77, 79, 80, 81, 82, 83, 84, 86, 88, 89, 91, 92, 93, 94, 95], "169312": 5, "17": [5, 75, 77, 79, 80, 81, 82, 83, 84, 86, 88, 89, 91, 92, 94, 95], "229044": 5, "2865": 5, "is_intermediate_issu": 5, "intermediate_scor": 5, "000000": [5, 76, 77, 81, 84], "007059": 5, "009967": 5, "010995": 5, "087332": 5, "016296": 5, "03947": 5, "019459": 5, "794251": 5, "underperform": [6, 7, 27], "group": [6, 7, 22, 27, 81, 88, 95], "dbscan": [6, 8, 27, 82], "hdbscan": [6, 82], "etc": [6, 8, 20, 32, 36, 40, 50, 51, 69, 73, 76, 77, 79, 80, 82, 84, 87], "sensit": [6, 8, 44], "ep": [6, 27, 59], "radiu": 6, "min_sampl": [6, 27], "datalab": [6, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 73, 75, 82, 83, 86, 87, 93, 94], "kmean": [6, 82], "your_data": 6, "get_pred_prob": 6, "n_cluster": [6, 27, 82], "cluster_id": [6, 8, 27, 82], "labels_": 6, "underperforming_group": [6, 8, 12, 19, 82], "search": [7, 8, 18, 22, 23, 45, 63, 82, 90], "nondefault": 7, "Near": [7, 82], "iid": [7, 22, 79, 84], "imbal": [7, 19, 55, 60, 61, 77], "null": [7, 12, 19, 77, 80, 83, 84], "valuat": [7, 16], "togeth": [7, 8, 40, 76, 77, 79, 80, 83, 84, 91, 94, 95], "built": [7, 42], "own": [7, 32, 34, 36, 49, 55, 56, 59, 65, 69, 75, 77, 79, 80, 82, 83, 86, 87, 91, 92, 93, 94, 95], "prerequisit": 7, "basic": [7, 36, 50, 79, 80, 89], "page": [8, 77, 82, 84], "variou": [8, 11, 26, 34, 47, 49, 73, 76, 77, 79, 80, 81, 84, 86, 88, 93], "sai": [8, 32, 36, 87, 92], "why": [8, 80], "matter": [8, 31, 52, 80, 94], "_score": 8, "flag": [8, 20, 22, 37, 42, 52, 53, 56, 63, 73, 75, 76, 77, 79, 80, 81, 83, 84, 88, 89, 91, 92, 94], "badli": [8, 58, 95], "code": [8, 32, 36, 40, 46, 50, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 86, 87, 88, 89, 91, 92, 93, 94, 95], "issue_scor": 8, "outlier_scor": [8, 24, 76, 77, 79, 80, 83, 84, 89], "atyp": [8, 60, 76, 77, 79, 80, 83, 84, 89], "datapoint": [8, 27, 37, 42, 46, 61, 64, 73, 75, 76, 77, 79, 80, 82, 90, 91, 93, 94], "is_issu": [8, 20], "is_outlier_issu": [8, 76, 77, 79, 80, 83, 84], "annot": [8, 31, 41, 51, 52, 53, 55, 56, 58, 59, 68, 71, 72, 73, 75, 76, 77, 79, 80, 82, 83, 84, 85, 88, 92], "transform": [8, 42, 44, 46, 60, 61, 77, 80, 83, 89, 93, 94, 95], "dissimilar": [8, 79, 80], "preced": 8, "cosin": [8, 60, 89], "incorrect": [8, 58, 61, 64, 75, 76, 77, 79, 80, 83, 84, 88, 91, 93], "due": [8, 35, 37, 61, 65, 67, 75, 76, 77, 79, 80, 83, 84], "appear": [8, 31, 41, 52, 53, 56, 64, 77, 79, 80, 83, 91, 92], "likelihood": [8, 35, 37, 53, 58, 60, 61, 65, 69], "now": [8, 35, 74, 75, 77, 86, 88, 89, 91, 93, 94, 95], "u": [8, 75, 76, 79, 82, 83, 84, 86, 87, 90, 91, 92, 93, 94, 95], "token": [8, 45, 67, 68, 69, 70, 71, 72, 82, 84, 85], "calcul": [8, 16, 22, 35, 42, 51, 55, 56, 58, 59, 60, 63, 67, 81, 83], "hamper": [8, 81, 83], "analyt": [8, 73, 82, 86], "lead": [8, 58, 61, 83, 88], "draw": [8, 76, 77], "conclus": [8, 80], "try": [8, 35, 37, 50, 51, 65, 67, 73, 77, 79, 80, 82, 83, 84, 92], "veri": [8, 31, 52, 56, 58, 76, 77, 79, 80, 82, 83, 84, 86, 89, 91, 94], "rare": [8, 37, 59, 76, 77, 79, 80, 82, 83, 84], "anomal": [8, 61, 76, 77, 79, 80, 83, 84], "articl": [8, 35, 82], "ai": [8, 73, 75, 76, 77, 79, 80, 81, 82, 83, 85, 86, 87, 89, 91, 93, 94, 95], "blog": 8, "unexpect": [8, 32, 36, 80], "consequ": 8, "inspect": [8, 75, 77, 83, 84, 88, 91, 94], "neg": [8, 58, 59, 76, 77, 81], "affect": [8, 32, 36, 65, 71, 80, 82], "extrem": [8, 76, 77, 79, 80, 82, 83, 84], "rel": [8, 31, 51, 52, 60, 76, 77, 79, 80, 83, 84, 89], "record": [8, 32, 36, 75, 79, 91], "abbrevi": 8, "misspel": 8, "typo": [8, 72], "resolut": 8, "video": [8, 81], "audio": [8, 76, 77, 82, 85], "minor": [8, 45], "variat": 8, "translat": 8, "d": [8, 44, 79, 80, 84, 87, 93, 95], "constant": [8, 27, 63], "median": [8, 26, 44], "question": [8, 20, 73, 84], "nearli": [8, 20, 77, 79, 80, 83], "awar": [8, 74, 84], "presenc": [8, 84], "signific": [8, 79, 80, 84], "violat": [8, 79, 80, 84], "assumpt": [8, 79, 80, 84], "changepoint": [8, 79, 80, 84], "shift": [8, 79, 80, 84], "drift": [8, 77, 79, 84], "autocorrel": [8, 79, 80, 84], "almost": [8, 79, 80, 84], "adjac": [8, 79, 80, 84], "tend": [8, 31, 40, 79, 80, 84, 92, 95], "sequenti": [8, 32, 36, 50, 83], "gap": 8, "b": [8, 16, 17, 18, 20, 21, 22, 24, 26, 27, 31, 45, 46, 71, 79, 80, 81, 84, 90, 93, 95], "x1": [8, 56, 59, 88], "x2": [8, 56, 59, 88], "10th": 8, "100th": 8, "90": [8, 71, 79, 83, 84, 89, 90, 91, 92, 93], "similarli": [8, 32, 36, 76, 79, 82, 83, 88], "math": [8, 83], "behind": [8, 60, 84], "fundament": 8, "proper": [8, 46, 51, 56, 59, 80, 83, 86, 88, 93], "closer": [8, 58, 88], "scenario": [8, 61, 76, 77], "underli": [8, 60, 69, 71, 95], "stem": [8, 60, 89], "evolv": 8, "influenc": 8, "accordingli": 8, "emploi": [8, 87, 89], "partit": [8, 90], "ahead": 8, "good": [8, 32, 36, 44, 50, 52, 58, 61, 65, 67, 68, 73, 79, 80, 83], "fix": [8, 51, 80, 84, 91, 94], "problem": [8, 35, 42, 68, 73, 76, 77, 80, 82, 83], "deploy": [8, 84, 91, 93, 94], "overlook": [8, 58, 88], "fact": 8, "thu": [8, 31, 36, 52, 75, 79, 80, 84, 90, 93, 95], "diagnos": [8, 77, 82], "rarest": [8, 77], "q": [8, 88], "fall": [8, 58, 67, 71, 84, 89], "subpar": 8, "special": [8, 45], "techniqu": [8, 88], "smote": 8, "asymmetr": [8, 31], "properli": [8, 35, 41, 46, 47, 65, 82, 87, 89, 91, 92], "too": [8, 37, 42, 60, 77, 82, 83, 88], "dark": [8, 92], "bright": [8, 95], "blurri": [8, 83], "abnorm": [8, 59, 83, 88], "cluster": [8, 16, 27], "slice": 8, "poor": 8, "subpopul": 8, "lowest": [8, 51, 59, 77, 82, 83, 86, 87, 88, 92], "get_self_confidence_for_each_label": [8, 42, 61], "power": [8, 79, 80, 81, 83, 84, 95], "r": [8, 35, 63, 76, 77, 91, 92], "tabular": [8, 73, 76, 77, 78, 82, 85, 86], "categor": [8, 60, 76, 77, 78, 82, 91, 93], "encod": [8, 43, 59, 65, 68, 79, 80, 82, 91, 92, 93, 94], "miss": [8, 23, 32, 36, 46, 56, 58, 79, 82, 88, 91], "pattern": 8, "contribut": [8, 16, 88], "isn": [8, 15, 23], "approxim": [8, 16, 35, 60, 86], "shaplei": [8, 16], "knn": [8, 11, 16, 22, 27, 60, 79, 89], "scalabl": 8, "sacrific": 8, "One": [8, 46, 60, 82], "quantif": 8, "exert": [8, 77], "possible_issue_typ": 8, "label_kwarg": 8, "outlier_kwarg": 8, "near_dupl": [8, 12, 17, 76, 77, 79, 80, 82, 83, 84], "near_duplicate_kwarg": 8, "non_iid": [8, 12, 22, 77, 79, 80, 83, 84], "non_iid_kwarg": 8, "class_imbal": [8, 12, 18, 77, 79, 80, 83, 84], "class_imbalance_kwarg": 8, "underperforming_group_kwarg": 8, "null_kwarg": 8, "health_summary_paramet": [8, 19, 21, 26], "health_summari": [8, 21, 31, 73, 81], "health_summary_kwarg": 8, "tandem": [8, 81], "view": [8, 32, 36, 37, 67, 69, 71, 73, 75, 76, 77, 79, 80, 81, 84, 86, 87, 88, 89, 90, 91, 93, 94, 95], "ood_kwarg": 8, "outofdistribut": [8, 24, 60, 89], "outsid": 8, "outlierissuemanag": [8, 12, 19, 24, 76], "nearduplicateissuemanag": [8, 12, 17, 19], "noniidissuemanag": [8, 12, 19, 22], "num_permut": [8, 22], "permut": [8, 22], "significance_threshold": [8, 22], "signic": 8, "noniid": [8, 19], "classimbalanceissuemanag": [8, 12, 18, 19], "underperforminggroupissuemanag": [8, 12, 19, 27], "determinin": 8, "neighbour": 8, "min_cluster_sampl": [8, 27], "filter_cluster_id": [8, 19, 27], "clustering_kwarg": [8, 27], "faq": [8, 73, 77, 79, 80, 83, 85], "nullissuemanag": [8, 12, 19, 23], "data_valuation_kwarg": 8, "data_valu": [8, 12, 19], "datavaluationissuemanag": [8, 12, 16, 19], "codeblock": 8, "demonstr": [8, 35, 76, 77, 80, 82, 83, 84, 86, 87, 88, 91, 92], "howev": [8, 32, 36, 46, 75, 79, 80, 83, 86, 90, 92, 93, 94], "mandatori": 8, "image_issue_types_kwarg": 8, "32": [8, 75, 76, 81, 83, 86, 88, 92], "fewer": [8, 37, 46, 88], "vice": [8, 52], "versa": [8, 52], "light": [8, 81, 83, 88, 92], "29": [8, 81, 83, 86, 87, 88, 89, 92, 95], "low_inform": [8, 83], "odd_aspect_ratio": [8, 83], "35": [8, 76, 81, 83, 86, 87, 88, 92, 95], "odd_siz": [8, 83], "10": [8, 16, 17, 21, 22, 27, 32, 33, 59, 60, 61, 72, 75, 76, 77, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95], "doc": [8, 32, 36, 73, 75, 76, 77, 81, 83, 84, 86, 87, 89, 91, 95], "data_issu": [9, 13, 14, 28, 76], "issue_find": [9, 13], "factori": [9, 13, 14], "except": [10, 32, 36, 50, 61, 76, 77, 83, 86], "dataformaterror": [10, 13], "add_not": 10, "with_traceback": 10, "tb": 10, "__traceback__": 10, "datasetdicterror": [10, 13], "datasetdict": 10, "usual": [10, 28, 83, 86, 91], "datasetloaderror": [10, 13], "dataset_typ": 10, "fail": 10, "hold": 10, "associ": [10, 14, 32, 36, 59, 86], "sublist": 10, "map_to_int": 10, "abc": [10, 20], "is_avail": [10, 83], "serv": [11, 14, 86], "central": [11, 95], "repositori": 11, "strategi": [11, 42, 82], "being": [11, 31, 32, 36, 37, 42, 45, 46, 61, 79, 82, 84, 91, 92, 93], "_infostrategi": 11, "basi": 11, "collect_statist": 11, "reus": [11, 20], "avoid": [11, 32, 35, 36, 37, 46, 53, 56, 59, 63, 65, 67, 76, 77, 82], "recomput": [11, 94], "weighted_knn_graph": 11, "issue_manager_that_computes_knn_graph": 11, "collect_issues_from_issue_manag": 11, "collect_issues_from_imagelab": 11, "imagelab": 11, "set_health_scor": 11, "health": [11, 21, 31, 52, 73], "get_data_statist": [11, 13], "concret": 12, "subclass": [12, 32, 36, 60, 76], "regressionlabelissuemanag": [12, 19, 25, 26], "multilabelissuemanag": 12, "from_str": [12, 29, 38, 42], "my_issu": 12, "stabl": [13, 19, 25, 34, 38, 46, 49, 60, 74], "unregist": 13, "instati": 14, "public": [14, 84, 88, 92, 95], "creation": [14, 36], "execut": [14, 32, 36, 76, 82, 88], "coordin": [14, 56, 58, 59, 88, 95], "behavior": [14, 31, 32, 36, 59, 82], "At": [14, 59, 82], "get_available_issue_typ": 14, "direct": [15, 23, 32, 36], "valuabl": 16, "vstack": [16, 46, 81, 82, 83, 84, 86, 87], "25": [16, 22, 32, 42, 44, 77, 81, 83, 84, 86, 87, 88, 92, 95], "classvar": [16, 17, 18, 20, 21, 22, 23, 24, 26, 27], "short": [16, 17, 18, 20, 21, 22, 23, 24, 26, 27, 45, 46], "data_valuation_scor": 16, "item": [16, 17, 18, 20, 21, 22, 23, 24, 26, 27, 32, 36, 46, 76, 77, 82, 83, 84, 86, 87], "some_info_kei": [16, 17, 18, 20, 21, 22, 23, 24, 26, 27], "additional_info_kei": [16, 17, 18, 20, 21, 22, 23, 24, 26, 27], "default_threshold": [16, 19, 24], "arxiv": [16, 84], "ab": [16, 84, 88], "1911": 16, "07128": 16, "larger": [16, 63, 65, 67, 80, 81, 82, 83], "collect_info": [16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27], "info_to_omit": [16, 17, 18, 20, 21, 22, 24, 26, 27], "compos": [16, 17, 18, 20, 21, 22, 24, 26, 27, 32, 36, 80, 89, 94], "is_x_issu": [16, 17, 18, 20, 21, 22, 24, 26, 27], "x_score": [16, 17, 18, 20, 21, 22, 24, 26, 27], "val_a": [16, 17, 18, 20, 21, 22, 24, 26, 27], "val_b1": [16, 17, 18, 20, 21, 22, 24, 26, 27], "val_b2": [16, 17, 18, 20, 21, 22, 24, 26, 27], "report_str": [16, 17, 18, 20, 21, 22, 23, 24, 26, 27, 28], "_": [17, 20, 21, 22, 23, 26, 27, 42, 45, 46, 75, 76, 81, 83, 84, 87, 93], "near_duplicate_set": [17, 19, 76, 77, 79, 80, 82, 83, 84], "occurr": [17, 18, 20, 22, 23, 24, 27, 45], "median_nn_dist": 17, "near_duplicate_scor": [17, 76, 77, 79, 80, 82, 83, 84], "class_imbalance_scor": [18, 77], "bleed": [19, 25, 34], "edg": [19, 25, 34, 58, 73, 84, 95], "sharp": [19, 25, 34], "get_health_summari": [19, 21], "ood": [19, 24, 60, 61, 76, 77, 80, 83, 84, 89], "simplified_kolmogorov_smirnov_test": [19, 22], "outlier_cluster_label": [19, 27], "no_underperforming_cluster_id": [19, 27], "set_knn_graph": [19, 27], "perform_clust": [19, 27], "get_worst_clust": [19, 27], "find_issues_with_predict": [19, 25, 26], "find_issues_with_featur": [19, 25, 26], "believ": [20, 92], "priori": [20, 84], "global": [20, 32, 36], "anoth": [20, 31, 35, 45, 58, 61, 79, 80, 82, 84, 86, 89, 94], "abstract": 20, "applic": [21, 51, 82, 84, 86, 87, 95], "typevar": [21, 32, 36, 45, 55, 58, 59], "scalartyp": 21, "covari": [21, 63, 91], "summary_dict": 21, "label_scor": [21, 26, 75, 76, 77, 79, 80, 83, 84, 87], "neighbor_histogram": 22, "non_neighbor_histogram": 22, "kolmogorov": 22, "smirnov": 22, "largest": [22, 35, 42, 61, 65, 67, 88, 92], "empir": [22, 41, 51], "cumul": 22, "ecdf": 22, "histogram": [22, 79, 91], "absolut": [22, 26], "dimension": [22, 46, 75, 84, 89], "trial": 22, "non_iid_scor": [22, 77, 79, 80, 84], "null_track": 23, "extend": [23, 43, 83, 88, 89, 95], "superclass": 23, "arbitrari": [23, 31, 67, 71, 76, 89, 91], "prompt": 23, "address": [23, 76, 77, 80, 82, 94], "enabl": [23, 36], "null_scor": [23, 77], "37037": 24, "q3_avg_dist": 24, "iqr_avg_dist": 24, "median_outlier_scor": 24, "multipli": 26, "deleg": 26, "confus": [27, 31, 32, 36, 37, 46, 59, 94, 95], "50": [27, 36, 82, 84, 86, 88, 89, 92], "keepdim": [27, 82], "signifi": 27, "absenc": 27, "find_issues_kwarg": 27, "int64": [27, 75, 86], "npt": 27, "int_": 27, "id": [27, 51, 76, 82, 83, 86], "unique_cluster_id": 27, "_description_": 27, "performed_clust": 27, "worst_cluster_id": 27, "underperforming_group_scor": 27, "datset": 28, "exclud": [28, 68, 72, 76, 82, 95], "get_report": 28, "qualnam": [29, 42], "boundari": [29, 42, 76, 77], "enum": [29, 42], "continu": [29, 80, 82, 83, 86, 88, 91, 93, 94, 95], "binari": [29, 42, 46, 53, 55, 84, 95], "simultan": 29, "task_str": 29, "is_classif": 29, "__contains__": [29, 38, 42], "member": [29, 32, 36, 42, 76, 77], "typeerror": [29, 42], "12": [29, 42, 75, 76, 77, 79, 80, 81, 82, 83, 84, 86, 88, 89, 91, 92, 93, 94, 95], "__getitem__": [29, 38, 42], "match": [29, 31, 32, 36, 37, 42, 51, 52, 61, 76, 77, 81, 83, 88, 90, 92], "__iter__": [29, 38, 42], "__len__": [29, 38, 42], "alias": [29, 42], "is_regress": 29, "is_multilabel": 29, "overview": [31, 75, 77, 79, 80, 83, 86, 88, 89, 91, 93, 94, 95], "modifi": [31, 32, 35, 36, 46, 82, 84], "help": [31, 32, 36, 59, 73, 74, 75, 76, 79, 80, 81, 82, 83, 86, 87, 91, 92, 93, 94, 95], "rank_classes_by_label_qu": [31, 77], "merg": [31, 45, 73, 81, 82, 95], "find_overlapping_class": [31, 82, 84], "problemat": [31, 52, 68, 72, 75, 88, 95], "unnorm": [31, 52, 84], "abov": [31, 32, 35, 36, 46, 51, 58, 59, 61, 67, 71, 75, 76, 77, 79, 80, 82, 83, 84, 86, 87, 88, 90, 91, 92, 93, 94, 95], "model_select": [31, 42, 75, 76, 77, 79, 80, 82, 83, 84, 86, 87, 89, 91, 93, 94], "cross_val_predict": [31, 36, 75, 76, 77, 79, 80, 82, 84, 86, 90, 91, 93, 94], "get_data_labels_from_dataset": 31, "yourfavoritemodel": [31, 84], "cv": [31, 42, 75, 76, 77, 79, 84, 86, 93], "df": [31, 46, 72, 75, 82], "overall_label_qu": [31, 52], "col": 31, "prob": [31, 45, 84, 90], "divid": [31, 52, 61], "label_nois": [31, 52], "human": [31, 81, 92, 95], "clearli": [31, 61, 83, 88, 92], "num": [31, 52, 81, 84], "overlap": [31, 73, 81, 82, 84], "ontolog": 31, "publish": [31, 95], "therefor": [31, 61], "vehicl": [31, 81], "truck": [31, 81, 89, 92], "intuit": [31, 52], "car": [31, 81, 88, 92], "frequent": [31, 51, 79, 82, 91], "characterist": 31, "l": [31, 32, 36, 56, 58, 59], "class1": 31, "class2": 31, "relationship": 31, "dog": [31, 46, 52, 54, 68, 81, 82, 89, 90, 95], "cat": [31, 46, 52, 54, 81, 82, 89, 90], "captur": [31, 75, 88, 89, 92], "co": [31, 32, 33], "noisy_label": [31, 76, 77, 87], "overlapping_class": 31, "descend": [31, 32, 36, 42, 52, 59], "overall_label_health_scor": [31, 52, 84], "suggest": [31, 51, 52, 58, 80, 82, 83, 91, 94], "half": [31, 32, 34, 36, 52, 81, 95], "health_scor": [31, 52], "classes_by_label_qu": [31, 77], "cnn": [32, 34, 36, 83], "cifar": [32, 33, 81, 89], "teach": [32, 33], "bhanml": 32, "blob": 32, "master": [32, 75, 76, 77, 79, 80, 81, 83, 84, 86, 87, 88, 89, 91, 93, 94], "call_bn": [32, 34], "bn": 32, "input_channel": 32, "n_output": 32, "dropout_r": 32, "top_bn": 32, "architectur": [32, 36], "shown": [32, 59, 76, 82, 86, 89, 90, 92, 95], "forward": [32, 33, 34, 36, 83, 86], "overridden": [32, 36], "although": [32, 36, 60, 79, 93], "recip": [32, 36], "afterward": [32, 36], "sinc": [32, 36, 39, 47, 52, 59, 67, 71, 82, 86, 87, 88, 90, 95], "former": [32, 36], "hook": [32, 36, 81], "silent": [32, 35, 36], "t_destin": [32, 34, 36], "__call__": [32, 34, 36, 38, 42], "add_modul": [32, 34, 36], "child": [32, 36], "fn": [32, 36, 59], "recurs": [32, 36, 42], "submodul": [32, 36], "children": [32, 34, 36, 95], "nn": [32, 33, 36, 83], "init": [32, 36, 84], "no_grad": [32, 36, 83, 89], "init_weight": [32, 36], "linear": [32, 36, 80, 83, 94], "fill_": [32, 36], "net": [32, 36, 75, 81, 83], "in_featur": [32, 36], "out_featur": [32, 36], "bia": [32, 36, 83], "tensor": [32, 33, 36, 75, 80, 83, 89, 94], "requires_grad": [32, 36], "bfloat16": [32, 34, 36], "cast": [32, 36, 75], "buffer": [32, 34, 36], "datatyp": [32, 36], "xdoctest": [32, 36], "undefin": [32, 36], "var": [32, 36], "buf": [32, 36], "20l": [32, 36], "1l": [32, 36], "5l": [32, 36], "call_super_init": [32, 34, 36], "immedi": [32, 36, 89], "compil": [32, 34, 36, 50], "cpu": [32, 34, 36, 37, 75, 83], "move": [32, 36, 42, 74, 81], "cuda": [32, 34, 36, 75, 83], "devic": [32, 36, 75, 83], "gpu": [32, 36, 75, 80, 94], "live": [32, 36], "copi": [32, 36, 63, 75, 76, 77, 79, 82, 87, 90, 91, 93], "doubl": [32, 34, 36], "dump_patch": [32, 34, 36], "eval": [32, 34, 36, 83, 87, 89], "dropout": [32, 36], "batchnorm": [32, 36], "grad": [32, 36], "extra_repr": [32, 34, 36], "line": [32, 36, 73, 76, 81, 86, 89, 95], "get_buff": [32, 34, 36], "target": [32, 33, 36, 63, 64, 89, 91], "throw": [32, 36], "get_submodul": [32, 34, 36], "explan": [32, 36], "fulli": [32, 36, 50, 82], "qualifi": [32, 36], "referenc": [32, 36], "attributeerror": [32, 36], "invalid": [32, 36, 80], "resolv": [32, 36, 95], "get_extra_st": [32, 34, 36], "state_dict": [32, 34, 36], "set_extra_st": [32, 34, 36], "build": [32, 36, 83, 92], "picklabl": [32, 36], "serial": [32, 36], "backward": [32, 36, 83], "break": [32, 36, 83, 88], "pickl": [32, 36, 88], "get_paramet": [32, 34, 36], "let": [32, 36, 60, 61, 75, 77, 79, 80, 82, 83, 86, 87, 88, 89, 91, 92, 93, 94, 95], "net_b": [32, 36], "net_c": [32, 36], "conv": [32, 36], "conv2d": [32, 36, 83], "16": [32, 36, 42, 67, 75, 76, 77, 79, 80, 81, 82, 83, 84, 86, 88, 89, 91, 92, 94, 95], "33": [32, 36, 81, 88, 92], "kernel_s": [32, 36], "stride": [32, 36], "200": [32, 36, 61, 81, 88, 95], "diagram": [32, 36, 90], "degre": [32, 36, 91], "queri": [32, 36, 77, 82, 83, 87], "named_modul": [32, 34, 36], "o": [32, 36, 44, 45, 75, 76, 77, 81, 82, 84, 87, 88, 95], "transit": [32, 36], "ipu": [32, 34, 36], "load_state_dict": [32, 34, 36], "strict": [32, 36, 42], "persist": [32, 36], "strictli": [32, 36], "inplac": [32, 36, 86], "preserv": [32, 36, 46], "namedtupl": [32, 36], "missing_kei": [32, 36], "unexpected_kei": [32, 36], "runtimeerror": [32, 36], "idx": [32, 36, 46, 47, 59, 76, 82, 83, 84, 86, 88, 89], "named_buff": [32, 34, 36], "prefix": [32, 36, 75, 95], "remove_dupl": [32, 36], "prepend": [32, 36], "running_var": [32, 36], "named_children": [32, 34, 36], "conv4": [32, 36], "conv5": [32, 36], "memo": [32, 36], "named_paramet": [32, 34, 36], "register_backward_hook": [32, 34, 36], "deprec": [32, 36, 39, 75, 80, 82, 94], "favor": [32, 36], "register_full_backward_hook": [32, 34, 36], "removablehandl": [32, 36], "register_buff": [32, 34, 36], "running_mean": [32, 36], "register_forward_hook": [32, 34, 36], "with_kwarg": [32, 36], "always_cal": [32, 36], "won": [32, 36, 76, 77, 82, 87], "possibli": [32, 36, 79, 93], "fire": [32, 36, 81], "register_module_forward_hook": [32, 36], "regardless": [32, 36, 76, 77], "register_forward_pre_hook": [32, 34, 36], "And": [32, 36], "forward_pr": [32, 36], "register_module_forward_pre_hook": [32, 36], "gradient": [32, 36, 79, 83, 91], "respect": [32, 36, 56, 59, 84, 88], "grad_input": [32, 36], "grad_output": [32, 36], "technic": [32, 36], "caller": [32, 36], "register_module_full_backward_hook": [32, 36], "register_full_backward_pre_hook": [32, 34, 36], "backward_pr": [32, 36], "register_module_full_backward_pre_hook": [32, 36], "register_load_state_dict_post_hook": [32, 34, 36], "post": [32, 36], "incompatible_kei": [32, 36], "modif": [32, 36], "thrown": [32, 36], "register_modul": [32, 34, 36], "register_paramet": [32, 34, 36], "register_state_dict_pre_hook": [32, 34, 36], "keep_var": [32, 36], "requires_grad_": [32, 34, 36], "autograd": [32, 36], "freez": [32, 36, 75, 80, 94], "finetun": [32, 36], "gan": [32, 36], "share_memori": [32, 34, 36], "share_memory_": [32, 36], "destin": [32, 36], "shallow": [32, 36], "releas": [32, 36, 74, 75, 82], "design": [32, 36], "ordereddict": [32, 36], "detach": [32, 36, 83], "non_block": [32, 36], "memory_format": [32, 36], "channels_last": [32, 36], "Its": [32, 36, 42, 52, 58], "complex": [32, 36, 75], "integr": [32, 36, 73], "asynchron": [32, 36], "host": [32, 36], "pin": [32, 36, 80, 81, 94], "desir": [32, 36, 45, 59], "4d": [32, 36], "ignore_w": [32, 36], "determinist": [32, 36, 75], "1913": [32, 36], "3420": [32, 36], "5113": [32, 36], "2325": [32, 36], "env": [32, 36], "torch_doctest_cuda1": [32, 36], "gpu1": [32, 36], "1914": [32, 36], "5112": [32, 36], "2324": [32, 36], "float16": [32, 36], "cdoubl": [32, 36], "3741": [32, 36], "2382": [32, 36], "5593": [32, 36], "4443": [32, 36], "complex128": [32, 36], "6122": [32, 36], "1150": [32, 36], "to_empti": [32, 34, 36], "storag": [32, 36, 80, 94], "dst_type": [32, 36], "xpu": [32, 34, 36], "zero_grad": [32, 34, 36, 83], "set_to_non": [32, 36], "reset": [32, 36], "context": [32, 36, 88], "noisili": [33, 84], "han": 33, "2018": 33, "cifar_cnn": [33, 34], "loss_coteach": [33, 34], "y_1": 33, "y_2": 33, "forget_r": 33, "class_weight": 33, "logit": [33, 50, 83], "decim": [33, 46], "quickli": [33, 75, 79, 80, 82, 83, 87, 89, 92, 93, 95], "forget": [33, 42, 95], "rate_schedul": 33, "epoch": [33, 34, 36, 82, 83], "initialize_lr_schedul": [33, 34], "lr": [33, 34, 36], "001": [33, 61, 82], "250": [33, 76, 77, 84, 88], "epoch_decay_start": 33, "80": [33, 79, 83, 87, 91, 92, 93], "schedul": 33, "adjust": [33, 37, 55, 60, 61, 73, 84], "beta": 33, "adam": 33, "adjust_learning_r": [33, 34], "alpha_plan": 33, "beta1_plan": 33, "forget_rate_schedul": [33, 34], "num_gradu": 33, "expon": 33, "tell": [33, 80, 83, 84, 94], "train_load": [33, 36], "model1": [33, 84], "optimizer1": 33, "model2": [33, 84], "optimizer2": 33, "dataload": [33, 83, 89], "parser": 33, "parse_arg": 33, "num_iter_per_epoch": 33, "print_freq": 33, "topk": 33, "top1": 33, "top5": 33, "test_load": 33, "offici": [34, 49, 95], "wish": [34, 49, 89, 92, 95], "adj_confident_thresholds_shar": [34, 35], "labels_shar": [34, 35], "pred_probs_shar": [34, 35], "labelinspector": [34, 35, 82], "get_num_issu": [34, 35], "get_quality_scor": [34, 35], "update_confident_threshold": [34, 35], "score_label_qu": [34, 35], "split_arr": [34, 35], "mnist_pytorch": 34, "get_mnist_dataset": [34, 36], "get_sklearn_digits_dataset": [34, 36], "simplenet": [34, 36], "batch_siz": [34, 35, 36, 65, 67, 82, 83, 89, 92], "log_interv": [34, 36], "momentum": [34, 36], "no_cuda": [34, 36], "test_batch_s": [34, 36, 83], "loader": [34, 36, 83], "set_predict_proba_request": [34, 36], "set_predict_request": [34, 36], "coteach": [34, 74], "mini": [35, 65, 67, 82], "low_self_confid": [35, 37, 53], "self_confid": [35, 37, 38, 42, 53, 55, 61, 69, 71, 82, 84, 93, 94], "conveni": [35, 75, 80, 94], "script": 35, "labels_fil": [35, 82], "pred_probs_fil": [35, 82], "quality_score_kwarg": 35, "num_issue_kwarg": 35, "return_mask": 35, "variant": [35, 51, 92], "read": [35, 39, 77, 82, 84, 89, 95], "zarr": [35, 82], "memmap": [35, 92], "pythonspe": 35, "mmap": [35, 82], "hdf5": 35, "further": [35, 52, 53, 55, 58, 59, 67, 68, 75, 82], "yourfil": 35, "npy": [35, 81, 82, 92], "mmap_mod": [35, 92], "tip": [35, 37, 50, 82], "save_arrai": 35, "your_arrai": 35, "disk": [35, 81, 82], "npz": [35, 95], "maxim": [35, 51, 65, 67, 92], "multiprocess": [35, 37, 53, 65, 67, 82, 83], "linux": [35, 65, 67], "physic": [35, 37, 65, 67, 88], "psutil": [35, 37, 65, 67], "labels_arrai": [35, 47], "predprob": 35, "pred_probs_arrai": 35, "back": [35, 59, 76, 82, 88, 89], "store_result": 35, "becom": [35, 89], "verifi": [35, 82, 86, 89], "long": [35, 51, 60, 86], "enough": [35, 46, 82], "chunk": [35, 90], "ram": [35, 81], "faster": [35, 60, 63, 65, 67, 82, 84], "end_index": 35, "labels_batch": 35, "pred_probs_batch": 35, "batch_result": 35, "indices_of_examples_with_issu": [35, 82], "shortcut": 35, "encount": [35, 37, 65], "1000": [35, 75, 80, 82, 89], "aggreg": [35, 38, 42, 51, 55, 58, 61, 71, 82, 84, 86], "fetch": [35, 75, 77], "seen": [35, 82, 89, 95], "far": [35, 51], "label_quality_scor": [35, 55, 58, 61, 64, 84, 88, 91], "method1": 35, "method2": 35, "normalized_margin": [35, 37, 38, 42, 53, 55, 61, 69, 71], "low_normalized_margin": [35, 37, 53], "issue_indic": [35, 58, 83], "update_num_issu": 35, "arr": [35, 82], "chunksiz": 35, "convnet": 36, "bespok": [36, 50], "download": [36, 75, 82, 89], "mnist": [36, 73, 75, 81], "handwritten": 36, "digit": [36, 75, 81], "last": [36, 42, 56, 59, 76, 77, 82, 86, 88, 95], "sklearn_digits_test_s": 36, "hard": [36, 81, 89], "64": [36, 79, 83, 84, 88, 92, 93], "01": [36, 61, 63, 75, 83, 84, 87, 88, 89, 92], "templat": 36, "flexibli": 36, "among": [36, 51, 84], "test_set": 36, "Be": 36, "overrid": 36, "train_idx": [36, 46, 89], "train_label": [36, 89, 94], "scikit": [36, 46, 60, 73, 75, 76, 77, 79, 80, 82, 85, 91, 94], "encourag": [37, 53, 61, 64], "multilabel_classif": [37, 52, 53, 55, 61, 82], "pred_probs_by_class": 37, "prune_count_matrix_col": 37, "rank_by_kwarg": [37, 53, 61, 84], "num_to_remove_per_class": [37, 53], "bad": [37, 53, 58, 61, 80, 82, 94], "seem": [37, 84, 87], "aren": 37, "confidence_weighted_entropi": [37, 38, 42, 53, 55, 61, 69, 71], "label_issues_idx": [37, 61], "entropi": [37, 39, 41, 42, 60, 61], "prune_by_class": [37, 53, 84], "predicted_neq_given": [37, 53, 84], "prune_counts_matrix": 37, "smallest": [37, 61], "unus": 37, "number_of_mislabeled_examples_in_class_k": 37, "delet": [37, 73, 82, 94], "thread": [37, 53], "window": [37, 75, 81], "shorter": [37, 56], "find_predicted_neq_given": 37, "find_label_issues_using_argmax_confusion_matrix": 37, "remove_noise_from_class": [38, 46], "clip_noise_r": [38, 46], "clip_valu": [38, 46], "value_count": [38, 46, 82], "value_counts_fill_missing_class": [38, 46], "get_missing_class": [38, 46], "round_preserving_sum": [38, 46], "round_preserving_row_tot": [38, 46], "estimate_pu_f1": [38, 46], "confusion_matrix": [38, 46], "print_square_matrix": [38, 46], "print_noise_matrix": [38, 46, 84], "print_inverse_noise_matrix": [38, 46], "print_joint_matrix": [38, 46, 84], "compress_int_arrai": [38, 46], "train_val_split": [38, 46], "subset_x_i": [38, 46], "subset_label": [38, 46], "subset_data": [38, 46], "extract_indices_tf": [38, 46], "unshuffle_tensorflow_dataset": [38, 46], "is_torch_dataset": [38, 46], "is_tensorflow_dataset": [38, 46], "csr_vstack": [38, 46], "append_extra_datapoint": [38, 46], "get_num_class": [38, 46], "num_unique_class": [38, 46], "get_unique_class": [38, 46], "format_label": [38, 46], "smart_display_datafram": [38, 46], "force_two_dimens": [38, 46], "latent_algebra": [38, 74], "compute_ps_py_inv_noise_matrix": [38, 40], "compute_py_inv_noise_matrix": [38, 40], "compute_inv_noise_matrix": [38, 40], "compute_noise_matrix_from_invers": [38, 40], "compute_pi": [38, 40], "compute_pyx": [38, 40], "label_quality_util": 38, "get_normalized_entropi": [38, 39], "multilabel_util": [38, 87], "stack_compl": [38, 43], "get_onehot_num_class": [38, 43], "int2onehot": [38, 43, 87], "onehot2int": [38, 43, 87], "multilabel_scor": [38, 55], "classlabelscor": [38, 42], "exponential_moving_averag": [38, 42, 55], "softmin": [38, 42, 55, 58, 67, 71], "possible_method": [38, 42], "multilabelscor": [38, 42], "get_class_label_quality_scor": [38, 42], "multilabel_pi": [38, 42], "get_cross_validated_multilabel_pred_prob": [38, 42], "transform_distances_to_scor": [38, 44], "token_classification_util": [38, 95], "get_sent": [38, 45, 95], "filter_sent": [38, 45, 95], "process_token": [38, 45], "merge_prob": [38, 45], "color_sent": [38, 45], "assert_valid_input": [38, 47], "assert_valid_class_label": [38, 47], "assert_nonempty_input": [38, 47], "assert_indexing_work": [38, 47], "labels_to_arrai": [38, 47], "labels_to_list_multilabel": [38, 47], "min_allowed_prob": 39, "wikipedia": 39, "activ": [39, 41, 51, 73, 86], "towardsdatasci": 39, "cheatsheet": 39, "ec57bc067c0b": 39, "clip": [39, 46, 75], "behav": 39, "unnecessari": [39, 82], "slightli": [39, 93, 94], "interv": [39, 42, 89], "herein": 40, "inexact": 40, "cours": 40, "propag": 40, "throughout": [40, 46, 63, 75, 86, 92, 95], "easili": [40, 74, 75, 77, 79, 80, 84, 86, 87, 89, 90, 91, 92, 93, 94], "increas": [40, 58, 60, 61, 75, 76, 82, 86, 87, 95], "dot": [40, 71, 82], "true_labels_class_count": 40, "pyx": 40, "multiannot": 41, "assert_valid_inputs_multiannot": 41, "labels_multiannot": [41, 51], "ensembl": [41, 42, 51, 61, 79, 82, 87, 89, 91, 93], "allow_single_label": 41, "annotator_id": 41, "assert_valid_pred_prob": 41, "pred_probs_unlabel": [41, 51], "format_multiannotator_label": [41, 51, 86], "lexicograph": [41, 46], "formatted_label": [41, 46], "old": [41, 46, 74, 75, 81], "check_consensus_label_class": 41, "consensus_label": [41, 51, 86], "consensus_method": [41, 51], "consensu": [41, 51, 73, 85, 95], "establish": [41, 91, 94], "compute_soft_cross_entropi": 41, "soft": [41, 81], "find_best_temp_scal": 41, "coarse_search_rang": [41, 63, 82], "fine_search_s": [41, 63, 82], "temperatur": [41, 42, 58, 67, 71], "scale": [41, 44, 81, 82, 89, 92, 93], "factor": [41, 42, 44, 65, 67], "minim": [41, 58, 89], "temp_scale_pred_prob": 41, "temp": 41, "sharpen": [41, 81], "smoothen": 41, "get_normalized_margin_for_each_label": [42, 61], "get_confidence_weighted_entropy_for_each_label": [42, 61], "75": [42, 76, 77, 81, 86, 87, 88, 91, 92, 95], "scorer": 42, "alpha": [42, 55, 58, 76, 77, 84, 87, 91], "exponenti": 42, "ema": 42, "s_1": 42, "s_k": 42, "ema_k": 42, "accord": [42, 53, 79, 80, 84, 95], "formula": [42, 44], "_t": 42, "cdot": 42, "s_t": 42, "qquad": 42, "leq": 42, "_1": 42, "give": [42, 61, 84, 86, 92], "recent": [42, 95], "success": 42, "previou": [42, 82, 83, 88], "discount": 42, "s_ema": 42, "175": [42, 83, 84, 88], "underflow": 42, "nan": [42, 51, 79, 86, 91, 93], "aggregated_scor": 42, "base_scor": 42, "base_scorer_kwarg": 42, "aggregator_kwarg": [42, 55], "n_sampl": 42, "n_label": 42, "worst": [42, 86], "class_label_quality_scor": 42, "42": [42, 80, 81, 83, 88, 89, 92, 95], "452": 42, "new_scor": 42, "575": 42, "get_label_quality_scores_per_class": [42, 54, 55], "ml_scorer": 42, "binar": [42, 43], "reformat": [42, 75], "wider": 42, "splitter": 42, "kfold": [42, 83], "onevsrestclassifi": [42, 87], "randomforestclassifi": [42, 84, 87], "n_split": [42, 77, 83, 87], "pred_prob_slic": 43, "onehot": 43, "hot": [43, 53, 59, 65, 68, 79, 81, 82, 91, 92, 93], "onehot_matrix": 43, "avg_dist": 44, "scaling_factor": 44, "exp": [44, 60, 61, 76], "dt": 44, "right": [44, 56, 59, 80, 87, 88, 89, 94], "strength": [44, 59], "pronounc": 44, "differenti": 44, "ly": 44, "rule": [44, 45, 81], "thumb": 44, "ood_features_scor": [44, 60, 89], "88988177": 44, "80519832": 44, "token_classif": [45, 69, 71, 72, 82], "sentenc": [45, 69, 71, 72, 80, 94], "readabl": 45, "lambda": [45, 75, 76, 82, 86], "long_sent": 45, "headlin": 45, "charact": [45, 46], "s1": 45, "s2": 45, "processed_token": 45, "alecnlcb": 45, "entiti": [45, 73, 82, 95], "mapped_ent": 45, "unique_ident": 45, "loc": [45, 76, 77, 83, 95], "nbitbas": [45, 55], "probs_merg": 45, "55": [45, 81, 83, 88, 92], "0125": [45, 71], "0375": 45, "075": 45, "025": 45, "color": [45, 68, 76, 77, 79, 84, 87, 89, 91, 92], "red": [45, 59, 76, 77, 81, 84, 87, 88, 89, 92], "colored_sent": 45, "termcolor": 45, "31msentenc": 45, "0m": 45, "ancillari": 46, "class_without_nois": 46, "any_other_class": 46, "choos": [46, 61, 79, 82, 84, 91, 93], "tradition": 46, "new_sum": 46, "fill": 46, "wherea": [46, 53, 90], "come": [46, 76, 77, 82, 83, 89, 92], "major": [46, 51, 74, 83, 89], "versu": [46, 84], "obviou": 46, "cgdeboer": 46, "iteround": 46, "reach": 46, "prob_s_eq_1": 46, "claesen": 46, "f1": [46, 59, 80, 84], "BE": 46, "left_nam": 46, "top_nam": 46, "titl": [46, 76, 77, 84, 87, 89], "short_titl": 46, "round_plac": 46, "pretti": [46, 84], "joint_matrix": 46, "num_possible_valu": 46, "holdout_idx": 46, "extract": [46, 60, 75, 80, 86, 89, 92, 94], "allow_shuffl": 46, "turn": [46, 73, 88], "shuffledataset": 46, "histori": 46, "pre_x": 46, "buffer_s": 46, "csr_matric": 46, "append": [46, 75, 81, 82, 83, 84, 86, 87, 88, 89, 95], "bottom": [46, 56, 59, 88], "to_data": 46, "from_data": 46, "taken": 46, "label_matrix": 46, "canon": 46, "displai": [46, 59, 68, 72, 75, 80, 84, 94, 95], "jupyt": [46, 75, 76, 77, 81, 82, 83, 84, 86, 87, 89, 91, 95], "notebook": [46, 51, 75, 77, 81, 82, 84, 86, 87, 88, 92, 95], "consol": 46, "html": [46, 56, 59, 60, 79, 82, 84], "allow_missing_class": 47, "allow_one_class": 47, "length_x": 47, "labellik": 47, "labels_list": [47, 53], "keraswrappermodel": [49, 50, 73], "keraswrappersequenti": [49, 50], "tf": [50, 75], "legaci": 50, "lack": 50, "keraswrapp": 50, "huggingface_keras_imdb": 50, "unit": [50, 95], "model_kwarg": [50, 63], "compile_kwarg": 50, "sparsecategoricalcrossentropi": 50, "layer": [50, 75, 80, 89, 94], "dens": 50, "my_keras_model": 50, "from_logit": 50, "declar": 50, "apply_softmax": 50, "analysi": 51, "analyz": [51, 73, 84, 86, 87], "get_label_quality_multiannot": [51, 86], "vote": 51, "crowdsourc": [51, 73, 86], "dawid": [51, 86], "skene": [51, 86], "analog": [51, 81, 86], "chosen": [51, 61, 82, 86], "crowdlab": [51, 86], "unlabel": [51, 79, 80, 83, 86, 89, 92], "decid": [51, 80, 81, 86, 91, 94, 95], "get_active_learning_scor": [51, 86], "activelab": [51, 86], "priorit": [51, 58, 88, 92, 95], "showcas": 51, "main": 51, "best_qual": 51, "quality_method": 51, "calibrate_prob": 51, "return_detailed_qu": 51, "return_annotator_stat": 51, "return_weight": 51, "label_quality_score_kwarg": 51, "necessarili": [51, 59, 80, 84], "did": [51, 52, 75, 79, 84, 86, 91, 93, 94], "majority_vot": 51, "ti": 51, "broken": [51, 59, 81], "highest": [51, 59, 76, 83, 90], "0th": 51, "consensus_quality_scor": [51, 86], "annotator_agr": [51, 86], "reman": 51, "1st": 51, "2nd": [51, 65], "3rd": 51, "consensus_label_suffix": 51, "consensus_quality_score_suffix": 51, "suffix": 51, "emsembl": 51, "weigh": [51, 81], "agreement": [51, 86], "agre": 51, "prevent": [51, 82], "overconfid": [51, 90], "wrong": [51, 56, 58, 74, 76, 77, 80, 82, 84, 88, 94], "detailed_label_qu": [51, 86], "annotator_stat": [51, 86], "model_weight": 51, "annotator_weight": 51, "warn": [51, 76, 77, 82], "labels_info": 51, "num_annot": [51, 86], "deriv": [51, 86], "quality_annotator_1": 51, "quality_annotator_2": 51, "quality_annotator_m": 51, "annotator_qu": [51, 86], "num_examples_label": [51, 86], "agreement_with_consensu": [51, 86], "worst_class": [51, 86], "trustworthi": [51, 86, 91], "get_label_quality_multiannotator_ensembl": 51, "weigtht": 51, "budget": 51, "retrain": [51, 91, 94], "active_learning_scor": 51, "improv": [51, 77, 81, 82, 83, 84, 91, 92, 93, 94], "active_learning_scores_unlabel": 51, "get_active_learning_scores_ensembl": 51, "henc": [51, 75, 76, 86], "get_majority_vote_label": [51, 86], "event": 51, "lastli": [51, 79], "convert_long_to_wide_dataset": 51, "labels_multiannotator_long": 51, "wide": [51, 75, 93, 94], "suitabl": [51, 79, 93], "labels_multiannotator_wid": 51, "common_multilabel_issu": [52, 54], "mutual": [52, 87], "exclus": [52, 87], "rank_classes_by_multilabel_qu": [52, 54], "overall_multilabel_health_scor": [52, 54], "multilabel_health_summari": [52, 54], "classes_by_multilabel_qu": 52, "inner": [53, 67], "find_multilabel_issues_per_class": [53, 54], "per_class_label_issu": 53, "label_issues_list": 53, "pred_probs_list": [53, 61, 83, 84], "anim": [54, 89], "rat": 54, "predat": 54, "pet": 54, "reptil": 54, "manner": [55, 86, 91, 93, 94], "box": [56, 58, 59, 81, 88], "object_detect": [56, 58, 59, 88], "return_indices_ranked_by_scor": [56, 88], "overlapping_label_check": [56, 58], "suboptim": [56, 58], "locat": [56, 58, 88, 92, 95], "bbox": [56, 59, 88], "image_nam": [56, 59], "y1": [56, 59, 88], "y2": [56, 59, 88], "later": [56, 59, 60, 94, 95], "corner": [56, 59, 88], "xyxi": [56, 59, 88], "io": [56, 59, 75, 81], "keras_cv": [56, 59], "bounding_box": [56, 59, 88], "detectron": [56, 59, 88], "detectron2": [56, 59, 88], "readthedoc": [56, 59], "en": [56, 59], "latest": [56, 59], "visual": [56, 57, 59, 76, 77, 83, 91, 93, 95], "draw_box": [56, 59], "mmdetect": [56, 59, 88], "swap": [56, 58, 68, 72], "penal": [56, 58], "concern": [56, 58, 73, 77], "issues_from_scor": [57, 58, 66, 67, 68, 70, 71, 72, 88, 92, 95], "compute_overlooked_box_scor": [57, 58], "compute_badloc_box_scor": [57, 58], "compute_swap_box_scor": [57, 58], "pool_box_scores_per_imag": [57, 58], "object_counts_per_imag": [57, 59, 88], "bounding_box_size_distribut": [57, 59, 88], "class_label_distribut": [57, 59, 88], "get_sorted_bbox_count_idx": [57, 59], "plot_class_size_distribut": [57, 59], "plot_class_distribut": [57, 59], "get_average_per_class_confusion_matrix": [57, 59], "calculate_per_class_metr": [57, 59], "aggregation_weight": 58, "imperfect": [58, 82], "chose": [58, 86, 88], "imperfectli": [58, 88], "dirti": [58, 61, 64, 91], "subtyp": 58, "badloc": 58, "nonneg": 58, "high_probability_threshold": 58, "auxiliary_input": [58, 59], "vari": [58, 77], "iou": [58, 59], "heavili": 58, "auxiliarytypesdict": 58, "pred_label": [58, 94], "pred_label_prob": 58, "pred_bbox": 58, "lab_label": 58, "lab_bbox": 58, "similarity_matrix": 58, "min_possible_similar": 58, "scores_overlook": 58, "low_probability_threshold": 58, "scores_badloc": 58, "accident": [58, 79, 80, 82, 94], "scores_swap": 58, "box_scor": 58, "image_scor": [58, 67, 92], "discov": [59, 77, 95], "auxiliari": [59, 89, 92], "_get_valid_inputs_for_compute_scor": 59, "object_count": 59, "down": 59, "bbox_siz": 59, "class_distribut": 59, "plot": [59, 76, 77, 84, 87, 89, 91, 92], "sorted_idx": [59, 89], "class_to_show": 59, "hidden": [59, 89], "max_class_to_show": 59, "prediction_threshold": 59, "overlai": [59, 88], "figsiz": [59, 76, 77, 83, 84, 87, 89], "save_path": [59, 88], "blue": [59, 81, 84, 88], "overlaid": 59, "side": [59, 81, 88], "figur": [59, 84, 87, 89, 91], "extens": [59, 84, 86], "png": [59, 88], "pdf": [59, 60], "svg": 59, "matplotlib": [59, 76, 77, 83, 84, 87, 88, 89, 91], "num_proc": [59, 83], "intersect": [59, 82], "tp": 59, "fp": 59, "ground": [59, 81, 84, 86, 91], "truth": [59, 84, 86, 91], "bias": 59, "avg_metr": 59, "distionari": 59, "95": [59, 69, 71, 79, 81, 84, 91, 92], "per_class_metr": 59, "Of": 60, "li": 60, "smaller": [60, 87, 88], "find_top_issu": [60, 61, 89], "reli": [60, 75, 76, 77, 80, 88, 89, 94], "dist_metr": 60, "dim": [60, 83, 92], "subtract": [60, 61], "renorm": [60, 61, 82], "least_confid": 60, "sum_": 60, "log": [60, 61, 74], "softmax": [60, 67, 71, 83], "literatur": 60, "gen": 60, "liu": 60, "lochman": 60, "zach": 60, "openaccess": 60, "thecvf": 60, "content": [60, 75, 76, 77, 81, 83, 84, 86, 87, 89, 91, 95], "cvpr2023": 60, "liu_gen_pushing_the_limits_of_softmax": 60, "based_out": 60, "distribution_detection_cvpr_2023_pap": 60, "fit_scor": [60, 89], "ood_predictions_scor": 60, "pretrain": [60, 75, 80, 89, 94], "adjust_confident_threshold": 60, "probabilist": [60, 75, 76, 77, 79, 80, 89, 90, 93], "order_label_issu": [61, 74], "whichev": [61, 90], "argsort": [61, 80, 83, 84, 88, 89, 91, 94], "max_": 61, "get_label_quality_ensemble_scor": [61, 82, 84], "weight_ensemble_members_bi": 61, "custom_weight": 61, "log_loss_search_t_valu": 61, "0001": [61, 81], "scheme": 61, "log_loss_search": 61, "log_loss": [61, 80], "1e0": 61, "1e1": 61, "1e2": 61, "2e2": 61, "quality_scor": [61, 89], "forth": 61, "top_issue_indic": 61, "rank_bi": [61, 74], "weird": [61, 72], "minu": 61, "prob_label": 61, "max_prob_not_label": 61, "idea": [61, 88], "AND": [61, 80], "get_epistemic_uncertainti": [62, 63], "get_aleatoric_uncertainti": [62, 63], "corrupt": [63, 91], "linearregress": [63, 82, 91], "y_with_nois": 63, "n_boot": [63, 82], "include_aleatoric_uncertainti": [63, 82], "sole": [63, 76, 86, 89, 93], "bootstrap": [63, 82, 91], "resampl": [63, 75, 82], "epistem": [63, 82, 89, 91], "aleator": [63, 82, 91], "model_final_kwarg": 63, "coars": 63, "thorough": [63, 82], "fine": [63, 75, 80, 89, 94], "grain": 63, "grid": 63, "varianc": [63, 84], "epistemic_uncertainti": 63, "residu": [63, 64, 82], "deviat": [63, 88, 91], "ie": 63, "aleatoric_uncertainti": 63, "outr": 64, "contin": 64, "raw": [64, 73, 74, 77, 81, 83, 86, 88, 89], "aka": [64, 75, 84, 88, 95], "00323821": 64, "33692597": 64, "00191686": 64, "semant": [65, 67, 68, 85], "pixel": [65, 67, 68, 89, 92], "h": [65, 67, 68, 92], "height": [65, 67, 68, 92], "w": [65, 67, 68, 92], "width": [65, 67, 68, 92], "labels_one_hot": [65, 68, 92], "stream": [65, 89, 95], "downsampl": [65, 67, 92], "shrink": [65, 67], "divis": [65, 67, 76], "display_issu": [66, 67, 68, 69, 70, 71, 72, 92, 95], "common_label_issu": [66, 68, 70, 72, 92, 95], "filter_by_class": [66, 68, 92], "segmant": [67, 68], "num_pixel_issu": [67, 92], "product": [67, 82, 83], "pixel_scor": [67, 92], "highlight": [68, 72, 76, 77, 79, 92], "enter": 68, "legend": [68, 76, 77, 87, 88, 91, 92], "colormap": 68, "background": 68, "person": [68, 82, 88, 92, 95], "ambigu": [68, 72, 75, 80, 81, 84, 94, 95], "systemat": [68, 72, 86], "misunderstood": [68, 72], "issues_df": [68, 83], "class_index": 68, "issues_subset": [68, 72], "filter_by_token": [70, 72, 95], "token_score_method": 71, "sentence_score_method": 71, "sentence_score_kwarg": 71, "compris": [71, 72], "token_scor": [71, 95], "converg": 71, "toward": 71, "_softmin_sentence_scor": 71, "sentence_scor": [71, 95], "token_info": 71, "70": [71, 79, 83, 89, 92], "02": [71, 76, 77, 83, 84, 88, 89, 92, 95], "03": [71, 79, 81, 83, 84, 88, 92, 95], "04": [71, 79, 83, 88, 92], "08": [71, 84, 88, 92, 95], "commonli": [72, 74, 76, 77, 87, 95], "But": [72, 80, 84, 95], "restrict": [72, 82], "reliabl": [73, 75, 82, 86, 92, 93], "thousand": 73, "imagenet": [73, 81], "popular": [73, 86, 88], "centric": [73, 79, 80, 83, 85], "capabl": 73, "minut": [73, 75, 79, 80, 81, 86, 87, 88, 91, 92, 93, 94, 95], "conda": 73, "feature_embed": [73, 89], "Then": [73, 82, 83, 91, 93, 94], "your_dataset": [73, 75, 76, 77, 79, 80, 82, 83], "column_name_of_label": [73, 75, 76, 77, 79, 80, 83], "plagu": [73, 77], "untrain": 73, "\u30c4": 73, "label_issues_info": [73, 77], "sklearn_compatible_model": 73, "framework": [73, 87, 88], "complianc": 73, "tag": [73, 87, 95], "sequenc": 73, "recognit": [73, 75, 82, 95], "train_data": [73, 89, 91, 93, 94], "gotten": 73, "test_data": [73, 84, 87, 89, 91, 93, 94], "deal": [73, 77], "tutori": [73, 75, 76, 77, 79, 80, 82, 83, 84, 86, 87, 88, 89, 91, 92, 93, 94, 95], "feel": [73, 75, 77, 82], "free": [73, 75, 77, 79, 80, 82, 83, 84], "ask": [73, 82], "slack": [73, 82], "project": [73, 91], "welcom": 73, "commun": [73, 82], "guidelin": [73, 88], "piec": 73, "studio": [73, 77, 79, 80, 82, 83], "platform": [73, 79, 80, 82, 83], "automl": [73, 82], "foundat": 73, "smart": [73, 79, 80, 82, 83], "edit": [73, 82], "easier": [73, 84], "unreli": [73, 75, 79, 80, 93], "link": [73, 75, 81, 88], "older": 74, "outlin": 74, "substitut": 74, "v2": [74, 79, 93], "get_noise_indic": 74, "psx": 74, "sorted_index_method": 74, "order_label_error": 74, "label_errors_bool": 74, "latent_estim": 74, "num_label_error": 74, "learningwithnoisylabel": 74, "neatli": 74, "organ": [74, 79, 81, 93, 95], "reorgan": 74, "baseline_method": 74, "incorpor": [74, 84], "research": [74, 84], "polyplex": 74, "terminologi": 74, "label_error": 74, "quickstart": [75, 76, 77, 79, 80, 81, 83, 86, 87, 88, 89, 91, 92, 93, 94, 95], "spoken": 75, "500": [75, 89, 95], "english": [75, 81], "pronunci": 75, "wav": 75, "huggingfac": [75, 76, 77, 83], "voxceleb": 75, "speech": [75, 95], "your_pred_prob": [75, 76, 77, 79, 80], "tensorflow_io": 75, "huggingface_hub": 75, "branch": [75, 76, 77, 79, 80, 81, 83, 84, 86, 87, 88, 89, 91, 93, 94], "reproduc": [75, 79, 84, 86], "command": 75, "wget": [75, 88, 92, 95], "navig": 75, "browser": 75, "jakobovski": 75, "archiv": [75, 95], "v1": 75, "tar": [75, 89], "gz": [75, 89], "mkdir": [75, 95], "spoken_digit": 75, "xf": 75, "6_nicolas_32": 75, "data_path": 75, "listdir": 75, "nondeterminist": 75, "file_nam": 75, "endswith": 75, "file_path": 75, "join": [75, 82, 83], "39": [75, 76, 80, 81, 82, 83, 88, 91, 92, 94, 95], "7_george_26": 75, "0_nicolas_24": 75, "0_nicolas_6": 75, "listen": 75, "display_exampl": 75, "click": [75, 76, 77, 81, 83, 84, 86, 87, 89, 91, 95], "expand": [75, 76, 77, 81, 83, 84, 86, 87, 89, 91, 95], "pulldown": [75, 76, 77, 81, 83, 84, 86, 87, 89, 91, 95], "colab": [75, 76, 77, 81, 82, 83, 84, 86, 87, 89, 91, 95], "tfio": 75, "pathlib": 75, "ipython": 75, "load_wav_16k_mono": 75, "filenam": 75, "khz": 75, "file_cont": 75, "read_fil": 75, "sample_r": 75, "decode_wav": 75, "desired_channel": 75, "squeez": 75, "rate_in": 75, "rate_out": 75, "16000": 75, "wav_file_nam": 75, "audio_r": 75, "wav_file_exampl": 75, "plai": [75, 81, 82], "button": 75, "wav_file_name_exampl": 75, "7_jackson_43": 75, "hear": 75, "extractor": 75, "encoderclassifi": 75, "spkrec": 75, "xvect": 75, "feature_extractor": 75, "from_hparam": 75, "run_opt": 75, "uncom": 75, "ffmpeg": 75, "system": [75, 79, 80, 83, 92], "backend": 75, "wav_audio_file_path": 75, "head": [75, 77, 79, 80, 81, 83, 84, 86, 91, 93, 94], "torchaudio": 75, "extract_audio_embed": 75, "emb": [75, 83], "signal": 75, "encode_batch": 75, "embeddings_list": [75, 83], "embeddings_arrai": 75, "opt": [75, 77, 80, 94], "hostedtoolcach": [75, 77, 80, 94], "x64": [75, 77, 80, 94], "lib": [75, 77, 80, 94], "python3": [75, 77, 80, 94], "site": [75, 77, 80, 94], "650": 75, "userwarn": [75, 76, 77, 80, 94], "stft": 75, "return_complex": 75, "view_as_r": 75, "recov": 75, "trigger": 75, "aten": 75, "src": 75, "nativ": 75, "spectralop": 75, "cpp": 75, "863": [75, 94], "_vf": 75, "n_fft": 75, "hop_length": 75, "win_length": 75, "attr": 75, "512": [75, 83], "14": [75, 76, 77, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 91, 92, 93, 94, 95], "196311": 75, "319459": 75, "478975": 75, "2890875": 75, "8170238": 75, "89265": 75, "24": [75, 81, 83, 84, 86, 88, 92, 95], "898056": 75, "256195": 75, "559641": 75, "559721": 75, "62067": 75, "285245": 75, "21": [75, 76, 81, 82, 83, 84, 88, 89, 92, 95], "709627": 75, "5033693": 75, "913803": 75, "819831": 75, "1831515": 75, "208763": 75, "084257": 75, "3210397": 75, "005453": 75, "216152": 75, "478235": 75, "6821785": 75, "053807": 75, "242471": 75, "091424": 75, "78334856": 75, "03954": 75, "23": [75, 81, 83, 84, 88, 92, 95], "569176": 75, "19": [75, 80, 81, 82, 83, 84, 88, 89, 91, 92, 94], "761097": 75, "1258295": 75, "753237": 75, "3508866": 75, "598274": 75, "23712": 75, "2500": 75, "leverag": [75, 80, 82, 84, 86, 94], "tune": [75, 80, 81, 89, 94], "computation": [75, 80, 94], "intens": [75, 80, 94], "held": [75, 79, 80, 81, 88, 89, 90, 93], "straightforward": [75, 79, 93], "benefit": [75, 90, 92, 93], "tol": 75, "num_crossval_fold": [75, 79, 86, 93], "decreas": [75, 82], "never": [75, 84, 87, 89, 90], "accuracy_scor": [75, 80, 84, 93, 94], "cv_accuraci": 75, "9708": 75, "probabilit": [75, 94], "9976": 75, "986": 75, "002161": 75, "176": [75, 81, 84, 87], "002483": 75, "2318": 75, "004411": 75, "1005": 75, "004857": 75, "1871": 75, "007494": 75, "investig": 75, "040587": 75, "999207": 75, "999377": 75, "975220": 75, "999367": 75, "18": [75, 80, 81, 82, 83, 84, 88, 89, 91, 92, 94], "identified_label_issu": [75, 80], "lowest_quality_label": [75, 80, 84, 91, 94], "sort_valu": [75, 77, 79, 80, 82, 83, 84, 86, 87], "516": 75, "1946": 75, "469": 75, "2132": 75, "worth": [75, 84], "iloc": [75, 79, 80, 91, 93, 94], "6_yweweler_25": 75, "7_nicolas_43": 75, "6_theo_27": 75, "6_yweweler_36": 75, "6_yweweler_14": 75, "6_yweweler_35": 75, "6_nicolas_8": 75, "sound": 75, "quit": [75, 89], "22": [75, 76, 81, 83, 84, 87, 88, 92, 95], "blindli": [75, 82, 91, 93, 94], "trust": [75, 82, 84, 86, 90, 91, 93, 94], "underneath": 76, "hood": 76, "alert": 76, "introduct": 76, "mayb": [76, 77, 80], "examin": [76, 77, 79, 88, 93], "your_feature_matrix": [76, 77], "toi": [76, 77, 81, 83, 84, 86], "train_test_split": [76, 77, 89, 93, 94], "inf": [76, 77], "mid": [76, 77], "bins_map": [76, 77], "create_data": [76, 77], "y_bin": [76, 77], "y_i": [76, 77], "y_bin_idx": [76, 77], "y_train": [76, 77, 84, 91], "y_test": [76, 77, 84, 91], "y_train_idx": [76, 77], "y_test_idx": [76, 77], "test_siz": [76, 77, 93, 94], "slide": [76, 77, 81], "decis": [76, 77, 93], "frame": [76, 77], "x_out": [76, 77], "tini": [76, 77], "concaten": [76, 77, 82, 90], "y_out": [76, 77], "y_out_bin": [76, 77], "y_out_bin_idx": [76, 77], "exact_duplicate_idx": [76, 77], "x_duplic": [76, 77], "y_duplic": [76, 77], "y_duplicate_idx": [76, 77], "noisy_labels_idx": [76, 77, 87], "scatter": [76, 77, 84, 87, 91], "black": [76, 77, 81, 91], "cyan": [76, 77], "pyplot": [76, 77, 83, 84, 87, 89, 91], "plt": [76, 77, 83, 84, 87, 89, 91], "plot_data": [76, 77, 84, 87, 91], "fig": [76, 77, 81, 83, 89, 91], "ax": [76, 77, 83, 89, 91], "subplot": [76, 77, 83, 89], "set_titl": [76, 77, 83, 89], "set_xlabel": [76, 77], "x_1": [76, 77], "fontsiz": [76, 77, 83, 84, 87], "set_ylabel": [76, 77], "x_2": [76, 77], "set_xlim": [76, 77], "set_ylim": [76, 77], "linestyl": [76, 77], "circl": [76, 77, 84, 87], "misclassifi": [76, 77], "zip": [76, 77, 83, 88, 95], "label_err": [76, 77], "180": [76, 77, 88], "marker": [76, 77], "facecolor": [76, 77], "edgecolor": [76, 77], "linewidth": [76, 77, 89], "dup": [76, 77], "first_legend": [76, 77], "align": [76, 77], "title_fontproperti": [76, 77], "semibold": [76, 77], "second_legend": [76, 77], "45": [76, 77, 81, 84, 88, 92, 95], "gca": [76, 77], "add_artist": [76, 77], "tight_layout": [76, 77], "ideal": [76, 77], "logist": [76, 77, 80, 86, 89, 94], "remaind": 76, "modal": [76, 77, 82, 86], "132": [76, 77, 84, 88], "9318": 76, "77": [76, 77, 79, 88, 89, 92, 93], "006940": 76, "007830": 76, "40": [76, 77, 80, 81, 83, 92], "014828": 76, "107": [76, 77, 84, 87], "021241": 76, "120": [76, 77, 93], "026407": 76, "notic": [76, 84, 86, 88], "3558": [76, 77], "126": [76, 77, 84, 88, 95], "006636": [76, 77], "130": [76, 77], "012571": [76, 77], "129": [76, 77], "127": [76, 77], "014909": [76, 77], "128": [76, 77, 83], "017443": [76, 77], "6160": [76, 77], "is_near_duplicate_issu": [76, 77, 79, 80, 82, 83, 84], "131": [76, 77, 92], "000000e": [76, 77], "00": [76, 77, 79, 81, 83, 89, 92, 93], "000002": [76, 77], "463180e": [76, 77], "07": [76, 77, 79, 83, 84, 88, 89, 92], "51": [76, 77, 79, 81, 83, 84, 88, 92], "161148": [76, 77], "859087e": [76, 77], "30": [76, 77, 81, 82, 83, 87, 92, 95], "3453": 76, "029542": 76, "031182": 76, "057961": 76, "058244": 76, "home": [76, 77, 80, 81, 94], "runner": [76, 77, 80, 94], "329": [76, 83, 88], "359": 76, "338": 76, "34": [76, 81, 84, 86, 88, 92, 95], "54": [76, 81, 83, 84, 88, 92, 95], "039122": 76, "53": [76, 77, 79, 81, 83, 87, 88, 92, 93], "044598": 76, "105": [76, 88], "105196": 76, "133654": 76, "43": [76, 81, 83, 84, 88, 92], "168033": 76, "125": 76, "101107": 76, "37": [76, 81, 83, 92], "183382": 76, "109": [76, 81, 88], "209259": 76, "211042": 76, "221316": 76, "average_ood_scor": 76, "34530442089193386": 76, "52": [76, 81, 83, 88, 92, 95], "169820": 76, "087324e": 76, "89": [76, 79, 88, 91, 92, 94], "92": [76, 83, 84, 88, 92, 93], "259024": 76, "583757e": 76, "91": [76, 88, 92], "346458": 76, "341292e": 76, "specfi": 76, "new_lab": 76, "scoring_funct": 76, "div": 76, "rem": 76, "inv_scal": 76, "49": [76, 81, 84, 88, 89, 92], "superstitionissuemanag": 76, "unlucki": 76, "superstit": 76, "to_seri": 76, "issues_mask": 76, "summary_scor": 76, "9242": 76, "is_superstition_issu": 76, "superstition_scor": 76, "26": [76, 81, 83, 84, 86, 88, 92], "047581": 76, "090635": 76, "129591": 76, "65": [76, 88, 92, 93], "164840": 76, "demo": [77, 79, 87, 93], "lurk": [77, 83, 84], "_split": 77, "737": 77, "thoroughli": 77, "preprocess": [77, 79, 89, 91, 93, 94], "904": 77, "review": [77, 79, 80, 81, 82, 84, 88, 91, 92, 93, 94, 95], "8561": 77, "001908": 77, "58": [77, 79, 81, 83, 84, 88, 92, 93], "003564": 77, "007331": 77, "008963": 77, "009664": 77, "0227": 77, "is_class_imbalance_issu": 77, "022727": 77, "86": [77, 79, 83, 84, 88, 91, 92, 93], "87": [77, 83, 88, 91, 92, 94], "auto": [77, 81, 82, 91, 93, 94], "conceptu": 77, "856061": 77, "355772": 77, "616034": 77, "821750": 77, "betweeen": 77, "is_null_issu": 77, "is_non_iid_issu": [77, 79, 80, 84], "859131": 77, "417707": 77, "664083": 77, "970324": 77, "816953": 77, "375317": 77, "641516": 77, "890575": 77, "531021": 77, "460593": 77, "601188": 77, "826147": 77, "752808": 77, "321635": 77, "562539": 77, "948362": 77, "090243": 77, "472909": 77, "746763": 77, "878267": 77, "examples_w_issu": [77, 82], "013445": 77, "025184": 77, "026376": 77, "inde": [77, 80], "miscellan": [77, 95], "428571": 77, "111111": 77, "571429": 77, "407407": 77, "592593": 77, "337838": 77, "092593": 77, "662162": 77, "333333": [77, 81], "952381": 77, "666667": 77, "portion": 77, "huge": [77, 84], "worri": [77, 80], "critic": 77, "highli": [77, 83], "sql": [79, 93], "databas": [79, 93], "excel": [79, 93], "parquet": [79, 93], "student": [79, 91, 93, 95], "grade": [79, 91, 93], "900": [79, 91, 93], "exam": [79, 91, 93], "letter": [79, 93, 95], "hundr": [79, 93], "histgradientboostingclassifi": 79, "standardscal": [79, 89, 93], "grades_data": [79, 93], "read_csv": [79, 80, 91, 93, 94], "stud_id": [79, 93], "exam_1": [79, 91, 93], "exam_2": [79, 91, 93], "exam_3": [79, 91, 93], "letter_grad": [79, 93], "f48f73": [79, 93], "0bd4e7": [79, 93], "81": [79, 80, 88, 91, 92, 93, 95], "great": [79, 81, 93], "particip": [79, 93], "cb9d7a": [79, 93], "61": [79, 83, 84, 88, 91, 92, 93], "94": [79, 81, 84, 88, 91, 92, 93], "78": [79, 81, 83, 84, 88, 91, 92, 93], "9acca4": [79, 93], "48": [79, 81, 83, 84, 88, 92, 93, 95], "x_raw": [79, 93], "cat_featur": 79, "x_encod": [79, 93], "get_dummi": [79, 91, 93], "drop_first": [79, 93], "numeric_featur": [79, 93], "scaler": [79, 89, 93], "x_process": [79, 93], "fit_transform": [79, 93], "bring": [79, 80, 83, 86, 91, 93, 94], "byod": [79, 80, 83, 86, 91, 93, 94], "boost": [79, 82, 86, 91], "xgboost": [79, 82, 91], "think": [79, 80, 82, 87, 92, 95], "carefulli": [79, 80, 83, 93], "nonzero": 79, "suspici": [79, 93], "tabl": [79, 81, 86, 93], "358": 79, "294": [79, 88], "46": [79, 81, 84, 88, 92], "941": 79, "7109": 79, "000005": [79, 80], "886": 79, "000059": 79, "709": 79, "000104": 79, "723": 79, "000169": 79, "689": 79, "000181": 79, "3590": 79, "051882e": 79, "683133e": 79, "536582e": 79, "406589e": 79, "324246e": 79, "6165": 79, "582": 79, "185": [79, 81, 88], "187": [79, 81], "27": [79, 81, 84, 88, 92, 95], "898": 79, "637": [79, 93], "0014": [79, 81], "595": 79, "702427": 79, "147": [79, 84, 88], "711186": 79, "157": [79, 84], "721394": 79, "771": 79, "731979": 79, "740335": 79, "0014153602099278074": 79, "issue_result": 79, "000842": 79, "555944": 79, "004374": 79, "sorted_issu": 79, "73": [79, 81, 87, 88, 91, 92], "deserv": 79, "outlier_result": 79, "sorted_outli": 79, "56": [79, 81, 83, 89, 91, 92, 95], "96": [79, 81, 84, 87, 88, 91, 92], "lt": [79, 80, 81, 83, 86, 89, 92], "style": [79, 92], "font": 79, "18px": 79, "ff00ff": 79, "bac": 79, "unintend": [79, 80], "mistak": [79, 80, 83, 93, 94], "duplicate_result": 79, "690": 79, "246": [79, 88], "perhap": [79, 84, 86], "twice": 79, "67": [79, 81, 88, 91, 92], "wari": [79, 80, 82], "super": [79, 80, 83], "intent": [80, 94], "servic": [80, 82, 94], "onlin": [80, 94], "bank": [80, 81, 94], "banking77": [80, 94], "oo": [80, 94], "000": [80, 81, 83, 94, 95], "categori": [80, 83, 94], "scope": [80, 94], "dive": 80, "your_featur": 80, "sentence_transform": [80, 94], "sentencetransform": [80, 94], "payment": [80, 94], "cancel_transf": [80, 94], "transfer": [80, 94], "fund": [80, 94], "cancel": [80, 94], "transact": [80, 94], "my": [80, 94], "revert": [80, 94], "morn": [80, 94], "realis": [80, 94], "yesterdai": [80, 94], "rent": [80, 94], "realli": [80, 86, 92, 94], "tomorrow": [80, 94], "raw_text": [80, 94], "change_pin": [80, 94], "lost_or_stolen_phon": [80, 94], "getting_spare_card": [80, 94], "card_about_to_expir": [80, 94], "card_payment_fee_charg": [80, 94], "apple_pay_or_google_pai": [80, 94], "supported_cards_and_curr": [80, 94], "beneficiary_not_allow": [80, 94], "visa_or_mastercard": [80, 94], "utter": [80, 94], "suit": [80, 81, 82, 94], "electra": [80, 94], "discrimin": [80, 94], "googl": [80, 94], "text_embed": 80, "No": [80, 82, 94], "google_electra": [80, 94], "pool": [80, 82, 89, 94], "_util": [80, 94], "831": [80, 94], "typedstorag": [80, 94], "untypedstorag": [80, 94], "untyped_storag": [80, 94], "fget": [80, 94], "__get__": [80, 94], "owner": [80, 94], "400": [80, 94], "data_dict": [80, 84, 86], "85": [80, 88, 92], "38": [80, 81, 83, 88, 92], "9710": 80, "981": 80, "974": 80, "000146": 80, "982": [80, 81], "000224": 80, "971": 80, "000507": 80, "980": [80, 81], "000960": 80, "3584": 80, "994": 80, "009642": 80, "999": 80, "013067": 80, "013841": 80, "433": 80, "014722": 80, "989": 80, "018224": 80, "6070": 80, "160": [80, 91], "095724": 80, "148": 80, "006237": 80, "546": 80, "099341": 80, "514": 80, "006485": 80, "481": 80, "123418": 80, "008165": 80, "0000": [80, 81, 84], "313": [80, 88], "564102": 80, "572258": 80, "28": [80, 81, 83, 84, 86, 92, 95], "574915": 80, "31": [80, 81, 83, 84, 86, 88, 92], "575507": 80, "575874": 80, "792090": 80, "257611": 80, "698710": 80, "182121": 80, "771619": 80, "to_numpi": [80, 82, 91, 94], "data_with_suggested_label": 80, "suggested_label": 80, "charg": [80, 94], "cash": [80, 94], "holidai": [80, 94], "sent": [80, 94, 95], "card": [80, 81, 94], "mine": [80, 94], "expir": [80, 94], "me": [80, 94], "withdraw": 80, "monei": 80, "whoever": [80, 94], "outlier_issu": [80, 83], "lowest_quality_outli": 80, "OR": 80, "636c65616e6c616220697320617765736f6d6521": 80, "phone": [80, 81], "gone": 80, "gt": [80, 86, 95], "samp": 80, "br": 80, "press": [80, 95], "nonsens": 80, "sens": 80, "detriment": 80, "duplicate_issu": 80, "fee": 80, "pai": 80, "go": [80, 81, 84], "strongli": 80, "p_valu": 80, "benign": 80, "shortlist": [80, 91, 94], "curat": [80, 85], "mnist_test_set": 81, "imagenet_val_set": 81, "tench": 81, "goldfish": 81, "white": [81, 95], "shark": 81, "tiger": 81, "hammerhead": 81, "electr": 81, "rai": 81, "stingrai": 81, "cock": 81, "hen": 81, "ostrich": 81, "brambl": 81, "goldfinch": 81, "hous": 81, "finch": 81, "junco": 81, "indigo": 81, "bunt": 81, "american": [81, 95], "robin": 81, "bulbul": 81, "jai": 81, "magpi": 81, "chickade": 81, "dipper": 81, "kite": 81, "bald": 81, "eagl": 81, "vultur": 81, "grei": 81, "owl": 81, "salamand": 81, "smooth": 81, "newt": 81, "spot": [81, 88], "axolotl": 81, "bullfrog": 81, "tree": 81, "frog": [81, 89], "tail": 81, "loggerhead": 81, "sea": 81, "turtl": 81, "leatherback": 81, "mud": 81, "terrapin": 81, "band": 81, "gecko": 81, "green": [81, 95], "iguana": 81, "carolina": 81, "anol": 81, "desert": 81, "grassland": 81, "whiptail": 81, "lizard": 81, "agama": 81, "frill": 81, "neck": 81, "allig": 81, "gila": 81, "monster": 81, "european": 81, "chameleon": 81, "komodo": 81, "dragon": 81, "nile": 81, "crocodil": 81, "triceratop": 81, "worm": 81, "snake": 81, "ring": 81, "eastern": 81, "hog": 81, "nose": 81, "kingsnak": 81, "garter": 81, "water": 81, "vine": 81, "night": 81, "boa": 81, "constrictor": 81, "african": 81, "rock": 81, "indian": 81, "cobra": 81, "mamba": 81, "saharan": 81, "horn": 81, "viper": 81, "diamondback": 81, "rattlesnak": 81, "sidewind": 81, "trilobit": 81, "harvestman": 81, "scorpion": 81, "yellow": 81, "garden": 81, "spider": 81, "barn": 81, "southern": 81, "widow": 81, "tarantula": 81, "wolf": 81, "tick": 81, "centiped": 81, "grous": 81, "ptarmigan": 81, "ruf": 81, "prairi": 81, "peacock": 81, "quail": 81, "partridg": 81, "parrot": 81, "macaw": 81, "sulphur": 81, "crest": 81, "cockatoo": 81, "lorikeet": 81, "coucal": 81, "bee": 81, "eater": 81, "hornbil": 81, "hummingbird": 81, "jacamar": 81, "toucan": 81, "duck": [81, 94], "breast": 81, "mergans": 81, "goos": 81, "swan": 81, "tusker": 81, "echidna": 81, "platypu": 81, "wallabi": 81, "koala": 81, "wombat": 81, "jellyfish": 81, "anemon": 81, "brain": 81, "coral": 81, "flatworm": 81, "nematod": 81, "conch": 81, "snail": 81, "slug": 81, "chiton": 81, "chamber": 81, "nautilu": 81, "dung": 81, "crab": 81, "fiddler": 81, "king": 81, "lobster": 81, "spini": 81, "crayfish": 81, "hermit": 81, "isopod": 81, "stork": 81, "spoonbil": 81, "flamingo": 81, "heron": 81, "egret": 81, "bittern": 81, "crane": 81, "bird": [81, 89], "limpkin": 81, "gallinul": 81, "coot": 81, "bustard": 81, "ruddi": 81, "turnston": 81, "dunlin": 81, "redshank": 81, "dowitch": 81, "oystercatch": 81, "pelican": 81, "penguin": 81, "albatross": 81, "whale": 81, "killer": 81, "dugong": 81, "lion": 81, "chihuahua": 81, "japanes": 81, "chin": 81, "maltes": 81, "pekinges": 81, "shih": 81, "tzu": 81, "charl": 81, "spaniel": 81, "papillon": 81, "terrier": 81, "rhodesian": 81, "ridgeback": 81, "afghan": [81, 95], "hound": 81, "basset": 81, "beagl": 81, "bloodhound": 81, "bluetick": 81, "coonhound": 81, "tan": 81, "walker": 81, "foxhound": 81, "redbon": 81, "borzoi": 81, "irish": 81, "wolfhound": 81, "italian": 81, "greyhound": 81, "whippet": 81, "ibizan": 81, "norwegian": 81, "elkhound": 81, "otterhound": 81, "saluki": 81, "scottish": 81, "deerhound": 81, "weimaran": 81, "staffordshir": 81, "bull": 81, "bedlington": 81, "border": 81, "kerri": 81, "norfolk": 81, "norwich": 81, "yorkshir": 81, "wire": 81, "fox": 81, "lakeland": 81, "sealyham": 81, "airedal": 81, "cairn": 81, "australian": 81, "dandi": 81, "dinmont": 81, "boston": 81, "miniatur": 81, "schnauzer": 81, "giant": 81, "tibetan": 81, "silki": 81, "coat": [81, 83], "wheaten": 81, "west": 81, "highland": 81, "lhasa": 81, "apso": 81, "flat": 81, "retriev": 81, "curli": 81, "golden": 81, "labrador": 81, "chesapeak": 81, "bai": 81, "german": [81, 95], "shorthair": 81, "pointer": 81, "vizsla": 81, "setter": 81, "gordon": 81, "brittani": 81, "clumber": 81, "springer": 81, "welsh": 81, "cocker": 81, "sussex": 81, "kuvasz": 81, "schipperk": 81, "groenendael": 81, "malinoi": 81, "briard": 81, "kelpi": 81, "komondor": 81, "sheepdog": 81, "shetland": 81, "colli": 81, "bouvier": 81, "de": 81, "flandr": 81, "rottweil": 81, "shepherd": 81, "dobermann": 81, "pinscher": 81, "swiss": [81, 95], "mountain": 81, "bernes": 81, "appenzel": 81, "sennenhund": 81, "entlebuch": 81, "boxer": 81, "bullmastiff": 81, "mastiff": 81, "french": 81, "bulldog": 81, "dane": 81, "st": 81, "bernard": 81, "huski": 81, "alaskan": 81, "malamut": 81, "siberian": 81, "dalmatian": 81, "affenpinsch": 81, "basenji": 81, "pug": 81, "leonberg": 81, "newfoundland": 81, "pyrenean": 81, "samoi": 81, "pomeranian": 81, "chow": 81, "keeshond": 81, "griffon": 81, "bruxelloi": 81, "pembrok": 81, "corgi": 81, "cardigan": 81, "poodl": 81, "mexican": 81, "hairless": 81, "tundra": 81, "coyot": 81, "dingo": 81, "dhole": 81, "wild": 81, "hyena": 81, "kit": 81, "arctic": 81, "tabbi": 81, "persian": 81, "siames": 81, "egyptian": 81, "mau": 81, "cougar": 81, "lynx": 81, "leopard": 81, "snow": 81, "jaguar": 81, "cheetah": 81, "brown": [81, 92], "bear": 81, "polar": 81, "sloth": 81, "mongoos": 81, "meerkat": 81, "beetl": 81, "ladybug": 81, "longhorn": 81, "leaf": 81, "rhinocero": 81, "weevil": 81, "fly": 81, "ant": 81, "grasshopp": 81, "cricket": 81, "stick": 81, "insect": 81, "cockroach": 81, "manti": 81, "cicada": 81, "leafhopp": 81, "lacew": 81, "dragonfli": 81, "damselfli": 81, "admir": 81, "ringlet": 81, "monarch": 81, "butterfli": 81, "gossam": 81, "wing": 81, "starfish": 81, "urchin": 81, "cucumb": 81, "cottontail": 81, "rabbit": 81, "hare": 81, "angora": 81, "hamster": 81, "porcupin": 81, "squirrel": 81, "marmot": 81, "beaver": 81, "guinea": 81, "pig": 81, "sorrel": 81, "zebra": 81, "boar": 81, "warthog": 81, "hippopotamu": 81, "ox": 81, "buffalo": 81, "bison": 81, "bighorn": 81, "sheep": 81, "alpin": 81, "ibex": 81, "hartebeest": 81, "impala": 81, "gazel": 81, "dromedari": 81, "llama": 81, "weasel": 81, "mink": 81, "polecat": 81, "foot": 81, "ferret": 81, "otter": 81, "skunk": 81, "badger": 81, "armadillo": 81, "toed": 81, "orangutan": 81, "gorilla": 81, "chimpanze": 81, "gibbon": 81, "siamang": 81, "guenon": 81, "pata": 81, "monkei": 81, "baboon": 81, "macaqu": 81, "langur": 81, "colobu": 81, "probosci": 81, "marmoset": 81, "capuchin": 81, "howler": 81, "titi": 81, "geoffroi": 81, "lemur": 81, "indri": 81, "asian": 81, "eleph": 81, "bush": 81, "snoek": 81, "eel": 81, "coho": 81, "salmon": 81, "beauti": 81, "clownfish": 81, "sturgeon": 81, "garfish": 81, "lionfish": 81, "pufferfish": 81, "abacu": 81, "abaya": 81, "academ": 81, "gown": 81, "accordion": 81, "acoust": 81, "guitar": 81, "aircraft": 81, "carrier": 81, "airlin": 81, "airship": 81, "altar": 81, "ambul": 81, "amphibi": 81, "clock": [81, 95], "apiari": 81, "apron": 81, "wast": 81, "assault": 81, "rifl": 81, "backpack": 81, "bakeri": 81, "balanc": 81, "beam": 81, "balloon": 81, "ballpoint": 81, "pen": 81, "aid": 81, "banjo": 81, "balust": 81, "barbel": 81, "barber": 81, "chair": [81, 88], "barbershop": 81, "baromet": 81, "barrel": 81, "wheelbarrow": 81, "basebal": 81, "basketbal": 81, "bassinet": 81, "bassoon": 81, "swim": 81, "cap": 81, "bath": 81, "towel": 81, "bathtub": 81, "station": 81, "wagon": 81, "lighthous": 81, "beaker": 81, "militari": 81, "beer": 81, "bottl": 81, "glass": 81, "bell": 81, "cot": 81, "bib": 81, "bicycl": [81, 92], "bikini": 81, "binder": 81, "binocular": 81, "birdhous": 81, "boathous": 81, "bobsleigh": 81, "bolo": 81, "tie": 81, "poke": 81, "bonnet": 81, "bookcas": 81, "bookstor": 81, "bow": 81, "brass": 81, "bra": 81, "breakwat": 81, "breastplat": 81, "broom": 81, "bucket": 81, "buckl": 81, "bulletproof": 81, "vest": 81, "butcher": 81, "shop": 81, "taxicab": 81, "cauldron": 81, "candl": 81, "cannon": 81, "cano": 81, "mirror": [81, 88], "carousel": 81, "tool": [81, 84, 86], "carton": 81, "wheel": 81, "teller": 81, "cassett": 81, "player": 81, "castl": 81, "catamaran": 81, "cd": 81, "cello": 81, "mobil": [81, 95], "chain": 81, "fenc": [81, 92], "mail": 81, "chainsaw": 81, "chest": 81, "chiffoni": 81, "chime": 81, "china": 81, "cabinet": 81, "christma": 81, "stock": 81, "church": 81, "movi": 81, "theater": 81, "cleaver": 81, "cliff": 81, "dwell": 81, "cloak": 81, "clog": 81, "cocktail": 81, "shaker": 81, "coffe": 81, "mug": 81, "coffeemak": 81, "coil": 81, "lock": 81, "keyboard": 81, "confectioneri": 81, "ship": [81, 89], "corkscrew": 81, "cornet": 81, "cowboi": 81, "boot": 81, "hat": 81, "cradl": 81, "crash": 81, "helmet": 81, "crate": 81, "infant": 81, "bed": 81, "crock": 81, "pot": 81, "croquet": 81, "crutch": 81, "cuirass": 81, "dam": 81, "desk": 81, "desktop": 81, "rotari": 81, "dial": 81, "telephon": 81, "diaper": 81, "watch": 81, "dine": 81, "dishcloth": 81, "dishwash": 81, "disc": 81, "brake": 81, "dock": 81, "sled": 81, "dome": 81, "doormat": 81, "drill": 81, "rig": 81, "drum": 81, "drumstick": 81, "dumbbel": 81, "dutch": 81, "oven": 81, "fan": 81, "locomot": 81, "entertain": 81, "center": 81, "envelop": 81, "espresso": 81, "powder": 81, "feather": 81, "fireboat": 81, "engin": [81, 92], "screen": 81, "sheet": 81, "flagpol": 81, "flute": 81, "footbal": 81, "forklift": 81, "fountain": 81, "poster": 81, "freight": 81, "fry": 81, "pan": 81, "fur": 81, "garbag": 81, "ga": 81, "pump": 81, "goblet": 81, "kart": 81, "golf": 81, "cart": 81, "gondola": 81, "gong": 81, "grand": 81, "piano": 81, "greenhous": 81, "grill": 81, "groceri": 81, "guillotin": 81, "barrett": 81, "hair": 81, "sprai": 81, "hammer": 81, "dryer": 81, "hand": [81, 84], "handkerchief": 81, "drive": 81, "harmonica": 81, "harp": 81, "harvest": 81, "hatchet": 81, "holster": 81, "honeycomb": 81, "hoop": 81, "skirt": 81, "horizont": 81, "bar": 81, "hors": [81, 89, 94], "drawn": 81, "hourglass": 81, "ipod": 81, "cloth": 81, "iron": 81, "jack": 81, "lantern": 81, "jean": 81, "jeep": 81, "shirt": [81, 83], "jigsaw": 81, "puzzl": 81, "pull": 81, "rickshaw": 81, "joystick": 81, "kimono": 81, "knee": 81, "pad": 81, "knot": 81, "ladl": 81, "lampshad": 81, "laptop": 81, "lawn": 81, "mower": 81, "knife": 81, "lifeboat": 81, "lighter": 81, "limousin": 81, "ocean": 81, "liner": 81, "lipstick": 81, "slip": 81, "shoe": 81, "lotion": 81, "speaker": 81, "loup": 81, "sawmil": 81, "magnet": 81, "compass": 81, "bag": [81, 83, 89, 90], "mailbox": 81, "tight": 81, "tank": 81, "manhol": 81, "maraca": 81, "marimba": 81, "maypol": 81, "maze": 81, "cup": [81, 88], "medicin": 81, "megalith": 81, "microphon": 81, "microwav": 81, "milk": 81, "minibu": 81, "miniskirt": 81, "minivan": 81, "missil": 81, "mitten": 81, "mix": 81, "bowl": 81, "modem": 81, "monasteri": 81, "monitor": 81, "mope": 81, "mortar": 81, "mosqu": 81, "mosquito": 81, "scooter": 81, "bike": 81, "tent": 81, "mous": [81, 82], "mousetrap": 81, "van": 81, "muzzl": 81, "nail": 81, "brace": 81, "necklac": 81, "nippl": 81, "obelisk": 81, "obo": 81, "ocarina": 81, "odomet": 81, "oil": 81, "oscilloscop": 81, "overskirt": 81, "bullock": 81, "oxygen": 81, "packet": 81, "paddl": 81, "padlock": 81, "paintbrush": 81, "pajama": 81, "palac": [81, 95], "parachut": 81, "park": 81, "bench": 81, "meter": 81, "passeng": 81, "patio": 81, "payphon": 81, "pedest": 81, "pencil": 81, "perfum": 81, "petri": 81, "dish": 81, "photocopi": 81, "plectrum": 81, "pickelhaub": 81, "picket": 81, "pickup": 81, "pier": 81, "piggi": 81, "pill": 81, "pillow": 81, "ping": 81, "pong": 81, "pinwheel": 81, "pirat": 81, "pitcher": 81, "plane": 81, "planetarium": 81, "plastic": 81, "plate": 81, "rack": 81, "plow": 81, "plunger": 81, "polaroid": 81, "camera": 81, "pole": [81, 92], "polic": 81, "poncho": 81, "billiard": 81, "soda": 81, "potter": 81, "prayer": 81, "rug": 81, "printer": 81, "prison": 81, "projectil": 81, "projector": 81, "hockei": 81, "puck": 81, "punch": 81, "purs": 81, "quill": 81, "quilt": 81, "race": 81, "racket": 81, "radiat": 81, "radio": 81, "telescop": 81, "rain": 81, "recreat": 81, "reel": 81, "reflex": 81, "refriger": 81, "remot": 81, "restaur": 81, "revolv": 81, "rotisseri": 81, "eras": 81, "rugbi": 81, "ruler": 81, "safe": 81, "safeti": 81, "salt": 81, "sandal": [81, 83], "sarong": 81, "saxophon": 81, "scabbard": 81, "school": 81, "bu": [81, 92], "schooner": 81, "scoreboard": 81, "crt": 81, "screw": 81, "screwdriv": 81, "seat": 81, "belt": 81, "sew": 81, "shield": 81, "shoji": 81, "basket": 81, "shovel": 81, "shower": 81, "curtain": 81, "ski": 81, "sleep": 81, "door": 81, "slot": 81, "snorkel": 81, "snowmobil": 81, "snowplow": 81, "soap": 81, "dispens": 81, "soccer": [81, 95], "sock": 81, "solar": 81, "thermal": 81, "collector": 81, "sombrero": 81, "soup": 81, "heater": 81, "shuttl": 81, "spatula": 81, "motorboat": 81, "web": 81, "spindl": 81, "sport": [81, 95], "spotlight": 81, "stage": 81, "steam": 81, "arch": 81, "bridg": 81, "steel": 81, "stethoscop": 81, "scarf": 81, "stone": 81, "wall": [81, 92], "stopwatch": 81, "stove": 81, "strainer": 81, "tram": 81, "stretcher": 81, "couch": 81, "stupa": 81, "submarin": 81, "sundial": 81, "sunglass": 81, "sunscreen": 81, "suspens": 81, "mop": 81, "sweatshirt": 81, "swimsuit": 81, "swing": 81, "switch": 81, "syring": 81, "lamp": 81, "tape": 81, "teapot": 81, "teddi": 81, "televis": [81, 95], "tenni": 81, "thatch": 81, "roof": 81, "front": 81, "thimbl": 81, "thresh": 81, "throne": 81, "tile": 81, "toaster": 81, "tobacco": 81, "toilet": 81, "totem": 81, "tow": 81, "tractor": 81, "semi": 81, "trailer": 81, "trai": 81, "trench": 81, "tricycl": 81, "trimaran": 81, "tripod": 81, "triumphal": 81, "trolleybu": 81, "trombon": 81, "tub": 81, "turnstil": 81, "typewrit": 81, "umbrella": 81, "unicycl": 81, "upright": 81, "vacuum": 81, "cleaner": 81, "vase": 81, "vault": 81, "velvet": 81, "vend": 81, "vestment": 81, "viaduct": 81, "violin": 81, "volleybal": 81, "waffl": 81, "wallet": 81, "wardrob": 81, "sink": 81, "wash": 81, "jug": 81, "tower": 81, "whiskei": 81, "whistl": 81, "wig": 81, "shade": [81, 92], "windsor": 81, "wine": 81, "wok": 81, "wooden": 81, "spoon": 81, "wool": 81, "rail": 81, "shipwreck": 81, "yawl": 81, "yurt": 81, "websit": 81, "comic": 81, "book": 81, "crossword": 81, "traffic": [81, 88, 92], "sign": [81, 92, 95], "dust": 81, "jacket": [81, 88], "menu": 81, "guacamol": 81, "consomm": 81, "trifl": 81, "ic": 81, "cream": 81, "pop": 81, "baguett": 81, "bagel": 81, "pretzel": 81, "cheeseburg": 81, "mash": 81, "potato": 81, "cabbag": 81, "broccoli": 81, "cauliflow": 81, "zucchini": 81, "spaghetti": 81, "squash": 81, "acorn": 81, "butternut": 81, "artichok": 81, "pepper": 81, "cardoon": 81, "mushroom": 81, "granni": 81, "smith": 81, "strawberri": 81, "orang": 81, "lemon": 81, "pineappl": 81, "banana": 81, "jackfruit": 81, "custard": 81, "appl": 81, "pomegran": 81, "hai": 81, "carbonara": 81, "chocol": 81, "syrup": 81, "dough": 81, "meatloaf": 81, "pizza": 81, "pie": 81, "burrito": 81, "eggnog": 81, "alp": 81, "bubbl": 81, "reef": 81, "geyser": 81, "lakeshor": 81, "promontori": 81, "shoal": 81, "seashor": 81, "vallei": 81, "volcano": 81, "bridegroom": 81, "scuba": 81, "diver": 81, "rapese": 81, "daisi": 81, "ladi": 81, "slipper": 81, "corn": 81, "rose": 81, "hip": 81, "chestnut": 81, "fungu": 81, "agar": 81, "gyromitra": 81, "stinkhorn": 81, "earth": 81, "star": 81, "wood": 81, "bolet": 81, "ear": 81, "cifar10_test_set": 81, "airplan": [81, 89], "automobil": [81, 89], "deer": [81, 89], "cifar100_test_set": 81, "aquarium_fish": 81, "babi": 81, "boi": 81, "camel": 81, "caterpillar": 81, "cattl": [81, 95], "cloud": 81, "dinosaur": 81, "dolphin": 81, "flatfish": 81, "forest": 81, "girl": 81, "kangaroo": 81, "lawn_mow": 81, "man": 81, "maple_tre": 81, "motorcycl": [81, 92], "oak_tre": 81, "orchid": 81, "palm_tre": 81, "pear": 81, "pickup_truck": 81, "pine_tre": 81, "plain": 81, "poppi": 81, "possum": 81, "raccoon": 81, "road": [81, 92], "rocket": 81, "seal": 81, "shrew": 81, "skyscrap": 81, "streetcar": 81, "sunflow": 81, "sweet_pepp": 81, "trout": 81, "tulip": 81, "willow_tre": 81, "woman": [81, 88], "caltech256": 81, "ak47": 81, "bat": 81, "glove": 81, "birdbath": 81, "blimp": 81, "bonsai": 81, "boom": 81, "breadmak": 81, "buddha": 81, "bulldoz": 81, "cactu": 81, "cake": 81, "tire": 81, "cartman": 81, "cereal": 81, "chandeli": 81, "chess": 81, "board": 81, "chimp": 81, "chopstick": 81, "coffin": 81, "coin": 81, "comet": 81, "cormor": 81, "globe": 81, "diamond": 81, "dice": 81, "doorknob": 81, "drink": 81, "straw": 81, "dumb": 81, "eiffel": 81, "elk": 81, "ewer": 81, "eyeglass": 81, "fern": 81, "fighter": 81, "jet": [81, 91], "extinguish": 81, "hydrant": 81, "firework": 81, "flashlight": 81, "floppi": 81, "fri": 81, "frisbe": 81, "galaxi": 81, "giraff": 81, "goat": 81, "gate": 81, "grape": 81, "pick": [81, 82], "hamburg": 81, "hammock": 81, "harpsichord": 81, "hawksbil": 81, "helicopt": 81, "hibiscu": 81, "homer": 81, "simpson": 81, "horsesho": 81, "air": 81, "skeleton": 81, "ibi": 81, "cone": 81, "iri": 81, "jesu": 81, "christ": 81, "joi": 81, "kayak": 81, "ketch": 81, "ladder": 81, "lath": 81, "licens": 81, "lightbulb": 81, "lightn": 81, "mandolin": 81, "mar": 81, "mattress": 81, "megaphon": 81, "menorah": 81, "microscop": 81, "minaret": 81, "minotaur": 81, "motorbik": 81, "mussel": 81, "neckti": 81, "octopu": 81, "palm": 81, "pilot": 81, "paperclip": 81, "shredder": 81, "pci": 81, "peopl": [81, 88], "pez": 81, "picnic": 81, "pram": 81, "prai": 81, "pyramid": 81, "rainbow": 81, "roulett": 81, "saddl": 81, "saturn": 81, "segwai": 81, "propel": 81, "sextant": 81, "music": 81, "skateboard": 81, "smokestack": 81, "sneaker": 81, "boat": 81, "stain": 81, "steer": 81, "stirrup": 81, "superman": 81, "sushi": 81, "armi": [81, 95], "sword": 81, "tambourin": 81, "teepe": 81, "court": 81, "theodolit": 81, "tomato": 81, "tombston": 81, "tour": 81, "pisa": 81, "treadmil": 81, "fork": 81, "tweezer": 81, "unicorn": 81, "vcr": 81, "waterfal": 81, "watermelon": 81, "weld": 81, "windmil": 81, "xylophon": 81, "yarmulk": 81, "yo": 81, "toad": 81, "twenty_news_test_set": 81, "alt": 81, "atheism": 81, "comp": 81, "graphic": [81, 92], "misc": [81, 95], "sy": 81, "ibm": 81, "pc": 81, "hardwar": 81, "mac": 81, "forsal": 81, "rec": 81, "sci": 81, "crypt": 81, "electron": 81, "med": 81, "soc": 81, "religion": 81, "christian": [81, 95], "talk": [81, 95], "polit": 81, "gun": 81, "mideast": 81, "amazon": 81, "neutral": 81, "imdb_test_set": 81, "all_class": 81, "20news_test_set": 81, "_load_classes_predprobs_label": 81, "dataset_nam": 81, "labelerror": 81, "url_bas": 81, "5392f6c71473055060be3044becdde1cbc18284d": 81, "url_label": 81, "original_test_label": 81, "_original_label": 81, "url_prob": 81, "cross_validated_predicted_prob": 81, "_pyx": 81, "num_part": 81, "datatset": 81, "bytesio": 81, "allow_pickl": 81, "pred_probs_part": 81, "url": 81, "_of_": 81, "nload": 81, "imdb": 81, "ve": [81, 82, 84, 86, 88], "interpret": [81, 82, 84, 87], "capit": 81, "29780": 81, "256": [81, 82, 88], "780": 81, "medic": [81, 95], "doctor": 81, "254": [81, 88], "359223": 81, "640777": 81, "184": [81, 84], "258427": 81, "341176": 81, "263158": 81, "658824": 81, "337349": 81, "246575": 81, "662651": 81, "248": 81, "330000": 81, "355769": 81, "670000": 81, "251": [81, 88], "167": [81, 84, 88], "252": 81, "112": 81, "253": [81, 88], "022989": 81, "255": [81, 83], "049505": 81, "190": [81, 84, 88], "66": [81, 83, 92], "002216": 81, "000974": 81, "59": [81, 83, 88, 92], "88": [81, 82, 83, 84, 87, 88, 91, 92], "000873": 81, "000739": 81, "79": [81, 88, 92, 93], "32635": 81, "32636": 81, "47": [81, 83, 88, 92], "32637": 81, "32638": 81, "32639": 81, "32640": 81, "051": 81, "93": [81, 88, 91, 92, 93], "002242": 81, "997758": 81, "002088": 81, "001045": 81, "997912": 81, "002053": 81, "997947": 81, "001980": 81, "000991": 81, "998020": 81, "001946": 81, "002915": 81, "998054": 81, "001938": 81, "002904": 81, "998062": 81, "001020": 81, "998980": 81, "001018": 81, "002035": 81, "998982": 81, "999009": 81, "0003": 81, "0002": 81, "36": [81, 83, 89, 92, 95], "41": [81, 88, 91, 92], "44": [81, 87, 88, 92, 94], "71": [81, 84, 88, 91, 92], "071": 81, "067269": 81, "929": 81, "046": 81, "058243": 81, "954": 81, "035": 81, "032096": 81, "965": 81, "031": 81, "012232": 81, "969": 81, "022": 81, "025896": 81, "978": 81, "020": [81, 84], "013092": 81, "018": 81, "013065": 81, "016": 81, "030542": 81, "984": 81, "013": 81, "020833": 81, "987": 81, "012": 81, "010020": 81, "988": 81, "0073": 81, "0020": 81, "0016": 81, "0015": 81, "0013": 81, "0012": 81, "0010": 81, "0008": 81, "0007": 81, "0006": 81, "0005": 81, "0004": 81, "244": [81, 88], "98": [81, 82, 91, 92, 95], "452381": 81, "459770": 81, "72": [81, 83, 84, 87, 91, 92], "523364": 81, "460784": 81, "446602": 81, "57": [81, 83, 84, 92], "68": [81, 84, 88, 92, 93], "103774": 81, "030612": 81, "97": [81, 82, 84, 88, 89, 91, 92, 93, 95], "110092": 81, "049020": 81, "99": [81, 84, 92, 93], "0034": 81, "0032": 81, "0026": 81, "0025": 81, "4945": 81, "4946": 81, "4947": 81, "4948": 81, "4949": 81, "4950": 81, "846": 81, "82": [81, 84, 88, 91, 92], "7532": 81, "532": 81, "034483": 81, "009646": 81, "965517": 81, "030457": 81, "020513": 81, "969543": 81, "028061": 81, "035443": 81, "971939": 81, "025316": 81, "005168": 81, "974684": 81, "049751": 81, "979487": 81, "019920": 81, "042802": 81, "980080": 81, "017677": 81, "005115": 81, "982323": 81, "012987": 81, "005236": 81, "987013": 81, "012723": 81, "025126": 81, "987277": 81, "010989": 81, "008264": 81, "989011": 81, "010283": 81, "027778": 81, "989717": 81, "009677": 81, "990323": 81, "007614": 81, "010127": 81, "992386": 81, "005051": 81, "994949": 81, "005025": 81, "994975": 81, "005013": 81, "994987": 81, "001859": 81, "001328": 81, "000929": 81, "000664": 81, "186": [81, 84], "188": [81, 84, 87], "189": [81, 84], "snippet": 82, "nlp": [82, 95], "mind": [82, 84], "number_of_class": 82, "total_number_of_data_point": 82, "drop": [82, 86, 91, 94], "feed": 82, "alphabet": 82, "labels_proper_format": 82, "your_classifi": 82, "issues_datafram": 82, "class_predicted_for_flagged_exampl": 82, "class_predicted_for_all_exampl": 82, "grant": 82, "datataset": 82, "fair": [82, 84], "game": 82, "speedup": [82, 89], "flexibl": 82, "tempfil": 82, "mkdtemp": 82, "sped": 82, "anywai": 82, "pred_probs_merg": 82, "merge_rare_class": 82, "count_threshold": 82, "class_mapping_orig2new": 82, "heath_summari": 82, "num_examples_per_class": 82, "rare_class": 82, "num_classes_merg": 82, "other_class": 82, "labels_merg": 82, "new_c": 82, "merged_prob": 82, "hstack": [82, 83, 84, 86], "new_class": 82, "original_class": 82, "num_check": 82, "ones_array_ref": 82, "isclos": 82, "though": [82, 84, 95], "successfulli": 82, "meaning": [82, 89], "virtuou": [82, 86], "cycl": [82, 86], "jointli": 82, "junk": 82, "clutter": 82, "unknown": 82, "caltech": 82, "combined_boolean_mask": 82, "mask1": 82, "mask2": 82, "gradientboostingclassifi": [82, 84], "true_error": [82, 84, 87], "101": [82, 88], "102": [82, 87, 88], "104": [82, 84, 88], "model_to_find_error": 82, "model_to_return": 82, "cl0": 82, "randomizedsearchcv": 82, "expens": 82, "param_distribut": 82, "learning_r": [82, 84], "max_depth": [82, 84], "magnitud": 82, "coeffici": [82, 91], "optin": 82, "environ": [82, 84], "rerun": [82, 84], "cell": [82, 84], "On": [82, 84, 88], "unabl": [82, 84], "render": [82, 84], "nbviewer": [82, 84], "nbsp": [82, 84], "cleanlearninginot": [82, 84], "fittedcleanlearn": [82, 84], "linearregressionlinearregress": 82, "n_init": 82, "fit_predict": 82, "continuous_column": 82, "categorical_column": 82, "data_df": 82, "feature_a": 82, "feature_b": 82, "unexpectedli": 82, "emphas": 82, "especi": [82, 83, 91, 93, 94], "crucial": 82, "merge_duplicate_set": 82, "merge_kei": 82, "construct_group_kei": 82, "merged_set": 82, "consolidate_set": 82, "tolist": [82, 87], "issubset": 82, "frozenset": 82, "sets_list": 82, "mutabl": 82, "new_set": 82, "current_set": 82, "intersecting_set": 82, "lowest_score_strategi": 82, "sub_df": 82, "idxmin": 82, "filter_near_dupl": 82, "strategy_fn": 82, "strategy_kwarg": 82, "duplicate_row": 82, "group_kei": 82, "to_keep_indic": 82, "groupbi": 82, "explod": 82, "to_remov": 82, "isin": [82, 89], "kept": 82, "near_duplicate_issu": [82, 83], "ids_to_remove_seri": 82, "tmp": 82, "ipykernel_5860": 82, "1995098996": 82, "deprecationwarn": 82, "dataframegroupbi": 82, "include_group": 82, "silenc": 82, "assist": 82, "streamlin": 82, "ux": 82, "agpl": 82, "compani": 82, "commerci": 82, "alter": 82, "email": 82, "discuss": 82, "anywher": 82, "profession": 82, "expert": 82, "60": [83, 84, 92], "excess": 83, "torchvis": [83, 89], "tensordataset": 83, "stratifiedkfold": [83, 87], "tqdm": 83, "fashion_mnist": 83, "num_row": 83, "60000": 83, "pil": 83, "transformed_dataset": 83, "with_format": 83, "unsqueez": 83, "cpu_count": 83, "torch_dataset": 83, "quick": [83, 87], "relu": 83, "batchnorm2d": 83, "maxpool2d": 83, "lazylinear": 83, "flatten": 83, "get_test_accuraci": 83, "testload": [83, 89], "energi": 83, "trainload": [83, 89], "n_epoch": 83, "patienc": 83, "criterion": 83, "crossentropyloss": 83, "adamw": 83, "best_test_accuraci": 83, "start_epoch": 83, "running_loss": 83, "best_epoch": 83, "end_epoch": 83, "3f": [83, 91], "acc": [83, 84], "time_taken": 83, "compute_embed": 83, "compute_pred_prob": 83, "train_batch_s": 83, "num_work": 83, "worker": [83, 95], "train_id_list": 83, "test_id_list": 83, "train_id": 83, "test_id": 83, "embeddings_model": 83, "ntrain": 83, "trainset": 83, "testset": 83, "pin_memori": 83, "fold_embed": 83, "fold_pred_prob": 83, "finish": 83, "482": 83, "720": 83, "658": 83, "195": 83, "460": 83, "stderr": [83, 89, 92], "sphinxverbatim": [83, 89, 92, 95], "53it": [83, 89, 92], "42it": [83, 92], "65it": [83, 92], "16it": [83, 92], "00it": [83, 92], "26it": [83, 92], "04it": [83, 92], "59it": [83, 92], "41it": [83, 92], "36it": [83, 92], "18it": [83, 92], "84it": [83, 92], "29it": [83, 92], "493": 83, "060": 83, "648": 83, "330": [83, 88], "505": 83, "411": 83, "87it": [83, 92], "70it": [83, 92], "01it": [83, 92], "25it": [83, 89, 92], "62": [83, 84, 88, 91, 92], "82it": [83, 92], "20it": [83, 92], "35it": [83, 92], "19it": [83, 89, 92], "63it": [83, 89, 92], "93it": [83, 89, 92], "32it": [83, 92], "476": 83, "340": 83, "797": 83, "328": [83, 88], "310": 83, "434": 83, "58it": [83, 92], "77it": [83, 89, 92], "30it": [83, 92], "63": [83, 84, 88, 89, 91, 92], "17it": [83, 92], "62it": [83, 92], "12it": [83, 89, 92], "48it": [83, 92], "99it": [83, 92], "reorder": 83, "vision": 83, "grayscal": 83, "exce": 83, "max_preval": 83, "7714": 83, "3772": 83, "3585": 83, "166": 83, "3651": 83, "27080": 83, "873833e": 83, "40378": 83, "915575e": 83, "25316": 83, "390277e": 83, "06": [83, 84, 88, 92, 95], "2090": 83, "751164e": 83, "14999": 83, "881301e": 83, "9569": 83, "11262": 83, "000003": 83, "19228": 83, "000010": 83, "dress": 83, "32657": 83, "000013": 83, "21282": 83, "000016": 83, "53564": 83, "000018": 83, "pullov": 83, "6321": 83, "30968": 83, "001267": 83, "30659": 83, "000022": [83, 95], "47824": 83, "001454": 83, "3370": 83, "000026": 83, "54565": 83, "001854": 83, "9762": 83, "258": 83, "47139": 83, "000033": 83, "166980": 83, "986195": 83, "997205": 83, "948781": 83, "999358": 83, "54078": 83, "17371": 83, "000025": 83, "plot_label_issue_exampl": 83, "ncol": [83, 89], "nrow": [83, 89], "ceil": 83, "axes_list": 83, "label_issue_indic": 83, "gl": 83, "sl": 83, "fontdict": 83, "imshow": [83, 89], "cmap": [83, 91], "grai": 83, "subplots_adjust": 83, "hspace": 83, "outsiz": 83, "outlier_issues_df": 83, "depict": [83, 87, 88, 89, 90, 92], "plot_outlier_issues_exampl": 83, "n_comparison_imag": 83, "sample_from_class": 83, "number_of_sampl": 83, "non_outlier_indic": 83, "isnul": 83, "non_outlier_indices_excluding_curr": 83, "sampled_indic": 83, "label_scores_of_sampl": 83, "top_score_indic": 83, "top_label_indic": 83, "sampled_imag": 83, "get_image_given_label_and_sampl": 83, "image_from_dataset": 83, "corresponding_label": 83, "comparison_imag": 83, "images_to_plot": 83, "idlist": 83, "iterrow": 83, "closest": 83, "counterpart": 83, "near_duplicate_issues_df": 83, "plot_near_duplicate_issue_exampl": 83, "seen_id_pair": 83, "get_image_and_given_label_and_predicted_label": 83, "duplicate_imag": 83, "nd_set": 83, "challeng": 83, "dark_issu": 83, "reveal": [83, 88, 92], "dark_scor": 83, "dark_issues_df": 83, "is_dark_issu": 83, "34848": 83, "203922": 83, "50270": 83, "204588": 83, "3936": 83, "213098": 83, "733": 83, "217686": 83, "8094": 83, "230118": 83, "plot_image_issue_exampl": 83, "difficult": 83, "disproportion": 83, "lowinfo_issu": 83, "low_information_scor": 83, "lowinfo_issues_df": 83, "is_low_information_issu": 83, "53050": 83, "067975": 83, "40875": 83, "089929": 83, "9594": 83, "092601": 83, "34825": 83, "107744": 83, "37530": 83, "108516": 83, "lot": 83, "depth": 84, "survei": [84, 95], "focus": [84, 86, 87], "scienc": 84, "multivariate_norm": [84, 86, 87], "make_data": [84, 86], "cov": [84, 86, 87], "avg_trac": [84, 87], "test_label": [84, 87, 89, 94], "py_tru": 84, "noise_matrix_tru": 84, "noise_marix": 84, "s_test": 84, "noisy_test_label": 84, "purpl": 84, "val": 84, "namespac": 84, "exec": 84, "markerfacecolor": [84, 87], "markeredgecolor": [84, 87, 91], "markers": [84, 87, 91], "markeredgewidth": [84, 87, 91], "realist": 84, "7560": 84, "637318e": 84, "896262e": 84, "548391e": 84, "923417e": 84, "375075e": 84, "3454": 84, "014051": 84, "020451": 84, "249": [84, 88], "042594": 84, "043859": 84, "045954": 84, "6120": 84, "023714": 84, "007136": 84, "119": [84, 88], "107266": 84, "103": [84, 88], "033738": 84, "238": [84, 88], "119505": 84, "236": [84, 88, 95], "037843": 84, "222": 84, "614915": 84, "122": [84, 88], "624422": 84, "625965": 84, "626079": 84, "118": 84, "627675": 84, "695223": 84, "323529": 84, "523015": 84, "013720": 84, "675727": 84, "646521": 84, "anyth": 84, "enhanc": [84, 86, 88], "magic": 84, "83": [84, 88, 91, 92, 93, 95], "liter": 84, "identif": 84, "x27": 84, "logisticregressionlogisticregress": 84, "ever": 84, "092": 84, "040": 84, "024": 84, "004": 84, "surpris": 84, "1705": 84, "01936": 84, "ton": 84, "yourfavoritemodel1": 84, "merged_label": 84, "merged_test_label": 84, "newli": [84, 86], "yourfavoritemodel2": 84, "yourfavoritemodel3": 84, "cl3": 84, "takeawai": 84, "That": [84, 87], "randomli": 84, "my_test_pred_prob": 84, "my_test_pr": 84, "issues_test": 84, "corrected_test_label": 84, "pretend": 84, "cl_test_pr": 84, "69": [84, 91, 92], "fairli": 84, "label_acc": 84, "percentag": 84, "offset": 84, "nquestion": 84, "overestim": 84, "answer": 84, "experienc": 84, "76": [84, 87, 88, 91, 92, 93], "knowledg": 84, "quantiti": [84, 91], "prioiri": 84, "known": 84, "versatil": 84, "label_issues_indic": 84, "213": [84, 88], "212": [84, 93], "218": [84, 88], "152": 84, "197": [84, 88], "196": [84, 88], "170": 84, "214": 84, "164": [84, 87], "198": [84, 88], "191": [84, 88], "121": [84, 94], "117": [84, 91], "206": [84, 88], "115": [84, 88], "193": 84, "194": 84, "201": [84, 88], "174": 84, "163": 84, "150": [84, 86, 88, 95], "169": [84, 95], "151": [84, 88], "168": 84, "precision_scor": 84, "recall_scor": 84, "f1_score": 84, "true_label_issu": 84, "filter_by_list": 84, "718750": [84, 86], "807018": 84, "912": 84, "733333": 84, "800000": 84, "721311": 84, "792793": 84, "908": 84, "676923": 84, "765217": 84, "892": 84, "567901": 84, "702290": 84, "844": 84, "gaug": 84, "label_issues_count": 84, "155": [84, 88], "156": 84, "172": [84, 87], "easiest": 84, "modular": 84, "penalti": 84, "l2": 84, "model3": 84, "n_estim": 84, "cv_pred_probs_1": 84, "cv_pred_probs_2": 84, "cv_pred_probs_3": 84, "label_quality_scores_best": 84, "cv_pred_probs_ensembl": 84, "label_quality_scores_bett": 84, "superior": [84, 90], "workflow": [85, 91], "speechbrain": 85, "timm": 85, "glad": 86, "multiannotator_label": 86, "300": [86, 95], "noisier": 86, "111": [86, 91], "local_data": [86, 87], "true_labels_train": [86, 87], "noise_matrix_bett": 86, "noise_matrix_wors": 86, "transpos": [86, 89], "dropna": 86, "zfill": 86, "row_na_check": 86, "notna": 86, "reset_index": 86, "a0001": 86, "a0002": 86, "a0003": 86, "a0004": 86, "a0005": 86, "a0006": 86, "a0007": 86, "a0008": 86, "a0009": 86, "a0010": 86, "a0041": 86, "a0042": 86, "a0043": 86, "a0044": 86, "a0045": 86, "a0046": 86, "a0047": 86, "a0048": 86, "a0049": 86, "a0050": 86, "na": 86, "60856743": 86, "41693214": 86, "40908785": 86, "87147629": 86, "64941785": 86, "10774851": 86, "0524466": 86, "71853246": 86, "37169848": 86, "66031048": 86, "multiannotator_util": 86, "crude": 86, "straight": 86, "majority_vote_label": 86, "736118": 86, "757751": 86, "782232": 86, "715565": 86, "824256": 86, "quality_annotator_a0001": 86, "quality_annotator_a0002": 86, "quality_annotator_a0003": 86, "quality_annotator_a0004": 86, "quality_annotator_a0005": 86, "quality_annotator_a0006": 86, "quality_annotator_a0007": 86, "quality_annotator_a0008": 86, "quality_annotator_a0009": 86, "quality_annotator_a0010": 86, "quality_annotator_a0041": 86, "quality_annotator_a0042": 86, "quality_annotator_a0043": 86, "quality_annotator_a0044": 86, "quality_annotator_a0045": 86, "quality_annotator_a0046": 86, "quality_annotator_a0047": 86, "quality_annotator_a0048": 86, "quality_annotator_a0049": 86, "quality_annotator_a0050": 86, "070564": 86, "216078": 86, "119188": 86, "alongisd": 86, "244981": 86, "208333": 86, "295979": 86, "294118": 86, "324197": 86, "310345": 86, "355316": 86, "346154": 86, "439732": 86, "480000": 86, "a0031": 86, "523205": 86, "580645": 86, "a0034": 86, "535313": 86, "607143": 86, "a0021": 86, "606999": 86, "a0015": 86, "609526": 86, "678571": 86, "a0011": 86, "621103": 86, "692308": 86, "wors": 86, "improved_consensus_label": 86, "majority_vote_accuraci": 86, "cleanlab_label_accuraci": 86, "8581081081081081": 86, "9797297297297297": 86, "besid": 86, "sorted_consensus_quality_scor": 86, "worst_qual": 86, "better_qu": 86, "worst_quality_accuraci": 86, "better_quality_accuraci": 86, "9893238434163701": 86, "improved_pred_prob": 86, "treat": [86, 87, 91, 95], "analzi": 86, "copyright": 87, "advertis": 87, "violenc": 87, "nsfw": 87, "suppli": [87, 88], "celeba": 87, "make_multilabel_data": 87, "boxes_coordin": 87, "box_multilabel": 87, "make_multi": 87, "bx1": 87, "by1": 87, "bx2": 87, "by2": 87, "label_list": 87, "ur": 87, "upper": 87, "inidx": 87, "logical_and": 87, "inv_d": 87, "labels_idx": 87, "true_labels_test": 87, "dict_unique_label": 87, "get_color_arrai": 87, "dcolor": 87, "aa4400": 87, "55227f": 87, "55a100": 87, "00ff00": 87, "007f7f": 87, "386b55": 87, "0000ff": 87, "simplic": 87, "advis": 87, "y_onehot": 87, "single_class_label": 87, "stratifi": [87, 90], "kf": 87, "train_index": 87, "test_index": 87, "clf_cv": 87, "x_train_cv": 87, "x_test_cv": 87, "y_train_cv": 87, "y_test_cv": 87, "y_pred_cv": 87, "saw": 87, "num_to_displai": 87, "09": [87, 88, 92], "275": 87, "267": 87, "225": 87, "171": 87, "234": 87, "165": 87, "227": [87, 88], "262": [87, 88], "263": [87, 88], "266": [87, 88], "139": 87, "143": [87, 88], "216": [87, 88], "265": 87, "159": [87, 88], "despit": [87, 95], "suspect": 87, "888": 87, "8224": 87, "9632": 87, "968": 87, "6512": 87, "0444": 87, "774": 87, "labels_binary_format": 87, "labels_list_format": 87, "surround": 88, "scene": 88, "coco": 88, "everydai": 88, "has_label_issu": 88, "insal": 88, "nc": [88, 92, 95], "s3": [88, 92, 95], "amazonaw": [88, 92, 95], "objectdetectionbenchmark": 88, "tutorial_obj": 88, "pkl": 88, "example_imag": 88, "unzip": [88, 95], "_separate_label": 88, "_separate_predict": 88, "begin": 88, "image_path": 88, "rb": 88, "image_to_visu": 88, "seg_map": 88, "334": 88, "float32": 88, "bboxes_ignor": 88, "290": 88, "286": 88, "285": 88, "224": 88, "231": [88, 95], "293": 88, "235": 88, "289": 88, "282": 88, "74": [88, 91, 92, 93], "281": 88, "271": 88, "280": 88, "277": 88, "279": 88, "287": 88, "299": 88, "276": 88, "307": 88, "321": 88, "326": 88, "333": 88, "261": 88, "319": 88, "257": 88, "295": 88, "283": 88, "243": 88, "303": 88, "316": 88, "247": 88, "323": 88, "327": 88, "226": 88, "228": 88, "232": 88, "219": 88, "239": 88, "240": 88, "209": 88, "242": 88, "202": 88, "230": 88, "215": 88, "220": 88, "229": 88, "217": [88, 95], "237": 88, "207": 88, "204": 88, "84": [88, 89, 91, 92, 95], "205": 88, "223": 88, "153": 88, "149": 88, "140": 88, "124": 88, "268": 88, "273": 88, "108": 88, "284": 88, "110": 88, "136": 88, "145": 88, "173": 88, "297": 88, "317": 88, "192": 88, "332": 88, "324": 88, "203": 88, "320": 88, "314": 88, "199": 88, "291": 88, "000000481413": 88, "jpg": 88, "42398": 88, "44503": 88, "337": [88, 94], "29968": 88, "336": 88, "21005": 88, "9978472": 88, "forgot": 88, "drew": 88, "label_issue_idx": 88, "num_examples_to_show": 88, "138": 88, "candid": 88, "97489622": 88, "70610878": 88, "98764951": 88, "88899237": 88, "99085805": 88, "issue_idx": 88, "95569726e": 88, "03354841e": 88, "57510169e": 88, "58447666e": 88, "39755858e": 88, "issue_to_visu": 88, "000000009483": 88, "95569726168054e": 88, "addition": [88, 92], "visibl": 88, "missmatch": 88, "likelei": 88, "agnost": 88, "vaidat": 88, "inconsist": 88, "000000395701": 88, "033548411774308e": 88, "armchair": 88, "tv": 88, "000000154004": 88, "38300759625496356": 88, "foreground": 88, "000000448410": 88, "0008575101690203273": 88, "crowd": 88, "alon": 88, "explor": [88, 89], "resembl": [88, 89], "000000499768": 88, "9748962231208227": 88, "000000521141": 88, "8889923658893665": 88, "000000143931": 88, "9876495074395956": 88, "bonu": 88, "uncov": 88, "irregular": 88, "anomali": 88, "unusu": [88, 89], "object_detection_util": 88, "calculate_bounding_box_area": 88, "num_imgs_to_show": 88, "lab_object_count": 88, "pred_object_count": 88, "000000430073": 88, "000000183709": 88, "000000189475": 88, "studi": 88, "label_norm": 88, "pred_norm": 88, "area": [88, 92], "assess": 88, "lab_area": 88, "pred_area": 88, "lab_area_mean": 88, "lab_area_std": 88, "max_deviation_valu": 88, "max_deviation_class": 88, "deviation_valu": 88, "deviation_class": 88, "mean_area": 88, "std_area": 88, "class_area": 88, "deviations_awai": 88, "max_deviation_index": 88, "num_imgs_to_show_per_class": 88, "class_num": 88, "sorted_indic": 88, "000000422886": 88, "000000341828": 88, "000000461009": 88, "train_feature_embed": 89, "ood_train_feature_scor": 89, "test_feature_embed": 89, "ood_test_feature_scor": 89, "ood_train_predictions_scor": 89, "train_pred_prob": 89, "ood_test_predictions_scor": 89, "test_pred_prob": 89, "pylab": 89, "rcparam": 89, "baggingclassifi": 89, "therebi": 89, "rescal": 89, "transform_norm": 89, "totensor": 89, "root": 89, "animal_class": 89, "non_animal_class": 89, "animal_idx": 89, "test_idx": 89, "toronto": 89, "edu": 89, "kriz": 89, "170498071": 89, "2129920": 89, "21250429": 89, "90it": [89, 92], "13795328": 89, "77250933": 89, "25526272": 89, "95484114": 89, "36438016": 89, "100839769": 89, "48955392": 89, "109470756": 89, "31it": [89, 92], "60653568": 89, "112015551": 89, "72384512": 89, "113671965": 89, "85it": [89, 92], "84049920": 89, "114620195": 89, "95715328": 89, "115224184": 89, "107413504": 89, "115691986": 89, "44it": [89, 92], "119111680": 89, "116047646": 89, "130809856": 89, "116220175": 89, "76it": [89, 92], "142475264": 89, "116344688": 89, "154173440": 89, "116434098": 89, "79it": [89, 92], "165871616": 89, "116527159": 89, "91it": [89, 92], "110569688": 89, "92it": [89, 92], "5000": 89, "plot_imag": 89, "visualize_outli": 89, "txt_class": 89, "img": [89, 91], "npimg": 89, "show_label": 89, "data_subset": 89, "resnet50": 89, "corpu": 89, "2048": 89, "embed_imag": 89, "create_model": 89, "strang": 89, "odd": 89, "train_ood_features_scor": 89, "top_train_ood_features_idx": 89, "fun": 89, "negat": 89, "homogen": 89, "bottom_train_ood_features_idx": 89, "test_ood_features_scor": 89, "top_ood_features_idx": 89, "inevit": 89, "trade": 89, "5th": 89, "percentil": 89, "fifth_percentil": 89, "plt_rang": 89, "hist": 89, "train_outlier_scor": 89, "ylabel": 89, "axvlin": 89, "test_outlier_scor": 89, "ood_features_indic": 89, "revisit": 89, "return_invers": 89, "train_feature_embeddings_sc": 89, "test_feature_embeddings_sc": 89, "train_pred_label": 89, "9702": 89, "train_ood_predictions_scor": 89, "test_ood_predictions_scor": 89, "mainli": [89, 95], "lost": 89, "unsuit": 90, "ok": [90, 95], "convention": 90, "aforement": 90, "hypothet": 90, "contrast": 90, "tradit": 90, "disjoint": 90, "out_of_sample_pred_probs_for_a": 90, "out_of_sample_pred_probs_for_b": 90, "out_of_sample_pred_probs_for_c": 90, "out_of_sample_pred_prob": 90, "price": 91, "incom": 91, "ag": 91, "histgradientboostingregressor": 91, "r2_score": 91, "student_grades_r": 91, "final_scor": 91, "true_final_scor": 91, "homework": 91, "3d": 91, "hue": 91, "mpl_toolkit": 91, "mplot3d": 91, "axes3d": 91, "errors_idx": 91, "add_subplot": 91, "z": 91, "colorbar": 91, "errors_mask": 91, "feature_column": 91, "predicted_column": 91, "x_train_raw": 91, "x_test_raw": 91, "categorical_featur": [91, 93], "randomforestregressor": 91, "636197": 91, "499503": 91, "843478": 91, "776647": 91, "350358": 91, "170547": 91, "706969": 91, "984759": 91, "812515": 91, "795928": 91, "identified_issu": [91, 94], "141": 91, "659": 91, "367": 91, "318": 91, "305": 91, "560": 91, "657": 91, "688": 91, "view_datapoint": 91, "concat": 91, "consum": [91, 94], "baseline_model": [91, 94], "preds_og": 91, "r2_og": 91, "838": 91, "robustli": [91, 93, 94], "acceler": [91, 94], "found_label_issu": 91, "preds_cl": 91, "r2_cl": 91, "926": 91, "effort": [91, 93, 94], "favorit": 91, "13091885": 91, "48412548": 91, "00695165": 91, "44421119": 91, "43029854": 91, "synthia": 92, "imagesegment": 92, "given_mask": 92, "predicted_mask": 92, "set_printopt": [92, 95], "sky": 92, "sidewalk": 92, "veget": 92, "terrain": 92, "rider": 92, "pred_probs_filepath": 92, "1088": 92, "1920": 92, "label_filepath": 92, "synthia_class": 92, "maunal": 92, "100000": 92, "244800": 92, "leftmost": 92, "middl": [92, 95], "infact": 92, "rightmost": 92, "discrep": 92, "4997817": 92, "15226": 92, "152253": 92, "61it": 92, "30507": 92, "152573": 92, "45883": 92, "153111": 92, "11it": 92, "61195": 92, "152223": 92, "76472": 92, "152416": 92, "94it": 92, "91715": 92, "152290": 92, "27it": 92, "107038": 92, "152592": 92, "10it": 92, "122298": 92, "152546": 92, "137553": 92, "152540": 92, "152808": 92, "152473": 92, "69it": 92, "168075": 92, "152529": 92, "98it": 92, "183329": 92, "152419": 92, "28it": 92, "198609": 92, "152531": 92, "13it": 92, "213863": 92, "152411": 92, "56it": 92, "229105": 92, "151864": 92, "33it": 92, "244360": 92, "152068": 92, "46it": 92, "259643": 92, "152294": 92, "47it": 92, "274873": 92, "152265": 92, "24it": 92, "290100": 92, "151927": 92, "305367": 92, "152148": 92, "60it": 92, "320640": 92, "152321": 92, "66it": 92, "335873": 92, "152229": 92, "34it": 92, "351210": 92, "152569": 92, "366468": 92, "152012": 92, "381670": 92, "151917": 92, "80it": 92, "396863": 92, "151853": 92, "89it": 92, "412224": 92, "152376": 92, "427544": 92, "152621": 92, "442807": 92, "152516": 92, "458127": 92, "152719": 92, "473400": 92, "151839": 92, "488652": 92, "152040": 92, "504055": 92, "152632": 92, "50it": 92, "519320": 92, "152432": 92, "534564": 92, "152130": 92, "549778": 92, "151691": 92, "97it": 92, "564948": 92, "151641": 92, "38it": 92, "580113": 92, "151615": 92, "595309": 92, "151717": 92, "68it": 92, "610501": 92, "151777": 92, "23it": 92, "625738": 92, "151951": 92, "86it": 92, "641050": 92, "152300": 92, "656336": 92, "152464": 92, "671583": 92, "152371": 92, "14it": 92, "686821": 92, "152180": 92, "702040": 92, "152073": 92, "717248": 92, "151762": 92, "732728": 92, "152669": 92, "83it": 92, "748069": 92, "152889": 92, "763538": 92, "153426": 92, "779099": 92, "154078": 92, "67it": 92, "794508": 92, "153905": 92, "809991": 92, "154178": 92, "825465": 92, "154344": 92, "72it": 92, "841038": 92, "154755": 92, "55it": 92, "856514": 92, "151024": 92, "872031": 92, "152245": 92, "96it": 92, "887574": 92, "153187": 92, "903111": 92, "153833": 92, "40it": 92, "918676": 92, "154373": 92, "934210": 92, "154659": 92, "949704": 92, "154742": 92, "965202": 92, "154810": 92, "21it": 92, "980686": 92, "154336": 92, "996154": 92, "154436": 92, "1011600": 92, "154165": 92, "1027061": 92, "154296": 92, "15it": 92, "1042492": 92, "154113": 92, "1057983": 92, "154349": 92, "1073434": 92, "154395": 92, "1088905": 92, "154487": 92, "78it": 92, "1104355": 92, "153677": 92, "1119724": 92, "153569": 92, "1135082": 92, "153413": 92, "1150501": 92, "153643": 92, "1165866": 92, "153368": 92, "1181270": 92, "153561": 92, "1196658": 92, "153653": 92, "1212046": 92, "153719": 92, "71it": 92, "1227419": 92, "153526": 92, "1242806": 92, "153627": 92, "1258169": 92, "153522": 92, "45it": 92, "1273522": 92, "153481": 92, "1288951": 92, "153722": 92, "1304417": 92, "154000": 92, "1319818": 92, "153878": 92, "1335233": 92, "153959": 92, "1350718": 92, "154223": 92, "1366147": 92, "154242": 92, "1381609": 92, "154353": 92, "1397045": 92, "154294": 92, "1412475": 92, "154214": 92, "74it": 92, "1427968": 92, "154427": 92, "1443411": 92, "154255": 92, "1458837": 92, "154135": 92, "1474251": 92, "154098": 92, "1489661": 92, "153480": 92, "1505010": 92, "153382": 92, "1520383": 92, "153484": 92, "1535732": 92, "153219": 92, "73it": 92, "1551121": 92, "153416": 92, "81it": 92, "1566463": 92, "153341": 92, "1581798": 92, "153020": 92, "1597101": 92, "152881": 92, "1612439": 92, "153028": 92, "1627742": 92, "152794": 92, "1643022": 92, "151894": 92, "1658213": 92, "151481": 92, "22it": 92, "1673466": 92, "151793": 92, "06it": 92, "1688788": 92, "152215": 92, "1704115": 92, "1719414": 92, "152666": 92, "64it": 92, "1734692": 92, "152697": 92, "37it": 92, "1749963": 92, "152663": 92, "1765268": 92, "152777": 92, "1780546": 92, "149164": 92, "1795711": 92, "149896": 92, "1811017": 92, "150833": 92, "1826359": 92, "151599": 92, "1841655": 92, "152002": 92, "1856862": 92, "152016": 92, "1872095": 92, "152106": 92, "1887375": 92, "152313": 92, "1902641": 92, "152415": 92, "1917896": 92, "152454": 92, "1933143": 92, "152238": 92, "1948368": 92, "151782": 92, "1963731": 92, "152311": 92, "1979056": 92, "152589": 92, "1994320": 92, "152602": 92, "2009581": 92, "152438": 92, "2024852": 92, "152519": 92, "2040105": 92, "152286": 92, "2055334": 92, "151788": 92, "2070617": 92, "152096": 92, "2085849": 92, "152161": 92, "2101066": 92, "151620": 92, "2116236": 92, "151640": 92, "2131495": 92, "151923": 92, "51it": 92, "2146688": 92, "151845": 92, "2161873": 92, "151618": 92, "2177036": 92, "151493": 92, "2192186": 92, "151038": 92, "2207291": 92, "150952": 92, "2222387": 92, "150387": 92, "2237540": 92, "150726": 92, "75it": 92, "2252694": 92, "150969": 92, "43it": 92, "2267792": 92, "150563": 92, "2282853": 92, "150574": 92, "2297950": 92, "150692": 92, "2313020": 92, "150132": 92, "2328167": 92, "150529": 92, "2343433": 92, "151164": 92, "2358586": 92, "151273": 92, "2373826": 92, "151608": 92, "2389094": 92, "151928": 92, "2404392": 92, "152241": 92, "2419617": 92, "151765": 92, "2434836": 92, "151889": 92, "2450084": 92, "152063": 92, "2465337": 92, "152200": 92, "2480587": 92, "152287": 92, "2495864": 92, "152429": 92, "2511108": 92, "152423": 92, "2526351": 92, "151940": 92, "2541546": 92, "151517": 92, "2556774": 92, "151744": 92, "2571985": 92, "151851": 92, "88it": 92, "2587272": 92, "152153": 92, "2602488": 92, "151903": 92, "2617907": 92, "152585": 92, "2633389": 92, "153254": 92, "2648740": 92, "153328": 92, "2664141": 92, "153529": 92, "2679543": 92, "153674": 92, "2694911": 92, "153336": 92, "2710245": 92, "152716": 92, "39it": 92, "2725518": 92, "152224": 92, "2740832": 92, "152494": 92, "2756082": 92, "152474": 92, "2771330": 92, "152359": 92, "2786698": 92, "152754": 92, "2802065": 92, "153026": 92, "2817518": 92, "153474": 92, "2832866": 92, "153423": 92, "05it": 92, "2848273": 92, "153614": 92, "2863635": 92, "153165": 92, "49it": 92, "2878952": 92, "153053": 92, "2894258": 92, "150671": 92, "2909543": 92, "151315": 92, "2924882": 92, "151929": 92, "2940192": 92, "152275": 92, "2955550": 92, "2970820": 92, "152591": 92, "2986237": 92, "153062": 92, "3001565": 92, "153125": 92, "3016879": 92, "153089": 92, "3032204": 92, "153136": 92, "3047642": 92, "153505": 92, "3062993": 92, "153282": 92, "3078395": 92, "153501": 92, "3093746": 92, "151977": 92, "03it": 92, "3108948": 92, "148570": 92, "3124368": 92, "150222": 92, "3139726": 92, "151214": 92, "3155172": 92, "152174": 92, "3170474": 92, "152425": 92, "3185831": 92, "152764": 92, "3201113": 92, "152517": 92, "3216369": 92, "152463": 92, "3231618": 92, "151453": 92, "3246785": 92, "151515": 92, "3261939": 92, "151439": 92, "3277292": 92, "3292663": 92, "152553": 92, "3308021": 92, "152859": 92, "3323406": 92, "153153": 92, "3338832": 92, "3354181": 92, "153118": 92, "3369494": 92, "152672": 92, "3384762": 92, "152406": 92, "3400049": 92, "152543": 92, "3415320": 92, "3430580": 92, "3445832": 92, "152445": 92, "3461155": 92, "152677": 92, "09it": 92, "3476423": 92, "152402": 92, "3491664": 92, "152280": 92, "3506933": 92, "152400": 92, "3522174": 92, "151584": 92, "3537475": 92, "152009": 92, "3552823": 92, "152447": 92, "3568106": 92, "152560": 92, "3583484": 92, "152922": 92, "3598777": 92, "152713": 92, "3614096": 92, "152851": 92, "3629444": 92, "153036": 92, "3644748": 92, "152696": 92, "3660120": 92, "152995": 92, "3675420": 92, "152504": 92, "3690671": 92, "152475": 92, "3706016": 92, "152765": 92, "3721293": 92, "152536": 92, "3736547": 92, "152018": 92, "3751952": 92, "152622": 92, "3767256": 92, "152746": 92, "07it": 92, "3782585": 92, "152907": 92, "3797877": 92, "152805": 92, "3813202": 92, "152937": 92, "54it": 92, "3828496": 92, "144305": 92, "08it": 92, "3843717": 92, "146576": 92, "3858961": 92, "148283": 92, "3874107": 92, "149215": 92, "3889346": 92, "150153": 92, "3904508": 92, "150588": 92, "3919651": 92, "150836": 92, "3934870": 92, "151239": 92, "3950095": 92, "151540": 92, "3965371": 92, "151902": 92, "3980568": 92, "151787": 92, "3995898": 92, "152237": 92, "4011221": 92, "4026477": 92, "152525": 92, "4041868": 92, "4057242": 92, "153175": 92, "4072563": 92, "153181": 92, "95it": 92, "4087907": 92, "153256": 92, "4103234": 92, "152892": 92, "4118558": 92, "152993": 92, "4133858": 92, "152776": 92, "4149136": 92, "4164389": 92, "152282": 92, "4179714": 92, "152568": 92, "4194998": 92, "152646": 92, "4210327": 92, "152836": 92, "4225694": 92, "153084": 92, "4241075": 92, "153299": 92, "4256519": 92, "153638": 92, "4271912": 92, "153725": 92, "4287285": 92, "153622": 92, "4302648": 92, "147371": 92, "4317903": 92, "148876": 92, "4333249": 92, "150220": 92, "4348667": 92, "151388": 92, "4364087": 92, "152222": 92, "4379541": 92, "152909": 92, "4394980": 92, "153349": 92, "4410406": 92, "153619": 92, "52it": 92, "4425857": 92, "153883": 92, "4441312": 92, "154081": 92, "4456724": 92, "153186": 92, "4472107": 92, "153376": 92, "4487509": 92, "153566": 92, "4502868": 92, "153551": 92, "4518254": 92, "153640": 92, "4533619": 92, "153543": 92, "4548979": 92, "153558": 92, "02it": 92, "4564352": 92, "153607": 92, "4579714": 92, "153396": 92, "4595054": 92, "153301": 92, "4610385": 92, "153045": 92, "4625690": 92, "150230": 92, "4641040": 92, "151194": 92, "4656459": 92, "152081": 92, "4671932": 92, "152867": 92, "4687351": 92, "153258": 92, "4702827": 92, "153705": 92, "4718320": 92, "154070": 92, "4733768": 92, "154190": 92, "4749189": 92, "154181": 92, "4764609": 92, "153462": 92, "4779957": 92, "152607": 92, "4795274": 92, "152772": 92, "4810553": 92, "152264": 92, "4825808": 92, "152348": 92, "4841147": 92, "152657": 92, "4856491": 92, "152890": 92, "4871870": 92, "153158": 92, "4887187": 92, "152980": 92, "4902486": 92, "152627": 92, "4917795": 92, "152762": 92, "4933072": 92, "152361": 92, "4948383": 92, "152581": 92, "4963719": 92, "152811": 92, "4979001": 92, "152775": 92, "4994279": 92, "152750": 92, "152507": 92, "3263230": 92, "783379": 92, "275110": 92, "255792": 92, "78225": 92, "55990": 92, "54427": 92, "33591": 92, "24645": 92, "21308": 92, "15045": 92, "14171": 92, "13832": 92, "13498": 92, "11490": 92, "9164": 92, "8769": 92, "6999": 92, "6031": 92, "5011": 92, "mistakenli": 92, "class_issu": 92, "aim": [92, 95], "domin": 92, "extratreesclassifi": 93, "extratre": 93, "ranked_label_issu": [93, 94], "labelencod": [93, 94], "labels_raw": 93, "interg": [93, 94], "tress": 93, "827": 93, "cheat": 93, "0pt": 93, "233": 93, "labels_train": 93, "labels_test": 93, "acc_og": [93, 94], "783068783068783": 93, "acc_cl": [93, 94], "8095238095238095": 93, "earlier": [94, 95], "raw_label": 94, "raw_train_text": 94, "raw_test_text": 94, "raw_train_label": 94, "raw_test_label": 94, "encond": 94, "train_text": 94, "test_text": 94, "858371": 94, "547274": 94, "826228": 94, "966008": 94, "792449": 94, "646": 94, "390": 94, "628": 94, "702": 94, "135": [94, 95], "735": 94, "print_as_df": 94, "inverse_transform": 94, "fight": 94, "bunch": 95, "conll": 95, "2003": 95, "love": 95, "n_i": 95, "optional_list_of_ordered_class_nam": 95, "deepai": 95, "conll2003": 95, "rm": 95, "tokenclassif": 95, "2024": 95, "2400": 95, "52e0": 95, "1a00": 95, "845": 95, "connect": 95, "443": 95, "await": 95, "982975": 95, "960k": 95, "kb": 95, "959": 95, "94k": 95, "84mb": 95, "mb": 95, "directori": 95, "inflat": 95, "161": 95, "137": 95, "17045998": 95, "16m": 95, "octet": 95, "43m": 95, "8mb": 95, "26m": 95, "0mb": 95, "bert": 95, "read_npz": 95, "filepath": 95, "corrsespond": 95, "iob2": 95, "given_ent": 95, "entity_map": 95, "readfil": 95, "sep": 95, "startswith": 95, "docstart": 95, "isalpha": 95, "isupp": 95, "indices_to_preview": 95, "nsentenc": 95, "eu": 95, "reject": 95, "boycott": 95, "british": 95, "lamb": 95, "00030412": 95, "00023826": 95, "99936208": 95, "00007009": 95, "00002545": 95, "99998795": 95, "00000401": 95, "00000218": 95, "00000455": 95, "00000131": 95, "00000749": 95, "99996115": 95, "00001371": 95, "0000087": 95, "00000895": 95, "99998936": 95, "00000382": 95, "00000178": 95, "00000366": 95, "00000137": 95, "99999101": 95, "00000266": 95, "00000174": 95, "0000035": 95, "00000109": 95, "99998768": 95, "00000482": 95, "00000202": 95, "00000438": 95, "0000011": 95, "00000465": 95, "99996392": 95, "00001105": 95, "0000116": 95, "00000878": 95, "99998671": 95, "00000364": 95, "00000213": 95, "00000472": 95, "00000281": 95, "99999073": 95, "00000211": 95, "00000159": 95, "00000442": 95, "00000115": 95, "peter": 95, "blackburn": 95, "00000358": 95, "00000529": 95, "99995623": 95, "0000129": 95, "0000024": 95, "00001812": 95, "99994141": 95, "00001645": 95, "00002162": 95, "brussel": 95, "1996": 95, "00001172": 95, "00000821": 95, "00004661": 95, "0000618": 95, "99987167": 95, "99999061": 95, "00000201": 95, "00000195": 95, "00000408": 95, "00000135": 95, "2254": 95, "2907": 95, "19392": 95, "9962": 95, "8904": 95, "19303": 95, "12918": 95, "9256": 95, "11855": 95, "18392": 95, "20426": 95, "19402": 95, "14744": 95, "19371": 95, "4645": 95, "10331": 95, "9430": 95, "6143": 95, "18367": 95, "12914": 95, "todai": 95, "weather": 95, "march": 95, "scalfaro": 95, "northern": 95, "himself": 95, "said": 95, "germani": 95, "nastja": 95, "rysich": 95, "north": 95, "spla": 95, "fought": 95, "khartoum": 95, "govern": 95, "south": 95, "1983": 95, "autonomi": 95, "animist": 95, "region": 95, "moslem": 95, "arabis": 95, "mayor": 95, "antonio": 95, "gonzalez": 95, "garcia": 95, "revolutionari": 95, "parti": 95, "wednesdai": 95, "troop": 95, "raid": 95, "farm": 95, "stole": 95, "rape": 95, "women": 95, "spring": 95, "chg": 95, "hrw": 95, "12pct": 95, "princ": 95, "photo": 95, "moment": 95, "spokeswoman": 95, "rainier": 95, "told": 95, "reuter": 95, "danila": 95, "carib": 95, "w224": 95, "equip": 95, "radiomet": 95, "earn": 95, "19996": 95, "london": 95, "denom": 95, "sale": 95, "uk": 95, "jp": 95, "fr": 95, "maccabi": 95, "hapoel": 95, "haifa": 95, "tel": 95, "aviv": 95, "hospit": 95, "rever": 95, "roman": 95, "cathol": 95, "nun": 95, "admit": 95, "calcutta": 95, "week": 95, "ago": 95, "fever": 95, "vomit": 95, "allianc": 95, "embattl": 95, "kabul": 95, "salang": 95, "highwai": 95, "mondai": 95, "tuesdai": 95, "suprem": 95, "council": 95, "led": 95, "jumbish": 95, "milli": 95, "movement": 95, "warlord": 95, "abdul": 95, "rashid": 95, "dostum": 95, "dollar": 95, "exchang": 95, "3570": 95, "12049": 95, "born": 95, "1937": 95, "provinc": 95, "anhui": 95, "dai": 95, "came": 95, "shanghai": 95, "citi": 95, "prolif": 95, "author": 95, "teacher": 95, "chines": 95, "16764": 95, "1990": 95, "historian": 95, "alan": 95, "john": 95, "percival": 95, "taylor": 95, "di": 95, "20446": 95, "pace": 95, "bowler": 95, "ian": 95, "harvei": 95, "claim": 95, "victoria": 95, "15514": 95, "cotti": 95, "osc": 95, "foreign": 95, "minist": 95, "7525": 95, "sultan": 95, "specter": 95, "met": 95, "crown": 95, "abdullah": 95, "defenc": 95, "aviat": 95, "jeddah": 95, "saudi": 95, "agenc": 95, "2288": 95, "hi": 95, "customari": 95, "outfit": 95, "champion": 95, "damp": 95, "scalp": 95, "canada": 95, "reign": 95, "olymp": 95, "donovan": 95, "bailei": 95, "1992": 95, "linford": 95, "christi": 95, "britain": 95, "1984": 95, "1988": 95, "carl": 95, "lewi": 95, "ambigi": 95, "punctuat": 95, "chicago": 95, "digest": 95, "philadelphia": 95, "usda": 95, "york": 95, "token_issu": 95, "471": 95, "kean": 95, "year": 95, "contract": 95, "manchest": 95, "19072": 95, "societi": 95, "million": 95, "bite": 95, "deliv": 95, "19910": 95, "father": 95, "clarenc": 95, "woolmer": 95, "renam": 95, "uttar": 95, "pradesh": 95, "india": 95, "ranji": 95, "trophi": 95, "nation": 95, "championship": 95, "captain": 95, "1949": 95, "15658": 95, "19879": 95, "iii": 95, "brian": 95, "shimer": 95, "randi": 95, "jone": 95, "19104": 95}, "objects": {"cleanlab": [[0, 0, 0, "-", "benchmarking"], [2, 0, 0, "-", "classification"], [3, 0, 0, "-", "count"], [9, 0, 0, "-", "datalab"], [31, 0, 0, "-", "dataset"], [34, 0, 0, "-", "experimental"], [37, 0, 0, "-", "filter"], [38, 0, 0, "-", "internal"], [49, 0, 0, "-", "models"], [51, 0, 0, "-", "multiannotator"], [54, 0, 0, "-", "multilabel_classification"], [57, 0, 0, "-", "object_detection"], [60, 0, 0, "-", "outlier"], [61, 0, 0, "-", "rank"], [62, 0, 0, "-", "regression"], [66, 0, 0, "-", "segmentation"], [70, 0, 0, "-", "token_classification"]], "cleanlab.benchmarking": [[1, 0, 0, "-", "noise_generation"]], "cleanlab.benchmarking.noise_generation": [[1, 1, 1, "", "generate_n_rand_probabilities_that_sum_to_m"], [1, 1, 1, "", "generate_noise_matrix_from_trace"], [1, 1, 1, "", "generate_noisy_labels"], [1, 1, 1, "", "noise_matrix_is_valid"], [1, 1, 1, "", "randomly_distribute_N_balls_into_K_bins"]], "cleanlab.classification": [[2, 2, 1, "", "CleanLearning"]], "cleanlab.classification.CleanLearning": [[2, 3, 1, "", "__init_subclass__"], [2, 3, 1, "", "find_label_issues"], [2, 3, 1, "", "fit"], [2, 3, 1, "", "get_label_issues"], [2, 3, 1, "", "get_metadata_routing"], [2, 3, 1, "", "get_params"], [2, 3, 1, "", "predict"], [2, 3, 1, "", "predict_proba"], [2, 3, 1, "", "save_space"], [2, 3, 1, "", "score"], [2, 3, 1, "", "set_fit_request"], [2, 3, 1, "", "set_params"], [2, 3, 1, "", "set_score_request"]], "cleanlab.count": [[3, 1, 1, "", "calibrate_confident_joint"], [3, 1, 1, "", "compute_confident_joint"], [3, 1, 1, "", "estimate_confident_joint_and_cv_pred_proba"], [3, 1, 1, "", "estimate_cv_predicted_probabilities"], [3, 1, 1, "", "estimate_joint"], [3, 1, 1, "", "estimate_latent"], [3, 1, 1, "", "estimate_noise_matrices"], [3, 1, 1, "", "estimate_py_and_noise_matrices_from_probabilities"], [3, 1, 1, "", "estimate_py_noise_matrices_and_cv_pred_proba"], [3, 1, 1, "", "get_confident_thresholds"], [3, 1, 1, "", "num_label_issues"]], "cleanlab.datalab": [[4, 0, 0, "-", "datalab"], [13, 0, 0, "-", "internal"]], "cleanlab.datalab.datalab": [[4, 2, 1, "", "Datalab"]], "cleanlab.datalab.datalab.Datalab": [[4, 4, 1, "", "class_names"], [4, 3, 1, "", "find_issues"], [4, 3, 1, "", "get_info"], [4, 3, 1, "", "get_issue_summary"], [4, 3, 1, "", "get_issues"], [4, 4, 1, "", "has_labels"], [4, 4, 1, "", "info"], [4, 4, 1, "", "issue_summary"], [4, 4, 1, "", "issues"], [4, 4, 1, "", "labels"], [4, 3, 1, "", "list_default_issue_types"], [4, 3, 1, "", "list_possible_issue_types"], [4, 3, 1, "", "load"], [4, 3, 1, "", "report"], [4, 3, 1, "", "save"]], "cleanlab.datalab.internal": [[10, 0, 0, "-", "data"], [11, 0, 0, "-", "data_issues"], [14, 0, 0, "-", "issue_finder"], [12, 0, 0, "-", "issue_manager_factory"], [28, 0, 0, "-", "report"], [29, 0, 0, "-", "task"]], "cleanlab.datalab.internal.data": [[10, 2, 1, "", "Data"], [10, 5, 1, "", "DataFormatError"], [10, 5, 1, "", "DatasetDictError"], [10, 5, 1, "", "DatasetLoadError"], [10, 2, 1, "", "Label"], [10, 2, 1, "", "MultiClass"], [10, 2, 1, "", "MultiLabel"]], "cleanlab.datalab.internal.data.Data": [[10, 4, 1, "", "class_names"], [10, 4, 1, "", "has_labels"]], "cleanlab.datalab.internal.data.DataFormatError": [[10, 3, 1, "", "add_note"], [10, 6, 1, "", "args"], [10, 3, 1, "", "with_traceback"]], "cleanlab.datalab.internal.data.DatasetDictError": [[10, 3, 1, "", "add_note"], [10, 6, 1, "", "args"], [10, 3, 1, "", "with_traceback"]], "cleanlab.datalab.internal.data.DatasetLoadError": [[10, 3, 1, "", "add_note"], [10, 6, 1, "", "args"], [10, 3, 1, "", "with_traceback"]], "cleanlab.datalab.internal.data.Label": [[10, 4, 1, "", "class_names"], [10, 4, 1, "", "is_available"]], "cleanlab.datalab.internal.data.MultiClass": [[10, 4, 1, "", "class_names"], [10, 4, 1, "", "is_available"]], "cleanlab.datalab.internal.data.MultiLabel": [[10, 4, 1, "", "class_names"], [10, 4, 1, "", "is_available"]], "cleanlab.datalab.internal.data_issues": [[11, 2, 1, "", "DataIssues"], [11, 1, 1, "", "get_data_statistics"]], "cleanlab.datalab.internal.data_issues.DataIssues": [[11, 3, 1, "", "collect_issues_from_imagelab"], [11, 3, 1, "", "collect_issues_from_issue_manager"], [11, 3, 1, "", "collect_statistics"], [11, 3, 1, "", "get_info"], [11, 3, 1, "", "get_issue_summary"], [11, 3, 1, "", "get_issues"], [11, 6, 1, "", "info"], [11, 6, 1, "", "issue_summary"], [11, 6, 1, "", "issues"], [11, 3, 1, "", "set_health_score"], [11, 4, 1, "", "statistics"]], "cleanlab.datalab.internal.issue_finder": [[14, 2, 1, "", "IssueFinder"]], "cleanlab.datalab.internal.issue_finder.IssueFinder": [[14, 3, 1, "", "find_issues"], [14, 3, 1, "", "get_available_issue_types"]], "cleanlab.datalab.internal.issue_manager": [[16, 0, 0, "-", "data_valuation"], [17, 0, 0, "-", "duplicate"], [18, 0, 0, "-", "imbalance"], [20, 0, 0, "-", "issue_manager"], [21, 0, 0, "-", "label"], [22, 0, 0, "-", "noniid"], [23, 0, 0, "-", "null"], [24, 0, 0, "-", "outlier"], [27, 0, 0, "-", "underperforming_group"]], "cleanlab.datalab.internal.issue_manager.data_valuation": [[16, 2, 1, "", "DataValuationIssueManager"]], "cleanlab.datalab.internal.issue_manager.data_valuation.DataValuationIssueManager": [[16, 6, 1, "", "DEFAULT_THRESHOLD"], [16, 3, 1, "", "collect_info"], [16, 6, 1, "", "description"], [16, 3, 1, "", "find_issues"], [16, 6, 1, "", "info"], [16, 6, 1, "", "issue_name"], [16, 6, 1, "", "issue_score_key"], [16, 6, 1, "", "issues"], [16, 3, 1, "", "make_summary"], [16, 3, 1, "", "report"], [16, 6, 1, "", "summary"], [16, 6, 1, "", "verbosity_levels"]], "cleanlab.datalab.internal.issue_manager.duplicate": [[17, 2, 1, "", "NearDuplicateIssueManager"]], "cleanlab.datalab.internal.issue_manager.duplicate.NearDuplicateIssueManager": [[17, 3, 1, "", "collect_info"], [17, 6, 1, "", "description"], [17, 3, 1, "", "find_issues"], [17, 6, 1, "", "info"], [17, 6, 1, "", "issue_name"], [17, 6, 1, "", "issue_score_key"], [17, 6, 1, "", "issues"], [17, 3, 1, "", "make_summary"], [17, 6, 1, "", "near_duplicate_sets"], [17, 3, 1, "", "report"], [17, 6, 1, "", "summary"], [17, 6, 1, "", "verbosity_levels"]], "cleanlab.datalab.internal.issue_manager.imbalance": [[18, 2, 1, "", "ClassImbalanceIssueManager"]], "cleanlab.datalab.internal.issue_manager.imbalance.ClassImbalanceIssueManager": [[18, 3, 1, "", "collect_info"], [18, 6, 1, "", "description"], [18, 3, 1, "", "find_issues"], [18, 6, 1, "", "info"], [18, 6, 1, "", "issue_name"], [18, 6, 1, "", "issue_score_key"], [18, 6, 1, "", "issues"], [18, 3, 1, "", "make_summary"], [18, 3, 1, "", "report"], [18, 6, 1, "", "summary"], [18, 6, 1, "", "verbosity_levels"]], "cleanlab.datalab.internal.issue_manager.issue_manager": [[20, 2, 1, "", "IssueManager"]], "cleanlab.datalab.internal.issue_manager.issue_manager.IssueManager": [[20, 3, 1, "", "collect_info"], [20, 6, 1, "", "description"], [20, 3, 1, "", "find_issues"], [20, 6, 1, "", "info"], [20, 6, 1, "", "issue_name"], [20, 6, 1, "", "issue_score_key"], [20, 6, 1, "", "issues"], [20, 3, 1, "", "make_summary"], [20, 3, 1, "", "report"], [20, 6, 1, "", "summary"], [20, 6, 1, "", "verbosity_levels"]], "cleanlab.datalab.internal.issue_manager.label": [[21, 2, 1, "", "LabelIssueManager"]], "cleanlab.datalab.internal.issue_manager.label.LabelIssueManager": [[21, 3, 1, "", "collect_info"], [21, 6, 1, "", "description"], [21, 3, 1, "", "find_issues"], [21, 3, 1, "", "get_health_summary"], [21, 6, 1, "", "health_summary_parameters"], [21, 6, 1, "", "info"], [21, 6, 1, "", "issue_name"], [21, 6, 1, "", "issue_score_key"], [21, 6, 1, "", "issues"], [21, 3, 1, "", "make_summary"], [21, 3, 1, "", "report"], [21, 6, 1, "", "summary"], [21, 6, 1, "", "verbosity_levels"]], "cleanlab.datalab.internal.issue_manager.noniid": [[22, 2, 1, "", "NonIIDIssueManager"], [22, 1, 1, "", "simplified_kolmogorov_smirnov_test"]], "cleanlab.datalab.internal.issue_manager.noniid.NonIIDIssueManager": [[22, 3, 1, "", "collect_info"], [22, 6, 1, "", "description"], [22, 3, 1, "", "find_issues"], [22, 6, 1, "", "info"], [22, 6, 1, "", "issue_name"], [22, 6, 1, "", "issue_score_key"], [22, 6, 1, "", "issues"], [22, 3, 1, "", "make_summary"], [22, 3, 1, "", "report"], [22, 6, 1, "", "summary"], [22, 6, 1, "", "verbosity_levels"]], "cleanlab.datalab.internal.issue_manager.null": [[23, 2, 1, "", "NullIssueManager"]], "cleanlab.datalab.internal.issue_manager.null.NullIssueManager": [[23, 3, 1, "", "collect_info"], [23, 6, 1, "", "description"], [23, 3, 1, "", "find_issues"], [23, 6, 1, "", "info"], [23, 6, 1, "", "issue_name"], [23, 6, 1, "", "issue_score_key"], [23, 6, 1, "", "issues"], [23, 3, 1, "", "make_summary"], [23, 3, 1, "", "report"], [23, 6, 1, "", "summary"], [23, 6, 1, "", "verbosity_levels"]], "cleanlab.datalab.internal.issue_manager.outlier": [[24, 2, 1, "", "OutlierIssueManager"]], "cleanlab.datalab.internal.issue_manager.outlier.OutlierIssueManager": [[24, 6, 1, "", "DEFAULT_THRESHOLDS"], [24, 3, 1, "", "collect_info"], [24, 6, 1, "", "description"], [24, 3, 1, "", "find_issues"], [24, 6, 1, "", "info"], [24, 6, 1, "", "issue_name"], [24, 6, 1, "", "issue_score_key"], [24, 6, 1, "", "issues"], [24, 3, 1, "", "make_summary"], [24, 6, 1, "", "ood"], [24, 3, 1, "", "report"], [24, 6, 1, "", "summary"], [24, 6, 1, "", "verbosity_levels"]], "cleanlab.datalab.internal.issue_manager.regression": [[26, 0, 0, "-", "label"]], "cleanlab.datalab.internal.issue_manager.regression.label": [[26, 2, 1, "", "RegressionLabelIssueManager"], [26, 1, 1, "", "find_issues_with_features"], [26, 1, 1, "", "find_issues_with_predictions"]], "cleanlab.datalab.internal.issue_manager.regression.label.RegressionLabelIssueManager": [[26, 3, 1, "", "collect_info"], [26, 6, 1, "", "description"], [26, 3, 1, "", "find_issues"], [26, 6, 1, "", "info"], [26, 6, 1, "", "issue_name"], [26, 6, 1, "", "issue_score_key"], [26, 6, 1, "", "issues"], [26, 3, 1, "", "make_summary"], [26, 3, 1, "", "report"], [26, 6, 1, "", "summary"], [26, 6, 1, "", "verbosity_levels"]], "cleanlab.datalab.internal.issue_manager.underperforming_group": [[27, 2, 1, "", "UnderperformingGroupIssueManager"]], "cleanlab.datalab.internal.issue_manager.underperforming_group.UnderperformingGroupIssueManager": [[27, 6, 1, "", "NO_UNDERPERFORMING_CLUSTER_ID"], [27, 6, 1, "", "OUTLIER_CLUSTER_LABELS"], [27, 3, 1, "", "collect_info"], [27, 6, 1, "", "description"], [27, 3, 1, "", "filter_cluster_ids"], [27, 3, 1, "", "find_issues"], [27, 3, 1, "", "get_worst_cluster"], [27, 6, 1, "", "info"], [27, 6, 1, "", "issue_name"], [27, 6, 1, "", "issue_score_key"], [27, 6, 1, "", "issues"], [27, 3, 1, "", "make_summary"], [27, 3, 1, "", "perform_clustering"], [27, 3, 1, "", "report"], [27, 3, 1, "", "set_knn_graph"], [27, 6, 1, "", "summary"], [27, 6, 1, "", "verbosity_levels"]], "cleanlab.datalab.internal.issue_manager_factory": [[12, 7, 1, "", "REGISTRY"], [12, 1, 1, "", "list_default_issue_types"], [12, 1, 1, "", "list_possible_issue_types"], [12, 1, 1, "", "register"]], "cleanlab.datalab.internal.report": [[28, 2, 1, "", "Reporter"]], "cleanlab.datalab.internal.report.Reporter": [[28, 3, 1, "", "get_report"], [28, 3, 1, "", "report"]], "cleanlab.datalab.internal.task": [[29, 2, 1, "", "Task"]], "cleanlab.datalab.internal.task.Task": [[29, 6, 1, "", "CLASSIFICATION"], [29, 6, 1, "", "MULTILABEL"], [29, 6, 1, "", "REGRESSION"], [29, 3, 1, "", "__contains__"], [29, 3, 1, "", "__getitem__"], [29, 3, 1, "", "__iter__"], [29, 3, 1, "", "__len__"], [29, 3, 1, "", "from_str"], [29, 4, 1, "", "is_classification"], [29, 4, 1, "", "is_multilabel"], [29, 4, 1, "", "is_regression"]], "cleanlab.dataset": [[31, 1, 1, "", "find_overlapping_classes"], [31, 1, 1, "", "health_summary"], [31, 1, 1, "", "overall_label_health_score"], [31, 1, 1, "", "rank_classes_by_label_quality"]], "cleanlab.experimental": [[32, 0, 0, "-", "cifar_cnn"], [33, 0, 0, "-", "coteaching"], [35, 0, 0, "-", "label_issues_batched"], [36, 0, 0, "-", "mnist_pytorch"]], "cleanlab.experimental.cifar_cnn": [[32, 2, 1, "", "CNN"], [32, 1, 1, "", "call_bn"]], "cleanlab.experimental.cifar_cnn.CNN": [[32, 6, 1, "", "T_destination"], [32, 3, 1, "", "__call__"], [32, 3, 1, "", "add_module"], [32, 3, 1, "", "apply"], [32, 3, 1, "", "bfloat16"], [32, 3, 1, "", "buffers"], [32, 6, 1, "", "call_super_init"], [32, 3, 1, "", "children"], [32, 3, 1, "", "compile"], [32, 3, 1, "", "cpu"], [32, 3, 1, "", "cuda"], [32, 3, 1, "", "double"], [32, 6, 1, "", "dump_patches"], [32, 3, 1, "", "eval"], [32, 3, 1, "", "extra_repr"], [32, 3, 1, "", "float"], [32, 3, 1, "id0", "forward"], [32, 3, 1, "", "get_buffer"], [32, 3, 1, "", "get_extra_state"], [32, 3, 1, "", "get_parameter"], [32, 3, 1, "", "get_submodule"], [32, 3, 1, "", "half"], [32, 3, 1, "", "ipu"], [32, 3, 1, "", "load_state_dict"], [32, 3, 1, "", "modules"], [32, 3, 1, "", "named_buffers"], [32, 3, 1, "", "named_children"], [32, 3, 1, "", "named_modules"], [32, 3, 1, "", "named_parameters"], [32, 3, 1, "", "parameters"], [32, 3, 1, "", "register_backward_hook"], [32, 3, 1, "", "register_buffer"], [32, 3, 1, "", "register_forward_hook"], [32, 3, 1, "", "register_forward_pre_hook"], [32, 3, 1, "", "register_full_backward_hook"], [32, 3, 1, "", "register_full_backward_pre_hook"], [32, 3, 1, "", "register_load_state_dict_post_hook"], [32, 3, 1, "", "register_module"], [32, 3, 1, "", "register_parameter"], [32, 3, 1, "", "register_state_dict_pre_hook"], [32, 3, 1, "", "requires_grad_"], [32, 3, 1, "", "set_extra_state"], [32, 3, 1, "", "share_memory"], [32, 3, 1, "", "state_dict"], [32, 3, 1, "", "to"], [32, 3, 1, "", "to_empty"], [32, 3, 1, "", "train"], [32, 6, 1, "", "training"], [32, 3, 1, "", "type"], [32, 3, 1, "", "xpu"], [32, 3, 1, "", "zero_grad"]], "cleanlab.experimental.coteaching": [[33, 1, 1, "", "adjust_learning_rate"], [33, 1, 1, "", "evaluate"], [33, 1, 1, "", "forget_rate_scheduler"], [33, 1, 1, "", "initialize_lr_scheduler"], [33, 1, 1, "", "loss_coteaching"], [33, 1, 1, "", "train"]], "cleanlab.experimental.label_issues_batched": [[35, 2, 1, "", "LabelInspector"], [35, 7, 1, "", "adj_confident_thresholds_shared"], [35, 1, 1, "", "find_label_issues_batched"], [35, 7, 1, "", "labels_shared"], [35, 7, 1, "", "pred_probs_shared"], [35, 1, 1, "", "split_arr"]], "cleanlab.experimental.label_issues_batched.LabelInspector": [[35, 3, 1, "", "get_confident_thresholds"], [35, 3, 1, "", "get_label_issues"], [35, 3, 1, "", "get_num_issues"], [35, 3, 1, "", "get_quality_scores"], [35, 3, 1, "", "score_label_quality"], [35, 3, 1, "", "update_confident_thresholds"]], "cleanlab.experimental.mnist_pytorch": [[36, 2, 1, "", "CNN"], [36, 2, 1, "", "SimpleNet"], [36, 1, 1, "", "get_mnist_dataset"], [36, 1, 1, "", "get_sklearn_digits_dataset"]], "cleanlab.experimental.mnist_pytorch.CNN": [[36, 3, 1, "", "__init_subclass__"], [36, 6, 1, "", "batch_size"], [36, 6, 1, "", "dataset"], [36, 6, 1, "", "epochs"], [36, 3, 1, "id0", "fit"], [36, 3, 1, "", "get_metadata_routing"], [36, 3, 1, "", "get_params"], [36, 6, 1, "", "loader"], [36, 6, 1, "", "log_interval"], [36, 6, 1, "", "lr"], [36, 6, 1, "", "momentum"], [36, 6, 1, "", "no_cuda"], [36, 3, 1, "id1", "predict"], [36, 3, 1, "id4", "predict_proba"], [36, 6, 1, "", "seed"], [36, 3, 1, "", "set_fit_request"], [36, 3, 1, "", "set_params"], [36, 3, 1, "", "set_predict_proba_request"], [36, 3, 1, "", "set_predict_request"], [36, 6, 1, "", "test_batch_size"]], "cleanlab.experimental.mnist_pytorch.SimpleNet": [[36, 6, 1, "", "T_destination"], [36, 3, 1, "", "__call__"], [36, 3, 1, "", "add_module"], [36, 3, 1, "", "apply"], [36, 3, 1, "", "bfloat16"], [36, 3, 1, "", "buffers"], [36, 6, 1, "", "call_super_init"], [36, 3, 1, "", "children"], [36, 3, 1, "", "compile"], [36, 3, 1, "", "cpu"], [36, 3, 1, "", "cuda"], [36, 3, 1, "", "double"], [36, 6, 1, "", "dump_patches"], [36, 3, 1, "", "eval"], [36, 3, 1, "", "extra_repr"], [36, 3, 1, "", "float"], [36, 3, 1, "", "forward"], [36, 3, 1, "", "get_buffer"], [36, 3, 1, "", "get_extra_state"], [36, 3, 1, "", "get_parameter"], [36, 3, 1, "", "get_submodule"], [36, 3, 1, "", "half"], [36, 3, 1, "", "ipu"], [36, 3, 1, "", "load_state_dict"], [36, 3, 1, "", "modules"], [36, 3, 1, "", "named_buffers"], [36, 3, 1, "", "named_children"], [36, 3, 1, "", "named_modules"], [36, 3, 1, "", "named_parameters"], [36, 3, 1, "", "parameters"], [36, 3, 1, "", "register_backward_hook"], [36, 3, 1, "", "register_buffer"], [36, 3, 1, "", "register_forward_hook"], [36, 3, 1, "", "register_forward_pre_hook"], [36, 3, 1, "", "register_full_backward_hook"], [36, 3, 1, "", "register_full_backward_pre_hook"], [36, 3, 1, "", "register_load_state_dict_post_hook"], [36, 3, 1, "", "register_module"], [36, 3, 1, "", "register_parameter"], [36, 3, 1, "", "register_state_dict_pre_hook"], [36, 3, 1, "", "requires_grad_"], [36, 3, 1, "", "set_extra_state"], [36, 3, 1, "", "share_memory"], [36, 3, 1, "", "state_dict"], [36, 3, 1, "", "to"], [36, 3, 1, "", "to_empty"], [36, 3, 1, "", "train"], [36, 6, 1, "", "training"], [36, 3, 1, "", "type"], [36, 3, 1, "", "xpu"], [36, 3, 1, "", "zero_grad"]], "cleanlab.filter": [[37, 1, 1, "", "find_label_issues"], [37, 1, 1, "", "find_label_issues_using_argmax_confusion_matrix"], [37, 1, 1, "", "find_predicted_neq_given"], [37, 7, 1, "", "pred_probs_by_class"], [37, 7, 1, "", "prune_count_matrix_cols"]], "cleanlab.internal": [[39, 0, 0, "-", "label_quality_utils"], [40, 0, 0, "-", "latent_algebra"], [41, 0, 0, "-", "multiannotator_utils"], [42, 0, 0, "-", "multilabel_scorer"], [43, 0, 0, "-", "multilabel_utils"], [44, 0, 0, "-", "outlier"], [45, 0, 0, "-", "token_classification_utils"], [46, 0, 0, "-", "util"], [47, 0, 0, "-", "validation"]], "cleanlab.internal.label_quality_utils": [[39, 1, 1, "", "get_normalized_entropy"]], "cleanlab.internal.latent_algebra": [[40, 1, 1, "", "compute_inv_noise_matrix"], [40, 1, 1, "", "compute_noise_matrix_from_inverse"], [40, 1, 1, "", "compute_ps_py_inv_noise_matrix"], [40, 1, 1, "", "compute_py"], [40, 1, 1, "", "compute_py_inv_noise_matrix"], [40, 1, 1, "", "compute_pyx"]], "cleanlab.internal.multiannotator_utils": [[41, 1, 1, "", "assert_valid_inputs_multiannotator"], [41, 1, 1, "", "assert_valid_pred_probs"], [41, 1, 1, "", "check_consensus_label_classes"], [41, 1, 1, "", "compute_soft_cross_entropy"], [41, 1, 1, "", "find_best_temp_scaler"], [41, 1, 1, "", "format_multiannotator_labels"], [41, 1, 1, "", "temp_scale_pred_probs"]], "cleanlab.internal.multilabel_scorer": [[42, 2, 1, "", "Aggregator"], [42, 2, 1, "", "ClassLabelScorer"], [42, 2, 1, "", "MultilabelScorer"], [42, 1, 1, "", "exponential_moving_average"], [42, 1, 1, "", "get_cross_validated_multilabel_pred_probs"], [42, 1, 1, "", "get_label_quality_scores"], [42, 1, 1, "", "multilabel_py"], [42, 1, 1, "", "softmin"]], "cleanlab.internal.multilabel_scorer.Aggregator": [[42, 3, 1, "", "__call__"], [42, 6, 1, "", "possible_methods"]], "cleanlab.internal.multilabel_scorer.ClassLabelScorer": [[42, 6, 1, "", "CONFIDENCE_WEIGHTED_ENTROPY"], [42, 6, 1, "", "NORMALIZED_MARGIN"], [42, 6, 1, "", "SELF_CONFIDENCE"], [42, 3, 1, "", "__call__"], [42, 3, 1, "", "__contains__"], [42, 3, 1, "", "__getitem__"], [42, 3, 1, "", "__iter__"], [42, 3, 1, "", "__len__"], [42, 3, 1, "", "from_str"]], "cleanlab.internal.multilabel_scorer.MultilabelScorer": [[42, 3, 1, "", "__call__"], [42, 3, 1, "", "aggregate"], [42, 3, 1, "", "get_class_label_quality_scores"]], "cleanlab.internal.multilabel_utils": [[43, 1, 1, "", "get_onehot_num_classes"], [43, 1, 1, "", "int2onehot"], [43, 1, 1, "", "onehot2int"], [43, 1, 1, "", "stack_complement"]], "cleanlab.internal.outlier": [[44, 1, 1, "", "transform_distances_to_scores"]], "cleanlab.internal.token_classification_utils": [[45, 1, 1, "", "color_sentence"], [45, 1, 1, "", "filter_sentence"], [45, 1, 1, "", "get_sentence"], [45, 1, 1, "", "mapping"], [45, 1, 1, "", "merge_probs"], [45, 1, 1, "", "process_token"]], "cleanlab.internal.util": [[46, 1, 1, "", "append_extra_datapoint"], [46, 1, 1, "", "clip_noise_rates"], [46, 1, 1, "", "clip_values"], [46, 1, 1, "", "compress_int_array"], [46, 1, 1, "", "confusion_matrix"], [46, 1, 1, "", "csr_vstack"], [46, 1, 1, "", "estimate_pu_f1"], [46, 1, 1, "", "extract_indices_tf"], [46, 1, 1, "", "force_two_dimensions"], [46, 1, 1, "", "format_labels"], [46, 1, 1, "", "get_missing_classes"], [46, 1, 1, "", "get_num_classes"], [46, 1, 1, "", "get_unique_classes"], [46, 1, 1, "", "is_tensorflow_dataset"], [46, 1, 1, "", "is_torch_dataset"], [46, 1, 1, "", "num_unique_classes"], [46, 1, 1, "", "print_inverse_noise_matrix"], [46, 1, 1, "", "print_joint_matrix"], [46, 1, 1, "", "print_noise_matrix"], [46, 1, 1, "", "print_square_matrix"], [46, 1, 1, "", "remove_noise_from_class"], [46, 1, 1, "", "round_preserving_row_totals"], [46, 1, 1, "", "round_preserving_sum"], [46, 1, 1, "", "smart_display_dataframe"], [46, 1, 1, "", "subset_X_y"], [46, 1, 1, "", "subset_data"], [46, 1, 1, "", "subset_labels"], [46, 1, 1, "", "train_val_split"], [46, 1, 1, "", "unshuffle_tensorflow_dataset"], [46, 1, 1, "", "value_counts"], [46, 1, 1, "", "value_counts_fill_missing_classes"]], "cleanlab.internal.validation": [[47, 1, 1, "", "assert_indexing_works"], [47, 1, 1, "", "assert_nonempty_input"], [47, 1, 1, "", "assert_valid_class_labels"], [47, 1, 1, "", "assert_valid_inputs"], [47, 1, 1, "", "labels_to_array"], [47, 1, 1, "", "labels_to_list_multilabel"]], "cleanlab.models": [[50, 0, 0, "-", "keras"]], "cleanlab.models.keras": [[50, 2, 1, "", "KerasWrapperModel"], [50, 2, 1, "", "KerasWrapperSequential"]], "cleanlab.models.keras.KerasWrapperModel": [[50, 3, 1, "", "fit"], [50, 3, 1, "", "get_params"], [50, 3, 1, "", "predict"], [50, 3, 1, "", "predict_proba"], [50, 3, 1, "", "set_params"], [50, 3, 1, "", "summary"]], "cleanlab.models.keras.KerasWrapperSequential": [[50, 3, 1, "", "fit"], [50, 3, 1, "", "get_params"], [50, 3, 1, "", "predict"], [50, 3, 1, "", "predict_proba"], [50, 3, 1, "", "set_params"], [50, 3, 1, "", "summary"]], "cleanlab.multiannotator": [[51, 1, 1, "", "convert_long_to_wide_dataset"], [51, 1, 1, "", "get_active_learning_scores"], [51, 1, 1, "", "get_active_learning_scores_ensemble"], [51, 1, 1, "", "get_label_quality_multiannotator"], [51, 1, 1, "", "get_label_quality_multiannotator_ensemble"], [51, 1, 1, "", "get_majority_vote_label"]], "cleanlab.multilabel_classification": [[52, 0, 0, "-", "dataset"], [53, 0, 0, "-", "filter"], [55, 0, 0, "-", "rank"]], "cleanlab.multilabel_classification.dataset": [[52, 1, 1, "", "common_multilabel_issues"], [52, 1, 1, "", "multilabel_health_summary"], [52, 1, 1, "", "overall_multilabel_health_score"], [52, 1, 1, "", "rank_classes_by_multilabel_quality"]], "cleanlab.multilabel_classification.filter": [[53, 1, 1, "", "find_label_issues"], [53, 1, 1, "", "find_multilabel_issues_per_class"]], "cleanlab.multilabel_classification.rank": [[55, 1, 1, "", "get_label_quality_scores"], [55, 1, 1, "", "get_label_quality_scores_per_class"]], "cleanlab.object_detection": [[56, 0, 0, "-", "filter"], [58, 0, 0, "-", "rank"], [59, 0, 0, "-", "summary"]], "cleanlab.object_detection.filter": [[56, 1, 1, "", "find_label_issues"]], "cleanlab.object_detection.rank": [[58, 1, 1, "", "compute_badloc_box_scores"], [58, 1, 1, "", "compute_overlooked_box_scores"], [58, 1, 1, "", "compute_swap_box_scores"], [58, 1, 1, "", "get_label_quality_scores"], [58, 1, 1, "", "issues_from_scores"], [58, 1, 1, "", "pool_box_scores_per_image"]], "cleanlab.object_detection.summary": [[59, 1, 1, "", "bounding_box_size_distribution"], [59, 1, 1, "", "calculate_per_class_metrics"], [59, 1, 1, "", "class_label_distribution"], [59, 1, 1, "", "get_average_per_class_confusion_matrix"], [59, 1, 1, "", "get_sorted_bbox_count_idxs"], [59, 1, 1, "", "object_counts_per_image"], [59, 1, 1, "", "plot_class_distribution"], [59, 1, 1, "", "plot_class_size_distributions"], [59, 1, 1, "", "visualize"]], "cleanlab.outlier": [[60, 2, 1, "", "OutOfDistribution"]], "cleanlab.outlier.OutOfDistribution": [[60, 3, 1, "", "fit"], [60, 3, 1, "", "fit_score"], [60, 3, 1, "", "score"]], "cleanlab.rank": [[61, 1, 1, "", "find_top_issues"], [61, 1, 1, "", "get_confidence_weighted_entropy_for_each_label"], [61, 1, 1, "", "get_label_quality_ensemble_scores"], [61, 1, 1, "", "get_label_quality_scores"], [61, 1, 1, "", "get_normalized_margin_for_each_label"], [61, 1, 1, "", "get_self_confidence_for_each_label"], [61, 1, 1, "", "order_label_issues"]], "cleanlab.regression": [[63, 0, 0, "-", "learn"], [64, 0, 0, "-", "rank"]], "cleanlab.regression.learn": [[63, 2, 1, "", "CleanLearning"]], "cleanlab.regression.learn.CleanLearning": [[63, 3, 1, "", "__init_subclass__"], [63, 3, 1, "", "find_label_issues"], [63, 3, 1, "", "fit"], [63, 3, 1, "", "get_aleatoric_uncertainty"], [63, 3, 1, "", "get_epistemic_uncertainty"], [63, 3, 1, "", "get_label_issues"], [63, 3, 1, "", "get_metadata_routing"], [63, 3, 1, "", "get_params"], [63, 3, 1, "", "predict"], [63, 3, 1, "", "save_space"], [63, 3, 1, "", "score"], [63, 3, 1, "", "set_fit_request"], [63, 3, 1, "", "set_params"], [63, 3, 1, "", "set_score_request"]], "cleanlab.regression.rank": [[64, 1, 1, "", "get_label_quality_scores"]], "cleanlab.segmentation": [[65, 0, 0, "-", "filter"], [67, 0, 0, "-", "rank"], [68, 0, 0, "-", "summary"]], "cleanlab.segmentation.filter": [[65, 1, 1, "", "find_label_issues"]], "cleanlab.segmentation.rank": [[67, 1, 1, "", "get_label_quality_scores"], [67, 1, 1, "", "issues_from_scores"]], "cleanlab.segmentation.summary": [[68, 1, 1, "", "common_label_issues"], [68, 1, 1, "", "display_issues"], [68, 1, 1, "", "filter_by_class"]], "cleanlab.token_classification": [[69, 0, 0, "-", "filter"], [71, 0, 0, "-", "rank"], [72, 0, 0, "-", "summary"]], "cleanlab.token_classification.filter": [[69, 1, 1, "", "find_label_issues"]], "cleanlab.token_classification.rank": [[71, 1, 1, "", "get_label_quality_scores"], [71, 1, 1, "", "issues_from_scores"]], "cleanlab.token_classification.summary": [[72, 1, 1, "", "common_label_issues"], [72, 1, 1, "", "display_issues"], [72, 1, 1, "", "filter_by_token"]]}, "objtypes": {"0": "py:module", "1": "py:function", "2": "py:class", "3": "py:method", "4": "py:property", "5": "py:exception", "6": "py:attribute", "7": "py:data"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "function", "Python function"], "2": ["py", "class", "Python class"], "3": ["py", "method", "Python method"], "4": ["py", "property", "Python property"], "5": ["py", "exception", "Python exception"], "6": ["py", "attribute", "Python attribute"], "7": ["py", "data", "Python data"]}, "titleterms": {"benchmark": 0, "noise_gener": 1, "classif": [2, 75, 79, 80, 82, 83, 84, 87, 93, 94, 95], "count": [3, 84], "datalab": [4, 5, 7, 8, 9, 76, 77, 78, 79, 80, 84], "creat": [5, 76, 77, 84, 86], "your": [5, 73, 76, 77, 80, 82, 84], "own": 5, "issu": [5, 7, 8, 19, 26, 73, 75, 76, 77, 79, 80, 81, 82, 83, 84, 87, 88, 92, 93, 95], "manag": [5, 19], "prerequisit": 5, "implement": 5, "issuemanag": [5, 76], "basic": 5, "check": 5, "intermedi": 5, "advanc": [5, 76], "us": [5, 75, 77, 79, 80, 82, 83, 84, 86, 87, 88, 89, 91, 92, 93, 94, 95], "gener": 6, "cluster": [6, 82], "id": 6, "guid": [7, 9], "type": [7, 8, 84], "custom": [7, 76], "can": [8, 77, 81, 82, 84, 86], "detect": [8, 77, 79, 80, 82, 84, 88, 89], "estim": [8, 84, 86], "each": 8, "label": [8, 21, 26, 73, 75, 77, 79, 80, 82, 83, 84, 86, 87, 88, 91, 92, 93, 94, 95], "outlier": [8, 24, 44, 60, 79, 80, 83, 89], "Near": [8, 77, 79, 80, 83], "duplic": [8, 17, 77, 79, 80, 82, 83], "non": [8, 80], "iid": [8, 80], "class": [8, 74, 84, 92], "imbal": [8, 18], "imag": [8, 83, 89], "specif": [8, 19, 92], "underperform": [8, 82], "group": [8, 82], "null": [8, 23], "data": [8, 10, 73, 75, 76, 77, 79, 80, 81, 82, 84, 86, 87, 88, 89, 91, 92, 93, 95], "valuat": 8, "option": 8, "paramet": [8, 84], "get": [9, 76, 77, 86, 87, 88, 92, 95], "start": [9, 81], "api": 9, "refer": 9, "data_issu": 11, "factori": 12, "intern": [13, 38], "issue_find": 14, "data_valu": 16, "issue_manag": [19, 20], "regist": 19, "unregist": 19, "ml": [19, 82, 84], "task": [19, 29], "noniid": 22, "regress": [25, 62, 63, 64, 82, 91], "prioriti": 26, "order": 26, "find": [26, 73, 75, 77, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 91, 92, 93, 94, 95], "underperforming_group": 27, "report": [28, 83], "dataset": [31, 52, 73, 77, 80, 81, 82, 83, 84, 87, 88, 89, 91, 92, 94, 95], "cifar_cnn": 32, "coteach": 33, "experiment": 34, "label_issues_batch": 35, "mnist_pytorch": 36, "filter": [37, 53, 56, 65, 69, 84], "label_quality_util": 39, "latent_algebra": 40, "multiannotator_util": 41, "multilabel_scor": 42, "multilabel_util": 43, "token_classification_util": 45, "util": 46, "valid": [47, 83, 90], "fasttext": 48, "model": [49, 73, 75, 79, 80, 82, 83, 84, 86, 87, 88, 89, 91, 93, 94], "kera": 50, "multiannot": [51, 86], "multilabel_classif": 54, "rank": [55, 58, 61, 64, 67, 71, 84], "object_detect": 57, "summari": [59, 68, 72], "learn": [63, 77, 82, 84, 93], "segment": [66, 92], "token_classif": [70, 95], "cleanlab": [73, 75, 79, 80, 82, 83, 84, 86, 87, 88, 89, 91, 92, 93, 94, 95], "open": [73, 82], "sourc": [73, 82], "document": 73, "quickstart": 73, "1": [73, 74, 75, 76, 77, 79, 80, 83, 84, 86, 87, 88, 89, 91, 92, 93, 94, 95], "instal": [73, 75, 76, 77, 79, 80, 81, 83, 84, 86, 87, 88, 89, 91, 92, 93, 94, 95], "2": [73, 74, 75, 76, 77, 79, 80, 83, 84, 86, 87, 88, 89, 91, 92, 93, 94, 95], "common": [73, 74, 95], "3": [73, 75, 76, 77, 79, 80, 83, 84, 86, 87, 88, 89, 91, 92, 93, 94, 95], "handl": [73, 82], "error": [73, 82, 83, 84, 86, 87, 88, 91, 92, 94, 95], "train": [73, 75, 82, 89, 91, 93, 94], "robust": [73, 84, 91, 93, 94], "noisi": [73, 84, 91, 93, 94], "4": [73, 75, 76, 77, 79, 80, 83, 84, 86, 88, 89, 91, 93, 94], "curat": [73, 81], "fix": [73, 82], "level": [73, 81, 84, 95], "5": [73, 75, 77, 79, 83, 84, 86, 91, 93], "improv": [73, 86], "via": [73, 84, 86], "mani": [73, 84], "other": [73, 86, 88, 91], "techniqu": 73, "contribut": 73, "easi": [73, 79, 80, 83], "mode": [73, 79, 80, 83], "how": [74, 82, 84, 86, 87, 95], "migrat": 74, "version": 74, "0": 74, "from": [74, 76, 77, 84, 91, 93, 94], "pre": [74, 75, 82, 89], "function": [74, 76], "name": 74, "chang": 74, "modul": [74, 84], "new": 74, "remov": 74, "argument": [74, 76], "variabl": 74, "audio": 75, "speechbrain": 75, "depend": [75, 76, 77, 79, 80, 81, 83, 84, 86, 87, 88, 89, 91, 92, 93, 94, 95], "import": [75, 76, 77, 81, 83, 84, 86], "them": [75, 81, 84], "load": [75, 76, 77, 79, 80, 91, 93, 94], "featur": [75, 83, 89], "fit": 75, "linear": 75, "comput": [75, 79, 80, 82, 83, 86, 90, 93], "out": [75, 76, 77, 79, 80, 83, 86, 90, 93], "sampl": [75, 76, 77, 79, 80, 83, 86, 90, 93], "predict": [75, 76, 77, 79, 80, 83, 86, 87, 88, 90, 93], "probabl": [75, 76, 77, 79, 80, 83, 86, 90, 93], "workflow": [76, 84], "audit": [76, 77], "requir": [76, 77, 79, 80, 83, 86, 87, 88, 89, 91, 92, 93, 94, 95], "classifi": [76, 77], "instanti": 76, "object": [76, 88], "increment": 76, "search": 76, "specifi": [76, 82], "nondefault": 76, "save": 76, "ad": 76, "A": 77, "unifi": 77, "all": [77, 84], "kind": [77, 88], "skip": [77, 81, 84, 86], "detail": [77, 81, 84, 86], "more": [77, 84, 91, 93, 94], "about": 77, "addit": 77, "inform": [77, 83], "tutori": [78, 81, 85], "tabular": [79, 93], "numer": 79, "categor": 79, "column": 79, "process": [79, 89, 91, 93], "select": [79, 93], "construct": 79, "k": [79, 83, 90], "nearest": 79, "neighbour": 79, "graph": 79, "text": [80, 94, 95], "format": [80, 82, 87, 88, 94], "defin": [80, 83, 91, 94], "drift": 80, "fetch": [81, 83], "evalu": 81, "health": [81, 84], "8": [81, 84], "popular": 81, "faq": 82, "what": [82, 84, 90], "do": [82, 84], "i": [82, 84, 90], "infer": 82, "correct": 82, "exampl": [82, 83, 84, 89], "ha": 82, "flag": 82, "should": 82, "v": 82, "test": [82, 84, 89], "big": 82, "limit": 82, "memori": 82, "why": 82, "isn": 82, "t": 82, "cleanlearn": [82, 84], "work": [82, 84, 86, 95], "me": 82, "differ": [82, 88], "clean": [82, 84], "final": 82, "hyperparamet": 82, "tune": 82, "onli": 82, "one": [82, 84, 87, 92], "doe": [82, 86, 95], "take": 82, "so": 82, "long": 82, "slice": 82, "when": [82, 84], "identifi": [82, 88], "run": 82, "licens": 82, "under": 82, "an": 82, "answer": 82, "question": 82, "pytorch": [83, 89], "normal": 83, "fashion": 83, "mnist": 83, "prepar": 83, "fold": [83, 90], "cross": [83, 90], "embed": [83, 89], "7": [83, 84], "view": 83, "most": [83, 95], "like": 83, "sever": 83, "set": [83, 84], "dark": 83, "top": [83, 92], "low": 83, "The": 84, "centric": 84, "ai": 84, "machin": 84, "find_label_issu": 84, "line": 84, "code": 84, "visual": [84, 88, 89, 92], "twenti": 84, "lowest": 84, "qualiti": [84, 86, 87, 88, 92, 95], "see": 84, "now": 84, "let": 84, "": 84, "happen": 84, "we": 84, "merg": 84, "seafoam": 84, "green": 84, "yellow": 84, "too": 84, "you": 84, "re": 84, "6": 84, "One": 84, "score": [84, 86, 87, 88, 92, 95], "rule": 84, "overal": [84, 92], "accur": 84, "thi": 84, "directli": 84, "fulli": 84, "character": 84, "nois": 84, "matrix": [84, 87], "joint": 84, "prior": 84, "true": 84, "distribut": 84, "flip": 84, "rate": 84, "ani": 84, "again": 84, "support": 84, "lot": 84, "method": 84, "filter_bi": 84, "automat": 84, "everi": 84, "uniqu": 84, "num_label_issu": 84, "threshold": 84, "found": 84, "Not": 84, "sure": 84, "ensembl": 84, "multipl": [84, 86], "predictor": 84, "consensu": 86, "annot": 86, "initi": 86, "major": 86, "vote": 86, "better": 86, "statist": 86, "compar": 86, "inspect": 86, "potenti": [86, 91, 94], "retrain": 86, "further": 86, "multi": 87, "given": 87, "hot": 87, "binari": 87, "download": [88, 92, 95], "objectlab": 88, "exploratori": 88, "analysi": 88, "timm": 89, "cifar10": 89, "some": 89, "pred_prob": [89, 92, 95], "wai": 91, "semant": 92, "which": 92, "ar": 92, "commonli": 92, "mislabel": [92, 95], "focus": 92, "scikit": 93, "token": 95, "word": 95, "sentenc": 95, "contain": 95, "particular": 95}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "nbsphinx": 4, "sphinx.ext.viewcode": 1, "sphinx.ext.todo": 2, "sphinx": 58}, "alltitles": {"benchmarking": [[0, "module-cleanlab.benchmarking"]], "noise_generation": [[1, "module-cleanlab.benchmarking.noise_generation"]], "classification": [[2, "module-cleanlab.classification"]], "count": [[3, "module-cleanlab.count"]], "datalab": [[4, "module-cleanlab.datalab.datalab"], [9, "module-cleanlab.datalab"]], "Creating Your Own Issues Manager": [[5, "creating-your-own-issues-manager"]], "Prerequisites": [[5, "prerequisites"]], "Implementing IssueManagers": [[5, "implementing-issuemanagers"]], "Basic Issue Check": [[5, "basic-issue-check"]], "Intermediate Issue Check": [[5, "intermediate-issue-check"]], "Advanced Issue Check": [[5, "advanced-issue-check"]], "Use with Datalab": [[5, "use-with-datalab"]], "Generating Cluster IDs": [[6, "generating-cluster-ids"]], "Datalab guides": [[7, "datalab-guides"]], "Types of issues": [[7, "types-of-issues"]], "Customizing issue types": [[7, "customizing-issue-types"]], "Datalab Issue Types": [[8, "datalab-issue-types"]], "Types of issues Datalab can detect": [[8, "types-of-issues-datalab-can-detect"]], "Estimates for Each Issue Type": [[8, "estimates-for-each-issue-type"]], "Label Issue": [[8, "label-issue"]], "Outlier Issue": [[8, "outlier-issue"]], "(Near) Duplicate Issue": [[8, "near-duplicate-issue"]], "Non-IID Issue": [[8, "non-iid-issue"]], "Class Imbalance Issue": [[8, "class-imbalance-issue"]], "Image-specific Issues": [[8, "image-specific-issues"]], "Underperforming Group Issue": [[8, "underperforming-group-issue"]], "Null Issue": [[8, "null-issue"]], "Data Valuation Issue": [[8, "data-valuation-issue"]], "Optional Issue Parameters": [[8, "optional-issue-parameters"]], "Label Issue Parameters": [[8, "label-issue-parameters"]], "Outlier Issue Parameters": [[8, "outlier-issue-parameters"]], "Duplicate Issue Parameters": [[8, "duplicate-issue-parameters"]], "Non-IID Issue Parameters": [[8, "non-iid-issue-parameters"]], "Imbalance Issue Parameters": [[8, "imbalance-issue-parameters"]], "Underperforming Group Issue Parameters": [[8, "underperforming-group-issue-parameters"]], "Null Issue Parameters": [[8, "null-issue-parameters"]], "Data Valuation Issue Parameters": [[8, "data-valuation-issue-parameters"]], "Image Issue Parameters": [[8, "image-issue-parameters"]], "Getting Started": [[9, "getting-started"]], "Guides": [[9, "guides"]], "API Reference": [[9, "api-reference"]], "data": [[10, "module-cleanlab.datalab.internal.data"]], "data_issues": [[11, "module-cleanlab.datalab.internal.data_issues"]], "factory": [[12, "module-cleanlab.datalab.internal.issue_manager_factory"]], "internal": [[13, "internal"], [38, "internal"]], "issue_finder": [[14, "issue-finder"]], "data_valuation": [[16, "data-valuation"]], "duplicate": [[17, "module-cleanlab.datalab.internal.issue_manager.duplicate"]], "imbalance": [[18, "module-cleanlab.datalab.internal.issue_manager.imbalance"]], "issue_manager": [[19, "issue-manager"], [20, "module-cleanlab.datalab.internal.issue_manager.issue_manager"]], "Registered issue managers": [[19, "registered-issue-managers"]], "Unregistered issue managers": [[19, "unregistered-issue-managers"]], "ML task-specific issue managers": [[19, "ml-task-specific-issue-managers"]], "label": [[21, "module-cleanlab.datalab.internal.issue_manager.label"], [26, "module-cleanlab.datalab.internal.issue_manager.regression.label"]], "noniid": [[22, "module-cleanlab.datalab.internal.issue_manager.noniid"]], "null": [[23, "null"]], "outlier": [[24, "module-cleanlab.datalab.internal.issue_manager.outlier"], [44, "module-cleanlab.internal.outlier"], [60, "module-cleanlab.outlier"]], "regression": [[25, "regression"], [62, "regression"]], "Priority Order for finding issues:": [[26, null]], "underperforming_group": [[27, "underperforming-group"]], "report": [[28, "report"]], "task": [[29, "task"]], "dataset": [[31, "module-cleanlab.dataset"], [52, "module-cleanlab.multilabel_classification.dataset"]], "cifar_cnn": [[32, "module-cleanlab.experimental.cifar_cnn"]], "coteaching": [[33, "module-cleanlab.experimental.coteaching"]], "experimental": [[34, "experimental"]], "label_issues_batched": [[35, "module-cleanlab.experimental.label_issues_batched"]], "mnist_pytorch": [[36, "module-cleanlab.experimental.mnist_pytorch"]], "filter": [[37, "module-cleanlab.filter"], [53, "module-cleanlab.multilabel_classification.filter"], [56, "filter"], [65, "filter"], [69, "module-cleanlab.token_classification.filter"]], "label_quality_utils": [[39, "module-cleanlab.internal.label_quality_utils"]], "latent_algebra": [[40, "module-cleanlab.internal.latent_algebra"]], "multiannotator_utils": [[41, "module-cleanlab.internal.multiannotator_utils"]], "multilabel_scorer": [[42, "module-cleanlab.internal.multilabel_scorer"]], "multilabel_utils": [[43, "module-cleanlab.internal.multilabel_utils"]], "token_classification_utils": [[45, "module-cleanlab.internal.token_classification_utils"]], "util": [[46, "module-cleanlab.internal.util"]], "validation": [[47, "module-cleanlab.internal.validation"]], "fasttext": [[48, "fasttext"]], "models": [[49, "models"]], "keras": [[50, "module-cleanlab.models.keras"]], "multiannotator": [[51, "module-cleanlab.multiannotator"]], "multilabel_classification": [[54, "multilabel-classification"]], "rank": [[55, "module-cleanlab.multilabel_classification.rank"], [58, "module-cleanlab.object_detection.rank"], [61, "module-cleanlab.rank"], [67, "module-cleanlab.segmentation.rank"], [71, "module-cleanlab.token_classification.rank"]], "object_detection": [[57, "object-detection"]], "summary": [[59, "summary"], [68, "module-cleanlab.segmentation.summary"], [72, "module-cleanlab.token_classification.summary"]], "regression.learn": [[63, "module-cleanlab.regression.learn"]], "regression.rank": [[64, "module-cleanlab.regression.rank"]], "segmentation": [[66, "segmentation"]], "token_classification": [[70, "token-classification"]], "cleanlab open-source documentation": [[73, "cleanlab-open-source-documentation"]], "Quickstart": [[73, "quickstart"]], "1. Install cleanlab": [[73, "install-cleanlab"]], "2. Find common issues in your data": [[73, "find-common-issues-in-your-data"]], "3. Handle label errors and train robust models with noisy labels": [[73, "handle-label-errors-and-train-robust-models-with-noisy-labels"]], "4. Dataset curation: fix dataset-level issues": [[73, "dataset-curation-fix-dataset-level-issues"]], "5. Improve your data via many other techniques": [[73, "improve-your-data-via-many-other-techniques"]], "Contributing": [[73, "contributing"]], "Easy Mode": [[73, "easy-mode"], [79, "Easy-Mode"], [80, "Easy-Mode"], [83, "Easy-Mode"]], "How to migrate to versions >= 2.0.0 from pre 1.0.1": [[74, "how-to-migrate-to-versions-2-0-0-from-pre-1-0-1"]], "Function and class name changes": [[74, "function-and-class-name-changes"]], "Module name changes": [[74, "module-name-changes"]], "New modules": [[74, "new-modules"]], "Removed modules": [[74, "removed-modules"]], "Common argument and variable name changes": [[74, "common-argument-and-variable-name-changes"]], "Audio Classification with SpeechBrain and Cleanlab": [[75, "Audio-Classification-with-SpeechBrain-and-Cleanlab"]], "1. Install dependencies and import them": [[75, "1.-Install-dependencies-and-import-them"]], "2. Load the data": [[75, "2.-Load-the-data"]], "3. Use pre-trained SpeechBrain model to featurize audio": [[75, "3.-Use-pre-trained-SpeechBrain-model-to-featurize-audio"]], "4. Fit linear model and compute out-of-sample predicted probabilities": [[75, "4.-Fit-linear-model-and-compute-out-of-sample-predicted-probabilities"]], "5. Use cleanlab to find label issues": [[75, "5.-Use-cleanlab-to-find-label-issues"], [79, "5.-Use-cleanlab-to-find-label-issues"]], "Datalab: Advanced workflows to audit your data": [[76, "Datalab:-Advanced-workflows-to-audit-your-data"]], "Install and import required dependencies": [[76, "Install-and-import-required-dependencies"]], "Create and load the data": [[76, "Create-and-load-the-data"]], "Get out-of-sample predicted probabilities from a classifier": [[76, "Get-out-of-sample-predicted-probabilities-from-a-classifier"]], "Instantiate Datalab object": [[76, "Instantiate-Datalab-object"]], "Functionality 1: Incremental issue search": [[76, "Functionality-1:-Incremental-issue-search"]], "Functionality 2: Specifying nondefault arguments": [[76, "Functionality-2:-Specifying-nondefault-arguments"]], "Functionality 3: Save and load Datalab objects": [[76, "Functionality-3:-Save-and-load-Datalab-objects"]], "Functionality 4: Adding a custom IssueManager": [[76, "Functionality-4:-Adding-a-custom-IssueManager"]], "Datalab: A unified audit to detect all kinds of issues in data and labels": [[77, "Datalab:-A-unified-audit-to-detect-all-kinds-of-issues-in-data-and-labels"]], "1. Install and import required dependencies": [[77, "1.-Install-and-import-required-dependencies"], [83, "1.-Install-and-import-required-dependencies"], [86, "1.-Install-and-import-required-dependencies"]], "2. Create and load the data (can skip these details)": [[77, "2.-Create-and-load-the-data-(can-skip-these-details)"]], "3. Get out-of-sample predicted probabilities from a classifier": [[77, "3.-Get-out-of-sample-predicted-probabilities-from-a-classifier"]], "4. Use Datalab to find issues in the dataset": [[77, "4.-Use-Datalab-to-find-issues-in-the-dataset"]], "5. Learn more about the issues in your dataset": [[77, "5.-Learn-more-about-the-issues-in-your-dataset"]], "Get additional information": [[77, "Get-additional-information"]], "Near duplicate issues": [[77, "Near-duplicate-issues"], [83, "Near-duplicate-issues"]], "Datalab Tutorials": [[78, "datalab-tutorials"]], "Detecting Issues in Tabular Data\u00a0(Numeric/Categorical columns) with Datalab": [[79, "Detecting-Issues-in-Tabular-Data\u00a0(Numeric/Categorical-columns)-with-Datalab"]], "1. Install required dependencies": [[79, "1.-Install-required-dependencies"], [80, "1.-Install-required-dependencies"], [91, "1.-Install-required-dependencies"], [93, "1.-Install-required-dependencies"], [94, "1.-Install-required-dependencies"]], "2. Load and process the data": [[79, "2.-Load-and-process-the-data"], [91, "2.-Load-and-process-the-data"], [93, "2.-Load-and-process-the-data"]], "3. Select a classification model and compute out-of-sample predicted probabilities": [[79, "3.-Select-a-classification-model-and-compute-out-of-sample-predicted-probabilities"], [93, "3.-Select-a-classification-model-and-compute-out-of-sample-predicted-probabilities"]], "4. Construct K nearest neighbours graph": [[79, "4.-Construct-K-nearest-neighbours-graph"]], "Label issues": [[79, "Label-issues"], [80, "Label-issues"], [83, "Label-issues"]], "Outlier issues": [[79, "Outlier-issues"], [80, "Outlier-issues"], [83, "Outlier-issues"]], "Near-duplicate issues": [[79, "Near-duplicate-issues"], [80, "Near-duplicate-issues"]], "Detecting Issues in a Text Dataset with Datalab": [[80, "Detecting-Issues-in-a-Text-Dataset-with-Datalab"]], "2. Load and format the text dataset": [[80, "2.-Load-and-format-the-text-dataset"], [94, "2.-Load-and-format-the-text-dataset"]], "3. Define a classification model and compute out-of-sample predicted probabilities": [[80, "3.-Define-a-classification-model-and-compute-out-of-sample-predicted-probabilities"]], "4. Use cleanlab to find issues in your dataset": [[80, "4.-Use-cleanlab-to-find-issues-in-your-dataset"]], "Non-IID issues (data drift)": [[80, "Non-IID-issues-(data-drift)"]], "Find Dataset-level Issues for Dataset Curation": [[81, "Find-Dataset-level-Issues-for-Dataset-Curation"]], "Install dependencies and import them": [[81, "Install-dependencies-and-import-them"], [84, "Install-dependencies-and-import-them"]], "Fetch the data (can skip these details)": [[81, "Fetch-the-data-(can-skip-these-details)"]], "Start of tutorial: Evaluate the health of 8 popular datasets": [[81, "Start-of-tutorial:-Evaluate-the-health-of-8-popular-datasets"]], "FAQ": [[82, "FAQ"]], "What data can cleanlab detect issues in?": [[82, "What-data-can-cleanlab-detect-issues-in?"]], "How do I format classification labels for cleanlab?": [[82, "How-do-I-format-classification-labels-for-cleanlab?"]], "How do I infer the correct labels for examples cleanlab has flagged?": [[82, "How-do-I-infer-the-correct-labels-for-examples-cleanlab-has-flagged?"]], "How should I handle label errors in train vs. test data?": [[82, "How-should-I-handle-label-errors-in-train-vs.-test-data?"]], "How can I find label issues in big datasets with limited memory?": [[82, "How-can-I-find-label-issues-in-big-datasets-with-limited-memory?"]], "Why isn\u2019t CleanLearning working for me?": [[82, "Why-isn\u2019t-CleanLearning-working-for-me?"]], "How can I use different models for data cleaning vs. final training in CleanLearning?": [[82, "How-can-I-use-different-models-for-data-cleaning-vs.-final-training-in-CleanLearning?"]], "How do I hyperparameter tune only the final model trained (and not the one finding label issues) in CleanLearning?": [[82, "How-do-I-hyperparameter-tune-only-the-final-model-trained-(and-not-the-one-finding-label-issues)-in-CleanLearning?"]], "Why does regression.learn.CleanLearning take so long?": [[82, "Why-does-regression.learn.CleanLearning-take-so-long?"]], "How do I specify pre-computed data slices/clusters when detecting the Underperforming Group Issue?": [[82, "How-do-I-specify-pre-computed-data-slices/clusters-when-detecting-the-Underperforming-Group-Issue?"]], "How to handle near-duplicate data identified by cleanlab?": [[82, "How-to-handle-near-duplicate-data-identified-by-cleanlab?"]], "What ML models should I run cleanlab with? How do I fix the issues cleanlab has identified?": [[82, "What-ML-models-should-I-run-cleanlab-with?-How-do-I-fix-the-issues-cleanlab-has-identified?"]], "What license is cleanlab open-sourced under?": [[82, "What-license-is-cleanlab-open-sourced-under?"]], "Can\u2019t find an answer to your question?": [[82, "Can't-find-an-answer-to-your-question?"]], "Image Classification with PyTorch and Cleanlab": [[83, "Image-Classification-with-PyTorch-and-Cleanlab"]], "2. Fetch and normalize the Fashion-MNIST dataset": [[83, "2.-Fetch-and-normalize-the-Fashion-MNIST-dataset"]], "3. Define a classification model": [[83, "3.-Define-a-classification-model"]], "4. Prepare the dataset for K-fold cross-validation": [[83, "4.-Prepare-the-dataset-for-K-fold-cross-validation"]], "5. Compute out-of-sample predicted probabilities and feature embeddings": [[83, "5.-Compute-out-of-sample-predicted-probabilities-and-feature-embeddings"]], "7. Use cleanlab to find issues": [[83, "7.-Use-cleanlab-to-find-issues"]], "View report": [[83, "View-report"]], "View most likely examples with label errors": [[83, "View-most-likely-examples-with-label-errors"]], "View most severe outliers": [[83, "View-most-severe-outliers"]], "View sets of near duplicate images": [[83, "View-sets-of-near-duplicate-images"]], "Dark images": [[83, "Dark-images"]], "View top examples of dark images": [[83, "View-top-examples-of-dark-images"]], "Low information images": [[83, "Low-information-images"]], "The Workflows of Data-centric AI for Classification with Noisy Labels": [[84, "The-Workflows-of-Data-centric-AI-for-Classification-with-Noisy-Labels"]], "Create the data (can skip these details)": [[84, "Create-the-data-(can-skip-these-details)"]], "Workflow 1: Use Datalab to detect many types of issues": [[84, "Workflow-1:-Use-Datalab-to-detect-many-types-of-issues"]], "Workflow 2: Use CleanLearning for more robust Machine Learning": [[84, "Workflow-2:-Use-CleanLearning-for-more-robust-Machine-Learning"]], "Clean Learning = Machine Learning with cleaned data": [[84, "Clean-Learning-=-Machine-Learning-with-cleaned-data"]], "Workflow 3: Use CleanLearning to find_label_issues in one line of code": [[84, "Workflow-3:-Use-CleanLearning-to-find_label_issues-in-one-line-of-code"]], "Visualize the twenty examples with lowest label quality to see if Cleanlab works.": [[84, "Visualize-the-twenty-examples-with-lowest-label-quality-to-see-if-Cleanlab-works."]], "Workflow 4: Use cleanlab to find dataset-level and class-level issues": [[84, "Workflow-4:-Use-cleanlab-to-find-dataset-level-and-class-level-issues"]], "Now, let\u2019s see what happens if we merge classes \u201cseafoam green\u201d and \u201cyellow\u201d": [[84, "Now,-let's-see-what-happens-if-we-merge-classes-%22seafoam-green%22-and-%22yellow%22"]], "Workflow 5: Clean your test set too if you\u2019re doing ML with noisy labels!": [[84, "Workflow-5:-Clean-your-test-set-too-if-you're-doing-ML-with-noisy-labels!"]], "Workflow 6: One score to rule them all \u2013 use cleanlab\u2019s overall dataset health score": [[84, "Workflow-6:-One-score-to-rule-them-all----use-cleanlab's-overall-dataset-health-score"]], "How accurate is this dataset health score?": [[84, "How-accurate-is-this-dataset-health-score?"]], "Workflow(s) 7: Use count, rank, filter modules directly": [[84, "Workflow(s)-7:-Use-count,-rank,-filter-modules-directly"]], "Workflow 7.1 (count): Fully characterize label noise (noise matrix, joint, prior of true labels, \u2026)": [[84, "Workflow-7.1-(count):-Fully-characterize-label-noise-(noise-matrix,-joint,-prior-of-true-labels,-...)"]], "Use cleanlab to estimate and visualize the joint distribution of label noise and noise matrix of label flipping rates:": [[84, "Use-cleanlab-to-estimate-and-visualize-the-joint-distribution-of-label-noise-and-noise-matrix-of-label-flipping-rates:"]], "Workflow 7.2 (filter): Find label issues for any dataset and any model in one line of code": [[84, "Workflow-7.2-(filter):-Find-label-issues-for-any-dataset-and-any-model-in-one-line-of-code"]], "Again, we can visualize the twenty examples with lowest label quality to see if Cleanlab works.": [[84, "Again,-we-can-visualize-the-twenty-examples-with-lowest-label-quality-to-see-if-Cleanlab-works."]], "Workflow 7.2 supports lots of methods to find_label_issues() via the filter_by parameter.": [[84, "Workflow-7.2-supports-lots-of-methods-to-find_label_issues()-via-the-filter_by-parameter."]], "Workflow 7.3 (rank): Automatically rank every example by a unique label quality score. Find errors using cleanlab.count.num_label_issues as a threshold.": [[84, "Workflow-7.3-(rank):-Automatically-rank-every-example-by-a-unique-label-quality-score.-Find-errors-using-cleanlab.count.num_label_issues-as-a-threshold."]], "Again, we can visualize the label issues found to see if Cleanlab works.": [[84, "Again,-we-can-visualize-the-label-issues-found-to-see-if-Cleanlab-works."]], "Not sure when to use Workflow 7.2 or 7.3 to find label issues?": [[84, "Not-sure-when-to-use-Workflow-7.2-or-7.3-to-find-label-issues?"]], "Workflow 8: Ensembling label quality scores from multiple predictors": [[84, "Workflow-8:-Ensembling-label-quality-scores-from-multiple-predictors"]], "Tutorials": [[85, "tutorials"]], "Estimate Consensus and Annotator Quality for Data Labeled by Multiple Annotators": [[86, "Estimate-Consensus-and-Annotator-Quality-for-Data-Labeled-by-Multiple-Annotators"]], "2. Create the data (can skip these details)": [[86, "2.-Create-the-data-(can-skip-these-details)"]], "3. Get initial consensus labels via majority vote and compute out-of-sample predicted probabilities": [[86, "3.-Get-initial-consensus-labels-via-majority-vote-and-compute-out-of-sample-predicted-probabilities"]], "4. Use cleanlab to get better consensus labels and other statistics": [[86, "4.-Use-cleanlab-to-get-better-consensus-labels-and-other-statistics"]], "Comparing improved consensus labels": [[86, "Comparing-improved-consensus-labels"]], "Inspecting consensus quality scores to find potential consensus label errors": [[86, "Inspecting-consensus-quality-scores-to-find-potential-consensus-label-errors"]], "5. Retrain model using improved consensus labels": [[86, "5.-Retrain-model-using-improved-consensus-labels"]], "Further improvements": [[86, "Further-improvements"]], "How does cleanlab.multiannotator work?": [[86, "How-does-cleanlab.multiannotator-work?"]], "Find Label Errors in Multi-Label Classification Datasets": [[87, "Find-Label-Errors-in-Multi-Label-Classification-Datasets"]], "1. Install required dependencies and get dataset": [[87, "1.-Install-required-dependencies-and-get-dataset"]], "2. Format data, labels, and model predictions": [[87, "2.-Format-data,-labels,-and-model-predictions"], [88, "2.-Format-data,-labels,-and-model-predictions"]], "3. Use cleanlab to find label issues": [[87, "3.-Use-cleanlab-to-find-label-issues"], [88, "3.-Use-cleanlab-to-find-label-issues"], [92, "3.-Use-cleanlab-to-find-label-issues"], [95, "3.-Use-cleanlab-to-find-label-issues"]], "Label quality scores": [[87, "Label-quality-scores"]], "How to format labels given as a one-hot (multi-hot) binary matrix?": [[87, "How-to-format-labels-given-as-a-one-hot-(multi-hot)-binary-matrix?"]], "Finding Label Errors in Object Detection Datasets": [[88, "Finding-Label-Errors-in-Object-Detection-Datasets"]], "1. Install required dependencies and download data": [[88, "1.-Install-required-dependencies-and-download-data"], [92, "1.-Install-required-dependencies-and-download-data"], [95, "1.-Install-required-dependencies-and-download-data"]], "Get label quality scores": [[88, "Get-label-quality-scores"], [92, "Get-label-quality-scores"]], "4. Use ObjectLab to visualize label issues": [[88, "4.-Use-ObjectLab-to-visualize-label-issues"]], "Different kinds of label issues identified by ObjectLab": [[88, "Different-kinds-of-label-issues-identified-by-ObjectLab"]], "Other uses of visualize": [[88, "Other-uses-of-visualize"]], "Exploratory data analysis": [[88, "Exploratory-data-analysis"]], "Detect Outliers with Cleanlab and PyTorch Image Models (timm)": [[89, "Detect-Outliers-with-Cleanlab-and-PyTorch-Image-Models-(timm)"]], "1. Install the required dependencies": [[89, "1.-Install-the-required-dependencies"]], "2. Pre-process the Cifar10 dataset": [[89, "2.-Pre-process-the-Cifar10-dataset"]], "Visualize some of the training and test examples": [[89, "Visualize-some-of-the-training-and-test-examples"]], "3. Use cleanlab and feature embeddings to find outliers in the data": [[89, "3.-Use-cleanlab-and-feature-embeddings-to-find-outliers-in-the-data"]], "4. Use cleanlab and pred_probs to find outliers in the data": [[89, "4.-Use-cleanlab-and-pred_probs-to-find-outliers-in-the-data"]], "Computing Out-of-Sample Predicted Probabilities with Cross-Validation": [[90, "computing-out-of-sample-predicted-probabilities-with-cross-validation"]], "Out-of-sample predicted probabilities?": [[90, "out-of-sample-predicted-probabilities"]], "What is K-fold cross-validation?": [[90, "what-is-k-fold-cross-validation"]], "Find Noisy Labels in Regression Datasets": [[91, "Find-Noisy-Labels-in-Regression-Datasets"]], "3. Define a regression model and use cleanlab to find potential label errors": [[91, "3.-Define-a-regression-model-and-use-cleanlab-to-find-potential-label-errors"]], "4. Train a more robust model from noisy labels": [[91, "4.-Train-a-more-robust-model-from-noisy-labels"], [94, "4.-Train-a-more-robust-model-from-noisy-labels"]], "5. Other ways to find noisy labels in regression datasets": [[91, "5.-Other-ways-to-find-noisy-labels-in-regression-datasets"]], "Find Label Errors in Semantic Segmentation Datasets": [[92, "Find-Label-Errors-in-Semantic-Segmentation-Datasets"]], "2. Get data, labels, and pred_probs": [[92, "2.-Get-data,-labels,-and-pred_probs"], [95, "2.-Get-data,-labels,-and-pred_probs"]], "Visualize top label issues": [[92, "Visualize-top-label-issues"]], "Classes which are commonly mislabeled overall": [[92, "Classes-which-are-commonly-mislabeled-overall"]], "Focusing on one specific class": [[92, "Focusing-on-one-specific-class"]], "Classification with Tabular Data using Scikit-Learn and Cleanlab": [[93, "Classification-with-Tabular-Data-using-Scikit-Learn-and-Cleanlab"]], "4. Use cleanlab to find label issues": [[93, "4.-Use-cleanlab-to-find-label-issues"]], "5. Train a more robust model from noisy labels": [[93, "5.-Train-a-more-robust-model-from-noisy-labels"]], "Text Classification with Noisy Labels": [[94, "Text-Classification-with-Noisy-Labels"]], "3. Define a classification model and use cleanlab to find potential label errors": [[94, "3.-Define-a-classification-model-and-use-cleanlab-to-find-potential-label-errors"]], "Find Label Errors in Token Classification (Text) Datasets": [[95, "Find-Label-Errors-in-Token-Classification-(Text)-Datasets"]], "Most common word-level token mislabels": [[95, "Most-common-word-level-token-mislabels"]], "Find sentences containing a particular mislabeled word": [[95, "Find-sentences-containing-a-particular-mislabeled-word"]], "Sentence label quality score": [[95, "Sentence-label-quality-score"]], "How does cleanlab.token_classification work?": [[95, "How-does-cleanlab.token_classification-work?"]]}, "indexentries": {"cleanlab.benchmarking": [[0, "module-cleanlab.benchmarking"]], "module": [[0, "module-cleanlab.benchmarking"], [1, "module-cleanlab.benchmarking.noise_generation"], [2, "module-cleanlab.classification"], [3, "module-cleanlab.count"], [4, "module-cleanlab.datalab.datalab"], [9, "module-cleanlab.datalab"], [10, "module-cleanlab.datalab.internal.data"], [11, "module-cleanlab.datalab.internal.data_issues"], [12, "module-cleanlab.datalab.internal.issue_manager_factory"], [13, "module-cleanlab.datalab.internal"], [14, "module-cleanlab.datalab.internal.issue_finder"], [16, "module-cleanlab.datalab.internal.issue_manager.data_valuation"], [17, "module-cleanlab.datalab.internal.issue_manager.duplicate"], [18, "module-cleanlab.datalab.internal.issue_manager.imbalance"], [20, "module-cleanlab.datalab.internal.issue_manager.issue_manager"], [21, "module-cleanlab.datalab.internal.issue_manager.label"], [22, "module-cleanlab.datalab.internal.issue_manager.noniid"], [23, "module-cleanlab.datalab.internal.issue_manager.null"], [24, "module-cleanlab.datalab.internal.issue_manager.outlier"], [26, "module-cleanlab.datalab.internal.issue_manager.regression.label"], [27, "module-cleanlab.datalab.internal.issue_manager.underperforming_group"], [28, "module-cleanlab.datalab.internal.report"], [29, "module-cleanlab.datalab.internal.task"], [31, "module-cleanlab.dataset"], [32, "module-cleanlab.experimental.cifar_cnn"], [33, "module-cleanlab.experimental.coteaching"], [34, "module-cleanlab.experimental"], [35, "module-cleanlab.experimental.label_issues_batched"], [36, "module-cleanlab.experimental.mnist_pytorch"], [37, "module-cleanlab.filter"], [38, "module-cleanlab.internal"], [39, "module-cleanlab.internal.label_quality_utils"], [40, "module-cleanlab.internal.latent_algebra"], [41, "module-cleanlab.internal.multiannotator_utils"], [42, "module-cleanlab.internal.multilabel_scorer"], [43, "module-cleanlab.internal.multilabel_utils"], [44, "module-cleanlab.internal.outlier"], [45, "module-cleanlab.internal.token_classification_utils"], [46, "module-cleanlab.internal.util"], [47, "module-cleanlab.internal.validation"], [49, "module-cleanlab.models"], [50, "module-cleanlab.models.keras"], [51, "module-cleanlab.multiannotator"], [52, "module-cleanlab.multilabel_classification.dataset"], [53, "module-cleanlab.multilabel_classification.filter"], [54, "module-cleanlab.multilabel_classification"], [55, "module-cleanlab.multilabel_classification.rank"], [56, "module-cleanlab.object_detection.filter"], [57, "module-cleanlab.object_detection"], [58, "module-cleanlab.object_detection.rank"], [59, "module-cleanlab.object_detection.summary"], [60, "module-cleanlab.outlier"], [61, "module-cleanlab.rank"], [62, "module-cleanlab.regression"], [63, "module-cleanlab.regression.learn"], [64, "module-cleanlab.regression.rank"], [65, "module-cleanlab.segmentation.filter"], [66, "module-cleanlab.segmentation"], [67, "module-cleanlab.segmentation.rank"], [68, "module-cleanlab.segmentation.summary"], [69, "module-cleanlab.token_classification.filter"], [70, "module-cleanlab.token_classification"], [71, "module-cleanlab.token_classification.rank"], [72, "module-cleanlab.token_classification.summary"]], "cleanlab.benchmarking.noise_generation": [[1, "module-cleanlab.benchmarking.noise_generation"]], "generate_n_rand_probabilities_that_sum_to_m() (in module cleanlab.benchmarking.noise_generation)": [[1, "cleanlab.benchmarking.noise_generation.generate_n_rand_probabilities_that_sum_to_m"]], "generate_noise_matrix_from_trace() (in module cleanlab.benchmarking.noise_generation)": [[1, "cleanlab.benchmarking.noise_generation.generate_noise_matrix_from_trace"]], "generate_noisy_labels() (in module cleanlab.benchmarking.noise_generation)": [[1, "cleanlab.benchmarking.noise_generation.generate_noisy_labels"]], "noise_matrix_is_valid() (in module cleanlab.benchmarking.noise_generation)": [[1, "cleanlab.benchmarking.noise_generation.noise_matrix_is_valid"]], "randomly_distribute_n_balls_into_k_bins() (in module cleanlab.benchmarking.noise_generation)": [[1, "cleanlab.benchmarking.noise_generation.randomly_distribute_N_balls_into_K_bins"]], "cleanlearning (class in cleanlab.classification)": [[2, "cleanlab.classification.CleanLearning"]], "__init_subclass__() (cleanlab.classification.cleanlearning class method)": [[2, "cleanlab.classification.CleanLearning.__init_subclass__"]], "cleanlab.classification": [[2, "module-cleanlab.classification"]], "find_label_issues() (cleanlab.classification.cleanlearning method)": [[2, "cleanlab.classification.CleanLearning.find_label_issues"]], "fit() (cleanlab.classification.cleanlearning method)": [[2, "cleanlab.classification.CleanLearning.fit"]], "get_label_issues() (cleanlab.classification.cleanlearning method)": [[2, "cleanlab.classification.CleanLearning.get_label_issues"]], "get_metadata_routing() (cleanlab.classification.cleanlearning method)": [[2, "cleanlab.classification.CleanLearning.get_metadata_routing"]], "get_params() (cleanlab.classification.cleanlearning method)": [[2, "cleanlab.classification.CleanLearning.get_params"]], "predict() (cleanlab.classification.cleanlearning method)": [[2, "cleanlab.classification.CleanLearning.predict"]], "predict_proba() (cleanlab.classification.cleanlearning method)": [[2, "cleanlab.classification.CleanLearning.predict_proba"]], "save_space() (cleanlab.classification.cleanlearning method)": [[2, "cleanlab.classification.CleanLearning.save_space"]], "score() (cleanlab.classification.cleanlearning method)": [[2, "cleanlab.classification.CleanLearning.score"]], "set_fit_request() (cleanlab.classification.cleanlearning method)": [[2, "cleanlab.classification.CleanLearning.set_fit_request"]], "set_params() (cleanlab.classification.cleanlearning method)": [[2, "cleanlab.classification.CleanLearning.set_params"]], "set_score_request() (cleanlab.classification.cleanlearning method)": [[2, "cleanlab.classification.CleanLearning.set_score_request"]], "calibrate_confident_joint() (in module cleanlab.count)": [[3, "cleanlab.count.calibrate_confident_joint"]], "cleanlab.count": [[3, "module-cleanlab.count"]], "compute_confident_joint() (in module cleanlab.count)": [[3, "cleanlab.count.compute_confident_joint"]], "estimate_confident_joint_and_cv_pred_proba() (in module cleanlab.count)": [[3, "cleanlab.count.estimate_confident_joint_and_cv_pred_proba"]], "estimate_cv_predicted_probabilities() (in module cleanlab.count)": [[3, "cleanlab.count.estimate_cv_predicted_probabilities"]], "estimate_joint() (in module cleanlab.count)": [[3, "cleanlab.count.estimate_joint"]], "estimate_latent() (in module cleanlab.count)": [[3, "cleanlab.count.estimate_latent"]], "estimate_noise_matrices() (in module cleanlab.count)": [[3, "cleanlab.count.estimate_noise_matrices"]], "estimate_py_and_noise_matrices_from_probabilities() (in module cleanlab.count)": [[3, "cleanlab.count.estimate_py_and_noise_matrices_from_probabilities"]], "estimate_py_noise_matrices_and_cv_pred_proba() (in module cleanlab.count)": [[3, "cleanlab.count.estimate_py_noise_matrices_and_cv_pred_proba"]], "get_confident_thresholds() (in module cleanlab.count)": [[3, "cleanlab.count.get_confident_thresholds"]], "num_label_issues() (in module cleanlab.count)": [[3, "cleanlab.count.num_label_issues"]], "datalab (class in cleanlab.datalab.datalab)": [[4, "cleanlab.datalab.datalab.Datalab"]], "class_names (cleanlab.datalab.datalab.datalab property)": [[4, "cleanlab.datalab.datalab.Datalab.class_names"]], "cleanlab.datalab.datalab": [[4, "module-cleanlab.datalab.datalab"]], "find_issues() (cleanlab.datalab.datalab.datalab method)": [[4, "cleanlab.datalab.datalab.Datalab.find_issues"]], "get_info() (cleanlab.datalab.datalab.datalab method)": [[4, "cleanlab.datalab.datalab.Datalab.get_info"]], "get_issue_summary() (cleanlab.datalab.datalab.datalab method)": [[4, "cleanlab.datalab.datalab.Datalab.get_issue_summary"]], "get_issues() (cleanlab.datalab.datalab.datalab method)": [[4, "cleanlab.datalab.datalab.Datalab.get_issues"]], "has_labels (cleanlab.datalab.datalab.datalab property)": [[4, "cleanlab.datalab.datalab.Datalab.has_labels"]], "info (cleanlab.datalab.datalab.datalab property)": [[4, "cleanlab.datalab.datalab.Datalab.info"]], "issue_summary (cleanlab.datalab.datalab.datalab property)": [[4, "cleanlab.datalab.datalab.Datalab.issue_summary"]], "issues (cleanlab.datalab.datalab.datalab property)": [[4, "cleanlab.datalab.datalab.Datalab.issues"]], "labels (cleanlab.datalab.datalab.datalab property)": [[4, "cleanlab.datalab.datalab.Datalab.labels"]], "list_default_issue_types() (cleanlab.datalab.datalab.datalab method)": [[4, "cleanlab.datalab.datalab.Datalab.list_default_issue_types"]], "list_possible_issue_types() (cleanlab.datalab.datalab.datalab method)": [[4, "cleanlab.datalab.datalab.Datalab.list_possible_issue_types"]], "load() (cleanlab.datalab.datalab.datalab static method)": [[4, "cleanlab.datalab.datalab.Datalab.load"]], "report() (cleanlab.datalab.datalab.datalab method)": [[4, "cleanlab.datalab.datalab.Datalab.report"]], "save() (cleanlab.datalab.datalab.datalab method)": [[4, "cleanlab.datalab.datalab.Datalab.save"]], "cleanlab.datalab": [[9, "module-cleanlab.datalab"]], "data (class in cleanlab.datalab.internal.data)": [[10, "cleanlab.datalab.internal.data.Data"]], "dataformaterror": [[10, "cleanlab.datalab.internal.data.DataFormatError"]], "datasetdicterror": [[10, "cleanlab.datalab.internal.data.DatasetDictError"]], "datasetloaderror": [[10, "cleanlab.datalab.internal.data.DatasetLoadError"]], "label (class in cleanlab.datalab.internal.data)": [[10, "cleanlab.datalab.internal.data.Label"]], "multiclass (class in cleanlab.datalab.internal.data)": [[10, "cleanlab.datalab.internal.data.MultiClass"]], "multilabel (class in cleanlab.datalab.internal.data)": [[10, "cleanlab.datalab.internal.data.MultiLabel"]], "add_note() (cleanlab.datalab.internal.data.dataformaterror method)": [[10, "cleanlab.datalab.internal.data.DataFormatError.add_note"]], "add_note() (cleanlab.datalab.internal.data.datasetdicterror method)": [[10, "cleanlab.datalab.internal.data.DatasetDictError.add_note"]], "add_note() (cleanlab.datalab.internal.data.datasetloaderror method)": [[10, "cleanlab.datalab.internal.data.DatasetLoadError.add_note"]], "args (cleanlab.datalab.internal.data.dataformaterror attribute)": [[10, "cleanlab.datalab.internal.data.DataFormatError.args"]], "args (cleanlab.datalab.internal.data.datasetdicterror attribute)": [[10, "cleanlab.datalab.internal.data.DatasetDictError.args"]], "args (cleanlab.datalab.internal.data.datasetloaderror attribute)": [[10, "cleanlab.datalab.internal.data.DatasetLoadError.args"]], "class_names (cleanlab.datalab.internal.data.data property)": [[10, "cleanlab.datalab.internal.data.Data.class_names"]], "class_names (cleanlab.datalab.internal.data.label property)": [[10, "cleanlab.datalab.internal.data.Label.class_names"]], "class_names (cleanlab.datalab.internal.data.multiclass property)": [[10, "cleanlab.datalab.internal.data.MultiClass.class_names"]], "class_names (cleanlab.datalab.internal.data.multilabel property)": [[10, "cleanlab.datalab.internal.data.MultiLabel.class_names"]], "cleanlab.datalab.internal.data": [[10, "module-cleanlab.datalab.internal.data"]], "has_labels (cleanlab.datalab.internal.data.data property)": [[10, "cleanlab.datalab.internal.data.Data.has_labels"]], "is_available (cleanlab.datalab.internal.data.label property)": [[10, "cleanlab.datalab.internal.data.Label.is_available"]], "is_available (cleanlab.datalab.internal.data.multiclass property)": [[10, "cleanlab.datalab.internal.data.MultiClass.is_available"]], "is_available (cleanlab.datalab.internal.data.multilabel property)": [[10, "cleanlab.datalab.internal.data.MultiLabel.is_available"]], "with_traceback() (cleanlab.datalab.internal.data.dataformaterror method)": [[10, "cleanlab.datalab.internal.data.DataFormatError.with_traceback"]], "with_traceback() (cleanlab.datalab.internal.data.datasetdicterror method)": [[10, "cleanlab.datalab.internal.data.DatasetDictError.with_traceback"]], "with_traceback() (cleanlab.datalab.internal.data.datasetloaderror method)": [[10, "cleanlab.datalab.internal.data.DatasetLoadError.with_traceback"]], "dataissues (class in cleanlab.datalab.internal.data_issues)": [[11, "cleanlab.datalab.internal.data_issues.DataIssues"]], "cleanlab.datalab.internal.data_issues": [[11, "module-cleanlab.datalab.internal.data_issues"]], "collect_issues_from_imagelab() (cleanlab.datalab.internal.data_issues.dataissues method)": [[11, "cleanlab.datalab.internal.data_issues.DataIssues.collect_issues_from_imagelab"]], "collect_issues_from_issue_manager() (cleanlab.datalab.internal.data_issues.dataissues method)": [[11, "cleanlab.datalab.internal.data_issues.DataIssues.collect_issues_from_issue_manager"]], "collect_statistics() (cleanlab.datalab.internal.data_issues.dataissues method)": [[11, "cleanlab.datalab.internal.data_issues.DataIssues.collect_statistics"]], "get_data_statistics() (in module cleanlab.datalab.internal.data_issues)": [[11, "cleanlab.datalab.internal.data_issues.get_data_statistics"]], "get_info() (cleanlab.datalab.internal.data_issues.dataissues method)": [[11, "cleanlab.datalab.internal.data_issues.DataIssues.get_info"]], "get_issue_summary() (cleanlab.datalab.internal.data_issues.dataissues method)": [[11, "cleanlab.datalab.internal.data_issues.DataIssues.get_issue_summary"]], "get_issues() (cleanlab.datalab.internal.data_issues.dataissues method)": [[11, "cleanlab.datalab.internal.data_issues.DataIssues.get_issues"]], "info (cleanlab.datalab.internal.data_issues.dataissues attribute)": [[11, "cleanlab.datalab.internal.data_issues.DataIssues.info"]], "issue_summary (cleanlab.datalab.internal.data_issues.dataissues attribute)": [[11, "cleanlab.datalab.internal.data_issues.DataIssues.issue_summary"]], "issues (cleanlab.datalab.internal.data_issues.dataissues attribute)": [[11, "cleanlab.datalab.internal.data_issues.DataIssues.issues"]], "set_health_score() (cleanlab.datalab.internal.data_issues.dataissues method)": [[11, "cleanlab.datalab.internal.data_issues.DataIssues.set_health_score"]], "statistics (cleanlab.datalab.internal.data_issues.dataissues property)": [[11, "cleanlab.datalab.internal.data_issues.DataIssues.statistics"]], "registry (in module cleanlab.datalab.internal.issue_manager_factory)": [[12, "cleanlab.datalab.internal.issue_manager_factory.REGISTRY"]], "cleanlab.datalab.internal.issue_manager_factory": [[12, "module-cleanlab.datalab.internal.issue_manager_factory"]], "list_default_issue_types() (in module cleanlab.datalab.internal.issue_manager_factory)": [[12, "cleanlab.datalab.internal.issue_manager_factory.list_default_issue_types"]], "list_possible_issue_types() (in module cleanlab.datalab.internal.issue_manager_factory)": [[12, "cleanlab.datalab.internal.issue_manager_factory.list_possible_issue_types"]], "register() (in module cleanlab.datalab.internal.issue_manager_factory)": [[12, "cleanlab.datalab.internal.issue_manager_factory.register"]], "cleanlab.datalab.internal": [[13, "module-cleanlab.datalab.internal"]], "issuefinder (class in cleanlab.datalab.internal.issue_finder)": [[14, "cleanlab.datalab.internal.issue_finder.IssueFinder"]], "cleanlab.datalab.internal.issue_finder": [[14, "module-cleanlab.datalab.internal.issue_finder"]], "find_issues() (cleanlab.datalab.internal.issue_finder.issuefinder method)": [[14, "cleanlab.datalab.internal.issue_finder.IssueFinder.find_issues"]], "get_available_issue_types() (cleanlab.datalab.internal.issue_finder.issuefinder method)": [[14, "cleanlab.datalab.internal.issue_finder.IssueFinder.get_available_issue_types"]], "default_threshold (cleanlab.datalab.internal.issue_manager.data_valuation.datavaluationissuemanager attribute)": [[16, "cleanlab.datalab.internal.issue_manager.data_valuation.DataValuationIssueManager.DEFAULT_THRESHOLD"]], "datavaluationissuemanager (class in cleanlab.datalab.internal.issue_manager.data_valuation)": [[16, "cleanlab.datalab.internal.issue_manager.data_valuation.DataValuationIssueManager"]], "cleanlab.datalab.internal.issue_manager.data_valuation": [[16, "module-cleanlab.datalab.internal.issue_manager.data_valuation"]], "collect_info() (cleanlab.datalab.internal.issue_manager.data_valuation.datavaluationissuemanager method)": [[16, "cleanlab.datalab.internal.issue_manager.data_valuation.DataValuationIssueManager.collect_info"]], "description (cleanlab.datalab.internal.issue_manager.data_valuation.datavaluationissuemanager attribute)": [[16, "cleanlab.datalab.internal.issue_manager.data_valuation.DataValuationIssueManager.description"]], "find_issues() (cleanlab.datalab.internal.issue_manager.data_valuation.datavaluationissuemanager method)": [[16, "cleanlab.datalab.internal.issue_manager.data_valuation.DataValuationIssueManager.find_issues"]], "info (cleanlab.datalab.internal.issue_manager.data_valuation.datavaluationissuemanager attribute)": [[16, "cleanlab.datalab.internal.issue_manager.data_valuation.DataValuationIssueManager.info"]], "issue_name (cleanlab.datalab.internal.issue_manager.data_valuation.datavaluationissuemanager attribute)": [[16, "cleanlab.datalab.internal.issue_manager.data_valuation.DataValuationIssueManager.issue_name"]], "issue_score_key (cleanlab.datalab.internal.issue_manager.data_valuation.datavaluationissuemanager attribute)": [[16, "cleanlab.datalab.internal.issue_manager.data_valuation.DataValuationIssueManager.issue_score_key"]], "issues (cleanlab.datalab.internal.issue_manager.data_valuation.datavaluationissuemanager attribute)": [[16, "cleanlab.datalab.internal.issue_manager.data_valuation.DataValuationIssueManager.issues"]], "make_summary() (cleanlab.datalab.internal.issue_manager.data_valuation.datavaluationissuemanager class method)": [[16, "cleanlab.datalab.internal.issue_manager.data_valuation.DataValuationIssueManager.make_summary"]], "report() (cleanlab.datalab.internal.issue_manager.data_valuation.datavaluationissuemanager class method)": [[16, "cleanlab.datalab.internal.issue_manager.data_valuation.DataValuationIssueManager.report"]], "summary (cleanlab.datalab.internal.issue_manager.data_valuation.datavaluationissuemanager attribute)": [[16, "cleanlab.datalab.internal.issue_manager.data_valuation.DataValuationIssueManager.summary"]], "verbosity_levels (cleanlab.datalab.internal.issue_manager.data_valuation.datavaluationissuemanager attribute)": [[16, "cleanlab.datalab.internal.issue_manager.data_valuation.DataValuationIssueManager.verbosity_levels"]], "nearduplicateissuemanager (class in cleanlab.datalab.internal.issue_manager.duplicate)": [[17, "cleanlab.datalab.internal.issue_manager.duplicate.NearDuplicateIssueManager"]], "cleanlab.datalab.internal.issue_manager.duplicate": [[17, "module-cleanlab.datalab.internal.issue_manager.duplicate"]], "collect_info() (cleanlab.datalab.internal.issue_manager.duplicate.nearduplicateissuemanager method)": [[17, "cleanlab.datalab.internal.issue_manager.duplicate.NearDuplicateIssueManager.collect_info"]], "description (cleanlab.datalab.internal.issue_manager.duplicate.nearduplicateissuemanager attribute)": [[17, "cleanlab.datalab.internal.issue_manager.duplicate.NearDuplicateIssueManager.description"]], "find_issues() (cleanlab.datalab.internal.issue_manager.duplicate.nearduplicateissuemanager method)": [[17, "cleanlab.datalab.internal.issue_manager.duplicate.NearDuplicateIssueManager.find_issues"]], "info (cleanlab.datalab.internal.issue_manager.duplicate.nearduplicateissuemanager attribute)": [[17, "cleanlab.datalab.internal.issue_manager.duplicate.NearDuplicateIssueManager.info"]], "issue_name (cleanlab.datalab.internal.issue_manager.duplicate.nearduplicateissuemanager attribute)": [[17, "cleanlab.datalab.internal.issue_manager.duplicate.NearDuplicateIssueManager.issue_name"]], "issue_score_key (cleanlab.datalab.internal.issue_manager.duplicate.nearduplicateissuemanager attribute)": [[17, "cleanlab.datalab.internal.issue_manager.duplicate.NearDuplicateIssueManager.issue_score_key"]], "issues (cleanlab.datalab.internal.issue_manager.duplicate.nearduplicateissuemanager attribute)": [[17, "cleanlab.datalab.internal.issue_manager.duplicate.NearDuplicateIssueManager.issues"]], "make_summary() (cleanlab.datalab.internal.issue_manager.duplicate.nearduplicateissuemanager class method)": [[17, "cleanlab.datalab.internal.issue_manager.duplicate.NearDuplicateIssueManager.make_summary"]], "near_duplicate_sets (cleanlab.datalab.internal.issue_manager.duplicate.nearduplicateissuemanager attribute)": [[17, "cleanlab.datalab.internal.issue_manager.duplicate.NearDuplicateIssueManager.near_duplicate_sets"]], "report() (cleanlab.datalab.internal.issue_manager.duplicate.nearduplicateissuemanager class method)": [[17, "cleanlab.datalab.internal.issue_manager.duplicate.NearDuplicateIssueManager.report"]], "summary (cleanlab.datalab.internal.issue_manager.duplicate.nearduplicateissuemanager attribute)": [[17, "cleanlab.datalab.internal.issue_manager.duplicate.NearDuplicateIssueManager.summary"]], "verbosity_levels (cleanlab.datalab.internal.issue_manager.duplicate.nearduplicateissuemanager attribute)": [[17, "cleanlab.datalab.internal.issue_manager.duplicate.NearDuplicateIssueManager.verbosity_levels"]], "classimbalanceissuemanager (class in cleanlab.datalab.internal.issue_manager.imbalance)": [[18, "cleanlab.datalab.internal.issue_manager.imbalance.ClassImbalanceIssueManager"]], "cleanlab.datalab.internal.issue_manager.imbalance": [[18, "module-cleanlab.datalab.internal.issue_manager.imbalance"]], "collect_info() (cleanlab.datalab.internal.issue_manager.imbalance.classimbalanceissuemanager method)": [[18, "cleanlab.datalab.internal.issue_manager.imbalance.ClassImbalanceIssueManager.collect_info"]], "description (cleanlab.datalab.internal.issue_manager.imbalance.classimbalanceissuemanager attribute)": [[18, "cleanlab.datalab.internal.issue_manager.imbalance.ClassImbalanceIssueManager.description"]], "find_issues() (cleanlab.datalab.internal.issue_manager.imbalance.classimbalanceissuemanager method)": [[18, "cleanlab.datalab.internal.issue_manager.imbalance.ClassImbalanceIssueManager.find_issues"]], "info (cleanlab.datalab.internal.issue_manager.imbalance.classimbalanceissuemanager attribute)": [[18, "cleanlab.datalab.internal.issue_manager.imbalance.ClassImbalanceIssueManager.info"]], "issue_name (cleanlab.datalab.internal.issue_manager.imbalance.classimbalanceissuemanager attribute)": [[18, "cleanlab.datalab.internal.issue_manager.imbalance.ClassImbalanceIssueManager.issue_name"]], "issue_score_key (cleanlab.datalab.internal.issue_manager.imbalance.classimbalanceissuemanager attribute)": [[18, "cleanlab.datalab.internal.issue_manager.imbalance.ClassImbalanceIssueManager.issue_score_key"]], "issues (cleanlab.datalab.internal.issue_manager.imbalance.classimbalanceissuemanager attribute)": [[18, "cleanlab.datalab.internal.issue_manager.imbalance.ClassImbalanceIssueManager.issues"]], "make_summary() (cleanlab.datalab.internal.issue_manager.imbalance.classimbalanceissuemanager class method)": [[18, "cleanlab.datalab.internal.issue_manager.imbalance.ClassImbalanceIssueManager.make_summary"]], "report() (cleanlab.datalab.internal.issue_manager.imbalance.classimbalanceissuemanager class method)": [[18, "cleanlab.datalab.internal.issue_manager.imbalance.ClassImbalanceIssueManager.report"]], "summary (cleanlab.datalab.internal.issue_manager.imbalance.classimbalanceissuemanager attribute)": [[18, "cleanlab.datalab.internal.issue_manager.imbalance.ClassImbalanceIssueManager.summary"]], "verbosity_levels (cleanlab.datalab.internal.issue_manager.imbalance.classimbalanceissuemanager attribute)": [[18, "cleanlab.datalab.internal.issue_manager.imbalance.ClassImbalanceIssueManager.verbosity_levels"]], "issuemanager (class in cleanlab.datalab.internal.issue_manager.issue_manager)": [[20, "cleanlab.datalab.internal.issue_manager.issue_manager.IssueManager"]], "cleanlab.datalab.internal.issue_manager.issue_manager": [[20, "module-cleanlab.datalab.internal.issue_manager.issue_manager"]], "collect_info() (cleanlab.datalab.internal.issue_manager.issue_manager.issuemanager method)": [[20, "cleanlab.datalab.internal.issue_manager.issue_manager.IssueManager.collect_info"]], "description (cleanlab.datalab.internal.issue_manager.issue_manager.issuemanager attribute)": [[20, "cleanlab.datalab.internal.issue_manager.issue_manager.IssueManager.description"]], "find_issues() (cleanlab.datalab.internal.issue_manager.issue_manager.issuemanager method)": [[20, "cleanlab.datalab.internal.issue_manager.issue_manager.IssueManager.find_issues"]], "info (cleanlab.datalab.internal.issue_manager.issue_manager.issuemanager attribute)": [[20, "cleanlab.datalab.internal.issue_manager.issue_manager.IssueManager.info"]], "issue_name (cleanlab.datalab.internal.issue_manager.issue_manager.issuemanager attribute)": [[20, "cleanlab.datalab.internal.issue_manager.issue_manager.IssueManager.issue_name"]], "issue_score_key (cleanlab.datalab.internal.issue_manager.issue_manager.issuemanager attribute)": [[20, "cleanlab.datalab.internal.issue_manager.issue_manager.IssueManager.issue_score_key"]], "issues (cleanlab.datalab.internal.issue_manager.issue_manager.issuemanager attribute)": [[20, "cleanlab.datalab.internal.issue_manager.issue_manager.IssueManager.issues"]], "make_summary() (cleanlab.datalab.internal.issue_manager.issue_manager.issuemanager class method)": [[20, "cleanlab.datalab.internal.issue_manager.issue_manager.IssueManager.make_summary"]], "report() (cleanlab.datalab.internal.issue_manager.issue_manager.issuemanager class method)": [[20, "cleanlab.datalab.internal.issue_manager.issue_manager.IssueManager.report"]], "summary (cleanlab.datalab.internal.issue_manager.issue_manager.issuemanager attribute)": [[20, "cleanlab.datalab.internal.issue_manager.issue_manager.IssueManager.summary"]], "verbosity_levels (cleanlab.datalab.internal.issue_manager.issue_manager.issuemanager attribute)": [[20, "cleanlab.datalab.internal.issue_manager.issue_manager.IssueManager.verbosity_levels"]], "labelissuemanager (class in cleanlab.datalab.internal.issue_manager.label)": [[21, "cleanlab.datalab.internal.issue_manager.label.LabelIssueManager"]], "cleanlab.datalab.internal.issue_manager.label": [[21, "module-cleanlab.datalab.internal.issue_manager.label"]], "collect_info() (cleanlab.datalab.internal.issue_manager.label.labelissuemanager method)": [[21, "cleanlab.datalab.internal.issue_manager.label.LabelIssueManager.collect_info"]], "description (cleanlab.datalab.internal.issue_manager.label.labelissuemanager attribute)": [[21, "cleanlab.datalab.internal.issue_manager.label.LabelIssueManager.description"]], "find_issues() (cleanlab.datalab.internal.issue_manager.label.labelissuemanager method)": [[21, "cleanlab.datalab.internal.issue_manager.label.LabelIssueManager.find_issues"]], "get_health_summary() (cleanlab.datalab.internal.issue_manager.label.labelissuemanager method)": [[21, "cleanlab.datalab.internal.issue_manager.label.LabelIssueManager.get_health_summary"]], "health_summary_parameters (cleanlab.datalab.internal.issue_manager.label.labelissuemanager attribute)": [[21, "cleanlab.datalab.internal.issue_manager.label.LabelIssueManager.health_summary_parameters"]], "info (cleanlab.datalab.internal.issue_manager.label.labelissuemanager attribute)": [[21, "cleanlab.datalab.internal.issue_manager.label.LabelIssueManager.info"]], "issue_name (cleanlab.datalab.internal.issue_manager.label.labelissuemanager attribute)": [[21, "cleanlab.datalab.internal.issue_manager.label.LabelIssueManager.issue_name"]], "issue_score_key (cleanlab.datalab.internal.issue_manager.label.labelissuemanager attribute)": [[21, "cleanlab.datalab.internal.issue_manager.label.LabelIssueManager.issue_score_key"]], "issues (cleanlab.datalab.internal.issue_manager.label.labelissuemanager attribute)": [[21, "cleanlab.datalab.internal.issue_manager.label.LabelIssueManager.issues"]], "make_summary() (cleanlab.datalab.internal.issue_manager.label.labelissuemanager class method)": [[21, "cleanlab.datalab.internal.issue_manager.label.LabelIssueManager.make_summary"]], "report() (cleanlab.datalab.internal.issue_manager.label.labelissuemanager class method)": [[21, "cleanlab.datalab.internal.issue_manager.label.LabelIssueManager.report"]], "summary (cleanlab.datalab.internal.issue_manager.label.labelissuemanager attribute)": [[21, "cleanlab.datalab.internal.issue_manager.label.LabelIssueManager.summary"]], "verbosity_levels (cleanlab.datalab.internal.issue_manager.label.labelissuemanager attribute)": [[21, "cleanlab.datalab.internal.issue_manager.label.LabelIssueManager.verbosity_levels"]], "noniidissuemanager (class in cleanlab.datalab.internal.issue_manager.noniid)": [[22, "cleanlab.datalab.internal.issue_manager.noniid.NonIIDIssueManager"]], "cleanlab.datalab.internal.issue_manager.noniid": [[22, "module-cleanlab.datalab.internal.issue_manager.noniid"]], "collect_info() (cleanlab.datalab.internal.issue_manager.noniid.noniidissuemanager method)": [[22, "cleanlab.datalab.internal.issue_manager.noniid.NonIIDIssueManager.collect_info"]], "description (cleanlab.datalab.internal.issue_manager.noniid.noniidissuemanager attribute)": [[22, "cleanlab.datalab.internal.issue_manager.noniid.NonIIDIssueManager.description"]], "find_issues() (cleanlab.datalab.internal.issue_manager.noniid.noniidissuemanager method)": [[22, "cleanlab.datalab.internal.issue_manager.noniid.NonIIDIssueManager.find_issues"]], "info (cleanlab.datalab.internal.issue_manager.noniid.noniidissuemanager attribute)": [[22, "cleanlab.datalab.internal.issue_manager.noniid.NonIIDIssueManager.info"]], "issue_name (cleanlab.datalab.internal.issue_manager.noniid.noniidissuemanager attribute)": [[22, "cleanlab.datalab.internal.issue_manager.noniid.NonIIDIssueManager.issue_name"]], "issue_score_key (cleanlab.datalab.internal.issue_manager.noniid.noniidissuemanager attribute)": [[22, "cleanlab.datalab.internal.issue_manager.noniid.NonIIDIssueManager.issue_score_key"]], "issues (cleanlab.datalab.internal.issue_manager.noniid.noniidissuemanager attribute)": [[22, "cleanlab.datalab.internal.issue_manager.noniid.NonIIDIssueManager.issues"]], "make_summary() (cleanlab.datalab.internal.issue_manager.noniid.noniidissuemanager class method)": [[22, "cleanlab.datalab.internal.issue_manager.noniid.NonIIDIssueManager.make_summary"]], "report() (cleanlab.datalab.internal.issue_manager.noniid.noniidissuemanager class method)": [[22, "cleanlab.datalab.internal.issue_manager.noniid.NonIIDIssueManager.report"]], "simplified_kolmogorov_smirnov_test() (in module cleanlab.datalab.internal.issue_manager.noniid)": [[22, "cleanlab.datalab.internal.issue_manager.noniid.simplified_kolmogorov_smirnov_test"]], "summary (cleanlab.datalab.internal.issue_manager.noniid.noniidissuemanager attribute)": [[22, "cleanlab.datalab.internal.issue_manager.noniid.NonIIDIssueManager.summary"]], "verbosity_levels (cleanlab.datalab.internal.issue_manager.noniid.noniidissuemanager attribute)": [[22, "cleanlab.datalab.internal.issue_manager.noniid.NonIIDIssueManager.verbosity_levels"]], "nullissuemanager (class in cleanlab.datalab.internal.issue_manager.null)": [[23, "cleanlab.datalab.internal.issue_manager.null.NullIssueManager"]], "cleanlab.datalab.internal.issue_manager.null": [[23, "module-cleanlab.datalab.internal.issue_manager.null"]], "collect_info() (cleanlab.datalab.internal.issue_manager.null.nullissuemanager method)": [[23, "cleanlab.datalab.internal.issue_manager.null.NullIssueManager.collect_info"]], "description (cleanlab.datalab.internal.issue_manager.null.nullissuemanager attribute)": [[23, "cleanlab.datalab.internal.issue_manager.null.NullIssueManager.description"]], "find_issues() (cleanlab.datalab.internal.issue_manager.null.nullissuemanager method)": [[23, "cleanlab.datalab.internal.issue_manager.null.NullIssueManager.find_issues"]], "info (cleanlab.datalab.internal.issue_manager.null.nullissuemanager attribute)": [[23, "cleanlab.datalab.internal.issue_manager.null.NullIssueManager.info"]], "issue_name (cleanlab.datalab.internal.issue_manager.null.nullissuemanager attribute)": [[23, "cleanlab.datalab.internal.issue_manager.null.NullIssueManager.issue_name"]], "issue_score_key (cleanlab.datalab.internal.issue_manager.null.nullissuemanager attribute)": [[23, "cleanlab.datalab.internal.issue_manager.null.NullIssueManager.issue_score_key"]], "issues (cleanlab.datalab.internal.issue_manager.null.nullissuemanager attribute)": [[23, "cleanlab.datalab.internal.issue_manager.null.NullIssueManager.issues"]], "make_summary() (cleanlab.datalab.internal.issue_manager.null.nullissuemanager class method)": [[23, "cleanlab.datalab.internal.issue_manager.null.NullIssueManager.make_summary"]], "report() (cleanlab.datalab.internal.issue_manager.null.nullissuemanager class method)": [[23, "cleanlab.datalab.internal.issue_manager.null.NullIssueManager.report"]], "summary (cleanlab.datalab.internal.issue_manager.null.nullissuemanager attribute)": [[23, "cleanlab.datalab.internal.issue_manager.null.NullIssueManager.summary"]], "verbosity_levels (cleanlab.datalab.internal.issue_manager.null.nullissuemanager attribute)": [[23, "cleanlab.datalab.internal.issue_manager.null.NullIssueManager.verbosity_levels"]], "default_thresholds (cleanlab.datalab.internal.issue_manager.outlier.outlierissuemanager attribute)": [[24, "cleanlab.datalab.internal.issue_manager.outlier.OutlierIssueManager.DEFAULT_THRESHOLDS"]], "outlierissuemanager (class in cleanlab.datalab.internal.issue_manager.outlier)": [[24, "cleanlab.datalab.internal.issue_manager.outlier.OutlierIssueManager"]], "cleanlab.datalab.internal.issue_manager.outlier": [[24, "module-cleanlab.datalab.internal.issue_manager.outlier"]], "collect_info() (cleanlab.datalab.internal.issue_manager.outlier.outlierissuemanager method)": [[24, "cleanlab.datalab.internal.issue_manager.outlier.OutlierIssueManager.collect_info"]], "description (cleanlab.datalab.internal.issue_manager.outlier.outlierissuemanager attribute)": [[24, "cleanlab.datalab.internal.issue_manager.outlier.OutlierIssueManager.description"]], "find_issues() (cleanlab.datalab.internal.issue_manager.outlier.outlierissuemanager method)": [[24, "cleanlab.datalab.internal.issue_manager.outlier.OutlierIssueManager.find_issues"]], "info (cleanlab.datalab.internal.issue_manager.outlier.outlierissuemanager attribute)": [[24, "cleanlab.datalab.internal.issue_manager.outlier.OutlierIssueManager.info"]], "issue_name (cleanlab.datalab.internal.issue_manager.outlier.outlierissuemanager attribute)": [[24, "cleanlab.datalab.internal.issue_manager.outlier.OutlierIssueManager.issue_name"]], "issue_score_key (cleanlab.datalab.internal.issue_manager.outlier.outlierissuemanager attribute)": [[24, "cleanlab.datalab.internal.issue_manager.outlier.OutlierIssueManager.issue_score_key"]], "issues (cleanlab.datalab.internal.issue_manager.outlier.outlierissuemanager attribute)": [[24, "cleanlab.datalab.internal.issue_manager.outlier.OutlierIssueManager.issues"]], "make_summary() (cleanlab.datalab.internal.issue_manager.outlier.outlierissuemanager class method)": [[24, "cleanlab.datalab.internal.issue_manager.outlier.OutlierIssueManager.make_summary"]], "ood (cleanlab.datalab.internal.issue_manager.outlier.outlierissuemanager attribute)": [[24, "cleanlab.datalab.internal.issue_manager.outlier.OutlierIssueManager.ood"]], "report() (cleanlab.datalab.internal.issue_manager.outlier.outlierissuemanager class method)": [[24, "cleanlab.datalab.internal.issue_manager.outlier.OutlierIssueManager.report"]], "summary (cleanlab.datalab.internal.issue_manager.outlier.outlierissuemanager attribute)": [[24, "cleanlab.datalab.internal.issue_manager.outlier.OutlierIssueManager.summary"]], "verbosity_levels (cleanlab.datalab.internal.issue_manager.outlier.outlierissuemanager attribute)": [[24, "cleanlab.datalab.internal.issue_manager.outlier.OutlierIssueManager.verbosity_levels"]], "regressionlabelissuemanager (class in cleanlab.datalab.internal.issue_manager.regression.label)": [[26, "cleanlab.datalab.internal.issue_manager.regression.label.RegressionLabelIssueManager"]], "cleanlab.datalab.internal.issue_manager.regression.label": [[26, "module-cleanlab.datalab.internal.issue_manager.regression.label"]], "collect_info() (cleanlab.datalab.internal.issue_manager.regression.label.regressionlabelissuemanager method)": [[26, "cleanlab.datalab.internal.issue_manager.regression.label.RegressionLabelIssueManager.collect_info"]], "description (cleanlab.datalab.internal.issue_manager.regression.label.regressionlabelissuemanager attribute)": [[26, "cleanlab.datalab.internal.issue_manager.regression.label.RegressionLabelIssueManager.description"]], "find_issues() (cleanlab.datalab.internal.issue_manager.regression.label.regressionlabelissuemanager method)": [[26, "cleanlab.datalab.internal.issue_manager.regression.label.RegressionLabelIssueManager.find_issues"]], "find_issues_with_features() (in module cleanlab.datalab.internal.issue_manager.regression.label)": [[26, "cleanlab.datalab.internal.issue_manager.regression.label.find_issues_with_features"]], "find_issues_with_predictions() (in module cleanlab.datalab.internal.issue_manager.regression.label)": [[26, "cleanlab.datalab.internal.issue_manager.regression.label.find_issues_with_predictions"]], "info (cleanlab.datalab.internal.issue_manager.regression.label.regressionlabelissuemanager attribute)": [[26, "cleanlab.datalab.internal.issue_manager.regression.label.RegressionLabelIssueManager.info"]], "issue_name (cleanlab.datalab.internal.issue_manager.regression.label.regressionlabelissuemanager attribute)": [[26, "cleanlab.datalab.internal.issue_manager.regression.label.RegressionLabelIssueManager.issue_name"]], "issue_score_key (cleanlab.datalab.internal.issue_manager.regression.label.regressionlabelissuemanager attribute)": [[26, "cleanlab.datalab.internal.issue_manager.regression.label.RegressionLabelIssueManager.issue_score_key"]], "issues (cleanlab.datalab.internal.issue_manager.regression.label.regressionlabelissuemanager attribute)": [[26, "cleanlab.datalab.internal.issue_manager.regression.label.RegressionLabelIssueManager.issues"]], "make_summary() (cleanlab.datalab.internal.issue_manager.regression.label.regressionlabelissuemanager class method)": [[26, "cleanlab.datalab.internal.issue_manager.regression.label.RegressionLabelIssueManager.make_summary"]], "report() (cleanlab.datalab.internal.issue_manager.regression.label.regressionlabelissuemanager class method)": [[26, "cleanlab.datalab.internal.issue_manager.regression.label.RegressionLabelIssueManager.report"]], "summary (cleanlab.datalab.internal.issue_manager.regression.label.regressionlabelissuemanager attribute)": [[26, "cleanlab.datalab.internal.issue_manager.regression.label.RegressionLabelIssueManager.summary"]], "verbosity_levels (cleanlab.datalab.internal.issue_manager.regression.label.regressionlabelissuemanager attribute)": [[26, "cleanlab.datalab.internal.issue_manager.regression.label.RegressionLabelIssueManager.verbosity_levels"]], "no_underperforming_cluster_id (cleanlab.datalab.internal.issue_manager.underperforming_group.underperforminggroupissuemanager attribute)": [[27, "cleanlab.datalab.internal.issue_manager.underperforming_group.UnderperformingGroupIssueManager.NO_UNDERPERFORMING_CLUSTER_ID"]], "outlier_cluster_labels (cleanlab.datalab.internal.issue_manager.underperforming_group.underperforminggroupissuemanager attribute)": [[27, "cleanlab.datalab.internal.issue_manager.underperforming_group.UnderperformingGroupIssueManager.OUTLIER_CLUSTER_LABELS"]], "underperforminggroupissuemanager (class in cleanlab.datalab.internal.issue_manager.underperforming_group)": [[27, "cleanlab.datalab.internal.issue_manager.underperforming_group.UnderperformingGroupIssueManager"]], "cleanlab.datalab.internal.issue_manager.underperforming_group": [[27, "module-cleanlab.datalab.internal.issue_manager.underperforming_group"]], "collect_info() (cleanlab.datalab.internal.issue_manager.underperforming_group.underperforminggroupissuemanager method)": [[27, "cleanlab.datalab.internal.issue_manager.underperforming_group.UnderperformingGroupIssueManager.collect_info"]], "description (cleanlab.datalab.internal.issue_manager.underperforming_group.underperforminggroupissuemanager attribute)": [[27, "cleanlab.datalab.internal.issue_manager.underperforming_group.UnderperformingGroupIssueManager.description"]], "filter_cluster_ids() (cleanlab.datalab.internal.issue_manager.underperforming_group.underperforminggroupissuemanager method)": [[27, "cleanlab.datalab.internal.issue_manager.underperforming_group.UnderperformingGroupIssueManager.filter_cluster_ids"]], "find_issues() (cleanlab.datalab.internal.issue_manager.underperforming_group.underperforminggroupissuemanager method)": [[27, "cleanlab.datalab.internal.issue_manager.underperforming_group.UnderperformingGroupIssueManager.find_issues"]], "get_worst_cluster() (cleanlab.datalab.internal.issue_manager.underperforming_group.underperforminggroupissuemanager method)": [[27, "cleanlab.datalab.internal.issue_manager.underperforming_group.UnderperformingGroupIssueManager.get_worst_cluster"]], "info (cleanlab.datalab.internal.issue_manager.underperforming_group.underperforminggroupissuemanager attribute)": [[27, "cleanlab.datalab.internal.issue_manager.underperforming_group.UnderperformingGroupIssueManager.info"]], "issue_name (cleanlab.datalab.internal.issue_manager.underperforming_group.underperforminggroupissuemanager attribute)": [[27, "cleanlab.datalab.internal.issue_manager.underperforming_group.UnderperformingGroupIssueManager.issue_name"]], "issue_score_key (cleanlab.datalab.internal.issue_manager.underperforming_group.underperforminggroupissuemanager attribute)": [[27, "cleanlab.datalab.internal.issue_manager.underperforming_group.UnderperformingGroupIssueManager.issue_score_key"]], "issues (cleanlab.datalab.internal.issue_manager.underperforming_group.underperforminggroupissuemanager attribute)": [[27, "cleanlab.datalab.internal.issue_manager.underperforming_group.UnderperformingGroupIssueManager.issues"]], "make_summary() (cleanlab.datalab.internal.issue_manager.underperforming_group.underperforminggroupissuemanager class method)": [[27, "cleanlab.datalab.internal.issue_manager.underperforming_group.UnderperformingGroupIssueManager.make_summary"]], "perform_clustering() (cleanlab.datalab.internal.issue_manager.underperforming_group.underperforminggroupissuemanager method)": [[27, "cleanlab.datalab.internal.issue_manager.underperforming_group.UnderperformingGroupIssueManager.perform_clustering"]], "report() (cleanlab.datalab.internal.issue_manager.underperforming_group.underperforminggroupissuemanager class method)": [[27, "cleanlab.datalab.internal.issue_manager.underperforming_group.UnderperformingGroupIssueManager.report"]], "set_knn_graph() (cleanlab.datalab.internal.issue_manager.underperforming_group.underperforminggroupissuemanager method)": [[27, "cleanlab.datalab.internal.issue_manager.underperforming_group.UnderperformingGroupIssueManager.set_knn_graph"]], "summary (cleanlab.datalab.internal.issue_manager.underperforming_group.underperforminggroupissuemanager attribute)": [[27, "cleanlab.datalab.internal.issue_manager.underperforming_group.UnderperformingGroupIssueManager.summary"]], "verbosity_levels (cleanlab.datalab.internal.issue_manager.underperforming_group.underperforminggroupissuemanager attribute)": [[27, "cleanlab.datalab.internal.issue_manager.underperforming_group.UnderperformingGroupIssueManager.verbosity_levels"]], "reporter (class in cleanlab.datalab.internal.report)": [[28, "cleanlab.datalab.internal.report.Reporter"]], "cleanlab.datalab.internal.report": [[28, "module-cleanlab.datalab.internal.report"]], "get_report() (cleanlab.datalab.internal.report.reporter method)": [[28, "cleanlab.datalab.internal.report.Reporter.get_report"]], "report() (cleanlab.datalab.internal.report.reporter method)": [[28, "cleanlab.datalab.internal.report.Reporter.report"]], "classification (cleanlab.datalab.internal.task.task attribute)": [[29, "cleanlab.datalab.internal.task.Task.CLASSIFICATION"]], "multilabel (cleanlab.datalab.internal.task.task attribute)": [[29, "cleanlab.datalab.internal.task.Task.MULTILABEL"]], "regression (cleanlab.datalab.internal.task.task attribute)": [[29, "cleanlab.datalab.internal.task.Task.REGRESSION"]], "task (class in cleanlab.datalab.internal.task)": [[29, "cleanlab.datalab.internal.task.Task"]], "__contains__() (cleanlab.datalab.internal.task.task class method)": [[29, "cleanlab.datalab.internal.task.Task.__contains__"]], "__getitem__() (cleanlab.datalab.internal.task.task class method)": [[29, "cleanlab.datalab.internal.task.Task.__getitem__"]], "__iter__() (cleanlab.datalab.internal.task.task class method)": [[29, "cleanlab.datalab.internal.task.Task.__iter__"]], "__len__() (cleanlab.datalab.internal.task.task class method)": [[29, "cleanlab.datalab.internal.task.Task.__len__"]], "cleanlab.datalab.internal.task": [[29, "module-cleanlab.datalab.internal.task"]], "from_str() (cleanlab.datalab.internal.task.task class method)": [[29, "cleanlab.datalab.internal.task.Task.from_str"]], "is_classification (cleanlab.datalab.internal.task.task property)": [[29, "cleanlab.datalab.internal.task.Task.is_classification"]], "is_multilabel (cleanlab.datalab.internal.task.task property)": [[29, "cleanlab.datalab.internal.task.Task.is_multilabel"]], "is_regression (cleanlab.datalab.internal.task.task property)": [[29, "cleanlab.datalab.internal.task.Task.is_regression"]], "cleanlab.dataset": [[31, "module-cleanlab.dataset"]], "find_overlapping_classes() (in module cleanlab.dataset)": [[31, "cleanlab.dataset.find_overlapping_classes"]], "health_summary() (in module cleanlab.dataset)": [[31, "cleanlab.dataset.health_summary"]], "overall_label_health_score() (in module cleanlab.dataset)": [[31, "cleanlab.dataset.overall_label_health_score"]], "rank_classes_by_label_quality() (in module cleanlab.dataset)": [[31, "cleanlab.dataset.rank_classes_by_label_quality"]], "cnn (class in cleanlab.experimental.cifar_cnn)": [[32, "cleanlab.experimental.cifar_cnn.CNN"]], "t_destination (cleanlab.experimental.cifar_cnn.cnn attribute)": [[32, "cleanlab.experimental.cifar_cnn.CNN.T_destination"]], "__call__() (cleanlab.experimental.cifar_cnn.cnn method)": [[32, "cleanlab.experimental.cifar_cnn.CNN.__call__"]], "add_module() (cleanlab.experimental.cifar_cnn.cnn method)": [[32, "cleanlab.experimental.cifar_cnn.CNN.add_module"]], "apply() (cleanlab.experimental.cifar_cnn.cnn method)": [[32, "cleanlab.experimental.cifar_cnn.CNN.apply"]], "bfloat16() (cleanlab.experimental.cifar_cnn.cnn method)": [[32, "cleanlab.experimental.cifar_cnn.CNN.bfloat16"]], "buffers() (cleanlab.experimental.cifar_cnn.cnn method)": [[32, "cleanlab.experimental.cifar_cnn.CNN.buffers"]], "call_bn() (in module cleanlab.experimental.cifar_cnn)": [[32, "cleanlab.experimental.cifar_cnn.call_bn"]], "call_super_init (cleanlab.experimental.cifar_cnn.cnn attribute)": [[32, "cleanlab.experimental.cifar_cnn.CNN.call_super_init"]], "children() (cleanlab.experimental.cifar_cnn.cnn method)": [[32, "cleanlab.experimental.cifar_cnn.CNN.children"]], "cleanlab.experimental.cifar_cnn": [[32, "module-cleanlab.experimental.cifar_cnn"]], "compile() (cleanlab.experimental.cifar_cnn.cnn method)": [[32, "cleanlab.experimental.cifar_cnn.CNN.compile"]], "cpu() (cleanlab.experimental.cifar_cnn.cnn method)": [[32, "cleanlab.experimental.cifar_cnn.CNN.cpu"]], "cuda() (cleanlab.experimental.cifar_cnn.cnn method)": [[32, "cleanlab.experimental.cifar_cnn.CNN.cuda"]], "double() (cleanlab.experimental.cifar_cnn.cnn method)": [[32, "cleanlab.experimental.cifar_cnn.CNN.double"]], "dump_patches (cleanlab.experimental.cifar_cnn.cnn attribute)": [[32, "cleanlab.experimental.cifar_cnn.CNN.dump_patches"]], "eval() (cleanlab.experimental.cifar_cnn.cnn method)": [[32, "cleanlab.experimental.cifar_cnn.CNN.eval"]], "extra_repr() (cleanlab.experimental.cifar_cnn.cnn method)": [[32, "cleanlab.experimental.cifar_cnn.CNN.extra_repr"]], "float() (cleanlab.experimental.cifar_cnn.cnn method)": [[32, "cleanlab.experimental.cifar_cnn.CNN.float"]], "forward() (cleanlab.experimental.cifar_cnn.cnn method)": [[32, "cleanlab.experimental.cifar_cnn.CNN.forward"], [32, "id0"]], "get_buffer() (cleanlab.experimental.cifar_cnn.cnn method)": [[32, "cleanlab.experimental.cifar_cnn.CNN.get_buffer"]], "get_extra_state() (cleanlab.experimental.cifar_cnn.cnn method)": [[32, "cleanlab.experimental.cifar_cnn.CNN.get_extra_state"]], "get_parameter() (cleanlab.experimental.cifar_cnn.cnn method)": [[32, "cleanlab.experimental.cifar_cnn.CNN.get_parameter"]], "get_submodule() (cleanlab.experimental.cifar_cnn.cnn method)": [[32, "cleanlab.experimental.cifar_cnn.CNN.get_submodule"]], "half() (cleanlab.experimental.cifar_cnn.cnn method)": [[32, "cleanlab.experimental.cifar_cnn.CNN.half"]], "ipu() (cleanlab.experimental.cifar_cnn.cnn method)": [[32, "cleanlab.experimental.cifar_cnn.CNN.ipu"]], "load_state_dict() (cleanlab.experimental.cifar_cnn.cnn method)": [[32, "cleanlab.experimental.cifar_cnn.CNN.load_state_dict"]], "modules() (cleanlab.experimental.cifar_cnn.cnn method)": [[32, "cleanlab.experimental.cifar_cnn.CNN.modules"]], "named_buffers() (cleanlab.experimental.cifar_cnn.cnn method)": [[32, "cleanlab.experimental.cifar_cnn.CNN.named_buffers"]], "named_children() (cleanlab.experimental.cifar_cnn.cnn method)": [[32, "cleanlab.experimental.cifar_cnn.CNN.named_children"]], "named_modules() (cleanlab.experimental.cifar_cnn.cnn method)": [[32, "cleanlab.experimental.cifar_cnn.CNN.named_modules"]], "named_parameters() (cleanlab.experimental.cifar_cnn.cnn method)": [[32, "cleanlab.experimental.cifar_cnn.CNN.named_parameters"]], "parameters() (cleanlab.experimental.cifar_cnn.cnn method)": [[32, "cleanlab.experimental.cifar_cnn.CNN.parameters"]], "register_backward_hook() (cleanlab.experimental.cifar_cnn.cnn method)": [[32, "cleanlab.experimental.cifar_cnn.CNN.register_backward_hook"]], "register_buffer() (cleanlab.experimental.cifar_cnn.cnn method)": [[32, "cleanlab.experimental.cifar_cnn.CNN.register_buffer"]], "register_forward_hook() (cleanlab.experimental.cifar_cnn.cnn method)": [[32, "cleanlab.experimental.cifar_cnn.CNN.register_forward_hook"]], "register_forward_pre_hook() (cleanlab.experimental.cifar_cnn.cnn method)": [[32, "cleanlab.experimental.cifar_cnn.CNN.register_forward_pre_hook"]], "register_full_backward_hook() (cleanlab.experimental.cifar_cnn.cnn method)": [[32, "cleanlab.experimental.cifar_cnn.CNN.register_full_backward_hook"]], "register_full_backward_pre_hook() (cleanlab.experimental.cifar_cnn.cnn method)": [[32, "cleanlab.experimental.cifar_cnn.CNN.register_full_backward_pre_hook"]], "register_load_state_dict_post_hook() (cleanlab.experimental.cifar_cnn.cnn method)": [[32, "cleanlab.experimental.cifar_cnn.CNN.register_load_state_dict_post_hook"]], "register_module() (cleanlab.experimental.cifar_cnn.cnn method)": [[32, "cleanlab.experimental.cifar_cnn.CNN.register_module"]], "register_parameter() (cleanlab.experimental.cifar_cnn.cnn method)": [[32, "cleanlab.experimental.cifar_cnn.CNN.register_parameter"]], "register_state_dict_pre_hook() (cleanlab.experimental.cifar_cnn.cnn method)": [[32, "cleanlab.experimental.cifar_cnn.CNN.register_state_dict_pre_hook"]], "requires_grad_() (cleanlab.experimental.cifar_cnn.cnn method)": [[32, "cleanlab.experimental.cifar_cnn.CNN.requires_grad_"]], "set_extra_state() (cleanlab.experimental.cifar_cnn.cnn method)": [[32, "cleanlab.experimental.cifar_cnn.CNN.set_extra_state"]], "share_memory() (cleanlab.experimental.cifar_cnn.cnn method)": [[32, "cleanlab.experimental.cifar_cnn.CNN.share_memory"]], "state_dict() (cleanlab.experimental.cifar_cnn.cnn method)": [[32, "cleanlab.experimental.cifar_cnn.CNN.state_dict"]], "to() (cleanlab.experimental.cifar_cnn.cnn method)": [[32, "cleanlab.experimental.cifar_cnn.CNN.to"]], "to_empty() (cleanlab.experimental.cifar_cnn.cnn method)": [[32, "cleanlab.experimental.cifar_cnn.CNN.to_empty"]], "train() (cleanlab.experimental.cifar_cnn.cnn method)": [[32, "cleanlab.experimental.cifar_cnn.CNN.train"]], "training (cleanlab.experimental.cifar_cnn.cnn attribute)": [[32, "cleanlab.experimental.cifar_cnn.CNN.training"]], "type() (cleanlab.experimental.cifar_cnn.cnn method)": [[32, "cleanlab.experimental.cifar_cnn.CNN.type"]], "xpu() (cleanlab.experimental.cifar_cnn.cnn method)": [[32, "cleanlab.experimental.cifar_cnn.CNN.xpu"]], "zero_grad() (cleanlab.experimental.cifar_cnn.cnn method)": [[32, "cleanlab.experimental.cifar_cnn.CNN.zero_grad"]], "adjust_learning_rate() (in module cleanlab.experimental.coteaching)": [[33, "cleanlab.experimental.coteaching.adjust_learning_rate"]], "cleanlab.experimental.coteaching": [[33, "module-cleanlab.experimental.coteaching"]], "evaluate() (in module cleanlab.experimental.coteaching)": [[33, "cleanlab.experimental.coteaching.evaluate"]], "forget_rate_scheduler() (in module cleanlab.experimental.coteaching)": [[33, "cleanlab.experimental.coteaching.forget_rate_scheduler"]], "initialize_lr_scheduler() (in module cleanlab.experimental.coteaching)": [[33, "cleanlab.experimental.coteaching.initialize_lr_scheduler"]], "loss_coteaching() (in module cleanlab.experimental.coteaching)": [[33, "cleanlab.experimental.coteaching.loss_coteaching"]], "train() (in module cleanlab.experimental.coteaching)": [[33, "cleanlab.experimental.coteaching.train"]], "cleanlab.experimental": [[34, "module-cleanlab.experimental"]], "labelinspector (class in cleanlab.experimental.label_issues_batched)": [[35, "cleanlab.experimental.label_issues_batched.LabelInspector"]], "adj_confident_thresholds_shared (in module cleanlab.experimental.label_issues_batched)": [[35, "cleanlab.experimental.label_issues_batched.adj_confident_thresholds_shared"]], "cleanlab.experimental.label_issues_batched": [[35, "module-cleanlab.experimental.label_issues_batched"]], "find_label_issues_batched() (in module cleanlab.experimental.label_issues_batched)": [[35, "cleanlab.experimental.label_issues_batched.find_label_issues_batched"]], "get_confident_thresholds() (cleanlab.experimental.label_issues_batched.labelinspector method)": [[35, "cleanlab.experimental.label_issues_batched.LabelInspector.get_confident_thresholds"]], "get_label_issues() (cleanlab.experimental.label_issues_batched.labelinspector method)": [[35, "cleanlab.experimental.label_issues_batched.LabelInspector.get_label_issues"]], "get_num_issues() (cleanlab.experimental.label_issues_batched.labelinspector method)": [[35, "cleanlab.experimental.label_issues_batched.LabelInspector.get_num_issues"]], "get_quality_scores() (cleanlab.experimental.label_issues_batched.labelinspector method)": [[35, "cleanlab.experimental.label_issues_batched.LabelInspector.get_quality_scores"]], "labels_shared (in module cleanlab.experimental.label_issues_batched)": [[35, "cleanlab.experimental.label_issues_batched.labels_shared"]], "pred_probs_shared (in module cleanlab.experimental.label_issues_batched)": [[35, "cleanlab.experimental.label_issues_batched.pred_probs_shared"]], "score_label_quality() (cleanlab.experimental.label_issues_batched.labelinspector method)": [[35, "cleanlab.experimental.label_issues_batched.LabelInspector.score_label_quality"]], "split_arr() (in module cleanlab.experimental.label_issues_batched)": [[35, "cleanlab.experimental.label_issues_batched.split_arr"]], "update_confident_thresholds() (cleanlab.experimental.label_issues_batched.labelinspector method)": [[35, "cleanlab.experimental.label_issues_batched.LabelInspector.update_confident_thresholds"]], "cnn (class in cleanlab.experimental.mnist_pytorch)": [[36, "cleanlab.experimental.mnist_pytorch.CNN"]], "simplenet (class in cleanlab.experimental.mnist_pytorch)": [[36, "cleanlab.experimental.mnist_pytorch.SimpleNet"]], "t_destination (cleanlab.experimental.mnist_pytorch.simplenet attribute)": [[36, "cleanlab.experimental.mnist_pytorch.SimpleNet.T_destination"]], "__call__() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[36, "cleanlab.experimental.mnist_pytorch.SimpleNet.__call__"]], "__init_subclass__() (cleanlab.experimental.mnist_pytorch.cnn class method)": [[36, "cleanlab.experimental.mnist_pytorch.CNN.__init_subclass__"]], "add_module() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[36, "cleanlab.experimental.mnist_pytorch.SimpleNet.add_module"]], "apply() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[36, "cleanlab.experimental.mnist_pytorch.SimpleNet.apply"]], "batch_size (cleanlab.experimental.mnist_pytorch.cnn attribute)": [[36, "cleanlab.experimental.mnist_pytorch.CNN.batch_size"]], "bfloat16() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[36, "cleanlab.experimental.mnist_pytorch.SimpleNet.bfloat16"]], "buffers() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[36, "cleanlab.experimental.mnist_pytorch.SimpleNet.buffers"]], "call_super_init (cleanlab.experimental.mnist_pytorch.simplenet attribute)": [[36, "cleanlab.experimental.mnist_pytorch.SimpleNet.call_super_init"]], "children() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[36, "cleanlab.experimental.mnist_pytorch.SimpleNet.children"]], "cleanlab.experimental.mnist_pytorch": [[36, "module-cleanlab.experimental.mnist_pytorch"]], "compile() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[36, "cleanlab.experimental.mnist_pytorch.SimpleNet.compile"]], "cpu() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[36, "cleanlab.experimental.mnist_pytorch.SimpleNet.cpu"]], "cuda() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[36, "cleanlab.experimental.mnist_pytorch.SimpleNet.cuda"]], "dataset (cleanlab.experimental.mnist_pytorch.cnn attribute)": [[36, "cleanlab.experimental.mnist_pytorch.CNN.dataset"]], "double() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[36, "cleanlab.experimental.mnist_pytorch.SimpleNet.double"]], "dump_patches (cleanlab.experimental.mnist_pytorch.simplenet attribute)": [[36, "cleanlab.experimental.mnist_pytorch.SimpleNet.dump_patches"]], "epochs (cleanlab.experimental.mnist_pytorch.cnn attribute)": [[36, "cleanlab.experimental.mnist_pytorch.CNN.epochs"]], "eval() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[36, "cleanlab.experimental.mnist_pytorch.SimpleNet.eval"]], "extra_repr() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[36, "cleanlab.experimental.mnist_pytorch.SimpleNet.extra_repr"]], "fit() (cleanlab.experimental.mnist_pytorch.cnn method)": [[36, "cleanlab.experimental.mnist_pytorch.CNN.fit"], [36, "id0"]], "float() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[36, "cleanlab.experimental.mnist_pytorch.SimpleNet.float"]], "forward() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[36, "cleanlab.experimental.mnist_pytorch.SimpleNet.forward"]], "get_buffer() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[36, "cleanlab.experimental.mnist_pytorch.SimpleNet.get_buffer"]], "get_extra_state() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[36, "cleanlab.experimental.mnist_pytorch.SimpleNet.get_extra_state"]], "get_metadata_routing() (cleanlab.experimental.mnist_pytorch.cnn method)": [[36, "cleanlab.experimental.mnist_pytorch.CNN.get_metadata_routing"]], "get_mnist_dataset() (in module cleanlab.experimental.mnist_pytorch)": [[36, "cleanlab.experimental.mnist_pytorch.get_mnist_dataset"]], "get_parameter() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[36, "cleanlab.experimental.mnist_pytorch.SimpleNet.get_parameter"]], "get_params() (cleanlab.experimental.mnist_pytorch.cnn method)": [[36, "cleanlab.experimental.mnist_pytorch.CNN.get_params"]], "get_sklearn_digits_dataset() (in module cleanlab.experimental.mnist_pytorch)": [[36, "cleanlab.experimental.mnist_pytorch.get_sklearn_digits_dataset"]], "get_submodule() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[36, "cleanlab.experimental.mnist_pytorch.SimpleNet.get_submodule"]], "half() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[36, "cleanlab.experimental.mnist_pytorch.SimpleNet.half"]], "ipu() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[36, "cleanlab.experimental.mnist_pytorch.SimpleNet.ipu"]], "load_state_dict() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[36, "cleanlab.experimental.mnist_pytorch.SimpleNet.load_state_dict"]], "loader (cleanlab.experimental.mnist_pytorch.cnn attribute)": [[36, "cleanlab.experimental.mnist_pytorch.CNN.loader"]], "log_interval (cleanlab.experimental.mnist_pytorch.cnn attribute)": [[36, "cleanlab.experimental.mnist_pytorch.CNN.log_interval"]], "lr (cleanlab.experimental.mnist_pytorch.cnn attribute)": [[36, "cleanlab.experimental.mnist_pytorch.CNN.lr"]], "modules() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[36, "cleanlab.experimental.mnist_pytorch.SimpleNet.modules"]], "momentum (cleanlab.experimental.mnist_pytorch.cnn attribute)": [[36, "cleanlab.experimental.mnist_pytorch.CNN.momentum"]], "named_buffers() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[36, "cleanlab.experimental.mnist_pytorch.SimpleNet.named_buffers"]], "named_children() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[36, "cleanlab.experimental.mnist_pytorch.SimpleNet.named_children"]], "named_modules() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[36, "cleanlab.experimental.mnist_pytorch.SimpleNet.named_modules"]], "named_parameters() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[36, "cleanlab.experimental.mnist_pytorch.SimpleNet.named_parameters"]], "no_cuda (cleanlab.experimental.mnist_pytorch.cnn attribute)": [[36, "cleanlab.experimental.mnist_pytorch.CNN.no_cuda"]], "parameters() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[36, "cleanlab.experimental.mnist_pytorch.SimpleNet.parameters"]], "predict() (cleanlab.experimental.mnist_pytorch.cnn method)": [[36, "cleanlab.experimental.mnist_pytorch.CNN.predict"], [36, "id1"]], "predict_proba() (cleanlab.experimental.mnist_pytorch.cnn method)": [[36, "cleanlab.experimental.mnist_pytorch.CNN.predict_proba"], [36, "id4"]], "register_backward_hook() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[36, "cleanlab.experimental.mnist_pytorch.SimpleNet.register_backward_hook"]], "register_buffer() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[36, "cleanlab.experimental.mnist_pytorch.SimpleNet.register_buffer"]], "register_forward_hook() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[36, "cleanlab.experimental.mnist_pytorch.SimpleNet.register_forward_hook"]], "register_forward_pre_hook() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[36, "cleanlab.experimental.mnist_pytorch.SimpleNet.register_forward_pre_hook"]], "register_full_backward_hook() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[36, "cleanlab.experimental.mnist_pytorch.SimpleNet.register_full_backward_hook"]], "register_full_backward_pre_hook() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[36, "cleanlab.experimental.mnist_pytorch.SimpleNet.register_full_backward_pre_hook"]], "register_load_state_dict_post_hook() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[36, "cleanlab.experimental.mnist_pytorch.SimpleNet.register_load_state_dict_post_hook"]], "register_module() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[36, "cleanlab.experimental.mnist_pytorch.SimpleNet.register_module"]], "register_parameter() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[36, "cleanlab.experimental.mnist_pytorch.SimpleNet.register_parameter"]], "register_state_dict_pre_hook() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[36, "cleanlab.experimental.mnist_pytorch.SimpleNet.register_state_dict_pre_hook"]], "requires_grad_() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[36, "cleanlab.experimental.mnist_pytorch.SimpleNet.requires_grad_"]], "seed (cleanlab.experimental.mnist_pytorch.cnn attribute)": [[36, "cleanlab.experimental.mnist_pytorch.CNN.seed"]], "set_extra_state() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[36, "cleanlab.experimental.mnist_pytorch.SimpleNet.set_extra_state"]], "set_fit_request() (cleanlab.experimental.mnist_pytorch.cnn method)": [[36, "cleanlab.experimental.mnist_pytorch.CNN.set_fit_request"]], "set_params() (cleanlab.experimental.mnist_pytorch.cnn method)": [[36, "cleanlab.experimental.mnist_pytorch.CNN.set_params"]], "set_predict_proba_request() (cleanlab.experimental.mnist_pytorch.cnn method)": [[36, "cleanlab.experimental.mnist_pytorch.CNN.set_predict_proba_request"]], "set_predict_request() (cleanlab.experimental.mnist_pytorch.cnn method)": [[36, "cleanlab.experimental.mnist_pytorch.CNN.set_predict_request"]], "share_memory() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[36, "cleanlab.experimental.mnist_pytorch.SimpleNet.share_memory"]], "state_dict() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[36, "cleanlab.experimental.mnist_pytorch.SimpleNet.state_dict"]], "test_batch_size (cleanlab.experimental.mnist_pytorch.cnn attribute)": [[36, "cleanlab.experimental.mnist_pytorch.CNN.test_batch_size"]], "to() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[36, "cleanlab.experimental.mnist_pytorch.SimpleNet.to"]], "to_empty() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[36, "cleanlab.experimental.mnist_pytorch.SimpleNet.to_empty"]], "train() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[36, "cleanlab.experimental.mnist_pytorch.SimpleNet.train"]], "training (cleanlab.experimental.mnist_pytorch.simplenet attribute)": [[36, "cleanlab.experimental.mnist_pytorch.SimpleNet.training"]], "type() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[36, "cleanlab.experimental.mnist_pytorch.SimpleNet.type"]], "xpu() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[36, "cleanlab.experimental.mnist_pytorch.SimpleNet.xpu"]], "zero_grad() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[36, "cleanlab.experimental.mnist_pytorch.SimpleNet.zero_grad"]], "cleanlab.filter": [[37, "module-cleanlab.filter"]], "find_label_issues() (in module cleanlab.filter)": [[37, "cleanlab.filter.find_label_issues"]], "find_label_issues_using_argmax_confusion_matrix() (in module cleanlab.filter)": [[37, "cleanlab.filter.find_label_issues_using_argmax_confusion_matrix"]], "find_predicted_neq_given() (in module cleanlab.filter)": [[37, "cleanlab.filter.find_predicted_neq_given"]], "pred_probs_by_class (in module cleanlab.filter)": [[37, "cleanlab.filter.pred_probs_by_class"]], "prune_count_matrix_cols (in module cleanlab.filter)": [[37, "cleanlab.filter.prune_count_matrix_cols"]], "cleanlab.internal": [[38, "module-cleanlab.internal"]], "cleanlab.internal.label_quality_utils": [[39, "module-cleanlab.internal.label_quality_utils"]], "get_normalized_entropy() (in module cleanlab.internal.label_quality_utils)": [[39, "cleanlab.internal.label_quality_utils.get_normalized_entropy"]], "cleanlab.internal.latent_algebra": [[40, "module-cleanlab.internal.latent_algebra"]], "compute_inv_noise_matrix() (in module cleanlab.internal.latent_algebra)": [[40, "cleanlab.internal.latent_algebra.compute_inv_noise_matrix"]], "compute_noise_matrix_from_inverse() (in module cleanlab.internal.latent_algebra)": [[40, "cleanlab.internal.latent_algebra.compute_noise_matrix_from_inverse"]], "compute_ps_py_inv_noise_matrix() (in module cleanlab.internal.latent_algebra)": [[40, "cleanlab.internal.latent_algebra.compute_ps_py_inv_noise_matrix"]], "compute_py() (in module cleanlab.internal.latent_algebra)": [[40, "cleanlab.internal.latent_algebra.compute_py"]], "compute_py_inv_noise_matrix() (in module cleanlab.internal.latent_algebra)": [[40, "cleanlab.internal.latent_algebra.compute_py_inv_noise_matrix"]], "compute_pyx() (in module cleanlab.internal.latent_algebra)": [[40, "cleanlab.internal.latent_algebra.compute_pyx"]], "assert_valid_inputs_multiannotator() (in module cleanlab.internal.multiannotator_utils)": [[41, "cleanlab.internal.multiannotator_utils.assert_valid_inputs_multiannotator"]], "assert_valid_pred_probs() (in module cleanlab.internal.multiannotator_utils)": [[41, "cleanlab.internal.multiannotator_utils.assert_valid_pred_probs"]], "check_consensus_label_classes() (in module cleanlab.internal.multiannotator_utils)": [[41, "cleanlab.internal.multiannotator_utils.check_consensus_label_classes"]], "cleanlab.internal.multiannotator_utils": [[41, "module-cleanlab.internal.multiannotator_utils"]], "compute_soft_cross_entropy() (in module cleanlab.internal.multiannotator_utils)": [[41, "cleanlab.internal.multiannotator_utils.compute_soft_cross_entropy"]], "find_best_temp_scaler() (in module cleanlab.internal.multiannotator_utils)": [[41, "cleanlab.internal.multiannotator_utils.find_best_temp_scaler"]], "format_multiannotator_labels() (in module cleanlab.internal.multiannotator_utils)": [[41, "cleanlab.internal.multiannotator_utils.format_multiannotator_labels"]], "temp_scale_pred_probs() (in module cleanlab.internal.multiannotator_utils)": [[41, "cleanlab.internal.multiannotator_utils.temp_scale_pred_probs"]], "aggregator (class in cleanlab.internal.multilabel_scorer)": [[42, "cleanlab.internal.multilabel_scorer.Aggregator"]], "confidence_weighted_entropy (cleanlab.internal.multilabel_scorer.classlabelscorer attribute)": [[42, "cleanlab.internal.multilabel_scorer.ClassLabelScorer.CONFIDENCE_WEIGHTED_ENTROPY"]], "classlabelscorer (class in cleanlab.internal.multilabel_scorer)": [[42, "cleanlab.internal.multilabel_scorer.ClassLabelScorer"]], "multilabelscorer (class in cleanlab.internal.multilabel_scorer)": [[42, "cleanlab.internal.multilabel_scorer.MultilabelScorer"]], "normalized_margin (cleanlab.internal.multilabel_scorer.classlabelscorer attribute)": [[42, "cleanlab.internal.multilabel_scorer.ClassLabelScorer.NORMALIZED_MARGIN"]], "self_confidence (cleanlab.internal.multilabel_scorer.classlabelscorer attribute)": [[42, "cleanlab.internal.multilabel_scorer.ClassLabelScorer.SELF_CONFIDENCE"]], "__call__() (cleanlab.internal.multilabel_scorer.aggregator method)": [[42, "cleanlab.internal.multilabel_scorer.Aggregator.__call__"]], "__call__() (cleanlab.internal.multilabel_scorer.classlabelscorer method)": [[42, "cleanlab.internal.multilabel_scorer.ClassLabelScorer.__call__"]], "__call__() (cleanlab.internal.multilabel_scorer.multilabelscorer method)": [[42, "cleanlab.internal.multilabel_scorer.MultilabelScorer.__call__"]], "__contains__() (cleanlab.internal.multilabel_scorer.classlabelscorer class method)": [[42, "cleanlab.internal.multilabel_scorer.ClassLabelScorer.__contains__"]], "__getitem__() (cleanlab.internal.multilabel_scorer.classlabelscorer class method)": [[42, "cleanlab.internal.multilabel_scorer.ClassLabelScorer.__getitem__"]], "__iter__() (cleanlab.internal.multilabel_scorer.classlabelscorer class method)": [[42, "cleanlab.internal.multilabel_scorer.ClassLabelScorer.__iter__"]], "__len__() (cleanlab.internal.multilabel_scorer.classlabelscorer class method)": [[42, "cleanlab.internal.multilabel_scorer.ClassLabelScorer.__len__"]], "aggregate() (cleanlab.internal.multilabel_scorer.multilabelscorer method)": [[42, "cleanlab.internal.multilabel_scorer.MultilabelScorer.aggregate"]], "cleanlab.internal.multilabel_scorer": [[42, "module-cleanlab.internal.multilabel_scorer"]], "exponential_moving_average() (in module cleanlab.internal.multilabel_scorer)": [[42, "cleanlab.internal.multilabel_scorer.exponential_moving_average"]], "from_str() (cleanlab.internal.multilabel_scorer.classlabelscorer class method)": [[42, "cleanlab.internal.multilabel_scorer.ClassLabelScorer.from_str"]], "get_class_label_quality_scores() (cleanlab.internal.multilabel_scorer.multilabelscorer method)": [[42, "cleanlab.internal.multilabel_scorer.MultilabelScorer.get_class_label_quality_scores"]], "get_cross_validated_multilabel_pred_probs() (in module cleanlab.internal.multilabel_scorer)": [[42, "cleanlab.internal.multilabel_scorer.get_cross_validated_multilabel_pred_probs"]], "get_label_quality_scores() (in module cleanlab.internal.multilabel_scorer)": [[42, "cleanlab.internal.multilabel_scorer.get_label_quality_scores"]], "multilabel_py() (in module cleanlab.internal.multilabel_scorer)": [[42, "cleanlab.internal.multilabel_scorer.multilabel_py"]], "possible_methods (cleanlab.internal.multilabel_scorer.aggregator attribute)": [[42, "cleanlab.internal.multilabel_scorer.Aggregator.possible_methods"]], "softmin() (in module cleanlab.internal.multilabel_scorer)": [[42, "cleanlab.internal.multilabel_scorer.softmin"]], "cleanlab.internal.multilabel_utils": [[43, "module-cleanlab.internal.multilabel_utils"]], "get_onehot_num_classes() (in module cleanlab.internal.multilabel_utils)": [[43, "cleanlab.internal.multilabel_utils.get_onehot_num_classes"]], "int2onehot() (in module cleanlab.internal.multilabel_utils)": [[43, "cleanlab.internal.multilabel_utils.int2onehot"]], "onehot2int() (in module cleanlab.internal.multilabel_utils)": [[43, "cleanlab.internal.multilabel_utils.onehot2int"]], "stack_complement() (in module cleanlab.internal.multilabel_utils)": [[43, "cleanlab.internal.multilabel_utils.stack_complement"]], "cleanlab.internal.outlier": [[44, "module-cleanlab.internal.outlier"]], "transform_distances_to_scores() (in module cleanlab.internal.outlier)": [[44, "cleanlab.internal.outlier.transform_distances_to_scores"]], "cleanlab.internal.token_classification_utils": [[45, "module-cleanlab.internal.token_classification_utils"]], "color_sentence() (in module cleanlab.internal.token_classification_utils)": [[45, "cleanlab.internal.token_classification_utils.color_sentence"]], "filter_sentence() (in module cleanlab.internal.token_classification_utils)": [[45, "cleanlab.internal.token_classification_utils.filter_sentence"]], "get_sentence() (in module cleanlab.internal.token_classification_utils)": [[45, "cleanlab.internal.token_classification_utils.get_sentence"]], "mapping() (in module cleanlab.internal.token_classification_utils)": [[45, "cleanlab.internal.token_classification_utils.mapping"]], "merge_probs() (in module cleanlab.internal.token_classification_utils)": [[45, "cleanlab.internal.token_classification_utils.merge_probs"]], "process_token() (in module cleanlab.internal.token_classification_utils)": [[45, "cleanlab.internal.token_classification_utils.process_token"]], "append_extra_datapoint() (in module cleanlab.internal.util)": [[46, "cleanlab.internal.util.append_extra_datapoint"]], "cleanlab.internal.util": [[46, "module-cleanlab.internal.util"]], "clip_noise_rates() (in module cleanlab.internal.util)": [[46, "cleanlab.internal.util.clip_noise_rates"]], "clip_values() (in module cleanlab.internal.util)": [[46, "cleanlab.internal.util.clip_values"]], "compress_int_array() (in module cleanlab.internal.util)": [[46, "cleanlab.internal.util.compress_int_array"]], "confusion_matrix() (in module cleanlab.internal.util)": [[46, "cleanlab.internal.util.confusion_matrix"]], "csr_vstack() (in module cleanlab.internal.util)": [[46, "cleanlab.internal.util.csr_vstack"]], "estimate_pu_f1() (in module cleanlab.internal.util)": [[46, "cleanlab.internal.util.estimate_pu_f1"]], "extract_indices_tf() (in module cleanlab.internal.util)": [[46, "cleanlab.internal.util.extract_indices_tf"]], "force_two_dimensions() (in module cleanlab.internal.util)": [[46, "cleanlab.internal.util.force_two_dimensions"]], "format_labels() (in module cleanlab.internal.util)": [[46, "cleanlab.internal.util.format_labels"]], "get_missing_classes() (in module cleanlab.internal.util)": [[46, "cleanlab.internal.util.get_missing_classes"]], "get_num_classes() (in module cleanlab.internal.util)": [[46, "cleanlab.internal.util.get_num_classes"]], "get_unique_classes() (in module cleanlab.internal.util)": [[46, "cleanlab.internal.util.get_unique_classes"]], "is_tensorflow_dataset() (in module cleanlab.internal.util)": [[46, "cleanlab.internal.util.is_tensorflow_dataset"]], "is_torch_dataset() (in module cleanlab.internal.util)": [[46, "cleanlab.internal.util.is_torch_dataset"]], "num_unique_classes() (in module cleanlab.internal.util)": [[46, "cleanlab.internal.util.num_unique_classes"]], "print_inverse_noise_matrix() (in module cleanlab.internal.util)": [[46, "cleanlab.internal.util.print_inverse_noise_matrix"]], "print_joint_matrix() (in module cleanlab.internal.util)": [[46, "cleanlab.internal.util.print_joint_matrix"]], "print_noise_matrix() (in module cleanlab.internal.util)": [[46, "cleanlab.internal.util.print_noise_matrix"]], "print_square_matrix() (in module cleanlab.internal.util)": [[46, "cleanlab.internal.util.print_square_matrix"]], "remove_noise_from_class() (in module cleanlab.internal.util)": [[46, "cleanlab.internal.util.remove_noise_from_class"]], "round_preserving_row_totals() (in module cleanlab.internal.util)": [[46, "cleanlab.internal.util.round_preserving_row_totals"]], "round_preserving_sum() (in module cleanlab.internal.util)": [[46, "cleanlab.internal.util.round_preserving_sum"]], "smart_display_dataframe() (in module cleanlab.internal.util)": [[46, "cleanlab.internal.util.smart_display_dataframe"]], "subset_x_y() (in module cleanlab.internal.util)": [[46, "cleanlab.internal.util.subset_X_y"]], "subset_data() (in module cleanlab.internal.util)": [[46, "cleanlab.internal.util.subset_data"]], "subset_labels() (in module cleanlab.internal.util)": [[46, "cleanlab.internal.util.subset_labels"]], "train_val_split() (in module cleanlab.internal.util)": [[46, "cleanlab.internal.util.train_val_split"]], "unshuffle_tensorflow_dataset() (in module cleanlab.internal.util)": [[46, "cleanlab.internal.util.unshuffle_tensorflow_dataset"]], "value_counts() (in module cleanlab.internal.util)": [[46, "cleanlab.internal.util.value_counts"]], "value_counts_fill_missing_classes() (in module cleanlab.internal.util)": [[46, "cleanlab.internal.util.value_counts_fill_missing_classes"]], "assert_indexing_works() (in module cleanlab.internal.validation)": [[47, "cleanlab.internal.validation.assert_indexing_works"]], "assert_nonempty_input() (in module cleanlab.internal.validation)": [[47, "cleanlab.internal.validation.assert_nonempty_input"]], "assert_valid_class_labels() (in module cleanlab.internal.validation)": [[47, "cleanlab.internal.validation.assert_valid_class_labels"]], "assert_valid_inputs() (in module cleanlab.internal.validation)": [[47, "cleanlab.internal.validation.assert_valid_inputs"]], "cleanlab.internal.validation": [[47, "module-cleanlab.internal.validation"]], "labels_to_array() (in module cleanlab.internal.validation)": [[47, "cleanlab.internal.validation.labels_to_array"]], "labels_to_list_multilabel() (in module cleanlab.internal.validation)": [[47, "cleanlab.internal.validation.labels_to_list_multilabel"]], "cleanlab.models": [[49, "module-cleanlab.models"]], "keraswrappermodel (class in cleanlab.models.keras)": [[50, "cleanlab.models.keras.KerasWrapperModel"]], "keraswrappersequential (class in cleanlab.models.keras)": [[50, "cleanlab.models.keras.KerasWrapperSequential"]], "cleanlab.models.keras": [[50, "module-cleanlab.models.keras"]], "fit() (cleanlab.models.keras.keraswrappermodel method)": [[50, "cleanlab.models.keras.KerasWrapperModel.fit"]], "fit() (cleanlab.models.keras.keraswrappersequential method)": [[50, "cleanlab.models.keras.KerasWrapperSequential.fit"]], "get_params() (cleanlab.models.keras.keraswrappermodel method)": [[50, "cleanlab.models.keras.KerasWrapperModel.get_params"]], "get_params() (cleanlab.models.keras.keraswrappersequential method)": [[50, "cleanlab.models.keras.KerasWrapperSequential.get_params"]], "predict() (cleanlab.models.keras.keraswrappermodel method)": [[50, "cleanlab.models.keras.KerasWrapperModel.predict"]], "predict() (cleanlab.models.keras.keraswrappersequential method)": [[50, "cleanlab.models.keras.KerasWrapperSequential.predict"]], "predict_proba() (cleanlab.models.keras.keraswrappermodel method)": [[50, "cleanlab.models.keras.KerasWrapperModel.predict_proba"]], "predict_proba() (cleanlab.models.keras.keraswrappersequential method)": [[50, "cleanlab.models.keras.KerasWrapperSequential.predict_proba"]], "set_params() (cleanlab.models.keras.keraswrappermodel method)": [[50, "cleanlab.models.keras.KerasWrapperModel.set_params"]], "set_params() (cleanlab.models.keras.keraswrappersequential method)": [[50, "cleanlab.models.keras.KerasWrapperSequential.set_params"]], "summary() (cleanlab.models.keras.keraswrappermodel method)": [[50, "cleanlab.models.keras.KerasWrapperModel.summary"]], "summary() (cleanlab.models.keras.keraswrappersequential method)": [[50, "cleanlab.models.keras.KerasWrapperSequential.summary"]], "cleanlab.multiannotator": [[51, "module-cleanlab.multiannotator"]], "convert_long_to_wide_dataset() (in module cleanlab.multiannotator)": [[51, "cleanlab.multiannotator.convert_long_to_wide_dataset"]], "get_active_learning_scores() (in module cleanlab.multiannotator)": [[51, "cleanlab.multiannotator.get_active_learning_scores"]], "get_active_learning_scores_ensemble() (in module cleanlab.multiannotator)": [[51, "cleanlab.multiannotator.get_active_learning_scores_ensemble"]], "get_label_quality_multiannotator() (in module cleanlab.multiannotator)": [[51, "cleanlab.multiannotator.get_label_quality_multiannotator"]], "get_label_quality_multiannotator_ensemble() (in module cleanlab.multiannotator)": [[51, "cleanlab.multiannotator.get_label_quality_multiannotator_ensemble"]], "get_majority_vote_label() (in module cleanlab.multiannotator)": [[51, "cleanlab.multiannotator.get_majority_vote_label"]], "cleanlab.multilabel_classification.dataset": [[52, "module-cleanlab.multilabel_classification.dataset"]], "common_multilabel_issues() (in module cleanlab.multilabel_classification.dataset)": [[52, "cleanlab.multilabel_classification.dataset.common_multilabel_issues"]], "multilabel_health_summary() (in module cleanlab.multilabel_classification.dataset)": [[52, "cleanlab.multilabel_classification.dataset.multilabel_health_summary"]], "overall_multilabel_health_score() (in module cleanlab.multilabel_classification.dataset)": [[52, "cleanlab.multilabel_classification.dataset.overall_multilabel_health_score"]], "rank_classes_by_multilabel_quality() (in module cleanlab.multilabel_classification.dataset)": [[52, "cleanlab.multilabel_classification.dataset.rank_classes_by_multilabel_quality"]], "cleanlab.multilabel_classification.filter": [[53, "module-cleanlab.multilabel_classification.filter"]], "find_label_issues() (in module cleanlab.multilabel_classification.filter)": [[53, "cleanlab.multilabel_classification.filter.find_label_issues"]], "find_multilabel_issues_per_class() (in module cleanlab.multilabel_classification.filter)": [[53, "cleanlab.multilabel_classification.filter.find_multilabel_issues_per_class"]], "cleanlab.multilabel_classification": [[54, "module-cleanlab.multilabel_classification"]], "cleanlab.multilabel_classification.rank": [[55, "module-cleanlab.multilabel_classification.rank"]], "get_label_quality_scores() (in module cleanlab.multilabel_classification.rank)": [[55, "cleanlab.multilabel_classification.rank.get_label_quality_scores"]], "get_label_quality_scores_per_class() (in module cleanlab.multilabel_classification.rank)": [[55, "cleanlab.multilabel_classification.rank.get_label_quality_scores_per_class"]], "cleanlab.object_detection.filter": [[56, "module-cleanlab.object_detection.filter"]], "find_label_issues() (in module cleanlab.object_detection.filter)": [[56, "cleanlab.object_detection.filter.find_label_issues"]], "cleanlab.object_detection": [[57, "module-cleanlab.object_detection"]], "cleanlab.object_detection.rank": [[58, "module-cleanlab.object_detection.rank"]], "compute_badloc_box_scores() (in module cleanlab.object_detection.rank)": [[58, "cleanlab.object_detection.rank.compute_badloc_box_scores"]], "compute_overlooked_box_scores() (in module cleanlab.object_detection.rank)": [[58, "cleanlab.object_detection.rank.compute_overlooked_box_scores"]], "compute_swap_box_scores() (in module cleanlab.object_detection.rank)": [[58, "cleanlab.object_detection.rank.compute_swap_box_scores"]], "get_label_quality_scores() (in module cleanlab.object_detection.rank)": [[58, "cleanlab.object_detection.rank.get_label_quality_scores"]], "issues_from_scores() (in module cleanlab.object_detection.rank)": [[58, "cleanlab.object_detection.rank.issues_from_scores"]], "pool_box_scores_per_image() (in module cleanlab.object_detection.rank)": [[58, "cleanlab.object_detection.rank.pool_box_scores_per_image"]], "bounding_box_size_distribution() (in module cleanlab.object_detection.summary)": [[59, "cleanlab.object_detection.summary.bounding_box_size_distribution"]], "calculate_per_class_metrics() (in module cleanlab.object_detection.summary)": [[59, "cleanlab.object_detection.summary.calculate_per_class_metrics"]], "class_label_distribution() (in module cleanlab.object_detection.summary)": [[59, "cleanlab.object_detection.summary.class_label_distribution"]], "cleanlab.object_detection.summary": [[59, "module-cleanlab.object_detection.summary"]], "get_average_per_class_confusion_matrix() (in module cleanlab.object_detection.summary)": [[59, "cleanlab.object_detection.summary.get_average_per_class_confusion_matrix"]], "get_sorted_bbox_count_idxs() (in module cleanlab.object_detection.summary)": [[59, "cleanlab.object_detection.summary.get_sorted_bbox_count_idxs"]], "object_counts_per_image() (in module cleanlab.object_detection.summary)": [[59, "cleanlab.object_detection.summary.object_counts_per_image"]], "plot_class_distribution() (in module cleanlab.object_detection.summary)": [[59, "cleanlab.object_detection.summary.plot_class_distribution"]], "plot_class_size_distributions() (in module cleanlab.object_detection.summary)": [[59, "cleanlab.object_detection.summary.plot_class_size_distributions"]], "visualize() (in module cleanlab.object_detection.summary)": [[59, "cleanlab.object_detection.summary.visualize"]], "outofdistribution (class in cleanlab.outlier)": [[60, "cleanlab.outlier.OutOfDistribution"]], "cleanlab.outlier": [[60, "module-cleanlab.outlier"]], "fit() (cleanlab.outlier.outofdistribution method)": [[60, "cleanlab.outlier.OutOfDistribution.fit"]], "fit_score() (cleanlab.outlier.outofdistribution method)": [[60, "cleanlab.outlier.OutOfDistribution.fit_score"]], "score() (cleanlab.outlier.outofdistribution method)": [[60, "cleanlab.outlier.OutOfDistribution.score"]], "cleanlab.rank": [[61, "module-cleanlab.rank"]], "find_top_issues() (in module cleanlab.rank)": [[61, "cleanlab.rank.find_top_issues"]], "get_confidence_weighted_entropy_for_each_label() (in module cleanlab.rank)": [[61, "cleanlab.rank.get_confidence_weighted_entropy_for_each_label"]], "get_label_quality_ensemble_scores() (in module cleanlab.rank)": [[61, "cleanlab.rank.get_label_quality_ensemble_scores"]], "get_label_quality_scores() (in module cleanlab.rank)": [[61, "cleanlab.rank.get_label_quality_scores"]], "get_normalized_margin_for_each_label() (in module cleanlab.rank)": [[61, "cleanlab.rank.get_normalized_margin_for_each_label"]], "get_self_confidence_for_each_label() (in module cleanlab.rank)": [[61, "cleanlab.rank.get_self_confidence_for_each_label"]], "order_label_issues() (in module cleanlab.rank)": [[61, "cleanlab.rank.order_label_issues"]], "cleanlab.regression": [[62, "module-cleanlab.regression"]], "cleanlearning (class in cleanlab.regression.learn)": [[63, "cleanlab.regression.learn.CleanLearning"]], "__init_subclass__() (cleanlab.regression.learn.cleanlearning class method)": [[63, "cleanlab.regression.learn.CleanLearning.__init_subclass__"]], "cleanlab.regression.learn": [[63, "module-cleanlab.regression.learn"]], "find_label_issues() (cleanlab.regression.learn.cleanlearning method)": [[63, "cleanlab.regression.learn.CleanLearning.find_label_issues"]], "fit() (cleanlab.regression.learn.cleanlearning method)": [[63, "cleanlab.regression.learn.CleanLearning.fit"]], "get_aleatoric_uncertainty() (cleanlab.regression.learn.cleanlearning method)": [[63, "cleanlab.regression.learn.CleanLearning.get_aleatoric_uncertainty"]], "get_epistemic_uncertainty() (cleanlab.regression.learn.cleanlearning method)": [[63, "cleanlab.regression.learn.CleanLearning.get_epistemic_uncertainty"]], "get_label_issues() (cleanlab.regression.learn.cleanlearning method)": [[63, "cleanlab.regression.learn.CleanLearning.get_label_issues"]], "get_metadata_routing() (cleanlab.regression.learn.cleanlearning method)": [[63, "cleanlab.regression.learn.CleanLearning.get_metadata_routing"]], "get_params() (cleanlab.regression.learn.cleanlearning method)": [[63, "cleanlab.regression.learn.CleanLearning.get_params"]], "predict() (cleanlab.regression.learn.cleanlearning method)": [[63, "cleanlab.regression.learn.CleanLearning.predict"]], "save_space() (cleanlab.regression.learn.cleanlearning method)": [[63, "cleanlab.regression.learn.CleanLearning.save_space"]], "score() (cleanlab.regression.learn.cleanlearning method)": [[63, "cleanlab.regression.learn.CleanLearning.score"]], "set_fit_request() (cleanlab.regression.learn.cleanlearning method)": [[63, "cleanlab.regression.learn.CleanLearning.set_fit_request"]], "set_params() (cleanlab.regression.learn.cleanlearning method)": [[63, "cleanlab.regression.learn.CleanLearning.set_params"]], "set_score_request() (cleanlab.regression.learn.cleanlearning method)": [[63, "cleanlab.regression.learn.CleanLearning.set_score_request"]], "cleanlab.regression.rank": [[64, "module-cleanlab.regression.rank"]], "get_label_quality_scores() (in module cleanlab.regression.rank)": [[64, "cleanlab.regression.rank.get_label_quality_scores"]], "cleanlab.segmentation.filter": [[65, "module-cleanlab.segmentation.filter"]], "find_label_issues() (in module cleanlab.segmentation.filter)": [[65, "cleanlab.segmentation.filter.find_label_issues"]], "cleanlab.segmentation": [[66, "module-cleanlab.segmentation"]], "cleanlab.segmentation.rank": [[67, "module-cleanlab.segmentation.rank"]], "get_label_quality_scores() (in module cleanlab.segmentation.rank)": [[67, "cleanlab.segmentation.rank.get_label_quality_scores"]], "issues_from_scores() (in module cleanlab.segmentation.rank)": [[67, "cleanlab.segmentation.rank.issues_from_scores"]], "cleanlab.segmentation.summary": [[68, "module-cleanlab.segmentation.summary"]], "common_label_issues() (in module cleanlab.segmentation.summary)": [[68, "cleanlab.segmentation.summary.common_label_issues"]], "display_issues() (in module cleanlab.segmentation.summary)": [[68, "cleanlab.segmentation.summary.display_issues"]], "filter_by_class() (in module cleanlab.segmentation.summary)": [[68, "cleanlab.segmentation.summary.filter_by_class"]], "cleanlab.token_classification.filter": [[69, "module-cleanlab.token_classification.filter"]], "find_label_issues() (in module cleanlab.token_classification.filter)": [[69, "cleanlab.token_classification.filter.find_label_issues"]], "cleanlab.token_classification": [[70, "module-cleanlab.token_classification"]], "cleanlab.token_classification.rank": [[71, "module-cleanlab.token_classification.rank"]], "get_label_quality_scores() (in module cleanlab.token_classification.rank)": [[71, "cleanlab.token_classification.rank.get_label_quality_scores"]], "issues_from_scores() (in module cleanlab.token_classification.rank)": [[71, "cleanlab.token_classification.rank.issues_from_scores"]], "cleanlab.token_classification.summary": [[72, "module-cleanlab.token_classification.summary"]], "common_label_issues() (in module cleanlab.token_classification.summary)": [[72, "cleanlab.token_classification.summary.common_label_issues"]], "display_issues() (in module cleanlab.token_classification.summary)": [[72, "cleanlab.token_classification.summary.display_issues"]], "filter_by_token() (in module cleanlab.token_classification.summary)": [[72, "cleanlab.token_classification.summary.filter_by_token"]]}})