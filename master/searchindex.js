Search.setIndex({"docnames": ["cleanlab/benchmarking/index", "cleanlab/benchmarking/noise_generation", "cleanlab/classification", "cleanlab/count", "cleanlab/data_valuation", "cleanlab/datalab/datalab", "cleanlab/datalab/guide/_templates/issue_types_tip", "cleanlab/datalab/guide/custom_issue_manager", "cleanlab/datalab/guide/generating_cluster_ids", "cleanlab/datalab/guide/index", "cleanlab/datalab/guide/issue_type_description", "cleanlab/datalab/index", "cleanlab/datalab/internal/data", "cleanlab/datalab/internal/data_issues", "cleanlab/datalab/internal/factory", "cleanlab/datalab/internal/index", "cleanlab/datalab/internal/issue_finder", "cleanlab/datalab/internal/issue_manager/_notices/not_registered", "cleanlab/datalab/internal/issue_manager/data_valuation", "cleanlab/datalab/internal/issue_manager/duplicate", "cleanlab/datalab/internal/issue_manager/imbalance", "cleanlab/datalab/internal/issue_manager/index", "cleanlab/datalab/internal/issue_manager/issue_manager", "cleanlab/datalab/internal/issue_manager/label", "cleanlab/datalab/internal/issue_manager/multilabel/index", "cleanlab/datalab/internal/issue_manager/multilabel/label", "cleanlab/datalab/internal/issue_manager/noniid", "cleanlab/datalab/internal/issue_manager/null", "cleanlab/datalab/internal/issue_manager/outlier", "cleanlab/datalab/internal/issue_manager/regression/index", "cleanlab/datalab/internal/issue_manager/regression/label", "cleanlab/datalab/internal/issue_manager/underperforming_group", "cleanlab/datalab/internal/model_outputs", "cleanlab/datalab/internal/report", "cleanlab/datalab/internal/task", "cleanlab/datalab/optional_dependencies", "cleanlab/dataset", "cleanlab/experimental/cifar_cnn", "cleanlab/experimental/coteaching", "cleanlab/experimental/index", "cleanlab/experimental/label_issues_batched", "cleanlab/experimental/mnist_pytorch", "cleanlab/experimental/span_classification", "cleanlab/filter", "cleanlab/internal/index", "cleanlab/internal/label_quality_utils", "cleanlab/internal/latent_algebra", "cleanlab/internal/multiannotator_utils", "cleanlab/internal/multilabel_scorer", "cleanlab/internal/multilabel_utils", "cleanlab/internal/outlier", "cleanlab/internal/token_classification_utils", "cleanlab/internal/util", "cleanlab/internal/validation", "cleanlab/models/fasttext", "cleanlab/models/index", "cleanlab/models/keras", "cleanlab/multiannotator", "cleanlab/multilabel_classification/dataset", "cleanlab/multilabel_classification/filter", "cleanlab/multilabel_classification/index", "cleanlab/multilabel_classification/rank", "cleanlab/object_detection/filter", "cleanlab/object_detection/index", "cleanlab/object_detection/rank", "cleanlab/object_detection/summary", "cleanlab/outlier", "cleanlab/rank", "cleanlab/regression/index", "cleanlab/regression/learn", "cleanlab/regression/rank", "cleanlab/segmentation/filter", "cleanlab/segmentation/index", "cleanlab/segmentation/rank", "cleanlab/segmentation/summary", "cleanlab/token_classification/filter", "cleanlab/token_classification/index", "cleanlab/token_classification/rank", "cleanlab/token_classification/summary", "index", "migrating/migrate_v2", "tutorials/clean_learning/index", "tutorials/clean_learning/tabular", "tutorials/clean_learning/text", "tutorials/datalab/audio", "tutorials/datalab/datalab_advanced", "tutorials/datalab/datalab_quickstart", "tutorials/datalab/image", "tutorials/datalab/index", "tutorials/datalab/tabular", "tutorials/datalab/text", "tutorials/dataset_health", "tutorials/faq", "tutorials/indepth_overview", "tutorials/index", "tutorials/multiannotator", "tutorials/multilabel_classification", "tutorials/object_detection", "tutorials/outliers", "tutorials/pred_probs_cross_val", "tutorials/regression", "tutorials/segmentation", "tutorials/token_classification"], "filenames": ["cleanlab/benchmarking/index.rst", "cleanlab/benchmarking/noise_generation.rst", "cleanlab/classification.rst", "cleanlab/count.rst", "cleanlab/data_valuation.rst", "cleanlab/datalab/datalab.rst", "cleanlab/datalab/guide/_templates/issue_types_tip.rst", "cleanlab/datalab/guide/custom_issue_manager.rst", "cleanlab/datalab/guide/generating_cluster_ids.rst", "cleanlab/datalab/guide/index.rst", "cleanlab/datalab/guide/issue_type_description.rst", "cleanlab/datalab/index.rst", "cleanlab/datalab/internal/data.rst", "cleanlab/datalab/internal/data_issues.rst", "cleanlab/datalab/internal/factory.rst", "cleanlab/datalab/internal/index.rst", "cleanlab/datalab/internal/issue_finder.rst", "cleanlab/datalab/internal/issue_manager/_notices/not_registered.rst", "cleanlab/datalab/internal/issue_manager/data_valuation.rst", "cleanlab/datalab/internal/issue_manager/duplicate.rst", "cleanlab/datalab/internal/issue_manager/imbalance.rst", "cleanlab/datalab/internal/issue_manager/index.rst", "cleanlab/datalab/internal/issue_manager/issue_manager.rst", "cleanlab/datalab/internal/issue_manager/label.rst", "cleanlab/datalab/internal/issue_manager/multilabel/index.rst", "cleanlab/datalab/internal/issue_manager/multilabel/label.rst", "cleanlab/datalab/internal/issue_manager/noniid.rst", "cleanlab/datalab/internal/issue_manager/null.rst", "cleanlab/datalab/internal/issue_manager/outlier.rst", "cleanlab/datalab/internal/issue_manager/regression/index.rst", "cleanlab/datalab/internal/issue_manager/regression/label.rst", "cleanlab/datalab/internal/issue_manager/underperforming_group.rst", "cleanlab/datalab/internal/model_outputs.rst", "cleanlab/datalab/internal/report.rst", "cleanlab/datalab/internal/task.rst", "cleanlab/datalab/optional_dependencies.rst", "cleanlab/dataset.rst", "cleanlab/experimental/cifar_cnn.rst", "cleanlab/experimental/coteaching.rst", "cleanlab/experimental/index.rst", "cleanlab/experimental/label_issues_batched.rst", "cleanlab/experimental/mnist_pytorch.rst", "cleanlab/experimental/span_classification.rst", "cleanlab/filter.rst", "cleanlab/internal/index.rst", "cleanlab/internal/label_quality_utils.rst", "cleanlab/internal/latent_algebra.rst", "cleanlab/internal/multiannotator_utils.rst", "cleanlab/internal/multilabel_scorer.rst", "cleanlab/internal/multilabel_utils.rst", "cleanlab/internal/outlier.rst", "cleanlab/internal/token_classification_utils.rst", "cleanlab/internal/util.rst", "cleanlab/internal/validation.rst", "cleanlab/models/fasttext.rst", "cleanlab/models/index.rst", "cleanlab/models/keras.rst", "cleanlab/multiannotator.rst", "cleanlab/multilabel_classification/dataset.rst", "cleanlab/multilabel_classification/filter.rst", "cleanlab/multilabel_classification/index.rst", "cleanlab/multilabel_classification/rank.rst", "cleanlab/object_detection/filter.rst", "cleanlab/object_detection/index.rst", "cleanlab/object_detection/rank.rst", "cleanlab/object_detection/summary.rst", "cleanlab/outlier.rst", "cleanlab/rank.rst", "cleanlab/regression/index.rst", "cleanlab/regression/learn.rst", "cleanlab/regression/rank.rst", "cleanlab/segmentation/filter.rst", "cleanlab/segmentation/index.rst", "cleanlab/segmentation/rank.rst", "cleanlab/segmentation/summary.rst", "cleanlab/token_classification/filter.rst", "cleanlab/token_classification/index.rst", "cleanlab/token_classification/rank.rst", "cleanlab/token_classification/summary.rst", "index.rst", "migrating/migrate_v2.rst", "tutorials/clean_learning/index.rst", "tutorials/clean_learning/tabular.ipynb", "tutorials/clean_learning/text.ipynb", "tutorials/datalab/audio.ipynb", "tutorials/datalab/datalab_advanced.ipynb", "tutorials/datalab/datalab_quickstart.ipynb", "tutorials/datalab/image.ipynb", "tutorials/datalab/index.rst", "tutorials/datalab/tabular.ipynb", "tutorials/datalab/text.ipynb", "tutorials/dataset_health.ipynb", "tutorials/faq.ipynb", "tutorials/indepth_overview.ipynb", "tutorials/index.rst", "tutorials/multiannotator.ipynb", "tutorials/multilabel_classification.ipynb", "tutorials/object_detection.ipynb", "tutorials/outliers.ipynb", "tutorials/pred_probs_cross_val.rst", "tutorials/regression.ipynb", "tutorials/segmentation.ipynb", "tutorials/token_classification.ipynb"], "titles": ["benchmarking", "noise_generation", "classification", "count", "data_valuation", "datalab", "&lt;no title&gt;", "Creating Your Own Issues Manager", "Generating Cluster IDs", "Datalab guides", "Datalab Issue Types", "datalab", "data", "data_issues", "factory", "internal", "issue_finder", "&lt;no title&gt;", "data_valuation", "duplicate", "imbalance", "issue_manager", "issue_manager", "label", "multilabel", "label", "noniid", "null", "outlier", "regression", "label", "underperforming_group", "model_outputs", "report", "task", "&lt;no title&gt;", "dataset", "cifar_cnn", "coteaching", "experimental", "label_issues_batched", "mnist_pytorch", "span_classification", "filter", "internal", "label_quality_utils", "latent_algebra", "multiannotator_utils", "multilabel_scorer", "multilabel_utils", "outlier", "token_classification_utils", "util", "validation", "fasttext", "models", "keras", "multiannotator", "dataset", "filter", "multilabel_classification", "rank", "filter", "object_detection", "rank", "summary", "outlier", "rank", "regression", "regression.learn", "regression.rank", "filter", "segmentation", "rank", "summary", "filter", "token_classification", "rank", "summary", "cleanlab open-source documentation", "How to migrate to versions &gt;= 2.0.0 from pre 1.0.1", "CleanLearning Tutorials", "Classification with Tabular Data using Scikit-Learn and Cleanlab", "Text Classification with Noisy Labels", "Audio Classification with SpeechBrain and Cleanlab", "Datalab: Advanced workflows to audit your data", "Datalab: A unified audit to detect all kinds of issues in data and labels", "Image Classification with PyTorch and Cleanlab", "Datalab Tutorials", "Detecting Issues in Tabular Data\u00a0(Numeric/Categorical columns) with Datalab", "Detecting Issues in a Text Dataset with Datalab", "Find Dataset-level Issues for Dataset Curation", "FAQ", "The Workflows of Data-centric AI for Classification with Noisy Labels", "Tutorials", "Estimate Consensus and Annotator Quality for Data Labeled by Multiple Annotators", "Find Label Errors in Multi-Label Classification Datasets", "Finding Label Errors in Object Detection Datasets", "Detect Outliers with Cleanlab and PyTorch Image Models (timm)", "Computing Out-of-Sample Predicted Probabilities with Cross-Validation", "Find Noisy Labels in Regression Datasets", "Find Label Errors in Semantic Segmentation Datasets", "Find Label Errors in Token Classification (Text) Datasets"], "terms": {"noise_gener": [0, 80, 85, 86, 93, 95, 96], "noise_matrix_is_valid": [0, 1], "generate_noisy_label": [0, 1, 85, 86, 93, 95, 96], "generate_noise_matrix_from_trac": [0, 1, 85, 86, 93, 95, 96], "generate_n_rand_probabilities_that_sum_to_m": [0, 1], "randomly_distribute_n_balls_into_k_bin": [0, 1], "helper": [1, 16, 40, 45, 47, 48, 49, 50, 51, 52, 64, 87, 91, 102], "method": [1, 2, 3, 4, 5, 7, 10, 12, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 82, 83, 84, 85, 86, 87, 89, 90, 92, 95, 96, 97, 98, 99, 100, 101, 102], "ar": [1, 2, 3, 4, 5, 7, 10, 12, 13, 14, 15, 16, 18, 20, 21, 22, 23, 24, 26, 29, 30, 32, 34, 36, 37, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 61, 62, 64, 65, 66, 67, 69, 70, 71, 73, 74, 75, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 89, 90, 92, 93, 95, 96, 97, 98, 99, 100, 102], "us": [1, 2, 3, 4, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 55, 56, 57, 58, 59, 61, 62, 64, 65, 66, 67, 69, 70, 71, 73, 74, 75, 77, 79, 80, 85, 91, 99], "benchmark": [1, 37, 79, 80, 85, 86, 93, 95, 96], "cleanlab": [1, 2, 3, 4, 5, 7, 11, 12, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 61, 62, 64, 65, 66, 67, 69, 70, 71, 73, 74, 75, 77, 78, 80, 85, 86, 91, 94, 99], "": [1, 2, 3, 4, 10, 18, 32, 36, 37, 41, 45, 48, 50, 52, 57, 58, 62, 64, 65, 66, 67, 69, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102], "core": [1, 40, 43, 71, 73], "algorithm": [1, 2, 8, 10, 31, 38, 42, 52, 57, 66, 75, 77, 79, 92, 93, 95, 102], "These": [1, 2, 3, 4, 5, 8, 10, 21, 37, 39, 41, 42, 43, 44, 55, 57, 58, 61, 65, 66, 70, 74, 75, 77, 78, 82, 83, 84, 86, 87, 89, 90, 92, 93, 95, 96, 97, 98, 100, 101, 102], "introduc": [1, 84, 92, 93], "synthet": [1, 95, 96, 101], "nois": [1, 2, 3, 36, 43, 46, 52, 58, 85, 86, 91, 95, 100], "label": [1, 2, 3, 4, 5, 7, 8, 9, 12, 14, 15, 16, 20, 21, 22, 24, 29, 31, 34, 36, 37, 38, 40, 41, 42, 43, 45, 46, 47, 48, 49, 52, 53, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 85, 91, 94, 98, 99], "classif": [1, 3, 4, 5, 7, 10, 12, 14, 16, 32, 34, 36, 40, 42, 43, 46, 48, 49, 52, 57, 58, 59, 60, 61, 66, 67, 75, 76, 77, 78, 79, 80, 81, 85, 86, 94, 95, 98, 99, 100, 101], "dataset": [1, 2, 3, 4, 5, 7, 9, 10, 12, 13, 14, 16, 18, 19, 20, 22, 25, 26, 27, 28, 30, 31, 39, 40, 41, 42, 43, 46, 48, 52, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 82, 84, 85, 89, 94, 95, 99], "specif": [1, 3, 5, 9, 14, 15, 16, 27, 33, 34, 39, 55, 59, 62, 65, 74, 78, 87, 89, 90, 93, 97, 102], "thi": [1, 2, 3, 4, 5, 6, 7, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 48, 49, 51, 52, 53, 55, 56, 57, 58, 59, 61, 62, 64, 65, 66, 67, 69, 70, 71, 73, 74, 75, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102], "modul": [1, 3, 13, 14, 15, 16, 21, 24, 29, 32, 33, 34, 36, 37, 38, 39, 40, 41, 43, 48, 50, 52, 55, 57, 62, 65, 66, 67, 79, 87, 92, 96], "provid": [1, 2, 3, 4, 5, 7, 8, 9, 10, 14, 16, 18, 23, 30, 34, 36, 37, 38, 40, 41, 43, 46, 52, 56, 57, 58, 59, 64, 65, 66, 67, 69, 71, 73, 74, 77, 78, 79, 82, 83, 84, 85, 86, 87, 89, 90, 92, 93, 95, 98, 99, 100, 101, 102], "gener": [1, 2, 3, 7, 10, 18, 23, 25, 33, 36, 48, 52, 53, 66, 67, 69, 74, 83, 84, 85, 86, 87, 90, 91, 92, 93, 95, 96, 98, 99, 101, 102], "valid": [1, 2, 3, 5, 10, 12, 32, 34, 36, 43, 44, 46, 47, 48, 50, 52, 57, 59, 62, 65, 67, 69, 70, 78, 80, 82, 83, 84, 85, 86, 89, 90, 91, 92, 93, 94, 96, 97, 100, 101, 102], "matric": [1, 3, 46, 92], "which": [1, 2, 3, 5, 7, 10, 12, 13, 14, 16, 18, 22, 26, 32, 33, 34, 36, 37, 41, 42, 43, 46, 48, 51, 52, 57, 58, 59, 62, 64, 65, 66, 67, 69, 70, 73, 74, 75, 77, 79, 80, 82, 83, 84, 85, 86, 87, 89, 90, 92, 93, 95, 96, 97, 98, 99, 100, 102], "learn": [1, 2, 3, 5, 9, 10, 14, 16, 22, 30, 33, 38, 39, 40, 41, 43, 45, 47, 52, 55, 57, 59, 66, 68, 70, 73, 77, 79, 83, 84, 85, 87, 89, 90, 91, 95, 96, 100], "i": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 16, 18, 19, 20, 22, 23, 25, 26, 27, 28, 30, 31, 32, 33, 34, 36, 37, 38, 40, 41, 42, 43, 45, 46, 47, 48, 50, 51, 52, 53, 56, 57, 58, 59, 61, 62, 64, 65, 66, 67, 69, 70, 71, 73, 74, 75, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 89, 90, 91, 95, 96, 97, 98, 100, 101, 102], "possibl": [1, 2, 3, 7, 10, 36, 37, 41, 43, 45, 46, 48, 59, 60, 61, 62, 64, 65, 66, 67, 69, 75, 77, 78, 86, 92, 93, 95, 96, 97, 100, 101, 102], "noisi": [1, 2, 3, 10, 36, 38, 41, 43, 46, 52, 58, 59, 61, 67, 69, 70, 71, 73, 74, 80, 85, 86, 89, 90, 92, 94, 95], "given": [1, 2, 3, 5, 10, 14, 30, 36, 37, 38, 40, 41, 42, 43, 45, 46, 47, 48, 51, 52, 57, 58, 59, 62, 64, 65, 66, 67, 69, 70, 74, 75, 77, 78, 80, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 95, 97, 98, 100, 101, 102], "matrix": [1, 2, 3, 5, 10, 16, 18, 31, 36, 43, 45, 46, 49, 52, 53, 59, 62, 64, 65, 66, 67, 89, 97, 98], "trace": [1, 85, 86, 93, 95, 96], "valu": [1, 2, 3, 4, 5, 10, 12, 13, 16, 18, 22, 26, 27, 32, 34, 36, 37, 38, 40, 41, 43, 45, 46, 48, 50, 52, 57, 58, 59, 61, 62, 64, 65, 66, 67, 69, 70, 71, 73, 74, 75, 78, 83, 84, 86, 87, 89, 90, 92, 93, 95, 96, 97, 98, 100, 101, 102], "more": [1, 2, 3, 5, 7, 9, 10, 13, 14, 16, 18, 26, 36, 37, 40, 41, 42, 45, 48, 50, 52, 57, 58, 59, 60, 61, 62, 64, 65, 67, 69, 70, 73, 74, 75, 77, 79, 84, 85, 87, 89, 90, 91, 92, 95, 96, 97, 98, 101, 102], "function": [1, 2, 3, 4, 5, 7, 10, 13, 14, 16, 23, 26, 30, 36, 37, 38, 40, 41, 42, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 56, 57, 58, 59, 61, 62, 64, 65, 66, 67, 69, 70, 71, 73, 74, 75, 77, 78, 82, 83, 84, 86, 87, 89, 90, 91, 92, 93, 95, 96, 97, 101, 102], "noise_matrix": [1, 2, 3, 10, 46, 52, 85, 86, 93, 95, 96], "py": [1, 3, 33, 37, 38, 43, 46, 48, 83, 84, 85, 86, 87, 89, 90, 92, 93, 95, 96], "verbos": [1, 2, 5, 7, 16, 18, 19, 20, 22, 23, 25, 26, 27, 28, 30, 31, 33, 36, 40, 43, 57, 58, 59, 64, 66, 67, 69, 71, 73, 74, 78, 85, 93, 95], "fals": [1, 2, 3, 5, 7, 12, 18, 19, 20, 22, 23, 25, 26, 28, 30, 31, 33, 34, 36, 37, 40, 41, 43, 47, 51, 52, 53, 57, 58, 59, 61, 62, 64, 65, 66, 67, 69, 71, 73, 74, 75, 83, 84, 85, 86, 87, 89, 90, 92, 93, 95, 97, 98, 100, 101], "sourc": [1, 2, 3, 4, 5, 7, 9, 10, 11, 12, 13, 14, 16, 18, 19, 20, 22, 23, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 56, 57, 58, 59, 61, 62, 64, 65, 66, 67, 69, 70, 71, 73, 74, 75, 77, 78], "prior": [1, 2, 3, 36, 43, 46, 48], "repres": [1, 2, 3, 7, 10, 12, 16, 18, 26, 32, 34, 36, 40, 43, 46, 49, 50, 52, 57, 58, 59, 62, 64, 65, 66, 67, 69, 71, 73, 74, 78, 82, 83, 84, 85, 86, 87, 89, 90, 92, 93, 95, 96, 97, 98, 100, 102], "p": [1, 2, 3, 5, 10, 36, 43, 45, 46, 52, 57, 65, 66, 67, 71, 89, 90, 93, 95, 102], "true_label": [1, 2, 3, 36, 46, 52, 93, 95], "k": [1, 2, 3, 4, 5, 8, 10, 12, 16, 18, 19, 23, 26, 28, 31, 36, 40, 42, 43, 45, 46, 47, 48, 49, 50, 51, 52, 57, 58, 59, 60, 61, 62, 65, 66, 67, 69, 71, 73, 74, 75, 77, 78, 82, 84, 85, 86, 92, 93, 95, 96, 97, 98, 101, 102], "check": [1, 2, 5, 6, 9, 10, 12, 16, 27, 34, 37, 40, 41, 47, 53, 56, 62, 65, 69, 79, 82, 83, 84, 85, 86, 87, 92, 93, 95, 96, 100], "learnabl": 1, "mean": [1, 2, 7, 8, 12, 13, 22, 26, 38, 41, 46, 48, 50, 64, 69, 83, 86, 90, 92, 93, 95, 96, 97, 98, 100], "achiev": [1, 2, 37, 38, 41, 69, 92, 95, 102], "better": [1, 5, 43, 57, 59, 67, 69, 70, 79, 83, 84, 86, 89, 90, 92, 93, 96, 97, 98, 102], "than": [1, 2, 3, 4, 7, 9, 10, 26, 28, 31, 36, 43, 52, 56, 57, 62, 64, 66, 67, 69, 73, 77, 82, 84, 86, 87, 89, 90, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102], "random": [1, 2, 3, 7, 10, 18, 31, 40, 48, 57, 67, 69, 82, 84, 85, 86, 87, 89, 92, 93, 95, 96, 98], "perform": [1, 2, 4, 7, 10, 26, 28, 31, 37, 41, 48, 65, 69, 79, 82, 83, 85, 92, 93, 95, 96, 99, 100], "averag": [1, 3, 5, 10, 22, 28, 36, 37, 41, 48, 50, 57, 58, 65, 66, 67, 92, 95, 98], "amount": [1, 3, 87], "paramet": [1, 2, 3, 4, 5, 9, 12, 13, 14, 16, 18, 19, 20, 22, 23, 25, 26, 27, 28, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 48, 49, 50, 51, 52, 53, 56, 57, 58, 59, 61, 62, 64, 65, 66, 67, 69, 70, 71, 73, 74, 75, 77, 78, 82, 83, 84, 86, 87, 90], "np": [1, 2, 3, 4, 5, 7, 16, 18, 31, 36, 38, 40, 42, 43, 45, 46, 48, 49, 50, 51, 52, 53, 56, 57, 58, 59, 61, 62, 64, 65, 66, 67, 69, 70, 71, 74, 75, 77, 78, 82, 83, 84, 85, 86, 87, 89, 91, 92, 93, 95, 96, 97, 98, 100, 101, 102], "ndarrai": [1, 2, 3, 4, 5, 16, 23, 25, 26, 30, 31, 32, 36, 38, 40, 42, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 57, 58, 59, 61, 62, 64, 65, 66, 67, 69, 70, 71, 73, 74, 77, 102], "an": [1, 2, 3, 4, 5, 7, 9, 10, 12, 13, 14, 16, 18, 19, 20, 22, 23, 25, 26, 28, 30, 31, 32, 33, 34, 36, 37, 38, 40, 41, 42, 43, 45, 46, 47, 48, 50, 52, 53, 56, 57, 58, 59, 61, 62, 64, 65, 66, 67, 69, 71, 73, 74, 78, 79, 82, 83, 84, 85, 86, 87, 89, 90, 91, 93, 95, 96, 97, 98, 99, 100, 101, 102], "arrai": [1, 2, 3, 4, 5, 7, 10, 12, 16, 18, 26, 32, 36, 38, 40, 41, 42, 43, 46, 47, 48, 49, 50, 51, 52, 53, 56, 57, 58, 59, 61, 62, 64, 65, 66, 67, 69, 70, 71, 73, 74, 75, 77, 78, 82, 83, 84, 85, 86, 90, 92, 93, 95, 96, 97, 98, 100, 101, 102], "shape": [1, 2, 3, 4, 5, 16, 18, 36, 38, 40, 42, 43, 45, 46, 47, 48, 50, 51, 52, 56, 57, 58, 59, 61, 62, 64, 65, 66, 67, 69, 70, 71, 73, 74, 75, 77, 78, 84, 91, 92, 93, 96, 97, 98, 101, 102], "condit": [1, 2, 3, 46, 51, 52, 67, 87, 93, 102], "probabl": [1, 2, 3, 5, 8, 10, 16, 23, 25, 28, 32, 36, 40, 41, 42, 43, 45, 46, 48, 49, 51, 52, 56, 57, 58, 59, 61, 62, 64, 65, 66, 67, 69, 71, 73, 74, 75, 77, 78, 79, 80, 91, 92, 93, 94, 96, 97, 98, 101, 102], "k_": [1, 2, 3, 46, 52], "k_y": [1, 2, 3, 46, 52], "contain": [1, 2, 3, 5, 10, 12, 13, 18, 19, 20, 22, 23, 25, 26, 27, 28, 30, 31, 32, 33, 34, 36, 37, 38, 40, 41, 43, 45, 46, 51, 52, 56, 57, 58, 59, 61, 62, 64, 65, 66, 67, 69, 70, 73, 74, 75, 77, 78, 80, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 95, 96, 97, 98, 100, 101], "fraction": [1, 2, 3, 10, 20, 38, 46, 52, 57, 69, 89, 92], "exampl": [1, 2, 3, 4, 5, 7, 8, 10, 12, 13, 14, 16, 18, 19, 20, 22, 23, 25, 26, 27, 28, 30, 31, 33, 34, 36, 37, 38, 40, 41, 42, 43, 45, 46, 48, 49, 50, 51, 52, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 69, 70, 71, 73, 74, 75, 77, 78, 79, 80, 82, 83, 84, 85, 86, 89, 90, 91, 95, 96, 97, 99, 100, 101, 102], "everi": [1, 2, 3, 4, 5, 16, 37, 41, 43, 46, 51, 52, 59, 67, 69, 70, 82, 84, 85, 86, 87, 89, 90, 92, 95, 97, 99, 101, 102], "class": [1, 2, 3, 4, 5, 7, 9, 12, 13, 14, 16, 18, 19, 20, 22, 23, 25, 26, 27, 28, 30, 31, 32, 33, 34, 36, 37, 38, 40, 41, 42, 43, 45, 46, 47, 48, 49, 51, 52, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 69, 71, 73, 74, 75, 77, 78, 79, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 102], "other": [1, 2, 3, 5, 10, 16, 22, 27, 36, 37, 39, 40, 41, 43, 46, 49, 52, 53, 55, 57, 58, 61, 65, 66, 67, 69, 74, 82, 83, 84, 85, 86, 87, 89, 90, 92, 93, 96, 98, 101, 102], "assum": [1, 2, 3, 12, 43, 46, 51, 52, 67, 71, 74, 92, 96, 98, 100, 101, 102], "column": [1, 2, 3, 5, 10, 12, 13, 30, 36, 40, 43, 46, 48, 49, 51, 52, 57, 58, 59, 61, 62, 65, 66, 67, 69, 74, 75, 77, 78, 82, 83, 84, 85, 86, 87, 90, 91, 92, 93, 95, 96, 97, 100, 101, 102], "sum": [1, 2, 3, 26, 31, 32, 36, 46, 48, 52, 58, 59, 61, 64, 69, 85, 86, 87, 92, 93, 95, 96, 101, 102], "1": [1, 2, 3, 4, 5, 7, 10, 12, 16, 18, 19, 20, 22, 23, 25, 26, 27, 28, 30, 31, 32, 33, 34, 36, 37, 38, 40, 41, 42, 43, 45, 46, 47, 48, 49, 50, 51, 52, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 69, 70, 71, 73, 74, 75, 77, 78, 91, 92, 99], "each": [1, 2, 3, 4, 5, 7, 8, 9, 12, 13, 14, 16, 20, 22, 23, 25, 26, 31, 32, 33, 36, 37, 38, 40, 41, 42, 43, 45, 46, 48, 49, 50, 52, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 69, 70, 71, 73, 74, 75, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102], "true": [1, 2, 3, 5, 7, 10, 12, 18, 19, 20, 22, 23, 25, 26, 28, 30, 31, 33, 34, 36, 37, 38, 40, 41, 43, 46, 48, 51, 52, 53, 56, 57, 58, 59, 62, 64, 65, 66, 67, 69, 71, 73, 74, 78, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 95, 96, 97, 98, 100, 101, 102], "return": [1, 2, 3, 4, 5, 12, 13, 14, 16, 18, 19, 20, 22, 23, 25, 26, 27, 28, 30, 31, 33, 34, 36, 37, 40, 41, 42, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 56, 57, 58, 59, 61, 62, 64, 65, 66, 67, 69, 70, 71, 73, 74, 75, 77, 78, 79, 83, 84, 85, 86, 87, 90, 91, 92, 93, 95, 96, 97, 98, 100, 101, 102], "type": [1, 2, 3, 4, 5, 6, 7, 11, 12, 13, 14, 16, 18, 19, 20, 22, 23, 25, 26, 27, 28, 30, 31, 32, 33, 34, 36, 37, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 57, 58, 59, 61, 62, 64, 65, 66, 67, 69, 70, 71, 73, 74, 75, 77, 78, 80, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 96, 97, 100, 101, 102], "bool": [1, 2, 3, 5, 12, 18, 19, 20, 22, 23, 25, 26, 28, 30, 31, 33, 34, 36, 37, 40, 41, 43, 48, 51, 52, 57, 59, 61, 62, 64, 65, 66, 67, 69, 71, 73, 74, 78], "is_valid": 1, "whether": [1, 3, 5, 10, 12, 13, 18, 19, 20, 22, 23, 25, 26, 28, 30, 31, 33, 37, 40, 41, 43, 52, 57, 58, 59, 61, 62, 78, 83, 84, 86, 87, 89, 90, 91, 92, 93, 100, 102], "from": [1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 16, 18, 22, 23, 27, 30, 31, 32, 33, 35, 36, 37, 38, 40, 41, 42, 43, 46, 48, 49, 50, 51, 52, 57, 59, 61, 64, 65, 66, 67, 69, 70, 75, 77, 78, 79, 84, 87, 89, 90, 91, 92, 95, 96, 97, 98, 99, 101, 102], "perfect": [1, 2, 36, 69, 93, 97], "exactli": [1, 3, 10, 36, 37, 41, 43, 60, 66, 85, 86, 87, 89, 90, 93], "yield": [1, 37, 41], "between": [1, 5, 10, 15, 16, 21, 22, 24, 26, 29, 32, 36, 37, 38, 39, 40, 41, 43, 44, 45, 47, 50, 55, 57, 58, 61, 64, 66, 67, 69, 70, 73, 77, 78, 80, 83, 84, 85, 86, 87, 89, 90, 93, 95, 96, 97, 98, 100, 101, 102], "below": [1, 3, 4, 5, 10, 36, 37, 40, 41, 43, 45, 48, 57, 58, 59, 64, 65, 73, 77, 80, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102], "we": [1, 2, 3, 5, 7, 10, 13, 22, 37, 40, 41, 43, 48, 52, 53, 56, 57, 64, 65, 67, 79, 80, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102], "loop": [1, 3, 46, 52, 87, 97], "implement": [1, 2, 3, 9, 14, 22, 37, 38, 40, 41, 46, 52, 69, 79, 82, 84, 85, 89, 98, 99], "what": [1, 5, 9, 10, 16, 33, 36, 38, 40, 43, 57, 58, 62, 64, 82, 83, 84, 85, 86, 87, 89, 90, 95, 96, 97, 98, 100, 101, 102], "doe": [1, 2, 3, 7, 10, 40, 41, 43, 48, 53, 64, 65, 69, 71, 73, 77, 83, 84, 85, 86, 87, 89, 90, 96, 100, 101], "do": [1, 2, 5, 9, 10, 36, 40, 41, 52, 53, 66, 67, 71, 82, 83, 84, 85, 86, 87, 89, 90, 95, 96, 97, 98, 100, 101, 102], "fast": 1, "explain": [1, 10], "python": [1, 2, 41, 56, 69, 83, 84, 85, 86, 87, 89, 90, 91, 93, 98], "pseudocod": [1, 99], "happen": [1, 10, 43, 59, 90, 95, 101], "n": [1, 2, 3, 5, 7, 36, 37, 40, 41, 43, 45, 46, 47, 48, 50, 51, 52, 57, 58, 59, 61, 62, 64, 65, 66, 67, 69, 70, 71, 73, 74, 77, 82, 83, 84, 87, 90, 91, 92, 95, 96, 97, 100, 101, 102], "without": [1, 2, 5, 9, 10, 12, 14, 20, 37, 41, 61, 69, 79, 83, 84, 90, 92, 93, 97, 98], "ani": [1, 2, 3, 5, 7, 9, 10, 12, 13, 14, 16, 18, 19, 20, 22, 23, 25, 26, 27, 28, 30, 31, 36, 37, 40, 41, 43, 45, 47, 50, 51, 52, 56, 57, 59, 61, 62, 64, 65, 67, 69, 71, 73, 74, 79, 82, 83, 84, 85, 86, 87, 89, 90, 92, 95, 96, 97, 98, 99, 100, 101], "distinct": [1, 18, 52, 102], "natur": [1, 10, 95, 98], "number": [1, 2, 3, 4, 5, 7, 8, 10, 12, 13, 16, 18, 19, 20, 22, 23, 25, 26, 28, 30, 31, 33, 34, 36, 37, 38, 40, 41, 43, 46, 47, 48, 49, 50, 51, 52, 57, 58, 59, 61, 62, 64, 65, 66, 67, 69, 70, 71, 73, 74, 77, 78, 80, 84, 85, 86, 87, 89, 90, 92, 93, 95, 96, 97, 101, 102], "0": [1, 2, 3, 4, 5, 7, 10, 12, 18, 19, 20, 22, 23, 25, 26, 27, 28, 30, 31, 32, 36, 37, 38, 40, 41, 42, 43, 45, 46, 47, 48, 49, 50, 51, 52, 57, 58, 59, 61, 62, 64, 65, 66, 67, 69, 70, 71, 73, 74, 75, 77, 78, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102], "count_joint": 1, "len": [1, 2, 3, 7, 36, 40, 46, 51, 52, 53, 66, 67, 69, 82, 83, 85, 86, 87, 90, 91, 92, 93, 95, 96, 97, 98, 100, 102], "y": [1, 2, 3, 5, 8, 18, 30, 31, 41, 46, 48, 52, 53, 56, 65, 69, 70, 83, 84, 85, 86, 89, 92, 93, 95, 96, 98, 100], "round": [1, 40, 43, 52, 69, 92, 100], "astyp": [1, 95], "int": [1, 2, 3, 4, 5, 7, 16, 18, 19, 20, 22, 23, 25, 26, 27, 28, 30, 31, 33, 36, 37, 38, 40, 41, 43, 48, 49, 50, 51, 52, 53, 58, 59, 61, 65, 66, 67, 69, 71, 73, 74, 75, 78, 84, 85, 87, 97, 98], "rang": [1, 3, 5, 7, 12, 46, 48, 50, 52, 65, 69, 70, 87, 91, 92, 93, 95, 96, 97, 98, 100, 101, 102], "idx_flip": 1, "where": [1, 2, 3, 5, 7, 10, 12, 13, 16, 22, 36, 40, 43, 46, 47, 48, 49, 50, 51, 52, 53, 57, 58, 59, 61, 62, 64, 65, 66, 67, 69, 70, 71, 73, 74, 75, 77, 83, 84, 87, 89, 90, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102], "pragma": 1, "cover": [1, 3, 80, 91, 92], "choic": [1, 8, 43, 50, 87, 92, 96, 98], "replac": [1, 51, 56, 67, 82, 83, 85, 86, 87, 90, 91, 92, 95, 98], "max_trace_prob": 1, "min_trace_prob": 1, "1e": [1, 3, 67, 84, 85, 86], "05": [1, 10, 26, 30, 51, 65, 69, 75, 77, 89, 91, 92, 93, 97], "max_noise_r": 1, "99999": 1, "min_noise_r": 1, "valid_noise_matrix": [1, 85, 86, 93, 95, 96], "none": [1, 2, 3, 4, 5, 7, 12, 13, 16, 18, 19, 20, 22, 23, 25, 26, 27, 28, 30, 31, 33, 34, 36, 37, 38, 40, 41, 42, 43, 45, 46, 47, 48, 49, 51, 52, 53, 56, 57, 58, 59, 60, 61, 64, 65, 66, 67, 69, 71, 73, 74, 77, 78, 85, 86, 87, 92, 93, 95, 96, 101], "frac_zero_noise_r": 1, "seed": [1, 2, 3, 10, 26, 39, 41, 48, 69, 82, 84, 85, 86, 89, 91, 93, 95, 96], "max_it": [1, 83, 84, 90, 98], "10000": [1, 40, 91, 92], "x": [1, 2, 3, 5, 10, 18, 19, 20, 22, 23, 25, 26, 28, 30, 31, 36, 37, 38, 41, 43, 45, 46, 48, 51, 52, 53, 56, 57, 59, 65, 66, 67, 69, 71, 82, 83, 84, 85, 86, 87, 89, 91, 92, 93, 95, 96, 98, 100], "diagon": [1, 3, 5, 43, 46, 52], "equal": [1, 3, 10, 12, 59, 64, 74, 99], "creat": [1, 2, 9, 16, 18, 37, 40, 41, 43, 52, 69, 79, 83, 84, 87, 89, 90, 92, 101, 102], "impli": [1, 10, 36, 58, 65], "float": [1, 2, 10, 18, 19, 20, 22, 23, 25, 26, 27, 28, 30, 31, 36, 37, 38, 39, 40, 41, 43, 45, 47, 48, 50, 51, 52, 57, 58, 59, 61, 64, 65, 69, 73, 77, 84, 85, 86, 93, 95, 96], "entri": [1, 3, 5, 36, 37, 41, 43, 45, 49, 50, 52, 57, 58, 59, 62, 82, 83, 89, 90, 93, 96, 97, 100], "maximum": [1, 10, 66, 74, 78, 101], "minimum": [1, 8, 10, 20, 43, 45, 59, 64, 77], "noise_r": 1, "non": [1, 2, 3, 5, 7, 9, 16, 26, 37, 41, 43, 64, 69, 85, 92, 93, 95, 97, 98], "default": [1, 2, 3, 4, 5, 7, 10, 14, 16, 28, 30, 33, 36, 37, 38, 40, 41, 43, 45, 46, 48, 52, 56, 57, 58, 59, 61, 62, 64, 65, 66, 67, 69, 70, 71, 73, 74, 75, 77, 78, 85, 87, 92, 100, 101], "If": [1, 2, 3, 4, 5, 10, 12, 13, 16, 26, 28, 34, 36, 37, 40, 41, 43, 45, 46, 48, 51, 52, 56, 57, 58, 59, 62, 64, 65, 66, 69, 70, 71, 73, 74, 77, 78, 79, 80, 82, 83, 84, 85, 87, 89, 90, 92, 93, 95, 96, 97, 98, 100, 101, 102], "have": [1, 2, 3, 4, 5, 7, 9, 10, 16, 21, 24, 26, 29, 36, 37, 39, 40, 41, 43, 46, 48, 52, 56, 57, 58, 59, 62, 64, 65, 66, 67, 69, 70, 74, 78, 79, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 95, 96, 97, 98, 100, 101, 102], "all": [1, 2, 3, 5, 7, 8, 9, 10, 13, 14, 16, 22, 33, 36, 37, 40, 41, 42, 43, 46, 48, 49, 51, 52, 56, 57, 58, 59, 60, 61, 64, 65, 66, 67, 69, 71, 73, 74, 75, 77, 78, 79, 80, 82, 83, 84, 85, 87, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102], "necessari": [1, 2, 3, 4, 7, 10, 12, 51, 85], "In": [1, 2, 3, 5, 10, 36, 37, 40, 41, 56, 57, 58, 60, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 96, 97, 98, 99, 100, 101, 102], "particular": [1, 5, 6, 10, 13, 14, 16, 19, 20, 22, 26, 27, 28, 31, 37, 41, 52, 57, 61, 65, 69, 74, 78, 79, 82, 83, 84, 86, 90, 92, 95, 96, 98, 100], "satisfi": [1, 3, 36], "requir": [1, 2, 5, 7, 8, 9, 10, 11, 12, 30, 35, 37, 38, 39, 40, 41, 43, 46, 52, 55, 56, 59, 66, 67, 69, 71, 79, 80, 84, 91, 92, 93, 99], "argument": [1, 2, 3, 5, 10, 16, 23, 27, 30, 31, 32, 37, 40, 41, 42, 43, 48, 53, 56, 57, 58, 59, 61, 64, 65, 66, 67, 69, 73, 74, 75, 77, 83, 86, 87, 90, 91, 92, 96, 97, 100, 102], "when": [1, 2, 3, 5, 10, 12, 14, 23, 26, 37, 41, 43, 46, 48, 52, 56, 59, 61, 62, 64, 66, 67, 69, 70, 82, 83, 85, 86, 87, 89, 90, 95, 99, 100, 101, 102], "The": [1, 2, 3, 4, 5, 7, 8, 10, 12, 13, 14, 16, 18, 19, 20, 22, 23, 25, 26, 27, 28, 30, 31, 32, 33, 34, 36, 37, 40, 41, 42, 43, 45, 46, 47, 48, 49, 50, 52, 56, 57, 58, 59, 62, 64, 65, 66, 67, 69, 71, 74, 75, 77, 79, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 94, 95, 96, 97, 98, 99, 100, 101, 102], "rate": [1, 2, 3, 10, 38, 52, 84, 102], "set": [1, 2, 3, 5, 9, 10, 12, 13, 16, 17, 18, 19, 20, 22, 23, 25, 26, 27, 28, 30, 31, 33, 36, 37, 40, 41, 43, 47, 48, 50, 52, 56, 57, 59, 62, 64, 65, 66, 67, 69, 71, 73, 74, 82, 83, 85, 86, 89, 90, 92, 95, 96, 98, 99, 100, 101, 102], "note": [1, 2, 3, 7, 8, 10, 12, 27, 31, 34, 37, 40, 41, 42, 43, 48, 52, 56, 57, 62, 64, 65, 66, 67, 69, 70, 74, 80, 82, 83, 84, 85, 86, 87, 89, 90, 91, 93, 95, 96, 97, 98, 100, 101, 102], "you": [1, 2, 3, 5, 7, 9, 10, 14, 16, 36, 37, 39, 40, 41, 43, 48, 55, 56, 57, 59, 62, 64, 65, 66, 67, 69, 70, 71, 74, 75, 78, 79, 80, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102], "high": [1, 2, 16, 40, 43, 52, 64, 67, 69, 82, 83, 85, 86, 87, 91, 93, 97, 100, 101, 102], "mai": [1, 2, 3, 4, 5, 10, 13, 21, 22, 24, 29, 32, 36, 37, 39, 40, 41, 43, 46, 48, 52, 57, 58, 62, 64, 65, 66, 67, 69, 71, 74, 78, 80, 83, 85, 86, 87, 89, 90, 91, 92, 93, 95, 96, 97, 99, 100, 101, 102], "imposs": [1, 10, 93], "also": [1, 2, 3, 5, 7, 9, 10, 22, 34, 36, 37, 40, 41, 43, 48, 51, 56, 57, 66, 69, 74, 77, 78, 79, 82, 83, 84, 85, 86, 87, 89, 90, 92, 93, 95, 96, 97, 99, 100, 101, 102], "low": [1, 10, 52, 57, 79, 85, 86, 90, 93, 97, 101], "zero": [1, 3, 5, 37, 41, 45, 52, 53, 85, 87, 96, 97, 98], "forc": [1, 2, 3, 5, 41, 85, 102], "instead": [1, 2, 3, 10, 13, 16, 33, 36, 37, 40, 41, 43, 46, 52, 56, 57, 59, 61, 65, 66, 67, 69, 70, 73, 75, 77, 80, 82, 83, 84, 87, 89, 90, 92, 93, 96, 97, 98, 100, 101, 102], "onli": [1, 2, 3, 4, 5, 7, 10, 16, 23, 26, 30, 36, 37, 40, 41, 42, 43, 45, 46, 51, 52, 53, 56, 57, 66, 67, 69, 71, 73, 77, 78, 79, 83, 84, 85, 86, 87, 90, 95, 96, 97, 98, 99, 100, 101, 102], "guarante": [1, 3, 5, 15, 21, 24, 29, 37, 39, 41, 44, 46, 55, 80], "produc": [1, 2, 5, 9, 10, 16, 48, 57, 67, 69, 71, 73, 79, 82, 83, 84, 87, 89, 90, 92, 93, 95, 96, 97, 98, 99, 101, 102], "higher": [1, 5, 10, 36, 43, 45, 46, 48, 50, 56, 57, 58, 69, 86, 90, 92, 97], "opposit": [1, 102], "occur": [1, 3, 10, 36, 51, 64, 85, 86, 87, 92, 98], "small": [1, 3, 10, 36, 40, 48, 52, 58, 65, 83, 87, 90, 91, 96, 98], "numpi": [1, 3, 4, 5, 7, 10, 12, 18, 31, 32, 40, 41, 42, 48, 50, 51, 53, 56, 61, 64, 69, 70, 75, 77, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 95, 96, 97, 98, 100, 101, 102], "max": [1, 43, 66, 67, 86, 87, 98], "tri": [1, 37, 41, 99], "befor": [1, 2, 3, 37, 41, 50, 52, 66, 69, 74, 82, 83, 90, 92, 93, 95, 98, 100], "option": [1, 2, 3, 4, 5, 7, 8, 9, 12, 13, 16, 23, 26, 30, 36, 37, 40, 41, 43, 46, 48, 51, 52, 53, 56, 57, 58, 59, 61, 62, 64, 65, 66, 67, 69, 71, 73, 74, 77, 78, 79, 82, 84, 85, 86, 87, 89, 92, 93, 96, 100, 101], "left": [1, 2, 43, 45, 50, 52, 59, 62, 65, 85, 86, 96, 97, 98, 101], "stochast": 1, "exceed": 1, "m": [1, 5, 37, 41, 47, 48, 57, 62, 64, 65, 66, 85, 86, 91, 95, 96, 97, 102], "max_prob": 1, "min_prob": 1, "dirichlet": 1, "ones": [1, 37, 41, 56, 92, 93, 101], "length": [1, 5, 12, 26, 27, 36, 38, 43, 52, 59, 62, 66, 67, 69, 71, 74, 78, 82, 84, 96, 98, 101, 102], "must": [1, 2, 3, 4, 5, 7, 16, 36, 37, 38, 39, 41, 43, 46, 48, 49, 52, 55, 56, 57, 58, 59, 66, 67, 69, 71, 73, 74, 75, 77, 78, 84, 95, 99, 101, 102], "max_balls_per_bin": 1, "min_balls_per_bin": 1, "uniformli": 1, "integ": [1, 2, 3, 10, 12, 36, 40, 43, 49, 52, 53, 57, 59, 65, 71, 73, 74, 75, 77, 78, 82, 83, 84, 92, 95, 96, 97, 101, 102], "ball": [1, 91], "bin": [1, 3, 59, 85, 86, 98], "ensur": [1, 2, 10, 37, 41, 52, 53, 56, 64, 67, 69, 82, 83, 84, 85, 86, 87, 90, 92, 93, 98, 99, 100], "most": [1, 3, 5, 7, 10, 16, 36, 40, 43, 48, 56, 57, 58, 59, 62, 64, 65, 66, 67, 70, 73, 77, 78, 79, 80, 82, 83, 84, 85, 86, 89, 90, 92, 93, 95, 96, 97, 98, 100, 101], "least": [1, 4, 10, 18, 31, 36, 40, 57, 58, 64, 67, 77, 86, 87, 92, 95, 98, 101], "int_arrai": [1, 52], "can": [2, 3, 5, 7, 8, 9, 13, 14, 16, 33, 34, 36, 37, 38, 39, 40, 41, 43, 47, 48, 49, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 69, 70, 71, 74, 75, 78, 79, 80, 82, 83, 84, 85, 87, 89, 90, 96, 97, 98, 99, 100, 101, 102], "model": [2, 3, 4, 5, 9, 10, 16, 18, 30, 32, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 51, 56, 57, 58, 59, 61, 62, 64, 65, 66, 67, 69, 70, 71, 73, 74, 75, 77, 78, 80, 85, 86, 91, 94, 99, 101, 102], "For": [2, 3, 5, 7, 9, 10, 11, 16, 22, 35, 36, 37, 40, 41, 43, 46, 48, 52, 56, 57, 58, 59, 61, 62, 64, 65, 66, 67, 69, 71, 73, 75, 77, 78, 79, 82, 83, 84, 86, 87, 89, 91, 92, 93, 95, 96, 97, 98, 99, 101, 102], "regular": [2, 3, 40, 56], "multi": [2, 3, 4, 10, 32, 36, 37, 40, 41, 43, 47, 48, 49, 52, 53, 58, 59, 60, 61, 66, 67, 79, 92, 93, 94], "task": [2, 5, 7, 10, 11, 12, 14, 15, 16, 25, 30, 33, 36, 40, 46, 48, 49, 50, 52, 57, 59, 67, 69, 79, 83, 84, 90, 91, 92, 93, 96, 98, 100, 101, 102], "cleanlearn": [2, 3, 10, 23, 30, 37, 52, 56, 68, 69, 70, 79, 80, 82, 83, 100], "wrap": [2, 37, 41, 56, 66, 69, 79, 82, 83, 85, 86, 89, 90, 93, 100], "instanc": [2, 3, 5, 6, 7, 10, 13, 16, 18, 19, 20, 22, 23, 25, 26, 27, 28, 30, 31, 33, 37, 41, 48, 56, 65, 66, 69, 74, 82, 83, 84, 85, 86, 87, 89, 90, 92, 93, 97], "sklearn": [2, 3, 4, 5, 8, 10, 18, 31, 36, 41, 48, 52, 56, 66, 69, 70, 79, 82, 83, 84, 85, 86, 87, 89, 90, 92, 93, 95, 96, 98, 99, 100], "classifi": [2, 3, 41, 48, 52, 57, 60, 66, 67, 79, 80, 82, 83, 84, 89, 90, 92, 95, 96, 98, 99, 101, 102], "adher": [2, 41, 69], "estim": [2, 3, 4, 5, 9, 13, 22, 36, 40, 41, 43, 46, 52, 57, 58, 59, 64, 66, 69, 71, 73, 77, 79, 80, 84, 85, 86, 87, 89, 90, 92, 94, 97, 98, 99, 100, 101, 102], "api": [2, 3, 14, 56, 62, 65, 66, 69, 80, 92, 100], "defin": [2, 3, 5, 7, 10, 14, 22, 36, 37, 38, 40, 41, 43, 67, 69, 71, 84, 85, 86, 89, 92, 95, 98, 102], "four": [2, 10, 91, 93, 102], "clf": [2, 3, 5, 48, 69, 79, 82, 89, 92, 93, 96], "fit": [2, 3, 5, 8, 10, 18, 39, 41, 55, 56, 66, 68, 69, 79, 82, 83, 85, 86, 87, 89, 90, 92, 93, 95, 96, 98, 99, 100, 102], "sample_weight": [2, 41, 69, 93], "predict_proba": [2, 5, 36, 39, 41, 48, 55, 56, 82, 84, 85, 86, 89, 90, 92, 93, 95, 96, 98], "predict": [2, 3, 5, 8, 9, 10, 16, 22, 23, 25, 28, 30, 32, 34, 36, 39, 40, 41, 42, 43, 45, 46, 48, 49, 51, 52, 55, 56, 57, 58, 59, 61, 62, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 77, 78, 79, 80, 83, 91, 92, 93, 94, 98, 100, 101, 102], "score": [2, 3, 4, 5, 7, 10, 13, 18, 19, 20, 22, 23, 25, 26, 27, 28, 30, 31, 36, 40, 42, 43, 45, 48, 50, 57, 58, 59, 61, 62, 64, 65, 66, 67, 68, 69, 70, 73, 75, 77, 79, 80, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 98, 100], "data": [2, 3, 4, 5, 7, 8, 9, 11, 13, 14, 15, 16, 18, 19, 20, 22, 23, 25, 26, 27, 28, 30, 31, 32, 33, 36, 38, 39, 40, 41, 42, 43, 48, 49, 52, 55, 56, 57, 58, 59, 60, 64, 66, 67, 68, 69, 74, 75, 76, 77, 78, 80, 83, 87, 88, 94, 99], "e": [2, 3, 5, 10, 12, 22, 32, 36, 37, 40, 41, 43, 46, 48, 49, 52, 53, 57, 58, 59, 60, 62, 65, 66, 67, 69, 71, 79, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100], "featur": [2, 3, 4, 5, 8, 10, 16, 18, 19, 23, 26, 27, 28, 30, 31, 48, 52, 66, 69, 79, 82, 85, 86, 89, 90, 92, 93, 95, 96, 100], "element": [2, 3, 5, 36, 42, 43, 45, 52, 57, 59, 67, 74, 75, 77, 83, 84, 90, 92, 102], "first": [2, 5, 10, 17, 26, 27, 36, 40, 48, 52, 57, 58, 62, 65, 67, 69, 82, 83, 84, 85, 87, 89, 92, 95, 96, 97, 98, 100, 101, 102], "index": [2, 10, 26, 36, 43, 51, 52, 53, 58, 67, 69, 74, 77, 78, 83, 84, 85, 86, 87, 89, 91, 92, 93, 95, 96, 97, 98, 100, 101, 102], "should": [2, 3, 5, 7, 10, 14, 22, 26, 31, 32, 36, 37, 40, 41, 43, 45, 46, 48, 50, 51, 52, 56, 57, 58, 61, 62, 64, 65, 66, 67, 69, 70, 74, 75, 77, 78, 82, 83, 84, 85, 86, 87, 89, 90, 93, 95, 96, 97, 98, 99, 100, 101, 102], "correspond": [2, 3, 5, 10, 13, 14, 16, 18, 19, 20, 22, 23, 25, 26, 27, 28, 30, 31, 34, 36, 37, 40, 41, 42, 43, 45, 46, 48, 51, 52, 57, 58, 59, 61, 62, 64, 65, 66, 67, 69, 71, 74, 75, 77, 78, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 95, 96, 97, 98, 100, 101, 102], "differ": [2, 5, 7, 10, 13, 15, 21, 24, 26, 27, 29, 36, 37, 39, 40, 41, 43, 44, 48, 52, 53, 55, 57, 62, 64, 66, 69, 82, 84, 85, 86, 87, 89, 90, 93, 95, 96, 98, 99, 100], "sampl": [2, 3, 5, 8, 10, 16, 20, 43, 45, 48, 59, 62, 65, 67, 69, 70, 79, 80, 83, 91, 92, 93, 94, 96, 97, 100, 101, 102], "size": [2, 10, 31, 37, 40, 41, 43, 48, 59, 64, 65, 69, 71, 73, 83, 87, 89, 92, 93, 95, 96, 97, 99, 101], "here": [2, 5, 7, 10, 14, 40, 43, 46, 56, 57, 58, 59, 61, 62, 65, 66, 77, 79, 80, 82, 83, 84, 85, 86, 87, 89, 90, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102], "re": [2, 5, 37, 41, 51, 57, 69, 79, 82, 83, 84, 85, 89, 90, 92, 100, 101, 102], "weight": [2, 10, 37, 38, 41, 48, 57, 64, 67, 69, 83, 84, 85, 86, 90], "loss": [2, 38, 56, 67, 69, 87], "while": [2, 3, 10, 37, 40, 41, 47, 48, 52, 69, 79, 87, 92, 93, 95, 96, 100], "train": [2, 3, 4, 5, 9, 10, 16, 18, 32, 37, 38, 39, 41, 48, 52, 56, 57, 62, 65, 66, 69, 70, 80, 85, 86, 87, 89, 90, 91, 93, 95, 96, 97, 99, 101, 102], "support": [2, 3, 4, 5, 12, 14, 33, 34, 40, 42, 48, 52, 53, 56, 66, 67, 77, 79, 80, 84, 85, 86, 87, 92], "your": [2, 3, 5, 9, 10, 16, 36, 37, 39, 40, 41, 43, 48, 52, 55, 56, 57, 58, 59, 61, 66, 67, 69, 70, 71, 73, 74, 80, 82, 83, 84, 87, 89, 91, 95, 96, 97, 98, 99, 100, 101, 102], "recommend": [2, 5, 7, 10, 13, 16, 40, 43, 57, 85, 86, 87, 92, 99, 100], "furthermor": 2, "correctli": [2, 3, 10, 36, 37, 41, 43, 46, 53, 58, 59, 64, 65, 69, 71, 83, 90, 92, 96, 97, 100, 101], "clonabl": [2, 69], "via": [2, 5, 7, 10, 13, 16, 18, 22, 36, 38, 40, 41, 48, 52, 57, 62, 65, 66, 67, 69, 70, 73, 77, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 96, 97, 98, 99, 100, 101, 102], "base": [2, 3, 4, 5, 7, 10, 12, 13, 16, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 30, 31, 32, 33, 34, 37, 40, 41, 42, 43, 46, 47, 48, 50, 51, 52, 53, 56, 57, 58, 59, 61, 64, 66, 67, 69, 70, 73, 75, 77, 82, 84, 85, 86, 87, 89, 90, 91, 93, 95, 96, 97, 98, 100, 101, 102], "clone": [2, 69, 96], "intern": [2, 3, 7, 10, 11, 12, 13, 14, 16, 18, 19, 20, 22, 23, 25, 26, 27, 28, 30, 31, 32, 33, 34, 40, 45, 46, 47, 48, 49, 50, 51, 52, 53, 61, 65, 69, 75, 80, 84, 85, 92, 93, 95, 96, 97, 98, 100, 102], "multipl": [2, 3, 5, 12, 13, 34, 36, 43, 51, 57, 58, 59, 61, 64, 65, 69, 79, 85, 86, 87, 92, 94, 96, 97, 100], "g": [2, 3, 5, 10, 12, 22, 32, 36, 37, 41, 43, 49, 52, 59, 60, 62, 65, 66, 67, 69, 79, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100], "manual": [2, 69, 82, 83, 84, 92, 98, 99, 100, 102], "pytorch": [2, 37, 38, 41, 69, 79, 84, 92, 94, 96, 101], "call": [2, 3, 5, 6, 10, 13, 14, 18, 19, 20, 22, 23, 25, 26, 27, 28, 30, 31, 37, 41, 48, 52, 56, 66, 69, 83, 84, 85, 86, 90, 92, 93, 96, 98, 99, 100, 101, 102], "__init__": [2, 38, 69, 87], "independ": [2, 3, 10, 58, 69, 90, 99, 100, 102], "compat": [2, 37, 40, 41, 56, 69, 70, 73, 77, 79, 82, 83, 92, 99, 100], "neural": [2, 38, 56, 66, 69, 84, 87, 92, 96, 98, 100], "network": [2, 37, 38, 41, 56, 66, 69, 83, 84, 87, 90, 92, 96, 98, 100], "typic": [2, 37, 41, 66, 69, 82, 83, 84, 86, 87, 89, 90, 98, 99], "initi": [2, 3, 13, 18, 37, 41, 57, 69, 82, 90, 92], "insid": [2, 41, 69, 92, 93], "There": [2, 3, 7, 79, 93, 95], "two": [2, 3, 10, 18, 26, 36, 37, 40, 41, 49, 52, 62, 64, 65, 80, 83, 85, 86, 87, 89, 90, 92, 93, 96, 100, 101, 102], "new": [2, 7, 9, 10, 14, 22, 37, 40, 41, 47, 51, 52, 57, 69, 83, 84, 85, 90, 91, 92, 98, 99, 102], "notion": 2, "confid": [2, 3, 10, 22, 36, 40, 43, 46, 48, 52, 57, 58, 59, 62, 64, 65, 66, 67, 69, 73, 77, 79, 82, 87, 89, 90, 93, 95, 96, 97, 99, 101, 102], "packag": [2, 5, 7, 9, 10, 11, 15, 35, 39, 43, 44, 52, 55, 56, 62, 65, 69, 79, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 95, 96, 97, 98, 100, 101, 102], "prune": [2, 3, 43, 59, 69, 80, 97], "everyth": [2, 65, 93], "els": [2, 65, 85, 87, 91, 92, 95, 96, 97], "mathemat": [2, 3, 10, 46, 96], "keep": [2, 13, 14, 52, 79, 85, 91, 92, 101], "belong": [2, 3, 10, 36, 43, 45, 46, 58, 59, 60, 61, 66, 67, 71, 75, 77, 78, 86, 87, 93, 96, 98, 101, 102], "2": [2, 3, 4, 5, 7, 12, 18, 19, 20, 22, 23, 25, 26, 27, 28, 30, 31, 36, 37, 38, 40, 41, 43, 45, 46, 47, 48, 49, 50, 51, 52, 56, 58, 59, 61, 62, 65, 66, 67, 69, 70, 74, 75, 77, 78, 91, 92, 99], "error": [2, 3, 5, 10, 37, 41, 42, 43, 45, 46, 52, 58, 59, 61, 62, 64, 65, 67, 69, 71, 73, 74, 77, 80, 82, 84, 85, 86, 89, 90, 91, 94], "erron": [2, 3, 36, 43, 46, 52, 58, 59, 67, 69, 70, 71, 98, 100], "import": [2, 3, 4, 5, 7, 8, 10, 12, 13, 14, 18, 19, 20, 22, 23, 25, 26, 28, 30, 31, 33, 36, 40, 42, 48, 50, 51, 57, 61, 64, 69, 70, 75, 77, 78, 79, 82, 83, 89, 90, 92, 96, 97, 98, 100, 101, 102], "linear_model": [2, 5, 36, 52, 69, 79, 83, 84, 85, 86, 90, 92, 93, 95, 98], "logisticregress": [2, 3, 5, 36, 52, 79, 83, 84, 85, 86, 90, 92, 93, 95, 98], "logreg": 2, "cl": [2, 14, 30, 69, 79, 82, 83, 92, 93, 100], "pass": [2, 3, 5, 8, 10, 12, 13, 14, 16, 23, 30, 33, 37, 40, 41, 43, 47, 48, 52, 56, 57, 59, 66, 67, 69, 75, 79, 83, 84, 85, 86, 90, 91, 92, 93, 95, 97, 98, 100], "x_train": [2, 82, 85, 86, 93, 95, 96, 100], "labels_maybe_with_error": 2, "had": [2, 3, 69, 97], "issu": [2, 3, 4, 5, 6, 8, 11, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 36, 37, 39, 40, 41, 42, 43, 55, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 83, 88, 94, 95, 99, 100], "pred": [2, 43, 52, 82, 83, 99, 100], "x_test": [2, 82, 85, 86, 93, 96, 100], "might": [2, 5, 57, 69, 74, 82, 83, 85, 86, 87, 92, 97], "case": [2, 3, 10, 13, 36, 48, 57, 69, 82, 83, 84, 85, 86, 87, 89, 91, 92, 93, 98, 100, 102], "standard": [2, 3, 5, 30, 36, 43, 56, 58, 59, 61, 67, 69, 79, 82, 85, 86, 89, 91, 93, 97], "adapt": [2, 37, 39, 52, 55, 69, 98], "skorch": [2, 69, 79, 92], "kera": [2, 55, 62, 65, 69, 79, 92, 97], "scikera": [2, 56, 69, 92], "open": [2, 40, 91, 97, 102], "doesn": [2, 69, 79], "t": [2, 3, 4, 7, 10, 17, 27, 37, 38, 40, 41, 42, 43, 48, 50, 51, 61, 66, 67, 69, 75, 77, 78, 79, 85, 86, 87, 89, 90, 91, 93, 96, 97, 100, 102], "alreadi": [2, 5, 10, 16, 37, 40, 41, 46, 56, 57, 69, 79, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 95, 97, 98, 100], "exist": [2, 5, 10, 12, 18, 37, 40, 41, 51, 56, 62, 64, 66, 69, 79, 80, 82, 83, 85, 86, 90, 95, 102], "made": [2, 5, 16, 37, 41, 69, 82, 83, 87, 90, 92, 95, 97, 99, 100], "easi": [2, 11, 46, 69, 85, 86, 91, 92, 93, 96], "inherit": [2, 7, 38, 69], "baseestim": [2, 41, 69], "yourmodel": [2, 69], "def": [2, 7, 14, 37, 41, 56, 69, 83, 84, 85, 86, 87, 91, 92, 93, 95, 96, 98, 100, 102], "self": [2, 3, 5, 7, 10, 12, 13, 14, 16, 31, 37, 38, 40, 41, 43, 48, 66, 67, 69, 82, 83, 85, 87, 90, 91, 96, 101, 102], "refer": [2, 10, 16, 37, 41, 42, 58, 59, 61, 62, 64, 65, 69, 73, 74, 85, 86, 87, 89, 90, 92, 93, 96, 99, 100], "origin": [2, 5, 10, 41, 42, 43, 51, 52, 56, 58, 59, 62, 65, 66, 69, 70, 73, 75, 77, 82, 83, 85, 87, 89, 90, 92, 93, 97, 98, 100, 102], "total": [2, 3, 4, 36, 40, 52, 58, 78, 87, 92, 101], "state": [2, 3, 5, 37, 38, 41, 47, 69, 93, 96, 97, 102], "art": [2, 38, 93, 96], "northcutt": [2, 3, 36, 66, 67], "et": [2, 3, 36, 38, 66, 67], "al": [2, 3, 36, 38, 66, 67], "2021": [2, 3, 36, 66, 67], "weak": [2, 65], "supervis": [2, 10, 85, 86, 92, 95], "find": [2, 5, 9, 10, 13, 14, 16, 19, 20, 22, 23, 25, 26, 27, 28, 31, 32, 36, 37, 39, 40, 41, 42, 43, 47, 51, 52, 55, 62, 65, 66, 67, 69, 71, 75, 77, 80, 85, 94, 99], "uncertainti": [2, 10, 45, 66, 69, 92, 98, 100], "It": [2, 3, 5, 7, 10, 12, 13, 16, 22, 27, 30, 32, 33, 34, 37, 41, 43, 46, 48, 57, 64, 65, 69, 79, 83, 85, 86, 87, 90, 92, 93, 96, 99], "work": [2, 3, 7, 10, 12, 30, 36, 37, 40, 41, 43, 46, 51, 52, 53, 56, 57, 67, 69, 79, 80, 83, 85, 86, 91, 98, 100], "includ": [2, 3, 5, 7, 10, 13, 18, 19, 20, 22, 23, 25, 26, 28, 30, 31, 33, 36, 37, 39, 40, 41, 51, 52, 55, 57, 58, 61, 62, 66, 67, 69, 73, 74, 75, 77, 79, 80, 85, 86, 87, 89, 90, 92, 93, 96, 97, 98, 102], "deep": [2, 39, 41, 55, 56, 69, 90], "see": [2, 3, 5, 7, 10, 13, 14, 33, 36, 37, 40, 41, 42, 43, 48, 52, 56, 58, 59, 61, 62, 65, 66, 67, 69, 75, 77, 79, 80, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 95, 96, 97, 98, 100, 101, 102], "subfield": 2, "theori": [2, 93], "machin": [2, 5, 9, 10, 14, 16, 33, 39, 55, 69, 82, 83, 85, 86, 91, 95], "across": [2, 3, 5, 7, 10, 13, 22, 36, 40, 48, 58, 65, 66, 85, 86, 87, 89, 90, 91, 92, 93, 96, 97, 99, 100], "varieti": [2, 82, 83, 92], "like": [2, 3, 5, 6, 7, 10, 14, 32, 36, 37, 40, 41, 43, 46, 52, 56, 57, 58, 61, 62, 64, 67, 69, 70, 73, 74, 75, 77, 78, 79, 80, 82, 83, 84, 85, 86, 89, 90, 92, 93, 95, 96, 97, 98, 100, 101, 102], "pu": [2, 52], "input": [2, 3, 5, 10, 16, 26, 36, 37, 40, 41, 46, 48, 51, 52, 53, 56, 65, 69, 79, 80, 83, 84, 86, 87, 89, 90, 91, 92, 93, 95, 96, 97, 100, 101, 102], "discret": [2, 34, 43, 46, 52, 66, 67, 71, 73, 74], "vector": [2, 3, 4, 5, 10, 16, 43, 46, 48, 49, 52, 66, 67, 79, 83, 84, 85, 86, 87, 89, 90, 93, 96, 97, 98, 101, 102], "would": [2, 3, 5, 37, 40, 41, 43, 52, 59, 69, 79, 83, 85, 87, 92, 93, 98, 100, 102], "obtain": [2, 5, 8, 10, 16, 43, 57, 59, 62, 65, 67, 70, 84, 86, 90, 92, 95, 97, 99, 101, 102], "been": [2, 4, 36, 43, 46, 51, 52, 57, 58, 62, 64, 66, 67, 69, 84, 85, 89, 92, 93, 95, 96, 97, 98, 101, 102], "dure": [2, 10, 16, 66, 69, 82, 83, 84, 89, 90, 92, 93, 96, 99, 100, 102], "denot": [2, 3, 46, 48, 52, 59, 66, 67, 77], "tild": 2, "paper": [2, 4, 10, 57, 66, 75, 77, 91, 93, 95, 98, 100, 102], "cv_n_fold": [2, 3, 69, 83], "5": [2, 3, 4, 5, 8, 18, 19, 20, 22, 23, 25, 26, 28, 30, 31, 33, 36, 41, 43, 45, 47, 48, 52, 57, 58, 61, 62, 65, 69, 70, 77, 83, 85, 90, 91, 92, 96, 97, 98, 99, 101, 102], "converge_latent_estim": [2, 3], "pulearn": [2, 52], "find_label_issues_kwarg": [2, 10, 69, 80, 92, 93], "label_quality_scores_kwarg": [2, 10], "low_memori": [2, 59, 75, 92], "clean": [2, 64, 67, 69, 70, 79, 82, 83, 85, 86, 91, 100], "even": [2, 3, 7, 9, 10, 36, 40, 45, 46, 52, 69, 84, 92, 93, 95, 96, 97], "messi": [2, 69, 93], "ridden": [2, 69], "autom": [2, 9, 10, 69, 79, 86, 91, 92], "robust": [2, 46, 69, 86, 92], "prone": [2, 69], "out": [2, 3, 5, 10, 16, 28, 37, 41, 43, 48, 56, 59, 60, 62, 65, 66, 67, 69, 70, 78, 79, 80, 83, 91, 92, 93, 94, 96, 97, 98, 100, 101, 102], "current": [2, 3, 5, 7, 10, 13, 14, 22, 37, 41, 42, 43, 48, 57, 64, 69, 85, 86, 92, 95, 97], "intend": [2, 13, 14, 15, 16, 32, 33, 34, 44, 57, 73, 77, 84, 85, 86, 90, 93], "A": [2, 3, 4, 5, 7, 10, 12, 13, 14, 18, 19, 20, 22, 23, 25, 26, 27, 28, 30, 31, 32, 33, 36, 37, 38, 41, 43, 46, 47, 48, 49, 50, 51, 52, 56, 57, 58, 61, 64, 65, 66, 67, 69, 71, 73, 74, 78, 80, 82, 83, 84, 85, 87, 89, 90, 91, 92, 93, 95, 97, 99, 102], "follow": [2, 3, 10, 14, 30, 34, 36, 37, 40, 41, 48, 50, 57, 58, 62, 64, 65, 66, 69, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 95, 96, 97, 98, 100, 101, 102], "experiment": [2, 37, 38, 40, 41, 42, 59, 80, 92], "wrapper": [2, 56, 82, 83, 84, 100], "around": [2, 64, 85, 86, 97, 98, 102], "fasttext": [2, 55], "store": [2, 4, 5, 10, 12, 13, 18, 19, 20, 22, 23, 25, 26, 27, 28, 30, 31, 33, 37, 40, 41, 66, 69, 82, 83, 89, 90, 91, 92, 101, 102], "along": [2, 48, 59, 77, 85, 86, 87, 92, 98], "dimens": [2, 52, 71, 74, 87, 92, 98, 101], "select": [2, 9, 10, 26, 57, 67, 87, 92, 95, 98], "split": [2, 3, 5, 10, 12, 40, 48, 51, 52, 69, 82, 84, 85, 86, 87, 89, 90, 91, 93, 96, 99, 102], "cross": [2, 3, 10, 36, 43, 46, 47, 48, 59, 62, 65, 67, 69, 70, 80, 82, 83, 84, 85, 86, 89, 90, 91, 92, 93, 94, 96, 97, 100, 101, 102], "fold": [2, 3, 36, 43, 46, 69, 82, 84, 89, 91, 92, 97, 101], "By": [2, 36, 58, 59, 69, 85, 92, 101], "need": [2, 3, 10, 36, 37, 40, 41, 43, 58, 59, 61, 66, 69, 79, 83, 84, 85, 86, 90, 92, 93, 95, 96, 97, 101], "holdout": [2, 3, 69], "comput": [2, 3, 4, 5, 7, 8, 10, 19, 20, 22, 23, 26, 27, 28, 31, 36, 37, 38, 40, 41, 43, 45, 46, 47, 48, 52, 57, 58, 59, 61, 64, 65, 66, 67, 69, 70, 71, 73, 79, 80, 83, 85, 86, 91, 93, 94, 97, 98, 100, 101], "them": [2, 3, 5, 7, 9, 10, 11, 12, 27, 32, 35, 37, 39, 40, 41, 43, 55, 57, 66, 69, 80, 82, 83, 85, 86, 87, 89, 90, 92, 95, 96, 98, 100, 101, 102], "numer": [2, 3, 5, 10, 13, 22, 30, 34, 48, 64, 66, 69, 74, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 93, 95, 96, 98, 100], "consist": [2, 3, 37, 41, 52, 57, 101, 102], "latent": [2, 3, 46], "thei": [2, 3, 5, 15, 21, 24, 26, 29, 37, 38, 39, 41, 43, 44, 50, 52, 56, 59, 64, 67, 69, 70, 73, 77, 79, 83, 84, 85, 86, 87, 89, 90, 92, 93, 95, 98, 100, 102], "relat": [2, 3, 13, 19, 20, 26, 27, 28, 31, 46, 52, 58, 69, 86, 90], "close": [2, 3, 10, 40, 46, 66, 84, 85, 86, 87, 89, 90, 92, 93, 97], "form": [2, 3, 10, 37, 38, 41, 46, 51, 52, 67, 69, 92], "equival": [2, 3, 37, 41, 46, 66, 98, 100], "iter": [2, 3, 36, 37, 41, 43, 52, 58, 59, 69, 92, 95, 101], "enforc": [2, 37, 41, 52], "perfectli": [2, 36, 58, 93], "certain": [2, 3, 5, 37, 41, 56, 65, 69, 85, 86, 91, 97, 98], "dict": [2, 3, 5, 10, 12, 13, 14, 16, 18, 19, 20, 22, 23, 25, 26, 27, 28, 30, 31, 36, 37, 40, 41, 43, 47, 48, 52, 56, 57, 58, 59, 61, 62, 64, 65, 66, 67, 69, 77, 85, 86, 87, 92, 102], "keyword": [2, 3, 5, 10, 16, 23, 27, 30, 37, 40, 41, 43, 45, 48, 51, 56, 57, 59, 66, 67, 69, 75, 77, 85], "filter": [2, 3, 10, 40, 42, 51, 58, 60, 61, 63, 65, 72, 73, 74, 76, 77, 78, 79, 80, 82, 83, 84, 86, 87, 90, 91, 92, 96, 97, 100, 101, 102], "find_label_issu": [2, 3, 10, 30, 39, 40, 42, 43, 58, 59, 60, 61, 62, 63, 64, 65, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 82, 83, 92, 96, 97, 100, 101, 102], "particularli": [2, 79, 95, 98], "filter_bi": [2, 3, 40, 43, 59, 80, 92], "frac_nois": [2, 43, 59, 75, 92], "min_examples_per_class": [2, 43, 59, 86, 92, 93], "impact": [2, 4, 10, 85, 86, 87], "ml": [2, 4, 5, 9, 10, 15, 69, 79, 82, 83, 85, 86, 87, 89, 90, 95, 96, 100], "accuraci": [2, 38, 67, 82, 83, 84, 87, 92, 93, 95, 98, 100, 101], "n_job": [2, 40, 43, 59, 71, 73, 75, 92, 98, 101], "disabl": [2, 37, 41, 43, 98], "process": [2, 3, 7, 13, 16, 32, 37, 40, 41, 43, 51, 57, 59, 65, 71, 73, 75, 83, 84, 85, 92, 95, 99], "caus": [2, 43, 48, 85, 86, 92], "rank": [2, 3, 10, 36, 40, 42, 43, 48, 58, 59, 60, 62, 63, 65, 66, 68, 72, 74, 75, 76, 78, 79, 80, 82, 83, 85, 86, 91, 92, 96, 97, 98, 101, 102], "get_label_quality_scor": [2, 39, 40, 42, 43, 44, 48, 57, 59, 60, 61, 62, 63, 64, 67, 68, 70, 72, 73, 75, 76, 77, 80, 92, 93, 96, 97, 101, 102], "adjust_pred_prob": [2, 10, 61, 66, 67, 93], "control": [2, 5, 9, 10, 16, 40, 43, 57, 65, 66, 69, 75, 77, 85, 86, 91, 92], "how": [2, 3, 5, 10, 12, 13, 14, 16, 22, 36, 37, 38, 40, 41, 46, 52, 57, 58, 61, 62, 64, 66, 67, 69, 73, 77, 79, 82, 83, 85, 86, 87, 89, 90, 91, 97, 98, 99, 100, 101], "much": [2, 10, 36, 40, 43, 69, 92, 93, 95, 98], "output": [2, 3, 5, 10, 16, 32, 37, 38, 41, 46, 52, 56, 57, 58, 62, 64, 65, 66, 69, 73, 74, 77, 78, 79, 80, 83, 84, 85, 87, 90, 91, 92, 97, 98, 99, 100], "print": [2, 5, 7, 18, 19, 20, 22, 23, 25, 26, 27, 28, 30, 31, 33, 34, 36, 37, 40, 41, 43, 52, 57, 58, 59, 64, 66, 67, 69, 71, 73, 74, 78, 80, 82, 83, 84, 86, 87, 90, 91, 92, 93, 95, 96, 97, 98, 100, 101, 102], "suppress": [2, 40, 57, 64, 66, 67, 69, 71, 73, 74, 101, 102], "statement": [2, 40, 57, 64, 66, 67, 69, 71, 73, 74], "big": [2, 40, 59, 65, 69, 93], "limit": [2, 5, 16, 40, 59, 97, 101, 102], "memori": [2, 37, 40, 41, 59, 65, 71, 73, 85, 101], "label_issues_batch": [2, 39, 59, 92], "find_label_issues_batch": [2, 39, 40, 59, 92], "pred_prob": [2, 3, 5, 8, 10, 16, 23, 25, 26, 28, 31, 32, 36, 40, 42, 43, 45, 46, 47, 48, 49, 52, 53, 57, 58, 59, 61, 62, 65, 66, 67, 71, 73, 74, 75, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 95, 96, 97, 100], "threshold": [2, 3, 4, 7, 10, 18, 19, 20, 22, 28, 30, 31, 40, 64, 65, 66, 67, 73, 77, 85, 97, 98, 101, 102], "inverse_noise_matrix": [2, 3, 10, 46, 52, 80, 93], "label_issu": [2, 40, 43, 59, 62, 69, 71, 80, 82, 83, 84, 87, 90, 92, 93, 96, 100], "clf_kwarg": [2, 3, 10, 69], "clf_final_kwarg": [2, 69], "validation_func": [2, 3, 10], "correct": [2, 5, 9, 10, 36, 40, 43, 45, 57, 58, 59, 61, 62, 64, 65, 67, 69, 70, 73, 77, 79, 84, 87, 89, 90, 93, 95, 97, 99, 100], "result": [2, 3, 9, 10, 13, 16, 18, 19, 20, 22, 23, 25, 26, 27, 28, 30, 31, 37, 40, 41, 43, 45, 50, 52, 59, 61, 62, 65, 67, 69, 70, 71, 73, 77, 82, 83, 84, 85, 86, 87, 89, 90, 92, 93, 95, 96, 100, 101, 102], "identifi": [2, 3, 5, 7, 9, 10, 12, 16, 27, 33, 36, 40, 42, 43, 59, 62, 65, 67, 69, 70, 71, 74, 75, 77, 78, 79, 82, 83, 84, 85, 86, 87, 89, 90, 91, 93, 96, 98, 100, 101, 102], "final": [2, 10, 69, 82, 89, 97, 99, 100], "remain": [2, 69, 80, 82, 83, 87, 96, 100, 102], "datasetlik": [2, 52, 69], "beyond": [2, 5, 7, 9, 10, 11, 35, 79, 82, 83, 100, 101], "pd": [2, 3, 5, 7, 13, 18, 19, 20, 22, 23, 25, 26, 28, 30, 31, 36, 47, 56, 57, 58, 69, 77, 82, 83, 84, 85, 86, 89, 90, 92, 93, 95, 100, 102], "datafram": [2, 3, 5, 7, 12, 13, 18, 19, 20, 22, 23, 25, 26, 27, 28, 30, 31, 36, 40, 47, 52, 53, 56, 57, 58, 69, 74, 78, 80, 83, 84, 85, 86, 87, 89, 90, 92, 93, 95, 100, 101, 102], "scipi": [2, 5, 13, 52], "spars": [2, 4, 5, 10, 13, 16, 18, 31, 52, 53, 86, 87, 89, 90, 93], "csr_matrix": [2, 4, 5, 13, 16, 18, 31], "torch": [2, 37, 38, 41, 83, 84, 87, 90, 91, 98], "util": [2, 5, 10, 16, 33, 37, 38, 41, 44, 56, 57, 62, 65, 69, 79, 80, 84, 85, 86, 87, 92, 93, 98], "tensorflow": [2, 52, 56, 79, 84, 92], "object": [2, 5, 10, 12, 13, 16, 32, 33, 37, 38, 40, 41, 48, 52, 53, 56, 59, 62, 63, 64, 65, 66, 69, 77, 79, 83, 84, 86, 87, 89, 92, 93, 94, 96, 100], "list": [2, 3, 5, 12, 14, 18, 19, 20, 22, 23, 25, 26, 27, 28, 30, 31, 36, 37, 38, 40, 41, 42, 43, 49, 51, 52, 53, 56, 57, 58, 59, 61, 62, 64, 65, 66, 67, 69, 73, 74, 75, 77, 78, 80, 83, 84, 85, 86, 87, 91, 92, 93, 96, 97, 100, 102], "index_list": 2, "subset": [2, 3, 5, 16, 36, 40, 43, 52, 67, 74, 78, 82, 83, 84, 87, 89, 90, 92, 96, 97, 98, 99, 100, 102], "wa": [2, 3, 12, 14, 40, 52, 57, 58, 64, 66, 78, 82, 83, 84, 85, 86, 87, 89, 90, 92, 93, 96, 97, 99, 101, 102], "abl": [2, 3, 10, 69, 84, 92, 93, 95, 96], "format": [2, 3, 5, 10, 12, 32, 37, 40, 41, 43, 46, 47, 48, 49, 52, 53, 56, 57, 58, 59, 62, 65, 66, 67, 69, 71, 73, 74, 77, 78, 82, 84, 85, 86, 87, 89, 91, 95, 100, 101, 102], "make": [2, 3, 5, 18, 37, 40, 41, 48, 56, 79, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 95, 96, 97, 98, 100], "sure": [2, 5, 40, 43, 48, 82, 83, 84, 85, 86, 87, 89, 90, 91, 95, 96, 97, 98, 100], "shuffl": [2, 10, 52, 84, 87, 90, 96, 98], "ha": [2, 3, 5, 6, 10, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 30, 31, 37, 41, 42, 46, 48, 51, 52, 57, 62, 64, 69, 75, 77, 78, 79, 82, 83, 84, 85, 86, 89, 90, 93, 95, 96, 97, 98, 99, 100, 102], "batch": [2, 40, 52, 56, 57, 71, 73, 87, 92, 98], "order": [2, 5, 10, 34, 36, 37, 41, 42, 43, 46, 47, 48, 52, 57, 58, 59, 62, 65, 66, 67, 71, 74, 75, 77, 78, 80, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 96, 97, 100, 101, 102], "destroi": [2, 52], "oper": [2, 37, 40, 41, 52, 56, 67, 79, 82, 83, 90, 92, 98], "eg": [2, 5, 10, 52, 62, 65, 85, 86, 92], "repeat": [2, 52, 57, 95, 98], "appli": [2, 34, 37, 39, 41, 43, 48, 49, 51, 52, 61, 66, 75, 82, 83, 84, 85, 86, 87, 89, 92, 95, 96, 98, 99, 100, 101], "array_lik": [2, 3, 36, 43, 52, 59, 66, 70], "some": [2, 3, 5, 10, 14, 22, 36, 37, 39, 41, 43, 46, 51, 52, 55, 57, 58, 59, 61, 62, 65, 66, 67, 69, 71, 80, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 95, 96, 97, 99, 100, 101, 102], "seri": [2, 3, 40, 52, 53, 69, 77, 92], "row": [2, 3, 5, 10, 13, 27, 32, 36, 40, 43, 45, 46, 52, 57, 58, 59, 61, 66, 67, 69, 74, 75, 77, 78, 82, 84, 85, 86, 87, 89, 90, 91, 92, 93, 95, 96, 98, 102], "rather": [2, 3, 5, 26, 36, 52, 56, 57, 64, 73, 77, 83, 95, 99, 100, 101, 102], "leav": [2, 43], "per": [2, 3, 5, 7, 13, 36, 40, 43, 48, 51, 57, 58, 59, 61, 64, 65, 67, 70, 71, 73, 77, 86, 92, 97, 102], "determin": [2, 3, 10, 12, 16, 22, 26, 30, 36, 40, 43, 48, 52, 57, 59, 62, 64, 67, 73, 77, 85, 92, 95, 97, 98, 100], "cutoff": [2, 3, 98], "consid": [2, 3, 4, 5, 10, 13, 16, 23, 26, 28, 31, 36, 37, 41, 43, 52, 57, 64, 66, 67, 70, 73, 77, 82, 83, 84, 87, 89, 90, 92, 93, 97, 98, 99, 100, 101], "section": [2, 3, 7, 10, 80, 87, 89, 92, 97], "3": [2, 3, 4, 5, 7, 10, 34, 36, 37, 41, 43, 46, 47, 48, 49, 50, 51, 52, 56, 59, 66, 67, 69, 70, 75, 77, 91, 92, 99], "equat": [2, 3, 46], "advanc": [2, 3, 5, 9, 10, 16, 64, 66, 77, 80, 86, 88, 92, 93], "user": [2, 3, 5, 9, 10, 14, 16, 27, 32, 33, 34, 37, 41, 43, 56, 64, 66, 67, 69, 73, 77, 93], "specifi": [2, 3, 4, 5, 8, 10, 13, 14, 16, 18, 31, 33, 37, 40, 41, 43, 48, 51, 56, 57, 58, 59, 62, 64, 66, 67, 69, 70, 78, 80, 83, 84, 86, 87, 90, 95, 97, 100], "automat": [2, 3, 5, 26, 36, 79, 82, 83, 87, 89, 90, 91, 92, 95, 96, 97, 100, 101, 102], "greater": [2, 3, 5, 7, 9, 10, 28, 40, 52, 64, 86, 91, 92, 102], "count": [2, 22, 26, 36, 40, 43, 46, 52, 58, 59, 65, 80, 87, 92, 97], "observ": [2, 3, 46, 84, 85, 86, 95, 98, 100], "mislabel": [2, 10, 36, 40, 42, 43, 46, 57, 58, 59, 62, 64, 67, 73, 75, 77, 79, 82, 83, 84, 87, 89, 90, 92, 93, 97, 100], "one": [2, 3, 5, 7, 10, 26, 36, 37, 40, 41, 42, 43, 48, 52, 57, 58, 59, 61, 62, 64, 65, 66, 67, 69, 70, 71, 73, 74, 75, 77, 78, 79, 82, 83, 84, 85, 86, 87, 89, 90, 95, 98, 99, 100, 102], "get_label_issu": [2, 39, 40, 68, 69, 82, 83, 93, 100], "either": [2, 3, 4, 7, 10, 37, 40, 41, 43, 57, 59, 64, 66, 67, 71, 73, 86, 92, 96, 97], "boolean": [2, 7, 10, 22, 40, 43, 51, 57, 59, 62, 67, 69, 71, 73, 74, 79, 83, 84, 86, 87, 90, 92, 97, 100, 101], "label_issues_mask": [2, 43, 67, 69, 80], "indic": [2, 3, 4, 5, 7, 10, 13, 22, 36, 40, 41, 42, 43, 45, 48, 52, 56, 57, 58, 59, 61, 62, 64, 65, 66, 67, 69, 70, 73, 75, 77, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 95, 96, 97, 98, 100, 101, 102], "its": [2, 5, 7, 9, 10, 16, 37, 40, 41, 43, 50, 51, 59, 62, 65, 66, 67, 69, 71, 75, 77, 79, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 95, 97, 98, 99, 100, 101, 102], "return_indices_ranked_bi": [2, 40, 43, 59, 75, 80, 82, 83, 92, 93], "significantli": [2, 87, 93, 95, 99], "reduc": [2, 40, 43, 52, 84, 92], "time": [2, 10, 37, 40, 41, 52, 57, 80, 82, 83, 85, 87, 91, 92, 93, 97, 98, 100, 101, 102], "take": [2, 5, 10, 36, 37, 41, 47, 48, 52, 56, 67, 82, 87, 89, 95, 96, 97, 102], "run": [2, 5, 6, 7, 9, 10, 11, 14, 16, 26, 27, 32, 35, 37, 40, 41, 69, 82, 83, 84, 85, 86, 87, 89, 90, 91, 93, 95, 96, 97, 98, 100, 102], "skip": [2, 10, 37, 41, 69, 84, 92, 96, 102], "slow": [2, 3], "step": [2, 7, 26, 48, 65, 87, 93, 95, 99], "caution": [2, 5, 92], "previous": [2, 5, 13, 52, 66, 69, 80, 82, 84, 85, 89, 90, 95, 99], "assign": [2, 7, 10, 18, 19, 20, 22, 23, 25, 26, 27, 28, 30, 31, 32, 37, 41, 47, 48, 52, 69, 82, 85, 87, 89, 92, 100, 101, 102], "individu": [2, 4, 7, 10, 13, 26, 37, 41, 42, 57, 61, 64, 67, 69, 75, 77, 80, 82, 86, 89, 92, 95, 96, 97, 102], "still": [2, 40, 41, 52, 66, 82, 84, 87, 92, 98], "extra": [2, 37, 41, 52, 56, 57, 58, 69, 87, 90, 92, 95, 98], "receiv": [2, 10, 37, 41, 42, 58, 61, 62, 69, 71, 75, 86, 97], "overwritten": [2, 69], "callabl": [2, 3, 37, 41, 48, 51, 56, 61, 92], "x_val": 2, "y_val": 2, "map": [2, 3, 12, 40, 41, 44, 47, 51, 52, 65, 67, 69, 74, 84, 85, 86, 87, 92, 93, 96, 102], "appropri": [2, 10, 16, 34, 59, 67, 85, 89, 96, 97], "earli": [2, 87], "stop": [2, 87], "x_valid": 2, "y_valid": 2, "could": [2, 4, 7, 10, 22, 36, 52, 66, 82, 85, 87, 89, 96, 100, 102], "f": [2, 7, 82, 83, 84, 85, 87, 89, 90, 91, 92, 93, 95, 96, 97, 98, 100], "ignor": [2, 37, 41, 51, 56, 69, 74, 78, 84, 85, 86, 87, 91, 93, 95, 96, 98, 100, 102], "allow": [2, 4, 36, 37, 40, 41, 45, 52, 57, 65, 66, 69, 71, 73, 83, 84, 87, 92, 99, 101], "access": [2, 10, 13, 37, 41, 69, 83, 86, 87, 90, 96], "hyperparamet": [2, 61, 66, 87], "purpos": [2, 85, 86, 92, 96, 100], "want": [2, 5, 10, 36, 40, 53, 57, 59, 69, 83, 85, 87, 90, 91, 95, 97, 98, 99, 101, 102], "explicitli": [2, 8, 10, 41, 69, 92], "yourself": [2, 5, 40, 86], "altern": [2, 7, 10, 48, 52, 56, 57, 67, 80, 83, 84, 87, 89, 90, 92, 93, 95, 96, 98, 100], "same": [2, 3, 5, 7, 9, 10, 12, 14, 16, 26, 30, 37, 40, 41, 43, 52, 56, 57, 59, 66, 67, 69, 73, 74, 77, 78, 79, 82, 83, 85, 86, 87, 89, 90, 92, 96, 97, 98, 99, 100, 101], "effect": [2, 10, 27, 37, 41, 57, 66, 69, 87, 89, 90, 92, 98], "offer": [2, 5, 9, 10, 83, 84, 85, 86, 90, 92, 93, 96], "after": [2, 3, 5, 13, 18, 19, 20, 22, 23, 25, 26, 27, 28, 30, 31, 37, 41, 52, 57, 69, 83, 85, 87, 90, 92, 93, 95, 97, 98, 99, 100, 101], "attribut": [2, 5, 7, 10, 12, 13, 16, 18, 19, 20, 22, 23, 25, 26, 27, 28, 30, 31, 32, 33, 34, 37, 40, 41, 48, 66, 69, 82, 85], "label_issues_df": [2, 69, 87], "similar": [2, 10, 36, 37, 41, 52, 57, 61, 62, 64, 66, 69, 73, 77, 85, 86, 87, 89, 90, 92, 93, 97, 98, 101], "document": [2, 3, 5, 14, 16, 36, 37, 40, 41, 42, 43, 48, 51, 56, 58, 59, 61, 64, 65, 66, 69, 73, 74, 75, 77, 80, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 95, 96, 97, 98, 100, 102], "descript": [2, 5, 7, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 36, 42, 52, 62, 69, 85, 86], "were": [2, 3, 5, 36, 41, 58, 64, 77, 82, 84, 89, 92, 93, 95, 97, 99, 101], "present": [2, 3, 5, 10, 12, 13, 20, 36, 52, 66, 74, 79, 87, 89, 92, 98], "actual": [2, 3, 5, 36, 57, 58, 67, 86, 92, 93, 102], "num_class": [2, 36, 40, 52, 56, 82, 83, 84, 85, 86, 87, 89, 90, 92, 93, 95, 96, 98], "uniqu": [2, 31, 52, 74, 85, 92, 96, 98], "given_label": [2, 5, 25, 30, 36, 46, 69, 74, 78, 83, 84, 85, 86, 87, 89, 90, 93, 100, 101, 102], "normal": [2, 3, 18, 26, 31, 43, 45, 48, 50, 51, 52, 67, 92, 93, 98], "trick": [2, 92], "distribut": [2, 3, 5, 10, 26, 28, 36, 41, 43, 47, 50, 57, 65, 66, 67, 79, 85, 86, 87, 89, 90, 97, 98], "account": [2, 36, 57, 61, 66, 67, 83, 90, 92, 93, 95, 96, 98, 100], "word": [2, 3, 51, 77, 78, 92], "remov": [2, 10, 31, 36, 37, 41, 43, 69, 79, 82, 83, 86, 87, 89, 90, 91, 92, 93, 96, 98, 100], "so": [2, 3, 5, 6, 7, 10, 14, 26, 34, 36, 37, 40, 41, 43, 52, 57, 58, 64, 67, 69, 73, 77, 84, 85, 86, 87, 90, 93, 96, 98, 101], "proportion": [2, 10, 43], "just": [2, 3, 5, 10, 13, 32, 36, 38, 40, 52, 56, 67, 69, 71, 79, 80, 82, 83, 84, 86, 87, 89, 90, 92, 93, 96, 97, 98, 99, 100, 101], "procedur": 2, "get": [2, 3, 5, 8, 13, 31, 37, 38, 41, 43, 48, 51, 52, 57, 59, 61, 66, 67, 69, 70, 71, 79, 82, 83, 84, 87, 90, 91, 92, 93, 98, 99, 100], "detect": [2, 5, 7, 9, 13, 14, 16, 18, 22, 28, 42, 50, 60, 62, 63, 64, 65, 66, 67, 68, 69, 72, 76, 79, 82, 83, 85, 87, 88, 94, 96, 100, 101, 102], "arg": [2, 12, 22, 27, 31, 37, 38, 41, 48, 52, 67, 69], "kwarg": [2, 7, 10, 14, 16, 18, 19, 20, 22, 23, 25, 26, 27, 28, 30, 31, 33, 37, 40, 41, 42, 48, 56, 69, 71, 73, 75, 92], "test": [2, 5, 10, 26, 41, 48, 56, 69, 79, 82, 83, 85, 86, 87, 89, 90, 99, 100, 102], "expect": [2, 3, 37, 41, 43, 48, 57, 66, 67, 69, 82, 83, 92, 93, 95, 96, 97, 100, 102], "class_predict": 2, "evalu": [2, 10, 37, 38, 39, 40, 41, 65, 69, 82, 83, 84, 85, 86, 87, 92, 93, 95, 99, 100, 101], "simpli": [2, 10, 36, 67, 83, 85, 86, 89, 90, 92, 93, 96, 100, 101, 102], "quantifi": [2, 5, 7, 10, 13, 43, 61, 66, 69, 79, 86, 87, 89, 90, 93, 97], "save_spac": [2, 10, 68, 69], "potenti": [2, 10, 36, 43, 51, 59, 62, 65, 67, 69, 71, 73, 80, 82, 84, 85, 86, 87, 89, 90, 91, 92, 93, 96, 97, 101, 102], "cach": [2, 83, 90], "panda": [2, 5, 7, 12, 18, 19, 20, 22, 23, 25, 26, 28, 30, 31, 36, 52, 53, 56, 57, 58, 80, 82, 83, 84, 85, 86, 89, 90, 91, 92, 93, 95, 100, 101], "unlik": [2, 10, 43, 45, 48, 56, 58, 59, 61, 77, 85, 95, 96, 98, 100], "both": [2, 5, 10, 16, 26, 36, 37, 41, 43, 52, 57, 59, 67, 71, 73, 78, 79, 85, 87, 92, 93, 95, 102], "mask": [2, 40, 43, 51, 52, 59, 62, 67, 69, 71, 73, 74, 79, 91, 92, 95, 97, 101, 102], "prefer": [2, 67, 75, 96], "plan": 2, "subsequ": [2, 3, 37, 41, 83, 90, 92, 93, 97], "invok": [2, 37, 41, 93, 99], "scratch": [2, 69], "To": [2, 5, 7, 9, 10, 11, 13, 16, 26, 35, 37, 40, 41, 42, 43, 56, 57, 59, 61, 65, 66, 67, 69, 70, 71, 73, 79, 82, 83, 84, 85, 86, 87, 89, 90, 92, 95, 96, 97, 98, 99, 100, 101, 102], "share": [2, 67, 69], "mostli": [2, 52, 64, 69, 96, 100], "longer": [2, 34, 47, 48, 51, 69, 80, 83, 90, 92, 97], "info": [2, 5, 7, 13, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 36, 58, 69, 77, 85, 86, 91, 102], "about": [2, 3, 5, 7, 10, 13, 18, 19, 20, 22, 23, 25, 26, 27, 28, 30, 31, 33, 36, 38, 40, 45, 57, 58, 61, 65, 69, 74, 77, 84, 85, 87, 89, 90, 91, 92, 93, 95, 98], "docstr": [2, 36, 37, 41, 52, 69, 91, 93], "unless": [2, 37, 41, 69, 92], "our": [2, 3, 10, 56, 57, 67, 69, 79, 82, 83, 84, 85, 86, 87, 89, 90, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102], "is_label_issu": [2, 30, 69, 83, 84, 85, 86, 87, 89, 90, 93, 96, 100], "entir": [2, 10, 26, 40, 43, 46, 58, 59, 64, 67, 69, 71, 73, 74, 79, 85, 86, 92, 97, 98, 99, 101, 102], "accur": [2, 3, 5, 9, 10, 16, 36, 40, 43, 57, 58, 59, 62, 65, 67, 69, 70, 71, 73, 74, 80, 86, 87, 89, 90, 92, 95, 100], "label_qu": [2, 57, 69, 83, 93, 95, 100], "measur": [2, 5, 36, 57, 58, 69, 79, 82, 91, 92, 93, 95, 96, 100, 101, 102], "qualiti": [2, 3, 5, 7, 9, 10, 13, 30, 31, 36, 40, 42, 43, 45, 48, 57, 58, 59, 61, 62, 64, 67, 69, 70, 73, 75, 77, 79, 80, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 94, 100], "lower": [2, 4, 5, 7, 10, 13, 28, 40, 48, 50, 57, 58, 61, 64, 65, 67, 69, 70, 73, 77, 83, 84, 86, 87, 89, 90, 92, 95, 96, 97, 98, 100, 101, 102], "eas": 2, "comparison": [2, 37, 41, 65, 93, 95], "against": [2, 37, 41, 85, 89, 92, 95, 96], "predicted_label": [2, 5, 25, 30, 69, 74, 78, 83, 84, 85, 86, 87, 89, 90, 93, 100, 101], "ad": [2, 37, 41, 86, 95, 100], "precis": [2, 59, 62, 65, 92, 93, 101, 102], "definit": [2, 7, 34, 48, 69, 82, 89], "accessor": [2, 69], "describ": [2, 10, 18, 57, 66, 67, 69, 75, 77, 93, 95, 96, 97, 99, 102], "precomput": [2, 4, 5, 46, 69, 86, 87, 89, 90, 91, 93], "clear": [2, 37, 41, 69, 83, 90, 100], "save": [2, 5, 16, 37, 40, 41, 65, 69, 92, 97, 101, 102], "space": [2, 5, 10, 66, 69, 87, 89, 91], "place": [2, 37, 41, 52, 69, 82, 95], "larg": [2, 9, 10, 40, 69, 87, 89, 90, 92, 97, 98, 101, 102], "deploi": [2, 9, 10, 69, 87, 89, 90, 92], "care": [2, 10, 37, 41, 69, 90, 92, 93], "avail": [2, 4, 5, 7, 10, 12, 14, 33, 41, 69, 92, 93, 95, 97, 100], "cannot": [2, 5, 12, 14, 52, 99, 102], "anymor": 2, "classmethod": [2, 18, 19, 20, 22, 23, 25, 26, 27, 28, 30, 31, 34, 41, 48, 69], "__init_subclass__": [2, 39, 41, 68, 69], "set_": [2, 41, 69], "_request": [2, 41, 69], "pep": [2, 41, 69], "487": [2, 41, 69], "look": [2, 5, 7, 16, 37, 41, 52, 69, 74, 82, 85, 86, 89, 90, 92, 93, 95, 96, 97, 98, 101, 102], "inform": [2, 5, 7, 10, 13, 16, 33, 37, 41, 52, 57, 58, 62, 65, 69, 74, 77, 78, 79, 84, 85, 89, 90, 93, 95, 98, 101, 102], "__metadata_request__": [2, 41, 69], "infer": [2, 41, 52, 69, 74, 78, 82, 83, 87, 95, 96], "signatur": [2, 37, 41, 69], "accept": [2, 37, 41, 67, 69, 85, 86, 92], "metadata": [2, 41, 69, 87, 89, 90, 102], "through": [2, 5, 7, 41, 69, 83, 84, 86, 90, 91, 92, 95, 97, 98], "develop": [2, 9, 41, 69, 92, 93, 102], "request": [2, 41, 69, 82, 83, 86, 90, 91, 96, 102], "those": [2, 3, 4, 10, 40, 41, 43, 56, 57, 59, 65, 69, 73, 77, 78, 79, 84, 87, 92, 97, 101], "http": [2, 4, 5, 7, 9, 10, 11, 18, 35, 37, 38, 40, 41, 45, 52, 62, 65, 66, 69, 79, 82, 83, 84, 85, 86, 87, 89, 90, 91, 93, 95, 96, 97, 98, 100, 101, 102], "www": [2, 41, 69, 98], "org": [2, 4, 18, 37, 38, 41, 52, 66, 69, 92, 93, 102], "dev": [2, 41, 69], "0487": [2, 41, 69], "get_metadata_rout": [2, 39, 41, 68, 69], "rout": [2, 41, 69], "pleas": [2, 37, 41, 56, 69, 79, 83, 84, 85, 86, 87, 90, 91, 92, 93, 95, 96, 98, 100, 102], "guid": [2, 7, 10, 41, 69, 80, 87, 88], "mechan": [2, 37, 41, 69], "metadatarequest": [2, 41, 69], "encapsul": [2, 16, 41, 64, 69], "get_param": [2, 39, 41, 55, 56, 68, 69], "subobject": [2, 41, 69], "param": [2, 10, 37, 41, 56, 66, 69, 92], "name": [2, 5, 6, 7, 10, 12, 13, 32, 34, 36, 37, 41, 47, 48, 52, 56, 57, 58, 65, 69, 74, 78, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 96, 100, 101, 102], "set_fit_request": [2, 39, 41, 68, 69], "str": [2, 3, 4, 5, 12, 13, 14, 16, 18, 19, 20, 22, 23, 25, 26, 27, 28, 30, 31, 33, 34, 36, 37, 40, 41, 43, 46, 48, 51, 52, 56, 57, 58, 62, 64, 65, 67, 69, 74, 78, 84, 85, 92, 95, 96, 97, 102], "unchang": [2, 37, 41, 69, 102], "relev": [2, 16, 26, 41, 69, 87], "enable_metadata_rout": [2, 41, 69], "set_config": [2, 41, 69], "meta": [2, 41, 69], "rais": [2, 4, 5, 12, 13, 34, 37, 41, 45, 48, 69, 84, 92], "alia": [2, 37, 41, 69], "metadata_rout": [2, 41, 69], "retain": [2, 41, 52, 69], "chang": [2, 32, 34, 37, 40, 41, 45, 69, 77, 82, 83, 84, 85, 90, 92, 97, 98, 102], "version": [2, 5, 7, 9, 10, 11, 15, 21, 24, 29, 35, 37, 39, 41, 44, 45, 52, 55, 56, 67, 69, 79, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 95, 96, 97, 98, 100, 102], "sub": [2, 41, 64, 69], "pipelin": [2, 41, 69, 100], "otherwis": [2, 4, 7, 10, 34, 36, 37, 40, 41, 43, 49, 51, 52, 59, 66, 69, 71, 73, 74, 78, 83, 90, 92], "updat": [2, 13, 37, 40, 41, 56, 69, 80, 85, 87], "set_param": [2, 39, 41, 55, 56, 68, 69], "simpl": [2, 37, 41, 43, 57, 67, 69, 82, 83, 85, 86, 87, 89, 90, 95, 98, 100], "well": [2, 3, 9, 10, 37, 41, 45, 46, 57, 59, 65, 67, 69, 74, 77, 78, 80, 85, 86, 87, 89, 90, 92, 93, 95, 97, 98], "nest": [2, 37, 41, 42, 53, 69, 75, 77, 78, 102], "latter": [2, 37, 41, 69, 98], "compon": [2, 41, 69], "__": [2, 41, 69], "set_score_request": [2, 68, 69], "structur": [3, 66, 82, 89, 92], "unobserv": 3, "less": [3, 4, 5, 10, 31, 40, 48, 57, 66, 67, 71, 73, 77, 86, 87, 89, 91, 92, 93, 97, 102], "channel": [3, 84, 93], "character": 3, "flip": 3, "nm": 3, "invers": [3, 10, 36, 46, 52, 58, 83, 86, 91], "inv": 3, "confident_joint": [3, 22, 36, 43, 52, 58, 59, 80, 92, 93], "un": 3, "under": [3, 10, 37, 41, 58, 65, 66, 86, 98], "joint": [3, 36, 43, 46, 52, 58, 59, 91], "num_label_issu": [3, 40, 43, 59, 74, 78, 80], "estimation_method": [3, 40], "off_diagon": 3, "multi_label": [3, 36, 43, 52, 53, 59, 96], "don": [3, 79, 86, 87, 89, 90, 93, 97, 100], "statis": 3, "compute_confident_joint": [3, 36, 43, 52, 59, 93], "off": [3, 43, 52, 64, 87, 93, 97, 98], "j": [3, 5, 36, 37, 41, 42, 43, 59, 62, 65, 66, 75, 77, 78, 85, 86, 93, 101, 102], "confident_learn": [3, 43, 59, 93], "off_diagonal_calibr": 3, "calibr": [3, 4, 43, 52, 57, 95], "cj": [3, 46, 52], "axi": [3, 31, 46, 48, 50, 71, 74, 84, 85, 86, 87, 92, 93, 95, 96, 98, 100, 101], "bincount": [3, 85, 86, 93, 95, 96], "alwai": [3, 10, 37, 41, 52, 82, 83, 84, 93, 100], "estimate_issu": 3, "over": [3, 5, 10, 37, 40, 41, 64, 65, 71, 73, 82, 86, 87, 89, 91, 92, 93, 98, 100], "As": [3, 7, 79, 85, 86, 90, 93, 100, 102], "add": [3, 5, 7, 12, 13, 37, 41, 56, 65, 83, 84, 85, 86, 87, 90, 92, 93, 96], "approach": [3, 4, 36, 40, 43, 56, 82, 89, 93, 96, 98, 100], "custom": [3, 7, 10, 11, 30, 37, 40, 41, 48, 51, 67, 83, 86, 90, 93, 100], "know": [3, 10, 85, 86, 87, 89, 90, 92, 93, 95, 100], "cut": [3, 64, 79, 93], "off_diagonal_custom": 3, "tl": 3, "dr": 3, "sometim": [3, 32, 97, 98, 102], "underestim": 3, "few": [3, 9, 10, 65, 79, 86, 92, 95, 96, 97, 98, 102], "4": [3, 4, 5, 18, 19, 20, 22, 23, 25, 26, 28, 30, 31, 47, 48, 51, 61, 62, 64, 65, 67, 70, 77, 91, 92, 96, 101, 102], "detail": [3, 4, 5, 10, 14, 16, 33, 36, 37, 41, 42, 48, 52, 56, 57, 58, 59, 61, 62, 64, 65, 66, 73, 74, 75, 79, 80, 84, 92, 96, 98, 102], "num_issu": [3, 7, 40, 84, 85, 86, 87, 89, 90, 93], "calibrate_confident_joint": 3, "up": [3, 7, 10, 17, 26, 27, 30, 43, 48, 56, 57, 83, 91, 92, 97, 100, 102], "p_": [3, 36, 43], "pair": [3, 5, 10, 36, 43, 93], "v": [3, 10, 40, 58, 59, 61, 67, 85, 86, 96, 97, 98, 99], "rest": [3, 5, 7, 9, 10, 11, 35, 58, 59, 61, 69, 82, 83, 85, 86, 87, 89, 90, 92, 93, 95, 100], "fashion": [3, 5, 71, 82], "2x2": 3, "incorrectli": [3, 36, 58, 59, 62, 89, 102], "calibrated_cj": 3, "c": [3, 10, 51, 59, 67, 79, 82, 84, 85, 86, 89, 90, 92, 93, 96, 97, 98, 99, 100], "whose": [3, 4, 5, 10, 28, 37, 41, 46, 51, 57, 61, 64, 70, 73, 77, 78, 84, 85, 86, 87, 89, 90, 92, 93, 96, 97, 98, 101, 102], "truli": [3, 98, 101], "estimate_joint": [3, 36, 93], "joint_estim": 3, "confident_joint_distribut": 3, "recal": [3, 59, 65, 93, 97, 99, 101, 102], "return_indices_of_off_diagon": 3, "frequenc": [3, 26, 57, 58, 65, 74, 97, 98], "done": [3, 10, 56, 69, 85, 92, 93, 96, 98, 99], "overfit": [3, 10, 62, 65, 82, 84, 85, 86, 87, 89, 90, 99], "classifict": 3, "singl": [3, 5, 9, 10, 12, 26, 36, 37, 41, 42, 48, 49, 52, 57, 58, 64, 65, 66, 67, 77, 82, 84, 85, 92, 93, 96, 97], "baselin": [3, 37, 43, 83, 98, 100], "proxi": 3, "union": [3, 5, 12, 48, 52, 53, 59, 65, 69, 77, 92], "tupl": [3, 31, 37, 41, 42, 46, 47, 49, 51, 52, 57, 59, 65, 73, 75, 77, 78, 84, 102], "confident_joint_count": 3, "indices_off_diagon": 3, "simplif": 3, "effici": [3, 5, 10, 40, 46, 57, 71, 73, 79, 83, 87, 92, 101], "practic": [3, 82, 83, 86, 87, 93, 98, 100], "complet": [3, 84, 85, 86, 87, 89, 90, 92, 93, 96, 97, 100], "gist": 3, "cj_ish": 3, "guess": [3, 46, 93, 95], "8": [3, 5, 7, 8, 47, 48, 49, 51, 61, 75, 77, 82, 83, 84, 85, 86, 87, 89, 90, 92, 95, 96, 97, 98, 100, 101, 102], "parallel": [3, 43, 65, 75, 91], "again": [3, 56, 82, 92, 98], "simplifi": [3, 14, 92], "understand": [3, 9, 36, 58, 65, 86, 93, 100, 101, 102], "100": [3, 37, 41, 67, 82, 83, 85, 86, 87, 89, 91, 92, 93, 96, 97, 98, 102], "optim": [3, 37, 38, 41, 56, 87, 95], "speed": [3, 43, 83, 91, 92, 100], "dtype": [3, 23, 25, 26, 31, 37, 41, 51, 52, 61, 77, 84, 97], "enumer": [3, 37, 41, 84, 85, 86, 87, 102], "s_label": 3, "confident_bin": 3, "6": [3, 5, 41, 48, 52, 77, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 95, 96, 97, 98, 100, 101, 102], "num_confident_bin": 3, "argmax": [3, 43, 67, 71, 74, 84, 92, 93, 97, 98, 101], "elif": 3, "estimate_lat": 3, "py_method": [3, 46], "cnt": [3, 46], "1d": [3, 5, 12, 16, 32, 40, 43, 48, 49, 52, 53, 61, 70, 82, 84], "eqn": [3, 46], "margin": [3, 43, 46, 48, 67], "marginal_p": [3, 46], "shorthand": [3, 13], "proport": [3, 10, 36, 58, 93, 99], "poorli": [3, 46, 82], "inv_noise_matrix": 3, "estimate_py_and_noise_matrices_from_prob": [3, 93], "variabl": [3, 7, 14, 27, 52, 69, 70, 84, 85, 89, 93, 96, 100], "exact": [3, 46, 82, 85, 86, 87, 89], "within": [3, 4, 5, 10, 15, 32, 37, 38, 41, 42, 44, 59, 64, 73, 75, 77, 85, 86, 87, 92, 97, 101], "percent": 3, "often": [3, 36, 46, 58, 92, 93, 99, 101], "estimate_confident_joint_and_cv_pred_proba": 3, "mani": [3, 9, 10, 52, 53, 65, 82, 83, 84, 85, 87, 89, 90, 92, 96, 97, 98, 100], "wai": [3, 5, 56, 79, 80, 82, 83, 84, 85, 86, 89, 90, 92, 93, 95, 96, 97, 99], "pro": 3, "con": 3, "pred_proba": [3, 99], "combin": [3, 36, 85, 87, 91, 92, 93, 99, 100], "becaus": [3, 46, 52, 64, 90, 92, 93, 95, 97], "littl": [3, 40, 91, 97, 102], "uniform": [3, 67, 91, 92, 93], "20": [3, 7, 42, 78, 84, 87, 90, 91, 92, 93, 97, 100, 101, 102], "Such": [3, 87, 98], "bound": [3, 23, 25, 37, 41, 51, 61, 62, 64, 65, 97], "reason": [3, 22, 37, 41], "comment": [3, 51, 102], "end": [3, 5, 37, 41, 65], "file": [3, 5, 12, 39, 40, 55, 65, 82, 84, 85, 89, 90, 91, 92, 97, 98, 101, 102], "estimate_py_noise_matrices_and_cv_pred_proba": [3, 93], "handl": [3, 5, 7, 10, 16, 18, 19, 20, 22, 23, 25, 26, 27, 28, 30, 31, 33, 37, 40, 41, 80, 82, 85, 86, 87, 89, 90, 93, 101, 102], "five": [3, 62, 65, 93, 97], "estimate_cv_predicted_prob": [3, 93], "estimate_noise_matric": 3, "get_confident_threshold": [3, 39, 40], "amongst": [3, 10, 97], "confident_threshold": [3, 10, 22, 40, 66], "valuat": [4, 9, 18], "assess": [4, 97], "point": [4, 5, 7, 9, 10, 18, 26, 37, 41, 85, 86, 87, 89, 90, 92, 93, 95], "contribut": [4, 10, 18, 97], "data_shapley_knn": 4, "knn_graph": [4, 5, 10, 16, 18, 19, 26, 28, 31, 89], "metric": [4, 5, 10, 18, 19, 26, 31, 52, 56, 65, 66, 82, 83, 84, 87, 89, 90, 93, 100], "10": [4, 10, 18, 19, 23, 26, 31, 37, 38, 65, 66, 67, 78, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102], "shaplei": [4, 10, 18], "nearest": [4, 5, 10, 16, 23, 26, 28, 50, 66, 86, 90, 98], "neighbor": [4, 5, 10, 16, 18, 23, 26, 28, 50, 66, 85, 86, 87, 89, 90, 92, 93, 98], "knn": [4, 10, 13, 18, 26, 31, 66, 89, 98], "graph": [4, 5, 10, 13, 16, 18, 26, 31], "calcul": [4, 10, 18, 26, 40, 48, 57, 61, 62, 64, 65, 66, 69, 73, 87, 91], "directli": [4, 5, 14, 16, 33, 34, 40, 56, 57, 83, 86, 90, 92, 96, 97, 100], "lowest": [4, 10, 57, 65, 86, 87, 92, 95, 96, 97, 101], "fall": [4, 10, 64, 73, 77, 93, 98], "flag": [4, 10, 22, 26, 43, 48, 58, 59, 62, 69, 79, 83, 84, 85, 86, 87, 89, 90, 91, 93, 97, 98, 100, 101], "approxim": [4, 10, 18, 40, 66, 95], "top": [4, 5, 10, 36, 40, 42, 43, 52, 59, 62, 65, 67, 74, 78, 79, 83, 84, 85, 86, 89, 90, 91, 92, 93, 97, 98, 100, 102], "found": [4, 5, 7, 10, 13, 14, 18, 19, 20, 22, 23, 25, 26, 27, 28, 30, 31, 37, 41, 52, 79, 82, 83, 84, 85, 86, 87, 89, 90, 92, 96, 98, 100, 102], "arxiv": [4, 18, 93], "ab": [4, 18, 93, 97], "1908": 4, "08619": 4, "1911": [4, 18], "07128": [4, 18], "embed": [4, 5, 10, 16, 66, 79, 83, 84, 85, 86, 89, 90, 93, 96, 100], "represent": [4, 5, 10, 16, 34, 37, 41, 49, 59, 79, 83, 84, 85, 86, 87, 90, 92, 93, 98], "suppli": [4, 96, 97, 100], "2d": [4, 5, 16, 32, 40, 48, 49, 51, 52, 57, 82, 84, 96], "num_exampl": [4, 5, 16, 18, 19, 20, 22, 23, 25, 26, 28, 30, 31, 33, 36, 58, 84, 85, 86, 87, 89, 90, 93], "num_featur": [4, 5, 16, 37, 41, 56], "distanc": [4, 5, 10, 16, 18, 26, 28, 31, 50, 64, 66, 89, 98], "construct": [4, 5, 7, 10, 14, 18, 19, 20, 22, 23, 25, 26, 27, 28, 30, 31, 33, 37, 41, 48, 56], "nearestneighbor": [4, 5, 10, 18, 66, 89, 98], "cosin": [4, 10, 66, 98], "dim": [4, 66, 87, 101], "euclidean": [4, 5, 10, 64, 66, 89], "dimension": [4, 26, 52, 84, 93, 98], "exce": [4, 87], "transform": [4, 10, 32, 48, 50, 52, 66, 67, 82, 83, 86, 87, 90, 98, 102], "rel": [4, 10, 36, 57, 58, 66, 85, 86, 87, 89, 90, 93, 98], "adjust": [4, 38, 43, 61, 66, 67, 79, 93], "closer": [4, 10, 64, 97], "highli": [4, 86, 87], "influenti": 4, "posit": [4, 5, 37, 41, 50, 52, 65, 91, 98], "convers": 4, "neg": [4, 10, 64, 65, 85, 86, 91], "valueerror": [4, 5, 12, 13, 34, 45, 48, 92], "neither": [4, 5, 10, 14, 97], "nor": [4, 5, 10, 14], "larger": [4, 18, 69, 71, 73, 87, 90, 91, 92], "55": [4, 51, 91, 97, 100], "525": 4, "unifi": 5, "audit": [5, 9, 12, 13, 16, 84, 87, 88, 89, 90, 92, 93, 96, 97, 100], "kind": [5, 6, 7, 10, 84, 85, 87, 89, 90, 91, 93], "addit": [5, 7, 9, 11, 13, 33, 35, 37, 41, 48, 53, 57, 65, 75, 82, 83, 84, 85, 89, 90, 93, 95, 98, 99], "depend": [5, 7, 9, 11, 12, 13, 35, 39, 43, 45, 52, 55, 59, 66, 69, 70, 79], "instal": [5, 7, 9, 11, 35, 37, 39, 40, 41, 43, 55, 56, 71, 73], "pip": [5, 7, 9, 11, 35, 56, 79, 82, 83, 84, 85, 86, 87, 89, 90, 91, 93, 95, 96, 97, 98, 100, 101, 102], "development": [5, 7, 9, 11, 35], "git": [5, 7, 9, 11, 35, 79, 82, 83, 84, 85, 86, 87, 89, 90, 91, 93, 95, 96, 97, 98, 100], "github": [5, 7, 9, 11, 35, 37, 38, 52, 79, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 95, 96, 97, 98, 100], "com": [5, 7, 9, 11, 35, 37, 38, 40, 45, 52, 66, 79, 82, 83, 84, 85, 86, 87, 89, 90, 91, 93, 95, 96, 97, 98, 100, 101, 102], "egg": [5, 7, 9, 11, 35, 79, 91], "label_nam": [5, 7, 8, 10, 12, 18, 31, 79, 84, 85, 86, 87, 89, 90, 92, 93, 96, 97, 100], "image_kei": [5, 10, 87], "interfac": [5, 9, 10, 79, 92, 93], "librari": [5, 10, 41, 62, 65, 66, 79, 83, 85, 90, 91, 92], "goal": [5, 100], "track": [5, 7, 13, 14, 79, 85, 91, 92, 93], "intermedi": [5, 9, 86], "statist": [5, 10, 13, 22, 26, 36, 57, 58, 65, 86, 89, 90, 93], "convert": [5, 10, 12, 34, 37, 41, 49, 50, 53, 57, 64, 73, 77, 80, 83, 84, 87, 90, 91, 92, 95, 96, 97], "hug": [5, 10, 12, 87], "face": [5, 10, 12, 16, 87, 91, 96], "kei": [5, 7, 10, 12, 16, 18, 19, 20, 22, 23, 25, 26, 27, 28, 30, 31, 36, 37, 41, 48, 57, 58, 64, 66, 85, 86, 87, 90, 92, 93, 95, 97], "string": [5, 10, 12, 14, 18, 19, 20, 22, 23, 25, 26, 27, 28, 30, 31, 33, 34, 36, 37, 41, 52, 57, 58, 70, 74, 77, 78, 83, 89, 90, 92, 95, 96, 102], "dictionari": [5, 7, 10, 12, 13, 16, 18, 19, 20, 22, 23, 25, 26, 27, 28, 30, 31, 36, 37, 41, 47, 52, 57, 58, 61, 62, 64, 65, 85, 86, 89, 90, 93, 95, 96, 97], "path": [5, 12, 37, 40, 41, 65, 84, 85, 92, 97], "local": [5, 7, 10, 12, 37, 38, 41, 84, 85, 86, 87, 91, 92, 93, 95, 96, 98, 100, 102], "text": [5, 7, 10, 12, 18, 19, 20, 22, 23, 25, 26, 27, 28, 30, 31, 42, 48, 66, 75, 77, 78, 79, 81, 85, 86, 88, 91, 92, 93, 94, 95, 98], "txt": [5, 12, 102], "csv": [5, 12, 82, 83, 89, 90, 100], "json": [5, 12], "hub": [5, 12], "multiclass": [5, 12, 15, 48, 52, 57, 96], "regress": [5, 7, 10, 12, 14, 16, 21, 30, 32, 34, 83, 85, 86, 90, 94, 95, 98], "multilabel": [5, 12, 14, 15, 21, 25, 32, 34, 49, 96], "imag": [5, 9, 36, 41, 62, 64, 65, 66, 71, 73, 74, 79, 85, 86, 88, 91, 92, 94, 95, 96, 97, 99, 101], "field": [5, 10, 37, 41], "themselv": [5, 82, 83, 100], "pil": [5, 87], "cleanvis": [5, 10], "level": [5, 16, 18, 19, 20, 22, 23, 25, 26, 27, 28, 30, 31, 33, 36, 51, 75, 77, 86, 87, 92, 94, 96, 101], "load_dataset": [5, 12, 87], "glue": 5, "sst2": 5, "properti": [5, 12, 13, 34, 37, 41], "has_label": [5, 12], "class_nam": [5, 12, 20, 36, 42, 58, 65, 74, 78, 79, 91, 93, 97, 101, 102], "empti": [5, 12, 46, 57, 86, 92, 96], "find_issu": [5, 6, 7, 8, 10, 14, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 79, 84, 85, 86, 87, 89, 90, 92, 93, 96, 100], "issue_typ": [5, 6, 7, 8, 10, 13, 14, 16, 18, 19, 20, 22, 23, 25, 26, 28, 30, 31, 84, 85, 86, 87, 89, 90, 92, 93, 96, 100], "sort": [5, 16, 40, 43, 48, 57, 59, 62, 64, 65, 67, 73, 75, 77, 82, 83, 84, 85, 86, 87, 89, 90, 92, 93, 95, 96, 97, 100, 101, 102], "common": [5, 13, 16, 86, 88, 91, 92, 93, 96, 97, 101], "real": [5, 16, 79, 85, 86, 92, 93, 95, 100, 101], "world": [5, 16, 79, 85, 86, 92, 93, 95, 100, 101], "interact": [5, 16, 90, 92], "thereof": [5, 16], "insight": [5, 16, 65, 95], "best": [5, 9, 10, 16, 47, 57, 67, 82, 83, 85, 86, 87, 89, 90, 92, 95, 96, 98, 100, 102], "properli": [5, 10, 40, 47, 52, 53, 71, 84, 85, 86, 87, 89, 90, 92, 93, 96, 98, 100, 101], "respect": [5, 37, 41, 62, 65, 84, 85, 86, 87, 89, 90, 93, 96, 97], "lexicograph": [5, 47, 52, 84, 85, 86, 87, 89, 90, 93, 96], "squar": [5, 52, 69, 91, 100], "csr": 5, "evenli": 5, "omit": [5, 64, 65, 87, 97], "itself": [5, 32, 37, 41, 97], "three": [5, 10, 36, 57, 58, 69, 74, 82, 84, 85, 86, 89, 91, 93, 95, 99, 100, 101, 102], "indptr": 5, "wise": 5, "start": [5, 7, 10, 34, 37, 38, 41, 48, 79, 89, 96, 102], "th": [5, 42, 47, 51, 52, 57, 59, 62, 64, 65, 66, 75, 77, 78, 90, 96, 97, 102], "ascend": [5, 36, 58, 87, 93], "segment": [5, 71, 73, 74, 94], "reflect": [5, 82, 83, 89, 90, 95, 97, 98, 100], "maintain": [5, 56], "kneighbors_graph": [5, 18, 89], "illustr": 5, "todens": 5, "second": [5, 48, 52, 65, 67, 85, 92, 93, 102], "duplic": [5, 9, 21, 22, 37, 41, 79, 85, 93, 100], "explicit": 5, "precend": 5, "collect": [5, 10, 13, 16, 18, 19, 20, 22, 23, 25, 26, 27, 28, 30, 31, 32, 57, 92, 95, 102], "unspecifi": [5, 16, 43, 59], "interest": [5, 16, 22, 74, 78, 82, 83, 90, 93, 100, 101, 102], "constructor": [5, 10, 16, 23, 30], "issuemanag": [5, 9, 13, 14, 16, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 30, 31, 33], "respons": [5, 16, 22, 69, 70, 91, 100, 102], "random_st": [5, 82, 84, 85, 86, 87, 93, 96, 98], "lab": [5, 6, 8, 10, 18, 19, 20, 22, 23, 25, 26, 27, 28, 30, 31, 40, 79, 84, 85, 86, 87, 89, 90, 91, 92, 93, 96, 100], "comprehens": [5, 79, 87, 96, 100], "nbr": 5, "n_neighbor": [5, 10, 18, 66], "mode": [5, 11, 18, 37, 40, 41, 98], "4x4": 5, "float64": [5, 26, 37, 41, 77], "compress": [5, 10, 52, 71, 73], "toarrai": 5, "NOT": [5, 40, 90], "23606798": 5, "41421356": 5, "configur": [5, 16, 48, 86], "suppos": [5, 10, 62, 82, 83, 98, 100], "who": [5, 64, 82, 89, 93, 102], "manag": [5, 8, 9, 10, 13, 14, 15, 16, 17, 19, 20, 22, 23, 25, 26, 27, 28, 30, 31, 56, 85, 92], "clean_learning_kwarg": [5, 10, 23, 30, 92, 100], "labelissuemanag": [5, 10, 14, 21, 23], "prune_method": [5, 80], "prune_by_noise_r": [5, 43, 59, 93], "report": [5, 7, 11, 15, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 36, 58, 78, 79, 84, 85, 86, 89, 90, 92, 93, 96, 100, 102], "include_descript": [5, 18, 19, 20, 22, 23, 25, 26, 28, 30, 31, 33], "show_summary_scor": [5, 33], "show_all_issu": [5, 33], "summari": [5, 7, 13, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 36, 42, 55, 56, 58, 63, 72, 73, 75, 76, 77, 80, 84, 85, 86, 87, 89, 90, 91, 93, 97, 100, 101, 102], "show": [5, 7, 26, 37, 41, 47, 52, 65, 74, 78, 82, 86, 87, 89, 90, 91, 92, 93, 95, 98, 100, 101, 102], "suffer": [5, 10, 13, 22, 59, 67, 78, 102], "onc": [5, 22, 36, 37, 41, 82, 85, 92, 93, 96, 97], "familiar": 5, "overal": [5, 7, 10, 13, 18, 19, 20, 22, 23, 25, 26, 27, 28, 30, 31, 36, 42, 48, 57, 58, 61, 64, 65, 69, 73, 74, 75, 77, 79, 80, 84, 85, 86, 87, 89, 90, 91, 92, 95, 97, 102], "sever": [5, 7, 10, 12, 13, 22, 37, 40, 41, 43, 61, 64, 66, 67, 73, 77, 79, 82, 83, 84, 85, 86, 89, 90, 91, 92, 93, 97, 98, 102], "compar": [5, 57, 66, 77, 85, 86, 89, 93, 97], "issue_summari": [5, 7, 10, 13, 85], "With": [5, 9, 10, 40, 83, 90, 92, 93, 95, 100, 101, 102], "usag": [5, 40, 56], "usual": [5, 12, 32, 33, 87, 95, 100], "ti": [5, 57], "exhibit": [5, 7, 10, 13, 74, 86, 87, 89, 90, 93, 97], "ie": [5, 69], "likelihood": [5, 10, 40, 42, 43, 59, 64, 66, 67, 71, 75], "wherea": [5, 52, 59, 99], "outlier": [5, 9, 14, 21, 22, 31, 44, 67, 79, 85, 86, 93, 94, 100], "fundament": [5, 10], "incompar": 5, "quantiti": [5, 93, 100], "global": [5, 7, 22, 37, 41], "non_iid": [5, 10, 14, 26, 86, 87, 89, 90, 93], "hypothesi": 5, "iid": [5, 7, 9, 26, 89, 93], "never": [5, 84, 93, 96, 98, 99], "someth": [5, 7, 37, 41, 67, 97], "123": [5, 85, 86], "456": [5, 82, 83, 84], "nearest_neighbor": 5, "7": [5, 48, 49, 56, 75, 77, 82, 83, 84, 85, 86, 89, 90, 91, 92, 95, 96, 97, 98, 100, 101, 102], "9": [5, 18, 19, 20, 22, 23, 25, 26, 28, 30, 31, 42, 48, 49, 61, 75, 77, 82, 83, 84, 85, 86, 89, 90, 91, 93, 95, 96, 97, 98, 100, 101, 102], "distance_to_nearest_neighbor": [5, 85, 86, 87, 89, 90, 93], "789": 5, "get_issu": [5, 10, 13, 84, 86, 87, 89, 90, 92, 96, 100], "issue_nam": [5, 6, 7, 10, 13, 14, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 85, 86], "focu": [5, 13, 90, 101, 102], "full": [5, 10, 13, 40, 56, 65, 87, 102], "summar": [5, 13, 18, 19, 20, 22, 23, 25, 26, 27, 28, 30, 31, 36, 58, 74, 78, 79, 101], "specific_issu": [5, 13], "lie": [5, 10, 66, 67, 83, 84, 85, 86, 87, 89, 90, 93], "get_issue_summari": [5, 13, 86], "get_info": [5, 13, 86, 90], "yet": [5, 17, 27, 56, 91, 95], "list_possible_issue_typ": [5, 14, 15], "regist": [5, 7, 14, 15, 17, 27, 37, 41, 85], "rtype": [5, 14, 18, 19, 20, 22, 23, 25, 26, 27, 28, 30, 31, 37, 41], "registri": [5, 14, 15], "list_default_issue_typ": [5, 14, 15], "folder": [5, 84, 85, 87], "load": [5, 12, 40, 65, 87, 91, 92, 93, 97, 98, 101, 102], "futur": [5, 10, 22, 37, 41, 57, 79, 83, 84, 85, 90, 92], "overwrit": [5, 85], "separ": [5, 36, 48, 61, 85, 86, 87, 92, 97, 99], "static": 5, "rememb": [5, 90, 92, 93], "part": [5, 10, 37, 41, 43, 62, 64, 65, 84, 85, 91, 101, 102], "ident": [5, 10, 22, 52, 90], "datalab": [6, 8, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 79, 82, 83, 84, 87, 92, 95, 100], "walk": 7, "alongsid": [7, 37, 41, 85, 92], "pre": [7, 8, 10, 37, 41, 85, 86, 100], "runtim": [7, 37, 40, 41, 69, 71, 73, 84, 87, 92], "issue_manager_factori": [7, 14, 85], "myissuemanag": [7, 14], "myissuemanagerforregress": 7, "decor": [7, 14], "ll": [7, 48, 82, 83, 84, 85, 86, 87, 89, 90, 92, 93, 95, 96, 97, 98, 99, 100, 102], "thing": [7, 41, 83, 93, 100], "next": [7, 57, 79, 82, 83, 84, 89, 90, 92, 95, 97, 100, 102], "dummi": 7, "randint": [7, 31, 48, 85, 86, 92], "mark": [7, 10, 80, 97, 98, 100], "regard": [7, 86, 93], "rand": [7, 48, 85, 86], "is_": [7, 10, 85], "_issu": [7, 10, 85], "issue_score_kei": [7, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 85], "whole": [7, 26, 37, 41, 86], "make_summari": [7, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 85], "popul": [7, 86, 90], "verbosity_level": [7, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], "std": [7, 97], "raw_scor": 7, "bit": 7, "involv": [7, 40, 74, 78, 92, 96], "intermediate_arg": 7, "min": [7, 48, 64, 77, 85, 92, 98], "sin_filt": 7, "sin": 7, "arang": 7, "kernel": 7, "affect": [7, 10, 37, 41, 71, 77, 90, 92], "easili": [7, 46, 80, 82, 83, 84, 86, 89, 90, 93, 95, 96, 98, 99, 100, 101], "hard": [7, 41, 91, 98], "sai": [7, 10, 37, 41, 96, 101], "anoth": [7, 22, 36, 40, 51, 64, 67, 83, 89, 90, 92, 93, 95, 98], "try": [7, 9, 10, 40, 43, 56, 57, 71, 73, 79, 86, 87, 89, 90, 92, 93, 101], "won": [7, 37, 41, 85, 86, 92, 96], "issue_manag": [7, 10, 11, 13, 15, 18, 19, 20, 23, 25, 26, 27, 28, 30, 31, 85], "instanti": [7, 16, 40, 56, 66, 83, 84, 86, 89], "477762": 7, "286455": 7, "term": [7, 10, 46, 52, 65, 84, 85, 86, 87, 89, 90, 93], "4778": 7, "is_basic_issu": 7, "basic_scor": 7, "13": [7, 19, 28, 82, 83, 84, 85, 86, 87, 89, 90, 91, 93, 95, 97, 98, 100, 101, 102], "003042": 7, "058117": 7, "11": [7, 56, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 95, 96, 97, 98, 100, 101, 102], "121908": 7, "15": [7, 50, 56, 69, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 95, 97, 98, 100, 101, 102], "169312": 7, "17": [7, 83, 84, 86, 87, 89, 90, 91, 92, 93, 95, 97, 98, 100, 101, 102], "229044": 7, "2865": 7, "is_intermediate_issu": 7, "intermediate_scor": 7, "000000": [7, 85, 86, 91, 93], "007059": 7, "009967": 7, "010995": 7, "087332": 7, "016296": 7, "03947": 7, "019459": 7, "794251": 7, "underperform": [8, 9, 31], "group": [8, 9, 26, 31, 91, 97, 102], "dbscan": [8, 10, 31, 92], "hdbscan": [8, 92], "etc": [8, 10, 22, 32, 37, 41, 46, 56, 57, 75, 79, 85, 86, 89, 90, 92, 93, 96, 100], "sensit": [8, 10, 50], "ep": [8, 31, 65], "radiu": 8, "min_sampl": [8, 31], "kmean": [8, 92], "your_data": 8, "get_pred_prob": 8, "n_cluster": [8, 31, 92], "cluster_id": [8, 10, 31, 92], "labels_": 8, "underperforming_group": [8, 10, 14, 21, 86, 87, 89, 90, 92, 93], "search": [9, 10, 20, 26, 27, 51, 69, 92, 99], "nondefault": 9, "Near": [9, 92], "imbal": [9, 21, 61, 66, 67, 86], "null": [9, 14, 21, 86, 87, 90, 93], "togeth": [9, 10, 46, 83, 85, 86, 87, 89, 90, 93, 100, 102], "built": [9, 48], "own": [9, 37, 39, 41, 55, 61, 62, 65, 71, 75, 82, 83, 84, 86, 87, 89, 90, 92, 95, 96, 100, 101, 102], "prerequisit": 9, "basic": [9, 41, 56, 89, 90, 98], "fulli": [9, 10, 37, 41, 56, 92], "platform": [9, 10, 79, 87, 89, 90, 92], "write": [9, 10], "code": [9, 10, 37, 41, 46, 52, 56, 79, 80, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 95, 96, 97, 98, 100, 101, 102], "being": [9, 10, 13, 36, 37, 41, 43, 48, 51, 52, 67, 82, 89, 92, 93, 100, 101], "100x": [9, 10], "faster": [9, 10, 40, 66, 69, 71, 73, 92, 93], "intellig": [9, 10], "quickli": [9, 10, 38, 82, 84, 87, 89, 90, 92, 96, 98, 101, 102], "fix": [9, 10, 57, 83, 90, 93, 100], "scientist": [9, 10], "million": [9, 10, 102], "thank": [9, 10], "ai": [9, 10, 79, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 94, 95, 96, 98, 100, 102], "suggest": [9, 10, 36, 57, 58, 64, 83, 87, 90, 92, 100], "power": [9, 10, 87, 89, 90, 91, 93, 102], "automl": [9, 10, 79, 92], "system": [9, 10, 84, 87, 89, 90, 101], "foundat": [9, 10, 79], "improv": [9, 10, 57, 82, 83, 86, 87, 91, 92, 93, 100, 101], "click": [9, 10, 84, 85, 86, 87, 91, 93, 95, 96, 98, 100, 102], "tune": [9, 10, 83, 84, 90, 91, 98], "serv": [9, 10, 13, 16, 95], "auto": [9, 10, 82, 83, 86, 91, 92, 100], "free": [9, 10, 79, 84, 86, 87, 89, 90, 92, 93], "page": [10, 86, 92, 93], "variou": [10, 13, 30, 39, 53, 55, 79, 82, 85, 86, 89, 90, 91, 92, 93, 95, 97], "why": [10, 90], "matter": [10, 36, 58, 83, 90], "didn": 10, "plu": [10, 100], "_score": 10, "badli": [10, 64, 82, 83, 102], "issue_scor": 10, "outlier_scor": [10, 28, 85, 86, 87, 89, 90, 93, 98], "atyp": [10, 66, 85, 86, 87, 89, 90, 93, 98], "datapoint": [10, 31, 43, 48, 52, 67, 70, 79, 82, 83, 84, 85, 86, 89, 90, 92, 99, 100], "is_issu": [10, 22], "is_outlier_issu": [10, 85, 86, 87, 89, 90, 93], "annot": [10, 36, 47, 57, 58, 59, 61, 62, 64, 65, 74, 77, 78, 79, 84, 85, 86, 87, 89, 90, 92, 93, 94, 97, 101], "dissimilar": [10, 89, 90], "preced": 10, "incorrect": [10, 64, 67, 70, 82, 84, 85, 86, 87, 89, 90, 93, 97, 100], "due": [10, 40, 43, 67, 71, 73, 84, 85, 86, 87, 89, 90, 93, 100], "appear": [10, 36, 47, 58, 59, 62, 70, 86, 87, 89, 90, 100, 101], "now": [10, 40, 80, 82, 83, 84, 86, 95, 97, 98, 100, 102], "u": [10, 82, 83, 84, 85, 87, 89, 92, 93, 95, 96, 99, 100, 101, 102], "token": [10, 42, 51, 73, 74, 75, 76, 77, 78, 92, 93, 94], "hamper": [10, 87, 91], "analyt": [10, 79, 92, 95], "lead": [10, 64, 67, 87, 97], "draw": [10, 85, 86], "conclus": [10, 90], "veri": [10, 36, 58, 62, 64, 83, 85, 86, 87, 89, 90, 92, 93, 95, 98, 100], "rare": [10, 43, 65, 85, 86, 87, 89, 90, 92, 93], "anomal": [10, 67, 85, 86, 87, 89, 90, 93], "articl": [10, 40, 92], "blog": 10, "unexpect": [10, 37, 41, 90], "consequ": 10, "inspect": [10, 83, 84, 86, 87, 93, 97, 100], "extrem": [10, 85, 86, 87, 89, 90, 92, 93], "record": [10, 37, 41, 84, 89, 100], "abbrevi": 10, "misspel": 10, "typo": [10, 78], "resolut": 10, "video": [10, 91], "audio": [10, 85, 86, 88, 92], "minor": [10, 51], "variat": 10, "translat": 10, "d": [10, 50, 82, 89, 90, 92, 93, 96, 100, 102], "constant": [10, 31, 69], "median": [10, 30, 50], "question": [10, 22, 79, 93], "nearli": [10, 22, 86, 87, 89, 90], "awar": [10, 80, 93], "presenc": [10, 93], "near_dupl": [10, 14, 19, 85, 86, 87, 89, 90, 92, 93], "signific": [10, 89, 90, 93], "violat": [10, 89, 90, 93], "assumpt": [10, 89, 90, 93], "changepoint": [10, 89, 90, 93], "shift": [10, 89, 90, 93], "drift": [10, 86, 89, 93], "autocorrel": [10, 89, 90, 93], "almost": [10, 89, 90, 93], "adjac": [10, 89, 90, 93], "tend": [10, 36, 46, 89, 90, 93, 101, 102], "sequenti": [10, 37, 41, 56, 87], "gap": 10, "b": [10, 18, 19, 20, 22, 23, 25, 26, 28, 30, 31, 36, 51, 52, 77, 82, 89, 90, 91, 92, 93, 99, 102], "x1": [10, 62, 65, 97], "x2": [10, 62, 65, 97], "10th": 10, "100th": 10, "90": [10, 77, 82, 89, 93, 99, 100], "similarli": [10, 37, 41, 85, 87, 89, 92, 97], "math": [10, 87], "behind": [10, 66, 93], "proper": [10, 52, 57, 62, 65, 82, 87, 90, 92, 95, 97], "scenario": [10, 67, 85, 86], "underli": [10, 42, 66, 75, 77, 102], "stem": [10, 66, 98], "evolv": 10, "influenc": 10, "act": [10, 64, 85], "accordingli": [10, 32], "emploi": [10, 96, 98], "partit": [10, 99], "ahead": 10, "good": [10, 37, 41, 50, 56, 58, 64, 67, 71, 73, 74, 79, 87, 89, 90], "problem": [10, 32, 40, 48, 74, 79, 85, 86, 87, 90, 92], "deploy": [10, 82, 83, 93, 100], "overlook": [10, 64, 97], "fact": 10, "thu": [10, 36, 41, 58, 82, 84, 89, 90, 93, 99, 102], "diagnos": [10, 86, 92], "rarest": [10, 86], "q": [10, 97], "subpar": 10, "special": [10, 51], "techniqu": [10, 97], "smote": 10, "asymmetr": [10, 36], "class_imbal": [10, 14, 20, 86, 87, 89, 90, 93], "excess": [10, 87], "dark": [10, 101], "bright": [10, 102], "blurri": [10, 87], "lack": [10, 56], "unusu": [10, 97, 98], "cluster": [10, 18, 31], "slice": 10, "poor": 10, "subpopul": 10, "faq": [10, 79, 86, 87, 89, 90, 94], "get_self_confidence_for_each_label": [10, 48, 67], "r": [10, 40, 69, 85, 86, 100, 101], "tabular": [10, 79, 81, 85, 86, 88, 92, 95], "categor": [10, 66, 81, 82, 85, 86, 88, 92, 100], "encod": [10, 49, 65, 71, 74, 82, 83, 89, 90, 92, 100, 101], "miss": [10, 27, 37, 41, 52, 62, 64, 89, 92, 97, 100], "pattern": 10, "isn": [10, 17, 27], "scalabl": 10, "sacrific": 10, "One": [10, 52, 66, 92], "quantif": 10, "data_valu": [10, 14, 21], "exert": [10, 86], "possible_issue_typ": 10, "label_kwarg": 10, "outlier_kwarg": 10, "near_duplicate_kwarg": 10, "non_iid_kwarg": 10, "class_imbalance_kwarg": 10, "underperforming_group_kwarg": 10, "null_kwarg": 10, "data_valuation_kwarg": 10, "health_summary_paramet": [10, 21, 23, 30], "health_summari": [10, 23, 36, 79, 91], "health_summary_kwarg": 10, "tandem": [10, 91], "view": [10, 37, 41, 42, 43, 73, 75, 77, 79, 82, 83, 84, 85, 86, 89, 90, 91, 93, 95, 96, 97, 98, 99, 100, 102], "ood_kwarg": 10, "outofdistribut": [10, 28, 66, 98], "outsid": [10, 92, 96], "outlierissuemanag": [10, 14, 21, 28, 85], "nearduplicateissuemanag": [10, 14, 19, 21], "noniidissuemanag": [10, 14, 21, 26], "num_permut": [10, 26], "permut": [10, 26], "significance_threshold": [10, 26], "signic": 10, "noniid": [10, 21], "classimbalanceissuemanag": [10, 14, 20, 21], "underperforminggroupissuemanag": [10, 14, 21, 31], "determinin": 10, "neighbour": 10, "min_cluster_sampl": [10, 31], "filter_cluster_id": [10, 21, 31], "clustering_kwarg": [10, 31], "nullissuemanag": [10, 14, 21, 27], "datavaluationissuemanag": [10, 14, 18, 21], "codeblock": 10, "demonstr": [10, 40, 85, 86, 87, 90, 92, 93, 95, 96, 97, 100, 101], "howev": [10, 37, 41, 52, 82, 83, 84, 87, 89, 90, 95, 99, 101], "mandatori": 10, "image_issue_types_kwarg": 10, "32": [10, 84, 85, 91, 95, 97], "fewer": [10, 43, 52, 97], "vice": [10, 58], "versa": [10, 58], "light": [10, 87, 91, 97, 101], "29": [10, 87, 91, 95, 96, 97, 101, 102], "low_inform": [10, 87], "odd_aspect_ratio": [10, 87], "35": [10, 85, 91, 95, 96, 97], "odd_siz": [10, 87], "doc": [10, 37, 41, 79, 84, 85, 86, 87, 91, 93, 95, 96, 98, 100, 102], "studio": [11, 79, 86, 87, 89, 90, 92], "data_issu": [11, 15, 16, 33, 85], "issue_find": [11, 15], "factori": [11, 15, 16], "model_output": [11, 15], "except": [12, 37, 41, 56, 67, 85, 86, 87, 95], "dataformaterror": [12, 15], "add_not": 12, "with_traceback": 12, "tb": 12, "__traceback__": 12, "datasetdicterror": [12, 15], "datasetdict": 12, "datasetloaderror": [12, 15], "dataset_typ": 12, "fail": 12, "hold": 12, "associ": [12, 16, 32, 34, 37, 41, 65, 95], "sublist": 12, "map_to_int": 12, "abc": [12, 22, 32], "is_avail": [12, 87], "dataissu": [13, 15, 16, 33], "central": [13, 102], "repositori": 13, "strategi": [13, 48, 92], "_infostrategi": 13, "basi": 13, "collect_statist": 13, "reus": [13, 22], "avoid": [13, 37, 40, 41, 43, 52, 59, 62, 65, 69, 71, 73, 85, 86, 92], "recomput": [13, 83], "weighted_knn_graph": 13, "issue_manager_that_computes_knn_graph": 13, "collect_issues_from_issue_manag": 13, "collect_issues_from_imagelab": 13, "imagelab": 13, "set_health_scor": 13, "health": [13, 23, 36, 58, 79], "get_data_statist": [13, 15], "concret": 14, "subclass": [14, 37, 41, 66, 85], "regressionlabelissuemanag": [14, 21, 29, 30], "multilabelissuemanag": [14, 21, 24, 25], "from_str": [14, 34, 44, 48], "my_issu": 14, "logic": [14, 34, 40, 43, 71, 73], "stabl": [15, 21, 24, 29, 39, 44, 52, 55, 66, 80], "issuefind": [15, 16, 33], "modeloutput": [15, 32], "multiclasspredprob": [15, 32], "regressionpredict": [15, 32], "multilabelpredprob": [15, 32], "instati": 16, "public": [16, 93, 97, 101, 102], "creation": [16, 41], "execut": [16, 37, 41, 85, 92, 97], "coordin": [16, 62, 64, 65, 97, 102], "behavior": [16, 36, 37, 41, 65, 92], "At": [16, 65, 92], "get_available_issue_typ": 16, "direct": [17, 27, 37, 41, 56], "valuabl": 18, "vstack": [18, 52, 87, 91, 92, 93, 95, 96], "25": [18, 26, 37, 48, 50, 86, 87, 91, 93, 95, 96, 97, 102], "classvar": [18, 19, 20, 22, 23, 25, 26, 27, 28, 30, 31], "short": [18, 19, 20, 22, 23, 25, 26, 27, 28, 30, 31, 51, 52], "data_valuation_scor": 18, "item": [18, 19, 20, 22, 23, 25, 26, 27, 28, 30, 31, 37, 41, 52, 85, 86, 87, 92, 93, 95, 96], "some_info_kei": [18, 19, 20, 22, 23, 25, 26, 27, 28, 30, 31], "additional_info_kei": [18, 19, 20, 22, 23, 25, 26, 27, 28, 30, 31], "default_threshold": [18, 21, 28], "collect_info": [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], "info_to_omit": [18, 19, 20, 22, 23, 25, 26, 28, 30, 31], "compos": [18, 19, 20, 22, 23, 25, 26, 28, 30, 31, 37, 41, 83, 90, 98], "is_x_issu": [18, 19, 20, 22, 23, 25, 26, 28, 30, 31], "x_score": [18, 19, 20, 22, 23, 25, 26, 28, 30, 31], "val_a": [18, 19, 20, 22, 23, 25, 26, 28, 30, 31], "val_b1": [18, 19, 20, 22, 23, 25, 26, 28, 30, 31], "val_b2": [18, 19, 20, 22, 23, 25, 26, 28, 30, 31], "report_str": [18, 19, 20, 22, 23, 25, 26, 27, 28, 30, 31, 33], "_": [19, 22, 23, 25, 26, 27, 30, 31, 48, 51, 52, 82, 84, 85, 87, 91, 93, 96], "near_duplicate_set": [19, 21, 85, 86, 87, 89, 90, 92, 93], "occurr": [19, 20, 22, 26, 27, 28, 31, 51], "median_nn_dist": 19, "near_duplicate_scor": [19, 85, 86, 87, 89, 90, 92, 93], "class_imbalance_scor": [20, 86], "bleed": [21, 24, 29, 39], "edg": [21, 24, 29, 39, 64, 79, 93, 102], "sharp": [21, 24, 29, 39], "get_health_summari": [21, 23], "ood": [21, 28, 66, 67, 85, 86, 87, 90, 93, 98], "simplified_kolmogorov_smirnov_test": [21, 26], "outlier_cluster_label": [21, 31], "no_underperforming_cluster_id": [21, 31], "set_knn_graph": [21, 31], "perform_clust": [21, 31], "get_worst_clust": [21, 31], "find_issues_with_predict": [21, 29, 30], "find_issues_with_featur": [21, 29, 30], "believ": [22, 101], "priori": [22, 93], "abstract": [22, 32], "applic": [23, 57, 92, 93, 95, 102], "typevar": [23, 25, 37, 41, 51, 61, 64, 65], "scalartyp": [23, 25], "covari": [23, 25, 69, 100], "summary_dict": 23, "label_scor": [23, 25, 30, 84, 85, 86, 87, 89, 90, 93, 96, 100], "neighbor_histogram": 26, "non_neighbor_histogram": 26, "kolmogorov": 26, "smirnov": 26, "largest": [26, 40, 48, 67, 71, 73, 97, 101], "empir": [26, 47, 57], "cumul": 26, "ecdf": 26, "histogram": [26, 89, 100], "absolut": [26, 30], "trial": 26, "non_iid_scor": [26, 86, 89, 90, 93], "null_track": 27, "extend": [27, 49, 56, 87, 97, 98, 102], "superclass": 27, "arbitrari": [27, 36, 73, 77, 85, 98, 100], "prompt": 27, "address": [27, 83, 85, 86, 90, 92], "enabl": [27, 41], "null_scor": [27, 86], "37037": 28, "q3_avg_dist": 28, "iqr_avg_dist": 28, "median_outlier_scor": 28, "multipli": 30, "deleg": 30, "confus": [31, 32, 36, 37, 41, 43, 52, 65, 83, 102], "50": [31, 41, 92, 93, 95, 97, 98, 100], "keepdim": [31, 92], "signifi": 31, "absenc": 31, "find_issues_kwarg": 31, "int64": [31, 84, 95], "npt": 31, "int_": 31, "id": [31, 57, 85, 87, 92, 95], "unique_cluster_id": 31, "_description_": 31, "performed_clust": 31, "worst_cluster_id": 31, "underperforming_group_scor": [31, 86], "convent": [32, 34], "subject": [32, 34], "meant": [32, 34], "Not": 32, "mainli": [32, 98, 102], "content": [32, 66, 84, 85, 86, 87, 91, 93, 95, 96, 98, 100, 102], "fetch": [32, 40, 84, 86, 92], "datset": 33, "exclud": [33, 42, 74, 78, 85, 92, 102], "get_report": 33, "enum": [34, 48], "qualnam": [34, 48], "boundari": [34, 48, 85, 86], "continu": [34, 56, 82, 83, 87, 90, 92, 95, 97, 100, 102], "binari": [34, 48, 52, 59, 61, 93, 102], "simultan": [34, 100], "task_str": 34, "is_classif": 34, "__contains__": [34, 44, 48], "member": [34, 37, 41, 48, 85, 86], "typeerror": [34, 48], "12": [34, 48, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 95, 97, 98, 100, 101, 102], "__getitem__": [34, 44, 48], "match": [34, 36, 37, 41, 43, 48, 57, 58, 67, 85, 86, 87, 91, 97, 99, 101], "__iter__": [34, 44, 48], "__len__": [34, 44, 48], "alias": [34, 48], "is_regress": 34, "is_multilabel": 34, "overview": [36, 82, 83, 84, 86, 87, 89, 90, 95, 97, 98, 100, 102], "modifi": [36, 37, 40, 41, 52, 92, 93], "help": [36, 37, 41, 65, 79, 80, 82, 83, 84, 85, 87, 89, 90, 91, 92, 95, 96, 100, 101, 102], "rank_classes_by_label_qu": [36, 86], "merg": [36, 51, 79, 91, 92, 102], "find_overlapping_class": [36, 92, 93], "problemat": [36, 58, 74, 78, 84, 97, 102], "unnorm": [36, 58, 93], "abov": [36, 37, 40, 41, 52, 57, 64, 65, 67, 73, 77, 82, 83, 84, 85, 86, 87, 89, 90, 92, 93, 95, 96, 97, 99, 100, 101, 102], "model_select": [36, 48, 82, 83, 84, 85, 86, 87, 89, 90, 92, 93, 95, 96, 98, 100], "cross_val_predict": [36, 41, 82, 83, 84, 85, 86, 89, 90, 92, 93, 95, 99, 100], "get_data_labels_from_dataset": 36, "yourfavoritemodel": [36, 93], "cv": [36, 48, 82, 84, 85, 86, 89, 93, 95], "df": [36, 52, 78, 84, 92], "overall_label_qu": [36, 58], "col": 36, "prob": [36, 51, 93, 99], "divid": [36, 58, 67], "label_nois": [36, 58], "human": [36, 91, 101, 102], "clearli": [36, 67, 87, 97, 101], "num": [36, 58, 91, 93], "overlap": [36, 79, 91, 92, 93], "ontolog": 36, "publish": [36, 102], "therefor": [36, 67], "vehicl": [36, 91], "truck": [36, 91, 98, 101], "intuit": [36, 58], "car": [36, 91, 97, 101], "frequent": [36, 57, 89, 92, 100], "characterist": 36, "l": [36, 37, 41, 62, 64, 65], "class1": 36, "class2": 36, "relationship": 36, "dog": [36, 52, 58, 60, 74, 91, 92, 98, 99, 102], "cat": [36, 52, 58, 60, 91, 92, 98, 99], "captur": [36, 84, 97, 98, 101], "co": [36, 37, 38], "noisy_label": [36, 85, 86, 96], "overlapping_class": 36, "descend": [36, 37, 41, 48, 58, 65], "overall_label_health_scor": [36, 58, 93], "half": [36, 37, 39, 41, 58, 91, 102], "health_scor": [36, 58], "classes_by_label_qu": [36, 86], "cnn": [37, 39, 41, 87], "cifar": [37, 38, 91, 98], "teach": [37, 38], "bhanml": 37, "blob": 37, "master": [37, 82, 83, 84, 85, 86, 87, 89, 90, 91, 93, 95, 96, 97, 98, 100], "call_bn": [37, 39], "bn": 37, "input_channel": 37, "n_output": 37, "dropout_r": 37, "top_bn": 37, "architectur": [37, 41], "shown": [37, 65, 85, 92, 95, 98, 99, 101, 102], "forward": [37, 38, 39, 41, 87, 95], "overridden": [37, 41], "although": [37, 41, 66, 82, 89], "recip": [37, 41], "afterward": [37, 41], "sinc": [37, 41, 45, 53, 58, 65, 73, 77, 92, 95, 96, 97, 99, 102], "former": [37, 41], "hook": [37, 41, 91], "silent": [37, 40, 41], "t_destin": [37, 39, 41], "__call__": [37, 39, 41, 44, 48], "add_modul": [37, 39, 41], "child": [37, 41], "fn": [37, 41, 65], "recurs": [37, 41, 48], "submodul": [37, 41], "children": [37, 39, 41, 102], "nn": [37, 38, 41, 87], "init": [37, 41, 93], "no_grad": [37, 41, 87, 98], "init_weight": [37, 41], "linear": [37, 41, 83, 87, 90], "fill_": [37, 41], "net": [37, 41, 84, 87, 91], "in_featur": [37, 41], "out_featur": [37, 41], "bia": [37, 41, 87], "tensor": [37, 38, 41, 83, 84, 87, 90, 98], "requires_grad": [37, 41], "bfloat16": [37, 39, 41], "cast": [37, 41, 84], "buffer": [37, 39, 41], "datatyp": [37, 41], "xdoctest": [37, 41], "undefin": [37, 41], "var": [37, 41], "buf": [37, 41], "20l": [37, 41], "1l": [37, 41], "5l": [37, 41], "call_super_init": [37, 39, 41], "immedi": [37, 41, 98], "compil": [37, 39, 41, 56], "cpu": [37, 39, 41, 43, 84, 87], "move": [37, 41, 48, 80, 91], "cuda": [37, 39, 41, 84, 87], "devic": [37, 41, 84, 87], "gpu": [37, 41, 83, 84, 90], "live": [37, 41], "copi": [37, 41, 69, 82, 84, 85, 86, 89, 92, 96, 99, 100], "doubl": [37, 39, 41], "dump_patch": [37, 39, 41], "eval": [37, 39, 41, 87, 96, 98], "dropout": [37, 41], "batchnorm": [37, 41], "grad": [37, 41], "extra_repr": [37, 39, 41], "line": [37, 41, 79, 85, 91, 95, 98, 102], "get_buff": [37, 39, 41], "target": [37, 38, 41, 69, 70, 98, 100], "throw": [37, 41], "get_submodul": [37, 39, 41], "explan": [37, 41], "qualifi": [37, 41], "referenc": [37, 41], "attributeerror": [37, 41], "invalid": [37, 41, 90], "resolv": [37, 41, 102], "get_extra_st": [37, 39, 41], "state_dict": [37, 39, 41], "set_extra_st": [37, 39, 41], "build": [37, 41, 87, 101], "picklabl": [37, 41], "serial": [37, 41], "backward": [37, 41, 87], "break": [37, 41, 87, 97], "pickl": [37, 41, 97], "get_paramet": [37, 39, 41], "let": [37, 41, 66, 67, 82, 83, 84, 86, 87, 89, 90, 92, 95, 96, 97, 98, 100, 101, 102], "net_b": [37, 41], "net_c": [37, 41], "conv": [37, 41], "conv2d": [37, 41, 87], "16": [37, 41, 48, 56, 73, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 95, 97, 98, 101, 102], "33": [37, 41, 91, 97], "kernel_s": [37, 41], "stride": [37, 41], "200": [37, 41, 67, 91, 97, 102], "diagram": [37, 41, 99], "degre": [37, 41], "queri": [37, 41, 86, 87, 92, 96], "named_modul": [37, 39, 41], "o": [37, 41, 50, 51, 84, 85, 86, 91, 92, 93, 96, 97, 102], "transit": [37, 41], "ipu": [37, 39, 41], "load_state_dict": [37, 39, 41], "strict": [37, 41, 48], "persist": [37, 41], "strictli": [37, 41], "inplac": [37, 41, 95], "preserv": [37, 41, 52], "namedtupl": [37, 41], "missing_kei": [37, 41], "unexpected_kei": [37, 41], "runtimeerror": [37, 41], "idx": [37, 41, 52, 53, 65, 85, 87, 92, 93, 95, 97, 98], "named_buff": [37, 39, 41], "prefix": [37, 41, 84, 102], "remove_dupl": [37, 41], "prepend": [37, 41], "running_var": [37, 41], "named_children": [37, 39, 41], "conv4": [37, 41], "conv5": [37, 41], "memo": [37, 41], "named_paramet": [37, 39, 41], "register_backward_hook": [37, 39, 41], "deprec": [37, 41, 45, 83, 84, 90, 92], "favor": [37, 41], "register_full_backward_hook": [37, 39, 41], "removablehandl": [37, 41], "register_buff": [37, 39, 41], "running_mean": [37, 41], "register_forward_hook": [37, 39, 41], "with_kwarg": [37, 41], "always_cal": [37, 41], "possibli": [37, 41, 82, 89], "fire": [37, 41, 91], "register_module_forward_hook": [37, 41], "regardless": [37, 41, 85, 86], "register_forward_pre_hook": [37, 39, 41], "And": [37, 41], "forward_pr": [37, 41], "register_module_forward_pre_hook": [37, 41], "gradient": [37, 41, 87, 89, 100], "grad_input": [37, 41], "grad_output": [37, 41], "technic": [37, 41], "caller": [37, 41], "register_module_full_backward_hook": [37, 41], "register_full_backward_pre_hook": [37, 39, 41], "backward_pr": [37, 41], "register_module_full_backward_pre_hook": [37, 41], "register_load_state_dict_post_hook": [37, 39, 41], "post": [37, 41], "incompatible_kei": [37, 41], "modif": [37, 41], "thrown": [37, 41], "register_modul": [37, 39, 41], "register_paramet": [37, 39, 41], "register_state_dict_pre_hook": [37, 39, 41], "keep_var": [37, 41], "requires_grad_": [37, 39, 41], "autograd": [37, 41], "freez": [37, 41, 83, 84, 90], "finetun": [37, 41], "gan": [37, 41], "share_memori": [37, 39, 41], "share_memory_": [37, 41], "destin": [37, 41], "shallow": [37, 41], "releas": [37, 41, 56, 80, 84, 92], "design": [37, 41], "ordereddict": [37, 41], "detach": [37, 41, 87], "non_block": [37, 41], "memory_format": [37, 41], "channels_last": [37, 41], "Its": [37, 41, 48, 58, 64], "complex": [37, 41, 84], "integr": [37, 41, 79, 92], "asynchron": [37, 41], "host": [37, 41], "pin": [37, 41, 83, 90, 91], "desir": [37, 41, 51, 65], "4d": [37, 41], "ignore_w": [37, 41], "determinist": [37, 41, 84], "1913": [37, 41], "3420": [37, 41], "5113": [37, 41], "2325": [37, 41], "env": [37, 41], "torch_doctest_cuda1": [37, 41], "gpu1": [37, 41], "1914": [37, 41], "5112": [37, 41], "2324": [37, 41], "float16": [37, 41], "cdoubl": [37, 41], "3741": [37, 41], "2382": [37, 41], "5593": [37, 41], "4443": [37, 41], "complex128": [37, 41], "6122": [37, 41], "1150": [37, 41], "to_empti": [37, 39, 41], "storag": [37, 41, 83, 90], "dst_type": [37, 41], "xpu": [37, 39, 41], "zero_grad": [37, 39, 41, 87], "set_to_non": [37, 41], "reset": [37, 41], "context": [37, 41, 97], "noisili": [38, 93], "han": 38, "2018": 38, "cifar_cnn": [38, 39], "loss_coteach": [38, 39], "y_1": 38, "y_2": 38, "forget_r": 38, "class_weight": 38, "logit": [38, 56, 87], "decim": [38, 52], "forget": [38, 48, 102], "rate_schedul": 38, "epoch": [38, 39, 41, 87, 92], "initialize_lr_schedul": [38, 39], "lr": [38, 39, 41], "001": [38, 67, 92], "250": [38, 85, 86, 93, 97, 102], "epoch_decay_start": 38, "80": [38, 82, 89, 96, 100], "schedul": 38, "beta": 38, "adam": 38, "adjust_learning_r": [38, 39], "alpha_plan": 38, "beta1_plan": 38, "forget_rate_schedul": [38, 39], "num_gradu": 38, "expon": 38, "tell": [38, 83, 87, 90, 93], "train_load": [38, 41], "model1": [38, 93], "optimizer1": 38, "model2": [38, 93], "optimizer2": 38, "dataload": [38, 87, 98], "parser": 38, "parse_arg": 38, "num_iter_per_epoch": 38, "print_freq": 38, "topk": 38, "top1": 38, "top5": 38, "test_load": 38, "offici": [39, 55, 102], "wish": [39, 55, 98, 101, 102], "adj_confident_thresholds_shar": [39, 40], "labels_shar": [39, 40], "pred_probs_shar": [39, 40], "labelinspector": [39, 40, 92], "get_num_issu": [39, 40], "get_quality_scor": [39, 40], "update_confident_threshold": [39, 40], "score_label_qu": [39, 40], "split_arr": [39, 40], "span_classif": 39, "display_issu": [39, 42, 72, 73, 74, 75, 76, 77, 78, 101, 102], "mnist_pytorch": 39, "get_mnist_dataset": [39, 41], "get_sklearn_digits_dataset": [39, 41], "simplenet": [39, 41], "batch_siz": [39, 40, 41, 71, 73, 87, 92, 98, 101], "log_interv": [39, 41], "momentum": [39, 41], "no_cuda": [39, 41], "test_batch_s": [39, 41, 87], "loader": [39, 41, 87], "set_predict_proba_request": [39, 41], "set_predict_request": [39, 41], "coteach": [39, 80], "mini": [40, 71, 73, 92], "low_self_confid": [40, 43, 59], "self_confid": [40, 43, 44, 48, 59, 61, 67, 75, 77, 82, 83, 92, 93], "conveni": [40, 83, 84, 90], "script": 40, "labels_fil": [40, 92], "pred_probs_fil": [40, 92], "quality_score_kwarg": 40, "num_issue_kwarg": 40, "return_mask": 40, "variant": [40, 57, 101], "read": [40, 45, 86, 92, 93, 98, 102], "zarr": [40, 92], "memmap": [40, 101], "pythonspe": 40, "mmap": [40, 92], "hdf5": 40, "further": [40, 42, 58, 59, 61, 64, 65, 73, 74, 84, 92], "yourfil": 40, "npy": [40, 91, 92, 101], "mmap_mod": [40, 101], "tip": [40, 43, 56, 92], "save_arrai": 40, "your_arrai": 40, "disk": [40, 91, 92], "npz": [40, 102], "maxim": [40, 57, 71, 73, 101], "multiprocess": [40, 43, 59, 71, 73, 87, 92], "linux": [40, 71, 73], "physic": [40, 43, 71, 73, 97], "psutil": [40, 43, 71, 73], "labels_arrai": [40, 53], "predprob": 40, "pred_probs_arrai": 40, "back": [40, 65, 85, 92, 97, 98], "store_result": 40, "becom": [40, 98], "verifi": [40, 92, 95, 98], "long": [40, 57, 66, 95], "enough": [40, 52, 92], "chunk": [40, 99], "ram": [40, 91], "end_index": 40, "labels_batch": 40, "pred_probs_batch": 40, "batch_result": 40, "indices_of_examples_with_issu": [40, 92], "shortcut": 40, "encount": [40, 43, 71], "1000": [40, 84, 90, 92, 98], "aggreg": [40, 44, 48, 57, 61, 64, 67, 77, 92, 93, 95], "seen": [40, 92, 98, 102], "far": [40, 57], "label_quality_scor": [40, 61, 64, 67, 70, 93, 97], "method1": 40, "method2": 40, "normalized_margin": [40, 43, 44, 48, 59, 61, 67, 75, 77], "low_normalized_margin": [40, 43, 59], "issue_indic": [40, 64, 87], "update_num_issu": 40, "arr": [40, 92], "chunksiz": 40, "convnet": 41, "bespok": [41, 56], "download": [41, 84, 87, 92, 98], "mnist": [41, 79, 84, 91], "handwritten": 41, "digit": [41, 84, 91], "last": [41, 48, 62, 65, 85, 86, 92, 95, 97, 102], "sklearn_digits_test_s": 41, "64": [41, 82, 87, 89, 93, 97], "01": [41, 67, 69, 84, 93, 96, 97, 98], "templat": 41, "flexibli": 41, "among": [41, 57, 93], "test_set": 41, "Be": 41, "overrid": 41, "train_idx": [41, 52, 98], "train_label": [41, 83, 98], "scikit": [41, 52, 66, 79, 83, 84, 85, 86, 89, 90, 92, 100], "span": 42, "sentenc": [42, 51, 75, 77, 78, 83, 90], "token_classif": [42, 51, 75, 77, 78, 92], "encourag": [43, 59, 67, 70], "multilabel_classif": [43, 58, 59, 61, 67, 92, 96], "pred_probs_by_class": 43, "prune_count_matrix_col": 43, "rank_by_kwarg": [43, 59, 67, 93], "num_to_remove_per_class": [43, 59], "bad": [43, 59, 64, 67, 90, 92], "seem": [43, 93, 96], "aren": 43, "confidence_weighted_entropi": [43, 44, 48, 59, 61, 67, 75, 77], "label_issues_idx": [43, 67], "entropi": [43, 45, 47, 48, 66, 67], "prune_by_class": [43, 59, 93], "predicted_neq_given": [43, 59, 93], "prune_counts_matrix": 43, "smallest": [43, 67], "unus": 43, "number_of_mislabeled_examples_in_class_k": 43, "delet": [43, 79, 83, 92], "too": [43, 48, 66, 86, 87, 92, 97], "thread": [43, 59], "window": [43, 84, 91], "shorter": [43, 62], "find_predicted_neq_given": 43, "find_label_issues_using_argmax_confusion_matrix": 43, "remove_noise_from_class": [44, 52], "clip_noise_r": [44, 52], "clip_valu": [44, 52], "value_count": [44, 52, 92], "value_counts_fill_missing_class": [44, 52], "get_missing_class": [44, 52], "round_preserving_sum": [44, 52], "round_preserving_row_tot": [44, 52], "estimate_pu_f1": [44, 52], "confusion_matrix": [44, 52], "print_square_matrix": [44, 52], "print_noise_matrix": [44, 52, 93], "print_inverse_noise_matrix": [44, 52], "print_joint_matrix": [44, 52, 93], "compress_int_arrai": [44, 52], "train_val_split": [44, 52], "subset_x_i": [44, 52], "subset_label": [44, 52], "subset_data": [44, 52], "extract_indices_tf": [44, 52], "unshuffle_tensorflow_dataset": [44, 52], "is_torch_dataset": [44, 52], "is_tensorflow_dataset": [44, 52], "csr_vstack": [44, 52], "append_extra_datapoint": [44, 52], "get_num_class": [44, 52], "num_unique_class": [44, 52], "get_unique_class": [44, 52], "format_label": [44, 52], "smart_display_datafram": [44, 52], "force_two_dimens": [44, 52], "latent_algebra": [44, 80], "compute_ps_py_inv_noise_matrix": [44, 46], "compute_py_inv_noise_matrix": [44, 46], "compute_inv_noise_matrix": [44, 46], "compute_noise_matrix_from_invers": [44, 46], "compute_pi": [44, 46], "compute_pyx": [44, 46], "label_quality_util": 44, "get_normalized_entropi": [44, 45], "multilabel_util": [44, 96], "stack_compl": [44, 49], "get_onehot_num_class": [44, 49], "int2onehot": [44, 49, 96], "onehot2int": [44, 49, 96], "multilabel_scor": [44, 61], "classlabelscor": [44, 48], "exponential_moving_averag": [44, 48, 61], "softmin": [44, 48, 61, 64, 73, 77], "possible_method": [44, 48], "multilabelscor": [44, 48], "get_class_label_quality_scor": [44, 48], "multilabel_pi": [44, 48], "get_cross_validated_multilabel_pred_prob": [44, 48], "transform_distances_to_scor": [44, 50], "token_classification_util": [44, 102], "get_sent": [44, 51, 102], "filter_sent": [44, 51, 102], "process_token": [44, 51], "merge_prob": [44, 51], "color_sent": [44, 51], "assert_valid_input": [44, 53], "assert_valid_class_label": [44, 53], "assert_nonempty_input": [44, 53], "assert_indexing_work": [44, 53], "labels_to_arrai": [44, 53], "labels_to_list_multilabel": [44, 53], "min_allowed_prob": 45, "wikipedia": 45, "activ": [45, 47, 56, 57, 79, 95], "towardsdatasci": 45, "cheatsheet": 45, "ec57bc067c0b": 45, "clip": [45, 52, 84], "behav": 45, "unnecessari": [45, 92], "slightli": [45, 82, 83], "interv": [45, 48, 98], "herein": 46, "inexact": 46, "cours": 46, "propag": 46, "throughout": [46, 52, 69, 84, 95, 101, 102], "increas": [46, 64, 66, 67, 84, 85, 92, 95, 96, 102], "dot": [46, 77, 92], "true_labels_class_count": 46, "pyx": 46, "multiannot": 47, "assert_valid_inputs_multiannot": 47, "labels_multiannot": [47, 57], "ensembl": [47, 48, 57, 67, 82, 89, 92, 96, 98, 100], "allow_single_label": 47, "annotator_id": 47, "assert_valid_pred_prob": 47, "pred_probs_unlabel": [47, 57], "format_multiannotator_label": [47, 57, 95], "formatted_label": [47, 52], "old": [47, 52, 80, 84, 91], "check_consensus_label_class": 47, "consensus_label": [47, 57, 95], "consensus_method": [47, 57], "consensu": [47, 57, 79, 94, 102], "establish": [47, 56, 83, 100], "compute_soft_cross_entropi": 47, "soft": [47, 91], "find_best_temp_scal": 47, "coarse_search_rang": [47, 69, 92], "fine_search_s": [47, 69, 92], "temperatur": [47, 48, 64, 73, 77], "scale": [47, 50, 82, 91, 92, 98, 101], "factor": [47, 48, 50, 71, 73], "minim": [47, 64, 98], "temp_scale_pred_prob": 47, "temp": 47, "sharpen": [47, 91], "smoothen": 47, "get_normalized_margin_for_each_label": [48, 67], "get_confidence_weighted_entropy_for_each_label": [48, 67], "75": [48, 85, 86, 91, 95, 96, 97, 100, 102], "scorer": 48, "alpha": [48, 61, 64, 85, 86, 93, 96, 100], "exponenti": 48, "ema": 48, "s_1": 48, "s_k": 48, "ema_k": 48, "accord": [48, 59, 89, 90, 93, 102], "formula": [48, 50], "_t": 48, "cdot": 48, "s_t": 48, "qquad": 48, "leq": 48, "_1": 48, "give": [48, 67, 93, 95, 101], "recent": [48, 102], "success": 48, "previou": [48, 87, 92, 97], "discount": 48, "s_ema": 48, "175": [48, 87, 93, 97], "underflow": 48, "nan": [48, 57, 82, 89, 95, 100], "aggregated_scor": 48, "base_scor": 48, "base_scorer_kwarg": 48, "aggregator_kwarg": [48, 61], "n_sampl": 48, "n_label": 48, "worst": [48, 95], "class_label_quality_scor": 48, "42": [48, 90, 91, 97, 102], "452": 48, "new_scor": 48, "575": 48, "get_label_quality_scores_per_class": [48, 60, 61], "ml_scorer": 48, "binar": [48, 49], "reformat": [48, 84], "wider": 48, "splitter": 48, "kfold": [48, 87], "onevsrestclassifi": [48, 96], "randomforestclassifi": [48, 93, 96], "n_split": [48, 86, 87, 96], "pred_prob_slic": 49, "onehot": 49, "hot": [49, 59, 65, 71, 74, 82, 89, 91, 92, 100, 101], "onehot_matrix": 49, "avg_dist": 50, "scaling_factor": 50, "exp": [50, 66, 67, 85], "dt": 50, "right": [50, 62, 65, 83, 90, 96, 97, 98], "strength": [50, 65], "pronounc": 50, "differenti": 50, "ly": 50, "rule": [50, 51, 91], "thumb": 50, "ood_features_scor": [50, 66, 98], "88988177": 50, "80519832": 50, "readabl": 51, "lambda": [51, 84, 85, 92, 95], "long_sent": 51, "headlin": 51, "charact": [51, 52], "s1": 51, "s2": 51, "processed_token": 51, "alecnlcb": 51, "entiti": [51, 79, 92, 102], "mapped_ent": 51, "unique_ident": 51, "loc": [51, 85, 86, 87, 102], "nbitbas": [51, 61], "probs_merg": 51, "0125": [51, 77], "0375": 51, "075": 51, "025": 51, "color": [51, 74, 85, 86, 89, 93, 96, 98, 100, 101], "red": [51, 65, 85, 86, 91, 93, 96, 97, 98, 101], "colored_sent": 51, "termcolor": 51, "31msentenc": 51, "0m": 51, "ancillari": 52, "class_without_nois": 52, "any_other_class": 52, "choos": [52, 67, 82, 89, 92, 93, 100], "tradition": 52, "new_sum": 52, "fill": 52, "come": [52, 85, 86, 92, 101], "major": [52, 57, 80, 87, 98], "versu": [52, 93], "obviou": 52, "cgdeboer": 52, "iteround": 52, "reach": 52, "prob_s_eq_1": 52, "claesen": 52, "f1": [52, 65, 90, 93], "BE": 52, "left_nam": 52, "top_nam": 52, "titl": [52, 85, 86, 93, 96, 98], "short_titl": 52, "round_plac": 52, "pretti": [52, 93], "joint_matrix": 52, "num_possible_valu": 52, "holdout_idx": 52, "extract": [52, 66, 83, 84, 90, 95, 98, 101], "allow_shuffl": 52, "turn": [52, 79, 97], "shuffledataset": 52, "histori": 52, "pre_x": 52, "buffer_s": 52, "csr_matric": 52, "append": [52, 84, 87, 91, 92, 93, 95, 96, 97, 98, 102], "bottom": [52, 62, 65, 97], "to_data": 52, "from_data": 52, "taken": 52, "label_matrix": 52, "canon": 52, "displai": [52, 65, 74, 78, 83, 84, 90, 93, 102], "jupyt": [52, 84, 85, 86, 87, 91, 92, 93, 95, 96, 98, 100, 102], "notebook": [52, 57, 84, 86, 91, 92, 93, 95, 96, 97, 101, 102], "consol": 52, "html": [52, 62, 65, 66, 89, 92, 93], "allow_missing_class": 53, "allow_one_class": 53, "length_x": 53, "labellik": 53, "labels_list": [53, 59], "keraswrappermodel": [55, 56, 79], "keraswrappersequenti": [55, 56], "tf": [56, 84], "legaci": 56, "newer": 56, "interim": 56, "advis": [56, 96], "stabil": 56, "until": 56, "accommod": 56, "keraswrapp": 56, "huggingface_keras_imdb": 56, "unit": [56, 102], "model_kwarg": [56, 69], "compile_kwarg": 56, "sparsecategoricalcrossentropi": 56, "layer": [56, 83, 84, 90, 98], "dens": 56, "my_keras_model": 56, "from_logit": 56, "declar": 56, "apply_softmax": 56, "analysi": 57, "analyz": [57, 79, 93, 95, 96], "get_label_quality_multiannot": [57, 95], "vote": 57, "crowdsourc": [57, 79, 95], "dawid": [57, 95], "skene": [57, 95], "analog": [57, 91, 95], "chosen": [57, 67, 92, 95], "crowdlab": [57, 95], "unlabel": [57, 87, 89, 90, 95, 98, 101], "decid": [57, 83, 90, 91, 95, 100, 102], "get_active_learning_scor": [57, 95], "activelab": [57, 95], "priorit": [57, 64, 97, 101, 102], "showcas": 57, "main": 57, "best_qual": 57, "quality_method": 57, "calibrate_prob": 57, "return_detailed_qu": 57, "return_annotator_stat": 57, "return_weight": 57, "label_quality_score_kwarg": 57, "necessarili": [57, 65, 90, 93], "did": [57, 58, 82, 83, 84, 89, 93, 95, 100], "majority_vot": 57, "broken": [57, 65, 91, 100], "highest": [57, 65, 85, 87, 99], "0th": 57, "consensus_quality_scor": [57, 95], "annotator_agr": [57, 95], "reman": 57, "1st": 57, "2nd": [57, 71], "3rd": 57, "consensus_label_suffix": 57, "consensus_quality_score_suffix": 57, "suffix": 57, "emsembl": 57, "weigh": [57, 91], "agreement": [57, 95], "agre": 57, "prevent": [57, 92], "overconfid": [57, 99], "wrong": [57, 62, 64, 80, 83, 85, 86, 90, 92, 93, 97], "detailed_label_qu": [57, 95], "annotator_stat": [57, 95], "model_weight": 57, "annotator_weight": 57, "warn": [57, 85, 86, 87, 89, 90, 92, 93], "labels_info": 57, "num_annot": [57, 95], "deriv": [57, 95], "quality_annotator_1": 57, "quality_annotator_2": 57, "quality_annotator_m": 57, "annotator_qu": [57, 95], "num_examples_label": [57, 95], "agreement_with_consensu": [57, 95], "worst_class": [57, 95], "trustworthi": [57, 95, 100], "get_label_quality_multiannotator_ensembl": 57, "weigtht": 57, "budget": 57, "retrain": [57, 83, 100], "active_learning_scor": 57, "active_learning_scores_unlabel": 57, "get_active_learning_scores_ensembl": 57, "henc": [57, 84, 85, 95], "get_majority_vote_label": [57, 95], "event": 57, "lastli": [57, 89], "convert_long_to_wide_dataset": 57, "labels_multiannotator_long": 57, "wide": [57, 82, 83, 84], "suitabl": [57, 82, 89], "labels_multiannotator_wid": 57, "common_multilabel_issu": [58, 60], "mutual": [58, 96], "exclus": [58, 96], "rank_classes_by_multilabel_qu": [58, 60], "overall_multilabel_health_scor": [58, 60], "multilabel_health_summari": [58, 60], "classes_by_multilabel_qu": 58, "inner": [59, 73], "find_multilabel_issues_per_class": [59, 60], "per_class_label_issu": 59, "label_issues_list": 59, "pred_probs_list": [59, 67, 87, 93], "anim": [60, 98], "rat": 60, "predat": 60, "pet": 60, "reptil": 60, "manner": [61, 82, 83, 95, 100], "box": [62, 64, 65, 91, 97], "object_detect": [62, 64, 65, 97], "return_indices_ranked_by_scor": [62, 97], "overlapping_label_check": [62, 64], "suboptim": [62, 64], "locat": [62, 64, 97, 101, 102], "bbox": [62, 65, 97], "image_nam": [62, 65], "y1": [62, 65, 97], "y2": [62, 65, 97], "later": [62, 65, 66, 83, 102], "corner": [62, 65, 97], "xyxi": [62, 65, 97], "io": [62, 65, 84, 91], "keras_cv": [62, 65], "bounding_box": [62, 65, 97], "detectron": [62, 65, 97], "detectron2": [62, 65, 97], "readthedoc": [62, 65], "en": [62, 65], "latest": [62, 65], "visual": [62, 63, 65, 82, 85, 86, 87, 100, 102], "draw_box": [62, 65], "mmdetect": [62, 65, 97], "swap": [62, 64, 74, 78], "penal": [62, 64], "concern": [62, 64, 79, 86], "issues_from_scor": [63, 64, 72, 73, 74, 76, 77, 78, 97, 101, 102], "compute_overlooked_box_scor": [63, 64], "compute_badloc_box_scor": [63, 64], "compute_swap_box_scor": [63, 64], "pool_box_scores_per_imag": [63, 64], "object_counts_per_imag": [63, 65, 97], "bounding_box_size_distribut": [63, 65, 97], "class_label_distribut": [63, 65, 97], "get_sorted_bbox_count_idx": [63, 65], "plot_class_size_distribut": [63, 65], "plot_class_distribut": [63, 65], "get_average_per_class_confusion_matrix": [63, 65], "calculate_per_class_metr": [63, 65], "aggregation_weight": 64, "imperfect": [64, 92], "chose": [64, 95, 97], "imperfectli": [64, 97], "dirti": [64, 67, 70, 100], "subtyp": 64, "badloc": 64, "nonneg": 64, "high_probability_threshold": 64, "auxiliary_input": [64, 65], "vari": [64, 86], "iou": [64, 65], "heavili": 64, "auxiliarytypesdict": 64, "pred_label": [64, 83], "pred_label_prob": 64, "pred_bbox": 64, "lab_label": 64, "lab_bbox": 64, "similarity_matrix": 64, "min_possible_similar": 64, "scores_overlook": 64, "low_probability_threshold": 64, "scores_badloc": 64, "accident": [64, 83, 89, 90, 92], "scores_swap": 64, "box_scor": 64, "image_scor": [64, 73, 101], "discov": [65, 86, 102], "abnorm": [65, 87, 97], "auxiliari": [65, 98, 101], "_get_valid_inputs_for_compute_scor": 65, "object_count": 65, "down": 65, "bbox_siz": 65, "class_distribut": 65, "plot": [65, 85, 86, 93, 96, 98, 100, 101], "sorted_idx": [65, 98], "class_to_show": 65, "hidden": [65, 98], "max_class_to_show": 65, "prediction_threshold": 65, "overlai": [65, 97], "figsiz": [65, 85, 86, 87, 93, 96, 98], "save_path": [65, 97], "blue": [65, 91, 93, 97], "overlaid": 65, "side": [65, 91, 97], "figur": [65, 93, 96, 98, 100], "extens": [65, 93, 95], "png": [65, 97], "pdf": [65, 66], "svg": 65, "matplotlib": [65, 85, 86, 87, 93, 96, 97, 98, 100], "num_proc": [65, 87], "intersect": [65, 92], "tp": 65, "fp": 65, "ground": [65, 91, 93, 95, 100], "truth": [65, 93, 95, 100], "bias": 65, "avg_metr": 65, "distionari": 65, "95": [65, 75, 77, 89, 91, 93, 100], "per_class_metr": 65, "Of": 66, "li": 66, "smaller": [66, 96, 97], "find_top_issu": [66, 67, 98], "reli": [66, 83, 84, 85, 86, 90, 97, 98, 100], "dist_metr": 66, "subtract": [66, 67], "renorm": [66, 67, 92], "least_confid": 66, "sum_": 66, "log": [66, 67, 80], "softmax": [66, 73, 77, 87], "literatur": 66, "gen": 66, "liu": 66, "lochman": 66, "zach": 66, "openaccess": 66, "thecvf": 66, "cvpr2023": 66, "liu_gen_pushing_the_limits_of_softmax": 66, "based_out": 66, "distribution_detection_cvpr_2023_pap": 66, "fit_scor": [66, 98], "ood_predictions_scor": 66, "pretrain": [66, 83, 84, 90, 98], "adjust_confident_threshold": 66, "probabilist": [66, 82, 84, 85, 86, 89, 90, 98, 99], "order_label_issu": [67, 80], "whichev": [67, 99], "argsort": [67, 83, 87, 90, 93, 97, 98, 100], "max_": 67, "get_label_quality_ensemble_scor": [67, 92, 93], "weight_ensemble_members_bi": 67, "custom_weight": 67, "log_loss_search_t_valu": 67, "0001": [67, 91], "scheme": 67, "log_loss_search": 67, "log_loss": [67, 90], "1e0": 67, "1e1": 67, "1e2": 67, "2e2": 67, "quality_scor": [67, 98], "forth": 67, "top_issue_indic": 67, "rank_bi": [67, 80], "weird": [67, 78], "minu": 67, "prob_label": 67, "max_prob_not_label": 67, "idea": [67, 97], "AND": [67, 90], "get_epistemic_uncertainti": [68, 69], "get_aleatoric_uncertainti": [68, 69], "corrupt": [69, 100], "linearregress": [69, 92, 100], "y_with_nois": 69, "n_boot": [69, 92], "include_aleatoric_uncertainti": [69, 92], "sole": [69, 82, 85, 95, 98], "bootstrap": [69, 92, 100], "resampl": [69, 84, 92], "epistem": [69, 92, 98, 100], "aleator": [69, 92, 100], "model_final_kwarg": 69, "coars": 69, "thorough": [69, 92], "fine": [69, 83, 84, 90, 98], "grain": 69, "grid": 69, "varianc": [69, 93], "epistemic_uncertainti": 69, "residu": [69, 70, 92], "deviat": [69, 97, 100], "aleatoric_uncertainti": 69, "outr": 70, "contin": 70, "raw": [70, 79, 80, 86, 87, 91, 92, 95, 97, 98, 100], "aka": [70, 84, 93, 97, 100, 102], "00323821": 70, "33692597": 70, "00191686": 70, "semant": [71, 73, 74, 94], "pixel": [71, 73, 74, 98, 101], "h": [71, 73, 74, 101], "height": [71, 73, 74, 101], "w": [71, 73, 74, 101], "width": [71, 73, 74, 101], "labels_one_hot": [71, 74, 101], "stream": [71, 98, 102], "downsampl": [71, 73, 101], "shrink": [71, 73], "divis": [71, 73, 85], "common_label_issu": [72, 74, 76, 78, 101, 102], "filter_by_class": [72, 74, 101], "segmant": [73, 74], "num_pixel_issu": [73, 101], "product": [73, 87, 92], "pixel_scor": [73, 101], "highlight": [74, 78, 85, 86, 89, 101], "enter": 74, "legend": [74, 85, 86, 96, 97, 100, 101], "colormap": 74, "background": 74, "person": [74, 92, 97, 101, 102], "ambigu": [74, 78, 83, 84, 90, 91, 93, 102], "systemat": [74, 78, 95], "misunderstood": [74, 78], "issues_df": [74, 87], "class_index": 74, "issues_subset": [74, 78], "filter_by_token": [76, 78, 102], "token_score_method": 77, "sentence_score_method": 77, "sentence_score_kwarg": 77, "compris": [77, 78], "token_scor": [77, 102], "converg": 77, "toward": 77, "_softmin_sentence_scor": 77, "sentence_scor": [77, 102], "token_info": 77, "70": [77, 89], "02": [77, 85, 86, 93, 97], "03": [77, 89, 91, 93, 97, 102], "04": [77, 89, 97, 102], "08": [77, 93, 97, 100, 102], "commonli": [78, 80, 85, 86, 96, 102], "But": [78, 90, 93, 100, 102], "restrict": [78, 92], "reliabl": [79, 82, 84, 92, 95, 101], "thousand": 79, "imagenet": [79, 91], "popular": [79, 95, 97], "centric": [79, 87, 89, 90, 94], "capabl": 79, "minut": [79, 82, 83, 84, 89, 90, 91, 95, 96, 97, 100, 101, 102], "conda": 79, "feature_embed": [79, 98], "Then": [79, 82, 83, 87, 92], "your_dataset": [79, 84, 85, 86, 87, 89, 90, 92], "column_name_of_label": [79, 84, 85, 86, 87, 89, 90], "plagu": [79, 86], "untrain": 79, "\u30c4": 79, "label_issues_info": [79, 86], "sklearn_compatible_model": 79, "framework": [79, 96, 97], "complianc": 79, "tag": [79, 96, 102], "sequenc": 79, "recognit": [79, 84, 92, 102], "train_data": [79, 82, 83, 98, 100], "gotten": 79, "test_data": [79, 82, 83, 93, 96, 98, 100], "deal": [79, 86], "tutori": [79, 82, 83, 84, 85, 86, 87, 89, 90, 92, 93, 95, 96, 97, 98, 100, 101, 102], "feel": [79, 84, 86, 92], "ask": [79, 92], "slack": [79, 92], "project": [79, 100], "welcom": 79, "commun": [79, 92], "guidelin": [79, 97], "piec": 79, "smart": [79, 87, 89, 90, 92], "edit": [79, 92], "easier": [79, 93], "unreli": [79, 82, 84, 89, 90], "link": [79, 84, 91, 97], "older": 80, "outlin": 80, "substitut": 80, "v2": [80, 82, 89], "get_noise_indic": 80, "psx": 80, "sorted_index_method": 80, "order_label_error": 80, "label_errors_bool": 80, "latent_estim": 80, "num_label_error": 80, "learningwithnoisylabel": 80, "neatli": 80, "organ": [80, 82, 89, 91, 102], "reorgan": 80, "baseline_method": 80, "incorpor": [80, 93], "research": [80, 93], "polyplex": 80, "terminologi": 80, "label_error": 80, "quickstart": [82, 83, 84, 85, 86, 87, 89, 90, 91, 95, 96, 97, 98, 100, 101, 102], "sql": [82, 89], "databas": [82, 89], "excel": [82, 89], "parquet": [82, 89], "student": [82, 89, 100, 102], "grade": [82, 89, 100], "900": [82, 89, 100], "exam": [82, 89, 100], "letter": [82, 89, 102], "hundr": [82, 89], "mistak": [82, 83, 87, 89, 90], "No": [82, 83, 90, 92], "extratreesclassifi": 82, "extratre": 82, "ranked_label_issu": [82, 83], "branch": [82, 83, 84, 85, 86, 87, 89, 90, 91, 93, 95, 96, 97, 98, 100], "preprocess": [82, 83, 86, 89, 98, 100], "standardscal": [82, 89, 98], "labelencod": [82, 83], "train_test_split": [82, 83, 85, 86, 98], "accuracy_scor": [82, 83, 84, 90, 93], "grades_data": [82, 89], "read_csv": [82, 83, 89, 90, 100], "demo": [82, 86, 89, 96], "head": [82, 83, 84, 86, 87, 89, 90, 91, 93, 95, 100], "stud_id": [82, 89], "exam_1": [82, 89, 100], "exam_2": [82, 89, 100], "exam_3": [82, 89, 100], "letter_grad": [82, 89], "f48f73": [82, 89], "53": [82, 85, 86, 89, 91, 96, 97], "00": [82, 85, 86, 87, 89, 91, 98], "77": [82, 85, 86, 89, 97], "0bd4e7": [82, 89], "81": [82, 89, 90, 97, 100, 102], "great": [82, 89, 91], "particip": [82, 89], "cb9d7a": [82, 89], "61": [82, 89, 93, 97, 100], "94": [82, 89, 91, 93, 97, 100], "78": [82, 89, 91, 93, 97, 100], "9acca4": [82, 89], "48": [82, 89, 91, 93, 97], "x_raw": [82, 89], "labels_raw": 82, "interg": [82, 83], "categorical_featur": [82, 100], "x_encod": [82, 89], "get_dummi": [82, 89, 100], "drop_first": [82, 89], "numeric_featur": [82, 89], "scaler": [82, 89, 98], "x_process": [82, 89], "fit_transform": [82, 89], "bring": [82, 83, 87, 89, 90, 95, 100], "byod": [82, 83, 87, 89, 90, 95, 100], "decis": [82, 85, 86], "tress": 82, "held": [82, 84, 89, 90, 91, 97, 98, 99], "straightforward": [82, 84, 89], "benefit": [82, 84, 99, 101], "num_crossval_fold": [82, 84, 89, 95], "tabl": [82, 89, 91, 95], "212": [82, 93], "review": [82, 83, 86, 89, 90, 91, 92, 93, 97, 100, 101, 102], "iloc": [82, 83, 84, 89, 90, 100], "58": [82, 86, 89, 91, 93, 97, 102], "92": [82, 85, 93, 97], "93": [82, 91, 97, 100, 102], "827": 82, "99": [82, 91, 93], "86": [82, 86, 87, 89, 93, 97, 100, 102], "74": [82, 97, 100], "637": [82, 89], "79": [82, 91, 97], "65": [82, 85, 97], "cheat": 82, "0pt": 82, "120": [82, 85, 86], "97": [82, 91, 92, 93, 97, 100, 102], "233": 82, "68": [82, 91, 93, 97], "83": [82, 93, 97, 100, 102], "76": [82, 93, 96, 97, 100], "suspici": [82, 89], "carefulli": [82, 87, 89, 90], "examin": [82, 85, 86, 89, 97], "labels_train": 82, "labels_test": 82, "test_siz": [82, 83, 85, 86], "acc_og": [82, 83], "783068783068783": 82, "robustli": [82, 83, 100], "14": [82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 95, 96, 97, 98, 100, 101, 102], "acc_cl": [82, 83], "8095238095238095": 82, "especi": [82, 83, 87, 92, 100], "blindli": [82, 83, 84, 92, 100], "trust": [82, 83, 84, 92, 93, 95, 99, 100], "effort": [82, 83, 100], "intent": [83, 90], "servic": [83, 90, 92], "onlin": [83, 90], "bank": [83, 90, 91], "banking77": [83, 90], "oo": [83, 90], "000": [83, 87, 90, 91, 102], "categori": [83, 87, 90], "shortlist": [83, 90, 100], "scope": [83, 90], "logist": [83, 85, 86, 90, 95, 98], "probabilit": [83, 84], "drop": [83, 92, 95, 100], "earlier": [83, 102], "sentence_transform": [83, 90], "sentencetransform": [83, 90], "payment": [83, 90], "cancel_transf": [83, 90], "transfer": [83, 90], "fund": [83, 90], "cancel": [83, 90], "transact": [83, 90], "my": [83, 90], "revert": [83, 90], "morn": [83, 90], "realis": [83, 90], "yesterdai": [83, 90], "rent": [83, 90], "realli": [83, 90, 95, 101], "tomorrow": [83, 90], "raw_text": [83, 90], "raw_label": 83, "raw_train_text": 83, "raw_test_text": 83, "raw_train_label": 83, "raw_test_label": 83, "39": [83, 84, 85, 87, 90, 91, 92, 97, 100, 101, 102], "change_pin": [83, 90], "supported_cards_and_curr": [83, 90], "getting_spare_card": [83, 90], "visa_or_mastercard": [83, 90], "card_about_to_expir": [83, 90], "apple_pay_or_google_pai": [83, 90], "beneficiary_not_allow": [83, 90], "lost_or_stolen_phon": [83, 90], "card_payment_fee_charg": [83, 90], "card": [83, 90, 91], "utter": [83, 90], "encond": 83, "test_label": [83, 93, 96, 98], "suit": [83, 90, 91, 92], "electra": [83, 90], "discrimin": [83, 90], "googl": [83, 90], "train_text": 83, "test_text": 83, "home": [83, 85, 86, 90, 91], "runner": [83, 85, 86, 90], "google_electra": [83, 90], "pool": [83, 90, 92, 98], "opt": [83, 84, 86, 87, 89, 90, 93], "hostedtoolcach": [83, 84, 86, 87, 89, 90, 93], "x64": [83, 84, 86, 87, 89, 90, 93], "lib": [83, 84, 86, 87, 89, 90, 93], "python3": [83, 84, 86, 87, 89, 90, 93], "site": [83, 84, 86, 87, 89, 90, 93], "_util": [83, 90], "831": [83, 90], "userwarn": [83, 84, 85, 86, 90], "typedstorag": [83, 90], "untypedstorag": [83, 90], "untyped_storag": [83, 90], "fget": [83, 90], "__get__": [83, 90], "owner": [83, 90], "leverag": [83, 84, 90, 92, 93, 95], "computation": [83, 84, 90], "intens": [83, 84, 90], "400": [83, 90], "858371": 83, "547274": 83, "826228": 83, "966008": 83, "792449": 83, "identified_issu": [83, 100], "lowest_quality_label": [83, 84, 90, 93, 100], "to_numpi": [83, 90, 92, 100], "44": [83, 91, 96, 97], "646": 83, "390": 83, "628": 83, "121": [83, 93], "702": 83, "863": [83, 84], "135": 83, "337": [83, 97], "735": [83, 87], "print_as_df": 83, "inverse_transform": 83, "charg": [83, 90], "cash": [83, 90], "holidai": [83, 90], "sent": [83, 90, 102], "mine": [83, 90], "expir": [83, 90], "fight": 83, "hors": [83, 91, 98], "duck": [83, 91], "me": [83, 90], "whoever": [83, 90], "consum": [83, 100], "18": [83, 84, 90, 91, 92, 93, 97, 98, 100, 101, 102], "baseline_model": [83, 100], "87": [83, 86, 87, 97, 100], "acceler": [83, 100], "19": [83, 84, 87, 90, 91, 92, 93, 97, 98, 100, 101], "89": [83, 85, 89, 97, 100], "spoken": 84, "500": [84, 98, 102], "english": [84, 91], "pronunci": 84, "wav": 84, "huggingfac": [84, 85, 86, 87, 92], "voxceleb": 84, "speech": [84, 102], "your_pred_prob": [84, 85, 86, 89, 90], "tensorflow_io": 84, "huggingface_hub": 84, "reproduc": [84, 89, 93, 95], "command": 84, "wget": [84, 97, 101, 102], "navig": 84, "browser": 84, "jakobovski": 84, "archiv": [84, 102], "v1": 84, "tar": [84, 98], "gz": [84, 98], "mkdir": [84, 102], "spoken_digit": 84, "xf": 84, "6_nicolas_32": 84, "data_path": 84, "listdir": 84, "nondeterminist": 84, "file_nam": 84, "endswith": 84, "file_path": 84, "join": [84, 87, 92], "7_george_26": 84, "0_nicolas_24": 84, "0_nicolas_6": 84, "listen": 84, "display_exampl": 84, "expand": [84, 85, 86, 87, 91, 93, 95, 96, 98, 100, 102], "pulldown": [84, 85, 86, 87, 91, 93, 95, 96, 98, 100, 102], "colab": [84, 85, 86, 87, 91, 92, 93, 95, 96, 98, 100, 102], "tfio": 84, "pathlib": 84, "ipython": 84, "load_wav_16k_mono": 84, "filenam": 84, "khz": 84, "file_cont": 84, "read_fil": 84, "sample_r": 84, "decode_wav": 84, "desired_channel": 84, "squeez": 84, "rate_in": 84, "rate_out": 84, "16000": 84, "wav_file_nam": 84, "audio_r": 84, "wav_file_exampl": 84, "plai": [84, 91, 92], "button": 84, "wav_file_name_exampl": 84, "7_jackson_43": 84, "hear": 84, "extractor": 84, "encoderclassifi": 84, "spkrec": 84, "xvect": 84, "feature_extractor": 84, "from_hparam": 84, "run_opt": 84, "uncom": 84, "ffmpeg": 84, "backend": 84, "wav_audio_file_path": 84, "torchaudio": 84, "extract_audio_embed": 84, "emb": [84, 87], "signal": 84, "encode_batch": 84, "embeddings_list": [84, 87], "embeddings_arrai": 84, "650": 84, "stft": 84, "return_complex": 84, "view_as_r": 84, "recov": 84, "trigger": 84, "aten": 84, "src": 84, "nativ": 84, "spectralop": 84, "cpp": 84, "_vf": 84, "n_fft": 84, "hop_length": 84, "win_length": 84, "attr": 84, "512": [84, 87], "196311": 84, "319459": 84, "478975": 84, "2890875": 84, "8170238": 84, "89265": 84, "24": [84, 91, 93, 95, 97, 100], "898056": 84, "256195": 84, "559641": 84, "559721": 84, "62067": 84, "285245": 84, "21": [84, 85, 91, 92, 93, 97, 100, 102], "709627": 84, "5033693": 84, "913803": 84, "819831": 84, "1831515": 84, "208763": 84, "084257": 84, "3210397": 84, "005453": 84, "216152": 84, "478235": 84, "6821785": 84, "053807": 84, "242471": 84, "091424": 84, "78334856": 84, "03954": 84, "23": [84, 87, 91, 93, 97, 100], "569176": 84, "761097": 84, "1258295": 84, "753237": 84, "3508866": 84, "598274": 84, "23712": 84, "2500": 84, "tol": 84, "decreas": [84, 92], "cv_accuraci": 84, "9708": 84, "9976": 84, "986": 84, "002161": 84, "176": [84, 91, 93, 96], "002483": 84, "2318": 84, "004411": 84, "1005": 84, "004857": 84, "1871": 84, "007494": 84, "investig": 84, "040587": 84, "999207": 84, "999377": 84, "975220": 84, "999367": 84, "identified_label_issu": [84, 90], "sort_valu": [84, 86, 87, 89, 90, 92, 93, 95, 96, 100], "516": 84, "1946": 84, "469": 84, "2132": 84, "worth": [84, 93], "6_yweweler_25": 84, "7_nicolas_43": 84, "6_theo_27": 84, "6_yweweler_36": 84, "6_yweweler_14": 84, "6_yweweler_35": 84, "6_nicolas_8": 84, "sound": 84, "quit": [84, 98], "22": [84, 85, 87, 91, 92, 93, 96, 97, 102], "underneath": 85, "hood": [85, 92], "alert": 85, "introduct": 85, "mayb": [85, 86, 90], "your_feature_matrix": [85, 86], "toi": [85, 86, 87, 91, 93, 95], "inf": [85, 86], "mid": [85, 86], "bins_map": [85, 86], "create_data": [85, 86], "y_bin": [85, 86], "y_i": [85, 86], "y_bin_idx": [85, 86], "y_train": [85, 86, 93, 100], "y_test": [85, 86, 93, 100], "y_train_idx": [85, 86], "y_test_idx": [85, 86], "slide": [85, 86, 91], "frame": [85, 86], "x_out": [85, 86], "tini": [85, 86], "concaten": [85, 86, 92, 99], "y_out": [85, 86], "y_out_bin": [85, 86], "y_out_bin_idx": [85, 86], "exact_duplicate_idx": [85, 86], "x_duplic": [85, 86], "y_duplic": [85, 86], "y_duplicate_idx": [85, 86], "noisy_labels_idx": [85, 86, 96], "scatter": [85, 86, 93, 96, 100], "black": [85, 86, 91, 100], "cyan": [85, 86], "pyplot": [85, 86, 87, 93, 96, 98, 100], "plt": [85, 86, 87, 93, 96, 98, 100], "plot_data": [85, 86, 93, 96, 100], "fig": [85, 86, 87, 91, 98, 100], "ax": [85, 86, 87, 98, 100], "subplot": [85, 86, 87, 98], "set_titl": [85, 86, 87, 98], "set_xlabel": [85, 86], "x_1": [85, 86], "fontsiz": [85, 86, 87, 93, 96], "set_ylabel": [85, 86], "x_2": [85, 86], "set_xlim": [85, 86], "set_ylim": [85, 86], "linestyl": [85, 86], "circl": [85, 86, 93, 96], "misclassifi": [85, 86], "zip": [85, 86, 87, 97, 102], "label_err": [85, 86], "180": [85, 86, 97], "marker": [85, 86], "facecolor": [85, 86], "edgecolor": [85, 86], "linewidth": [85, 86, 98], "dup": [85, 86], "first_legend": [85, 86], "align": [85, 86], "title_fontproperti": [85, 86], "semibold": [85, 86], "second_legend": [85, 86], "45": [85, 86, 91, 93, 97], "gca": [85, 86], "add_artist": [85, 86], "tight_layout": [85, 86], "ideal": [85, 86], "remaind": 85, "modal": [85, 86, 92, 95], "132": [85, 86, 93, 97], "9318": 85, "006940": 85, "007830": 85, "40": [85, 86, 90, 91], "014828": 85, "107": [85, 86, 93, 96], "021241": 85, "026407": 85, "notic": [85, 93, 95, 97], "3558": [85, 86], "126": [85, 86, 93, 97], "006636": [85, 86], "130": [85, 86], "012571": [85, 86], "129": [85, 86], "127": [85, 86], "014909": [85, 86], "128": [85, 86, 87], "017443": [85, 86], "6160": [85, 86], "is_near_duplicate_issu": [85, 86, 87, 89, 90, 92, 93], "131": [85, 86, 101], "000000e": [85, 86], "000002": [85, 86], "463180e": [85, 86], "07": [85, 86, 87, 89, 93, 97, 100], "51": [85, 86, 89, 91, 93, 97], "161148": [85, 86], "859087e": [85, 86], "30": [85, 86, 87, 91, 92, 96, 101, 102], "3453": 85, "029542": 85, "031182": 85, "057961": 85, "058244": 85, "348": 85, "378": 85, "357": 85, "34": [85, 91, 93, 95, 97, 102], "54": [85, 91, 93, 97], "039122": 85, "044598": 85, "105": [85, 97], "105196": 85, "133654": 85, "43": [85, 91, 93, 97], "168033": 85, "125": 85, "101107": 85, "37": [85, 91], "183382": 85, "109": [85, 91, 97], "209259": 85, "211042": 85, "221316": 85, "average_ood_scor": 85, "34530442089193386": 85, "52": [85, 91, 97, 102], "169820": 85, "087324e": 85, "259024": 85, "583757e": 85, "91": [85, 97], "346458": 85, "341292e": 85, "specfi": 85, "new_lab": 85, "scoring_funct": 85, "div": 85, "rem": 85, "inv_scal": 85, "49": [85, 91, 93, 97], "superstitionissuemanag": 85, "unlucki": 85, "superstit": 85, "to_seri": 85, "issues_mask": 85, "summary_scor": 85, "9242": 85, "is_superstition_issu": 85, "superstition_scor": 85, "26": [85, 87, 91, 93, 95, 97], "047581": 85, "090635": 85, "129591": 85, "164840": 85, "lurk": [86, 87, 93], "_split": 86, "737": 86, "thoroughli": 86, "904": 86, "_base": [86, 87, 89, 90, 93], "246": [86, 87, 89, 90, 93, 97], "efficiencywarn": [86, 87, 89, 90, 93], "sort_graph_by_row_valu": [86, 87, 89, 90, 93], "warn_when_not_sort": [86, 87, 89, 90, 93], "8561": 86, "001908": 86, "003564": 86, "007331": 86, "008963": 86, "009664": 86, "0227": 86, "is_class_imbalance_issu": 86, "022727": 86, "conceptu": 86, "856061": 86, "355772": 86, "616034": 86, "821750": 86, "901562": 86, "betweeen": 86, "is_null_issu": 86, "is_non_iid_issu": [86, 89, 90, 93], "is_underperforming_group_issu": 86, "859131": 86, "417707": 86, "664083": 86, "970324": 86, "816953": 86, "375317": 86, "641516": 86, "890575": 86, "531021": 86, "460593": 86, "601188": 86, "826147": 86, "752808": 86, "321635": 86, "562539": 86, "948362": 86, "090243": 86, "472909": 86, "746763": 86, "878267": 86, "examples_w_issu": [86, 92], "013445": 86, "025184": 86, "026376": 86, "inde": [86, 90], "miscellan": [86, 102], "428571": 86, "111111": 86, "571429": 86, "407407": 86, "592593": 86, "337838": 86, "092593": 86, "662162": 86, "333333": [86, 91], "952381": 86, "666667": 86, "portion": 86, "huge": [86, 93], "worri": [86, 90], "critic": 86, "60": [87, 93, 100], "torchvis": [87, 98], "tensordataset": 87, "stratifiedkfold": [87, 96], "tqdm": 87, "autonotebook": 87, "fashion_mnist": 87, "9m": 87, "lt": [87, 89, 90, 91, 95, 98], "134mb": 87, "18m": 87, "7mb": 87, "num_row": 87, "60000": 87, "transformed_dataset": 87, "with_format": 87, "255": [87, 91], "unsqueez": 87, "cpu_count": 87, "torch_dataset": 87, "quick": [87, 96], "super": [87, 89, 90], "relu": 87, "batchnorm2d": 87, "maxpool2d": 87, "lazylinear": 87, "flatten": 87, "get_test_accuraci": 87, "testload": [87, 98], "energi": 87, "trainload": [87, 98], "n_epoch": 87, "patienc": 87, "criterion": 87, "crossentropyloss": 87, "adamw": 87, "best_test_accuraci": 87, "start_epoch": 87, "running_loss": 87, "best_epoch": 87, "end_epoch": 87, "3f": [87, 100], "acc": [87, 93], "time_taken": 87, "compute_embed": 87, "compute_pred_prob": 87, "train_batch_s": 87, "num_work": 87, "worker": [87, 102], "train_id_list": 87, "test_id_list": 87, "train_id": 87, "test_id": 87, "embeddings_model": 87, "ntrain": 87, "trainset": 87, "testset": 87, "pin_memori": 87, "fold_embed": 87, "fold_pred_prob": 87, "finish": 87, "482": 87, "720": 87, "785": 87, "329": [87, 97], "88": [87, 91, 92, 93, 96, 97, 100], "195": [87, 102], "497": 87, "493": 87, "060": 87, "330": [87, 97], "505": 87, "694": 87, "476": 87, "340": 87, "888": [87, 96], "328": [87, 97], "310": 87, "546": [87, 90], "reorder": 87, "hstack": [87, 92, 93, 95], "vision": 87, "grayscal": 87, "max_preval": 87, "7714": 87, "3772": 87, "3585": 87, "166": 87, "3651": 87, "27080": 87, "873833e": 87, "40378": 87, "915575e": 87, "25316": 87, "390277e": 87, "06": [87, 93, 97, 102], "2090": 87, "751164e": 87, "14999": 87, "881301e": 87, "9569": 87, "11262": 87, "000003": 87, "coat": [87, 91], "shirt": [87, 91], "19228": 87, "000010": 87, "dress": 87, "32657": 87, "000013": 87, "bag": [87, 91, 98, 99], "21282": 87, "000016": 87, "53564": 87, "000018": 87, "pullov": 87, "6321": 87, "30968": 87, "001267": 87, "30659": 87, "000022": [87, 102], "47824": 87, "001454": 87, "3370": 87, "000026": 87, "54565": 87, "001854": 87, "9762": 87, "258": 87, "47139": 87, "000033": 87, "166980": 87, "986195": 87, "997205": 87, "sandal": [87, 91], "948781": 87, "999358": 87, "54078": 87, "17371": 87, "000025": 87, "plot_label_issue_exampl": 87, "ncol": [87, 98], "nrow": [87, 98], "ceil": 87, "axes_list": 87, "label_issue_indic": 87, "gl": 87, "sl": 87, "fontdict": 87, "imshow": [87, 98], "cmap": [87, 100], "grai": 87, "subplots_adjust": 87, "hspace": 87, "outsiz": 87, "outlier_issu": [87, 90], "outlier_issues_df": 87, "depict": [87, 96, 97, 98, 99, 101], "plot_outlier_issues_exampl": 87, "n_comparison_imag": 87, "sample_from_class": 87, "number_of_sampl": 87, "non_outlier_indic": 87, "isnul": 87, "non_outlier_indices_excluding_curr": 87, "sampled_indic": 87, "label_scores_of_sampl": 87, "top_score_indic": 87, "top_label_indic": 87, "sampled_imag": 87, "get_image_given_label_and_sampl": 87, "image_from_dataset": 87, "corresponding_label": 87, "comparison_imag": 87, "images_to_plot": 87, "idlist": 87, "iterrow": 87, "near_duplicate_issu": [87, 92], "closest": 87, "counterpart": 87, "near_duplicate_issues_df": 87, "plot_near_duplicate_issue_exampl": 87, "seen_id_pair": 87, "get_image_and_given_label_and_predicted_label": 87, "duplicate_imag": 87, "nd_set": 87, "challeng": 87, "dark_issu": 87, "reveal": [87, 97, 101], "dark_scor": 87, "dark_issues_df": 87, "is_dark_issu": 87, "34848": 87, "203922": 87, "50270": 87, "204588": 87, "3936": 87, "213098": 87, "733": 87, "217686": 87, "8094": 87, "230118": 87, "plot_image_issue_exampl": 87, "28": [87, 90, 91, 93, 95, 102], "difficult": 87, "disproportion": 87, "lowinfo_issu": 87, "low_information_scor": 87, "lowinfo_issues_df": 87, "is_low_information_issu": 87, "53050": 87, "067975": 87, "40875": 87, "089929": 87, "9594": 87, "092601": 87, "34825": 87, "107744": 87, "37530": 87, "108516": 87, "lot": 87, "histgradientboostingclassifi": 89, "cat_featur": 89, "boost": [89, 92, 95, 100], "xgboost": [89, 92, 100], "think": [89, 90, 92, 96, 101, 102], "nonzero": 89, "358": 89, "294": [89, 97], "46": [89, 91, 93, 97], "941": 89, "7109": 89, "000005": [89, 90], "886": 89, "000059": 89, "709": 89, "000104": 89, "723": 89, "000169": 89, "689": 89, "000181": 89, "3590": 89, "051882e": 89, "683133e": 89, "536582e": 89, "406589e": 89, "324246e": 89, "6165": 89, "582": 89, "185": [89, 91, 97, 102], "187": [89, 91], "27": [89, 91, 93, 97, 102], "898": 89, "0014": [89, 91], "595": 89, "702427": 89, "147": [89, 93, 97], "711186": 89, "157": [89, 93], "721394": 89, "771": 89, "731979": 89, "740335": 89, "0014153602099278074": 89, "issue_result": 89, "000842": 89, "555944": 89, "004374": 89, "sorted_issu": 89, "73": [89, 91, 96, 97, 100], "deserv": 89, "outlier_result": 89, "sorted_outli": 89, "56": [89, 91, 100], "96": [89, 91, 93, 96, 97, 100], "style": [89, 101], "font": 89, "18px": 89, "ff00ff": 89, "bac": 89, "unintend": [89, 90], "duplicate_result": 89, "690": 89, "perhap": [89, 93, 95], "twice": 89, "67": [89, 91, 97, 100], "wari": [89, 90, 92], "dive": 90, "your_featur": 90, "text_embed": 90, "data_dict": [90, 93, 95], "85": [90, 97], "38": [90, 91, 97], "9710": 90, "981": 90, "974": 90, "000146": 90, "982": [90, 91], "000224": 90, "971": 90, "000507": 90, "980": [90, 91], "000960": 90, "3584": 90, "994": 90, "009642": 90, "999": 90, "013067": 90, "013841": 90, "433": 90, "014722": 90, "989": 90, "018224": 90, "6070": 90, "160": [90, 100], "095724": 90, "148": 90, "006237": 90, "099341": 90, "514": 90, "006485": 90, "481": 90, "123418": 90, "008165": 90, "0000": [90, 91, 93], "313": [90, 97], "564102": 90, "572258": 90, "574915": 90, "31": [90, 91, 93, 95, 97], "575507": 90, "575874": 90, "792090": 90, "257611": 90, "698710": 90, "182121": 90, "771619": 90, "data_with_suggested_label": 90, "suggested_label": 90, "withdraw": 90, "monei": 90, "lowest_quality_outli": 90, "OR": 90, "636c65616e6c616220697320617765736f6d6521": 90, "phone": [90, 91], "gone": 90, "gt": [90, 95, 102], "samp": 90, "br": 90, "press": [90, 102], "nonsens": 90, "sens": 90, "detriment": 90, "duplicate_issu": 90, "fee": 90, "pai": 90, "go": [90, 91, 93], "strongli": 90, "p_valu": 90, "benign": 90, "curat": [90, 94], "mnist_test_set": 91, "imagenet_val_set": 91, "tench": 91, "goldfish": 91, "white": [91, 102], "shark": 91, "tiger": 91, "hammerhead": 91, "electr": 91, "rai": 91, "stingrai": 91, "cock": 91, "hen": 91, "ostrich": 91, "brambl": 91, "goldfinch": 91, "hous": 91, "finch": 91, "junco": 91, "indigo": 91, "bunt": 91, "american": [91, 102], "robin": 91, "bulbul": 91, "jai": 91, "magpi": 91, "chickade": 91, "dipper": 91, "kite": 91, "bald": 91, "eagl": 91, "vultur": 91, "grei": 91, "owl": 91, "salamand": 91, "smooth": 91, "newt": 91, "spot": [91, 92, 97], "axolotl": 91, "bullfrog": 91, "tree": 91, "frog": [91, 98], "tail": 91, "loggerhead": 91, "sea": 91, "turtl": 91, "leatherback": 91, "mud": 91, "terrapin": 91, "band": 91, "gecko": 91, "green": [91, 102], "iguana": 91, "carolina": 91, "anol": 91, "desert": 91, "grassland": 91, "whiptail": 91, "lizard": 91, "agama": 91, "frill": 91, "neck": 91, "allig": 91, "gila": 91, "monster": 91, "european": 91, "chameleon": 91, "komodo": 91, "dragon": 91, "nile": 91, "crocodil": 91, "triceratop": 91, "worm": 91, "snake": 91, "ring": 91, "eastern": 91, "hog": 91, "nose": 91, "kingsnak": 91, "garter": 91, "water": 91, "vine": 91, "night": 91, "boa": 91, "constrictor": 91, "african": 91, "rock": 91, "indian": 91, "cobra": 91, "mamba": 91, "saharan": 91, "horn": 91, "viper": 91, "diamondback": 91, "rattlesnak": 91, "sidewind": 91, "trilobit": 91, "harvestman": 91, "scorpion": 91, "yellow": 91, "garden": 91, "spider": 91, "barn": 91, "southern": 91, "widow": 91, "tarantula": 91, "wolf": 91, "tick": 91, "centiped": 91, "grous": 91, "ptarmigan": 91, "ruf": 91, "prairi": 91, "peacock": 91, "quail": 91, "partridg": 91, "parrot": 91, "macaw": 91, "sulphur": 91, "crest": 91, "cockatoo": 91, "lorikeet": 91, "coucal": 91, "bee": 91, "eater": 91, "hornbil": 91, "hummingbird": 91, "jacamar": 91, "toucan": 91, "breast": 91, "mergans": 91, "goos": 91, "swan": 91, "tusker": 91, "echidna": 91, "platypu": 91, "wallabi": 91, "koala": 91, "wombat": 91, "jellyfish": 91, "anemon": 91, "brain": 91, "coral": 91, "flatworm": 91, "nematod": 91, "conch": 91, "snail": 91, "slug": 91, "chiton": 91, "chamber": 91, "nautilu": 91, "dung": 91, "crab": 91, "fiddler": 91, "king": 91, "lobster": 91, "spini": 91, "crayfish": 91, "hermit": 91, "isopod": 91, "stork": 91, "spoonbil": 91, "flamingo": 91, "heron": 91, "egret": 91, "bittern": 91, "crane": 91, "bird": [91, 98], "limpkin": 91, "gallinul": 91, "coot": 91, "bustard": 91, "ruddi": 91, "turnston": 91, "dunlin": 91, "redshank": 91, "dowitch": 91, "oystercatch": 91, "pelican": 91, "penguin": 91, "albatross": 91, "whale": 91, "killer": 91, "dugong": 91, "lion": 91, "chihuahua": 91, "japanes": 91, "chin": 91, "maltes": 91, "pekinges": 91, "shih": 91, "tzu": 91, "charl": 91, "spaniel": 91, "papillon": 91, "terrier": 91, "rhodesian": 91, "ridgeback": 91, "afghan": [91, 102], "hound": 91, "basset": 91, "beagl": 91, "bloodhound": 91, "bluetick": 91, "coonhound": 91, "tan": 91, "walker": 91, "foxhound": 91, "redbon": 91, "borzoi": 91, "irish": 91, "wolfhound": 91, "italian": 91, "greyhound": 91, "whippet": 91, "ibizan": 91, "norwegian": 91, "elkhound": 91, "otterhound": 91, "saluki": 91, "scottish": 91, "deerhound": 91, "weimaran": 91, "staffordshir": 91, "bull": 91, "bedlington": 91, "border": 91, "kerri": 91, "norfolk": 91, "norwich": 91, "yorkshir": 91, "wire": 91, "fox": 91, "lakeland": 91, "sealyham": 91, "airedal": 91, "cairn": 91, "australian": 91, "dandi": 91, "dinmont": 91, "boston": 91, "miniatur": 91, "schnauzer": 91, "giant": 91, "tibetan": 91, "silki": 91, "wheaten": 91, "west": 91, "highland": 91, "lhasa": 91, "apso": 91, "flat": 91, "retriev": 91, "curli": 91, "golden": 91, "labrador": 91, "chesapeak": 91, "bai": 91, "german": [91, 102], "shorthair": 91, "pointer": 91, "vizsla": 91, "setter": 91, "gordon": 91, "brittani": 91, "clumber": 91, "springer": 91, "welsh": 91, "cocker": 91, "sussex": 91, "kuvasz": 91, "schipperk": 91, "groenendael": 91, "malinoi": 91, "briard": 91, "kelpi": 91, "komondor": 91, "sheepdog": 91, "shetland": 91, "colli": 91, "bouvier": 91, "de": 91, "flandr": 91, "rottweil": 91, "shepherd": 91, "dobermann": 91, "pinscher": 91, "swiss": [91, 102], "mountain": 91, "bernes": 91, "appenzel": 91, "sennenhund": 91, "entlebuch": 91, "boxer": 91, "bullmastiff": 91, "mastiff": 91, "french": 91, "bulldog": 91, "dane": 91, "st": 91, "bernard": 91, "huski": 91, "alaskan": 91, "malamut": 91, "siberian": 91, "dalmatian": 91, "affenpinsch": 91, "basenji": 91, "pug": 91, "leonberg": 91, "newfoundland": 91, "pyrenean": 91, "samoi": 91, "pomeranian": 91, "chow": 91, "keeshond": 91, "griffon": 91, "bruxelloi": 91, "pembrok": 91, "corgi": 91, "cardigan": 91, "poodl": 91, "mexican": 91, "hairless": 91, "tundra": 91, "coyot": 91, "dingo": 91, "dhole": 91, "wild": 91, "hyena": 91, "kit": 91, "arctic": 91, "tabbi": 91, "persian": 91, "siames": 91, "egyptian": 91, "mau": 91, "cougar": 91, "lynx": 91, "leopard": 91, "snow": 91, "jaguar": 91, "cheetah": 91, "brown": [91, 101], "bear": 91, "polar": 91, "sloth": 91, "mongoos": 91, "meerkat": 91, "beetl": 91, "ladybug": 91, "longhorn": 91, "leaf": 91, "rhinocero": 91, "weevil": 91, "fly": 91, "ant": 91, "grasshopp": 91, "cricket": 91, "stick": 91, "insect": 91, "cockroach": 91, "manti": 91, "cicada": 91, "leafhopp": 91, "lacew": 91, "dragonfli": 91, "damselfli": 91, "admir": 91, "ringlet": 91, "monarch": 91, "butterfli": 91, "gossam": 91, "wing": 91, "starfish": 91, "urchin": 91, "cucumb": 91, "cottontail": 91, "rabbit": 91, "hare": 91, "angora": 91, "hamster": 91, "porcupin": 91, "squirrel": 91, "marmot": 91, "beaver": 91, "guinea": 91, "pig": 91, "sorrel": 91, "zebra": 91, "boar": 91, "warthog": 91, "hippopotamu": 91, "ox": 91, "buffalo": 91, "bison": 91, "bighorn": 91, "sheep": 91, "alpin": 91, "ibex": 91, "hartebeest": 91, "impala": 91, "gazel": 91, "dromedari": 91, "llama": 91, "weasel": 91, "mink": 91, "polecat": 91, "foot": 91, "ferret": 91, "otter": 91, "skunk": 91, "badger": 91, "armadillo": 91, "toed": 91, "orangutan": 91, "gorilla": 91, "chimpanze": 91, "gibbon": 91, "siamang": 91, "guenon": 91, "pata": 91, "monkei": 91, "baboon": 91, "macaqu": 91, "langur": 91, "colobu": 91, "probosci": 91, "marmoset": 91, "capuchin": 91, "howler": 91, "titi": 91, "geoffroi": 91, "lemur": 91, "indri": 91, "asian": 91, "eleph": 91, "bush": 91, "snoek": 91, "eel": 91, "coho": 91, "salmon": 91, "beauti": 91, "clownfish": 91, "sturgeon": 91, "garfish": 91, "lionfish": 91, "pufferfish": 91, "abacu": 91, "abaya": 91, "academ": 91, "gown": 91, "accordion": 91, "acoust": 91, "guitar": 91, "aircraft": 91, "carrier": 91, "airlin": 91, "airship": 91, "altar": 91, "ambul": 91, "amphibi": 91, "clock": [91, 102], "apiari": 91, "apron": 91, "wast": 91, "assault": 91, "rifl": 91, "backpack": 91, "bakeri": 91, "balanc": 91, "beam": 91, "balloon": 91, "ballpoint": 91, "pen": 91, "aid": 91, "banjo": 91, "balust": 91, "barbel": 91, "barber": 91, "chair": [91, 97], "barbershop": 91, "baromet": 91, "barrel": 91, "wheelbarrow": 91, "basebal": 91, "basketbal": 91, "bassinet": 91, "bassoon": 91, "swim": 91, "cap": 91, "bath": 91, "towel": 91, "bathtub": 91, "station": 91, "wagon": 91, "lighthous": 91, "beaker": 91, "militari": 91, "beer": 91, "bottl": 91, "glass": 91, "bell": 91, "cot": 91, "bib": 91, "bicycl": [91, 101], "bikini": 91, "binder": 91, "binocular": 91, "birdhous": 91, "boathous": 91, "bobsleigh": 91, "bolo": 91, "tie": 91, "poke": 91, "bonnet": 91, "bookcas": 91, "bookstor": 91, "bow": 91, "brass": 91, "bra": 91, "breakwat": 91, "breastplat": 91, "broom": 91, "bucket": 91, "buckl": 91, "bulletproof": 91, "vest": 91, "butcher": 91, "shop": 91, "taxicab": 91, "cauldron": 91, "candl": 91, "cannon": 91, "cano": 91, "mirror": [91, 97], "carousel": 91, "tool": [91, 93, 95], "carton": 91, "wheel": 91, "teller": 91, "cassett": 91, "player": 91, "castl": 91, "catamaran": 91, "cd": 91, "cello": 91, "mobil": [91, 102], "chain": 91, "fenc": [91, 101], "mail": 91, "chainsaw": 91, "chest": 91, "chiffoni": 91, "chime": 91, "china": 91, "cabinet": 91, "christma": 91, "stock": 91, "church": 91, "movi": 91, "theater": 91, "cleaver": 91, "cliff": 91, "dwell": 91, "cloak": 91, "clog": 91, "cocktail": 91, "shaker": 91, "coffe": 91, "mug": 91, "coffeemak": 91, "coil": 91, "lock": 91, "keyboard": 91, "confectioneri": 91, "ship": [91, 98], "corkscrew": 91, "cornet": 91, "cowboi": 91, "boot": 91, "hat": 91, "cradl": 91, "crash": 91, "helmet": 91, "crate": 91, "infant": 91, "bed": 91, "crock": 91, "pot": 91, "croquet": 91, "crutch": 91, "cuirass": 91, "dam": 91, "desk": 91, "desktop": 91, "rotari": 91, "dial": 91, "telephon": 91, "diaper": 91, "watch": 91, "dine": 91, "dishcloth": 91, "dishwash": 91, "disc": 91, "brake": 91, "dock": 91, "sled": 91, "dome": 91, "doormat": 91, "drill": 91, "rig": 91, "drum": 91, "drumstick": 91, "dumbbel": 91, "dutch": 91, "oven": 91, "fan": 91, "locomot": 91, "entertain": 91, "center": 91, "envelop": 91, "espresso": 91, "powder": 91, "feather": 91, "fireboat": 91, "engin": [91, 101], "screen": 91, "sheet": 91, "flagpol": 91, "flute": 91, "footbal": 91, "forklift": 91, "fountain": 91, "poster": 91, "freight": 91, "fry": 91, "pan": 91, "fur": 91, "garbag": 91, "ga": 91, "pump": 91, "goblet": 91, "kart": 91, "golf": 91, "cart": 91, "gondola": 91, "gong": 91, "grand": 91, "piano": 91, "greenhous": 91, "grill": 91, "groceri": 91, "guillotin": 91, "barrett": 91, "hair": 91, "sprai": 91, "hammer": 91, "dryer": 91, "hand": [91, 93], "handkerchief": 91, "drive": 91, "harmonica": 91, "harp": 91, "harvest": 91, "hatchet": 91, "holster": 91, "honeycomb": 91, "hoop": 91, "skirt": 91, "horizont": 91, "bar": 91, "drawn": 91, "hourglass": 91, "ipod": 91, "cloth": 91, "iron": 91, "jack": 91, "lantern": 91, "jean": 91, "jeep": 91, "jigsaw": 91, "puzzl": 91, "pull": 91, "rickshaw": 91, "joystick": 91, "kimono": 91, "knee": 91, "pad": 91, "knot": 91, "ladl": 91, "lampshad": 91, "laptop": 91, "lawn": 91, "mower": 91, "knife": 91, "lifeboat": 91, "lighter": 91, "limousin": 91, "ocean": 91, "liner": 91, "lipstick": 91, "slip": 91, "shoe": 91, "lotion": 91, "speaker": 91, "loup": 91, "sawmil": 91, "magnet": 91, "compass": 91, "mailbox": 91, "tight": 91, "tank": 91, "manhol": 91, "maraca": 91, "marimba": 91, "maypol": 91, "maze": 91, "cup": [91, 97], "medicin": 91, "megalith": 91, "microphon": 91, "microwav": 91, "milk": 91, "minibu": 91, "miniskirt": 91, "minivan": 91, "missil": 91, "mitten": [91, 92], "mix": 91, "bowl": 91, "modem": 91, "monasteri": 91, "monitor": 91, "mope": 91, "mortar": 91, "mosqu": 91, "mosquito": 91, "scooter": 91, "bike": 91, "tent": 91, "mous": [91, 92], "mousetrap": 91, "van": 91, "muzzl": 91, "nail": 91, "brace": 91, "necklac": 91, "nippl": 91, "obelisk": 91, "obo": 91, "ocarina": 91, "odomet": 91, "oil": 91, "oscilloscop": 91, "overskirt": 91, "bullock": 91, "oxygen": 91, "packet": 91, "paddl": 91, "padlock": 91, "paintbrush": 91, "pajama": 91, "palac": [91, 102], "parachut": 91, "park": 91, "bench": 91, "meter": 91, "passeng": 91, "patio": 91, "payphon": 91, "pedest": 91, "pencil": 91, "perfum": 91, "petri": 91, "dish": 91, "photocopi": 91, "plectrum": 91, "pickelhaub": 91, "picket": 91, "pickup": 91, "pier": 91, "piggi": 91, "pill": 91, "pillow": 91, "ping": 91, "pong": 91, "pinwheel": 91, "pirat": 91, "pitcher": 91, "plane": 91, "planetarium": 91, "plastic": 91, "plate": 91, "rack": 91, "plow": 91, "plunger": 91, "polaroid": 91, "camera": 91, "pole": [91, 101], "polic": 91, "poncho": 91, "billiard": 91, "soda": 91, "potter": 91, "prayer": 91, "rug": 91, "printer": 91, "prison": 91, "projectil": 91, "projector": 91, "hockei": 91, "puck": 91, "punch": 91, "purs": 91, "quill": 91, "quilt": 91, "race": 91, "racket": 91, "radiat": 91, "radio": 91, "telescop": 91, "rain": 91, "recreat": 91, "reel": 91, "reflex": 91, "refriger": 91, "remot": 91, "restaur": 91, "revolv": 91, "rotisseri": 91, "eras": 91, "rugbi": 91, "ruler": 91, "safe": 91, "safeti": 91, "salt": 91, "sarong": 91, "saxophon": 91, "scabbard": 91, "school": 91, "bu": [91, 101], "schooner": 91, "scoreboard": 91, "crt": 91, "screw": 91, "screwdriv": 91, "seat": 91, "belt": 91, "sew": 91, "shield": 91, "shoji": 91, "basket": 91, "shovel": 91, "shower": 91, "curtain": 91, "ski": 91, "sleep": 91, "door": 91, "slot": 91, "snorkel": 91, "snowmobil": 91, "snowplow": 91, "soap": 91, "dispens": 91, "soccer": [91, 102], "sock": [91, 92], "solar": 91, "thermal": 91, "collector": 91, "sombrero": 91, "soup": 91, "heater": 91, "shuttl": 91, "spatula": 91, "motorboat": 91, "web": 91, "spindl": 91, "sport": [91, 102], "spotlight": 91, "stage": 91, "steam": 91, "arch": 91, "bridg": 91, "steel": 91, "stethoscop": 91, "scarf": 91, "stone": 91, "wall": [91, 101], "stopwatch": 91, "stove": 91, "strainer": 91, "tram": 91, "stretcher": 91, "couch": 91, "stupa": 91, "submarin": 91, "sundial": 91, "sunglass": 91, "sunscreen": 91, "suspens": 91, "mop": 91, "sweatshirt": 91, "swimsuit": 91, "swing": 91, "switch": 91, "syring": 91, "lamp": 91, "tape": 91, "teapot": 91, "teddi": 91, "televis": [91, 102], "tenni": 91, "thatch": 91, "roof": 91, "front": 91, "thimbl": 91, "thresh": 91, "throne": 91, "tile": 91, "toaster": 91, "tobacco": 91, "toilet": 91, "totem": 91, "tow": 91, "tractor": 91, "semi": 91, "trailer": 91, "trai": 91, "trench": 91, "tricycl": 91, "trimaran": 91, "tripod": 91, "triumphal": 91, "trolleybu": 91, "trombon": 91, "tub": 91, "turnstil": 91, "typewrit": 91, "umbrella": 91, "unicycl": 91, "upright": 91, "vacuum": 91, "cleaner": 91, "vase": 91, "vault": 91, "velvet": 91, "vend": 91, "vestment": 91, "viaduct": 91, "violin": 91, "volleybal": 91, "waffl": 91, "wallet": 91, "wardrob": 91, "sink": 91, "wash": 91, "jug": 91, "tower": 91, "whiskei": 91, "whistl": 91, "wig": 91, "shade": [91, 101], "windsor": 91, "wine": 91, "wok": 91, "wooden": 91, "spoon": 91, "wool": 91, "rail": 91, "shipwreck": 91, "yawl": 91, "yurt": 91, "websit": 91, "comic": 91, "book": 91, "crossword": 91, "traffic": [91, 97, 101], "sign": [91, 101, 102], "dust": 91, "jacket": [91, 97], "menu": 91, "guacamol": 91, "consomm": 91, "trifl": 91, "ic": 91, "cream": 91, "pop": 91, "baguett": 91, "bagel": 91, "pretzel": 91, "cheeseburg": 91, "mash": 91, "potato": 91, "cabbag": 91, "broccoli": 91, "cauliflow": 91, "zucchini": 91, "spaghetti": 91, "squash": 91, "acorn": 91, "butternut": 91, "artichok": 91, "pepper": [91, 92], "cardoon": 91, "mushroom": 91, "granni": 91, "smith": 91, "strawberri": 91, "orang": 91, "lemon": 91, "pineappl": 91, "banana": 91, "jackfruit": 91, "custard": 91, "appl": 91, "pomegran": 91, "hai": 91, "carbonara": 91, "chocol": 91, "syrup": 91, "dough": 91, "meatloaf": 91, "pizza": 91, "pie": 91, "burrito": 91, "eggnog": 91, "alp": 91, "bubbl": 91, "reef": 91, "geyser": 91, "lakeshor": 91, "promontori": 91, "shoal": 91, "seashor": 91, "vallei": 91, "volcano": 91, "bridegroom": 91, "scuba": 91, "diver": 91, "rapese": 91, "daisi": 91, "ladi": 91, "slipper": 91, "corn": 91, "rose": 91, "hip": 91, "chestnut": 91, "fungu": 91, "agar": 91, "gyromitra": 91, "stinkhorn": 91, "earth": 91, "star": 91, "wood": 91, "bolet": 91, "ear": 91, "cifar10_test_set": 91, "airplan": [91, 98], "automobil": [91, 98], "deer": [91, 98], "cifar100_test_set": 91, "aquarium_fish": 91, "babi": 91, "boi": 91, "camel": 91, "caterpillar": 91, "cattl": [91, 102], "cloud": 91, "dinosaur": 91, "dolphin": 91, "flatfish": 91, "forest": 91, "girl": 91, "kangaroo": 91, "lawn_mow": 91, "man": 91, "maple_tre": 91, "motorcycl": [91, 101], "oak_tre": 91, "orchid": 91, "palm_tre": 91, "pear": 91, "pickup_truck": 91, "pine_tre": 91, "plain": 91, "poppi": 91, "possum": 91, "raccoon": 91, "road": [91, 101], "rocket": 91, "seal": 91, "shrew": 91, "skyscrap": 91, "streetcar": 91, "sunflow": 91, "sweet_pepp": 91, "trout": 91, "tulip": 91, "willow_tre": 91, "woman": [91, 97], "caltech256": 91, "ak47": 91, "bat": 91, "glove": 91, "birdbath": 91, "blimp": 91, "bonsai": 91, "boom": 91, "breadmak": 91, "buddha": 91, "bulldoz": 91, "cactu": 91, "cake": 91, "tire": 91, "cartman": 91, "cereal": 91, "chandeli": 91, "chess": 91, "board": 91, "chimp": 91, "chopstick": 91, "coffin": 91, "coin": 91, "comet": 91, "cormor": 91, "globe": 91, "diamond": 91, "dice": 91, "doorknob": 91, "drink": 91, "straw": 91, "dumb": 91, "eiffel": 91, "elk": 91, "ewer": 91, "eyeglass": 91, "fern": 91, "fighter": 91, "jet": [91, 100], "extinguish": 91, "hydrant": 91, "firework": 91, "flashlight": 91, "floppi": 91, "fri": 91, "frisbe": 91, "galaxi": 91, "giraff": 91, "goat": 91, "gate": 91, "grape": 91, "pick": [91, 92], "hamburg": 91, "hammock": 91, "harpsichord": 91, "hawksbil": 91, "helicopt": 91, "hibiscu": 91, "homer": 91, "simpson": 91, "horsesho": 91, "air": 91, "skeleton": 91, "ibi": 91, "cone": 91, "iri": 91, "jesu": 91, "christ": 91, "joi": 91, "kayak": 91, "ketch": 91, "ladder": 91, "lath": 91, "licens": 91, "lightbulb": 91, "lightn": 91, "mandolin": 91, "mar": 91, "mattress": 91, "megaphon": 91, "menorah": 91, "microscop": 91, "minaret": 91, "minotaur": 91, "motorbik": 91, "mussel": 91, "neckti": 91, "octopu": 91, "palm": 91, "pilot": 91, "paperclip": 91, "shredder": 91, "pci": 91, "peopl": [91, 97], "pez": 91, "picnic": 91, "pram": 91, "prai": 91, "pyramid": 91, "rainbow": 91, "roulett": 91, "saddl": 91, "saturn": 91, "segwai": 91, "propel": 91, "sextant": 91, "music": 91, "skateboard": 91, "smokestack": 91, "sneaker": 91, "boat": 91, "stain": 91, "steer": 91, "stirrup": 91, "superman": 91, "sushi": 91, "armi": [91, 102], "sword": 91, "tambourin": 91, "teepe": 91, "court": 91, "theodolit": 91, "tomato": 91, "tombston": 91, "tour": 91, "pisa": 91, "treadmil": 91, "fork": 91, "tweezer": 91, "unicorn": 91, "vcr": 91, "waterfal": 91, "watermelon": 91, "weld": 91, "windmil": 91, "xylophon": 91, "yarmulk": 91, "yo": 91, "toad": 91, "twenty_news_test_set": 91, "alt": 91, "atheism": 91, "comp": 91, "graphic": [91, 101], "misc": [91, 102], "sy": 91, "ibm": 91, "pc": 91, "hardwar": 91, "mac": 91, "forsal": 91, "rec": 91, "sci": 91, "crypt": 91, "electron": 91, "med": 91, "soc": 91, "religion": 91, "christian": [91, 102], "talk": [91, 102], "polit": 91, "gun": 91, "mideast": 91, "amazon": 91, "neutral": 91, "imdb_test_set": 91, "all_class": 91, "20news_test_set": 91, "_load_classes_predprobs_label": 91, "dataset_nam": 91, "labelerror": 91, "url_bas": 91, "5392f6c71473055060be3044becdde1cbc18284d": 91, "url_label": 91, "original_test_label": 91, "_original_label": 91, "url_prob": 91, "cross_validated_predicted_prob": 91, "_pyx": 91, "num_part": 91, "datatset": 91, "bytesio": 91, "allow_pickl": 91, "pred_probs_part": 91, "url": 91, "_of_": 91, "nload": 91, "imdb": 91, "ve": [91, 92, 93, 95, 97], "interpret": [91, 92, 93, 96, 100], "capit": 91, "29780": 91, "256": [91, 92, 97], "780": 91, "medic": [91, 102], "doctor": 91, "254": [91, 97], "359223": 91, "640777": 91, "184": [91, 93], "258427": 91, "341176": 91, "263158": 91, "658824": 91, "337349": 91, "246575": 91, "662651": 91, "248": 91, "330000": 91, "355769": 91, "670000": 91, "251": [91, 97], "167": [91, 93, 97], "252": 91, "112": [91, 102], "253": [91, 97], "022989": 91, "049505": 91, "190": [91, 93, 97], "66": 91, "002216": 91, "000974": 91, "59": [91, 97], "000873": 91, "000739": 91, "32635": 91, "32636": 91, "47": [91, 97], "32637": 91, "32638": 91, "32639": 91, "32640": 91, "051": 91, "002242": 91, "997758": 91, "002088": 91, "001045": 91, "997912": 91, "002053": 91, "997947": 91, "001980": 91, "000991": 91, "998020": 91, "001946": 91, "002915": 91, "998054": 91, "001938": 91, "002904": 91, "998062": 91, "001020": 91, "998980": 91, "001018": 91, "002035": 91, "998982": 91, "999009": 91, "0003": 91, "0002": 91, "36": [91, 102], "41": [91, 97, 100], "71": [91, 93, 97, 100], "071": 91, "067269": 91, "929": 91, "046": 91, "058243": 91, "954": 91, "035": 91, "032096": 91, "965": 91, "031": 91, "012232": 91, "969": 91, "022": 91, "025896": 91, "978": 91, "020": [91, 93], "013092": 91, "018": 91, "013065": 91, "016": 91, "030542": 91, "984": 91, "013": 91, "020833": 91, "987": 91, "012": 91, "010020": 91, "988": 91, "0073": 91, "0020": 91, "0016": 91, "0015": 91, "0013": 91, "0012": 91, "0010": 91, "0008": 91, "0007": 91, "0006": 91, "0005": 91, "0004": 91, "244": [91, 97], "98": [91, 92, 100], "452381": 91, "459770": 91, "72": [91, 93, 96, 100], "523364": 91, "460784": 91, "446602": 91, "57": [91, 93], "103774": 91, "030612": 91, "110092": 91, "049020": 91, "0034": 91, "0032": 91, "0026": 91, "0025": 91, "4945": 91, "4946": 91, "4947": 91, "4948": 91, "4949": 91, "4950": 91, "846": 91, "82": [91, 93, 97, 100], "7532": 91, "532": 91, "034483": 91, "009646": 91, "965517": 91, "030457": 91, "020513": 91, "969543": 91, "028061": 91, "035443": 91, "971939": 91, "025316": 91, "005168": 91, "974684": 91, "049751": 91, "979487": 91, "019920": 91, "042802": 91, "980080": 91, "017677": 91, "005115": 91, "982323": 91, "012987": 91, "005236": 91, "987013": 91, "012723": 91, "025126": 91, "987277": 91, "010989": 91, "008264": 91, "989011": 91, "010283": 91, "027778": 91, "989717": 91, "009677": 91, "990323": 91, "007614": 91, "010127": 91, "992386": 91, "005051": 91, "994949": 91, "005025": 91, "994975": 91, "005013": 91, "994987": 91, "001859": 91, "001328": 91, "000929": 91, "000664": 91, "186": [91, 93], "188": [91, 93, 96], "189": [91, 93], "snippet": 92, "nlp": [92, 102], "mind": [92, 93], "alphanumer": 92, "facilit": 92, "seamless": 92, "classlabel": 92, "guidanc": 92, "labels_str": 92, "datalab_str": 92, "labels_int": 92, "remap": 92, "datalab_int": 92, "my_dict": 92, "pet_nam": 92, "rover": 92, "rocki": 92, "speci": 92, "from_dict": 92, "datalab_dataset": 92, "number_of_class": 92, "total_number_of_data_point": 92, "feed": 92, "alphabet": 92, "labels_proper_format": 92, "your_classifi": 92, "issues_datafram": 92, "class_predicted_for_flagged_exampl": 92, "class_predicted_for_all_exampl": 92, "grant": 92, "On": [92, 93, 97], "merged_dataset": 92, "label_column_nam": 92, "datataset": 92, "fair": [92, 93], "game": 92, "speedup": [92, 98], "flexibl": 92, "tempfil": 92, "mkdtemp": 92, "sped": 92, "anywai": 92, "pred_probs_merg": 92, "merge_rare_class": 92, "count_threshold": 92, "class_mapping_orig2new": 92, "heath_summari": 92, "num_examples_per_class": 92, "rare_class": 92, "num_classes_merg": 92, "other_class": 92, "labels_merg": 92, "new_c": 92, "merged_prob": 92, "new_class": 92, "original_class": 92, "num_check": 92, "ones_array_ref": 92, "isclos": 92, "though": [92, 93, 102], "successfulli": 92, "meaning": [92, 98], "virtuou": [92, 95], "cycl": [92, 95], "jointli": 92, "junk": 92, "clutter": 92, "unknown": 92, "caltech": 92, "combined_boolean_mask": 92, "mask1": 92, "mask2": 92, "gradientboostingclassifi": [92, 93], "true_error": [92, 93, 96], "101": [92, 97], "102": [92, 96, 97], "104": [92, 93, 97], "model_to_find_error": 92, "model_to_return": 92, "cl0": 92, "randomizedsearchcv": 92, "expens": 92, "param_distribut": 92, "learning_r": [92, 93], "max_depth": [92, 93], "magnitud": 92, "coeffici": [92, 100], "optin": 92, "environ": [92, 93], "rerun": [92, 93], "cell": [92, 93], "unabl": [92, 93], "render": [92, 93], "nbviewer": [92, 93], "nbsp": [92, 93], "cleanlearninginot": [92, 93], "fittedcleanlearn": [92, 93], "linearregressionlinearregress": 92, "n_init": 92, "fit_predict": 92, "continuous_column": 92, "categorical_column": 92, "data_df": 92, "feature_a": 92, "feature_b": 92, "unexpectedli": 92, "emphas": 92, "crucial": 92, "merge_duplicate_set": 92, "merge_kei": 92, "construct_group_kei": 92, "merged_set": 92, "consolidate_set": 92, "tolist": [92, 96], "issubset": 92, "frozenset": 92, "sets_list": 92, "mutabl": 92, "new_set": 92, "current_set": 92, "intersecting_set": 92, "lowest_score_strategi": 92, "sub_df": 92, "idxmin": 92, "filter_near_dupl": 92, "strategy_fn": 92, "strategy_kwarg": 92, "duplicate_row": 92, "group_kei": 92, "to_keep_indic": 92, "groupbi": 92, "explod": 92, "to_remov": 92, "isin": [92, 98], "kept": 92, "ids_to_remove_seri": 92, "tmp": 92, "ipykernel_7517": 92, "1995098996": 92, "deprecationwarn": 92, "dataframegroupbi": 92, "include_group": 92, "silenc": 92, "assist": 92, "streamlin": 92, "ux": 92, "agpl": 92, "compani": 92, "commerci": 92, "alter": 92, "email": 92, "team": 92, "discuss": 92, "anywher": 92, "profession": 92, "expert": 92, "depth": 93, "survei": [93, 102], "focus": [93, 95, 96, 100], "scienc": 93, "multivariate_norm": [93, 95, 96], "make_data": [93, 95], "cov": [93, 95, 96], "avg_trac": [93, 96], "py_tru": 93, "noise_matrix_tru": 93, "noise_marix": 93, "s_test": 93, "noisy_test_label": 93, "purpl": 93, "val": 93, "namespac": 93, "exec": 93, "markerfacecolor": [93, 96], "markeredgecolor": [93, 96, 100], "markers": [93, 96, 100], "markeredgewidth": [93, 96, 100], "realist": 93, "7560": 93, "637318e": 93, "896262e": 93, "548391e": 93, "923417e": 93, "375075e": 93, "3454": 93, "014051": 93, "020451": 93, "249": [93, 97], "042594": 93, "043859": 93, "045954": 93, "6120": 93, "023714": 93, "007136": 93, "119": [93, 97], "107266": 93, "103": [93, 97], "033738": 93, "238": [93, 97], "119505": 93, "236": [93, 97], "037843": 93, "222": 93, "614915": 93, "122": [93, 97], "624422": 93, "625965": 93, "626079": 93, "118": 93, "627675": 93, "695223": 93, "323529": 93, "523015": 93, "013720": 93, "675727": 93, "646521": 93, "anyth": 93, "enhanc": [93, 95, 97], "magic": 93, "liter": 93, "identif": 93, "x27": 93, "logisticregressionlogisticregress": 93, "ever": 93, "092": 93, "040": 93, "024": 93, "004": 93, "surpris": 93, "1705": 93, "01936": 93, "ton": 93, "yourfavoritemodel1": 93, "merged_label": 93, "merged_test_label": 93, "newli": [93, 95], "yourfavoritemodel2": 93, "yourfavoritemodel3": 93, "cl3": 93, "takeawai": 93, "That": [93, 96], "randomli": 93, "my_test_pred_prob": 93, "my_test_pr": 93, "issues_test": 93, "corrected_test_label": 93, "pretend": 93, "cl_test_pr": 93, "69": [93, 100], "fairli": 93, "label_acc": 93, "percentag": 93, "offset": 93, "nquestion": 93, "overestim": 93, "answer": 93, "experienc": 93, "knowledg": 93, "prioiri": 93, "known": 93, "versatil": 93, "label_issues_indic": 93, "213": [93, 97], "218": [93, 97], "152": 93, "197": [93, 97], "196": [93, 97], "170": 93, "214": 93, "164": [93, 96], "198": [93, 97], "191": [93, 97], "63": [93, 97, 100], "117": [93, 100], "62": [93, 97, 100], "206": [93, 97], "115": [93, 97], "193": 93, "194": 93, "201": [93, 97], "174": 93, "163": 93, "150": [93, 95, 97], "169": 93, "151": [93, 97], "168": [93, 102], "precision_scor": 93, "recall_scor": 93, "f1_score": 93, "true_label_issu": 93, "filter_by_list": 93, "718750": [93, 95], "807018": 93, "912": 93, "733333": 93, "800000": 93, "721311": 93, "792793": 93, "908": 93, "676923": 93, "765217": 93, "892": 93, "567901": 93, "702290": 93, "844": 93, "gaug": 93, "label_issues_count": 93, "155": [93, 97], "156": 93, "172": [93, 96], "easiest": 93, "modular": 93, "penalti": 93, "l2": 93, "model3": 93, "n_estim": 93, "cv_pred_probs_1": 93, "cv_pred_probs_2": 93, "cv_pred_probs_3": 93, "label_quality_scores_best": 93, "cv_pred_probs_ensembl": 93, "label_quality_scores_bett": 93, "superior": [93, 99], "workflow": [94, 100], "timm": 94, "glad": 95, "multiannotator_label": 95, "300": [95, 102], "noisier": 95, "111": [95, 100], "local_data": [95, 96], "true_labels_train": [95, 96], "noise_matrix_bett": 95, "noise_matrix_wors": 95, "transpos": [95, 98], "dropna": 95, "zfill": 95, "row_na_check": 95, "notna": 95, "reset_index": 95, "a0001": 95, "a0002": 95, "a0003": 95, "a0004": 95, "a0005": 95, "a0006": 95, "a0007": 95, "a0008": 95, "a0009": 95, "a0010": 95, "a0041": 95, "a0042": 95, "a0043": 95, "a0044": 95, "a0045": 95, "a0046": 95, "a0047": 95, "a0048": 95, "a0049": 95, "a0050": 95, "na": 95, "60856743": 95, "41693214": 95, "40908785": 95, "87147629": 95, "64941785": 95, "10774851": 95, "0524466": 95, "71853246": 95, "37169848": 95, "66031048": 95, "multiannotator_util": 95, "crude": 95, "straight": 95, "majority_vote_label": 95, "736118": 95, "757751": 95, "782232": 95, "715565": 95, "824256": 95, "quality_annotator_a0001": 95, "quality_annotator_a0002": 95, "quality_annotator_a0003": 95, "quality_annotator_a0004": 95, "quality_annotator_a0005": 95, "quality_annotator_a0006": 95, "quality_annotator_a0007": 95, "quality_annotator_a0008": 95, "quality_annotator_a0009": 95, "quality_annotator_a0010": 95, "quality_annotator_a0041": 95, "quality_annotator_a0042": 95, "quality_annotator_a0043": 95, "quality_annotator_a0044": 95, "quality_annotator_a0045": 95, "quality_annotator_a0046": 95, "quality_annotator_a0047": 95, "quality_annotator_a0048": 95, "quality_annotator_a0049": 95, "quality_annotator_a0050": 95, "070564": 95, "216078": 95, "119188": 95, "alongisd": 95, "244981": 95, "208333": 95, "295979": 95, "294118": 95, "324197": 95, "310345": 95, "355316": 95, "346154": 95, "439732": 95, "480000": 95, "a0031": 95, "523205": 95, "580645": 95, "a0034": 95, "535313": 95, "607143": 95, "a0021": 95, "606999": 95, "a0015": 95, "609526": 95, "678571": 95, "a0011": 95, "621103": 95, "692308": 95, "wors": 95, "improved_consensus_label": 95, "majority_vote_accuraci": 95, "cleanlab_label_accuraci": 95, "8581081081081081": 95, "9797297297297297": 95, "besid": 95, "sorted_consensus_quality_scor": 95, "worst_qual": 95, "better_qu": 95, "worst_quality_accuraci": 95, "better_quality_accuraci": 95, "9893238434163701": 95, "improved_pred_prob": 95, "treat": [95, 96, 100, 102], "analzi": 95, "copyright": 96, "advertis": 96, "violenc": 96, "nsfw": 96, "celeba": 96, "make_multilabel_data": 96, "boxes_coordin": 96, "box_multilabel": 96, "make_multi": 96, "bx1": 96, "by1": 96, "bx2": 96, "by2": 96, "label_list": 96, "ur": 96, "upper": 96, "inidx": 96, "logical_and": 96, "inv_d": 96, "labels_idx": 96, "true_labels_test": 96, "dict_unique_label": 96, "get_color_arrai": 96, "dcolor": 96, "aa4400": 96, "55227f": 96, "55a100": 96, "00ff00": 96, "007f7f": 96, "386b55": 96, "0000ff": 96, "simplic": 96, "y_onehot": 96, "single_class_label": 96, "stratifi": [96, 99], "kf": 96, "train_index": 96, "test_index": 96, "clf_cv": 96, "x_train_cv": 96, "x_test_cv": 96, "y_train_cv": 96, "y_test_cv": 96, "y_pred_cv": 96, "saw": 96, "num_to_displai": 96, "09": [96, 97, 100], "275": 96, "267": 96, "225": 96, "171": 96, "234": 96, "165": 96, "227": [96, 97], "262": [96, 97], "263": [96, 97], "266": [96, 97], "139": 96, "143": [96, 97, 102], "216": [96, 97, 102], "265": 96, "159": [96, 97], "despit": [96, 102], "suspect": 96, "8224": 96, "9632": 96, "968": 96, "6512": 96, "0444": 96, "774": 96, "labels_binary_format": 96, "labels_list_format": 96, "surround": 97, "scene": 97, "coco": 97, "everydai": 97, "has_label_issu": 97, "insal": 97, "nc": [97, 101, 102], "s3": [97, 101, 102], "amazonaw": [97, 101, 102], "objectdetectionbenchmark": 97, "tutorial_obj": 97, "pkl": 97, "example_imag": 97, "unzip": [97, 102], "_separate_label": 97, "_separate_predict": 97, "begin": 97, "image_path": 97, "rb": 97, "image_to_visu": 97, "seg_map": 97, "334": 97, "float32": 97, "bboxes_ignor": 97, "290": 97, "286": 97, "285": 97, "224": 97, "231": 97, "293": 97, "235": 97, "289": 97, "282": 97, "281": 97, "271": 97, "280": 97, "277": 97, "279": 97, "287": 97, "299": 97, "276": 97, "307": 97, "321": 97, "326": 97, "333": 97, "261": 97, "319": 97, "257": 97, "295": 97, "283": 97, "243": 97, "303": 97, "316": 97, "247": 97, "323": 97, "327": 97, "226": 97, "228": 97, "232": 97, "219": 97, "239": 97, "240": 97, "209": 97, "242": 97, "202": 97, "230": 97, "215": 97, "220": 97, "229": 97, "217": 97, "237": 97, "207": 97, "204": 97, "84": [97, 100], "205": 97, "223": 97, "153": 97, "149": 97, "140": 97, "124": 97, "268": 97, "273": 97, "108": 97, "284": 97, "110": 97, "136": 97, "145": 97, "173": 97, "297": 97, "317": 97, "192": 97, "332": 97, "324": 97, "203": 97, "320": 97, "314": 97, "199": 97, "291": 97, "000000481413": 97, "jpg": 97, "42398": 97, "44503": 97, "29968": 97, "336": 97, "21005": 97, "9978472": 97, "forgot": 97, "drew": 97, "label_issue_idx": 97, "num_examples_to_show": 97, "138": 97, "candid": 97, "97489622": 97, "70610878": 97, "98764951": 97, "88899237": 97, "99085805": 97, "issue_idx": 97, "95569726e": 97, "03354841e": 97, "57510169e": 97, "58447666e": 97, "39755858e": 97, "issue_to_visu": 97, "000000009483": 97, "95569726168054e": 97, "addition": [97, 101], "visibl": 97, "missmatch": 97, "likelei": 97, "agnost": 97, "vaidat": 97, "inconsist": 97, "000000395701": 97, "033548411774308e": 97, "armchair": 97, "tv": 97, "000000154004": 97, "38300759625496356": 97, "foreground": 97, "000000448410": 97, "0008575101690203273": 97, "crowd": 97, "alon": 97, "explor": [97, 98], "resembl": [97, 98], "000000499768": 97, "9748962231208227": 97, "000000521141": 97, "8889923658893665": 97, "000000143931": 97, "9876495074395956": 97, "bonu": 97, "uncov": 97, "irregular": 97, "anomali": 97, "object_detection_util": 97, "calculate_bounding_box_area": 97, "num_imgs_to_show": 97, "lab_object_count": 97, "pred_object_count": 97, "000000430073": 97, "000000183709": 97, "000000189475": 97, "studi": 97, "label_norm": 97, "pred_norm": 97, "area": [97, 101], "lab_area": 97, "pred_area": 97, "lab_area_mean": 97, "lab_area_std": 97, "max_deviation_valu": 97, "max_deviation_class": 97, "deviation_valu": 97, "deviation_class": 97, "mean_area": 97, "std_area": 97, "class_area": 97, "deviations_awai": 97, "max_deviation_index": 97, "num_imgs_to_show_per_class": 97, "class_num": 97, "sorted_indic": 97, "000000422886": 97, "000000341828": 97, "000000461009": 97, "train_feature_embed": 98, "ood_train_feature_scor": 98, "test_feature_embed": 98, "ood_test_feature_scor": 98, "ood_train_predictions_scor": 98, "train_pred_prob": 98, "ood_test_predictions_scor": 98, "test_pred_prob": 98, "pylab": 98, "rcparam": 98, "baggingclassifi": 98, "therebi": 98, "rescal": 98, "transform_norm": 98, "totensor": 98, "root": 98, "animal_class": 98, "non_animal_class": 98, "animal_idx": 98, "test_idx": 98, "toronto": 98, "edu": 98, "kriz": 98, "170498071": 98, "94199073": 98, "08it": 98, "5000": 98, "plot_imag": 98, "visualize_outli": 98, "txt_class": 98, "img": [98, 100], "npimg": 98, "show_label": 98, "data_subset": 98, "resnet50": 98, "corpu": 98, "2048": 98, "embed_imag": 98, "create_model": 98, "strang": 98, "odd": 98, "train_ood_features_scor": 98, "top_train_ood_features_idx": 98, "fun": 98, "negat": 98, "homogen": 98, "bottom_train_ood_features_idx": 98, "test_ood_features_scor": 98, "top_ood_features_idx": 98, "inevit": 98, "trade": 98, "5th": 98, "percentil": 98, "fifth_percentil": 98, "plt_rang": 98, "hist": 98, "train_outlier_scor": 98, "ylabel": 98, "axvlin": 98, "test_outlier_scor": 98, "ood_features_indic": 98, "revisit": 98, "return_invers": 98, "train_feature_embeddings_sc": 98, "test_feature_embeddings_sc": 98, "train_pred_label": 98, "9702": 98, "train_ood_predictions_scor": 98, "test_ood_predictions_scor": 98, "lost": 98, "unsuit": 99, "ok": [99, 102], "convention": 99, "aforement": 99, "hypothet": 99, "contrast": 99, "tradit": 99, "disjoint": 99, "out_of_sample_pred_probs_for_a": 99, "out_of_sample_pred_probs_for_b": 99, "out_of_sample_pred_probs_for_c": 99, "out_of_sample_pred_prob": 99, "price": 100, "incom": 100, "ag": 100, "sensor": 100, "histgradientboostingregressor": 100, "r2_score": 100, "student_grades_r": 100, "final_scor": 100, "true_final_scor": 100, "homework": 100, "3d": 100, "hue": 100, "mpl_toolkit": 100, "mplot3d": 100, "axes3d": 100, "errors_idx": 100, "add_subplot": 100, "z": 100, "colorbar": 100, "errors_mask": 100, "feature_column": 100, "predicted_column": 100, "x_train_raw": 100, "x_test_raw": 100, "randomforestregressor": 100, "385101": 100, "499503": 100, "698255": 100, "776647": 100, "109373": 100, "170547": 100, "481096": 100, "984759": 100, "645270": 100, "795928": 100, "141": 100, "659": 100, "367": 100, "318": 100, "305": 100, "560": 100, "657": 100, "688": 100, "view_datapoint": 100, "concat": 100, "preds_og": 100, "r2_og": 100, "838": 100, "found_label_issu": 100, "preds_cl": 100, "r2_cl": 100, "926": 100, "favorit": 100, "968627e": 100, "228799": 100, "646674e": 100, "402962": 100, "323818e": 100, "952758": 100, "422144e": 100, "456908": 100, "465815e": 100, "753968": 100, "791186e": 100, "110719": 100, "485156e": 100, "670640": 100, "225300e": 100, "749976": 100, "499679e": 100, "947007": 100, "067882e": 100, "648396": 100, "synthia": 101, "imagesegment": 101, "given_mask": 101, "predicted_mask": 101, "set_printopt": [101, 102], "sky": 101, "sidewalk": 101, "veget": 101, "terrain": 101, "rider": 101, "pred_probs_filepath": 101, "1088": 101, "1920": 101, "label_filepath": 101, "synthia_class": 101, "maunal": 101, "100000": 101, "244800": 101, "leftmost": 101, "middl": [101, 102], "infact": 101, "rightmost": 101, "discrep": 101, "3263230": 101, "783379": 101, "275110": 101, "255792": 101, "78225": 101, "55990": 101, "54427": 101, "33591": 101, "24645": 101, "21308": 101, "15045": 101, "14171": 101, "13832": 101, "13498": 101, "11490": 101, "9164": 101, "8769": 101, "6999": 101, "6031": 101, "5011": 101, "mistakenli": 101, "class_issu": 101, "aim": [101, 102], "domin": 101, "bunch": 102, "conll": 102, "2003": 102, "love": 102, "n_i": 102, "optional_list_of_ordered_class_nam": 102, "deepai": 102, "conll2003": 102, "rm": 102, "tokenclassif": 102, "2024": 102, "2400": 102, "52e0": 102, "1a00": 102, "894": 102, "connect": 102, "443": 102, "await": 102, "982975": 102, "960k": 102, "959": 102, "94k": 102, "86mb": 102, "mb": 102, "directori": 102, "inflat": 102, "17045998": 102, "16m": 102, "octet": 102, "26m": 102, "kb": 102, "bert": 102, "read_npz": 102, "filepath": 102, "corrsespond": 102, "iob2": 102, "given_ent": 102, "entity_map": 102, "readfil": 102, "sep": 102, "startswith": 102, "docstart": 102, "isalpha": 102, "isupp": 102, "indices_to_preview": 102, "nsentenc": 102, "eu": 102, "reject": 102, "boycott": 102, "british": 102, "lamb": 102, "00030412": 102, "00023826": 102, "99936208": 102, "00007009": 102, "00002545": 102, "99998795": 102, "00000401": 102, "00000218": 102, "00000455": 102, "00000131": 102, "00000749": 102, "99996115": 102, "00001371": 102, "0000087": 102, "00000895": 102, "99998936": 102, "00000382": 102, "00000178": 102, "00000366": 102, "00000137": 102, "99999101": 102, "00000266": 102, "00000174": 102, "0000035": 102, "00000109": 102, "99998768": 102, "00000482": 102, "00000202": 102, "00000438": 102, "0000011": 102, "00000465": 102, "99996392": 102, "00001105": 102, "0000116": 102, "00000878": 102, "99998671": 102, "00000364": 102, "00000213": 102, "00000472": 102, "00000281": 102, "99999073": 102, "00000211": 102, "00000159": 102, "00000442": 102, "00000115": 102, "peter": 102, "blackburn": 102, "00000358": 102, "00000529": 102, "99995623": 102, "0000129": 102, "0000024": 102, "00001812": 102, "99994141": 102, "00001645": 102, "00002162": 102, "brussel": 102, "1996": 102, "00001172": 102, "00000821": 102, "00004661": 102, "0000618": 102, "99987167": 102, "99999061": 102, "00000201": 102, "00000195": 102, "00000408": 102, "00000135": 102, "2254": 102, "2907": 102, "19392": 102, "9962": 102, "8904": 102, "19303": 102, "12918": 102, "9256": 102, "11855": 102, "18392": 102, "20426": 102, "19402": 102, "14744": 102, "19371": 102, "4645": 102, "10331": 102, "9430": 102, "6143": 102, "18367": 102, "12914": 102, "todai": 102, "weather": 102, "march": 102, "scalfaro": 102, "northern": 102, "himself": 102, "said": 102, "germani": 102, "nastja": 102, "rysich": 102, "north": 102, "spla": 102, "fought": 102, "khartoum": 102, "govern": 102, "south": 102, "1983": 102, "autonomi": 102, "animist": 102, "region": 102, "moslem": 102, "arabis": 102, "mayor": 102, "antonio": 102, "gonzalez": 102, "garcia": 102, "revolutionari": 102, "parti": 102, "wednesdai": 102, "troop": 102, "raid": 102, "farm": 102, "stole": 102, "rape": 102, "women": 102, "spring": 102, "chg": 102, "hrw": 102, "12pct": 102, "princ": 102, "photo": 102, "moment": 102, "spokeswoman": 102, "rainier": 102, "told": 102, "reuter": 102, "danila": 102, "carib": 102, "w224": 102, "equip": 102, "radiomet": 102, "earn": 102, "19996": 102, "london": 102, "denom": 102, "sale": 102, "uk": 102, "jp": 102, "fr": 102, "maccabi": 102, "hapoel": 102, "haifa": 102, "tel": 102, "aviv": 102, "hospit": 102, "rever": 102, "roman": 102, "cathol": 102, "nun": 102, "admit": 102, "calcutta": 102, "week": 102, "ago": 102, "fever": 102, "vomit": 102, "allianc": 102, "embattl": 102, "kabul": 102, "salang": 102, "highwai": 102, "mondai": 102, "tuesdai": 102, "suprem": 102, "council": 102, "led": 102, "jumbish": 102, "milli": 102, "movement": 102, "warlord": 102, "abdul": 102, "rashid": 102, "dostum": 102, "dollar": 102, "exchang": 102, "3570": 102, "12049": 102, "born": 102, "1937": 102, "provinc": 102, "anhui": 102, "dai": 102, "came": 102, "shanghai": 102, "citi": 102, "prolif": 102, "author": 102, "teacher": 102, "chines": 102, "16764": 102, "1990": 102, "historian": 102, "alan": 102, "john": 102, "percival": 102, "taylor": 102, "di": 102, "20446": 102, "pace": 102, "bowler": 102, "ian": 102, "harvei": 102, "claim": 102, "victoria": 102, "15514": 102, "cotti": 102, "osc": 102, "foreign": 102, "minist": 102, "7525": 102, "sultan": 102, "specter": 102, "met": 102, "crown": 102, "abdullah": 102, "defenc": 102, "aviat": 102, "jeddah": 102, "saudi": 102, "agenc": 102, "2288": 102, "hi": 102, "customari": 102, "outfit": 102, "champion": 102, "damp": 102, "scalp": 102, "canada": 102, "reign": 102, "olymp": 102, "donovan": 102, "bailei": 102, "1992": 102, "linford": 102, "christi": 102, "britain": 102, "1984": 102, "1988": 102, "carl": 102, "lewi": 102, "ambigi": 102, "punctuat": 102, "chicago": 102, "digest": 102, "philadelphia": 102, "usda": 102, "york": 102, "token_issu": 102, "471": 102, "kean": 102, "year": 102, "contract": 102, "manchest": 102, "19072": 102, "societi": 102, "bite": 102, "deliv": 102, "19910": 102, "father": 102, "clarenc": 102, "woolmer": 102, "renam": 102, "uttar": 102, "pradesh": 102, "india": 102, "ranji": 102, "trophi": 102, "nation": 102, "championship": 102, "captain": 102, "1949": 102, "15658": 102, "19879": 102, "iii": 102, "brian": 102, "shimer": 102, "randi": 102, "jone": 102, "19104": 102}, "objects": {"cleanlab": [[0, 0, 0, "-", "benchmarking"], [2, 0, 0, "-", "classification"], [3, 0, 0, "-", "count"], [4, 0, 0, "-", "data_valuation"], [11, 0, 0, "-", "datalab"], [36, 0, 0, "-", "dataset"], [39, 0, 0, "-", "experimental"], [43, 0, 0, "-", "filter"], [44, 0, 0, "-", "internal"], [55, 0, 0, "-", "models"], [57, 0, 0, "-", "multiannotator"], [60, 0, 0, "-", "multilabel_classification"], [63, 0, 0, "-", "object_detection"], [66, 0, 0, "-", "outlier"], [67, 0, 0, "-", "rank"], [68, 0, 0, "-", "regression"], [72, 0, 0, "-", "segmentation"], [76, 0, 0, "-", "token_classification"]], "cleanlab.benchmarking": [[1, 0, 0, "-", "noise_generation"]], "cleanlab.benchmarking.noise_generation": [[1, 1, 1, "", "generate_n_rand_probabilities_that_sum_to_m"], [1, 1, 1, "", "generate_noise_matrix_from_trace"], [1, 1, 1, "", "generate_noisy_labels"], [1, 1, 1, "", "noise_matrix_is_valid"], [1, 1, 1, "", "randomly_distribute_N_balls_into_K_bins"]], "cleanlab.classification": [[2, 2, 1, "", "CleanLearning"]], "cleanlab.classification.CleanLearning": [[2, 3, 1, "", "__init_subclass__"], [2, 3, 1, "", "find_label_issues"], [2, 3, 1, "", "fit"], [2, 3, 1, "", "get_label_issues"], [2, 3, 1, "", "get_metadata_routing"], [2, 3, 1, "", "get_params"], [2, 3, 1, "", "predict"], [2, 3, 1, "", "predict_proba"], [2, 3, 1, "", "save_space"], [2, 3, 1, "", "score"], [2, 3, 1, "", "set_fit_request"], [2, 3, 1, "", "set_params"], [2, 3, 1, "", "set_score_request"]], "cleanlab.count": [[3, 1, 1, "", "calibrate_confident_joint"], [3, 1, 1, "", "compute_confident_joint"], [3, 1, 1, "", "estimate_confident_joint_and_cv_pred_proba"], [3, 1, 1, "", "estimate_cv_predicted_probabilities"], [3, 1, 1, "", "estimate_joint"], [3, 1, 1, "", "estimate_latent"], [3, 1, 1, "", "estimate_noise_matrices"], [3, 1, 1, "", "estimate_py_and_noise_matrices_from_probabilities"], [3, 1, 1, "", "estimate_py_noise_matrices_and_cv_pred_proba"], [3, 1, 1, "", "get_confident_thresholds"], [3, 1, 1, "", "num_label_issues"]], "cleanlab.data_valuation": [[4, 1, 1, "", "data_shapley_knn"]], "cleanlab.datalab": [[5, 0, 0, "-", "datalab"], [15, 0, 0, "-", "internal"]], "cleanlab.datalab.datalab": [[5, 2, 1, "", "Datalab"]], "cleanlab.datalab.datalab.Datalab": [[5, 4, 1, "", "class_names"], [5, 3, 1, "", "find_issues"], [5, 3, 1, "", "get_info"], [5, 3, 1, "", "get_issue_summary"], [5, 3, 1, "", "get_issues"], [5, 4, 1, "", "has_labels"], [5, 4, 1, "", "info"], [5, 4, 1, "", "issue_summary"], [5, 4, 1, "", "issues"], [5, 4, 1, "", "labels"], [5, 3, 1, "", "list_default_issue_types"], [5, 3, 1, "", "list_possible_issue_types"], [5, 3, 1, "", "load"], [5, 3, 1, "", "report"], [5, 3, 1, "", "save"]], "cleanlab.datalab.internal": [[12, 0, 0, "-", "data"], [13, 0, 0, "-", "data_issues"], [16, 0, 0, "-", "issue_finder"], [14, 0, 0, "-", "issue_manager_factory"], [32, 0, 0, "-", "model_outputs"], [33, 0, 0, "-", "report"], [34, 0, 0, "-", "task"]], "cleanlab.datalab.internal.data": [[12, 2, 1, "", "Data"], [12, 5, 1, "", "DataFormatError"], [12, 5, 1, "", "DatasetDictError"], [12, 5, 1, "", "DatasetLoadError"], [12, 2, 1, "", "Label"], [12, 2, 1, "", "MultiClass"], [12, 2, 1, "", "MultiLabel"]], "cleanlab.datalab.internal.data.Data": [[12, 4, 1, "", "class_names"], [12, 4, 1, "", "has_labels"]], "cleanlab.datalab.internal.data.DataFormatError": [[12, 3, 1, "", "add_note"], [12, 6, 1, "", "args"], [12, 3, 1, "", "with_traceback"]], "cleanlab.datalab.internal.data.DatasetDictError": [[12, 3, 1, "", "add_note"], [12, 6, 1, "", "args"], [12, 3, 1, "", "with_traceback"]], "cleanlab.datalab.internal.data.DatasetLoadError": [[12, 3, 1, "", "add_note"], [12, 6, 1, "", "args"], [12, 3, 1, "", "with_traceback"]], "cleanlab.datalab.internal.data.Label": [[12, 4, 1, "", "class_names"], [12, 4, 1, "", "is_available"]], "cleanlab.datalab.internal.data.MultiClass": [[12, 4, 1, "", "class_names"], [12, 4, 1, "", "is_available"]], "cleanlab.datalab.internal.data.MultiLabel": [[12, 4, 1, "", "class_names"], [12, 4, 1, "", "is_available"]], "cleanlab.datalab.internal.data_issues": [[13, 2, 1, "", "DataIssues"], [13, 1, 1, "", "get_data_statistics"]], "cleanlab.datalab.internal.data_issues.DataIssues": [[13, 3, 1, "", "collect_issues_from_imagelab"], [13, 3, 1, "", "collect_issues_from_issue_manager"], [13, 3, 1, "", "collect_statistics"], [13, 3, 1, "", "get_info"], [13, 3, 1, "", "get_issue_summary"], [13, 3, 1, "", "get_issues"], [13, 6, 1, "", "info"], [13, 6, 1, "", "issue_summary"], [13, 6, 1, "", "issues"], [13, 3, 1, "", "set_health_score"], [13, 4, 1, "", "statistics"]], "cleanlab.datalab.internal.issue_finder": [[16, 2, 1, "", "IssueFinder"]], "cleanlab.datalab.internal.issue_finder.IssueFinder": [[16, 3, 1, "", "find_issues"], [16, 3, 1, "", "get_available_issue_types"]], "cleanlab.datalab.internal.issue_manager": [[18, 0, 0, "-", "data_valuation"], [19, 0, 0, "-", "duplicate"], [20, 0, 0, "-", "imbalance"], [22, 0, 0, "-", "issue_manager"], [23, 0, 0, "-", "label"], [26, 0, 0, "-", "noniid"], [27, 0, 0, "-", "null"], [28, 0, 0, "-", "outlier"], [31, 0, 0, "-", "underperforming_group"]], "cleanlab.datalab.internal.issue_manager.data_valuation": [[18, 2, 1, "", "DataValuationIssueManager"]], "cleanlab.datalab.internal.issue_manager.data_valuation.DataValuationIssueManager": [[18, 6, 1, "", "DEFAULT_THRESHOLD"], [18, 3, 1, "", "collect_info"], [18, 6, 1, "", "description"], [18, 3, 1, "", "find_issues"], [18, 6, 1, "", "info"], [18, 6, 1, "", "issue_name"], [18, 6, 1, "", "issue_score_key"], [18, 6, 1, "", "issues"], [18, 3, 1, "", "make_summary"], [18, 3, 1, "", "report"], [18, 6, 1, "", "summary"], [18, 6, 1, "", "verbosity_levels"]], "cleanlab.datalab.internal.issue_manager.duplicate": [[19, 2, 1, "", "NearDuplicateIssueManager"]], "cleanlab.datalab.internal.issue_manager.duplicate.NearDuplicateIssueManager": [[19, 3, 1, "", "collect_info"], [19, 6, 1, "", "description"], [19, 3, 1, "", "find_issues"], [19, 6, 1, "", "info"], [19, 6, 1, "", "issue_name"], [19, 6, 1, "", "issue_score_key"], [19, 6, 1, "", "issues"], [19, 3, 1, "", "make_summary"], [19, 6, 1, "", "near_duplicate_sets"], [19, 3, 1, "", "report"], [19, 6, 1, "", "summary"], [19, 6, 1, "", "verbosity_levels"]], "cleanlab.datalab.internal.issue_manager.imbalance": [[20, 2, 1, "", "ClassImbalanceIssueManager"]], "cleanlab.datalab.internal.issue_manager.imbalance.ClassImbalanceIssueManager": [[20, 3, 1, "", "collect_info"], [20, 6, 1, "", "description"], [20, 3, 1, "", "find_issues"], [20, 6, 1, "", "info"], [20, 6, 1, "", "issue_name"], [20, 6, 1, "", "issue_score_key"], [20, 6, 1, "", "issues"], [20, 3, 1, "", "make_summary"], [20, 3, 1, "", "report"], [20, 6, 1, "", "summary"], [20, 6, 1, "", "verbosity_levels"]], "cleanlab.datalab.internal.issue_manager.issue_manager": [[22, 2, 1, "", "IssueManager"]], "cleanlab.datalab.internal.issue_manager.issue_manager.IssueManager": [[22, 3, 1, "", "collect_info"], [22, 6, 1, "", "description"], [22, 3, 1, "", "find_issues"], [22, 6, 1, "", "info"], [22, 6, 1, "", "issue_name"], [22, 6, 1, "", "issue_score_key"], [22, 6, 1, "", "issues"], [22, 3, 1, "", "make_summary"], [22, 3, 1, "", "report"], [22, 6, 1, "", "summary"], [22, 6, 1, "", "verbosity_levels"]], "cleanlab.datalab.internal.issue_manager.label": [[23, 2, 1, "", "LabelIssueManager"]], "cleanlab.datalab.internal.issue_manager.label.LabelIssueManager": [[23, 3, 1, "", "collect_info"], [23, 6, 1, "", "description"], [23, 3, 1, "", "find_issues"], [23, 3, 1, "", "get_health_summary"], [23, 6, 1, "", "health_summary_parameters"], [23, 6, 1, "", "info"], [23, 6, 1, "", "issue_name"], [23, 6, 1, "", "issue_score_key"], [23, 6, 1, "", "issues"], [23, 3, 1, "", "make_summary"], [23, 3, 1, "", "report"], [23, 6, 1, "", "summary"], [23, 6, 1, "", "verbosity_levels"]], "cleanlab.datalab.internal.issue_manager.multilabel": [[25, 0, 0, "-", "label"]], "cleanlab.datalab.internal.issue_manager.multilabel.label": [[25, 2, 1, "", "MultilabelIssueManager"]], "cleanlab.datalab.internal.issue_manager.multilabel.label.MultilabelIssueManager": [[25, 3, 1, "", "collect_info"], [25, 6, 1, "", "description"], [25, 3, 1, "", "find_issues"], [25, 6, 1, "", "info"], [25, 6, 1, "", "issue_name"], [25, 6, 1, "", "issue_score_key"], [25, 6, 1, "", "issues"], [25, 3, 1, "", "make_summary"], [25, 3, 1, "", "report"], [25, 6, 1, "", "summary"], [25, 6, 1, "", "verbosity_levels"]], "cleanlab.datalab.internal.issue_manager.noniid": [[26, 2, 1, "", "NonIIDIssueManager"], [26, 1, 1, "", "simplified_kolmogorov_smirnov_test"]], "cleanlab.datalab.internal.issue_manager.noniid.NonIIDIssueManager": [[26, 3, 1, "", "collect_info"], [26, 6, 1, "", "description"], [26, 3, 1, "", "find_issues"], [26, 6, 1, "", "info"], [26, 6, 1, "", "issue_name"], [26, 6, 1, "", "issue_score_key"], [26, 6, 1, "", "issues"], [26, 3, 1, "", "make_summary"], [26, 3, 1, "", "report"], [26, 6, 1, "", "summary"], [26, 6, 1, "", "verbosity_levels"]], "cleanlab.datalab.internal.issue_manager.null": [[27, 2, 1, "", "NullIssueManager"]], "cleanlab.datalab.internal.issue_manager.null.NullIssueManager": [[27, 3, 1, "", "collect_info"], [27, 6, 1, "", "description"], [27, 3, 1, "", "find_issues"], [27, 6, 1, "", "info"], [27, 6, 1, "", "issue_name"], [27, 6, 1, "", "issue_score_key"], [27, 6, 1, "", "issues"], [27, 3, 1, "", "make_summary"], [27, 3, 1, "", "report"], [27, 6, 1, "", "summary"], [27, 6, 1, "", "verbosity_levels"]], "cleanlab.datalab.internal.issue_manager.outlier": [[28, 2, 1, "", "OutlierIssueManager"]], "cleanlab.datalab.internal.issue_manager.outlier.OutlierIssueManager": [[28, 6, 1, "", "DEFAULT_THRESHOLDS"], [28, 3, 1, "", "collect_info"], [28, 6, 1, "", "description"], [28, 3, 1, "", "find_issues"], [28, 6, 1, "", "info"], [28, 6, 1, "", "issue_name"], [28, 6, 1, "", "issue_score_key"], [28, 6, 1, "", "issues"], [28, 3, 1, "", "make_summary"], [28, 6, 1, "", "ood"], [28, 3, 1, "", "report"], [28, 6, 1, "", "summary"], [28, 6, 1, "", "verbosity_levels"]], "cleanlab.datalab.internal.issue_manager.regression": [[30, 0, 0, "-", "label"]], "cleanlab.datalab.internal.issue_manager.regression.label": [[30, 2, 1, "", "RegressionLabelIssueManager"], [30, 1, 1, "", "find_issues_with_features"], [30, 1, 1, "", "find_issues_with_predictions"]], "cleanlab.datalab.internal.issue_manager.regression.label.RegressionLabelIssueManager": [[30, 3, 1, "", "collect_info"], [30, 6, 1, "", "description"], [30, 3, 1, "", "find_issues"], [30, 6, 1, "", "info"], [30, 6, 1, "", "issue_name"], [30, 6, 1, "", "issue_score_key"], [30, 6, 1, "", "issues"], [30, 3, 1, "", "make_summary"], [30, 3, 1, "", "report"], [30, 6, 1, "", "summary"], [30, 6, 1, "", "verbosity_levels"]], "cleanlab.datalab.internal.issue_manager.underperforming_group": [[31, 2, 1, "", "UnderperformingGroupIssueManager"]], "cleanlab.datalab.internal.issue_manager.underperforming_group.UnderperformingGroupIssueManager": [[31, 6, 1, "", "NO_UNDERPERFORMING_CLUSTER_ID"], [31, 6, 1, "", "OUTLIER_CLUSTER_LABELS"], [31, 3, 1, "", "collect_info"], [31, 6, 1, "", "description"], [31, 3, 1, "", "filter_cluster_ids"], [31, 3, 1, "", "find_issues"], [31, 3, 1, "", "get_worst_cluster"], [31, 6, 1, "", "info"], [31, 6, 1, "", "issue_name"], [31, 6, 1, "", "issue_score_key"], [31, 6, 1, "", "issues"], [31, 3, 1, "", "make_summary"], [31, 3, 1, "", "perform_clustering"], [31, 3, 1, "", "report"], [31, 3, 1, "", "set_knn_graph"], [31, 6, 1, "", "summary"], [31, 6, 1, "", "verbosity_levels"]], "cleanlab.datalab.internal.issue_manager_factory": [[14, 7, 1, "", "REGISTRY"], [14, 1, 1, "", "list_default_issue_types"], [14, 1, 1, "", "list_possible_issue_types"], [14, 1, 1, "", "register"]], "cleanlab.datalab.internal.model_outputs": [[32, 2, 1, "", "ModelOutput"], [32, 2, 1, "", "MultiClassPredProbs"], [32, 2, 1, "", "MultiLabelPredProbs"], [32, 2, 1, "", "RegressionPredictions"]], "cleanlab.datalab.internal.model_outputs.ModelOutput": [[32, 3, 1, "", "collect"], [32, 6, 1, "", "data"], [32, 3, 1, "", "validate"]], "cleanlab.datalab.internal.model_outputs.MultiClassPredProbs": [[32, 6, 1, "", "argument"], [32, 3, 1, "", "collect"], [32, 6, 1, "", "data"], [32, 3, 1, "", "validate"]], "cleanlab.datalab.internal.model_outputs.MultiLabelPredProbs": [[32, 6, 1, "", "argument"], [32, 3, 1, "", "collect"], [32, 6, 1, "", "data"], [32, 3, 1, "", "validate"]], "cleanlab.datalab.internal.model_outputs.RegressionPredictions": [[32, 6, 1, "", "argument"], [32, 3, 1, "", "collect"], [32, 6, 1, "", "data"], [32, 3, 1, "", "validate"]], "cleanlab.datalab.internal.report": [[33, 2, 1, "", "Reporter"]], "cleanlab.datalab.internal.report.Reporter": [[33, 3, 1, "", "get_report"], [33, 3, 1, "", "report"]], "cleanlab.datalab.internal.task": [[34, 2, 1, "", "Task"]], "cleanlab.datalab.internal.task.Task": [[34, 6, 1, "", "CLASSIFICATION"], [34, 6, 1, "", "MULTILABEL"], [34, 6, 1, "", "REGRESSION"], [34, 3, 1, "", "__contains__"], [34, 3, 1, "", "__getitem__"], [34, 3, 1, "", "__iter__"], [34, 3, 1, "", "__len__"], [34, 3, 1, "", "from_str"], [34, 4, 1, "", "is_classification"], [34, 4, 1, "", "is_multilabel"], [34, 4, 1, "", "is_regression"]], "cleanlab.dataset": [[36, 1, 1, "", "find_overlapping_classes"], [36, 1, 1, "", "health_summary"], [36, 1, 1, "", "overall_label_health_score"], [36, 1, 1, "", "rank_classes_by_label_quality"]], "cleanlab.experimental": [[37, 0, 0, "-", "cifar_cnn"], [38, 0, 0, "-", "coteaching"], [40, 0, 0, "-", "label_issues_batched"], [41, 0, 0, "-", "mnist_pytorch"], [42, 0, 0, "-", "span_classification"]], "cleanlab.experimental.cifar_cnn": [[37, 2, 1, "", "CNN"], [37, 1, 1, "", "call_bn"]], "cleanlab.experimental.cifar_cnn.CNN": [[37, 6, 1, "", "T_destination"], [37, 3, 1, "", "__call__"], [37, 3, 1, "", "add_module"], [37, 3, 1, "", "apply"], [37, 3, 1, "", "bfloat16"], [37, 3, 1, "", "buffers"], [37, 6, 1, "", "call_super_init"], [37, 3, 1, "", "children"], [37, 3, 1, "", "compile"], [37, 3, 1, "", "cpu"], [37, 3, 1, "", "cuda"], [37, 3, 1, "", "double"], [37, 6, 1, "", "dump_patches"], [37, 3, 1, "", "eval"], [37, 3, 1, "", "extra_repr"], [37, 3, 1, "", "float"], [37, 3, 1, "id0", "forward"], [37, 3, 1, "", "get_buffer"], [37, 3, 1, "", "get_extra_state"], [37, 3, 1, "", "get_parameter"], [37, 3, 1, "", "get_submodule"], [37, 3, 1, "", "half"], [37, 3, 1, "", "ipu"], [37, 3, 1, "", "load_state_dict"], [37, 3, 1, "", "modules"], [37, 3, 1, "", "named_buffers"], [37, 3, 1, "", "named_children"], [37, 3, 1, "", "named_modules"], [37, 3, 1, "", "named_parameters"], [37, 3, 1, "", "parameters"], [37, 3, 1, "", "register_backward_hook"], [37, 3, 1, "", "register_buffer"], [37, 3, 1, "", "register_forward_hook"], [37, 3, 1, "", "register_forward_pre_hook"], [37, 3, 1, "", "register_full_backward_hook"], [37, 3, 1, "", "register_full_backward_pre_hook"], [37, 3, 1, "", "register_load_state_dict_post_hook"], [37, 3, 1, "", "register_module"], [37, 3, 1, "", "register_parameter"], [37, 3, 1, "", "register_state_dict_pre_hook"], [37, 3, 1, "", "requires_grad_"], [37, 3, 1, "", "set_extra_state"], [37, 3, 1, "", "share_memory"], [37, 3, 1, "", "state_dict"], [37, 3, 1, "", "to"], [37, 3, 1, "", "to_empty"], [37, 3, 1, "", "train"], [37, 6, 1, "", "training"], [37, 3, 1, "", "type"], [37, 3, 1, "", "xpu"], [37, 3, 1, "", "zero_grad"]], "cleanlab.experimental.coteaching": [[38, 1, 1, "", "adjust_learning_rate"], [38, 1, 1, "", "evaluate"], [38, 1, 1, "", "forget_rate_scheduler"], [38, 1, 1, "", "initialize_lr_scheduler"], [38, 1, 1, "", "loss_coteaching"], [38, 1, 1, "", "train"]], "cleanlab.experimental.label_issues_batched": [[40, 2, 1, "", "LabelInspector"], [40, 7, 1, "", "adj_confident_thresholds_shared"], [40, 1, 1, "", "find_label_issues_batched"], [40, 7, 1, "", "labels_shared"], [40, 7, 1, "", "pred_probs_shared"], [40, 1, 1, "", "split_arr"]], "cleanlab.experimental.label_issues_batched.LabelInspector": [[40, 3, 1, "", "get_confident_thresholds"], [40, 3, 1, "", "get_label_issues"], [40, 3, 1, "", "get_num_issues"], [40, 3, 1, "", "get_quality_scores"], [40, 3, 1, "", "score_label_quality"], [40, 3, 1, "", "update_confident_thresholds"]], "cleanlab.experimental.mnist_pytorch": [[41, 2, 1, "", "CNN"], [41, 2, 1, "", "SimpleNet"], [41, 1, 1, "", "get_mnist_dataset"], [41, 1, 1, "", "get_sklearn_digits_dataset"]], "cleanlab.experimental.mnist_pytorch.CNN": [[41, 3, 1, "", "__init_subclass__"], [41, 6, 1, "", "batch_size"], [41, 6, 1, "", "dataset"], [41, 6, 1, "", "epochs"], [41, 3, 1, "id0", "fit"], [41, 3, 1, "", "get_metadata_routing"], [41, 3, 1, "", "get_params"], [41, 6, 1, "", "loader"], [41, 6, 1, "", "log_interval"], [41, 6, 1, "", "lr"], [41, 6, 1, "", "momentum"], [41, 6, 1, "", "no_cuda"], [41, 3, 1, "id1", "predict"], [41, 3, 1, "id4", "predict_proba"], [41, 6, 1, "", "seed"], [41, 3, 1, "", "set_fit_request"], [41, 3, 1, "", "set_params"], [41, 3, 1, "", "set_predict_proba_request"], [41, 3, 1, "", "set_predict_request"], [41, 6, 1, "", "test_batch_size"]], "cleanlab.experimental.mnist_pytorch.SimpleNet": [[41, 6, 1, "", "T_destination"], [41, 3, 1, "", "__call__"], [41, 3, 1, "", "add_module"], [41, 3, 1, "", "apply"], [41, 3, 1, "", "bfloat16"], [41, 3, 1, "", "buffers"], [41, 6, 1, "", "call_super_init"], [41, 3, 1, "", "children"], [41, 3, 1, "", "compile"], [41, 3, 1, "", "cpu"], [41, 3, 1, "", "cuda"], [41, 3, 1, "", "double"], [41, 6, 1, "", "dump_patches"], [41, 3, 1, "", "eval"], [41, 3, 1, "", "extra_repr"], [41, 3, 1, "", "float"], [41, 3, 1, "", "forward"], [41, 3, 1, "", "get_buffer"], [41, 3, 1, "", "get_extra_state"], [41, 3, 1, "", "get_parameter"], [41, 3, 1, "", "get_submodule"], [41, 3, 1, "", "half"], [41, 3, 1, "", "ipu"], [41, 3, 1, "", "load_state_dict"], [41, 3, 1, "", "modules"], [41, 3, 1, "", "named_buffers"], [41, 3, 1, "", "named_children"], [41, 3, 1, "", "named_modules"], [41, 3, 1, "", "named_parameters"], [41, 3, 1, "", "parameters"], [41, 3, 1, "", "register_backward_hook"], [41, 3, 1, "", "register_buffer"], [41, 3, 1, "", "register_forward_hook"], [41, 3, 1, "", "register_forward_pre_hook"], [41, 3, 1, "", "register_full_backward_hook"], [41, 3, 1, "", "register_full_backward_pre_hook"], [41, 3, 1, "", "register_load_state_dict_post_hook"], [41, 3, 1, "", "register_module"], [41, 3, 1, "", "register_parameter"], [41, 3, 1, "", "register_state_dict_pre_hook"], [41, 3, 1, "", "requires_grad_"], [41, 3, 1, "", "set_extra_state"], [41, 3, 1, "", "share_memory"], [41, 3, 1, "", "state_dict"], [41, 3, 1, "", "to"], [41, 3, 1, "", "to_empty"], [41, 3, 1, "", "train"], [41, 6, 1, "", "training"], [41, 3, 1, "", "type"], [41, 3, 1, "", "xpu"], [41, 3, 1, "", "zero_grad"]], "cleanlab.experimental.span_classification": [[42, 1, 1, "", "display_issues"], [42, 1, 1, "", "find_label_issues"], [42, 1, 1, "", "get_label_quality_scores"]], "cleanlab.filter": [[43, 1, 1, "", "find_label_issues"], [43, 1, 1, "", "find_label_issues_using_argmax_confusion_matrix"], [43, 1, 1, "", "find_predicted_neq_given"], [43, 7, 1, "", "pred_probs_by_class"], [43, 7, 1, "", "prune_count_matrix_cols"]], "cleanlab.internal": [[45, 0, 0, "-", "label_quality_utils"], [46, 0, 0, "-", "latent_algebra"], [47, 0, 0, "-", "multiannotator_utils"], [48, 0, 0, "-", "multilabel_scorer"], [49, 0, 0, "-", "multilabel_utils"], [50, 0, 0, "-", "outlier"], [51, 0, 0, "-", "token_classification_utils"], [52, 0, 0, "-", "util"], [53, 0, 0, "-", "validation"]], "cleanlab.internal.label_quality_utils": [[45, 1, 1, "", "get_normalized_entropy"]], "cleanlab.internal.latent_algebra": [[46, 1, 1, "", "compute_inv_noise_matrix"], [46, 1, 1, "", "compute_noise_matrix_from_inverse"], [46, 1, 1, "", "compute_ps_py_inv_noise_matrix"], [46, 1, 1, "", "compute_py"], [46, 1, 1, "", "compute_py_inv_noise_matrix"], [46, 1, 1, "", "compute_pyx"]], "cleanlab.internal.multiannotator_utils": [[47, 1, 1, "", "assert_valid_inputs_multiannotator"], [47, 1, 1, "", "assert_valid_pred_probs"], [47, 1, 1, "", "check_consensus_label_classes"], [47, 1, 1, "", "compute_soft_cross_entropy"], [47, 1, 1, "", "find_best_temp_scaler"], [47, 1, 1, "", "format_multiannotator_labels"], [47, 1, 1, "", "temp_scale_pred_probs"]], "cleanlab.internal.multilabel_scorer": [[48, 2, 1, "", "Aggregator"], [48, 2, 1, "", "ClassLabelScorer"], [48, 2, 1, "", "MultilabelScorer"], [48, 1, 1, "", "exponential_moving_average"], [48, 1, 1, "", "get_cross_validated_multilabel_pred_probs"], [48, 1, 1, "", "get_label_quality_scores"], [48, 1, 1, "", "multilabel_py"], [48, 1, 1, "", "softmin"]], "cleanlab.internal.multilabel_scorer.Aggregator": [[48, 3, 1, "", "__call__"], [48, 6, 1, "", "possible_methods"]], "cleanlab.internal.multilabel_scorer.ClassLabelScorer": [[48, 6, 1, "", "CONFIDENCE_WEIGHTED_ENTROPY"], [48, 6, 1, "", "NORMALIZED_MARGIN"], [48, 6, 1, "", "SELF_CONFIDENCE"], [48, 3, 1, "", "__call__"], [48, 3, 1, "", "__contains__"], [48, 3, 1, "", "__getitem__"], [48, 3, 1, "", "__iter__"], [48, 3, 1, "", "__len__"], [48, 3, 1, "", "from_str"]], "cleanlab.internal.multilabel_scorer.MultilabelScorer": [[48, 3, 1, "", "__call__"], [48, 3, 1, "", "aggregate"], [48, 3, 1, "", "get_class_label_quality_scores"]], "cleanlab.internal.multilabel_utils": [[49, 1, 1, "", "get_onehot_num_classes"], [49, 1, 1, "", "int2onehot"], [49, 1, 1, "", "onehot2int"], [49, 1, 1, "", "stack_complement"]], "cleanlab.internal.outlier": [[50, 1, 1, "", "transform_distances_to_scores"]], "cleanlab.internal.token_classification_utils": [[51, 1, 1, "", "color_sentence"], [51, 1, 1, "", "filter_sentence"], [51, 1, 1, "", "get_sentence"], [51, 1, 1, "", "mapping"], [51, 1, 1, "", "merge_probs"], [51, 1, 1, "", "process_token"]], "cleanlab.internal.util": [[52, 1, 1, "", "append_extra_datapoint"], [52, 1, 1, "", "clip_noise_rates"], [52, 1, 1, "", "clip_values"], [52, 1, 1, "", "compress_int_array"], [52, 1, 1, "", "confusion_matrix"], [52, 1, 1, "", "csr_vstack"], [52, 1, 1, "", "estimate_pu_f1"], [52, 1, 1, "", "extract_indices_tf"], [52, 1, 1, "", "force_two_dimensions"], [52, 1, 1, "", "format_labels"], [52, 1, 1, "", "get_missing_classes"], [52, 1, 1, "", "get_num_classes"], [52, 1, 1, "", "get_unique_classes"], [52, 1, 1, "", "is_tensorflow_dataset"], [52, 1, 1, "", "is_torch_dataset"], [52, 1, 1, "", "num_unique_classes"], [52, 1, 1, "", "print_inverse_noise_matrix"], [52, 1, 1, "", "print_joint_matrix"], [52, 1, 1, "", "print_noise_matrix"], [52, 1, 1, "", "print_square_matrix"], [52, 1, 1, "", "remove_noise_from_class"], [52, 1, 1, "", "round_preserving_row_totals"], [52, 1, 1, "", "round_preserving_sum"], [52, 1, 1, "", "smart_display_dataframe"], [52, 1, 1, "", "subset_X_y"], [52, 1, 1, "", "subset_data"], [52, 1, 1, "", "subset_labels"], [52, 1, 1, "", "train_val_split"], [52, 1, 1, "", "unshuffle_tensorflow_dataset"], [52, 1, 1, "", "value_counts"], [52, 1, 1, "", "value_counts_fill_missing_classes"]], "cleanlab.internal.validation": [[53, 1, 1, "", "assert_indexing_works"], [53, 1, 1, "", "assert_nonempty_input"], [53, 1, 1, "", "assert_valid_class_labels"], [53, 1, 1, "", "assert_valid_inputs"], [53, 1, 1, "", "labels_to_array"], [53, 1, 1, "", "labels_to_list_multilabel"]], "cleanlab.models": [[56, 0, 0, "-", "keras"]], "cleanlab.models.keras": [[56, 2, 1, "", "KerasWrapperModel"], [56, 2, 1, "", "KerasWrapperSequential"]], "cleanlab.models.keras.KerasWrapperModel": [[56, 3, 1, "", "fit"], [56, 3, 1, "", "get_params"], [56, 3, 1, "", "predict"], [56, 3, 1, "", "predict_proba"], [56, 3, 1, "", "set_params"], [56, 3, 1, "", "summary"]], "cleanlab.models.keras.KerasWrapperSequential": [[56, 3, 1, "", "fit"], [56, 3, 1, "", "get_params"], [56, 3, 1, "", "predict"], [56, 3, 1, "", "predict_proba"], [56, 3, 1, "", "set_params"], [56, 3, 1, "", "summary"]], "cleanlab.multiannotator": [[57, 1, 1, "", "convert_long_to_wide_dataset"], [57, 1, 1, "", "get_active_learning_scores"], [57, 1, 1, "", "get_active_learning_scores_ensemble"], [57, 1, 1, "", "get_label_quality_multiannotator"], [57, 1, 1, "", "get_label_quality_multiannotator_ensemble"], [57, 1, 1, "", "get_majority_vote_label"]], "cleanlab.multilabel_classification": [[58, 0, 0, "-", "dataset"], [59, 0, 0, "-", "filter"], [61, 0, 0, "-", "rank"]], "cleanlab.multilabel_classification.dataset": [[58, 1, 1, "", "common_multilabel_issues"], [58, 1, 1, "", "multilabel_health_summary"], [58, 1, 1, "", "overall_multilabel_health_score"], [58, 1, 1, "", "rank_classes_by_multilabel_quality"]], "cleanlab.multilabel_classification.filter": [[59, 1, 1, "", "find_label_issues"], [59, 1, 1, "", "find_multilabel_issues_per_class"]], "cleanlab.multilabel_classification.rank": [[61, 1, 1, "", "get_label_quality_scores"], [61, 1, 1, "", "get_label_quality_scores_per_class"]], "cleanlab.object_detection": [[62, 0, 0, "-", "filter"], [64, 0, 0, "-", "rank"], [65, 0, 0, "-", "summary"]], "cleanlab.object_detection.filter": [[62, 1, 1, "", "find_label_issues"]], "cleanlab.object_detection.rank": [[64, 1, 1, "", "compute_badloc_box_scores"], [64, 1, 1, "", "compute_overlooked_box_scores"], [64, 1, 1, "", "compute_swap_box_scores"], [64, 1, 1, "", "get_label_quality_scores"], [64, 1, 1, "", "issues_from_scores"], [64, 1, 1, "", "pool_box_scores_per_image"]], "cleanlab.object_detection.summary": [[65, 1, 1, "", "bounding_box_size_distribution"], [65, 1, 1, "", "calculate_per_class_metrics"], [65, 1, 1, "", "class_label_distribution"], [65, 1, 1, "", "get_average_per_class_confusion_matrix"], [65, 1, 1, "", "get_sorted_bbox_count_idxs"], [65, 1, 1, "", "object_counts_per_image"], [65, 1, 1, "", "plot_class_distribution"], [65, 1, 1, "", "plot_class_size_distributions"], [65, 1, 1, "", "visualize"]], "cleanlab.outlier": [[66, 2, 1, "", "OutOfDistribution"]], "cleanlab.outlier.OutOfDistribution": [[66, 3, 1, "", "fit"], [66, 3, 1, "", "fit_score"], [66, 3, 1, "", "score"]], "cleanlab.rank": [[67, 1, 1, "", "find_top_issues"], [67, 1, 1, "", "get_confidence_weighted_entropy_for_each_label"], [67, 1, 1, "", "get_label_quality_ensemble_scores"], [67, 1, 1, "", "get_label_quality_scores"], [67, 1, 1, "", "get_normalized_margin_for_each_label"], [67, 1, 1, "", "get_self_confidence_for_each_label"], [67, 1, 1, "", "order_label_issues"]], "cleanlab.regression": [[69, 0, 0, "-", "learn"], [70, 0, 0, "-", "rank"]], "cleanlab.regression.learn": [[69, 2, 1, "", "CleanLearning"]], "cleanlab.regression.learn.CleanLearning": [[69, 3, 1, "", "__init_subclass__"], [69, 3, 1, "", "find_label_issues"], [69, 3, 1, "", "fit"], [69, 3, 1, "", "get_aleatoric_uncertainty"], [69, 3, 1, "", "get_epistemic_uncertainty"], [69, 3, 1, "", "get_label_issues"], [69, 3, 1, "", "get_metadata_routing"], [69, 3, 1, "", "get_params"], [69, 3, 1, "", "predict"], [69, 3, 1, "", "save_space"], [69, 3, 1, "", "score"], [69, 3, 1, "", "set_fit_request"], [69, 3, 1, "", "set_params"], [69, 3, 1, "", "set_score_request"]], "cleanlab.regression.rank": [[70, 1, 1, "", "get_label_quality_scores"]], "cleanlab.segmentation": [[71, 0, 0, "-", "filter"], [73, 0, 0, "-", "rank"], [74, 0, 0, "-", "summary"]], "cleanlab.segmentation.filter": [[71, 1, 1, "", "find_label_issues"]], "cleanlab.segmentation.rank": [[73, 1, 1, "", "get_label_quality_scores"], [73, 1, 1, "", "issues_from_scores"]], "cleanlab.segmentation.summary": [[74, 1, 1, "", "common_label_issues"], [74, 1, 1, "", "display_issues"], [74, 1, 1, "", "filter_by_class"]], "cleanlab.token_classification": [[75, 0, 0, "-", "filter"], [77, 0, 0, "-", "rank"], [78, 0, 0, "-", "summary"]], "cleanlab.token_classification.filter": [[75, 1, 1, "", "find_label_issues"]], "cleanlab.token_classification.rank": [[77, 1, 1, "", "get_label_quality_scores"], [77, 1, 1, "", "issues_from_scores"]], "cleanlab.token_classification.summary": [[78, 1, 1, "", "common_label_issues"], [78, 1, 1, "", "display_issues"], [78, 1, 1, "", "filter_by_token"]]}, "objtypes": {"0": "py:module", "1": "py:function", "2": "py:class", "3": "py:method", "4": "py:property", "5": "py:exception", "6": "py:attribute", "7": "py:data"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "function", "Python function"], "2": ["py", "class", "Python class"], "3": ["py", "method", "Python method"], "4": ["py", "property", "Python property"], "5": ["py", "exception", "Python exception"], "6": ["py", "attribute", "Python attribute"], "7": ["py", "data", "Python data"]}, "titleterms": {"benchmark": 0, "noise_gener": 1, "classif": [2, 82, 83, 84, 87, 89, 90, 92, 93, 96, 102], "count": [3, 93], "data_valu": [4, 18], "datalab": [5, 7, 9, 10, 11, 85, 86, 88, 89, 90, 93, 96], "creat": [7, 85, 86, 93, 95], "your": [7, 79, 85, 86, 90, 92, 93], "own": 7, "issu": [7, 9, 10, 21, 30, 79, 82, 84, 85, 86, 87, 89, 90, 91, 92, 93, 96, 97, 101, 102], "manag": [7, 21], "prerequisit": 7, "implement": 7, "issuemanag": [7, 85], "basic": 7, "check": 7, "intermedi": 7, "advanc": [7, 85], "us": [7, 82, 83, 84, 86, 87, 89, 90, 92, 93, 95, 96, 97, 98, 100, 101, 102], "gener": 8, "cluster": [8, 92], "id": 8, "guid": [9, 11], "type": [9, 10, 93], "custom": [9, 85], "cleanlab": [9, 10, 79, 82, 83, 84, 87, 89, 90, 92, 93, 95, 96, 97, 98, 100, 101, 102], "studio": [9, 10], "easi": [9, 10, 79, 87, 89, 90], "mode": [9, 10, 79, 87, 89, 90], "can": [10, 86, 91, 92, 93, 95], "detect": [10, 86, 89, 90, 92, 93, 97, 98], "estim": [10, 93, 95, 96], "each": 10, "label": [10, 23, 25, 30, 79, 82, 83, 84, 86, 87, 89, 90, 92, 93, 95, 96, 97, 100, 101, 102], "outlier": [10, 28, 50, 66, 87, 89, 90, 96, 98], "Near": [10, 86, 87, 89, 90], "duplic": [10, 19, 86, 87, 89, 90, 92, 96], "non": [10, 90], "iid": [10, 90], "class": [10, 80, 93, 101], "imbal": [10, 20], "imag": [10, 87, 98], "specif": [10, 21, 101], "underperform": [10, 92], "group": [10, 92], "null": [10, 27], "data": [10, 12, 79, 82, 84, 85, 86, 89, 90, 91, 92, 93, 95, 96, 97, 98, 100, 101, 102], "valuat": 10, "option": 10, "paramet": [10, 93], "get": [11, 85, 86, 95, 96, 97, 101, 102], "start": [11, 91], "api": 11, "refer": 11, "data_issu": 13, "factori": 14, "intern": [15, 44], "issue_find": 16, "issue_manag": [21, 22], "regist": 21, "ml": [21, 92, 93], "task": [21, 34], "multilabel": 24, "noniid": 26, "regress": [29, 68, 69, 70, 92, 100], "prioriti": 30, "order": 30, "find": [30, 79, 82, 83, 84, 86, 87, 89, 90, 91, 92, 93, 95, 96, 97, 98, 100, 101, 102], "underperforming_group": 31, "model_output": 32, "report": [33, 87], "dataset": [36, 58, 79, 83, 86, 87, 90, 91, 92, 93, 96, 97, 98, 100, 101, 102], "cifar_cnn": 37, "coteach": 38, "experiment": 39, "label_issues_batch": 40, "mnist_pytorch": 41, "span_classif": 42, "filter": [43, 59, 62, 71, 75, 93], "label_quality_util": 45, "latent_algebra": 46, "multiannotator_util": 47, "multilabel_scor": 48, "multilabel_util": 49, "token_classification_util": 51, "util": 52, "valid": [53, 87, 99], "fasttext": 54, "model": [55, 79, 82, 83, 84, 87, 89, 90, 92, 93, 95, 96, 97, 98, 100], "kera": 56, "multiannot": [57, 95], "multilabel_classif": 60, "rank": [61, 64, 67, 70, 73, 77, 93], "object_detect": 63, "summari": [65, 74, 78], "learn": [69, 82, 86, 92, 93], "segment": [72, 101], "token_classif": [76, 102], "open": [79, 92], "sourc": [79, 92], "document": 79, "quickstart": 79, "1": [79, 80, 82, 83, 84, 85, 86, 87, 89, 90, 93, 95, 96, 97, 98, 100, 101, 102], "instal": [79, 82, 83, 84, 85, 86, 87, 89, 90, 91, 93, 95, 96, 97, 98, 100, 101, 102], "2": [79, 80, 82, 83, 84, 85, 86, 87, 89, 90, 93, 95, 96, 97, 98, 100, 101, 102], "common": [79, 80, 102], "3": [79, 82, 83, 84, 85, 86, 87, 89, 90, 93, 95, 96, 97, 98, 100, 101, 102], "handl": [79, 92], "error": [79, 83, 87, 92, 93, 95, 96, 97, 100, 101, 102], "train": [79, 82, 83, 84, 92, 98, 100], "robust": [79, 82, 83, 93, 100], "noisi": [79, 82, 83, 93, 100], "4": [79, 82, 83, 84, 85, 86, 87, 89, 90, 93, 95, 97, 98, 100], "curat": [79, 91], "fix": [79, 92], "level": [79, 91, 93, 102], "5": [79, 82, 84, 86, 87, 89, 93, 95, 100], "improv": [79, 95], "via": [79, 93, 95], "mani": [79, 93], "other": [79, 95, 97, 100], "techniqu": 79, "contribut": 79, "how": [80, 92, 93, 95, 96, 102], "migrat": 80, "version": 80, "0": 80, "from": [80, 82, 83, 85, 86, 93, 100], "pre": [80, 84, 92, 98], "function": [80, 85], "name": 80, "chang": 80, "modul": [80, 93], "new": 80, "remov": 80, "argument": [80, 85], "variabl": 80, "cleanlearn": [81, 92, 93], "tutori": [81, 88, 91, 94], "tabular": [82, 89], "scikit": 82, "requir": [82, 83, 85, 86, 87, 89, 90, 95, 96, 97, 98, 100, 101, 102], "depend": [82, 83, 84, 85, 86, 87, 89, 90, 91, 93, 95, 96, 97, 98, 100, 101, 102], "load": [82, 83, 84, 85, 86, 89, 90, 100], "process": [82, 89, 98, 100], "select": [82, 89], "comput": [82, 84, 87, 89, 90, 92, 95, 99], "out": [82, 84, 85, 86, 87, 89, 90, 95, 99], "sampl": [82, 84, 85, 86, 87, 89, 90, 95, 99], "predict": [82, 84, 85, 86, 87, 89, 90, 95, 96, 97, 99], "probabl": [82, 84, 85, 86, 87, 89, 90, 95, 99], "more": [82, 83, 86, 93, 100], "text": [83, 90, 102], "format": [83, 90, 92, 96, 97], "defin": [83, 87, 90, 100], "potenti": [83, 95, 100], "audio": 84, "speechbrain": 84, "import": [84, 85, 86, 87, 91, 93, 95], "them": [84, 91, 93], "featur": [84, 87, 98], "fit": 84, "linear": 84, "workflow": [85, 93], "audit": [85, 86], "classifi": [85, 86], "instanti": 85, "object": [85, 97], "increment": 85, "search": 85, "specifi": [85, 92], "nondefault": 85, "save": 85, "ad": 85, "A": 86, "unifi": 86, "all": [86, 93], "kind": [86, 97], "skip": [86, 91, 93, 95], "detail": [86, 91, 93, 95], "about": 86, "addit": 86, "inform": [86, 87], "pytorch": [87, 98], "fetch": [87, 91], "normal": 87, "fashion": 87, "mnist": 87, "prepar": 87, "k": [87, 89, 99], "fold": [87, 99], "cross": [87, 99], "embed": [87, 98], "7": [87, 93], "view": 87, "most": [87, 102], "like": 87, "exampl": [87, 92, 93, 98], "sever": 87, "set": [87, 93], "dark": 87, "top": [87, 101], "low": 87, "numer": 89, "categor": 89, "column": 89, "construct": 89, "nearest": 89, "neighbour": 89, "graph": 89, "drift": [90, 96], "evalu": 91, "health": [91, 93], "8": [91, 93], "popular": 91, "faq": 92, "what": [92, 93, 99], "do": [92, 93], "i": [92, 93, 99], "infer": 92, "correct": 92, "ha": 92, "flag": 92, "should": 92, "v": 92, "test": [92, 93, 98], "big": 92, "limit": 92, "memori": 92, "why": 92, "isn": 92, "t": 92, "work": [92, 93, 95, 102], "me": 92, "differ": [92, 97], "clean": [92, 93], "final": 92, "hyperparamet": 92, "tune": 92, "onli": 92, "one": [92, 93, 96, 101], "doe": [92, 95, 102], "take": 92, "so": 92, "long": 92, "slice": 92, "when": [92, 93], "identifi": [92, 97], "run": 92, "licens": 92, "under": 92, "an": 92, "answer": 92, "question": 92, "The": 93, "centric": 93, "ai": 93, "machin": 93, "find_label_issu": 93, "line": 93, "code": 93, "visual": [93, 97, 98, 101], "twenti": 93, "lowest": 93, "qualiti": [93, 95, 96, 97, 101, 102], "see": 93, "now": 93, "let": 93, "": 93, "happen": 93, "we": 93, "merg": 93, "seafoam": 93, "green": 93, "yellow": 93, "too": 93, "you": 93, "re": 93, "6": 93, "One": 93, "score": [93, 95, 96, 97, 101, 102], "rule": 93, "overal": [93, 101], "accur": 93, "thi": 93, "directli": 93, "fulli": 93, "character": 93, "nois": 93, "matrix": [93, 96], "joint": 93, "prior": 93, "true": 93, "distribut": 93, "flip": 93, "rate": 93, "ani": 93, "again": 93, "support": 93, "lot": 93, "method": 93, "filter_bi": 93, "automat": 93, "everi": 93, "uniqu": 93, "num_label_issu": 93, "threshold": 93, "found": 93, "Not": 93, "sure": 93, "ensembl": 93, "multipl": [93, 95], "predictor": 93, "consensu": 95, "annot": 95, "initi": 95, "major": 95, "vote": 95, "better": 95, "statist": 95, "compar": 95, "inspect": 95, "retrain": 95, "further": 95, "multi": 96, "beyond": 96, "mislabel": [96, 101, 102], "given": 96, "hot": 96, "binari": 96, "without": 96, "applic": 96, "real": 96, "download": [97, 101, 102], "objectlab": 97, "exploratori": 97, "analysi": 97, "timm": 98, "cifar10": 98, "some": 98, "pred_prob": [98, 101, 102], "wai": 100, "semant": 101, "which": 101, "ar": 101, "commonli": 101, "focus": 101, "token": 102, "word": 102, "sentenc": 102, "contain": 102, "particular": 102}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "nbsphinx": 4, "sphinx.ext.viewcode": 1, "sphinx.ext.todo": 2, "sphinx": 58}, "alltitles": {"benchmarking": [[0, "module-cleanlab.benchmarking"]], "noise_generation": [[1, "module-cleanlab.benchmarking.noise_generation"]], "classification": [[2, "module-cleanlab.classification"]], "count": [[3, "module-cleanlab.count"]], "data_valuation": [[4, "module-cleanlab.data_valuation"], [18, "data-valuation"]], "datalab": [[5, "module-cleanlab.datalab.datalab"], [11, "module-cleanlab.datalab"]], "Creating Your Own Issues Manager": [[7, "creating-your-own-issues-manager"]], "Prerequisites": [[7, "prerequisites"]], "Implementing IssueManagers": [[7, "implementing-issuemanagers"]], "Basic Issue Check": [[7, "basic-issue-check"]], "Intermediate Issue Check": [[7, "intermediate-issue-check"]], "Advanced Issue Check": [[7, "advanced-issue-check"]], "Use with Datalab": [[7, "use-with-datalab"]], "Generating Cluster IDs": [[8, "generating-cluster-ids"]], "Datalab guides": [[9, "datalab-guides"]], "Types of issues": [[9, "types-of-issues"]], "Customizing issue types": [[9, "customizing-issue-types"]], "Cleanlab Studio (Easy Mode)": [[9, "cleanlab-studio-easy-mode"], [10, "cleanlab-studio-easy-mode"]], "Datalab Issue Types": [[10, "datalab-issue-types"]], "Types of issues Datalab can detect": [[10, "types-of-issues-datalab-can-detect"]], "Estimates for Each Issue Type": [[10, "estimates-for-each-issue-type"]], "Label Issue": [[10, "label-issue"]], "Outlier Issue": [[10, "outlier-issue"]], "(Near) Duplicate Issue": [[10, "near-duplicate-issue"]], "Non-IID Issue": [[10, "non-iid-issue"]], "Class Imbalance Issue": [[10, "class-imbalance-issue"]], "Image-specific Issues": [[10, "image-specific-issues"]], "Underperforming Group Issue": [[10, "underperforming-group-issue"]], "Null Issue": [[10, "null-issue"]], "Data Valuation Issue": [[10, "data-valuation-issue"]], "Optional Issue Parameters": [[10, "optional-issue-parameters"]], "Label Issue Parameters": [[10, "label-issue-parameters"]], "Outlier Issue Parameters": [[10, "outlier-issue-parameters"]], "Duplicate Issue Parameters": [[10, "duplicate-issue-parameters"]], "Non-IID Issue Parameters": [[10, "non-iid-issue-parameters"]], "Imbalance Issue Parameters": [[10, "imbalance-issue-parameters"]], "Underperforming Group Issue Parameters": [[10, "underperforming-group-issue-parameters"]], "Null Issue Parameters": [[10, "null-issue-parameters"]], "Data Valuation Issue Parameters": [[10, "data-valuation-issue-parameters"]], "Image Issue Parameters": [[10, "image-issue-parameters"]], "Getting Started": [[11, "getting-started"]], "Guides": [[11, "guides"]], "API Reference": [[11, "api-reference"]], "data": [[12, "module-cleanlab.datalab.internal.data"]], "data_issues": [[13, "module-cleanlab.datalab.internal.data_issues"]], "factory": [[14, "module-cleanlab.datalab.internal.issue_manager_factory"]], "internal": [[15, "internal"], [44, "internal"]], "issue_finder": [[16, "issue-finder"]], "duplicate": [[19, "module-cleanlab.datalab.internal.issue_manager.duplicate"]], "imbalance": [[20, "module-cleanlab.datalab.internal.issue_manager.imbalance"]], "issue_manager": [[21, "issue-manager"], [22, "module-cleanlab.datalab.internal.issue_manager.issue_manager"]], "Registered issue managers": [[21, "registered-issue-managers"]], "ML task-specific issue managers": [[21, "ml-task-specific-issue-managers"]], "label": [[23, "module-cleanlab.datalab.internal.issue_manager.label"], [25, "module-cleanlab.datalab.internal.issue_manager.multilabel.label"], [30, "module-cleanlab.datalab.internal.issue_manager.regression.label"]], "multilabel": [[24, "multilabel"]], "noniid": [[26, "module-cleanlab.datalab.internal.issue_manager.noniid"]], "null": [[27, "null"]], "outlier": [[28, "module-cleanlab.datalab.internal.issue_manager.outlier"], [50, "module-cleanlab.internal.outlier"], [66, "module-cleanlab.outlier"]], "regression": [[29, "regression"], [68, "regression"]], "Priority Order for finding issues:": [[30, null]], "underperforming_group": [[31, "underperforming-group"]], "model_outputs": [[32, "module-cleanlab.datalab.internal.model_outputs"]], "report": [[33, "report"]], "task": [[34, "task"]], "dataset": [[36, "module-cleanlab.dataset"], [58, "module-cleanlab.multilabel_classification.dataset"]], "cifar_cnn": [[37, "module-cleanlab.experimental.cifar_cnn"]], "coteaching": [[38, "module-cleanlab.experimental.coteaching"]], "experimental": [[39, "experimental"]], "label_issues_batched": [[40, "module-cleanlab.experimental.label_issues_batched"]], "mnist_pytorch": [[41, "module-cleanlab.experimental.mnist_pytorch"]], "span_classification": [[42, "module-cleanlab.experimental.span_classification"]], "filter": [[43, "module-cleanlab.filter"], [59, "module-cleanlab.multilabel_classification.filter"], [62, "filter"], [71, "filter"], [75, "module-cleanlab.token_classification.filter"]], "label_quality_utils": [[45, "module-cleanlab.internal.label_quality_utils"]], "latent_algebra": [[46, "module-cleanlab.internal.latent_algebra"]], "multiannotator_utils": [[47, "module-cleanlab.internal.multiannotator_utils"]], "multilabel_scorer": [[48, "module-cleanlab.internal.multilabel_scorer"]], "multilabel_utils": [[49, "module-cleanlab.internal.multilabel_utils"]], "token_classification_utils": [[51, "module-cleanlab.internal.token_classification_utils"]], "util": [[52, "module-cleanlab.internal.util"]], "validation": [[53, "module-cleanlab.internal.validation"]], "fasttext": [[54, "fasttext"]], "models": [[55, "models"]], "keras": [[56, "module-cleanlab.models.keras"]], "multiannotator": [[57, "module-cleanlab.multiannotator"]], "multilabel_classification": [[60, "multilabel-classification"]], "rank": [[61, "module-cleanlab.multilabel_classification.rank"], [64, "module-cleanlab.object_detection.rank"], [67, "module-cleanlab.rank"], [73, "module-cleanlab.segmentation.rank"], [77, "module-cleanlab.token_classification.rank"]], "object_detection": [[63, "object-detection"]], "summary": [[65, "summary"], [74, "module-cleanlab.segmentation.summary"], [78, "module-cleanlab.token_classification.summary"]], "regression.learn": [[69, "module-cleanlab.regression.learn"]], "regression.rank": [[70, "module-cleanlab.regression.rank"]], "segmentation": [[72, "segmentation"]], "token_classification": [[76, "token-classification"]], "cleanlab open-source documentation": [[79, "cleanlab-open-source-documentation"]], "Quickstart": [[79, "quickstart"]], "1. Install cleanlab": [[79, "install-cleanlab"]], "2. Find common issues in your data": [[79, "find-common-issues-in-your-data"]], "3. Handle label errors and train robust models with noisy labels": [[79, "handle-label-errors-and-train-robust-models-with-noisy-labels"]], "4. Dataset curation: fix dataset-level issues": [[79, "dataset-curation-fix-dataset-level-issues"]], "5. Improve your data via many other techniques": [[79, "improve-your-data-via-many-other-techniques"]], "Contributing": [[79, "contributing"]], "Easy Mode": [[79, "easy-mode"], [87, "Easy-Mode"], [89, "Easy-Mode"], [90, "Easy-Mode"]], "How to migrate to versions >= 2.0.0 from pre 1.0.1": [[80, "how-to-migrate-to-versions-2-0-0-from-pre-1-0-1"]], "Function and class name changes": [[80, "function-and-class-name-changes"]], "Module name changes": [[80, "module-name-changes"]], "New modules": [[80, "new-modules"]], "Removed modules": [[80, "removed-modules"]], "Common argument and variable name changes": [[80, "common-argument-and-variable-name-changes"]], "CleanLearning Tutorials": [[81, "cleanlearning-tutorials"]], "Classification with Tabular Data using Scikit-Learn and Cleanlab": [[82, "Classification-with-Tabular-Data-using-Scikit-Learn-and-Cleanlab"]], "1. Install required dependencies": [[82, "1.-Install-required-dependencies"], [83, "1.-Install-required-dependencies"], [89, "1.-Install-required-dependencies"], [90, "1.-Install-required-dependencies"], [100, "1.-Install-required-dependencies"]], "2. Load and process the data": [[82, "2.-Load-and-process-the-data"], [89, "2.-Load-and-process-the-data"], [100, "2.-Load-and-process-the-data"]], "3. Select a classification model and compute out-of-sample predicted probabilities": [[82, "3.-Select-a-classification-model-and-compute-out-of-sample-predicted-probabilities"], [89, "3.-Select-a-classification-model-and-compute-out-of-sample-predicted-probabilities"]], "4. Use cleanlab to find label issues": [[82, "4.-Use-cleanlab-to-find-label-issues"]], "5. Train a more robust model from noisy labels": [[82, "5.-Train-a-more-robust-model-from-noisy-labels"]], "Text Classification with Noisy Labels": [[83, "Text-Classification-with-Noisy-Labels"]], "2. Load and format the text dataset": [[83, "2.-Load-and-format-the-text-dataset"], [90, "2.-Load-and-format-the-text-dataset"]], "3. Define a classification model and use cleanlab to find potential label errors": [[83, "3.-Define-a-classification-model-and-use-cleanlab-to-find-potential-label-errors"]], "4. Train a more robust model from noisy labels": [[83, "4.-Train-a-more-robust-model-from-noisy-labels"], [100, "4.-Train-a-more-robust-model-from-noisy-labels"]], "Audio Classification with SpeechBrain and Cleanlab": [[84, "Audio-Classification-with-SpeechBrain-and-Cleanlab"]], "1. Install dependencies and import them": [[84, "1.-Install-dependencies-and-import-them"]], "2. Load the data": [[84, "2.-Load-the-data"]], "3. Use pre-trained SpeechBrain model to featurize audio": [[84, "3.-Use-pre-trained-SpeechBrain-model-to-featurize-audio"]], "4. Fit linear model and compute out-of-sample predicted probabilities": [[84, "4.-Fit-linear-model-and-compute-out-of-sample-predicted-probabilities"]], "5. Use cleanlab to find label issues": [[84, "5.-Use-cleanlab-to-find-label-issues"], [89, "5.-Use-cleanlab-to-find-label-issues"]], "Datalab: Advanced workflows to audit your data": [[85, "Datalab:-Advanced-workflows-to-audit-your-data"]], "Install and import required dependencies": [[85, "Install-and-import-required-dependencies"]], "Create and load the data": [[85, "Create-and-load-the-data"]], "Get out-of-sample predicted probabilities from a classifier": [[85, "Get-out-of-sample-predicted-probabilities-from-a-classifier"]], "Instantiate Datalab object": [[85, "Instantiate-Datalab-object"]], "Functionality 1: Incremental issue search": [[85, "Functionality-1:-Incremental-issue-search"]], "Functionality 2: Specifying nondefault arguments": [[85, "Functionality-2:-Specifying-nondefault-arguments"]], "Functionality 3: Save and load Datalab objects": [[85, "Functionality-3:-Save-and-load-Datalab-objects"]], "Functionality 4: Adding a custom IssueManager": [[85, "Functionality-4:-Adding-a-custom-IssueManager"]], "Datalab: A unified audit to detect all kinds of issues in data and labels": [[86, "Datalab:-A-unified-audit-to-detect-all-kinds-of-issues-in-data-and-labels"]], "1. Install and import required dependencies": [[86, "1.-Install-and-import-required-dependencies"], [87, "1.-Install-and-import-required-dependencies"], [95, "1.-Install-and-import-required-dependencies"]], "2. Create and load the data (can skip these details)": [[86, "2.-Create-and-load-the-data-(can-skip-these-details)"]], "3. Get out-of-sample predicted probabilities from a classifier": [[86, "3.-Get-out-of-sample-predicted-probabilities-from-a-classifier"]], "4. Use Datalab to find issues in the dataset": [[86, "4.-Use-Datalab-to-find-issues-in-the-dataset"]], "5. Learn more about the issues in your dataset": [[86, "5.-Learn-more-about-the-issues-in-your-dataset"]], "Get additional information": [[86, "Get-additional-information"]], "Near duplicate issues": [[86, "Near-duplicate-issues"], [87, "Near-duplicate-issues"]], "Image Classification with PyTorch and Cleanlab": [[87, "Image-Classification-with-PyTorch-and-Cleanlab"]], "2. Fetch and normalize the Fashion-MNIST dataset": [[87, "2.-Fetch-and-normalize-the-Fashion-MNIST-dataset"]], "3. Define a classification model": [[87, "3.-Define-a-classification-model"]], "4. Prepare the dataset for K-fold cross-validation": [[87, "4.-Prepare-the-dataset-for-K-fold-cross-validation"]], "5. Compute out-of-sample predicted probabilities and feature embeddings": [[87, "5.-Compute-out-of-sample-predicted-probabilities-and-feature-embeddings"]], "7. Use cleanlab to find issues": [[87, "7.-Use-cleanlab-to-find-issues"]], "View report": [[87, "View-report"]], "Label issues": [[87, "Label-issues"], [89, "Label-issues"], [90, "Label-issues"]], "View most likely examples with label errors": [[87, "View-most-likely-examples-with-label-errors"]], "Outlier issues": [[87, "Outlier-issues"], [89, "Outlier-issues"], [90, "Outlier-issues"]], "View most severe outliers": [[87, "View-most-severe-outliers"]], "View sets of near duplicate images": [[87, "View-sets-of-near-duplicate-images"]], "Dark images": [[87, "Dark-images"]], "View top examples of dark images": [[87, "View-top-examples-of-dark-images"]], "Low information images": [[87, "Low-information-images"]], "Datalab Tutorials": [[88, "datalab-tutorials"]], "Detecting Issues in Tabular Data\u00a0(Numeric/Categorical columns) with Datalab": [[89, "Detecting-Issues-in-Tabular-Data\u00a0(Numeric/Categorical-columns)-with-Datalab"]], "4. Construct K nearest neighbours graph": [[89, "4.-Construct-K-nearest-neighbours-graph"]], "Near-duplicate issues": [[89, "Near-duplicate-issues"], [90, "Near-duplicate-issues"]], "Detecting Issues in a Text Dataset with Datalab": [[90, "Detecting-Issues-in-a-Text-Dataset-with-Datalab"]], "3. Define a classification model and compute out-of-sample predicted probabilities": [[90, "3.-Define-a-classification-model-and-compute-out-of-sample-predicted-probabilities"]], "4. Use cleanlab to find issues in your dataset": [[90, "4.-Use-cleanlab-to-find-issues-in-your-dataset"]], "Non-IID issues (data drift)": [[90, "Non-IID-issues-(data-drift)"]], "Find Dataset-level Issues for Dataset Curation": [[91, "Find-Dataset-level-Issues-for-Dataset-Curation"]], "Install dependencies and import them": [[91, "Install-dependencies-and-import-them"], [93, "Install-dependencies-and-import-them"]], "Fetch the data (can skip these details)": [[91, "Fetch-the-data-(can-skip-these-details)"]], "Start of tutorial: Evaluate the health of 8 popular datasets": [[91, "Start-of-tutorial:-Evaluate-the-health-of-8-popular-datasets"]], "FAQ": [[92, "FAQ"]], "What data can cleanlab detect issues in?": [[92, "What-data-can-cleanlab-detect-issues-in?"]], "How do I format classification labels for cleanlab?": [[92, "How-do-I-format-classification-labels-for-cleanlab?"]], "How do I infer the correct labels for examples cleanlab has flagged?": [[92, "How-do-I-infer-the-correct-labels-for-examples-cleanlab-has-flagged?"]], "How should I handle label errors in train vs. test data?": [[92, "How-should-I-handle-label-errors-in-train-vs.-test-data?"]], "How can I find label issues in big datasets with limited memory?": [[92, "How-can-I-find-label-issues-in-big-datasets-with-limited-memory?"]], "Why isn\u2019t CleanLearning working for me?": [[92, "Why-isn\u2019t-CleanLearning-working-for-me?"]], "How can I use different models for data cleaning vs. final training in CleanLearning?": [[92, "How-can-I-use-different-models-for-data-cleaning-vs.-final-training-in-CleanLearning?"]], "How do I hyperparameter tune only the final model trained (and not the one finding label issues) in CleanLearning?": [[92, "How-do-I-hyperparameter-tune-only-the-final-model-trained-(and-not-the-one-finding-label-issues)-in-CleanLearning?"]], "Why does regression.learn.CleanLearning take so long?": [[92, "Why-does-regression.learn.CleanLearning-take-so-long?"]], "How do I specify pre-computed data slices/clusters when detecting the Underperforming Group Issue?": [[92, "How-do-I-specify-pre-computed-data-slices/clusters-when-detecting-the-Underperforming-Group-Issue?"]], "How to handle near-duplicate data identified by cleanlab?": [[92, "How-to-handle-near-duplicate-data-identified-by-cleanlab?"]], "What ML models should I run cleanlab with? How do I fix the issues cleanlab has identified?": [[92, "What-ML-models-should-I-run-cleanlab-with?-How-do-I-fix-the-issues-cleanlab-has-identified?"]], "What license is cleanlab open-sourced under?": [[92, "What-license-is-cleanlab-open-sourced-under?"]], "Can\u2019t find an answer to your question?": [[92, "Can't-find-an-answer-to-your-question?"]], "The Workflows of Data-centric AI for Classification with Noisy Labels": [[93, "The-Workflows-of-Data-centric-AI-for-Classification-with-Noisy-Labels"]], "Create the data (can skip these details)": [[93, "Create-the-data-(can-skip-these-details)"]], "Workflow 1: Use Datalab to detect many types of issues": [[93, "Workflow-1:-Use-Datalab-to-detect-many-types-of-issues"]], "Workflow 2: Use CleanLearning for more robust Machine Learning": [[93, "Workflow-2:-Use-CleanLearning-for-more-robust-Machine-Learning"]], "Clean Learning = Machine Learning with cleaned data": [[93, "Clean-Learning-=-Machine-Learning-with-cleaned-data"]], "Workflow 3: Use CleanLearning to find_label_issues in one line of code": [[93, "Workflow-3:-Use-CleanLearning-to-find_label_issues-in-one-line-of-code"]], "Visualize the twenty examples with lowest label quality to see if Cleanlab works.": [[93, "Visualize-the-twenty-examples-with-lowest-label-quality-to-see-if-Cleanlab-works."]], "Workflow 4: Use cleanlab to find dataset-level and class-level issues": [[93, "Workflow-4:-Use-cleanlab-to-find-dataset-level-and-class-level-issues"]], "Now, let\u2019s see what happens if we merge classes \u201cseafoam green\u201d and \u201cyellow\u201d": [[93, "Now,-let's-see-what-happens-if-we-merge-classes-%22seafoam-green%22-and-%22yellow%22"]], "Workflow 5: Clean your test set too if you\u2019re doing ML with noisy labels!": [[93, "Workflow-5:-Clean-your-test-set-too-if-you're-doing-ML-with-noisy-labels!"]], "Workflow 6: One score to rule them all \u2013 use cleanlab\u2019s overall dataset health score": [[93, "Workflow-6:-One-score-to-rule-them-all----use-cleanlab's-overall-dataset-health-score"]], "How accurate is this dataset health score?": [[93, "How-accurate-is-this-dataset-health-score?"]], "Workflow(s) 7: Use count, rank, filter modules directly": [[93, "Workflow(s)-7:-Use-count,-rank,-filter-modules-directly"]], "Workflow 7.1 (count): Fully characterize label noise (noise matrix, joint, prior of true labels, \u2026)": [[93, "Workflow-7.1-(count):-Fully-characterize-label-noise-(noise-matrix,-joint,-prior-of-true-labels,-...)"]], "Use cleanlab to estimate and visualize the joint distribution of label noise and noise matrix of label flipping rates:": [[93, "Use-cleanlab-to-estimate-and-visualize-the-joint-distribution-of-label-noise-and-noise-matrix-of-label-flipping-rates:"]], "Workflow 7.2 (filter): Find label issues for any dataset and any model in one line of code": [[93, "Workflow-7.2-(filter):-Find-label-issues-for-any-dataset-and-any-model-in-one-line-of-code"]], "Again, we can visualize the twenty examples with lowest label quality to see if Cleanlab works.": [[93, "Again,-we-can-visualize-the-twenty-examples-with-lowest-label-quality-to-see-if-Cleanlab-works."]], "Workflow 7.2 supports lots of methods to find_label_issues() via the filter_by parameter.": [[93, "Workflow-7.2-supports-lots-of-methods-to-find_label_issues()-via-the-filter_by-parameter."]], "Workflow 7.3 (rank): Automatically rank every example by a unique label quality score. Find errors using cleanlab.count.num_label_issues as a threshold.": [[93, "Workflow-7.3-(rank):-Automatically-rank-every-example-by-a-unique-label-quality-score.-Find-errors-using-cleanlab.count.num_label_issues-as-a-threshold."]], "Again, we can visualize the label issues found to see if Cleanlab works.": [[93, "Again,-we-can-visualize-the-label-issues-found-to-see-if-Cleanlab-works."]], "Not sure when to use Workflow 7.2 or 7.3 to find label issues?": [[93, "Not-sure-when-to-use-Workflow-7.2-or-7.3-to-find-label-issues?"]], "Workflow 8: Ensembling label quality scores from multiple predictors": [[93, "Workflow-8:-Ensembling-label-quality-scores-from-multiple-predictors"]], "Tutorials": [[94, "tutorials"]], "Estimate Consensus and Annotator Quality for Data Labeled by Multiple Annotators": [[95, "Estimate-Consensus-and-Annotator-Quality-for-Data-Labeled-by-Multiple-Annotators"]], "2. Create the data (can skip these details)": [[95, "2.-Create-the-data-(can-skip-these-details)"]], "3. Get initial consensus labels via majority vote and compute out-of-sample predicted probabilities": [[95, "3.-Get-initial-consensus-labels-via-majority-vote-and-compute-out-of-sample-predicted-probabilities"]], "4. Use cleanlab to get better consensus labels and other statistics": [[95, "4.-Use-cleanlab-to-get-better-consensus-labels-and-other-statistics"]], "Comparing improved consensus labels": [[95, "Comparing-improved-consensus-labels"]], "Inspecting consensus quality scores to find potential consensus label errors": [[95, "Inspecting-consensus-quality-scores-to-find-potential-consensus-label-errors"]], "5. Retrain model using improved consensus labels": [[95, "5.-Retrain-model-using-improved-consensus-labels"]], "Further improvements": [[95, "Further-improvements"]], "How does cleanlab.multiannotator work?": [[95, "How-does-cleanlab.multiannotator-work?"]], "Find Label Errors in Multi-Label Classification Datasets": [[96, "Find-Label-Errors-in-Multi-Label-Classification-Datasets"]], "1. Install required dependencies and get dataset": [[96, "1.-Install-required-dependencies-and-get-dataset"]], "2. Format data, labels, and model predictions": [[96, "2.-Format-data,-labels,-and-model-predictions"], [97, "2.-Format-data,-labels,-and-model-predictions"]], "3. Use cleanlab to find label issues": [[96, "3.-Use-cleanlab-to-find-label-issues"], [97, "3.-Use-cleanlab-to-find-label-issues"], [101, "3.-Use-cleanlab-to-find-label-issues"], [102, "3.-Use-cleanlab-to-find-label-issues"]], "Label quality scores": [[96, "Label-quality-scores"]], "Data issues beyond mislabeling (outliers, duplicates, drift, \u2026)": [[96, "Data-issues-beyond-mislabeling-(outliers,-duplicates,-drift,-...)"]], "How to format labels given as a one-hot (multi-hot) binary matrix?": [[96, "How-to-format-labels-given-as-a-one-hot-(multi-hot)-binary-matrix?"]], "Estimate label issues without Datalab": [[96, "Estimate-label-issues-without-Datalab"]], "Application to Real Data": [[96, "Application-to-Real-Data"]], "Finding Label Errors in Object Detection Datasets": [[97, "Finding-Label-Errors-in-Object-Detection-Datasets"]], "1. Install required dependencies and download data": [[97, "1.-Install-required-dependencies-and-download-data"], [101, "1.-Install-required-dependencies-and-download-data"], [102, "1.-Install-required-dependencies-and-download-data"]], "Get label quality scores": [[97, "Get-label-quality-scores"], [101, "Get-label-quality-scores"]], "4. Use ObjectLab to visualize label issues": [[97, "4.-Use-ObjectLab-to-visualize-label-issues"]], "Different kinds of label issues identified by ObjectLab": [[97, "Different-kinds-of-label-issues-identified-by-ObjectLab"]], "Other uses of visualize": [[97, "Other-uses-of-visualize"]], "Exploratory data analysis": [[97, "Exploratory-data-analysis"]], "Detect Outliers with Cleanlab and PyTorch Image Models (timm)": [[98, "Detect-Outliers-with-Cleanlab-and-PyTorch-Image-Models-(timm)"]], "1. Install the required dependencies": [[98, "1.-Install-the-required-dependencies"]], "2. Pre-process the Cifar10 dataset": [[98, "2.-Pre-process-the-Cifar10-dataset"]], "Visualize some of the training and test examples": [[98, "Visualize-some-of-the-training-and-test-examples"]], "3. Use cleanlab and feature embeddings to find outliers in the data": [[98, "3.-Use-cleanlab-and-feature-embeddings-to-find-outliers-in-the-data"]], "4. Use cleanlab and pred_probs to find outliers in the data": [[98, "4.-Use-cleanlab-and-pred_probs-to-find-outliers-in-the-data"]], "Computing Out-of-Sample Predicted Probabilities with Cross-Validation": [[99, "computing-out-of-sample-predicted-probabilities-with-cross-validation"]], "Out-of-sample predicted probabilities?": [[99, "out-of-sample-predicted-probabilities"]], "What is K-fold cross-validation?": [[99, "what-is-k-fold-cross-validation"]], "Find Noisy Labels in Regression Datasets": [[100, "Find-Noisy-Labels-in-Regression-Datasets"]], "3. Define a regression model and use cleanlab to find potential label errors": [[100, "3.-Define-a-regression-model-and-use-cleanlab-to-find-potential-label-errors"]], "5. Other ways to find noisy labels in regression datasets": [[100, "5.-Other-ways-to-find-noisy-labels-in-regression-datasets"]], "Find Label Errors in Semantic Segmentation Datasets": [[101, "Find-Label-Errors-in-Semantic-Segmentation-Datasets"]], "2. Get data, labels, and pred_probs": [[101, "2.-Get-data,-labels,-and-pred_probs"], [102, "2.-Get-data,-labels,-and-pred_probs"]], "Visualize top label issues": [[101, "Visualize-top-label-issues"]], "Classes which are commonly mislabeled overall": [[101, "Classes-which-are-commonly-mislabeled-overall"]], "Focusing on one specific class": [[101, "Focusing-on-one-specific-class"]], "Find Label Errors in Token Classification (Text) Datasets": [[102, "Find-Label-Errors-in-Token-Classification-(Text)-Datasets"]], "Most common word-level token mislabels": [[102, "Most-common-word-level-token-mislabels"]], "Find sentences containing a particular mislabeled word": [[102, "Find-sentences-containing-a-particular-mislabeled-word"]], "Sentence label quality score": [[102, "Sentence-label-quality-score"]], "How does cleanlab.token_classification work?": [[102, "How-does-cleanlab.token_classification-work?"]]}, "indexentries": {"cleanlab.benchmarking": [[0, "module-cleanlab.benchmarking"]], "module": [[0, "module-cleanlab.benchmarking"], [1, "module-cleanlab.benchmarking.noise_generation"], [2, "module-cleanlab.classification"], [3, "module-cleanlab.count"], [4, "module-cleanlab.data_valuation"], [5, "module-cleanlab.datalab.datalab"], [11, "module-cleanlab.datalab"], [12, "module-cleanlab.datalab.internal.data"], [13, "module-cleanlab.datalab.internal.data_issues"], [14, "module-cleanlab.datalab.internal.issue_manager_factory"], [15, "module-cleanlab.datalab.internal"], [16, "module-cleanlab.datalab.internal.issue_finder"], [18, "module-cleanlab.datalab.internal.issue_manager.data_valuation"], [19, "module-cleanlab.datalab.internal.issue_manager.duplicate"], [20, "module-cleanlab.datalab.internal.issue_manager.imbalance"], [22, "module-cleanlab.datalab.internal.issue_manager.issue_manager"], [23, "module-cleanlab.datalab.internal.issue_manager.label"], [25, "module-cleanlab.datalab.internal.issue_manager.multilabel.label"], [26, "module-cleanlab.datalab.internal.issue_manager.noniid"], [27, "module-cleanlab.datalab.internal.issue_manager.null"], [28, "module-cleanlab.datalab.internal.issue_manager.outlier"], [30, "module-cleanlab.datalab.internal.issue_manager.regression.label"], [31, "module-cleanlab.datalab.internal.issue_manager.underperforming_group"], [32, "module-cleanlab.datalab.internal.model_outputs"], [33, "module-cleanlab.datalab.internal.report"], [34, "module-cleanlab.datalab.internal.task"], [36, "module-cleanlab.dataset"], [37, "module-cleanlab.experimental.cifar_cnn"], [38, "module-cleanlab.experimental.coteaching"], [39, "module-cleanlab.experimental"], [40, "module-cleanlab.experimental.label_issues_batched"], [41, "module-cleanlab.experimental.mnist_pytorch"], [42, "module-cleanlab.experimental.span_classification"], [43, "module-cleanlab.filter"], [44, "module-cleanlab.internal"], [45, "module-cleanlab.internal.label_quality_utils"], [46, "module-cleanlab.internal.latent_algebra"], [47, "module-cleanlab.internal.multiannotator_utils"], [48, "module-cleanlab.internal.multilabel_scorer"], [49, "module-cleanlab.internal.multilabel_utils"], [50, "module-cleanlab.internal.outlier"], [51, "module-cleanlab.internal.token_classification_utils"], [52, "module-cleanlab.internal.util"], [53, "module-cleanlab.internal.validation"], [55, "module-cleanlab.models"], [56, "module-cleanlab.models.keras"], [57, "module-cleanlab.multiannotator"], [58, "module-cleanlab.multilabel_classification.dataset"], [59, "module-cleanlab.multilabel_classification.filter"], [60, "module-cleanlab.multilabel_classification"], [61, "module-cleanlab.multilabel_classification.rank"], [62, "module-cleanlab.object_detection.filter"], [63, "module-cleanlab.object_detection"], [64, "module-cleanlab.object_detection.rank"], [65, "module-cleanlab.object_detection.summary"], [66, "module-cleanlab.outlier"], [67, "module-cleanlab.rank"], [68, "module-cleanlab.regression"], [69, "module-cleanlab.regression.learn"], [70, "module-cleanlab.regression.rank"], [71, "module-cleanlab.segmentation.filter"], [72, "module-cleanlab.segmentation"], [73, "module-cleanlab.segmentation.rank"], [74, "module-cleanlab.segmentation.summary"], [75, "module-cleanlab.token_classification.filter"], [76, "module-cleanlab.token_classification"], [77, "module-cleanlab.token_classification.rank"], [78, "module-cleanlab.token_classification.summary"]], "cleanlab.benchmarking.noise_generation": [[1, "module-cleanlab.benchmarking.noise_generation"]], "generate_n_rand_probabilities_that_sum_to_m() (in module cleanlab.benchmarking.noise_generation)": [[1, "cleanlab.benchmarking.noise_generation.generate_n_rand_probabilities_that_sum_to_m"]], "generate_noise_matrix_from_trace() (in module cleanlab.benchmarking.noise_generation)": [[1, "cleanlab.benchmarking.noise_generation.generate_noise_matrix_from_trace"]], "generate_noisy_labels() (in module cleanlab.benchmarking.noise_generation)": [[1, "cleanlab.benchmarking.noise_generation.generate_noisy_labels"]], "noise_matrix_is_valid() (in module cleanlab.benchmarking.noise_generation)": [[1, "cleanlab.benchmarking.noise_generation.noise_matrix_is_valid"]], "randomly_distribute_n_balls_into_k_bins() (in module cleanlab.benchmarking.noise_generation)": [[1, "cleanlab.benchmarking.noise_generation.randomly_distribute_N_balls_into_K_bins"]], "cleanlearning (class in cleanlab.classification)": [[2, "cleanlab.classification.CleanLearning"]], "__init_subclass__() (cleanlab.classification.cleanlearning class method)": [[2, "cleanlab.classification.CleanLearning.__init_subclass__"]], "cleanlab.classification": [[2, "module-cleanlab.classification"]], "find_label_issues() (cleanlab.classification.cleanlearning method)": [[2, "cleanlab.classification.CleanLearning.find_label_issues"]], "fit() (cleanlab.classification.cleanlearning method)": [[2, "cleanlab.classification.CleanLearning.fit"]], "get_label_issues() (cleanlab.classification.cleanlearning method)": [[2, "cleanlab.classification.CleanLearning.get_label_issues"]], "get_metadata_routing() (cleanlab.classification.cleanlearning method)": [[2, "cleanlab.classification.CleanLearning.get_metadata_routing"]], "get_params() (cleanlab.classification.cleanlearning method)": [[2, "cleanlab.classification.CleanLearning.get_params"]], "predict() (cleanlab.classification.cleanlearning method)": [[2, "cleanlab.classification.CleanLearning.predict"]], "predict_proba() (cleanlab.classification.cleanlearning method)": [[2, "cleanlab.classification.CleanLearning.predict_proba"]], "save_space() (cleanlab.classification.cleanlearning method)": [[2, "cleanlab.classification.CleanLearning.save_space"]], "score() (cleanlab.classification.cleanlearning method)": [[2, "cleanlab.classification.CleanLearning.score"]], "set_fit_request() (cleanlab.classification.cleanlearning method)": [[2, "cleanlab.classification.CleanLearning.set_fit_request"]], "set_params() (cleanlab.classification.cleanlearning method)": [[2, "cleanlab.classification.CleanLearning.set_params"]], "set_score_request() (cleanlab.classification.cleanlearning method)": [[2, "cleanlab.classification.CleanLearning.set_score_request"]], "calibrate_confident_joint() (in module cleanlab.count)": [[3, "cleanlab.count.calibrate_confident_joint"]], "cleanlab.count": [[3, "module-cleanlab.count"]], "compute_confident_joint() (in module cleanlab.count)": [[3, "cleanlab.count.compute_confident_joint"]], "estimate_confident_joint_and_cv_pred_proba() (in module cleanlab.count)": [[3, "cleanlab.count.estimate_confident_joint_and_cv_pred_proba"]], "estimate_cv_predicted_probabilities() (in module cleanlab.count)": [[3, "cleanlab.count.estimate_cv_predicted_probabilities"]], "estimate_joint() (in module cleanlab.count)": [[3, "cleanlab.count.estimate_joint"]], "estimate_latent() (in module cleanlab.count)": [[3, "cleanlab.count.estimate_latent"]], "estimate_noise_matrices() (in module cleanlab.count)": [[3, "cleanlab.count.estimate_noise_matrices"]], "estimate_py_and_noise_matrices_from_probabilities() (in module cleanlab.count)": [[3, "cleanlab.count.estimate_py_and_noise_matrices_from_probabilities"]], "estimate_py_noise_matrices_and_cv_pred_proba() (in module cleanlab.count)": [[3, "cleanlab.count.estimate_py_noise_matrices_and_cv_pred_proba"]], "get_confident_thresholds() (in module cleanlab.count)": [[3, "cleanlab.count.get_confident_thresholds"]], "num_label_issues() (in module cleanlab.count)": [[3, "cleanlab.count.num_label_issues"]], "cleanlab.data_valuation": [[4, "module-cleanlab.data_valuation"]], "data_shapley_knn() (in module cleanlab.data_valuation)": [[4, "cleanlab.data_valuation.data_shapley_knn"]], "datalab (class in cleanlab.datalab.datalab)": [[5, "cleanlab.datalab.datalab.Datalab"]], "class_names (cleanlab.datalab.datalab.datalab property)": [[5, "cleanlab.datalab.datalab.Datalab.class_names"]], "cleanlab.datalab.datalab": [[5, "module-cleanlab.datalab.datalab"]], "find_issues() (cleanlab.datalab.datalab.datalab method)": [[5, "cleanlab.datalab.datalab.Datalab.find_issues"]], "get_info() (cleanlab.datalab.datalab.datalab method)": [[5, "cleanlab.datalab.datalab.Datalab.get_info"]], "get_issue_summary() (cleanlab.datalab.datalab.datalab method)": [[5, "cleanlab.datalab.datalab.Datalab.get_issue_summary"]], "get_issues() (cleanlab.datalab.datalab.datalab method)": [[5, "cleanlab.datalab.datalab.Datalab.get_issues"]], "has_labels (cleanlab.datalab.datalab.datalab property)": [[5, "cleanlab.datalab.datalab.Datalab.has_labels"]], "info (cleanlab.datalab.datalab.datalab property)": [[5, "cleanlab.datalab.datalab.Datalab.info"]], "issue_summary (cleanlab.datalab.datalab.datalab property)": [[5, "cleanlab.datalab.datalab.Datalab.issue_summary"]], "issues (cleanlab.datalab.datalab.datalab property)": [[5, "cleanlab.datalab.datalab.Datalab.issues"]], "labels (cleanlab.datalab.datalab.datalab property)": [[5, "cleanlab.datalab.datalab.Datalab.labels"]], "list_default_issue_types() (cleanlab.datalab.datalab.datalab method)": [[5, "cleanlab.datalab.datalab.Datalab.list_default_issue_types"]], "list_possible_issue_types() (cleanlab.datalab.datalab.datalab method)": [[5, "cleanlab.datalab.datalab.Datalab.list_possible_issue_types"]], "load() (cleanlab.datalab.datalab.datalab static method)": [[5, "cleanlab.datalab.datalab.Datalab.load"]], "report() (cleanlab.datalab.datalab.datalab method)": [[5, "cleanlab.datalab.datalab.Datalab.report"]], "save() (cleanlab.datalab.datalab.datalab method)": [[5, "cleanlab.datalab.datalab.Datalab.save"]], "cleanlab.datalab": [[11, "module-cleanlab.datalab"]], "data (class in cleanlab.datalab.internal.data)": [[12, "cleanlab.datalab.internal.data.Data"]], "dataformaterror": [[12, "cleanlab.datalab.internal.data.DataFormatError"]], "datasetdicterror": [[12, "cleanlab.datalab.internal.data.DatasetDictError"]], "datasetloaderror": [[12, "cleanlab.datalab.internal.data.DatasetLoadError"]], "label (class in cleanlab.datalab.internal.data)": [[12, "cleanlab.datalab.internal.data.Label"]], "multiclass (class in cleanlab.datalab.internal.data)": [[12, "cleanlab.datalab.internal.data.MultiClass"]], "multilabel (class in cleanlab.datalab.internal.data)": [[12, "cleanlab.datalab.internal.data.MultiLabel"]], "add_note() (cleanlab.datalab.internal.data.dataformaterror method)": [[12, "cleanlab.datalab.internal.data.DataFormatError.add_note"]], "add_note() (cleanlab.datalab.internal.data.datasetdicterror method)": [[12, "cleanlab.datalab.internal.data.DatasetDictError.add_note"]], "add_note() (cleanlab.datalab.internal.data.datasetloaderror method)": [[12, "cleanlab.datalab.internal.data.DatasetLoadError.add_note"]], "args (cleanlab.datalab.internal.data.dataformaterror attribute)": [[12, "cleanlab.datalab.internal.data.DataFormatError.args"]], "args (cleanlab.datalab.internal.data.datasetdicterror attribute)": [[12, "cleanlab.datalab.internal.data.DatasetDictError.args"]], "args (cleanlab.datalab.internal.data.datasetloaderror attribute)": [[12, "cleanlab.datalab.internal.data.DatasetLoadError.args"]], "class_names (cleanlab.datalab.internal.data.data property)": [[12, "cleanlab.datalab.internal.data.Data.class_names"]], "class_names (cleanlab.datalab.internal.data.label property)": [[12, "cleanlab.datalab.internal.data.Label.class_names"]], "class_names (cleanlab.datalab.internal.data.multiclass property)": [[12, "cleanlab.datalab.internal.data.MultiClass.class_names"]], "class_names (cleanlab.datalab.internal.data.multilabel property)": [[12, "cleanlab.datalab.internal.data.MultiLabel.class_names"]], "cleanlab.datalab.internal.data": [[12, "module-cleanlab.datalab.internal.data"]], "has_labels (cleanlab.datalab.internal.data.data property)": [[12, "cleanlab.datalab.internal.data.Data.has_labels"]], "is_available (cleanlab.datalab.internal.data.label property)": [[12, "cleanlab.datalab.internal.data.Label.is_available"]], "is_available (cleanlab.datalab.internal.data.multiclass property)": [[12, "cleanlab.datalab.internal.data.MultiClass.is_available"]], "is_available (cleanlab.datalab.internal.data.multilabel property)": [[12, "cleanlab.datalab.internal.data.MultiLabel.is_available"]], "with_traceback() (cleanlab.datalab.internal.data.dataformaterror method)": [[12, "cleanlab.datalab.internal.data.DataFormatError.with_traceback"]], "with_traceback() (cleanlab.datalab.internal.data.datasetdicterror method)": [[12, "cleanlab.datalab.internal.data.DatasetDictError.with_traceback"]], "with_traceback() (cleanlab.datalab.internal.data.datasetloaderror method)": [[12, "cleanlab.datalab.internal.data.DatasetLoadError.with_traceback"]], "dataissues (class in cleanlab.datalab.internal.data_issues)": [[13, "cleanlab.datalab.internal.data_issues.DataIssues"]], "cleanlab.datalab.internal.data_issues": [[13, "module-cleanlab.datalab.internal.data_issues"]], "collect_issues_from_imagelab() (cleanlab.datalab.internal.data_issues.dataissues method)": [[13, "cleanlab.datalab.internal.data_issues.DataIssues.collect_issues_from_imagelab"]], "collect_issues_from_issue_manager() (cleanlab.datalab.internal.data_issues.dataissues method)": [[13, "cleanlab.datalab.internal.data_issues.DataIssues.collect_issues_from_issue_manager"]], "collect_statistics() (cleanlab.datalab.internal.data_issues.dataissues method)": [[13, "cleanlab.datalab.internal.data_issues.DataIssues.collect_statistics"]], "get_data_statistics() (in module cleanlab.datalab.internal.data_issues)": [[13, "cleanlab.datalab.internal.data_issues.get_data_statistics"]], "get_info() (cleanlab.datalab.internal.data_issues.dataissues method)": [[13, "cleanlab.datalab.internal.data_issues.DataIssues.get_info"]], "get_issue_summary() (cleanlab.datalab.internal.data_issues.dataissues method)": [[13, "cleanlab.datalab.internal.data_issues.DataIssues.get_issue_summary"]], "get_issues() (cleanlab.datalab.internal.data_issues.dataissues method)": [[13, "cleanlab.datalab.internal.data_issues.DataIssues.get_issues"]], "info (cleanlab.datalab.internal.data_issues.dataissues attribute)": [[13, "cleanlab.datalab.internal.data_issues.DataIssues.info"]], "issue_summary (cleanlab.datalab.internal.data_issues.dataissues attribute)": [[13, "cleanlab.datalab.internal.data_issues.DataIssues.issue_summary"]], "issues (cleanlab.datalab.internal.data_issues.dataissues attribute)": [[13, "cleanlab.datalab.internal.data_issues.DataIssues.issues"]], "set_health_score() (cleanlab.datalab.internal.data_issues.dataissues method)": [[13, "cleanlab.datalab.internal.data_issues.DataIssues.set_health_score"]], "statistics (cleanlab.datalab.internal.data_issues.dataissues property)": [[13, "cleanlab.datalab.internal.data_issues.DataIssues.statistics"]], "registry (in module cleanlab.datalab.internal.issue_manager_factory)": [[14, "cleanlab.datalab.internal.issue_manager_factory.REGISTRY"]], "cleanlab.datalab.internal.issue_manager_factory": [[14, "module-cleanlab.datalab.internal.issue_manager_factory"]], "list_default_issue_types() (in module cleanlab.datalab.internal.issue_manager_factory)": [[14, "cleanlab.datalab.internal.issue_manager_factory.list_default_issue_types"]], "list_possible_issue_types() (in module cleanlab.datalab.internal.issue_manager_factory)": [[14, "cleanlab.datalab.internal.issue_manager_factory.list_possible_issue_types"]], "register() (in module cleanlab.datalab.internal.issue_manager_factory)": [[14, "cleanlab.datalab.internal.issue_manager_factory.register"]], "cleanlab.datalab.internal": [[15, "module-cleanlab.datalab.internal"]], "issuefinder (class in cleanlab.datalab.internal.issue_finder)": [[16, "cleanlab.datalab.internal.issue_finder.IssueFinder"]], "cleanlab.datalab.internal.issue_finder": [[16, "module-cleanlab.datalab.internal.issue_finder"]], "find_issues() (cleanlab.datalab.internal.issue_finder.issuefinder method)": [[16, "cleanlab.datalab.internal.issue_finder.IssueFinder.find_issues"]], "get_available_issue_types() (cleanlab.datalab.internal.issue_finder.issuefinder method)": [[16, "cleanlab.datalab.internal.issue_finder.IssueFinder.get_available_issue_types"]], "default_threshold (cleanlab.datalab.internal.issue_manager.data_valuation.datavaluationissuemanager attribute)": [[18, "cleanlab.datalab.internal.issue_manager.data_valuation.DataValuationIssueManager.DEFAULT_THRESHOLD"]], "datavaluationissuemanager (class in cleanlab.datalab.internal.issue_manager.data_valuation)": [[18, "cleanlab.datalab.internal.issue_manager.data_valuation.DataValuationIssueManager"]], "cleanlab.datalab.internal.issue_manager.data_valuation": [[18, "module-cleanlab.datalab.internal.issue_manager.data_valuation"]], "collect_info() (cleanlab.datalab.internal.issue_manager.data_valuation.datavaluationissuemanager method)": [[18, "cleanlab.datalab.internal.issue_manager.data_valuation.DataValuationIssueManager.collect_info"]], "description (cleanlab.datalab.internal.issue_manager.data_valuation.datavaluationissuemanager attribute)": [[18, "cleanlab.datalab.internal.issue_manager.data_valuation.DataValuationIssueManager.description"]], "find_issues() (cleanlab.datalab.internal.issue_manager.data_valuation.datavaluationissuemanager method)": [[18, "cleanlab.datalab.internal.issue_manager.data_valuation.DataValuationIssueManager.find_issues"]], "info (cleanlab.datalab.internal.issue_manager.data_valuation.datavaluationissuemanager attribute)": [[18, "cleanlab.datalab.internal.issue_manager.data_valuation.DataValuationIssueManager.info"]], "issue_name (cleanlab.datalab.internal.issue_manager.data_valuation.datavaluationissuemanager attribute)": [[18, "cleanlab.datalab.internal.issue_manager.data_valuation.DataValuationIssueManager.issue_name"]], "issue_score_key (cleanlab.datalab.internal.issue_manager.data_valuation.datavaluationissuemanager attribute)": [[18, "cleanlab.datalab.internal.issue_manager.data_valuation.DataValuationIssueManager.issue_score_key"]], "issues (cleanlab.datalab.internal.issue_manager.data_valuation.datavaluationissuemanager attribute)": [[18, "cleanlab.datalab.internal.issue_manager.data_valuation.DataValuationIssueManager.issues"]], "make_summary() (cleanlab.datalab.internal.issue_manager.data_valuation.datavaluationissuemanager class method)": [[18, "cleanlab.datalab.internal.issue_manager.data_valuation.DataValuationIssueManager.make_summary"]], "report() (cleanlab.datalab.internal.issue_manager.data_valuation.datavaluationissuemanager class method)": [[18, "cleanlab.datalab.internal.issue_manager.data_valuation.DataValuationIssueManager.report"]], "summary (cleanlab.datalab.internal.issue_manager.data_valuation.datavaluationissuemanager attribute)": [[18, "cleanlab.datalab.internal.issue_manager.data_valuation.DataValuationIssueManager.summary"]], "verbosity_levels (cleanlab.datalab.internal.issue_manager.data_valuation.datavaluationissuemanager attribute)": [[18, "cleanlab.datalab.internal.issue_manager.data_valuation.DataValuationIssueManager.verbosity_levels"]], "nearduplicateissuemanager (class in cleanlab.datalab.internal.issue_manager.duplicate)": [[19, "cleanlab.datalab.internal.issue_manager.duplicate.NearDuplicateIssueManager"]], "cleanlab.datalab.internal.issue_manager.duplicate": [[19, "module-cleanlab.datalab.internal.issue_manager.duplicate"]], "collect_info() (cleanlab.datalab.internal.issue_manager.duplicate.nearduplicateissuemanager method)": [[19, "cleanlab.datalab.internal.issue_manager.duplicate.NearDuplicateIssueManager.collect_info"]], "description (cleanlab.datalab.internal.issue_manager.duplicate.nearduplicateissuemanager attribute)": [[19, "cleanlab.datalab.internal.issue_manager.duplicate.NearDuplicateIssueManager.description"]], "find_issues() (cleanlab.datalab.internal.issue_manager.duplicate.nearduplicateissuemanager method)": [[19, "cleanlab.datalab.internal.issue_manager.duplicate.NearDuplicateIssueManager.find_issues"]], "info (cleanlab.datalab.internal.issue_manager.duplicate.nearduplicateissuemanager attribute)": [[19, "cleanlab.datalab.internal.issue_manager.duplicate.NearDuplicateIssueManager.info"]], "issue_name (cleanlab.datalab.internal.issue_manager.duplicate.nearduplicateissuemanager attribute)": [[19, "cleanlab.datalab.internal.issue_manager.duplicate.NearDuplicateIssueManager.issue_name"]], "issue_score_key (cleanlab.datalab.internal.issue_manager.duplicate.nearduplicateissuemanager attribute)": [[19, "cleanlab.datalab.internal.issue_manager.duplicate.NearDuplicateIssueManager.issue_score_key"]], "issues (cleanlab.datalab.internal.issue_manager.duplicate.nearduplicateissuemanager attribute)": [[19, "cleanlab.datalab.internal.issue_manager.duplicate.NearDuplicateIssueManager.issues"]], "make_summary() (cleanlab.datalab.internal.issue_manager.duplicate.nearduplicateissuemanager class method)": [[19, "cleanlab.datalab.internal.issue_manager.duplicate.NearDuplicateIssueManager.make_summary"]], "near_duplicate_sets (cleanlab.datalab.internal.issue_manager.duplicate.nearduplicateissuemanager attribute)": [[19, "cleanlab.datalab.internal.issue_manager.duplicate.NearDuplicateIssueManager.near_duplicate_sets"]], "report() (cleanlab.datalab.internal.issue_manager.duplicate.nearduplicateissuemanager class method)": [[19, "cleanlab.datalab.internal.issue_manager.duplicate.NearDuplicateIssueManager.report"]], "summary (cleanlab.datalab.internal.issue_manager.duplicate.nearduplicateissuemanager attribute)": [[19, "cleanlab.datalab.internal.issue_manager.duplicate.NearDuplicateIssueManager.summary"]], "verbosity_levels (cleanlab.datalab.internal.issue_manager.duplicate.nearduplicateissuemanager attribute)": [[19, "cleanlab.datalab.internal.issue_manager.duplicate.NearDuplicateIssueManager.verbosity_levels"]], "classimbalanceissuemanager (class in cleanlab.datalab.internal.issue_manager.imbalance)": [[20, "cleanlab.datalab.internal.issue_manager.imbalance.ClassImbalanceIssueManager"]], "cleanlab.datalab.internal.issue_manager.imbalance": [[20, "module-cleanlab.datalab.internal.issue_manager.imbalance"]], "collect_info() (cleanlab.datalab.internal.issue_manager.imbalance.classimbalanceissuemanager method)": [[20, "cleanlab.datalab.internal.issue_manager.imbalance.ClassImbalanceIssueManager.collect_info"]], "description (cleanlab.datalab.internal.issue_manager.imbalance.classimbalanceissuemanager attribute)": [[20, "cleanlab.datalab.internal.issue_manager.imbalance.ClassImbalanceIssueManager.description"]], "find_issues() (cleanlab.datalab.internal.issue_manager.imbalance.classimbalanceissuemanager method)": [[20, "cleanlab.datalab.internal.issue_manager.imbalance.ClassImbalanceIssueManager.find_issues"]], "info (cleanlab.datalab.internal.issue_manager.imbalance.classimbalanceissuemanager attribute)": [[20, "cleanlab.datalab.internal.issue_manager.imbalance.ClassImbalanceIssueManager.info"]], "issue_name (cleanlab.datalab.internal.issue_manager.imbalance.classimbalanceissuemanager attribute)": [[20, "cleanlab.datalab.internal.issue_manager.imbalance.ClassImbalanceIssueManager.issue_name"]], "issue_score_key (cleanlab.datalab.internal.issue_manager.imbalance.classimbalanceissuemanager attribute)": [[20, "cleanlab.datalab.internal.issue_manager.imbalance.ClassImbalanceIssueManager.issue_score_key"]], "issues (cleanlab.datalab.internal.issue_manager.imbalance.classimbalanceissuemanager attribute)": [[20, "cleanlab.datalab.internal.issue_manager.imbalance.ClassImbalanceIssueManager.issues"]], "make_summary() (cleanlab.datalab.internal.issue_manager.imbalance.classimbalanceissuemanager class method)": [[20, "cleanlab.datalab.internal.issue_manager.imbalance.ClassImbalanceIssueManager.make_summary"]], "report() (cleanlab.datalab.internal.issue_manager.imbalance.classimbalanceissuemanager class method)": [[20, "cleanlab.datalab.internal.issue_manager.imbalance.ClassImbalanceIssueManager.report"]], "summary (cleanlab.datalab.internal.issue_manager.imbalance.classimbalanceissuemanager attribute)": [[20, "cleanlab.datalab.internal.issue_manager.imbalance.ClassImbalanceIssueManager.summary"]], "verbosity_levels (cleanlab.datalab.internal.issue_manager.imbalance.classimbalanceissuemanager attribute)": [[20, "cleanlab.datalab.internal.issue_manager.imbalance.ClassImbalanceIssueManager.verbosity_levels"]], "issuemanager (class in cleanlab.datalab.internal.issue_manager.issue_manager)": [[22, "cleanlab.datalab.internal.issue_manager.issue_manager.IssueManager"]], "cleanlab.datalab.internal.issue_manager.issue_manager": [[22, "module-cleanlab.datalab.internal.issue_manager.issue_manager"]], "collect_info() (cleanlab.datalab.internal.issue_manager.issue_manager.issuemanager method)": [[22, "cleanlab.datalab.internal.issue_manager.issue_manager.IssueManager.collect_info"]], "description (cleanlab.datalab.internal.issue_manager.issue_manager.issuemanager attribute)": [[22, "cleanlab.datalab.internal.issue_manager.issue_manager.IssueManager.description"]], "find_issues() (cleanlab.datalab.internal.issue_manager.issue_manager.issuemanager method)": [[22, "cleanlab.datalab.internal.issue_manager.issue_manager.IssueManager.find_issues"]], "info (cleanlab.datalab.internal.issue_manager.issue_manager.issuemanager attribute)": [[22, "cleanlab.datalab.internal.issue_manager.issue_manager.IssueManager.info"]], "issue_name (cleanlab.datalab.internal.issue_manager.issue_manager.issuemanager attribute)": [[22, "cleanlab.datalab.internal.issue_manager.issue_manager.IssueManager.issue_name"]], "issue_score_key (cleanlab.datalab.internal.issue_manager.issue_manager.issuemanager attribute)": [[22, "cleanlab.datalab.internal.issue_manager.issue_manager.IssueManager.issue_score_key"]], "issues (cleanlab.datalab.internal.issue_manager.issue_manager.issuemanager attribute)": [[22, "cleanlab.datalab.internal.issue_manager.issue_manager.IssueManager.issues"]], "make_summary() (cleanlab.datalab.internal.issue_manager.issue_manager.issuemanager class method)": [[22, "cleanlab.datalab.internal.issue_manager.issue_manager.IssueManager.make_summary"]], "report() (cleanlab.datalab.internal.issue_manager.issue_manager.issuemanager class method)": [[22, "cleanlab.datalab.internal.issue_manager.issue_manager.IssueManager.report"]], "summary (cleanlab.datalab.internal.issue_manager.issue_manager.issuemanager attribute)": [[22, "cleanlab.datalab.internal.issue_manager.issue_manager.IssueManager.summary"]], "verbosity_levels (cleanlab.datalab.internal.issue_manager.issue_manager.issuemanager attribute)": [[22, "cleanlab.datalab.internal.issue_manager.issue_manager.IssueManager.verbosity_levels"]], "labelissuemanager (class in cleanlab.datalab.internal.issue_manager.label)": [[23, "cleanlab.datalab.internal.issue_manager.label.LabelIssueManager"]], "cleanlab.datalab.internal.issue_manager.label": [[23, "module-cleanlab.datalab.internal.issue_manager.label"]], "collect_info() (cleanlab.datalab.internal.issue_manager.label.labelissuemanager method)": [[23, "cleanlab.datalab.internal.issue_manager.label.LabelIssueManager.collect_info"]], "description (cleanlab.datalab.internal.issue_manager.label.labelissuemanager attribute)": [[23, "cleanlab.datalab.internal.issue_manager.label.LabelIssueManager.description"]], "find_issues() (cleanlab.datalab.internal.issue_manager.label.labelissuemanager method)": [[23, "cleanlab.datalab.internal.issue_manager.label.LabelIssueManager.find_issues"]], "get_health_summary() (cleanlab.datalab.internal.issue_manager.label.labelissuemanager method)": [[23, "cleanlab.datalab.internal.issue_manager.label.LabelIssueManager.get_health_summary"]], "health_summary_parameters (cleanlab.datalab.internal.issue_manager.label.labelissuemanager attribute)": [[23, "cleanlab.datalab.internal.issue_manager.label.LabelIssueManager.health_summary_parameters"]], "info (cleanlab.datalab.internal.issue_manager.label.labelissuemanager attribute)": [[23, "cleanlab.datalab.internal.issue_manager.label.LabelIssueManager.info"]], "issue_name (cleanlab.datalab.internal.issue_manager.label.labelissuemanager attribute)": [[23, "cleanlab.datalab.internal.issue_manager.label.LabelIssueManager.issue_name"]], "issue_score_key (cleanlab.datalab.internal.issue_manager.label.labelissuemanager attribute)": [[23, "cleanlab.datalab.internal.issue_manager.label.LabelIssueManager.issue_score_key"]], "issues (cleanlab.datalab.internal.issue_manager.label.labelissuemanager attribute)": [[23, "cleanlab.datalab.internal.issue_manager.label.LabelIssueManager.issues"]], "make_summary() (cleanlab.datalab.internal.issue_manager.label.labelissuemanager class method)": [[23, "cleanlab.datalab.internal.issue_manager.label.LabelIssueManager.make_summary"]], "report() (cleanlab.datalab.internal.issue_manager.label.labelissuemanager class method)": [[23, "cleanlab.datalab.internal.issue_manager.label.LabelIssueManager.report"]], "summary (cleanlab.datalab.internal.issue_manager.label.labelissuemanager attribute)": [[23, "cleanlab.datalab.internal.issue_manager.label.LabelIssueManager.summary"]], "verbosity_levels (cleanlab.datalab.internal.issue_manager.label.labelissuemanager attribute)": [[23, "cleanlab.datalab.internal.issue_manager.label.LabelIssueManager.verbosity_levels"]], "multilabelissuemanager (class in cleanlab.datalab.internal.issue_manager.multilabel.label)": [[25, "cleanlab.datalab.internal.issue_manager.multilabel.label.MultilabelIssueManager"]], "cleanlab.datalab.internal.issue_manager.multilabel.label": [[25, "module-cleanlab.datalab.internal.issue_manager.multilabel.label"]], "collect_info() (cleanlab.datalab.internal.issue_manager.multilabel.label.multilabelissuemanager method)": [[25, "cleanlab.datalab.internal.issue_manager.multilabel.label.MultilabelIssueManager.collect_info"]], "description (cleanlab.datalab.internal.issue_manager.multilabel.label.multilabelissuemanager attribute)": [[25, "cleanlab.datalab.internal.issue_manager.multilabel.label.MultilabelIssueManager.description"]], "find_issues() (cleanlab.datalab.internal.issue_manager.multilabel.label.multilabelissuemanager method)": [[25, "cleanlab.datalab.internal.issue_manager.multilabel.label.MultilabelIssueManager.find_issues"]], "info (cleanlab.datalab.internal.issue_manager.multilabel.label.multilabelissuemanager attribute)": [[25, "cleanlab.datalab.internal.issue_manager.multilabel.label.MultilabelIssueManager.info"]], "issue_name (cleanlab.datalab.internal.issue_manager.multilabel.label.multilabelissuemanager attribute)": [[25, "cleanlab.datalab.internal.issue_manager.multilabel.label.MultilabelIssueManager.issue_name"]], "issue_score_key (cleanlab.datalab.internal.issue_manager.multilabel.label.multilabelissuemanager attribute)": [[25, "cleanlab.datalab.internal.issue_manager.multilabel.label.MultilabelIssueManager.issue_score_key"]], "issues (cleanlab.datalab.internal.issue_manager.multilabel.label.multilabelissuemanager attribute)": [[25, "cleanlab.datalab.internal.issue_manager.multilabel.label.MultilabelIssueManager.issues"]], "make_summary() (cleanlab.datalab.internal.issue_manager.multilabel.label.multilabelissuemanager class method)": [[25, "cleanlab.datalab.internal.issue_manager.multilabel.label.MultilabelIssueManager.make_summary"]], "report() (cleanlab.datalab.internal.issue_manager.multilabel.label.multilabelissuemanager class method)": [[25, "cleanlab.datalab.internal.issue_manager.multilabel.label.MultilabelIssueManager.report"]], "summary (cleanlab.datalab.internal.issue_manager.multilabel.label.multilabelissuemanager attribute)": [[25, "cleanlab.datalab.internal.issue_manager.multilabel.label.MultilabelIssueManager.summary"]], "verbosity_levels (cleanlab.datalab.internal.issue_manager.multilabel.label.multilabelissuemanager attribute)": [[25, "cleanlab.datalab.internal.issue_manager.multilabel.label.MultilabelIssueManager.verbosity_levels"]], "noniidissuemanager (class in cleanlab.datalab.internal.issue_manager.noniid)": [[26, "cleanlab.datalab.internal.issue_manager.noniid.NonIIDIssueManager"]], "cleanlab.datalab.internal.issue_manager.noniid": [[26, "module-cleanlab.datalab.internal.issue_manager.noniid"]], "collect_info() (cleanlab.datalab.internal.issue_manager.noniid.noniidissuemanager method)": [[26, "cleanlab.datalab.internal.issue_manager.noniid.NonIIDIssueManager.collect_info"]], "description (cleanlab.datalab.internal.issue_manager.noniid.noniidissuemanager attribute)": [[26, "cleanlab.datalab.internal.issue_manager.noniid.NonIIDIssueManager.description"]], "find_issues() (cleanlab.datalab.internal.issue_manager.noniid.noniidissuemanager method)": [[26, "cleanlab.datalab.internal.issue_manager.noniid.NonIIDIssueManager.find_issues"]], "info (cleanlab.datalab.internal.issue_manager.noniid.noniidissuemanager attribute)": [[26, "cleanlab.datalab.internal.issue_manager.noniid.NonIIDIssueManager.info"]], "issue_name (cleanlab.datalab.internal.issue_manager.noniid.noniidissuemanager attribute)": [[26, "cleanlab.datalab.internal.issue_manager.noniid.NonIIDIssueManager.issue_name"]], "issue_score_key (cleanlab.datalab.internal.issue_manager.noniid.noniidissuemanager attribute)": [[26, "cleanlab.datalab.internal.issue_manager.noniid.NonIIDIssueManager.issue_score_key"]], "issues (cleanlab.datalab.internal.issue_manager.noniid.noniidissuemanager attribute)": [[26, "cleanlab.datalab.internal.issue_manager.noniid.NonIIDIssueManager.issues"]], "make_summary() (cleanlab.datalab.internal.issue_manager.noniid.noniidissuemanager class method)": [[26, "cleanlab.datalab.internal.issue_manager.noniid.NonIIDIssueManager.make_summary"]], "report() (cleanlab.datalab.internal.issue_manager.noniid.noniidissuemanager class method)": [[26, "cleanlab.datalab.internal.issue_manager.noniid.NonIIDIssueManager.report"]], "simplified_kolmogorov_smirnov_test() (in module cleanlab.datalab.internal.issue_manager.noniid)": [[26, "cleanlab.datalab.internal.issue_manager.noniid.simplified_kolmogorov_smirnov_test"]], "summary (cleanlab.datalab.internal.issue_manager.noniid.noniidissuemanager attribute)": [[26, "cleanlab.datalab.internal.issue_manager.noniid.NonIIDIssueManager.summary"]], "verbosity_levels (cleanlab.datalab.internal.issue_manager.noniid.noniidissuemanager attribute)": [[26, "cleanlab.datalab.internal.issue_manager.noniid.NonIIDIssueManager.verbosity_levels"]], "nullissuemanager (class in cleanlab.datalab.internal.issue_manager.null)": [[27, "cleanlab.datalab.internal.issue_manager.null.NullIssueManager"]], "cleanlab.datalab.internal.issue_manager.null": [[27, "module-cleanlab.datalab.internal.issue_manager.null"]], "collect_info() (cleanlab.datalab.internal.issue_manager.null.nullissuemanager method)": [[27, "cleanlab.datalab.internal.issue_manager.null.NullIssueManager.collect_info"]], "description (cleanlab.datalab.internal.issue_manager.null.nullissuemanager attribute)": [[27, "cleanlab.datalab.internal.issue_manager.null.NullIssueManager.description"]], "find_issues() (cleanlab.datalab.internal.issue_manager.null.nullissuemanager method)": [[27, "cleanlab.datalab.internal.issue_manager.null.NullIssueManager.find_issues"]], "info (cleanlab.datalab.internal.issue_manager.null.nullissuemanager attribute)": [[27, "cleanlab.datalab.internal.issue_manager.null.NullIssueManager.info"]], "issue_name (cleanlab.datalab.internal.issue_manager.null.nullissuemanager attribute)": [[27, "cleanlab.datalab.internal.issue_manager.null.NullIssueManager.issue_name"]], "issue_score_key (cleanlab.datalab.internal.issue_manager.null.nullissuemanager attribute)": [[27, "cleanlab.datalab.internal.issue_manager.null.NullIssueManager.issue_score_key"]], "issues (cleanlab.datalab.internal.issue_manager.null.nullissuemanager attribute)": [[27, "cleanlab.datalab.internal.issue_manager.null.NullIssueManager.issues"]], "make_summary() (cleanlab.datalab.internal.issue_manager.null.nullissuemanager class method)": [[27, "cleanlab.datalab.internal.issue_manager.null.NullIssueManager.make_summary"]], "report() (cleanlab.datalab.internal.issue_manager.null.nullissuemanager class method)": [[27, "cleanlab.datalab.internal.issue_manager.null.NullIssueManager.report"]], "summary (cleanlab.datalab.internal.issue_manager.null.nullissuemanager attribute)": [[27, "cleanlab.datalab.internal.issue_manager.null.NullIssueManager.summary"]], "verbosity_levels (cleanlab.datalab.internal.issue_manager.null.nullissuemanager attribute)": [[27, "cleanlab.datalab.internal.issue_manager.null.NullIssueManager.verbosity_levels"]], "default_thresholds (cleanlab.datalab.internal.issue_manager.outlier.outlierissuemanager attribute)": [[28, "cleanlab.datalab.internal.issue_manager.outlier.OutlierIssueManager.DEFAULT_THRESHOLDS"]], "outlierissuemanager (class in cleanlab.datalab.internal.issue_manager.outlier)": [[28, "cleanlab.datalab.internal.issue_manager.outlier.OutlierIssueManager"]], "cleanlab.datalab.internal.issue_manager.outlier": [[28, "module-cleanlab.datalab.internal.issue_manager.outlier"]], "collect_info() (cleanlab.datalab.internal.issue_manager.outlier.outlierissuemanager method)": [[28, "cleanlab.datalab.internal.issue_manager.outlier.OutlierIssueManager.collect_info"]], "description (cleanlab.datalab.internal.issue_manager.outlier.outlierissuemanager attribute)": [[28, "cleanlab.datalab.internal.issue_manager.outlier.OutlierIssueManager.description"]], "find_issues() (cleanlab.datalab.internal.issue_manager.outlier.outlierissuemanager method)": [[28, "cleanlab.datalab.internal.issue_manager.outlier.OutlierIssueManager.find_issues"]], "info (cleanlab.datalab.internal.issue_manager.outlier.outlierissuemanager attribute)": [[28, "cleanlab.datalab.internal.issue_manager.outlier.OutlierIssueManager.info"]], "issue_name (cleanlab.datalab.internal.issue_manager.outlier.outlierissuemanager attribute)": [[28, "cleanlab.datalab.internal.issue_manager.outlier.OutlierIssueManager.issue_name"]], "issue_score_key (cleanlab.datalab.internal.issue_manager.outlier.outlierissuemanager attribute)": [[28, "cleanlab.datalab.internal.issue_manager.outlier.OutlierIssueManager.issue_score_key"]], "issues (cleanlab.datalab.internal.issue_manager.outlier.outlierissuemanager attribute)": [[28, "cleanlab.datalab.internal.issue_manager.outlier.OutlierIssueManager.issues"]], "make_summary() (cleanlab.datalab.internal.issue_manager.outlier.outlierissuemanager class method)": [[28, "cleanlab.datalab.internal.issue_manager.outlier.OutlierIssueManager.make_summary"]], "ood (cleanlab.datalab.internal.issue_manager.outlier.outlierissuemanager attribute)": [[28, "cleanlab.datalab.internal.issue_manager.outlier.OutlierIssueManager.ood"]], "report() (cleanlab.datalab.internal.issue_manager.outlier.outlierissuemanager class method)": [[28, "cleanlab.datalab.internal.issue_manager.outlier.OutlierIssueManager.report"]], "summary (cleanlab.datalab.internal.issue_manager.outlier.outlierissuemanager attribute)": [[28, "cleanlab.datalab.internal.issue_manager.outlier.OutlierIssueManager.summary"]], "verbosity_levels (cleanlab.datalab.internal.issue_manager.outlier.outlierissuemanager attribute)": [[28, "cleanlab.datalab.internal.issue_manager.outlier.OutlierIssueManager.verbosity_levels"]], "regressionlabelissuemanager (class in cleanlab.datalab.internal.issue_manager.regression.label)": [[30, "cleanlab.datalab.internal.issue_manager.regression.label.RegressionLabelIssueManager"]], "cleanlab.datalab.internal.issue_manager.regression.label": [[30, "module-cleanlab.datalab.internal.issue_manager.regression.label"]], "collect_info() (cleanlab.datalab.internal.issue_manager.regression.label.regressionlabelissuemanager method)": [[30, "cleanlab.datalab.internal.issue_manager.regression.label.RegressionLabelIssueManager.collect_info"]], "description (cleanlab.datalab.internal.issue_manager.regression.label.regressionlabelissuemanager attribute)": [[30, "cleanlab.datalab.internal.issue_manager.regression.label.RegressionLabelIssueManager.description"]], "find_issues() (cleanlab.datalab.internal.issue_manager.regression.label.regressionlabelissuemanager method)": [[30, "cleanlab.datalab.internal.issue_manager.regression.label.RegressionLabelIssueManager.find_issues"]], "find_issues_with_features() (in module cleanlab.datalab.internal.issue_manager.regression.label)": [[30, "cleanlab.datalab.internal.issue_manager.regression.label.find_issues_with_features"]], "find_issues_with_predictions() (in module cleanlab.datalab.internal.issue_manager.regression.label)": [[30, "cleanlab.datalab.internal.issue_manager.regression.label.find_issues_with_predictions"]], "info (cleanlab.datalab.internal.issue_manager.regression.label.regressionlabelissuemanager attribute)": [[30, "cleanlab.datalab.internal.issue_manager.regression.label.RegressionLabelIssueManager.info"]], "issue_name (cleanlab.datalab.internal.issue_manager.regression.label.regressionlabelissuemanager attribute)": [[30, "cleanlab.datalab.internal.issue_manager.regression.label.RegressionLabelIssueManager.issue_name"]], "issue_score_key (cleanlab.datalab.internal.issue_manager.regression.label.regressionlabelissuemanager attribute)": [[30, "cleanlab.datalab.internal.issue_manager.regression.label.RegressionLabelIssueManager.issue_score_key"]], "issues (cleanlab.datalab.internal.issue_manager.regression.label.regressionlabelissuemanager attribute)": [[30, "cleanlab.datalab.internal.issue_manager.regression.label.RegressionLabelIssueManager.issues"]], "make_summary() (cleanlab.datalab.internal.issue_manager.regression.label.regressionlabelissuemanager class method)": [[30, "cleanlab.datalab.internal.issue_manager.regression.label.RegressionLabelIssueManager.make_summary"]], "report() (cleanlab.datalab.internal.issue_manager.regression.label.regressionlabelissuemanager class method)": [[30, "cleanlab.datalab.internal.issue_manager.regression.label.RegressionLabelIssueManager.report"]], "summary (cleanlab.datalab.internal.issue_manager.regression.label.regressionlabelissuemanager attribute)": [[30, "cleanlab.datalab.internal.issue_manager.regression.label.RegressionLabelIssueManager.summary"]], "verbosity_levels (cleanlab.datalab.internal.issue_manager.regression.label.regressionlabelissuemanager attribute)": [[30, "cleanlab.datalab.internal.issue_manager.regression.label.RegressionLabelIssueManager.verbosity_levels"]], "no_underperforming_cluster_id (cleanlab.datalab.internal.issue_manager.underperforming_group.underperforminggroupissuemanager attribute)": [[31, "cleanlab.datalab.internal.issue_manager.underperforming_group.UnderperformingGroupIssueManager.NO_UNDERPERFORMING_CLUSTER_ID"]], "outlier_cluster_labels (cleanlab.datalab.internal.issue_manager.underperforming_group.underperforminggroupissuemanager attribute)": [[31, "cleanlab.datalab.internal.issue_manager.underperforming_group.UnderperformingGroupIssueManager.OUTLIER_CLUSTER_LABELS"]], "underperforminggroupissuemanager (class in cleanlab.datalab.internal.issue_manager.underperforming_group)": [[31, "cleanlab.datalab.internal.issue_manager.underperforming_group.UnderperformingGroupIssueManager"]], "cleanlab.datalab.internal.issue_manager.underperforming_group": [[31, "module-cleanlab.datalab.internal.issue_manager.underperforming_group"]], "collect_info() (cleanlab.datalab.internal.issue_manager.underperforming_group.underperforminggroupissuemanager method)": [[31, "cleanlab.datalab.internal.issue_manager.underperforming_group.UnderperformingGroupIssueManager.collect_info"]], "description (cleanlab.datalab.internal.issue_manager.underperforming_group.underperforminggroupissuemanager attribute)": [[31, "cleanlab.datalab.internal.issue_manager.underperforming_group.UnderperformingGroupIssueManager.description"]], "filter_cluster_ids() (cleanlab.datalab.internal.issue_manager.underperforming_group.underperforminggroupissuemanager method)": [[31, "cleanlab.datalab.internal.issue_manager.underperforming_group.UnderperformingGroupIssueManager.filter_cluster_ids"]], "find_issues() (cleanlab.datalab.internal.issue_manager.underperforming_group.underperforminggroupissuemanager method)": [[31, "cleanlab.datalab.internal.issue_manager.underperforming_group.UnderperformingGroupIssueManager.find_issues"]], "get_worst_cluster() (cleanlab.datalab.internal.issue_manager.underperforming_group.underperforminggroupissuemanager method)": [[31, "cleanlab.datalab.internal.issue_manager.underperforming_group.UnderperformingGroupIssueManager.get_worst_cluster"]], "info (cleanlab.datalab.internal.issue_manager.underperforming_group.underperforminggroupissuemanager attribute)": [[31, "cleanlab.datalab.internal.issue_manager.underperforming_group.UnderperformingGroupIssueManager.info"]], "issue_name (cleanlab.datalab.internal.issue_manager.underperforming_group.underperforminggroupissuemanager attribute)": [[31, "cleanlab.datalab.internal.issue_manager.underperforming_group.UnderperformingGroupIssueManager.issue_name"]], "issue_score_key (cleanlab.datalab.internal.issue_manager.underperforming_group.underperforminggroupissuemanager attribute)": [[31, "cleanlab.datalab.internal.issue_manager.underperforming_group.UnderperformingGroupIssueManager.issue_score_key"]], "issues (cleanlab.datalab.internal.issue_manager.underperforming_group.underperforminggroupissuemanager attribute)": [[31, "cleanlab.datalab.internal.issue_manager.underperforming_group.UnderperformingGroupIssueManager.issues"]], "make_summary() (cleanlab.datalab.internal.issue_manager.underperforming_group.underperforminggroupissuemanager class method)": [[31, "cleanlab.datalab.internal.issue_manager.underperforming_group.UnderperformingGroupIssueManager.make_summary"]], "perform_clustering() (cleanlab.datalab.internal.issue_manager.underperforming_group.underperforminggroupissuemanager method)": [[31, "cleanlab.datalab.internal.issue_manager.underperforming_group.UnderperformingGroupIssueManager.perform_clustering"]], "report() (cleanlab.datalab.internal.issue_manager.underperforming_group.underperforminggroupissuemanager class method)": [[31, "cleanlab.datalab.internal.issue_manager.underperforming_group.UnderperformingGroupIssueManager.report"]], "set_knn_graph() (cleanlab.datalab.internal.issue_manager.underperforming_group.underperforminggroupissuemanager method)": [[31, "cleanlab.datalab.internal.issue_manager.underperforming_group.UnderperformingGroupIssueManager.set_knn_graph"]], "summary (cleanlab.datalab.internal.issue_manager.underperforming_group.underperforminggroupissuemanager attribute)": [[31, "cleanlab.datalab.internal.issue_manager.underperforming_group.UnderperformingGroupIssueManager.summary"]], "verbosity_levels (cleanlab.datalab.internal.issue_manager.underperforming_group.underperforminggroupissuemanager attribute)": [[31, "cleanlab.datalab.internal.issue_manager.underperforming_group.UnderperformingGroupIssueManager.verbosity_levels"]], "modeloutput (class in cleanlab.datalab.internal.model_outputs)": [[32, "cleanlab.datalab.internal.model_outputs.ModelOutput"]], "multiclasspredprobs (class in cleanlab.datalab.internal.model_outputs)": [[32, "cleanlab.datalab.internal.model_outputs.MultiClassPredProbs"]], "multilabelpredprobs (class in cleanlab.datalab.internal.model_outputs)": [[32, "cleanlab.datalab.internal.model_outputs.MultiLabelPredProbs"]], "regressionpredictions (class in cleanlab.datalab.internal.model_outputs)": [[32, "cleanlab.datalab.internal.model_outputs.RegressionPredictions"]], "argument (cleanlab.datalab.internal.model_outputs.multiclasspredprobs attribute)": [[32, "cleanlab.datalab.internal.model_outputs.MultiClassPredProbs.argument"]], "argument (cleanlab.datalab.internal.model_outputs.multilabelpredprobs attribute)": [[32, "cleanlab.datalab.internal.model_outputs.MultiLabelPredProbs.argument"]], "argument (cleanlab.datalab.internal.model_outputs.regressionpredictions attribute)": [[32, "cleanlab.datalab.internal.model_outputs.RegressionPredictions.argument"]], "cleanlab.datalab.internal.model_outputs": [[32, "module-cleanlab.datalab.internal.model_outputs"]], "collect() (cleanlab.datalab.internal.model_outputs.modeloutput method)": [[32, "cleanlab.datalab.internal.model_outputs.ModelOutput.collect"]], "collect() (cleanlab.datalab.internal.model_outputs.multiclasspredprobs method)": [[32, "cleanlab.datalab.internal.model_outputs.MultiClassPredProbs.collect"]], "collect() (cleanlab.datalab.internal.model_outputs.multilabelpredprobs method)": [[32, "cleanlab.datalab.internal.model_outputs.MultiLabelPredProbs.collect"]], "collect() (cleanlab.datalab.internal.model_outputs.regressionpredictions method)": [[32, "cleanlab.datalab.internal.model_outputs.RegressionPredictions.collect"]], "data (cleanlab.datalab.internal.model_outputs.modeloutput attribute)": [[32, "cleanlab.datalab.internal.model_outputs.ModelOutput.data"]], "data (cleanlab.datalab.internal.model_outputs.multiclasspredprobs attribute)": [[32, "cleanlab.datalab.internal.model_outputs.MultiClassPredProbs.data"]], "data (cleanlab.datalab.internal.model_outputs.multilabelpredprobs attribute)": [[32, "cleanlab.datalab.internal.model_outputs.MultiLabelPredProbs.data"]], "data (cleanlab.datalab.internal.model_outputs.regressionpredictions attribute)": [[32, "cleanlab.datalab.internal.model_outputs.RegressionPredictions.data"]], "validate() (cleanlab.datalab.internal.model_outputs.modeloutput method)": [[32, "cleanlab.datalab.internal.model_outputs.ModelOutput.validate"]], "validate() (cleanlab.datalab.internal.model_outputs.multiclasspredprobs method)": [[32, "cleanlab.datalab.internal.model_outputs.MultiClassPredProbs.validate"]], "validate() (cleanlab.datalab.internal.model_outputs.multilabelpredprobs method)": [[32, "cleanlab.datalab.internal.model_outputs.MultiLabelPredProbs.validate"]], "validate() (cleanlab.datalab.internal.model_outputs.regressionpredictions method)": [[32, "cleanlab.datalab.internal.model_outputs.RegressionPredictions.validate"]], "reporter (class in cleanlab.datalab.internal.report)": [[33, "cleanlab.datalab.internal.report.Reporter"]], "cleanlab.datalab.internal.report": [[33, "module-cleanlab.datalab.internal.report"]], "get_report() (cleanlab.datalab.internal.report.reporter method)": [[33, "cleanlab.datalab.internal.report.Reporter.get_report"]], "report() (cleanlab.datalab.internal.report.reporter method)": [[33, "cleanlab.datalab.internal.report.Reporter.report"]], "classification (cleanlab.datalab.internal.task.task attribute)": [[34, "cleanlab.datalab.internal.task.Task.CLASSIFICATION"]], "multilabel (cleanlab.datalab.internal.task.task attribute)": [[34, "cleanlab.datalab.internal.task.Task.MULTILABEL"]], "regression (cleanlab.datalab.internal.task.task attribute)": [[34, "cleanlab.datalab.internal.task.Task.REGRESSION"]], "task (class in cleanlab.datalab.internal.task)": [[34, "cleanlab.datalab.internal.task.Task"]], "__contains__() (cleanlab.datalab.internal.task.task class method)": [[34, "cleanlab.datalab.internal.task.Task.__contains__"]], "__getitem__() (cleanlab.datalab.internal.task.task class method)": [[34, "cleanlab.datalab.internal.task.Task.__getitem__"]], "__iter__() (cleanlab.datalab.internal.task.task class method)": [[34, "cleanlab.datalab.internal.task.Task.__iter__"]], "__len__() (cleanlab.datalab.internal.task.task class method)": [[34, "cleanlab.datalab.internal.task.Task.__len__"]], "cleanlab.datalab.internal.task": [[34, "module-cleanlab.datalab.internal.task"]], "from_str() (cleanlab.datalab.internal.task.task class method)": [[34, "cleanlab.datalab.internal.task.Task.from_str"]], "is_classification (cleanlab.datalab.internal.task.task property)": [[34, "cleanlab.datalab.internal.task.Task.is_classification"]], "is_multilabel (cleanlab.datalab.internal.task.task property)": [[34, "cleanlab.datalab.internal.task.Task.is_multilabel"]], "is_regression (cleanlab.datalab.internal.task.task property)": [[34, "cleanlab.datalab.internal.task.Task.is_regression"]], "cleanlab.dataset": [[36, "module-cleanlab.dataset"]], "find_overlapping_classes() (in module cleanlab.dataset)": [[36, "cleanlab.dataset.find_overlapping_classes"]], "health_summary() (in module cleanlab.dataset)": [[36, "cleanlab.dataset.health_summary"]], "overall_label_health_score() (in module cleanlab.dataset)": [[36, "cleanlab.dataset.overall_label_health_score"]], "rank_classes_by_label_quality() (in module cleanlab.dataset)": [[36, "cleanlab.dataset.rank_classes_by_label_quality"]], "cnn (class in cleanlab.experimental.cifar_cnn)": [[37, "cleanlab.experimental.cifar_cnn.CNN"]], "t_destination (cleanlab.experimental.cifar_cnn.cnn attribute)": [[37, "cleanlab.experimental.cifar_cnn.CNN.T_destination"]], "__call__() (cleanlab.experimental.cifar_cnn.cnn method)": [[37, "cleanlab.experimental.cifar_cnn.CNN.__call__"]], "add_module() (cleanlab.experimental.cifar_cnn.cnn method)": [[37, "cleanlab.experimental.cifar_cnn.CNN.add_module"]], "apply() (cleanlab.experimental.cifar_cnn.cnn method)": [[37, "cleanlab.experimental.cifar_cnn.CNN.apply"]], "bfloat16() (cleanlab.experimental.cifar_cnn.cnn method)": [[37, "cleanlab.experimental.cifar_cnn.CNN.bfloat16"]], "buffers() (cleanlab.experimental.cifar_cnn.cnn method)": [[37, "cleanlab.experimental.cifar_cnn.CNN.buffers"]], "call_bn() (in module cleanlab.experimental.cifar_cnn)": [[37, "cleanlab.experimental.cifar_cnn.call_bn"]], "call_super_init (cleanlab.experimental.cifar_cnn.cnn attribute)": [[37, "cleanlab.experimental.cifar_cnn.CNN.call_super_init"]], "children() (cleanlab.experimental.cifar_cnn.cnn method)": [[37, "cleanlab.experimental.cifar_cnn.CNN.children"]], "cleanlab.experimental.cifar_cnn": [[37, "module-cleanlab.experimental.cifar_cnn"]], "compile() (cleanlab.experimental.cifar_cnn.cnn method)": [[37, "cleanlab.experimental.cifar_cnn.CNN.compile"]], "cpu() (cleanlab.experimental.cifar_cnn.cnn method)": [[37, "cleanlab.experimental.cifar_cnn.CNN.cpu"]], "cuda() (cleanlab.experimental.cifar_cnn.cnn method)": [[37, "cleanlab.experimental.cifar_cnn.CNN.cuda"]], "double() (cleanlab.experimental.cifar_cnn.cnn method)": [[37, "cleanlab.experimental.cifar_cnn.CNN.double"]], "dump_patches (cleanlab.experimental.cifar_cnn.cnn attribute)": [[37, "cleanlab.experimental.cifar_cnn.CNN.dump_patches"]], "eval() (cleanlab.experimental.cifar_cnn.cnn method)": [[37, "cleanlab.experimental.cifar_cnn.CNN.eval"]], "extra_repr() (cleanlab.experimental.cifar_cnn.cnn method)": [[37, "cleanlab.experimental.cifar_cnn.CNN.extra_repr"]], "float() (cleanlab.experimental.cifar_cnn.cnn method)": [[37, "cleanlab.experimental.cifar_cnn.CNN.float"]], "forward() (cleanlab.experimental.cifar_cnn.cnn method)": [[37, "cleanlab.experimental.cifar_cnn.CNN.forward"], [37, "id0"]], "get_buffer() (cleanlab.experimental.cifar_cnn.cnn method)": [[37, "cleanlab.experimental.cifar_cnn.CNN.get_buffer"]], "get_extra_state() (cleanlab.experimental.cifar_cnn.cnn method)": [[37, "cleanlab.experimental.cifar_cnn.CNN.get_extra_state"]], "get_parameter() (cleanlab.experimental.cifar_cnn.cnn method)": [[37, "cleanlab.experimental.cifar_cnn.CNN.get_parameter"]], "get_submodule() (cleanlab.experimental.cifar_cnn.cnn method)": [[37, "cleanlab.experimental.cifar_cnn.CNN.get_submodule"]], "half() (cleanlab.experimental.cifar_cnn.cnn method)": [[37, "cleanlab.experimental.cifar_cnn.CNN.half"]], "ipu() (cleanlab.experimental.cifar_cnn.cnn method)": [[37, "cleanlab.experimental.cifar_cnn.CNN.ipu"]], "load_state_dict() (cleanlab.experimental.cifar_cnn.cnn method)": [[37, "cleanlab.experimental.cifar_cnn.CNN.load_state_dict"]], "modules() (cleanlab.experimental.cifar_cnn.cnn method)": [[37, "cleanlab.experimental.cifar_cnn.CNN.modules"]], "named_buffers() (cleanlab.experimental.cifar_cnn.cnn method)": [[37, "cleanlab.experimental.cifar_cnn.CNN.named_buffers"]], "named_children() (cleanlab.experimental.cifar_cnn.cnn method)": [[37, "cleanlab.experimental.cifar_cnn.CNN.named_children"]], "named_modules() (cleanlab.experimental.cifar_cnn.cnn method)": [[37, "cleanlab.experimental.cifar_cnn.CNN.named_modules"]], "named_parameters() (cleanlab.experimental.cifar_cnn.cnn method)": [[37, "cleanlab.experimental.cifar_cnn.CNN.named_parameters"]], "parameters() (cleanlab.experimental.cifar_cnn.cnn method)": [[37, "cleanlab.experimental.cifar_cnn.CNN.parameters"]], "register_backward_hook() (cleanlab.experimental.cifar_cnn.cnn method)": [[37, "cleanlab.experimental.cifar_cnn.CNN.register_backward_hook"]], "register_buffer() (cleanlab.experimental.cifar_cnn.cnn method)": [[37, "cleanlab.experimental.cifar_cnn.CNN.register_buffer"]], "register_forward_hook() (cleanlab.experimental.cifar_cnn.cnn method)": [[37, "cleanlab.experimental.cifar_cnn.CNN.register_forward_hook"]], "register_forward_pre_hook() (cleanlab.experimental.cifar_cnn.cnn method)": [[37, "cleanlab.experimental.cifar_cnn.CNN.register_forward_pre_hook"]], "register_full_backward_hook() (cleanlab.experimental.cifar_cnn.cnn method)": [[37, "cleanlab.experimental.cifar_cnn.CNN.register_full_backward_hook"]], "register_full_backward_pre_hook() (cleanlab.experimental.cifar_cnn.cnn method)": [[37, "cleanlab.experimental.cifar_cnn.CNN.register_full_backward_pre_hook"]], "register_load_state_dict_post_hook() (cleanlab.experimental.cifar_cnn.cnn method)": [[37, "cleanlab.experimental.cifar_cnn.CNN.register_load_state_dict_post_hook"]], "register_module() (cleanlab.experimental.cifar_cnn.cnn method)": [[37, "cleanlab.experimental.cifar_cnn.CNN.register_module"]], "register_parameter() (cleanlab.experimental.cifar_cnn.cnn method)": [[37, "cleanlab.experimental.cifar_cnn.CNN.register_parameter"]], "register_state_dict_pre_hook() (cleanlab.experimental.cifar_cnn.cnn method)": [[37, "cleanlab.experimental.cifar_cnn.CNN.register_state_dict_pre_hook"]], "requires_grad_() (cleanlab.experimental.cifar_cnn.cnn method)": [[37, "cleanlab.experimental.cifar_cnn.CNN.requires_grad_"]], "set_extra_state() (cleanlab.experimental.cifar_cnn.cnn method)": [[37, "cleanlab.experimental.cifar_cnn.CNN.set_extra_state"]], "share_memory() (cleanlab.experimental.cifar_cnn.cnn method)": [[37, "cleanlab.experimental.cifar_cnn.CNN.share_memory"]], "state_dict() (cleanlab.experimental.cifar_cnn.cnn method)": [[37, "cleanlab.experimental.cifar_cnn.CNN.state_dict"]], "to() (cleanlab.experimental.cifar_cnn.cnn method)": [[37, "cleanlab.experimental.cifar_cnn.CNN.to"]], "to_empty() (cleanlab.experimental.cifar_cnn.cnn method)": [[37, "cleanlab.experimental.cifar_cnn.CNN.to_empty"]], "train() (cleanlab.experimental.cifar_cnn.cnn method)": [[37, "cleanlab.experimental.cifar_cnn.CNN.train"]], "training (cleanlab.experimental.cifar_cnn.cnn attribute)": [[37, "cleanlab.experimental.cifar_cnn.CNN.training"]], "type() (cleanlab.experimental.cifar_cnn.cnn method)": [[37, "cleanlab.experimental.cifar_cnn.CNN.type"]], "xpu() (cleanlab.experimental.cifar_cnn.cnn method)": [[37, "cleanlab.experimental.cifar_cnn.CNN.xpu"]], "zero_grad() (cleanlab.experimental.cifar_cnn.cnn method)": [[37, "cleanlab.experimental.cifar_cnn.CNN.zero_grad"]], "adjust_learning_rate() (in module cleanlab.experimental.coteaching)": [[38, "cleanlab.experimental.coteaching.adjust_learning_rate"]], "cleanlab.experimental.coteaching": [[38, "module-cleanlab.experimental.coteaching"]], "evaluate() (in module cleanlab.experimental.coteaching)": [[38, "cleanlab.experimental.coteaching.evaluate"]], "forget_rate_scheduler() (in module cleanlab.experimental.coteaching)": [[38, "cleanlab.experimental.coteaching.forget_rate_scheduler"]], "initialize_lr_scheduler() (in module cleanlab.experimental.coteaching)": [[38, "cleanlab.experimental.coteaching.initialize_lr_scheduler"]], "loss_coteaching() (in module cleanlab.experimental.coteaching)": [[38, "cleanlab.experimental.coteaching.loss_coteaching"]], "train() (in module cleanlab.experimental.coteaching)": [[38, "cleanlab.experimental.coteaching.train"]], "cleanlab.experimental": [[39, "module-cleanlab.experimental"]], "labelinspector (class in cleanlab.experimental.label_issues_batched)": [[40, "cleanlab.experimental.label_issues_batched.LabelInspector"]], "adj_confident_thresholds_shared (in module cleanlab.experimental.label_issues_batched)": [[40, "cleanlab.experimental.label_issues_batched.adj_confident_thresholds_shared"]], "cleanlab.experimental.label_issues_batched": [[40, "module-cleanlab.experimental.label_issues_batched"]], "find_label_issues_batched() (in module cleanlab.experimental.label_issues_batched)": [[40, "cleanlab.experimental.label_issues_batched.find_label_issues_batched"]], "get_confident_thresholds() (cleanlab.experimental.label_issues_batched.labelinspector method)": [[40, "cleanlab.experimental.label_issues_batched.LabelInspector.get_confident_thresholds"]], "get_label_issues() (cleanlab.experimental.label_issues_batched.labelinspector method)": [[40, "cleanlab.experimental.label_issues_batched.LabelInspector.get_label_issues"]], "get_num_issues() (cleanlab.experimental.label_issues_batched.labelinspector method)": [[40, "cleanlab.experimental.label_issues_batched.LabelInspector.get_num_issues"]], "get_quality_scores() (cleanlab.experimental.label_issues_batched.labelinspector method)": [[40, "cleanlab.experimental.label_issues_batched.LabelInspector.get_quality_scores"]], "labels_shared (in module cleanlab.experimental.label_issues_batched)": [[40, "cleanlab.experimental.label_issues_batched.labels_shared"]], "pred_probs_shared (in module cleanlab.experimental.label_issues_batched)": [[40, "cleanlab.experimental.label_issues_batched.pred_probs_shared"]], "score_label_quality() (cleanlab.experimental.label_issues_batched.labelinspector method)": [[40, "cleanlab.experimental.label_issues_batched.LabelInspector.score_label_quality"]], "split_arr() (in module cleanlab.experimental.label_issues_batched)": [[40, "cleanlab.experimental.label_issues_batched.split_arr"]], "update_confident_thresholds() (cleanlab.experimental.label_issues_batched.labelinspector method)": [[40, "cleanlab.experimental.label_issues_batched.LabelInspector.update_confident_thresholds"]], "cnn (class in cleanlab.experimental.mnist_pytorch)": [[41, "cleanlab.experimental.mnist_pytorch.CNN"]], "simplenet (class in cleanlab.experimental.mnist_pytorch)": [[41, "cleanlab.experimental.mnist_pytorch.SimpleNet"]], "t_destination (cleanlab.experimental.mnist_pytorch.simplenet attribute)": [[41, "cleanlab.experimental.mnist_pytorch.SimpleNet.T_destination"]], "__call__() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[41, "cleanlab.experimental.mnist_pytorch.SimpleNet.__call__"]], "__init_subclass__() (cleanlab.experimental.mnist_pytorch.cnn class method)": [[41, "cleanlab.experimental.mnist_pytorch.CNN.__init_subclass__"]], "add_module() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[41, "cleanlab.experimental.mnist_pytorch.SimpleNet.add_module"]], "apply() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[41, "cleanlab.experimental.mnist_pytorch.SimpleNet.apply"]], "batch_size (cleanlab.experimental.mnist_pytorch.cnn attribute)": [[41, "cleanlab.experimental.mnist_pytorch.CNN.batch_size"]], "bfloat16() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[41, "cleanlab.experimental.mnist_pytorch.SimpleNet.bfloat16"]], "buffers() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[41, "cleanlab.experimental.mnist_pytorch.SimpleNet.buffers"]], "call_super_init (cleanlab.experimental.mnist_pytorch.simplenet attribute)": [[41, "cleanlab.experimental.mnist_pytorch.SimpleNet.call_super_init"]], "children() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[41, "cleanlab.experimental.mnist_pytorch.SimpleNet.children"]], "cleanlab.experimental.mnist_pytorch": [[41, "module-cleanlab.experimental.mnist_pytorch"]], "compile() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[41, "cleanlab.experimental.mnist_pytorch.SimpleNet.compile"]], "cpu() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[41, "cleanlab.experimental.mnist_pytorch.SimpleNet.cpu"]], "cuda() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[41, "cleanlab.experimental.mnist_pytorch.SimpleNet.cuda"]], "dataset (cleanlab.experimental.mnist_pytorch.cnn attribute)": [[41, "cleanlab.experimental.mnist_pytorch.CNN.dataset"]], "double() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[41, "cleanlab.experimental.mnist_pytorch.SimpleNet.double"]], "dump_patches (cleanlab.experimental.mnist_pytorch.simplenet attribute)": [[41, "cleanlab.experimental.mnist_pytorch.SimpleNet.dump_patches"]], "epochs (cleanlab.experimental.mnist_pytorch.cnn attribute)": [[41, "cleanlab.experimental.mnist_pytorch.CNN.epochs"]], "eval() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[41, "cleanlab.experimental.mnist_pytorch.SimpleNet.eval"]], "extra_repr() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[41, "cleanlab.experimental.mnist_pytorch.SimpleNet.extra_repr"]], "fit() (cleanlab.experimental.mnist_pytorch.cnn method)": [[41, "cleanlab.experimental.mnist_pytorch.CNN.fit"], [41, "id0"]], "float() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[41, "cleanlab.experimental.mnist_pytorch.SimpleNet.float"]], "forward() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[41, "cleanlab.experimental.mnist_pytorch.SimpleNet.forward"]], "get_buffer() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[41, "cleanlab.experimental.mnist_pytorch.SimpleNet.get_buffer"]], "get_extra_state() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[41, "cleanlab.experimental.mnist_pytorch.SimpleNet.get_extra_state"]], "get_metadata_routing() (cleanlab.experimental.mnist_pytorch.cnn method)": [[41, "cleanlab.experimental.mnist_pytorch.CNN.get_metadata_routing"]], "get_mnist_dataset() (in module cleanlab.experimental.mnist_pytorch)": [[41, "cleanlab.experimental.mnist_pytorch.get_mnist_dataset"]], "get_parameter() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[41, "cleanlab.experimental.mnist_pytorch.SimpleNet.get_parameter"]], "get_params() (cleanlab.experimental.mnist_pytorch.cnn method)": [[41, "cleanlab.experimental.mnist_pytorch.CNN.get_params"]], "get_sklearn_digits_dataset() (in module cleanlab.experimental.mnist_pytorch)": [[41, "cleanlab.experimental.mnist_pytorch.get_sklearn_digits_dataset"]], "get_submodule() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[41, "cleanlab.experimental.mnist_pytorch.SimpleNet.get_submodule"]], "half() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[41, "cleanlab.experimental.mnist_pytorch.SimpleNet.half"]], "ipu() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[41, "cleanlab.experimental.mnist_pytorch.SimpleNet.ipu"]], "load_state_dict() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[41, "cleanlab.experimental.mnist_pytorch.SimpleNet.load_state_dict"]], "loader (cleanlab.experimental.mnist_pytorch.cnn attribute)": [[41, "cleanlab.experimental.mnist_pytorch.CNN.loader"]], "log_interval (cleanlab.experimental.mnist_pytorch.cnn attribute)": [[41, "cleanlab.experimental.mnist_pytorch.CNN.log_interval"]], "lr (cleanlab.experimental.mnist_pytorch.cnn attribute)": [[41, "cleanlab.experimental.mnist_pytorch.CNN.lr"]], "modules() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[41, "cleanlab.experimental.mnist_pytorch.SimpleNet.modules"]], "momentum (cleanlab.experimental.mnist_pytorch.cnn attribute)": [[41, "cleanlab.experimental.mnist_pytorch.CNN.momentum"]], "named_buffers() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[41, "cleanlab.experimental.mnist_pytorch.SimpleNet.named_buffers"]], "named_children() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[41, "cleanlab.experimental.mnist_pytorch.SimpleNet.named_children"]], "named_modules() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[41, "cleanlab.experimental.mnist_pytorch.SimpleNet.named_modules"]], "named_parameters() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[41, "cleanlab.experimental.mnist_pytorch.SimpleNet.named_parameters"]], "no_cuda (cleanlab.experimental.mnist_pytorch.cnn attribute)": [[41, "cleanlab.experimental.mnist_pytorch.CNN.no_cuda"]], "parameters() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[41, "cleanlab.experimental.mnist_pytorch.SimpleNet.parameters"]], "predict() (cleanlab.experimental.mnist_pytorch.cnn method)": [[41, "cleanlab.experimental.mnist_pytorch.CNN.predict"], [41, "id1"]], "predict_proba() (cleanlab.experimental.mnist_pytorch.cnn method)": [[41, "cleanlab.experimental.mnist_pytorch.CNN.predict_proba"], [41, "id4"]], "register_backward_hook() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[41, "cleanlab.experimental.mnist_pytorch.SimpleNet.register_backward_hook"]], "register_buffer() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[41, "cleanlab.experimental.mnist_pytorch.SimpleNet.register_buffer"]], "register_forward_hook() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[41, "cleanlab.experimental.mnist_pytorch.SimpleNet.register_forward_hook"]], "register_forward_pre_hook() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[41, "cleanlab.experimental.mnist_pytorch.SimpleNet.register_forward_pre_hook"]], "register_full_backward_hook() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[41, "cleanlab.experimental.mnist_pytorch.SimpleNet.register_full_backward_hook"]], "register_full_backward_pre_hook() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[41, "cleanlab.experimental.mnist_pytorch.SimpleNet.register_full_backward_pre_hook"]], "register_load_state_dict_post_hook() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[41, "cleanlab.experimental.mnist_pytorch.SimpleNet.register_load_state_dict_post_hook"]], "register_module() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[41, "cleanlab.experimental.mnist_pytorch.SimpleNet.register_module"]], "register_parameter() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[41, "cleanlab.experimental.mnist_pytorch.SimpleNet.register_parameter"]], "register_state_dict_pre_hook() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[41, "cleanlab.experimental.mnist_pytorch.SimpleNet.register_state_dict_pre_hook"]], "requires_grad_() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[41, "cleanlab.experimental.mnist_pytorch.SimpleNet.requires_grad_"]], "seed (cleanlab.experimental.mnist_pytorch.cnn attribute)": [[41, "cleanlab.experimental.mnist_pytorch.CNN.seed"]], "set_extra_state() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[41, "cleanlab.experimental.mnist_pytorch.SimpleNet.set_extra_state"]], "set_fit_request() (cleanlab.experimental.mnist_pytorch.cnn method)": [[41, "cleanlab.experimental.mnist_pytorch.CNN.set_fit_request"]], "set_params() (cleanlab.experimental.mnist_pytorch.cnn method)": [[41, "cleanlab.experimental.mnist_pytorch.CNN.set_params"]], "set_predict_proba_request() (cleanlab.experimental.mnist_pytorch.cnn method)": [[41, "cleanlab.experimental.mnist_pytorch.CNN.set_predict_proba_request"]], "set_predict_request() (cleanlab.experimental.mnist_pytorch.cnn method)": [[41, "cleanlab.experimental.mnist_pytorch.CNN.set_predict_request"]], "share_memory() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[41, "cleanlab.experimental.mnist_pytorch.SimpleNet.share_memory"]], "state_dict() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[41, "cleanlab.experimental.mnist_pytorch.SimpleNet.state_dict"]], "test_batch_size (cleanlab.experimental.mnist_pytorch.cnn attribute)": [[41, "cleanlab.experimental.mnist_pytorch.CNN.test_batch_size"]], "to() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[41, "cleanlab.experimental.mnist_pytorch.SimpleNet.to"]], "to_empty() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[41, "cleanlab.experimental.mnist_pytorch.SimpleNet.to_empty"]], "train() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[41, "cleanlab.experimental.mnist_pytorch.SimpleNet.train"]], "training (cleanlab.experimental.mnist_pytorch.simplenet attribute)": [[41, "cleanlab.experimental.mnist_pytorch.SimpleNet.training"]], "type() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[41, "cleanlab.experimental.mnist_pytorch.SimpleNet.type"]], "xpu() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[41, "cleanlab.experimental.mnist_pytorch.SimpleNet.xpu"]], "zero_grad() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[41, "cleanlab.experimental.mnist_pytorch.SimpleNet.zero_grad"]], "cleanlab.experimental.span_classification": [[42, "module-cleanlab.experimental.span_classification"]], "display_issues() (in module cleanlab.experimental.span_classification)": [[42, "cleanlab.experimental.span_classification.display_issues"]], "find_label_issues() (in module cleanlab.experimental.span_classification)": [[42, "cleanlab.experimental.span_classification.find_label_issues"]], "get_label_quality_scores() (in module cleanlab.experimental.span_classification)": [[42, "cleanlab.experimental.span_classification.get_label_quality_scores"]], "cleanlab.filter": [[43, "module-cleanlab.filter"]], "find_label_issues() (in module cleanlab.filter)": [[43, "cleanlab.filter.find_label_issues"]], "find_label_issues_using_argmax_confusion_matrix() (in module cleanlab.filter)": [[43, "cleanlab.filter.find_label_issues_using_argmax_confusion_matrix"]], "find_predicted_neq_given() (in module cleanlab.filter)": [[43, "cleanlab.filter.find_predicted_neq_given"]], "pred_probs_by_class (in module cleanlab.filter)": [[43, "cleanlab.filter.pred_probs_by_class"]], "prune_count_matrix_cols (in module cleanlab.filter)": [[43, "cleanlab.filter.prune_count_matrix_cols"]], "cleanlab.internal": [[44, "module-cleanlab.internal"]], "cleanlab.internal.label_quality_utils": [[45, "module-cleanlab.internal.label_quality_utils"]], "get_normalized_entropy() (in module cleanlab.internal.label_quality_utils)": [[45, "cleanlab.internal.label_quality_utils.get_normalized_entropy"]], "cleanlab.internal.latent_algebra": [[46, "module-cleanlab.internal.latent_algebra"]], "compute_inv_noise_matrix() (in module cleanlab.internal.latent_algebra)": [[46, "cleanlab.internal.latent_algebra.compute_inv_noise_matrix"]], "compute_noise_matrix_from_inverse() (in module cleanlab.internal.latent_algebra)": [[46, "cleanlab.internal.latent_algebra.compute_noise_matrix_from_inverse"]], "compute_ps_py_inv_noise_matrix() (in module cleanlab.internal.latent_algebra)": [[46, "cleanlab.internal.latent_algebra.compute_ps_py_inv_noise_matrix"]], "compute_py() (in module cleanlab.internal.latent_algebra)": [[46, "cleanlab.internal.latent_algebra.compute_py"]], "compute_py_inv_noise_matrix() (in module cleanlab.internal.latent_algebra)": [[46, "cleanlab.internal.latent_algebra.compute_py_inv_noise_matrix"]], "compute_pyx() (in module cleanlab.internal.latent_algebra)": [[46, "cleanlab.internal.latent_algebra.compute_pyx"]], "assert_valid_inputs_multiannotator() (in module cleanlab.internal.multiannotator_utils)": [[47, "cleanlab.internal.multiannotator_utils.assert_valid_inputs_multiannotator"]], "assert_valid_pred_probs() (in module cleanlab.internal.multiannotator_utils)": [[47, "cleanlab.internal.multiannotator_utils.assert_valid_pred_probs"]], "check_consensus_label_classes() (in module cleanlab.internal.multiannotator_utils)": [[47, "cleanlab.internal.multiannotator_utils.check_consensus_label_classes"]], "cleanlab.internal.multiannotator_utils": [[47, "module-cleanlab.internal.multiannotator_utils"]], "compute_soft_cross_entropy() (in module cleanlab.internal.multiannotator_utils)": [[47, "cleanlab.internal.multiannotator_utils.compute_soft_cross_entropy"]], "find_best_temp_scaler() (in module cleanlab.internal.multiannotator_utils)": [[47, "cleanlab.internal.multiannotator_utils.find_best_temp_scaler"]], "format_multiannotator_labels() (in module cleanlab.internal.multiannotator_utils)": [[47, "cleanlab.internal.multiannotator_utils.format_multiannotator_labels"]], "temp_scale_pred_probs() (in module cleanlab.internal.multiannotator_utils)": [[47, "cleanlab.internal.multiannotator_utils.temp_scale_pred_probs"]], "aggregator (class in cleanlab.internal.multilabel_scorer)": [[48, "cleanlab.internal.multilabel_scorer.Aggregator"]], "confidence_weighted_entropy (cleanlab.internal.multilabel_scorer.classlabelscorer attribute)": [[48, "cleanlab.internal.multilabel_scorer.ClassLabelScorer.CONFIDENCE_WEIGHTED_ENTROPY"]], "classlabelscorer (class in cleanlab.internal.multilabel_scorer)": [[48, "cleanlab.internal.multilabel_scorer.ClassLabelScorer"]], "multilabelscorer (class in cleanlab.internal.multilabel_scorer)": [[48, "cleanlab.internal.multilabel_scorer.MultilabelScorer"]], "normalized_margin (cleanlab.internal.multilabel_scorer.classlabelscorer attribute)": [[48, "cleanlab.internal.multilabel_scorer.ClassLabelScorer.NORMALIZED_MARGIN"]], "self_confidence (cleanlab.internal.multilabel_scorer.classlabelscorer attribute)": [[48, "cleanlab.internal.multilabel_scorer.ClassLabelScorer.SELF_CONFIDENCE"]], "__call__() (cleanlab.internal.multilabel_scorer.aggregator method)": [[48, "cleanlab.internal.multilabel_scorer.Aggregator.__call__"]], "__call__() (cleanlab.internal.multilabel_scorer.classlabelscorer method)": [[48, "cleanlab.internal.multilabel_scorer.ClassLabelScorer.__call__"]], "__call__() (cleanlab.internal.multilabel_scorer.multilabelscorer method)": [[48, "cleanlab.internal.multilabel_scorer.MultilabelScorer.__call__"]], "__contains__() (cleanlab.internal.multilabel_scorer.classlabelscorer class method)": [[48, "cleanlab.internal.multilabel_scorer.ClassLabelScorer.__contains__"]], "__getitem__() (cleanlab.internal.multilabel_scorer.classlabelscorer class method)": [[48, "cleanlab.internal.multilabel_scorer.ClassLabelScorer.__getitem__"]], "__iter__() (cleanlab.internal.multilabel_scorer.classlabelscorer class method)": [[48, "cleanlab.internal.multilabel_scorer.ClassLabelScorer.__iter__"]], "__len__() (cleanlab.internal.multilabel_scorer.classlabelscorer class method)": [[48, "cleanlab.internal.multilabel_scorer.ClassLabelScorer.__len__"]], "aggregate() (cleanlab.internal.multilabel_scorer.multilabelscorer method)": [[48, "cleanlab.internal.multilabel_scorer.MultilabelScorer.aggregate"]], "cleanlab.internal.multilabel_scorer": [[48, "module-cleanlab.internal.multilabel_scorer"]], "exponential_moving_average() (in module cleanlab.internal.multilabel_scorer)": [[48, "cleanlab.internal.multilabel_scorer.exponential_moving_average"]], "from_str() (cleanlab.internal.multilabel_scorer.classlabelscorer class method)": [[48, "cleanlab.internal.multilabel_scorer.ClassLabelScorer.from_str"]], "get_class_label_quality_scores() (cleanlab.internal.multilabel_scorer.multilabelscorer method)": [[48, "cleanlab.internal.multilabel_scorer.MultilabelScorer.get_class_label_quality_scores"]], "get_cross_validated_multilabel_pred_probs() (in module cleanlab.internal.multilabel_scorer)": [[48, "cleanlab.internal.multilabel_scorer.get_cross_validated_multilabel_pred_probs"]], "get_label_quality_scores() (in module cleanlab.internal.multilabel_scorer)": [[48, "cleanlab.internal.multilabel_scorer.get_label_quality_scores"]], "multilabel_py() (in module cleanlab.internal.multilabel_scorer)": [[48, "cleanlab.internal.multilabel_scorer.multilabel_py"]], "possible_methods (cleanlab.internal.multilabel_scorer.aggregator attribute)": [[48, "cleanlab.internal.multilabel_scorer.Aggregator.possible_methods"]], "softmin() (in module cleanlab.internal.multilabel_scorer)": [[48, "cleanlab.internal.multilabel_scorer.softmin"]], "cleanlab.internal.multilabel_utils": [[49, "module-cleanlab.internal.multilabel_utils"]], "get_onehot_num_classes() (in module cleanlab.internal.multilabel_utils)": [[49, "cleanlab.internal.multilabel_utils.get_onehot_num_classes"]], "int2onehot() (in module cleanlab.internal.multilabel_utils)": [[49, "cleanlab.internal.multilabel_utils.int2onehot"]], "onehot2int() (in module cleanlab.internal.multilabel_utils)": [[49, "cleanlab.internal.multilabel_utils.onehot2int"]], "stack_complement() (in module cleanlab.internal.multilabel_utils)": [[49, "cleanlab.internal.multilabel_utils.stack_complement"]], "cleanlab.internal.outlier": [[50, "module-cleanlab.internal.outlier"]], "transform_distances_to_scores() (in module cleanlab.internal.outlier)": [[50, "cleanlab.internal.outlier.transform_distances_to_scores"]], "cleanlab.internal.token_classification_utils": [[51, "module-cleanlab.internal.token_classification_utils"]], "color_sentence() (in module cleanlab.internal.token_classification_utils)": [[51, "cleanlab.internal.token_classification_utils.color_sentence"]], "filter_sentence() (in module cleanlab.internal.token_classification_utils)": [[51, "cleanlab.internal.token_classification_utils.filter_sentence"]], "get_sentence() (in module cleanlab.internal.token_classification_utils)": [[51, "cleanlab.internal.token_classification_utils.get_sentence"]], "mapping() (in module cleanlab.internal.token_classification_utils)": [[51, "cleanlab.internal.token_classification_utils.mapping"]], "merge_probs() (in module cleanlab.internal.token_classification_utils)": [[51, "cleanlab.internal.token_classification_utils.merge_probs"]], "process_token() (in module cleanlab.internal.token_classification_utils)": [[51, "cleanlab.internal.token_classification_utils.process_token"]], "append_extra_datapoint() (in module cleanlab.internal.util)": [[52, "cleanlab.internal.util.append_extra_datapoint"]], "cleanlab.internal.util": [[52, "module-cleanlab.internal.util"]], "clip_noise_rates() (in module cleanlab.internal.util)": [[52, "cleanlab.internal.util.clip_noise_rates"]], "clip_values() (in module cleanlab.internal.util)": [[52, "cleanlab.internal.util.clip_values"]], "compress_int_array() (in module cleanlab.internal.util)": [[52, "cleanlab.internal.util.compress_int_array"]], "confusion_matrix() (in module cleanlab.internal.util)": [[52, "cleanlab.internal.util.confusion_matrix"]], "csr_vstack() (in module cleanlab.internal.util)": [[52, "cleanlab.internal.util.csr_vstack"]], "estimate_pu_f1() (in module cleanlab.internal.util)": [[52, "cleanlab.internal.util.estimate_pu_f1"]], "extract_indices_tf() (in module cleanlab.internal.util)": [[52, "cleanlab.internal.util.extract_indices_tf"]], "force_two_dimensions() (in module cleanlab.internal.util)": [[52, "cleanlab.internal.util.force_two_dimensions"]], "format_labels() (in module cleanlab.internal.util)": [[52, "cleanlab.internal.util.format_labels"]], "get_missing_classes() (in module cleanlab.internal.util)": [[52, "cleanlab.internal.util.get_missing_classes"]], "get_num_classes() (in module cleanlab.internal.util)": [[52, "cleanlab.internal.util.get_num_classes"]], "get_unique_classes() (in module cleanlab.internal.util)": [[52, "cleanlab.internal.util.get_unique_classes"]], "is_tensorflow_dataset() (in module cleanlab.internal.util)": [[52, "cleanlab.internal.util.is_tensorflow_dataset"]], "is_torch_dataset() (in module cleanlab.internal.util)": [[52, "cleanlab.internal.util.is_torch_dataset"]], "num_unique_classes() (in module cleanlab.internal.util)": [[52, "cleanlab.internal.util.num_unique_classes"]], "print_inverse_noise_matrix() (in module cleanlab.internal.util)": [[52, "cleanlab.internal.util.print_inverse_noise_matrix"]], "print_joint_matrix() (in module cleanlab.internal.util)": [[52, "cleanlab.internal.util.print_joint_matrix"]], "print_noise_matrix() (in module cleanlab.internal.util)": [[52, "cleanlab.internal.util.print_noise_matrix"]], "print_square_matrix() (in module cleanlab.internal.util)": [[52, "cleanlab.internal.util.print_square_matrix"]], "remove_noise_from_class() (in module cleanlab.internal.util)": [[52, "cleanlab.internal.util.remove_noise_from_class"]], "round_preserving_row_totals() (in module cleanlab.internal.util)": [[52, "cleanlab.internal.util.round_preserving_row_totals"]], "round_preserving_sum() (in module cleanlab.internal.util)": [[52, "cleanlab.internal.util.round_preserving_sum"]], "smart_display_dataframe() (in module cleanlab.internal.util)": [[52, "cleanlab.internal.util.smart_display_dataframe"]], "subset_x_y() (in module cleanlab.internal.util)": [[52, "cleanlab.internal.util.subset_X_y"]], "subset_data() (in module cleanlab.internal.util)": [[52, "cleanlab.internal.util.subset_data"]], "subset_labels() (in module cleanlab.internal.util)": [[52, "cleanlab.internal.util.subset_labels"]], "train_val_split() (in module cleanlab.internal.util)": [[52, "cleanlab.internal.util.train_val_split"]], "unshuffle_tensorflow_dataset() (in module cleanlab.internal.util)": [[52, "cleanlab.internal.util.unshuffle_tensorflow_dataset"]], "value_counts() (in module cleanlab.internal.util)": [[52, "cleanlab.internal.util.value_counts"]], "value_counts_fill_missing_classes() (in module cleanlab.internal.util)": [[52, "cleanlab.internal.util.value_counts_fill_missing_classes"]], "assert_indexing_works() (in module cleanlab.internal.validation)": [[53, "cleanlab.internal.validation.assert_indexing_works"]], "assert_nonempty_input() (in module cleanlab.internal.validation)": [[53, "cleanlab.internal.validation.assert_nonempty_input"]], "assert_valid_class_labels() (in module cleanlab.internal.validation)": [[53, "cleanlab.internal.validation.assert_valid_class_labels"]], "assert_valid_inputs() (in module cleanlab.internal.validation)": [[53, "cleanlab.internal.validation.assert_valid_inputs"]], "cleanlab.internal.validation": [[53, "module-cleanlab.internal.validation"]], "labels_to_array() (in module cleanlab.internal.validation)": [[53, "cleanlab.internal.validation.labels_to_array"]], "labels_to_list_multilabel() (in module cleanlab.internal.validation)": [[53, "cleanlab.internal.validation.labels_to_list_multilabel"]], "cleanlab.models": [[55, "module-cleanlab.models"]], "keraswrappermodel (class in cleanlab.models.keras)": [[56, "cleanlab.models.keras.KerasWrapperModel"]], "keraswrappersequential (class in cleanlab.models.keras)": [[56, "cleanlab.models.keras.KerasWrapperSequential"]], "cleanlab.models.keras": [[56, "module-cleanlab.models.keras"]], "fit() (cleanlab.models.keras.keraswrappermodel method)": [[56, "cleanlab.models.keras.KerasWrapperModel.fit"]], "fit() (cleanlab.models.keras.keraswrappersequential method)": [[56, "cleanlab.models.keras.KerasWrapperSequential.fit"]], "get_params() (cleanlab.models.keras.keraswrappermodel method)": [[56, "cleanlab.models.keras.KerasWrapperModel.get_params"]], "get_params() (cleanlab.models.keras.keraswrappersequential method)": [[56, "cleanlab.models.keras.KerasWrapperSequential.get_params"]], "predict() (cleanlab.models.keras.keraswrappermodel method)": [[56, "cleanlab.models.keras.KerasWrapperModel.predict"]], "predict() (cleanlab.models.keras.keraswrappersequential method)": [[56, "cleanlab.models.keras.KerasWrapperSequential.predict"]], "predict_proba() (cleanlab.models.keras.keraswrappermodel method)": [[56, "cleanlab.models.keras.KerasWrapperModel.predict_proba"]], "predict_proba() (cleanlab.models.keras.keraswrappersequential method)": [[56, "cleanlab.models.keras.KerasWrapperSequential.predict_proba"]], "set_params() (cleanlab.models.keras.keraswrappermodel method)": [[56, "cleanlab.models.keras.KerasWrapperModel.set_params"]], "set_params() (cleanlab.models.keras.keraswrappersequential method)": [[56, "cleanlab.models.keras.KerasWrapperSequential.set_params"]], "summary() (cleanlab.models.keras.keraswrappermodel method)": [[56, "cleanlab.models.keras.KerasWrapperModel.summary"]], "summary() (cleanlab.models.keras.keraswrappersequential method)": [[56, "cleanlab.models.keras.KerasWrapperSequential.summary"]], "cleanlab.multiannotator": [[57, "module-cleanlab.multiannotator"]], "convert_long_to_wide_dataset() (in module cleanlab.multiannotator)": [[57, "cleanlab.multiannotator.convert_long_to_wide_dataset"]], "get_active_learning_scores() (in module cleanlab.multiannotator)": [[57, "cleanlab.multiannotator.get_active_learning_scores"]], "get_active_learning_scores_ensemble() (in module cleanlab.multiannotator)": [[57, "cleanlab.multiannotator.get_active_learning_scores_ensemble"]], "get_label_quality_multiannotator() (in module cleanlab.multiannotator)": [[57, "cleanlab.multiannotator.get_label_quality_multiannotator"]], "get_label_quality_multiannotator_ensemble() (in module cleanlab.multiannotator)": [[57, "cleanlab.multiannotator.get_label_quality_multiannotator_ensemble"]], "get_majority_vote_label() (in module cleanlab.multiannotator)": [[57, "cleanlab.multiannotator.get_majority_vote_label"]], "cleanlab.multilabel_classification.dataset": [[58, "module-cleanlab.multilabel_classification.dataset"]], "common_multilabel_issues() (in module cleanlab.multilabel_classification.dataset)": [[58, "cleanlab.multilabel_classification.dataset.common_multilabel_issues"]], "multilabel_health_summary() (in module cleanlab.multilabel_classification.dataset)": [[58, "cleanlab.multilabel_classification.dataset.multilabel_health_summary"]], "overall_multilabel_health_score() (in module cleanlab.multilabel_classification.dataset)": [[58, "cleanlab.multilabel_classification.dataset.overall_multilabel_health_score"]], "rank_classes_by_multilabel_quality() (in module cleanlab.multilabel_classification.dataset)": [[58, "cleanlab.multilabel_classification.dataset.rank_classes_by_multilabel_quality"]], "cleanlab.multilabel_classification.filter": [[59, "module-cleanlab.multilabel_classification.filter"]], "find_label_issues() (in module cleanlab.multilabel_classification.filter)": [[59, "cleanlab.multilabel_classification.filter.find_label_issues"]], "find_multilabel_issues_per_class() (in module cleanlab.multilabel_classification.filter)": [[59, "cleanlab.multilabel_classification.filter.find_multilabel_issues_per_class"]], "cleanlab.multilabel_classification": [[60, "module-cleanlab.multilabel_classification"]], "cleanlab.multilabel_classification.rank": [[61, "module-cleanlab.multilabel_classification.rank"]], "get_label_quality_scores() (in module cleanlab.multilabel_classification.rank)": [[61, "cleanlab.multilabel_classification.rank.get_label_quality_scores"]], "get_label_quality_scores_per_class() (in module cleanlab.multilabel_classification.rank)": [[61, "cleanlab.multilabel_classification.rank.get_label_quality_scores_per_class"]], "cleanlab.object_detection.filter": [[62, "module-cleanlab.object_detection.filter"]], "find_label_issues() (in module cleanlab.object_detection.filter)": [[62, "cleanlab.object_detection.filter.find_label_issues"]], "cleanlab.object_detection": [[63, "module-cleanlab.object_detection"]], "cleanlab.object_detection.rank": [[64, "module-cleanlab.object_detection.rank"]], "compute_badloc_box_scores() (in module cleanlab.object_detection.rank)": [[64, "cleanlab.object_detection.rank.compute_badloc_box_scores"]], "compute_overlooked_box_scores() (in module cleanlab.object_detection.rank)": [[64, "cleanlab.object_detection.rank.compute_overlooked_box_scores"]], "compute_swap_box_scores() (in module cleanlab.object_detection.rank)": [[64, "cleanlab.object_detection.rank.compute_swap_box_scores"]], "get_label_quality_scores() (in module cleanlab.object_detection.rank)": [[64, "cleanlab.object_detection.rank.get_label_quality_scores"]], "issues_from_scores() (in module cleanlab.object_detection.rank)": [[64, "cleanlab.object_detection.rank.issues_from_scores"]], "pool_box_scores_per_image() (in module cleanlab.object_detection.rank)": [[64, "cleanlab.object_detection.rank.pool_box_scores_per_image"]], "bounding_box_size_distribution() (in module cleanlab.object_detection.summary)": [[65, "cleanlab.object_detection.summary.bounding_box_size_distribution"]], "calculate_per_class_metrics() (in module cleanlab.object_detection.summary)": [[65, "cleanlab.object_detection.summary.calculate_per_class_metrics"]], "class_label_distribution() (in module cleanlab.object_detection.summary)": [[65, "cleanlab.object_detection.summary.class_label_distribution"]], "cleanlab.object_detection.summary": [[65, "module-cleanlab.object_detection.summary"]], "get_average_per_class_confusion_matrix() (in module cleanlab.object_detection.summary)": [[65, "cleanlab.object_detection.summary.get_average_per_class_confusion_matrix"]], "get_sorted_bbox_count_idxs() (in module cleanlab.object_detection.summary)": [[65, "cleanlab.object_detection.summary.get_sorted_bbox_count_idxs"]], "object_counts_per_image() (in module cleanlab.object_detection.summary)": [[65, "cleanlab.object_detection.summary.object_counts_per_image"]], "plot_class_distribution() (in module cleanlab.object_detection.summary)": [[65, "cleanlab.object_detection.summary.plot_class_distribution"]], "plot_class_size_distributions() (in module cleanlab.object_detection.summary)": [[65, "cleanlab.object_detection.summary.plot_class_size_distributions"]], "visualize() (in module cleanlab.object_detection.summary)": [[65, "cleanlab.object_detection.summary.visualize"]], "outofdistribution (class in cleanlab.outlier)": [[66, "cleanlab.outlier.OutOfDistribution"]], "cleanlab.outlier": [[66, "module-cleanlab.outlier"]], "fit() (cleanlab.outlier.outofdistribution method)": [[66, "cleanlab.outlier.OutOfDistribution.fit"]], "fit_score() (cleanlab.outlier.outofdistribution method)": [[66, "cleanlab.outlier.OutOfDistribution.fit_score"]], "score() (cleanlab.outlier.outofdistribution method)": [[66, "cleanlab.outlier.OutOfDistribution.score"]], "cleanlab.rank": [[67, "module-cleanlab.rank"]], "find_top_issues() (in module cleanlab.rank)": [[67, "cleanlab.rank.find_top_issues"]], "get_confidence_weighted_entropy_for_each_label() (in module cleanlab.rank)": [[67, "cleanlab.rank.get_confidence_weighted_entropy_for_each_label"]], "get_label_quality_ensemble_scores() (in module cleanlab.rank)": [[67, "cleanlab.rank.get_label_quality_ensemble_scores"]], "get_label_quality_scores() (in module cleanlab.rank)": [[67, "cleanlab.rank.get_label_quality_scores"]], "get_normalized_margin_for_each_label() (in module cleanlab.rank)": [[67, "cleanlab.rank.get_normalized_margin_for_each_label"]], "get_self_confidence_for_each_label() (in module cleanlab.rank)": [[67, "cleanlab.rank.get_self_confidence_for_each_label"]], "order_label_issues() (in module cleanlab.rank)": [[67, "cleanlab.rank.order_label_issues"]], "cleanlab.regression": [[68, "module-cleanlab.regression"]], "cleanlearning (class in cleanlab.regression.learn)": [[69, "cleanlab.regression.learn.CleanLearning"]], "__init_subclass__() (cleanlab.regression.learn.cleanlearning class method)": [[69, "cleanlab.regression.learn.CleanLearning.__init_subclass__"]], "cleanlab.regression.learn": [[69, "module-cleanlab.regression.learn"]], "find_label_issues() (cleanlab.regression.learn.cleanlearning method)": [[69, "cleanlab.regression.learn.CleanLearning.find_label_issues"]], "fit() (cleanlab.regression.learn.cleanlearning method)": [[69, "cleanlab.regression.learn.CleanLearning.fit"]], "get_aleatoric_uncertainty() (cleanlab.regression.learn.cleanlearning method)": [[69, "cleanlab.regression.learn.CleanLearning.get_aleatoric_uncertainty"]], "get_epistemic_uncertainty() (cleanlab.regression.learn.cleanlearning method)": [[69, "cleanlab.regression.learn.CleanLearning.get_epistemic_uncertainty"]], "get_label_issues() (cleanlab.regression.learn.cleanlearning method)": [[69, "cleanlab.regression.learn.CleanLearning.get_label_issues"]], "get_metadata_routing() (cleanlab.regression.learn.cleanlearning method)": [[69, "cleanlab.regression.learn.CleanLearning.get_metadata_routing"]], "get_params() (cleanlab.regression.learn.cleanlearning method)": [[69, "cleanlab.regression.learn.CleanLearning.get_params"]], "predict() (cleanlab.regression.learn.cleanlearning method)": [[69, "cleanlab.regression.learn.CleanLearning.predict"]], "save_space() (cleanlab.regression.learn.cleanlearning method)": [[69, "cleanlab.regression.learn.CleanLearning.save_space"]], "score() (cleanlab.regression.learn.cleanlearning method)": [[69, "cleanlab.regression.learn.CleanLearning.score"]], "set_fit_request() (cleanlab.regression.learn.cleanlearning method)": [[69, "cleanlab.regression.learn.CleanLearning.set_fit_request"]], "set_params() (cleanlab.regression.learn.cleanlearning method)": [[69, "cleanlab.regression.learn.CleanLearning.set_params"]], "set_score_request() (cleanlab.regression.learn.cleanlearning method)": [[69, "cleanlab.regression.learn.CleanLearning.set_score_request"]], "cleanlab.regression.rank": [[70, "module-cleanlab.regression.rank"]], "get_label_quality_scores() (in module cleanlab.regression.rank)": [[70, "cleanlab.regression.rank.get_label_quality_scores"]], "cleanlab.segmentation.filter": [[71, "module-cleanlab.segmentation.filter"]], "find_label_issues() (in module cleanlab.segmentation.filter)": [[71, "cleanlab.segmentation.filter.find_label_issues"]], "cleanlab.segmentation": [[72, "module-cleanlab.segmentation"]], "cleanlab.segmentation.rank": [[73, "module-cleanlab.segmentation.rank"]], "get_label_quality_scores() (in module cleanlab.segmentation.rank)": [[73, "cleanlab.segmentation.rank.get_label_quality_scores"]], "issues_from_scores() (in module cleanlab.segmentation.rank)": [[73, "cleanlab.segmentation.rank.issues_from_scores"]], "cleanlab.segmentation.summary": [[74, "module-cleanlab.segmentation.summary"]], "common_label_issues() (in module cleanlab.segmentation.summary)": [[74, "cleanlab.segmentation.summary.common_label_issues"]], "display_issues() (in module cleanlab.segmentation.summary)": [[74, "cleanlab.segmentation.summary.display_issues"]], "filter_by_class() (in module cleanlab.segmentation.summary)": [[74, "cleanlab.segmentation.summary.filter_by_class"]], "cleanlab.token_classification.filter": [[75, "module-cleanlab.token_classification.filter"]], "find_label_issues() (in module cleanlab.token_classification.filter)": [[75, "cleanlab.token_classification.filter.find_label_issues"]], "cleanlab.token_classification": [[76, "module-cleanlab.token_classification"]], "cleanlab.token_classification.rank": [[77, "module-cleanlab.token_classification.rank"]], "get_label_quality_scores() (in module cleanlab.token_classification.rank)": [[77, "cleanlab.token_classification.rank.get_label_quality_scores"]], "issues_from_scores() (in module cleanlab.token_classification.rank)": [[77, "cleanlab.token_classification.rank.issues_from_scores"]], "cleanlab.token_classification.summary": [[78, "module-cleanlab.token_classification.summary"]], "common_label_issues() (in module cleanlab.token_classification.summary)": [[78, "cleanlab.token_classification.summary.common_label_issues"]], "display_issues() (in module cleanlab.token_classification.summary)": [[78, "cleanlab.token_classification.summary.display_issues"]], "filter_by_token() (in module cleanlab.token_classification.summary)": [[78, "cleanlab.token_classification.summary.filter_by_token"]]}})