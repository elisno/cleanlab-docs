Search.setIndex({"docnames": ["cleanlab/benchmarking/index", "cleanlab/benchmarking/noise_generation", "cleanlab/classification", "cleanlab/count", "cleanlab/datalab/datalab", "cleanlab/datalab/guide/custom_issue_manager", "cleanlab/datalab/guide/generating_cluster_ids", "cleanlab/datalab/guide/index", "cleanlab/datalab/guide/issue_type_description", "cleanlab/datalab/index", "cleanlab/datalab/internal/data", "cleanlab/datalab/internal/data_issues", "cleanlab/datalab/internal/factory", "cleanlab/datalab/internal/index", "cleanlab/datalab/internal/issue_finder", "cleanlab/datalab/internal/issue_manager/_notices/not_registered", "cleanlab/datalab/internal/issue_manager/data_valuation", "cleanlab/datalab/internal/issue_manager/duplicate", "cleanlab/datalab/internal/issue_manager/imbalance", "cleanlab/datalab/internal/issue_manager/index", "cleanlab/datalab/internal/issue_manager/issue_manager", "cleanlab/datalab/internal/issue_manager/label", "cleanlab/datalab/internal/issue_manager/multilabel/index", "cleanlab/datalab/internal/issue_manager/multilabel/label", "cleanlab/datalab/internal/issue_manager/noniid", "cleanlab/datalab/internal/issue_manager/null", "cleanlab/datalab/internal/issue_manager/outlier", "cleanlab/datalab/internal/issue_manager/regression/index", "cleanlab/datalab/internal/issue_manager/regression/label", "cleanlab/datalab/internal/issue_manager/underperforming_group", "cleanlab/datalab/internal/model_outputs", "cleanlab/datalab/internal/report", "cleanlab/datalab/internal/task", "cleanlab/datalab/optional_dependencies", "cleanlab/dataset", "cleanlab/experimental/cifar_cnn", "cleanlab/experimental/coteaching", "cleanlab/experimental/index", "cleanlab/experimental/label_issues_batched", "cleanlab/experimental/mnist_pytorch", "cleanlab/experimental/span_classification", "cleanlab/filter", "cleanlab/internal/index", "cleanlab/internal/label_quality_utils", "cleanlab/internal/latent_algebra", "cleanlab/internal/multiannotator_utils", "cleanlab/internal/multilabel_scorer", "cleanlab/internal/multilabel_utils", "cleanlab/internal/outlier", "cleanlab/internal/token_classification_utils", "cleanlab/internal/util", "cleanlab/internal/validation", "cleanlab/models/fasttext", "cleanlab/models/index", "cleanlab/models/keras", "cleanlab/multiannotator", "cleanlab/multilabel_classification/dataset", "cleanlab/multilabel_classification/filter", "cleanlab/multilabel_classification/index", "cleanlab/multilabel_classification/rank", "cleanlab/object_detection/filter", "cleanlab/object_detection/index", "cleanlab/object_detection/rank", "cleanlab/object_detection/summary", "cleanlab/outlier", "cleanlab/rank", "cleanlab/regression/index", "cleanlab/regression/learn", "cleanlab/regression/rank", "cleanlab/segmentation/filter", "cleanlab/segmentation/index", "cleanlab/segmentation/rank", "cleanlab/segmentation/summary", "cleanlab/token_classification/filter", "cleanlab/token_classification/index", "cleanlab/token_classification/rank", "cleanlab/token_classification/summary", "index", "migrating/migrate_v2", "tutorials/audio", "tutorials/datalab/datalab_advanced", "tutorials/datalab/datalab_quickstart", "tutorials/datalab/index", "tutorials/datalab/tabular", "tutorials/datalab/text", "tutorials/dataset_health", "tutorials/faq", "tutorials/image", "tutorials/indepth_overview", "tutorials/index", "tutorials/multiannotator", "tutorials/multilabel_classification", "tutorials/object_detection", "tutorials/outliers", "tutorials/pred_probs_cross_val", "tutorials/regression", "tutorials/segmentation", "tutorials/tabular", "tutorials/text", "tutorials/token_classification"], "filenames": ["cleanlab/benchmarking/index.rst", "cleanlab/benchmarking/noise_generation.rst", "cleanlab/classification.rst", "cleanlab/count.rst", "cleanlab/datalab/datalab.rst", "cleanlab/datalab/guide/custom_issue_manager.rst", "cleanlab/datalab/guide/generating_cluster_ids.rst", "cleanlab/datalab/guide/index.rst", "cleanlab/datalab/guide/issue_type_description.rst", "cleanlab/datalab/index.rst", "cleanlab/datalab/internal/data.rst", "cleanlab/datalab/internal/data_issues.rst", "cleanlab/datalab/internal/factory.rst", "cleanlab/datalab/internal/index.rst", "cleanlab/datalab/internal/issue_finder.rst", "cleanlab/datalab/internal/issue_manager/_notices/not_registered.rst", "cleanlab/datalab/internal/issue_manager/data_valuation.rst", "cleanlab/datalab/internal/issue_manager/duplicate.rst", "cleanlab/datalab/internal/issue_manager/imbalance.rst", "cleanlab/datalab/internal/issue_manager/index.rst", "cleanlab/datalab/internal/issue_manager/issue_manager.rst", "cleanlab/datalab/internal/issue_manager/label.rst", "cleanlab/datalab/internal/issue_manager/multilabel/index.rst", "cleanlab/datalab/internal/issue_manager/multilabel/label.rst", "cleanlab/datalab/internal/issue_manager/noniid.rst", "cleanlab/datalab/internal/issue_manager/null.rst", "cleanlab/datalab/internal/issue_manager/outlier.rst", "cleanlab/datalab/internal/issue_manager/regression/index.rst", "cleanlab/datalab/internal/issue_manager/regression/label.rst", "cleanlab/datalab/internal/issue_manager/underperforming_group.rst", "cleanlab/datalab/internal/model_outputs.rst", "cleanlab/datalab/internal/report.rst", "cleanlab/datalab/internal/task.rst", "cleanlab/datalab/optional_dependencies.rst", "cleanlab/dataset.rst", "cleanlab/experimental/cifar_cnn.rst", "cleanlab/experimental/coteaching.rst", "cleanlab/experimental/index.rst", "cleanlab/experimental/label_issues_batched.rst", "cleanlab/experimental/mnist_pytorch.rst", "cleanlab/experimental/span_classification.rst", "cleanlab/filter.rst", "cleanlab/internal/index.rst", "cleanlab/internal/label_quality_utils.rst", "cleanlab/internal/latent_algebra.rst", "cleanlab/internal/multiannotator_utils.rst", "cleanlab/internal/multilabel_scorer.rst", "cleanlab/internal/multilabel_utils.rst", "cleanlab/internal/outlier.rst", "cleanlab/internal/token_classification_utils.rst", "cleanlab/internal/util.rst", "cleanlab/internal/validation.rst", "cleanlab/models/fasttext.rst", "cleanlab/models/index.rst", "cleanlab/models/keras.rst", "cleanlab/multiannotator.rst", "cleanlab/multilabel_classification/dataset.rst", "cleanlab/multilabel_classification/filter.rst", "cleanlab/multilabel_classification/index.rst", "cleanlab/multilabel_classification/rank.rst", "cleanlab/object_detection/filter.rst", "cleanlab/object_detection/index.rst", "cleanlab/object_detection/rank.rst", "cleanlab/object_detection/summary.rst", "cleanlab/outlier.rst", "cleanlab/rank.rst", "cleanlab/regression/index.rst", "cleanlab/regression/learn.rst", "cleanlab/regression/rank.rst", "cleanlab/segmentation/filter.rst", "cleanlab/segmentation/index.rst", "cleanlab/segmentation/rank.rst", "cleanlab/segmentation/summary.rst", "cleanlab/token_classification/filter.rst", "cleanlab/token_classification/index.rst", "cleanlab/token_classification/rank.rst", "cleanlab/token_classification/summary.rst", "index.rst", "migrating/migrate_v2.rst", "tutorials/audio.ipynb", "tutorials/datalab/datalab_advanced.ipynb", "tutorials/datalab/datalab_quickstart.ipynb", "tutorials/datalab/index.rst", "tutorials/datalab/tabular.ipynb", "tutorials/datalab/text.ipynb", "tutorials/dataset_health.ipynb", "tutorials/faq.ipynb", "tutorials/image.ipynb", "tutorials/indepth_overview.ipynb", "tutorials/index.rst", "tutorials/multiannotator.ipynb", "tutorials/multilabel_classification.ipynb", "tutorials/object_detection.ipynb", "tutorials/outliers.ipynb", "tutorials/pred_probs_cross_val.rst", "tutorials/regression.ipynb", "tutorials/segmentation.ipynb", "tutorials/tabular.ipynb", "tutorials/text.ipynb", "tutorials/token_classification.ipynb"], "titles": ["benchmarking", "noise_generation", "classification", "count", "datalab", "Creating Your Own Issues Manager", "Generating Cluster IDs", "Datalab guides", "Datalab Issue Types", "datalab", "data", "data_issues", "factory", "internal", "issue_finder", "&lt;no title&gt;", "data_valuation", "duplicate", "imbalance", "issue_manager", "issue_manager", "label", "multilabel", "label", "noniid", "null", "outlier", "regression", "label", "underperforming_group", "model_outputs", "report", "task", "&lt;no title&gt;", "dataset", "cifar_cnn", "coteaching", "experimental", "label_issues_batched", "mnist_pytorch", "span_classification", "filter", "internal", "label_quality_utils", "latent_algebra", "multiannotator_utils", "multilabel_scorer", "multilabel_utils", "outlier", "token_classification_utils", "util", "validation", "fasttext", "models", "keras", "multiannotator", "dataset", "filter", "multilabel_classification", "rank", "filter", "object_detection", "rank", "summary", "outlier", "rank", "regression", "regression.learn", "regression.rank", "filter", "segmentation", "rank", "summary", "filter", "token_classification", "rank", "summary", "cleanlab open-source documentation", "How to migrate to versions &gt;= 2.0.0 from pre 1.0.1", "Audio Classification with SpeechBrain and Cleanlab", "Datalab: Advanced workflows to audit your data", "Datalab: A unified audit to detect all kinds of issues in data and labels", "Datalab Tutorials", "Detecting Issues in Tabular Data\u00a0(Numeric/Categorical columns) with Datalab", "Detecting Issues in a Text Dataset with Datalab", "Find Dataset-level Issues for Dataset Curation", "FAQ", "Image Classification with PyTorch and Cleanlab", "The Workflows of Data-centric AI for Classification with Noisy Labels", "Tutorials", "Estimate Consensus and Annotator Quality for Data Labeled by Multiple Annotators", "Find Label Errors in Multi-Label Classification Datasets", "Finding Label Errors in Object Detection Datasets", "Detect Outliers with Cleanlab and PyTorch Image Models (timm)", "Computing Out-of-Sample Predicted Probabilities with Cross-Validation", "Find Noisy Labels in Regression Datasets", "Find Label Errors in Semantic Segmentation Datasets", "Classification with Tabular Data using Scikit-Learn and Cleanlab", "Text Classification with Noisy Labels", "Find Label Errors in Token Classification (Text) Datasets"], "terms": {"noise_gener": [0, 78, 80, 81, 88, 90, 91], "noise_matrix_is_valid": [0, 1], "generate_noisy_label": [0, 1, 80, 81, 88, 90, 91], "generate_noise_matrix_from_trac": [0, 1, 80, 81, 88, 90, 91], "generate_n_rand_probabilities_that_sum_to_m": [0, 1], "randomly_distribute_n_balls_into_k_bin": [0, 1], "helper": [1, 14, 38, 43, 45, 46, 47, 48, 49, 50, 62, 85, 87, 99], "method": [1, 2, 3, 4, 5, 8, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 83, 84, 86, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99], "ar": [1, 2, 3, 4, 5, 8, 10, 11, 12, 13, 14, 16, 18, 19, 20, 21, 22, 24, 27, 28, 30, 32, 34, 35, 37, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 53, 54, 55, 56, 57, 59, 60, 62, 63, 64, 65, 67, 68, 69, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 83, 84, 86, 87, 88, 90, 91, 92, 93, 94, 95, 97, 98, 99], "us": [1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 53, 54, 55, 56, 57, 59, 60, 62, 63, 64, 65, 67, 68, 69, 71, 72, 73, 75, 77, 78, 80, 85, 89, 94], "benchmark": [1, 35, 77, 78, 80, 81, 88, 90, 91], "cleanlab": [1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 53, 54, 55, 56, 57, 59, 60, 62, 63, 64, 65, 67, 68, 69, 71, 72, 73, 75, 76, 78, 80, 81, 85, 89, 94], "": [1, 2, 3, 8, 16, 30, 34, 35, 39, 43, 46, 48, 50, 55, 56, 60, 62, 63, 64, 65, 67, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99], "core": [1, 38, 41, 69, 71], "algorithm": [1, 2, 6, 8, 29, 36, 40, 50, 55, 64, 73, 75, 77, 86, 88, 90, 99], "These": [1, 2, 3, 4, 6, 8, 19, 35, 37, 39, 40, 41, 42, 53, 55, 56, 59, 63, 64, 68, 72, 73, 75, 76, 79, 81, 83, 84, 86, 87, 88, 90, 91, 92, 93, 95, 96, 97, 98, 99], "introduc": [1, 79, 86, 88], "synthet": [1, 90, 91, 96], "nois": [1, 2, 3, 34, 41, 44, 50, 56, 80, 81, 85, 90, 95], "label": [1, 2, 3, 4, 5, 6, 7, 10, 12, 13, 14, 18, 19, 20, 22, 27, 29, 32, 34, 35, 36, 38, 39, 40, 41, 43, 44, 45, 46, 47, 50, 51, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 80, 85, 89, 93, 94], "classif": [1, 3, 4, 5, 8, 10, 12, 14, 30, 32, 34, 38, 40, 41, 44, 46, 47, 50, 55, 56, 57, 58, 59, 64, 65, 73, 74, 75, 76, 77, 78, 80, 81, 89, 90, 93, 94, 95, 96], "dataset": [1, 2, 3, 4, 5, 8, 10, 11, 12, 14, 16, 17, 18, 20, 23, 24, 25, 26, 28, 29, 37, 38, 39, 40, 41, 44, 46, 50, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 82, 83, 89, 90, 94, 97], "specif": [1, 3, 4, 7, 12, 13, 14, 25, 31, 32, 37, 53, 57, 60, 63, 72, 76, 83, 84, 87, 88, 92, 99], "thi": [1, 2, 3, 4, 5, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 46, 47, 49, 50, 51, 53, 54, 55, 56, 57, 59, 60, 62, 63, 64, 65, 67, 68, 69, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99], "modul": [1, 3, 11, 12, 13, 14, 19, 22, 27, 30, 31, 32, 34, 35, 36, 37, 38, 39, 41, 46, 48, 50, 53, 55, 60, 63, 64, 65, 77, 86, 87, 91], "provid": [1, 2, 3, 4, 5, 6, 8, 12, 14, 16, 21, 28, 32, 34, 35, 36, 38, 39, 41, 44, 50, 54, 55, 56, 57, 62, 63, 64, 65, 67, 69, 71, 72, 75, 76, 77, 79, 80, 81, 83, 84, 86, 87, 88, 90, 93, 94, 95, 96, 97, 98, 99], "gener": [1, 2, 3, 5, 8, 16, 21, 23, 31, 34, 46, 50, 51, 64, 65, 67, 72, 79, 80, 81, 84, 85, 86, 87, 88, 90, 91, 93, 94, 96, 98, 99], "valid": [1, 2, 3, 4, 8, 10, 30, 32, 34, 41, 42, 44, 45, 46, 48, 50, 55, 57, 60, 63, 65, 67, 68, 76, 78, 79, 80, 81, 83, 84, 85, 86, 88, 89, 91, 92, 95, 96, 97, 98, 99], "matric": [1, 3, 44, 86], "which": [1, 2, 3, 4, 5, 8, 10, 11, 12, 14, 16, 20, 24, 30, 31, 32, 34, 35, 39, 40, 41, 44, 46, 49, 50, 55, 56, 57, 60, 62, 63, 64, 65, 67, 68, 71, 72, 73, 75, 77, 78, 79, 80, 81, 83, 84, 86, 87, 88, 90, 91, 92, 93, 94, 95, 97, 98, 99], "learn": [1, 2, 3, 4, 8, 12, 14, 20, 28, 31, 36, 37, 38, 39, 41, 43, 45, 50, 53, 55, 57, 64, 66, 68, 71, 75, 77, 79, 80, 83, 84, 85, 87, 89, 90, 91, 95, 98], "i": [1, 2, 3, 4, 5, 6, 8, 10, 11, 12, 14, 16, 17, 18, 20, 21, 23, 24, 25, 26, 28, 29, 30, 31, 32, 34, 35, 36, 38, 39, 40, 41, 43, 44, 45, 46, 48, 49, 50, 51, 54, 55, 56, 57, 59, 60, 62, 63, 64, 65, 67, 68, 69, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 87, 90, 91, 92, 93, 95, 96, 97, 98, 99], "possibl": [1, 2, 3, 5, 8, 34, 35, 39, 41, 43, 44, 46, 57, 58, 59, 60, 62, 63, 64, 65, 67, 73, 75, 76, 81, 86, 88, 90, 91, 92, 95, 96, 99], "noisi": [1, 2, 3, 8, 34, 36, 39, 41, 44, 50, 56, 57, 59, 65, 67, 68, 69, 71, 72, 78, 80, 81, 83, 84, 86, 89, 90], "given": [1, 2, 3, 4, 8, 12, 28, 34, 35, 36, 38, 39, 40, 41, 43, 44, 45, 46, 49, 50, 55, 56, 57, 60, 62, 63, 64, 65, 67, 68, 72, 73, 75, 76, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 90, 92, 93, 95, 96, 97, 98, 99], "matrix": [1, 2, 3, 4, 8, 14, 16, 29, 34, 41, 43, 44, 47, 50, 51, 57, 60, 62, 63, 64, 65, 83, 92, 93], "trace": [1, 80, 81, 88, 90, 91], "valu": [1, 2, 3, 4, 8, 10, 11, 14, 16, 20, 24, 25, 30, 32, 34, 35, 36, 38, 39, 41, 43, 44, 46, 48, 50, 55, 56, 57, 59, 60, 62, 63, 64, 65, 67, 68, 69, 71, 72, 73, 76, 79, 81, 83, 84, 86, 87, 88, 90, 91, 92, 93, 95, 96, 98, 99], "more": [1, 2, 3, 4, 5, 8, 11, 12, 14, 16, 24, 34, 35, 38, 39, 40, 43, 46, 48, 50, 55, 56, 57, 58, 59, 60, 62, 63, 65, 67, 68, 71, 72, 73, 75, 77, 79, 80, 83, 84, 85, 86, 87, 90, 91, 92, 93, 96, 99], "function": [1, 2, 3, 4, 5, 11, 12, 14, 21, 24, 28, 34, 35, 36, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 54, 55, 56, 57, 59, 60, 62, 63, 64, 65, 67, 68, 69, 71, 72, 73, 75, 76, 79, 81, 85, 86, 88, 90, 91, 92, 96, 97, 98, 99], "noise_matrix": [1, 2, 3, 8, 44, 50, 80, 81, 88, 90, 91], "py": [1, 3, 31, 35, 36, 41, 44, 46, 79, 80, 81, 84, 86, 88, 90, 91, 98], "verbos": [1, 2, 4, 5, 14, 16, 17, 18, 20, 21, 23, 24, 25, 26, 28, 29, 31, 34, 38, 41, 55, 56, 57, 62, 64, 65, 67, 69, 71, 72, 76, 80, 88, 90], "fals": [1, 2, 3, 4, 5, 10, 16, 17, 18, 20, 21, 23, 24, 26, 28, 29, 31, 32, 34, 35, 38, 39, 41, 45, 49, 50, 51, 55, 56, 57, 59, 60, 62, 63, 64, 65, 67, 69, 71, 72, 73, 79, 80, 81, 83, 84, 86, 87, 88, 90, 92, 93, 95, 96, 98], "sourc": [1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 14, 16, 17, 18, 20, 21, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 54, 55, 56, 57, 59, 60, 62, 63, 64, 65, 67, 68, 69, 71, 72, 73, 75, 76], "prior": [1, 2, 3, 34, 41, 44, 46], "repres": [1, 2, 3, 5, 8, 10, 14, 16, 24, 30, 32, 34, 38, 41, 44, 47, 48, 50, 55, 56, 57, 60, 62, 63, 64, 65, 67, 69, 71, 72, 76, 79, 80, 81, 83, 84, 86, 87, 88, 90, 91, 92, 93, 95, 97, 98, 99], "p": [1, 2, 3, 4, 8, 34, 41, 43, 44, 50, 55, 63, 64, 65, 69, 83, 84, 88, 90, 99], "true_label": [1, 2, 3, 34, 44, 50, 88, 90], "k": [1, 2, 3, 4, 6, 8, 10, 14, 16, 17, 21, 24, 26, 29, 34, 38, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 55, 56, 57, 58, 59, 60, 63, 64, 65, 67, 69, 71, 72, 73, 75, 76, 79, 80, 81, 86, 88, 90, 91, 92, 93, 96, 97, 99], "check": [1, 2, 4, 7, 8, 10, 14, 25, 32, 35, 38, 39, 45, 51, 54, 60, 63, 67, 77, 79, 80, 81, 86, 87, 88, 90, 91, 95, 97, 98], "learnabl": 1, "mean": [1, 2, 5, 6, 10, 11, 20, 24, 36, 39, 44, 46, 48, 62, 67, 81, 84, 86, 88, 90, 91, 92, 93, 95, 98], "achiev": [1, 2, 35, 36, 39, 67, 86, 90, 99], "better": [1, 4, 41, 55, 57, 65, 67, 68, 77, 79, 81, 83, 84, 86, 88, 91, 92, 93, 98, 99], "than": [1, 2, 3, 5, 8, 24, 26, 29, 34, 41, 50, 54, 55, 60, 62, 64, 65, 67, 71, 75, 79, 81, 83, 84, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 97, 99], "random": [1, 2, 3, 5, 8, 16, 29, 38, 46, 55, 65, 67, 79, 80, 81, 83, 86, 87, 88, 90, 91, 93, 97], "perform": [1, 2, 5, 8, 24, 26, 29, 35, 39, 46, 63, 67, 77, 80, 86, 88, 90, 91, 94, 95, 97, 98], "averag": [1, 3, 4, 8, 20, 26, 34, 35, 39, 46, 48, 55, 56, 63, 64, 65, 86, 90, 93], "amount": [1, 3, 87], "paramet": [1, 2, 3, 4, 7, 10, 11, 12, 14, 16, 17, 18, 20, 21, 23, 24, 25, 26, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 46, 47, 48, 49, 50, 51, 54, 55, 56, 57, 59, 60, 62, 63, 64, 65, 67, 68, 69, 71, 72, 73, 75, 76, 79, 81, 84, 87, 97, 98], "np": [1, 2, 3, 4, 5, 14, 16, 29, 34, 36, 38, 40, 41, 43, 44, 46, 47, 48, 49, 50, 51, 54, 55, 56, 57, 59, 60, 62, 63, 64, 65, 67, 68, 69, 72, 73, 75, 76, 79, 80, 81, 83, 85, 86, 87, 88, 90, 91, 92, 93, 95, 96, 97, 98, 99], "ndarrai": [1, 2, 3, 4, 14, 21, 23, 24, 28, 29, 30, 34, 36, 38, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 55, 56, 57, 59, 60, 62, 63, 64, 65, 67, 68, 69, 71, 72, 75, 99], "an": [1, 2, 3, 4, 5, 8, 10, 11, 12, 14, 16, 17, 18, 20, 21, 23, 24, 26, 28, 29, 30, 31, 32, 34, 35, 36, 38, 39, 40, 41, 43, 44, 45, 46, 48, 50, 51, 54, 55, 56, 57, 59, 60, 62, 63, 64, 65, 67, 69, 71, 72, 76, 77, 79, 80, 81, 83, 84, 85, 87, 88, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99], "arrai": [1, 2, 3, 4, 5, 8, 10, 14, 16, 24, 30, 34, 36, 38, 39, 40, 41, 44, 45, 46, 47, 48, 49, 50, 51, 54, 55, 56, 57, 59, 60, 62, 63, 64, 65, 67, 68, 69, 71, 72, 73, 75, 76, 79, 80, 81, 84, 86, 88, 90, 91, 92, 93, 95, 96, 97, 98, 99], "shape": [1, 2, 3, 4, 14, 16, 34, 36, 38, 40, 41, 43, 44, 45, 46, 48, 49, 50, 54, 55, 56, 57, 59, 60, 62, 63, 64, 65, 67, 68, 69, 71, 72, 73, 75, 76, 79, 85, 86, 88, 91, 92, 93, 96, 99], "condit": [1, 2, 3, 44, 49, 50, 65, 87, 88, 99], "probabl": [1, 2, 3, 4, 6, 8, 14, 21, 23, 26, 30, 34, 38, 39, 40, 41, 43, 44, 46, 47, 49, 50, 54, 55, 56, 57, 59, 60, 62, 63, 64, 65, 67, 69, 71, 72, 73, 75, 76, 77, 78, 85, 86, 88, 89, 91, 92, 93, 96, 99], "k_": [1, 2, 3, 44, 50], "k_y": [1, 2, 3, 44, 50], "contain": [1, 2, 3, 4, 8, 10, 11, 16, 17, 18, 20, 21, 23, 24, 25, 26, 28, 29, 30, 31, 32, 34, 35, 36, 38, 39, 41, 43, 44, 49, 50, 54, 55, 56, 57, 59, 60, 62, 63, 64, 65, 67, 68, 71, 72, 73, 75, 76, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 95, 96, 97, 98], "fraction": [1, 2, 3, 8, 18, 36, 44, 50, 55, 67, 83, 86], "exampl": [1, 2, 3, 4, 5, 6, 8, 10, 11, 12, 14, 16, 17, 18, 20, 21, 23, 24, 25, 26, 28, 29, 31, 32, 34, 35, 36, 38, 39, 40, 41, 43, 44, 46, 47, 48, 49, 50, 54, 55, 56, 57, 58, 59, 60, 62, 63, 64, 65, 67, 68, 69, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 90, 91, 92, 94, 95, 96, 97, 98, 99], "everi": [1, 2, 3, 4, 14, 35, 39, 41, 44, 49, 50, 57, 65, 67, 68, 79, 80, 81, 83, 84, 86, 87, 90, 92, 94, 96, 97, 99], "class": [1, 2, 3, 4, 5, 7, 10, 11, 12, 14, 16, 17, 18, 20, 21, 23, 24, 25, 26, 28, 29, 30, 31, 32, 34, 35, 36, 38, 39, 40, 41, 43, 44, 45, 46, 47, 49, 50, 54, 55, 56, 57, 58, 59, 60, 62, 63, 64, 65, 67, 69, 71, 72, 73, 75, 76, 77, 79, 80, 81, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 97, 98, 99], "other": [1, 2, 3, 4, 8, 14, 20, 25, 34, 35, 37, 38, 39, 41, 44, 47, 50, 51, 53, 55, 56, 59, 63, 64, 65, 67, 72, 79, 80, 81, 83, 84, 86, 87, 88, 91, 93, 96, 99], "assum": [1, 2, 3, 10, 41, 44, 49, 50, 65, 69, 72, 86, 91, 93, 95, 96, 99], "column": [1, 2, 3, 4, 8, 10, 11, 28, 34, 38, 41, 44, 46, 47, 49, 50, 55, 56, 57, 59, 60, 63, 64, 65, 67, 72, 73, 75, 76, 79, 80, 81, 84, 85, 86, 87, 88, 90, 91, 92, 95, 96, 97, 98, 99], "sum": [1, 2, 3, 24, 29, 30, 34, 44, 46, 50, 56, 57, 59, 62, 67, 80, 81, 86, 87, 88, 90, 91, 96, 99], "1": [1, 2, 3, 4, 5, 8, 10, 14, 16, 17, 18, 20, 21, 23, 24, 25, 26, 28, 29, 30, 31, 32, 34, 35, 36, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 55, 56, 57, 58, 59, 60, 62, 63, 64, 65, 67, 68, 69, 71, 72, 73, 75, 76, 85, 86, 94], "each": [1, 2, 3, 4, 5, 6, 7, 10, 11, 12, 14, 18, 20, 21, 23, 24, 29, 30, 31, 34, 35, 36, 38, 39, 40, 41, 43, 44, 46, 47, 48, 50, 55, 56, 57, 58, 59, 60, 62, 63, 64, 65, 67, 68, 69, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99], "true": [1, 2, 3, 4, 5, 8, 10, 16, 17, 18, 20, 21, 23, 24, 26, 28, 29, 31, 32, 34, 35, 36, 38, 39, 41, 44, 46, 49, 50, 51, 54, 55, 56, 57, 60, 62, 63, 64, 65, 67, 69, 71, 72, 76, 79, 80, 81, 83, 84, 85, 86, 87, 90, 91, 92, 93, 95, 96, 97, 98, 99], "return": [1, 2, 3, 4, 10, 11, 12, 14, 16, 17, 18, 20, 21, 23, 24, 25, 26, 28, 29, 31, 32, 34, 35, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 54, 55, 56, 57, 59, 60, 62, 63, 64, 65, 67, 68, 69, 71, 72, 73, 75, 76, 77, 79, 80, 81, 84, 85, 86, 87, 88, 90, 91, 92, 93, 95, 96, 98, 99], "type": [1, 2, 3, 4, 5, 9, 10, 11, 12, 14, 16, 17, 18, 20, 21, 23, 24, 25, 26, 28, 29, 30, 31, 32, 34, 35, 37, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 53, 55, 56, 57, 59, 60, 62, 63, 64, 65, 67, 68, 69, 71, 72, 73, 75, 76, 78, 79, 80, 81, 82, 83, 84, 86, 87, 91, 92, 95, 96, 97, 99], "bool": [1, 2, 3, 4, 10, 16, 17, 18, 20, 21, 23, 24, 26, 28, 29, 31, 32, 34, 35, 38, 39, 41, 46, 49, 50, 55, 57, 59, 60, 62, 63, 64, 65, 67, 69, 71, 72, 76], "is_valid": 1, "whether": [1, 3, 4, 8, 10, 11, 16, 17, 18, 20, 21, 23, 24, 26, 28, 29, 31, 35, 38, 39, 41, 50, 55, 56, 57, 59, 60, 76, 79, 81, 83, 84, 85, 86, 87, 88, 95, 98, 99], "from": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 16, 20, 21, 25, 28, 29, 30, 31, 33, 34, 35, 36, 38, 39, 40, 41, 44, 46, 47, 48, 49, 50, 55, 57, 59, 62, 63, 64, 65, 67, 68, 73, 75, 76, 77, 79, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 96, 99], "perfect": [1, 2, 34, 67, 88, 92], "exactli": [1, 3, 8, 34, 35, 39, 41, 58, 64, 80, 81, 83, 84, 87, 88], "yield": [1, 35, 39], "between": [1, 4, 8, 13, 14, 19, 20, 22, 24, 27, 30, 34, 35, 36, 37, 38, 39, 41, 42, 43, 45, 48, 53, 55, 56, 59, 62, 64, 65, 67, 68, 71, 75, 76, 78, 79, 80, 81, 83, 84, 87, 88, 90, 91, 92, 93, 95, 96, 98, 99], "below": [1, 3, 4, 8, 34, 35, 38, 39, 41, 43, 46, 55, 56, 57, 62, 63, 71, 75, 78, 79, 80, 81, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99], "we": [1, 2, 3, 4, 5, 8, 11, 20, 35, 38, 39, 41, 46, 50, 51, 55, 62, 63, 65, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99], "loop": [1, 3, 44, 50, 87, 92], "implement": [1, 2, 3, 7, 12, 20, 35, 36, 38, 39, 44, 50, 67, 77, 79, 80, 83, 93, 94, 97], "what": [1, 4, 7, 8, 14, 31, 34, 36, 38, 41, 55, 56, 60, 62, 79, 80, 81, 83, 84, 87, 90, 91, 92, 93, 95, 96, 97, 98, 99], "doe": [1, 2, 3, 5, 8, 38, 39, 41, 46, 51, 62, 63, 67, 69, 71, 75, 79, 80, 81, 83, 84, 87, 91, 95, 96, 98], "do": [1, 2, 4, 8, 34, 38, 39, 50, 51, 64, 65, 69, 79, 80, 81, 83, 84, 87, 90, 91, 92, 93, 95, 96, 97, 98, 99], "fast": 1, "explain": [1, 8], "python": [1, 2, 39, 54, 67, 79, 80, 81, 84, 85, 93, 98], "pseudocod": [1, 94], "happen": [1, 8, 41, 57, 84, 90, 96], "n": [1, 2, 3, 4, 5, 34, 35, 38, 39, 41, 43, 44, 45, 46, 48, 49, 50, 55, 56, 57, 59, 60, 62, 63, 64, 65, 67, 68, 69, 71, 72, 75, 79, 84, 85, 86, 87, 90, 91, 92, 95, 96, 97, 98, 99], "without": [1, 2, 4, 8, 10, 12, 18, 35, 39, 59, 67, 77, 79, 84, 88, 92, 93, 98], "ani": [1, 2, 3, 4, 5, 8, 10, 11, 12, 14, 16, 17, 18, 20, 21, 23, 24, 25, 26, 28, 29, 34, 35, 38, 39, 41, 43, 45, 48, 49, 50, 54, 55, 57, 59, 60, 62, 63, 65, 67, 69, 71, 72, 77, 79, 80, 81, 83, 84, 86, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98], "distinct": [1, 16, 50, 99], "natur": [1, 8, 90, 93], "number": [1, 2, 3, 4, 5, 6, 8, 10, 11, 14, 16, 17, 18, 20, 21, 23, 24, 26, 28, 29, 31, 32, 34, 35, 36, 38, 39, 41, 44, 45, 46, 47, 48, 49, 50, 55, 56, 57, 59, 60, 62, 63, 64, 65, 67, 68, 69, 71, 72, 75, 76, 78, 79, 80, 81, 83, 84, 86, 87, 88, 90, 91, 92, 96, 99], "0": [1, 2, 3, 4, 5, 8, 10, 16, 17, 18, 20, 21, 23, 24, 25, 26, 28, 29, 30, 34, 35, 36, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 55, 56, 57, 59, 60, 62, 63, 64, 65, 67, 68, 69, 71, 72, 73, 75, 76, 79, 80, 81, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99], "count_joint": 1, "len": [1, 2, 3, 5, 34, 38, 44, 49, 50, 51, 64, 65, 67, 80, 81, 84, 85, 86, 87, 88, 90, 91, 92, 93, 95, 97, 98, 99], "y": [1, 2, 3, 4, 6, 16, 28, 29, 39, 44, 46, 50, 51, 54, 63, 67, 68, 79, 80, 81, 83, 86, 88, 90, 91, 93, 95, 98], "round": [1, 38, 41, 50, 67, 86, 95], "astyp": [1, 90], "int": [1, 2, 3, 4, 5, 14, 16, 17, 18, 20, 21, 23, 24, 25, 26, 28, 29, 31, 34, 35, 36, 38, 39, 41, 46, 47, 48, 49, 50, 51, 56, 57, 59, 63, 64, 65, 67, 69, 71, 72, 73, 76, 79, 80, 87, 92, 93], "rang": [1, 3, 4, 5, 10, 44, 46, 48, 50, 63, 67, 68, 85, 86, 87, 88, 90, 91, 92, 93, 95, 96, 99], "idx_flip": 1, "where": [1, 2, 3, 4, 5, 8, 10, 11, 14, 20, 34, 38, 41, 44, 45, 46, 47, 48, 49, 50, 51, 55, 56, 57, 59, 60, 62, 63, 64, 65, 67, 68, 69, 71, 72, 73, 75, 79, 83, 84, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 98, 99], "pragma": 1, "cover": [1, 3, 78, 85], "choic": [1, 6, 41, 48, 86, 87, 91, 93], "replac": [1, 49, 54, 65, 80, 81, 84, 85, 86, 87, 90, 93, 97, 98], "max_trace_prob": 1, "min_trace_prob": 1, "1e": [1, 3, 65, 79, 80, 81], "05": [1, 8, 24, 28, 49, 63, 67, 73, 75, 83, 85, 86, 88, 92], "max_noise_r": 1, "99999": 1, "min_noise_r": 1, "valid_noise_matrix": [1, 80, 81, 88, 90, 91], "none": [1, 2, 3, 4, 5, 10, 11, 14, 16, 17, 18, 20, 21, 23, 24, 25, 26, 28, 29, 31, 32, 34, 35, 36, 38, 39, 40, 41, 43, 44, 45, 46, 47, 49, 50, 51, 54, 55, 56, 57, 58, 59, 62, 63, 64, 65, 67, 69, 71, 72, 75, 76, 80, 81, 86, 87, 88, 90, 91, 96], "frac_zero_noise_r": 1, "seed": [1, 2, 3, 8, 24, 37, 39, 46, 67, 79, 80, 81, 83, 85, 88, 90, 91, 97], "max_it": [1, 79, 84, 93, 98], "10000": [1, 38, 85, 86], "x": [1, 2, 3, 4, 8, 16, 17, 18, 20, 21, 23, 24, 26, 28, 29, 34, 35, 36, 39, 41, 43, 44, 46, 49, 50, 51, 54, 55, 57, 63, 64, 65, 67, 69, 79, 80, 81, 83, 85, 86, 87, 88, 90, 91, 93, 95, 97, 98], "diagon": [1, 3, 4, 41, 44, 50], "equal": [1, 3, 8, 10, 57, 62, 72, 94], "creat": [1, 2, 7, 14, 16, 35, 38, 39, 41, 50, 67, 77, 79, 83, 84, 86, 87, 96, 98, 99], "impli": [1, 8, 34, 56, 63], "float": [1, 2, 8, 16, 17, 18, 20, 21, 23, 24, 25, 26, 28, 29, 34, 35, 36, 37, 38, 39, 41, 43, 45, 46, 48, 49, 50, 55, 56, 57, 59, 62, 63, 67, 71, 75, 79, 80, 81, 88, 90, 91], "entri": [1, 3, 4, 34, 35, 39, 41, 43, 47, 48, 50, 55, 56, 57, 60, 83, 84, 88, 91, 92, 95, 97, 98], "maximum": [1, 8, 64, 72, 76, 96], "minimum": [1, 6, 8, 18, 41, 43, 57, 62, 75], "noise_r": 1, "non": [1, 2, 3, 4, 5, 7, 14, 24, 35, 39, 41, 62, 67, 80, 86, 88, 90, 92, 93], "default": [1, 2, 3, 4, 5, 8, 12, 14, 26, 28, 31, 34, 35, 36, 38, 39, 41, 43, 44, 46, 50, 54, 55, 56, 57, 59, 60, 62, 63, 64, 65, 67, 68, 69, 71, 72, 73, 75, 76, 80, 86, 87, 95, 96], "If": [1, 2, 3, 4, 8, 10, 11, 14, 24, 26, 32, 34, 35, 38, 39, 41, 43, 44, 46, 49, 50, 54, 55, 56, 57, 60, 62, 63, 64, 67, 68, 69, 71, 72, 75, 76, 77, 78, 79, 80, 83, 84, 86, 87, 88, 90, 91, 92, 93, 95, 96, 97, 98, 99], "have": [1, 2, 3, 4, 5, 8, 14, 19, 22, 24, 27, 34, 35, 37, 38, 39, 41, 44, 46, 50, 54, 55, 56, 57, 60, 62, 63, 64, 65, 67, 68, 72, 76, 77, 79, 80, 81, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 95, 96, 97, 98, 99], "all": [1, 2, 3, 4, 5, 6, 8, 11, 12, 14, 20, 31, 34, 35, 38, 39, 40, 41, 44, 46, 47, 49, 50, 54, 55, 56, 57, 58, 59, 62, 63, 64, 65, 67, 69, 71, 72, 73, 75, 76, 77, 78, 79, 80, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99], "necessari": [1, 2, 3, 5, 8, 10, 49, 80], "In": [1, 2, 3, 4, 8, 34, 35, 38, 39, 55, 56, 58, 79, 80, 81, 83, 84, 85, 86, 87, 88, 91, 92, 93, 94, 95, 96, 97, 98, 99], "particular": [1, 4, 8, 11, 12, 14, 17, 18, 20, 24, 25, 26, 29, 35, 39, 50, 55, 59, 63, 67, 72, 76, 77, 79, 81, 84, 86, 90, 91, 93, 95, 97, 98], "satisfi": [1, 3, 34], "requir": [1, 2, 4, 5, 6, 7, 8, 9, 10, 28, 33, 35, 36, 37, 38, 39, 41, 44, 50, 53, 54, 57, 64, 65, 67, 69, 77, 78, 79, 85, 86, 88, 94], "argument": [1, 2, 3, 4, 8, 14, 21, 25, 28, 29, 30, 35, 38, 39, 40, 41, 46, 51, 54, 55, 56, 57, 59, 62, 63, 64, 65, 67, 71, 72, 73, 75, 81, 84, 85, 86, 87, 91, 92, 95, 98, 99], "when": [1, 2, 3, 4, 8, 10, 12, 21, 24, 35, 39, 41, 44, 46, 50, 54, 57, 59, 60, 62, 64, 65, 67, 68, 80, 81, 83, 84, 87, 90, 94, 95, 96, 97, 98, 99], "The": [1, 2, 3, 4, 5, 6, 8, 10, 11, 12, 14, 16, 17, 18, 20, 21, 23, 24, 25, 26, 28, 29, 30, 31, 32, 34, 35, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 50, 54, 55, 56, 57, 60, 62, 63, 64, 65, 67, 69, 72, 73, 75, 77, 79, 80, 81, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99], "rate": [1, 2, 3, 8, 36, 50, 79, 99], "set": [1, 2, 3, 4, 7, 8, 10, 11, 14, 15, 16, 17, 18, 20, 21, 23, 24, 25, 26, 28, 29, 31, 34, 35, 38, 39, 41, 45, 46, 48, 50, 54, 55, 57, 60, 62, 63, 64, 65, 67, 69, 71, 72, 80, 81, 83, 84, 86, 90, 91, 93, 94, 95, 96, 97, 98, 99], "note": [1, 2, 3, 5, 6, 8, 10, 25, 29, 32, 35, 38, 39, 40, 41, 46, 50, 55, 60, 62, 63, 64, 65, 67, 68, 72, 78, 79, 80, 81, 83, 84, 85, 87, 88, 90, 91, 92, 93, 95, 96, 97, 98, 99], "you": [1, 2, 3, 4, 5, 8, 12, 14, 34, 35, 37, 38, 39, 41, 46, 53, 54, 55, 57, 60, 62, 63, 64, 65, 67, 68, 69, 72, 73, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99], "high": [1, 2, 14, 38, 41, 50, 62, 65, 67, 80, 81, 85, 87, 88, 92, 95, 96, 97, 98, 99], "mai": [1, 2, 3, 4, 8, 11, 19, 20, 22, 27, 30, 34, 35, 37, 38, 39, 41, 44, 46, 50, 55, 56, 60, 62, 63, 64, 65, 67, 69, 72, 76, 78, 80, 81, 83, 84, 85, 86, 87, 88, 90, 91, 92, 94, 95, 96, 98, 99], "imposs": [1, 8, 88], "also": [1, 2, 3, 4, 5, 8, 20, 32, 34, 35, 38, 39, 41, 46, 49, 54, 55, 64, 67, 72, 75, 76, 77, 79, 80, 81, 83, 84, 86, 87, 88, 90, 91, 92, 94, 95, 96, 97, 98, 99], "low": [1, 8, 50, 55, 77, 80, 81, 84, 88, 92, 96], "zero": [1, 3, 4, 35, 39, 43, 50, 51, 80, 87, 91, 92, 93], "forc": [1, 2, 3, 4, 39, 80, 99], "instead": [1, 2, 3, 8, 11, 14, 31, 34, 35, 38, 39, 41, 44, 50, 54, 55, 57, 59, 63, 64, 65, 67, 68, 71, 73, 75, 78, 79, 83, 84, 86, 87, 88, 91, 92, 93, 95, 96, 97, 98, 99], "onli": [1, 2, 3, 4, 5, 8, 14, 21, 24, 28, 34, 35, 38, 39, 40, 41, 43, 44, 49, 50, 51, 54, 55, 64, 65, 67, 69, 71, 75, 76, 77, 79, 80, 81, 84, 87, 90, 91, 92, 93, 94, 95, 96, 98, 99], "guarante": [1, 3, 4, 13, 19, 22, 27, 35, 37, 39, 42, 44, 53, 78], "produc": [1, 2, 4, 8, 14, 46, 55, 65, 67, 69, 71, 77, 79, 83, 84, 86, 87, 88, 90, 91, 92, 93, 94, 96, 97, 98, 99], "higher": [1, 4, 8, 34, 41, 43, 44, 46, 48, 55, 56, 67, 81, 84, 86, 92], "opposit": [1, 99], "occur": [1, 3, 8, 34, 49, 62, 80, 81, 86, 87, 93], "small": [1, 3, 8, 34, 38, 46, 50, 56, 63, 84, 85, 87, 91, 93, 98], "numpi": [1, 3, 4, 5, 8, 10, 16, 29, 30, 38, 39, 40, 46, 48, 49, 51, 54, 59, 62, 67, 68, 73, 75, 79, 80, 81, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 95, 96, 97, 98, 99], "max": [1, 41, 64, 65, 81, 87, 93], "tri": [1, 35, 39, 94], "befor": [1, 2, 3, 35, 39, 48, 50, 64, 67, 72, 84, 86, 88, 90, 93, 95, 97, 98], "option": [1, 2, 3, 4, 5, 6, 7, 10, 11, 14, 21, 24, 28, 34, 35, 38, 39, 41, 44, 46, 49, 50, 51, 54, 55, 56, 57, 59, 60, 62, 63, 64, 65, 67, 69, 71, 72, 75, 76, 77, 79, 80, 81, 83, 86, 87, 88, 91, 95, 96, 97], "left": [1, 2, 41, 43, 48, 50, 57, 60, 63, 80, 81, 91, 92, 93, 96], "stochast": 1, "exceed": 1, "m": [1, 4, 35, 39, 45, 46, 55, 60, 62, 63, 64, 80, 81, 85, 90, 91, 92, 99], "max_prob": 1, "min_prob": 1, "dirichlet": 1, "ones": [1, 35, 39, 54, 86, 88, 96], "length": [1, 4, 10, 24, 25, 34, 36, 41, 50, 57, 60, 64, 65, 67, 69, 72, 76, 79, 91, 93, 96, 97, 99], "must": [1, 2, 3, 4, 5, 14, 34, 35, 36, 37, 39, 41, 44, 46, 47, 50, 53, 54, 55, 56, 57, 64, 65, 67, 69, 71, 72, 73, 75, 76, 79, 90, 94, 96, 99], "max_balls_per_bin": 1, "min_balls_per_bin": 1, "uniformli": 1, "integ": [1, 2, 3, 8, 10, 34, 38, 41, 47, 50, 51, 55, 57, 63, 69, 71, 72, 73, 75, 76, 79, 86, 90, 91, 92, 96, 97, 98, 99], "ball": [1, 85], "bin": [1, 3, 57, 80, 81, 93], "ensur": [1, 2, 8, 35, 39, 50, 51, 62, 65, 67, 79, 80, 81, 84, 86, 87, 88, 93, 94, 95, 97, 98], "most": [1, 3, 4, 5, 8, 14, 34, 38, 41, 46, 54, 55, 56, 57, 60, 62, 63, 64, 65, 68, 71, 75, 76, 77, 78, 79, 80, 81, 83, 84, 86, 88, 90, 91, 92, 93, 95, 96, 97, 98], "least": [1, 8, 16, 29, 34, 38, 55, 56, 62, 65, 75, 81, 86, 87, 90, 93, 96], "int_arrai": [1, 50], "can": [2, 3, 4, 5, 6, 7, 11, 12, 14, 31, 32, 34, 35, 36, 37, 38, 39, 41, 45, 46, 47, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 62, 63, 64, 65, 67, 68, 69, 72, 73, 76, 77, 78, 79, 80, 83, 84, 87, 91, 92, 93, 94, 95, 96, 97, 98, 99], "model": [2, 3, 4, 8, 14, 16, 28, 30, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 49, 54, 55, 56, 57, 59, 60, 62, 63, 64, 65, 67, 68, 69, 71, 72, 73, 75, 76, 78, 80, 81, 85, 89, 94, 96, 99], "For": [2, 3, 4, 5, 7, 8, 9, 14, 20, 33, 34, 35, 38, 39, 41, 44, 46, 50, 54, 55, 56, 57, 59, 60, 62, 63, 64, 65, 67, 69, 71, 73, 75, 76, 77, 79, 81, 83, 85, 86, 87, 88, 90, 91, 92, 93, 94, 96, 97, 98, 99], "regular": [2, 3, 38, 54], "multi": [2, 3, 8, 30, 34, 35, 38, 39, 41, 45, 46, 47, 50, 51, 56, 57, 58, 59, 64, 65, 77, 86, 88, 89], "task": [2, 4, 5, 8, 9, 10, 12, 13, 14, 23, 28, 31, 34, 38, 44, 46, 47, 48, 50, 55, 57, 65, 67, 77, 79, 84, 85, 86, 88, 91, 93, 95, 96, 98, 99], "cleanlearn": [2, 3, 8, 21, 28, 35, 50, 54, 66, 67, 68, 77, 78, 95, 97, 98], "wrap": [2, 35, 39, 54, 64, 67, 77, 80, 81, 83, 84, 88, 95, 97, 98], "instanc": [2, 3, 4, 5, 8, 11, 14, 16, 17, 18, 20, 21, 23, 24, 25, 26, 28, 29, 31, 35, 39, 46, 54, 63, 64, 67, 72, 79, 80, 81, 83, 84, 87, 88, 92, 97, 98], "sklearn": [2, 3, 4, 6, 8, 16, 29, 34, 39, 46, 50, 54, 64, 67, 68, 77, 79, 80, 81, 83, 84, 86, 87, 88, 90, 91, 93, 94, 95, 97, 98], "classifi": [2, 3, 39, 46, 50, 55, 58, 64, 65, 77, 78, 79, 83, 84, 86, 90, 91, 93, 94, 96, 97, 98, 99], "adher": [2, 39, 67], "estim": [2, 3, 4, 7, 11, 20, 34, 38, 39, 41, 44, 50, 55, 56, 57, 62, 64, 67, 69, 71, 75, 77, 78, 79, 80, 81, 83, 84, 86, 87, 89, 92, 93, 94, 95, 96, 99], "api": [2, 3, 12, 54, 60, 63, 64, 67, 78, 86, 95], "defin": [2, 3, 4, 5, 8, 12, 20, 34, 35, 36, 38, 39, 41, 65, 67, 69, 79, 80, 81, 83, 86, 90, 93, 99], "four": [2, 8, 85, 88, 99], "clf": [2, 3, 4, 46, 67, 77, 83, 86, 88, 91, 97], "fit": [2, 3, 4, 6, 8, 16, 37, 39, 53, 54, 64, 66, 67, 77, 80, 81, 83, 84, 86, 87, 88, 90, 91, 93, 94, 95, 97, 98, 99], "sample_weight": [2, 39, 67, 88], "predict_proba": [2, 4, 34, 37, 39, 46, 53, 54, 79, 80, 81, 83, 84, 86, 88, 90, 91, 93, 97], "predict": [2, 3, 4, 6, 8, 14, 20, 21, 23, 26, 28, 30, 32, 34, 37, 38, 39, 40, 41, 43, 44, 46, 47, 49, 50, 53, 54, 55, 56, 57, 59, 60, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 75, 76, 77, 78, 85, 86, 88, 89, 93, 95, 96, 98, 99], "score": [2, 3, 4, 5, 8, 11, 16, 17, 18, 20, 21, 23, 24, 25, 26, 28, 29, 34, 38, 40, 41, 43, 46, 48, 55, 56, 57, 59, 60, 62, 63, 64, 65, 66, 67, 68, 71, 73, 75, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 93, 95, 97, 98], "data": [2, 3, 4, 5, 6, 7, 9, 11, 12, 13, 14, 16, 17, 18, 20, 21, 23, 24, 25, 26, 28, 29, 30, 31, 34, 36, 37, 38, 39, 40, 41, 46, 47, 50, 53, 54, 55, 56, 57, 58, 62, 64, 65, 66, 67, 72, 73, 74, 75, 76, 78, 82, 87, 89, 94, 98], "e": [2, 3, 4, 8, 10, 20, 30, 34, 35, 38, 39, 41, 44, 46, 47, 50, 51, 55, 56, 57, 58, 60, 63, 64, 65, 67, 69, 77, 79, 80, 81, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 97, 98], "featur": [2, 3, 4, 6, 8, 14, 17, 21, 24, 25, 26, 28, 29, 46, 50, 64, 67, 77, 80, 81, 83, 84, 86, 88, 90, 91, 95, 97], "element": [2, 3, 4, 34, 40, 41, 43, 50, 55, 57, 65, 72, 73, 75, 79, 84, 86, 98, 99], "first": [2, 4, 8, 15, 24, 25, 34, 38, 46, 50, 55, 56, 60, 63, 65, 67, 79, 80, 83, 86, 87, 90, 91, 92, 93, 95, 96, 97, 98, 99], "index": [2, 8, 24, 34, 41, 49, 50, 51, 56, 65, 67, 72, 75, 76, 79, 80, 81, 83, 85, 86, 87, 88, 90, 91, 92, 93, 95, 96, 98, 99], "should": [2, 3, 4, 5, 8, 12, 20, 24, 29, 30, 34, 35, 38, 39, 41, 43, 44, 46, 48, 49, 50, 54, 55, 56, 59, 60, 62, 63, 64, 65, 67, 68, 72, 73, 75, 76, 79, 80, 81, 83, 84, 87, 88, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99], "correspond": [2, 3, 4, 8, 11, 12, 14, 16, 17, 18, 20, 21, 23, 24, 25, 26, 28, 29, 32, 34, 35, 38, 39, 40, 41, 43, 44, 46, 49, 50, 55, 56, 57, 59, 60, 62, 63, 64, 65, 67, 69, 72, 73, 75, 76, 79, 80, 81, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 95, 96, 97, 98, 99], "differ": [2, 4, 5, 8, 11, 13, 19, 22, 24, 25, 27, 34, 35, 37, 38, 39, 41, 42, 46, 50, 51, 53, 55, 60, 62, 64, 67, 79, 80, 81, 83, 84, 87, 88, 90, 91, 93, 94, 95, 97], "sampl": [2, 3, 4, 6, 8, 14, 18, 41, 43, 46, 57, 60, 63, 65, 67, 68, 77, 78, 85, 86, 88, 89, 91, 92, 95, 96, 98, 99], "size": [2, 8, 29, 35, 38, 39, 41, 46, 57, 62, 63, 67, 69, 71, 83, 86, 87, 88, 90, 91, 92, 94, 96, 98], "here": [2, 4, 5, 8, 12, 38, 41, 44, 54, 55, 56, 57, 59, 60, 63, 64, 75, 77, 78, 79, 80, 81, 83, 84, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99], "re": [2, 4, 35, 39, 49, 55, 67, 77, 79, 80, 83, 84, 86, 95, 96, 97, 98, 99], "weight": [2, 8, 35, 36, 39, 46, 55, 62, 65, 67, 79, 80, 81, 84, 98], "loss": [2, 36, 54, 65, 67, 87], "while": [2, 3, 8, 35, 38, 39, 45, 46, 50, 67, 77, 86, 87, 88, 90, 91, 95], "train": [2, 3, 4, 8, 14, 16, 30, 35, 36, 37, 39, 46, 50, 54, 55, 60, 63, 64, 67, 68, 78, 80, 81, 83, 84, 85, 87, 88, 90, 91, 92, 94, 96, 99], "support": [2, 3, 4, 10, 12, 31, 32, 38, 40, 46, 50, 51, 64, 65, 75, 77, 78, 79, 80, 81, 86, 87], "your": [2, 3, 4, 7, 8, 14, 34, 35, 37, 38, 39, 41, 46, 50, 53, 54, 55, 56, 57, 59, 64, 65, 67, 68, 69, 71, 72, 78, 79, 83, 85, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99], "recommend": [2, 4, 5, 8, 11, 14, 38, 41, 55, 80, 81, 86, 87, 94, 95], "furthermor": 2, "correctli": [2, 3, 8, 34, 35, 39, 41, 44, 51, 56, 57, 62, 63, 67, 69, 84, 86, 91, 92, 95, 96, 98], "clonabl": [2, 67], "via": [2, 4, 5, 8, 11, 14, 16, 20, 34, 36, 38, 39, 46, 50, 55, 60, 63, 64, 65, 67, 68, 71, 75, 79, 80, 81, 83, 84, 85, 86, 87, 91, 92, 93, 94, 95, 96, 97, 98, 99], "base": [2, 3, 4, 5, 8, 10, 11, 14, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 28, 29, 30, 31, 32, 35, 38, 39, 40, 41, 44, 45, 46, 48, 49, 50, 51, 54, 55, 56, 57, 59, 62, 64, 65, 67, 68, 71, 73, 75, 79, 80, 81, 83, 84, 85, 87, 88, 90, 91, 92, 93, 95, 96, 97, 99], "clone": [2, 67, 91], "intern": [2, 3, 5, 8, 9, 10, 11, 12, 14, 16, 17, 18, 20, 21, 23, 24, 25, 26, 28, 29, 30, 31, 32, 38, 43, 44, 45, 46, 47, 48, 49, 50, 51, 59, 63, 67, 73, 78, 79, 80, 86, 88, 90, 91, 92, 93, 95, 99], "multipl": [2, 3, 4, 10, 11, 32, 34, 41, 49, 55, 56, 57, 59, 62, 63, 67, 77, 80, 81, 86, 87, 89, 91, 92, 95], "g": [2, 3, 4, 8, 10, 20, 30, 34, 35, 39, 41, 47, 50, 57, 58, 60, 63, 64, 65, 67, 77, 79, 80, 81, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 97, 98], "manual": [2, 67, 79, 86, 93, 94, 95, 97, 98, 99], "pytorch": [2, 35, 36, 39, 67, 77, 79, 86, 89, 91, 96], "call": [2, 3, 4, 8, 11, 12, 16, 17, 18, 20, 21, 23, 24, 25, 26, 28, 29, 35, 39, 46, 50, 54, 64, 67, 79, 80, 81, 84, 86, 88, 91, 93, 94, 95, 96, 98, 99], "__init__": [2, 36, 67, 87], "independ": [2, 3, 8, 56, 67, 84, 94, 95, 99], "compat": [2, 35, 38, 39, 54, 67, 68, 71, 75, 77, 86, 94, 95, 97, 98], "neural": [2, 36, 54, 64, 67, 79, 86, 87, 91, 93, 95], "network": [2, 35, 36, 39, 54, 64, 67, 79, 84, 86, 87, 91, 93, 95, 98], "typic": [2, 35, 39, 64, 67, 79, 81, 83, 84, 87, 93, 94, 97, 98], "initi": [2, 3, 11, 16, 35, 39, 55, 67, 84, 86, 97], "insid": [2, 39, 67, 86, 88], "There": [2, 3, 5, 77, 88, 90], "two": [2, 3, 8, 16, 24, 34, 35, 38, 39, 47, 50, 60, 62, 63, 78, 80, 81, 83, 84, 86, 87, 88, 91, 95, 96, 98, 99], "new": [2, 5, 12, 20, 35, 38, 39, 45, 49, 50, 55, 67, 79, 80, 84, 85, 86, 93, 94, 98, 99], "notion": 2, "confid": [2, 3, 8, 20, 34, 38, 41, 44, 46, 50, 55, 56, 57, 60, 62, 63, 64, 65, 67, 71, 75, 77, 83, 84, 87, 88, 90, 91, 92, 94, 96, 97, 99], "packag": [2, 4, 5, 7, 8, 9, 13, 33, 37, 41, 42, 50, 53, 60, 63, 67, 77, 79, 80, 81, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 95, 96, 97, 98, 99], "prune": [2, 3, 41, 57, 67, 78, 92], "everyth": [2, 63, 88], "els": [2, 63, 80, 85, 86, 87, 90, 91, 92], "mathemat": [2, 3, 8, 44, 91], "keep": [2, 11, 12, 50, 77, 80, 85, 86, 96], "belong": [2, 3, 8, 34, 41, 43, 44, 56, 57, 58, 59, 64, 65, 69, 73, 75, 76, 81, 87, 88, 91, 93, 96, 99], "2": [2, 3, 4, 5, 10, 16, 17, 18, 20, 21, 23, 24, 25, 26, 28, 29, 34, 35, 36, 38, 39, 41, 43, 44, 45, 46, 47, 48, 49, 50, 54, 56, 57, 59, 60, 63, 64, 65, 67, 68, 72, 73, 75, 76, 85, 86, 94], "error": [2, 3, 4, 8, 35, 39, 40, 41, 43, 44, 50, 56, 57, 59, 60, 62, 63, 65, 67, 69, 71, 72, 75, 78, 79, 80, 81, 83, 84, 85, 89, 97], "erron": [2, 3, 34, 41, 44, 50, 56, 57, 65, 67, 68, 69, 93, 95], "import": [2, 3, 4, 5, 6, 8, 10, 11, 12, 16, 17, 18, 20, 21, 23, 24, 26, 28, 29, 31, 34, 38, 40, 46, 48, 49, 55, 59, 62, 67, 68, 73, 75, 76, 77, 83, 84, 86, 91, 92, 93, 95, 96, 97, 98, 99], "linear_model": [2, 4, 34, 50, 67, 77, 79, 80, 81, 84, 86, 88, 90, 93, 98], "logisticregress": [2, 3, 4, 34, 50, 77, 79, 80, 81, 84, 86, 88, 90, 93, 98], "logreg": 2, "cl": [2, 12, 28, 67, 77, 86, 88, 95, 97, 98], "pass": [2, 3, 4, 6, 8, 10, 11, 12, 14, 21, 28, 31, 35, 38, 39, 41, 45, 46, 50, 54, 55, 57, 64, 65, 67, 73, 77, 79, 80, 81, 84, 85, 86, 88, 90, 92, 93, 95, 98], "x_train": [2, 80, 81, 88, 90, 91, 95, 97], "labels_maybe_with_error": 2, "had": [2, 3, 67, 92], "issu": [2, 3, 4, 6, 9, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 34, 35, 37, 38, 39, 40, 41, 53, 56, 57, 58, 59, 60, 61, 62, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 82, 89, 90, 94, 95, 98], "pred": [2, 41, 50, 94, 95, 97, 98], "x_test": [2, 80, 81, 88, 91, 95, 97], "might": [2, 4, 55, 67, 72, 80, 81, 86, 87, 92, 97, 98], "case": [2, 3, 11, 34, 46, 55, 67, 79, 80, 81, 83, 85, 86, 87, 88, 93, 95, 97, 98, 99], "standard": [2, 3, 4, 28, 34, 41, 54, 56, 57, 59, 65, 67, 77, 80, 81, 83, 85, 88, 92, 97], "adapt": [2, 35, 37, 50, 53, 67, 93], "skorch": [2, 67, 77, 86], "kera": [2, 53, 60, 63, 67, 77, 86, 92], "scikera": [2, 54, 67, 86], "open": [2, 38, 85, 92, 99], "doesn": [2, 67, 77], "t": [2, 3, 5, 8, 15, 25, 35, 36, 38, 39, 40, 41, 46, 48, 49, 59, 64, 65, 67, 73, 75, 76, 77, 80, 81, 83, 84, 85, 87, 88, 91, 92, 95, 99], "alreadi": [2, 4, 8, 14, 35, 38, 39, 44, 54, 55, 67, 77, 79, 80, 81, 83, 84, 85, 86, 87, 88, 90, 92, 93, 95, 97, 98], "exist": [2, 4, 8, 10, 16, 35, 38, 39, 49, 54, 60, 62, 64, 67, 77, 78, 80, 81, 84, 90, 98, 99], "made": [2, 4, 14, 35, 39, 67, 84, 86, 87, 90, 92, 94, 95, 97, 98], "easi": [2, 44, 67, 80, 81, 85, 86, 88, 91], "inherit": [2, 5, 36, 67], "baseestim": [2, 39, 67], "yourmodel": [2, 67], "def": [2, 5, 12, 35, 39, 54, 67, 79, 80, 81, 85, 86, 87, 88, 90, 91, 93, 95, 98, 99], "self": [2, 3, 4, 5, 8, 10, 11, 12, 14, 29, 35, 36, 38, 39, 41, 46, 64, 65, 67, 80, 84, 85, 87, 91, 96, 97, 98, 99], "refer": [2, 8, 14, 35, 39, 40, 56, 57, 59, 60, 62, 63, 67, 71, 72, 80, 81, 83, 84, 86, 87, 88, 91, 94, 95], "origin": [2, 4, 8, 39, 40, 41, 49, 50, 54, 56, 57, 60, 63, 64, 67, 68, 71, 73, 75, 80, 83, 84, 86, 87, 88, 92, 93, 95, 97, 98, 99], "total": [2, 3, 34, 38, 50, 56, 76, 86, 87, 96], "state": [2, 3, 4, 35, 36, 39, 45, 67, 88, 91, 92, 99], "art": [2, 36, 88, 91], "northcutt": [2, 3, 34, 64, 65], "et": [2, 3, 34, 36, 64, 65], "al": [2, 3, 34, 36, 64, 65], "2021": [2, 3, 34, 64, 65], "weak": [2, 63], "supervis": [2, 8, 80, 81, 86, 90], "find": [2, 4, 8, 11, 12, 14, 17, 18, 20, 21, 23, 24, 25, 26, 29, 30, 34, 35, 37, 38, 39, 40, 41, 45, 49, 50, 53, 60, 63, 64, 65, 67, 69, 73, 75, 78, 80, 89, 94], "uncertainti": [2, 8, 43, 64, 67, 86, 93, 95], "It": [2, 3, 4, 5, 8, 10, 11, 14, 20, 25, 28, 30, 31, 32, 35, 39, 41, 44, 46, 55, 62, 63, 67, 77, 80, 81, 84, 86, 87, 88, 91, 94, 98], "work": [2, 3, 5, 8, 10, 28, 34, 35, 38, 39, 41, 44, 49, 50, 51, 54, 55, 65, 67, 77, 78, 80, 81, 85, 93, 95, 98], "includ": [2, 3, 4, 5, 8, 11, 16, 17, 18, 20, 21, 23, 24, 26, 28, 29, 31, 34, 35, 37, 38, 39, 49, 50, 53, 55, 56, 59, 60, 64, 65, 67, 71, 72, 73, 75, 77, 78, 80, 81, 83, 84, 86, 87, 88, 91, 92, 93, 99], "deep": [2, 37, 39, 53, 54, 67, 84], "see": [2, 3, 4, 5, 11, 12, 31, 34, 35, 38, 39, 40, 41, 46, 50, 54, 56, 57, 59, 60, 63, 64, 65, 67, 73, 75, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 90, 91, 92, 93, 95, 96, 97, 98, 99], "subfield": 2, "theori": [2, 88], "machin": [2, 4, 12, 14, 31, 37, 53, 67, 80, 81, 85, 90], "across": [2, 3, 4, 5, 8, 11, 20, 34, 38, 46, 56, 63, 64, 80, 81, 83, 84, 85, 86, 87, 88, 91, 92, 94, 95], "varieti": [2, 86, 97, 98], "like": [2, 3, 4, 5, 8, 12, 30, 34, 35, 38, 39, 41, 44, 50, 54, 55, 56, 59, 60, 62, 65, 67, 68, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 83, 84, 86, 88, 90, 91, 92, 93, 95, 96, 97, 98, 99], "pu": [2, 50], "input": [2, 3, 4, 8, 14, 24, 34, 35, 38, 39, 44, 46, 49, 50, 51, 54, 63, 67, 77, 78, 79, 81, 84, 85, 86, 87, 88, 90, 91, 92, 95, 96, 98, 99], "discret": [2, 32, 41, 44, 50, 64, 65, 69, 71, 72], "vector": [2, 3, 4, 8, 14, 41, 44, 46, 47, 50, 64, 65, 77, 79, 80, 81, 83, 84, 87, 88, 91, 92, 93, 96, 98, 99], "would": [2, 3, 4, 35, 38, 39, 41, 50, 57, 67, 77, 80, 86, 87, 88, 93, 95, 98, 99], "obtain": [2, 4, 6, 8, 14, 41, 55, 57, 60, 63, 65, 68, 79, 81, 84, 86, 90, 92, 94, 96, 99], "been": [2, 34, 41, 44, 49, 50, 55, 56, 60, 62, 64, 65, 67, 79, 80, 83, 86, 88, 90, 91, 92, 93, 96, 99], "dure": [2, 8, 14, 64, 67, 79, 83, 84, 86, 88, 91, 94, 95, 97, 98, 99], "denot": [2, 3, 44, 46, 50, 57, 64, 65, 75], "tild": 2, "paper": [2, 8, 55, 64, 73, 75, 85, 88, 90, 93, 95, 99], "cv_n_fold": [2, 3, 67, 98], "5": [2, 3, 4, 6, 16, 17, 18, 20, 21, 23, 24, 26, 28, 29, 31, 34, 39, 41, 43, 45, 46, 50, 55, 56, 59, 60, 63, 67, 68, 75, 80, 84, 85, 86, 91, 92, 93, 94, 96, 98, 99], "converge_latent_estim": [2, 3], "pulearn": [2, 50], "find_label_issues_kwarg": [2, 8, 67, 78, 86, 88], "label_quality_scores_kwarg": [2, 8], "low_memori": [2, 57, 73, 86], "clean": [2, 62, 65, 67, 68, 77, 80, 81, 85, 95, 97, 98], "even": [2, 3, 5, 34, 38, 43, 44, 50, 67, 79, 86, 88, 90, 91, 92], "messi": [2, 67, 88], "ridden": [2, 67], "autom": [2, 67, 77, 81, 85, 86], "robust": [2, 44, 67, 81, 86], "prone": [2, 67], "out": [2, 3, 4, 8, 14, 26, 35, 39, 41, 46, 54, 57, 58, 60, 63, 64, 65, 67, 68, 76, 77, 78, 85, 86, 88, 89, 91, 92, 93, 95, 96, 98, 99], "current": [2, 3, 5, 8, 11, 12, 20, 35, 39, 40, 41, 46, 55, 62, 67, 80, 81, 86, 90, 92], "intend": [2, 11, 12, 13, 14, 30, 31, 32, 42, 55, 71, 75, 79, 80, 81, 84, 88], "A": [2, 3, 4, 5, 8, 10, 11, 12, 16, 17, 18, 20, 21, 23, 24, 25, 26, 28, 29, 30, 31, 34, 35, 36, 39, 41, 44, 45, 46, 47, 48, 49, 50, 54, 55, 56, 59, 62, 63, 64, 65, 67, 69, 71, 72, 76, 78, 79, 80, 83, 84, 85, 86, 87, 88, 90, 92, 94, 97, 98, 99], "follow": [2, 3, 8, 12, 28, 32, 34, 35, 38, 39, 46, 48, 55, 56, 60, 62, 63, 64, 67, 79, 80, 81, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 95, 96, 97, 98, 99], "experiment": [2, 35, 36, 38, 39, 40, 57, 78, 86], "wrapper": [2, 54, 79, 95, 97, 98], "around": [2, 62, 80, 81, 92, 93, 99], "fasttext": [2, 53], "store": [2, 4, 8, 10, 11, 16, 17, 18, 20, 21, 23, 24, 25, 26, 28, 29, 31, 35, 38, 39, 64, 67, 83, 84, 85, 86, 96, 97, 98, 99], "along": [2, 46, 57, 75, 80, 81, 86, 87, 93], "dimens": [2, 50, 69, 72, 86, 87, 93, 96], "select": [2, 7, 8, 24, 55, 65, 86, 87, 90, 93], "split": [2, 3, 4, 8, 10, 38, 46, 49, 50, 67, 79, 80, 81, 83, 84, 85, 87, 88, 91, 94, 97, 99], "cross": [2, 3, 8, 34, 41, 44, 45, 46, 57, 60, 63, 65, 67, 68, 78, 79, 80, 81, 83, 84, 85, 86, 88, 89, 91, 92, 95, 96, 97, 98, 99], "fold": [2, 3, 34, 41, 44, 67, 79, 83, 85, 86, 92, 96, 97], "By": [2, 34, 56, 57, 67, 80, 86, 96], "need": [2, 3, 8, 34, 35, 38, 39, 41, 56, 57, 59, 64, 67, 77, 79, 80, 81, 84, 86, 88, 90, 91, 92, 96, 98], "holdout": [2, 3, 67], "comput": [2, 3, 4, 5, 6, 8, 17, 18, 20, 21, 24, 25, 26, 29, 34, 35, 36, 38, 39, 41, 43, 44, 45, 46, 50, 55, 56, 57, 59, 62, 63, 64, 65, 67, 68, 69, 71, 77, 78, 80, 81, 85, 88, 89, 92, 93, 95, 96, 98], "them": [2, 3, 4, 5, 7, 8, 9, 10, 25, 30, 33, 35, 37, 38, 39, 41, 53, 55, 64, 67, 78, 80, 81, 83, 84, 86, 87, 90, 91, 93, 95, 96, 97, 98, 99], "numer": [2, 3, 4, 8, 11, 20, 28, 32, 46, 62, 64, 67, 72, 77, 78, 79, 80, 81, 82, 84, 87, 88, 90, 91, 93, 95, 97, 98], "consist": [2, 3, 35, 39, 50, 55, 96, 99], "latent": [2, 3, 44], "thei": [2, 3, 4, 13, 19, 22, 24, 27, 35, 36, 37, 39, 41, 42, 48, 50, 54, 57, 62, 65, 67, 68, 71, 75, 77, 79, 80, 81, 83, 84, 86, 87, 88, 90, 93, 95, 98, 99], "relat": [2, 3, 11, 17, 18, 24, 25, 26, 29, 44, 50, 56, 67, 81, 84], "close": [2, 3, 8, 38, 44, 64, 79, 80, 81, 83, 84, 86, 87, 88, 92], "form": [2, 3, 8, 35, 36, 39, 44, 49, 50, 65, 67, 86], "equival": [2, 3, 35, 39, 44, 64, 93, 95], "iter": [2, 3, 34, 35, 39, 41, 50, 56, 57, 67, 86, 90, 96], "enforc": [2, 35, 39, 50], "perfectli": [2, 34, 56, 88], "certain": [2, 3, 4, 35, 39, 54, 63, 67, 80, 81, 85, 92, 93], "dict": [2, 3, 4, 8, 10, 11, 12, 14, 16, 17, 18, 20, 21, 23, 24, 25, 26, 28, 29, 34, 35, 38, 39, 41, 45, 46, 50, 54, 55, 56, 57, 59, 60, 62, 63, 64, 65, 67, 75, 80, 81, 86, 87, 99], "keyword": [2, 3, 4, 8, 14, 21, 25, 28, 35, 38, 39, 41, 43, 46, 49, 54, 55, 57, 64, 65, 67, 73, 75, 80], "filter": [2, 3, 8, 38, 40, 49, 56, 58, 59, 61, 63, 70, 71, 72, 74, 75, 76, 77, 78, 79, 81, 84, 85, 86, 87, 91, 92, 95, 96, 97, 98, 99], "find_label_issu": [2, 3, 8, 28, 37, 38, 40, 41, 56, 57, 58, 59, 60, 61, 62, 63, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 86, 91, 92, 95, 96, 97, 98, 99], "particularli": [2, 77, 90, 93], "filter_bi": [2, 3, 38, 41, 57, 78, 86], "frac_nois": [2, 41, 57, 73, 86], "min_examples_per_class": [2, 41, 57, 81, 86, 88], "impact": [2, 8, 80, 81, 87], "ml": [2, 4, 8, 13, 67, 77, 80, 81, 83, 84, 87, 90, 91, 95, 97, 98], "accuraci": [2, 36, 65, 79, 86, 87, 88, 90, 93, 95, 96, 97, 98], "n_job": [2, 38, 41, 57, 69, 71, 73, 86, 93, 96], "disabl": [2, 35, 39, 41, 93], "process": [2, 3, 5, 11, 14, 30, 35, 38, 39, 41, 49, 55, 57, 63, 69, 71, 73, 79, 80, 86, 90, 94, 98], "caus": [2, 41, 46, 80, 81, 86], "rank": [2, 3, 8, 34, 38, 40, 41, 46, 56, 57, 58, 60, 61, 63, 64, 66, 70, 72, 73, 74, 76, 77, 78, 80, 81, 85, 86, 91, 92, 93, 96, 97, 98, 99], "get_label_quality_scor": [2, 37, 38, 40, 41, 42, 46, 55, 57, 58, 59, 60, 61, 62, 65, 66, 68, 70, 71, 73, 74, 75, 78, 88, 91, 92, 96, 99], "adjust_pred_prob": [2, 8, 59, 64, 65, 88], "control": [2, 4, 7, 8, 14, 38, 41, 55, 63, 64, 67, 73, 75, 80, 81, 85, 86], "how": [2, 3, 4, 8, 10, 11, 12, 14, 20, 34, 35, 36, 38, 39, 44, 50, 55, 56, 59, 60, 62, 64, 65, 67, 71, 75, 77, 80, 81, 83, 84, 85, 87, 92, 93, 94, 95, 96, 97, 98], "much": [2, 8, 34, 38, 41, 67, 86, 88, 90, 93], "output": [2, 3, 4, 8, 14, 30, 35, 36, 39, 44, 50, 54, 55, 56, 60, 62, 63, 64, 67, 71, 72, 75, 76, 77, 78, 79, 80, 84, 85, 86, 87, 92, 93, 94, 95, 98], "print": [2, 4, 5, 16, 17, 18, 20, 21, 23, 24, 25, 26, 28, 29, 31, 32, 34, 35, 38, 39, 41, 50, 55, 56, 57, 62, 64, 65, 67, 69, 71, 72, 76, 78, 79, 81, 84, 85, 86, 87, 88, 90, 91, 92, 93, 95, 96, 97, 98, 99], "suppress": [2, 38, 55, 62, 64, 65, 67, 69, 71, 72, 96, 99], "statement": [2, 38, 55, 62, 64, 65, 67, 69, 71, 72], "big": [2, 38, 57, 63, 67, 88], "limit": [2, 4, 14, 38, 57, 92, 96, 99], "memori": [2, 35, 38, 39, 57, 63, 69, 71, 80, 96], "label_issues_batch": [2, 37, 57, 86], "find_label_issues_batch": [2, 37, 38, 57, 86], "pred_prob": [2, 3, 4, 6, 8, 14, 21, 23, 24, 26, 29, 30, 34, 38, 40, 41, 43, 44, 45, 46, 47, 50, 51, 55, 56, 57, 59, 60, 63, 64, 65, 69, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 90, 91, 92, 95, 97, 98], "threshold": [2, 3, 5, 8, 16, 17, 18, 20, 26, 28, 29, 38, 62, 63, 64, 65, 71, 75, 80, 92, 93, 96, 99], "inverse_noise_matrix": [2, 3, 8, 44, 50, 78, 88], "label_issu": [2, 38, 41, 57, 60, 67, 69, 78, 79, 84, 86, 87, 88, 91, 95, 97, 98], "clf_kwarg": [2, 3, 8, 67], "clf_final_kwarg": [2, 67], "validation_func": [2, 3, 8], "correct": [2, 4, 8, 34, 38, 41, 43, 55, 56, 57, 59, 60, 62, 63, 65, 67, 68, 71, 75, 77, 79, 83, 84, 87, 88, 90, 92, 94, 95], "result": [2, 3, 8, 11, 14, 16, 17, 18, 20, 21, 23, 24, 25, 26, 28, 29, 35, 38, 39, 41, 43, 48, 50, 57, 59, 60, 63, 65, 67, 68, 69, 71, 75, 79, 80, 81, 83, 84, 86, 87, 88, 90, 91, 95, 96, 97, 98, 99], "identifi": [2, 3, 4, 5, 8, 10, 14, 25, 31, 34, 38, 40, 41, 57, 60, 63, 65, 67, 68, 69, 72, 73, 75, 76, 77, 79, 80, 81, 83, 84, 85, 87, 88, 91, 93, 95, 96, 97, 98, 99], "final": [2, 8, 67, 83, 92, 94, 95, 97], "remain": [2, 67, 78, 87, 91, 95, 97, 98, 99], "datasetlik": [2, 50, 67], "beyond": [2, 4, 5, 7, 9, 33, 77, 95, 96], "pd": [2, 3, 4, 5, 11, 16, 17, 18, 20, 21, 23, 24, 26, 28, 29, 34, 45, 54, 55, 56, 67, 75, 79, 80, 81, 83, 84, 86, 88, 90, 95, 97, 98, 99], "datafram": [2, 3, 4, 5, 10, 11, 16, 17, 18, 20, 21, 23, 24, 25, 26, 28, 29, 34, 38, 45, 50, 51, 54, 55, 56, 67, 72, 76, 78, 79, 80, 81, 83, 84, 86, 87, 88, 90, 95, 96, 98, 99], "scipi": [2, 4, 11, 50], "spars": [2, 4, 8, 11, 14, 16, 29, 50, 51, 83], "csr_matrix": [2, 4, 11, 14, 16, 29], "torch": [2, 35, 36, 39, 79, 84, 85, 87, 93, 98], "util": [2, 4, 8, 14, 31, 35, 36, 39, 42, 55, 60, 63, 67, 77, 78, 79, 80, 81, 86, 87, 88, 93], "tensorflow": [2, 50, 54, 77, 79, 86], "object": [2, 4, 8, 10, 11, 14, 30, 31, 35, 36, 38, 39, 46, 50, 51, 54, 57, 60, 61, 62, 63, 64, 67, 75, 77, 79, 81, 83, 87, 88, 89, 91, 95, 98], "list": [2, 3, 4, 10, 12, 16, 17, 18, 20, 21, 23, 24, 25, 26, 28, 29, 34, 35, 36, 38, 39, 40, 41, 47, 49, 50, 51, 54, 55, 56, 57, 59, 60, 62, 63, 64, 65, 67, 71, 72, 73, 75, 76, 78, 79, 80, 81, 85, 86, 87, 88, 91, 92, 95, 98, 99], "index_list": 2, "subset": [2, 3, 4, 14, 34, 38, 41, 50, 65, 72, 76, 79, 83, 84, 86, 87, 91, 92, 93, 94, 95, 97, 98, 99], "wa": [2, 3, 10, 12, 38, 50, 55, 56, 62, 64, 76, 79, 80, 81, 83, 84, 86, 88, 91, 92, 94, 96, 97, 98, 99], "abl": [2, 3, 8, 67, 79, 86, 88, 90, 91], "format": [2, 3, 4, 8, 10, 30, 35, 38, 39, 41, 44, 45, 46, 47, 50, 51, 54, 55, 56, 57, 60, 63, 64, 65, 67, 69, 71, 72, 75, 76, 79, 80, 81, 83, 85, 87, 90, 95, 96, 97, 99], "make": [2, 3, 4, 16, 35, 38, 39, 46, 54, 77, 79, 80, 81, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 95, 97, 98], "sure": [2, 4, 38, 41, 46, 79, 80, 81, 83, 84, 85, 87, 90, 91, 92, 93, 95, 97, 98], "shuffl": [2, 8, 50, 79, 84, 87, 91, 93], "ha": [2, 3, 4, 8, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 28, 29, 35, 39, 40, 44, 46, 49, 50, 55, 60, 62, 67, 73, 75, 76, 77, 79, 80, 81, 83, 84, 88, 90, 91, 92, 93, 94, 95, 97, 98, 99], "batch": [2, 38, 50, 54, 55, 69, 71, 86, 87, 93], "order": [2, 4, 8, 32, 34, 35, 39, 40, 41, 44, 45, 46, 50, 55, 56, 57, 60, 63, 64, 65, 69, 72, 73, 75, 76, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 91, 92, 95, 96, 98, 99], "destroi": [2, 50], "oper": [2, 35, 38, 39, 50, 54, 65, 77, 84, 86, 93, 97, 98], "eg": [2, 4, 8, 50, 60, 63, 80, 81, 86], "repeat": [2, 50, 55, 90, 93], "appli": [2, 32, 35, 37, 39, 41, 46, 47, 49, 50, 59, 64, 73, 79, 80, 81, 83, 86, 87, 90, 91, 93, 94, 95, 96, 97, 98], "array_lik": [2, 3, 34, 41, 50, 57, 64, 68], "some": [2, 3, 4, 8, 12, 20, 34, 35, 37, 39, 41, 44, 49, 50, 53, 55, 56, 57, 59, 60, 63, 64, 65, 67, 69, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 90, 91, 92, 94, 95, 96, 97, 98, 99], "seri": [2, 3, 38, 50, 51, 67, 75, 86], "row": [2, 3, 4, 8, 11, 25, 30, 34, 38, 41, 43, 44, 50, 55, 56, 57, 59, 64, 65, 67, 72, 73, 75, 76, 79, 80, 83, 84, 85, 86, 87, 90, 91, 93, 97, 99], "rather": [2, 3, 4, 24, 34, 50, 54, 55, 62, 71, 75, 90, 94, 95, 96, 98, 99], "leav": [2, 41], "per": [2, 3, 4, 5, 11, 34, 38, 41, 46, 49, 55, 56, 57, 59, 62, 63, 65, 68, 69, 71, 75, 81, 86, 92, 99], "determin": [2, 3, 8, 10, 14, 20, 24, 28, 34, 38, 41, 46, 50, 55, 57, 60, 62, 65, 71, 75, 80, 86, 90, 92, 93, 95], "cutoff": [2, 3, 93], "consid": [2, 3, 4, 8, 11, 14, 21, 24, 26, 29, 34, 35, 39, 41, 50, 55, 62, 64, 65, 68, 71, 75, 79, 83, 84, 86, 87, 88, 92, 93, 94, 95, 96, 97, 98], "section": [2, 3, 5, 8, 78, 83, 87, 92], "3": [2, 3, 4, 5, 8, 32, 34, 35, 39, 41, 44, 45, 46, 47, 48, 49, 50, 54, 57, 64, 65, 67, 68, 73, 75, 85, 86, 94], "equat": [2, 3, 44], "advanc": [2, 3, 4, 7, 8, 14, 62, 64, 75, 78, 81, 82, 88], "user": [2, 3, 4, 8, 12, 14, 25, 30, 31, 32, 35, 39, 41, 62, 64, 65, 67, 71, 75, 88], "specifi": [2, 3, 4, 6, 8, 11, 12, 14, 16, 29, 31, 35, 38, 39, 41, 46, 49, 55, 56, 57, 60, 62, 64, 65, 67, 68, 76, 78, 79, 81, 84, 87, 90, 92, 95, 98], "automat": [2, 3, 4, 24, 34, 77, 83, 84, 85, 86, 87, 90, 91, 92, 95, 96, 97, 98, 99], "greater": [2, 3, 4, 5, 7, 8, 26, 38, 50, 62, 81, 85, 86, 99], "count": [2, 20, 24, 34, 38, 41, 44, 50, 56, 57, 63, 78, 86, 87, 92], "observ": [2, 3, 44, 79, 80, 81, 90, 93, 95], "mislabel": [2, 8, 34, 38, 40, 41, 44, 55, 56, 57, 60, 62, 65, 71, 73, 75, 77, 79, 83, 84, 86, 87, 88, 92, 95, 97, 98], "one": [2, 3, 4, 5, 8, 24, 34, 35, 38, 39, 40, 41, 46, 50, 55, 56, 57, 59, 60, 62, 63, 64, 65, 67, 68, 69, 71, 72, 73, 75, 76, 77, 79, 80, 81, 83, 84, 87, 90, 93, 94, 95, 97, 98, 99], "get_label_issu": [2, 37, 38, 66, 67, 88, 95, 97, 98], "either": [2, 3, 5, 8, 35, 38, 39, 41, 55, 57, 62, 64, 65, 69, 71, 81, 86, 91, 92], "boolean": [2, 5, 8, 20, 38, 41, 49, 55, 57, 60, 65, 67, 69, 71, 72, 77, 79, 81, 84, 86, 87, 92, 95, 96, 98], "label_issues_mask": [2, 41, 65, 67, 78], "indic": [2, 3, 4, 5, 8, 11, 20, 34, 38, 39, 40, 41, 43, 46, 50, 54, 55, 56, 57, 59, 60, 62, 63, 64, 65, 67, 68, 71, 73, 75, 79, 80, 81, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 95, 96, 97, 98, 99], "its": [2, 4, 5, 7, 8, 14, 35, 38, 39, 41, 48, 49, 57, 60, 63, 64, 65, 67, 69, 73, 75, 77, 79, 80, 81, 83, 84, 85, 86, 87, 88, 90, 92, 93, 94, 95, 96, 98, 99], "return_indices_ranked_bi": [2, 38, 41, 57, 73, 78, 86, 88, 97, 98], "significantli": [2, 87, 88, 90, 94], "reduc": [2, 38, 41, 50, 79, 86], "time": [2, 8, 35, 38, 39, 50, 55, 78, 80, 85, 86, 87, 88, 92, 93, 95, 96, 97, 98, 99], "take": [2, 4, 8, 34, 35, 39, 45, 46, 50, 54, 65, 83, 87, 90, 91, 92, 97, 99], "run": [2, 4, 5, 7, 9, 12, 14, 24, 25, 30, 33, 35, 38, 39, 67, 79, 80, 81, 83, 84, 85, 87, 88, 90, 91, 92, 93, 95, 97, 98, 99], "skip": [2, 8, 35, 39, 67, 79, 86, 91, 99], "slow": [2, 3], "step": [2, 5, 24, 46, 63, 86, 87, 88, 90, 94], "caution": [2, 4, 86], "previous": [2, 4, 11, 50, 64, 67, 78, 79, 80, 83, 84, 90, 94, 97], "assign": [2, 5, 8, 16, 17, 18, 20, 21, 23, 24, 25, 26, 28, 29, 30, 35, 39, 45, 46, 50, 67, 80, 83, 86, 87, 95, 96, 97, 99], "individu": [2, 5, 8, 11, 24, 35, 39, 40, 55, 59, 62, 65, 67, 73, 75, 78, 81, 83, 86, 90, 91, 92, 97, 99], "still": [2, 38, 39, 50, 64, 79, 86, 87, 93, 97], "extra": [2, 35, 39, 50, 54, 55, 56, 67, 84, 86, 87, 90, 93], "receiv": [2, 8, 35, 39, 40, 56, 59, 60, 67, 69, 73, 81, 92], "overwritten": [2, 67], "callabl": [2, 3, 35, 39, 46, 49, 54, 59, 86], "x_val": 2, "y_val": 2, "map": [2, 3, 10, 38, 39, 42, 45, 49, 50, 63, 65, 67, 72, 79, 80, 81, 86, 87, 88, 91, 99], "appropri": [2, 8, 14, 32, 57, 65, 80, 83, 91, 92], "earli": [2, 87], "stop": [2, 87], "x_valid": 2, "y_valid": 2, "could": [2, 5, 8, 20, 34, 50, 64, 80, 83, 87, 91, 95, 97, 99], "f": [2, 5, 79, 80, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 95, 97, 98], "ignor": [2, 35, 39, 49, 54, 67, 72, 76, 79, 80, 81, 85, 87, 88, 90, 91, 93, 95, 99], "allow": [2, 34, 35, 38, 39, 43, 50, 55, 63, 64, 67, 69, 71, 79, 86, 87, 94, 96, 98], "access": [2, 8, 11, 35, 39, 67, 81, 84, 87, 91, 98], "hyperparamet": [2, 59, 64, 87], "purpos": [2, 80, 81, 86, 91, 95], "want": [2, 4, 8, 34, 38, 51, 55, 57, 67, 80, 84, 85, 87, 90, 92, 93, 94, 96, 98, 99], "explicitli": [2, 6, 8, 39, 67, 86], "yourself": [2, 4, 38, 81], "altern": [2, 5, 8, 46, 50, 54, 55, 65, 78, 79, 83, 84, 86, 87, 88, 90, 91, 93, 95, 98], "same": [2, 3, 4, 5, 8, 10, 12, 14, 24, 28, 35, 38, 39, 41, 50, 54, 55, 57, 64, 65, 67, 71, 72, 75, 76, 77, 80, 81, 83, 84, 86, 87, 91, 92, 93, 94, 95, 96, 97, 98], "effect": [2, 8, 25, 35, 39, 55, 64, 67, 83, 84, 86, 87, 93], "offer": [2, 4, 79, 80, 81, 84, 86, 88, 91, 98], "after": [2, 3, 4, 11, 16, 17, 18, 20, 21, 23, 24, 25, 26, 28, 29, 35, 39, 50, 55, 67, 80, 84, 86, 87, 88, 90, 92, 93, 94, 95, 96, 98], "attribut": [2, 4, 5, 8, 10, 11, 14, 16, 17, 18, 20, 21, 23, 24, 25, 26, 28, 29, 30, 31, 32, 35, 38, 39, 46, 64, 67, 80, 97], "label_issues_df": [2, 67, 87], "similar": [2, 8, 34, 35, 39, 50, 55, 59, 60, 62, 64, 67, 71, 75, 80, 81, 83, 84, 86, 87, 88, 92, 93, 96], "document": [2, 3, 4, 8, 12, 14, 34, 35, 38, 39, 40, 41, 46, 49, 54, 56, 57, 59, 62, 63, 64, 67, 71, 72, 73, 75, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 95, 97, 98, 99], "descript": [2, 4, 5, 8, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 34, 40, 50, 60, 67, 80, 81], "were": [2, 3, 4, 34, 39, 56, 62, 75, 79, 83, 86, 88, 90, 92, 94, 96, 97], "present": [2, 3, 4, 8, 10, 11, 18, 34, 50, 64, 72, 77, 83, 86, 87, 93], "actual": [2, 3, 4, 34, 55, 56, 65, 81, 86, 88, 99], "num_class": [2, 34, 38, 50, 54, 79, 80, 81, 83, 84, 86, 87, 88, 90, 91, 93, 97, 98], "uniqu": [2, 29, 50, 72, 80, 86, 91, 93], "given_label": [2, 4, 23, 28, 34, 44, 67, 72, 76, 79, 80, 81, 83, 84, 87, 88, 95, 96, 98, 99], "normal": [2, 3, 16, 24, 29, 41, 43, 46, 48, 49, 50, 65, 86, 88, 93], "trick": [2, 86], "distribut": [2, 3, 4, 8, 24, 26, 34, 39, 41, 45, 48, 55, 63, 64, 65, 77, 80, 81, 83, 84, 87, 92, 93], "account": [2, 34, 55, 59, 64, 65, 84, 86, 88, 90, 91, 93, 95, 98], "word": [2, 3, 49, 75, 76, 86], "remov": [2, 8, 29, 34, 35, 39, 41, 67, 77, 84, 85, 86, 87, 91, 93, 95, 97, 98], "so": [2, 3, 4, 5, 8, 12, 24, 32, 34, 35, 38, 39, 41, 50, 55, 56, 62, 65, 67, 71, 75, 79, 80, 81, 84, 87, 88, 91, 93, 96], "proportion": [2, 8, 41], "just": [2, 3, 4, 8, 11, 30, 34, 36, 38, 50, 54, 65, 67, 69, 77, 78, 79, 81, 83, 84, 86, 87, 88, 91, 92, 93, 94, 95, 96, 97, 98], "procedur": 2, "get": [2, 3, 4, 6, 11, 29, 35, 36, 39, 41, 46, 49, 50, 55, 57, 59, 64, 65, 67, 68, 69, 77, 79, 84, 85, 86, 87, 88, 93, 94, 95, 97, 98], "detect": [2, 4, 5, 7, 11, 12, 14, 16, 20, 26, 40, 48, 58, 60, 61, 62, 63, 64, 65, 66, 67, 70, 74, 77, 80, 82, 87, 89, 91, 95, 96, 97, 98, 99], "arg": [2, 10, 20, 25, 29, 35, 36, 39, 46, 50, 65, 67], "kwarg": [2, 5, 8, 12, 14, 16, 17, 18, 20, 21, 23, 24, 25, 26, 28, 29, 31, 35, 38, 39, 40, 46, 54, 67, 69, 71, 73, 86], "test": [2, 4, 8, 24, 39, 46, 54, 67, 77, 80, 81, 83, 84, 87, 94, 95, 97, 98, 99], "expect": [2, 3, 35, 39, 41, 46, 55, 64, 65, 67, 86, 88, 90, 91, 92, 95, 97, 98, 99], "class_predict": 2, "evalu": [2, 8, 35, 36, 37, 38, 39, 63, 67, 79, 80, 81, 86, 87, 88, 90, 94, 95, 96, 97, 98], "simpli": [2, 34, 65, 80, 81, 83, 84, 86, 88, 91, 95, 96, 98, 99], "quantifi": [2, 4, 5, 8, 11, 41, 59, 64, 67, 77, 81, 83, 84, 87, 88, 92], "save_spac": [2, 8, 66, 67], "potenti": [2, 8, 34, 41, 49, 57, 60, 63, 65, 67, 69, 71, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 91, 92, 96, 97, 99], "cach": [2, 84, 98], "panda": [2, 4, 5, 10, 16, 17, 18, 20, 21, 23, 24, 26, 28, 29, 34, 50, 51, 54, 55, 56, 78, 79, 80, 81, 83, 84, 85, 86, 88, 90, 95, 96, 97, 98], "unlik": [2, 8, 41, 43, 46, 54, 56, 57, 59, 75, 80, 90, 91, 93, 95], "both": [2, 4, 8, 14, 24, 34, 35, 39, 41, 50, 55, 57, 65, 69, 71, 76, 77, 80, 86, 87, 88, 90, 99], "mask": [2, 38, 41, 49, 50, 57, 60, 65, 67, 69, 71, 72, 77, 85, 86, 90, 92, 96, 99], "prefer": [2, 65, 73, 91], "plan": 2, "subsequ": [2, 3, 35, 39, 84, 86, 88, 92, 98], "invok": [2, 35, 39, 88, 94], "scratch": [2, 67], "To": [2, 4, 5, 7, 8, 9, 11, 14, 24, 33, 35, 38, 39, 40, 41, 54, 55, 57, 59, 63, 64, 65, 67, 68, 69, 71, 77, 79, 80, 81, 83, 84, 86, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99], "share": [2, 65, 67], "mostli": [2, 50, 62, 67, 91, 95], "longer": [2, 32, 45, 46, 49, 67, 78, 84, 86, 92, 98], "info": [2, 4, 5, 11, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 34, 56, 67, 75, 80, 81, 85, 86, 99], "about": [2, 3, 4, 5, 8, 11, 16, 17, 18, 20, 21, 23, 24, 25, 26, 28, 29, 31, 34, 36, 38, 43, 55, 56, 59, 63, 67, 72, 75, 79, 80, 83, 84, 85, 86, 87, 88, 90, 93], "docstr": [2, 34, 35, 39, 50, 67, 85, 88], "unless": [2, 35, 39, 67, 86], "our": [2, 3, 8, 54, 55, 65, 67, 77, 79, 80, 81, 83, 84, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99], "is_label_issu": [2, 28, 67, 79, 80, 81, 83, 84, 87, 88, 91, 95, 98], "entir": [2, 8, 24, 38, 41, 44, 56, 57, 62, 65, 67, 69, 71, 72, 77, 80, 81, 86, 92, 93, 94, 96, 99], "accur": [2, 3, 4, 8, 14, 34, 38, 41, 55, 56, 57, 60, 63, 65, 67, 68, 69, 71, 72, 78, 81, 83, 84, 86, 87, 90, 95], "label_qu": [2, 55, 67, 88, 90, 95, 98], "measur": [2, 4, 34, 55, 56, 67, 77, 85, 86, 88, 90, 91, 95, 96, 97, 99], "qualiti": [2, 3, 4, 5, 8, 11, 28, 29, 34, 38, 40, 41, 43, 46, 55, 56, 57, 59, 60, 62, 65, 67, 68, 71, 73, 75, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 89, 95, 97, 98], "lower": [2, 4, 5, 8, 11, 26, 38, 46, 48, 55, 56, 59, 62, 63, 65, 67, 68, 71, 75, 79, 81, 83, 84, 87, 90, 91, 92, 93, 95, 96, 98, 99], "eas": 2, "comparison": [2, 35, 39, 63, 88, 90], "against": [2, 35, 39, 80, 83, 86, 90, 91], "predicted_label": [2, 4, 23, 28, 67, 72, 76, 79, 80, 81, 83, 84, 87, 88, 95, 96, 98], "ad": [2, 35, 39, 81, 90, 95], "precis": [2, 57, 60, 63, 86, 88, 96, 99], "definit": [2, 5, 32, 46, 67, 83, 97], "accessor": [2, 67], "describ": [2, 8, 16, 55, 64, 65, 67, 73, 75, 88, 90, 91, 92, 94, 99], "precomput": [2, 4, 44, 67, 85], "clear": [2, 35, 39, 67, 84, 95, 98], "save": [2, 4, 14, 35, 38, 39, 63, 67, 86, 92, 96, 99], "space": [2, 4, 8, 64, 67, 83, 85, 87], "place": [2, 35, 39, 50, 67, 90, 97], "larg": [2, 38, 67, 83, 84, 86, 87, 92, 93, 96, 99], "deploi": [2, 67, 83, 84, 86, 87], "care": [2, 8, 35, 39, 67, 84, 86, 88], "avail": [2, 4, 5, 10, 12, 31, 39, 67, 86, 88, 90, 92, 95], "cannot": [2, 4, 10, 12, 50, 94, 99], "anymor": 2, "classmethod": [2, 16, 17, 18, 20, 21, 23, 24, 25, 26, 28, 29, 32, 39, 46, 67], "__init_subclass__": [2, 37, 39, 66, 67], "set_": [2, 39, 67], "_request": [2, 39, 67], "pep": [2, 39, 67], "487": [2, 39, 67], "look": [2, 4, 5, 14, 35, 39, 50, 67, 72, 80, 81, 83, 84, 86, 88, 90, 91, 92, 93, 96, 97, 99], "inform": [2, 4, 5, 8, 11, 14, 31, 35, 39, 50, 55, 56, 60, 63, 67, 72, 75, 76, 77, 79, 80, 83, 84, 88, 90, 93, 96, 99], "__metadata_request__": [2, 39, 67], "infer": [2, 39, 50, 67, 72, 76, 87, 90, 91, 97, 98], "signatur": [2, 35, 39, 67], "accept": [2, 35, 39, 65, 67, 80, 81], "metadata": [2, 39, 67, 83, 84, 87, 99], "through": [2, 4, 5, 39, 67, 79, 81, 84, 85, 86, 90, 92, 93, 98], "develop": [2, 7, 39, 67, 86, 88, 99], "request": [2, 39, 67, 81, 84, 85, 91, 97, 98, 99], "those": [2, 3, 8, 38, 39, 41, 54, 55, 57, 63, 67, 71, 75, 76, 77, 79, 86, 87, 92, 96], "http": [2, 4, 5, 7, 8, 9, 16, 33, 35, 36, 38, 39, 43, 50, 60, 63, 64, 67, 77, 79, 80, 81, 83, 84, 85, 87, 88, 90, 91, 92, 93, 95, 96, 97, 98, 99], "www": [2, 39, 67, 93], "org": [2, 16, 35, 36, 39, 50, 64, 67, 86, 88, 99], "dev": [2, 39, 67], "0487": [2, 39, 67], "get_metadata_rout": [2, 37, 39, 66, 67], "rout": [2, 39, 67], "pleas": [2, 35, 39, 54, 67, 77, 79, 80, 81, 84, 85, 86, 87, 88, 90, 91, 93, 95, 98, 99], "guid": [2, 5, 39, 67, 78, 82, 87], "mechan": [2, 35, 39, 67], "metadatarequest": [2, 39, 67], "encapsul": [2, 14, 39, 62, 67], "get_param": [2, 37, 39, 53, 54, 66, 67], "subobject": [2, 39, 67], "param": [2, 8, 35, 39, 54, 64, 67, 86], "name": [2, 4, 5, 8, 10, 11, 30, 32, 34, 35, 39, 45, 46, 50, 54, 55, 56, 63, 67, 72, 76, 79, 80, 81, 83, 84, 85, 86, 87, 88, 91, 95, 96, 98, 99], "set_fit_request": [2, 37, 39, 66, 67], "str": [2, 3, 4, 10, 11, 12, 14, 16, 17, 18, 20, 21, 23, 24, 25, 26, 28, 29, 31, 32, 34, 35, 38, 39, 41, 44, 46, 49, 50, 54, 55, 56, 60, 62, 63, 65, 67, 72, 76, 79, 80, 86, 90, 91, 92, 99], "unchang": [2, 35, 39, 67, 99], "relev": [2, 14, 24, 39, 67, 87], "enable_metadata_rout": [2, 39, 67], "set_config": [2, 39, 67], "meta": [2, 39, 67], "rais": [2, 4, 10, 11, 32, 35, 39, 43, 46, 67, 79, 86], "alia": [2, 35, 39, 67], "metadata_rout": [2, 39, 67], "retain": [2, 39, 50, 67], "chang": [2, 30, 32, 35, 38, 39, 43, 67, 75, 79, 80, 84, 86, 92, 93, 98, 99], "version": [2, 4, 5, 7, 8, 9, 13, 19, 22, 27, 33, 35, 37, 39, 42, 43, 50, 53, 54, 65, 67, 77, 79, 80, 81, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 95, 97, 98, 99], "sub": [2, 39, 62, 67], "pipelin": [2, 39, 67, 95], "otherwis": [2, 5, 8, 32, 34, 35, 38, 39, 41, 47, 49, 50, 57, 64, 67, 69, 71, 72, 76, 84, 86, 98], "updat": [2, 11, 35, 38, 39, 67, 78, 80, 87], "set_param": [2, 37, 39, 53, 54, 66, 67], "simpl": [2, 35, 39, 41, 55, 65, 67, 80, 81, 83, 84, 87, 90, 93, 95, 97, 98], "well": [2, 3, 8, 35, 39, 43, 44, 55, 57, 63, 65, 67, 72, 75, 76, 78, 80, 81, 83, 84, 86, 87, 88, 90, 92, 93], "nest": [2, 35, 39, 40, 51, 67, 73, 75, 76, 99], "latter": [2, 35, 39, 67, 93], "compon": [2, 39, 67], "__": [2, 39, 67], "set_score_request": [2, 66, 67], "structur": [3, 64, 83, 97], "unobserv": 3, "less": [3, 4, 8, 29, 38, 46, 55, 64, 65, 69, 71, 75, 81, 83, 85, 86, 87, 88, 92, 99], "channel": [3, 79, 88], "character": 3, "flip": 3, "nm": 3, "invers": [3, 8, 34, 44, 50, 56, 81, 85, 98], "inv": 3, "confident_joint": [3, 20, 34, 41, 50, 56, 57, 78, 86, 88], "un": 3, "under": [3, 8, 35, 39, 56, 63, 64, 81, 93], "joint": [3, 34, 41, 44, 50, 56, 57, 85], "num_label_issu": [3, 38, 41, 57, 72, 76, 78], "estimation_method": [3, 38], "off_diagon": 3, "multi_label": [3, 34, 41, 50, 51, 57, 91], "don": [3, 77, 81, 83, 84, 87, 88, 92, 95], "statis": 3, "compute_confident_joint": [3, 34, 41, 50, 57, 88], "off": [3, 41, 50, 62, 87, 88, 92, 93], "j": [3, 4, 34, 35, 39, 40, 41, 57, 60, 63, 64, 73, 75, 76, 80, 81, 88, 96, 99], "confident_learn": [3, 41, 57, 88], "off_diagonal_calibr": 3, "calibr": [3, 41, 50, 55, 90], "cj": [3, 44, 50], "axi": [3, 29, 44, 46, 48, 69, 72, 79, 80, 81, 86, 87, 88, 90, 91, 93, 95, 96], "bincount": [3, 80, 81, 88, 90, 91], "alwai": [3, 8, 35, 39, 50, 79, 88, 95, 97, 98], "estimate_issu": 3, "over": [3, 4, 8, 35, 38, 39, 62, 63, 69, 71, 81, 83, 85, 86, 87, 88, 93, 95, 97], "As": [3, 5, 77, 80, 81, 84, 88, 95, 99], "add": [3, 4, 5, 10, 11, 35, 39, 54, 63, 79, 80, 81, 84, 86, 87, 88, 91, 98], "approach": [3, 34, 38, 41, 83, 88, 91, 93, 95, 97], "custom": [3, 5, 8, 9, 28, 35, 38, 39, 46, 49, 65, 81, 84, 88, 95, 98], "know": [3, 80, 81, 83, 84, 86, 87, 88, 90, 95], "cut": [3, 62, 77, 88], "off_diagonal_custom": 3, "tl": 3, "dr": 3, "sometim": [3, 30, 92, 93, 99], "underestim": 3, "few": [3, 63, 77, 81, 86, 90, 91, 92, 93, 99], "4": [3, 4, 16, 17, 18, 20, 21, 23, 24, 26, 28, 29, 45, 46, 49, 59, 60, 62, 63, 65, 68, 75, 85, 86, 91, 96, 99], "detail": [3, 4, 8, 12, 14, 31, 34, 35, 39, 40, 46, 50, 54, 55, 56, 57, 59, 60, 62, 63, 64, 71, 72, 73, 77, 78, 79, 91, 93, 99], "num_issu": [3, 5, 38, 79, 80, 81, 83, 84, 87, 88], "calibrate_confident_joint": 3, "up": [3, 5, 8, 15, 24, 25, 28, 41, 46, 55, 85, 86, 92, 95, 98, 99], "p_": [3, 34, 41], "pair": [3, 4, 8, 34, 41, 88], "v": [3, 8, 38, 56, 57, 59, 65, 80, 81, 91, 92, 93, 94], "rest": [3, 4, 5, 7, 8, 9, 33, 56, 57, 59, 67, 80, 81, 83, 84, 86, 87, 88, 90, 95, 97, 98], "fashion": [3, 4, 69, 97], "2x2": 3, "incorrectli": [3, 34, 56, 57, 60, 83, 99], "calibrated_cj": 3, "c": [3, 8, 49, 57, 65, 77, 79, 80, 81, 83, 84, 86, 88, 91, 92, 93, 94, 95, 97], "whose": [3, 4, 8, 26, 35, 39, 44, 49, 55, 59, 62, 68, 71, 75, 76, 79, 80, 81, 83, 84, 86, 87, 88, 91, 92, 93, 96, 99], "truli": [3, 93, 96], "estimate_joint": [3, 34, 88], "joint_estim": 3, "confident_joint_distribut": 3, "recal": [3, 57, 63, 88, 92, 94, 96, 99], "return_indices_of_off_diagon": 3, "frequenc": [3, 24, 55, 56, 63, 72, 92, 93], "done": [3, 8, 67, 80, 86, 88, 91, 93, 94], "overfit": [3, 8, 60, 63, 79, 80, 81, 83, 84, 87, 94, 97], "classifict": 3, "singl": [3, 4, 10, 24, 34, 35, 39, 40, 46, 47, 50, 55, 56, 62, 63, 64, 65, 75, 79, 80, 86, 88, 91, 92, 97], "baselin": [3, 35, 41, 93, 95, 98], "proxi": 3, "union": [3, 4, 10, 46, 50, 51, 57, 63, 67, 71, 75, 86], "tupl": [3, 29, 35, 39, 40, 44, 45, 47, 49, 50, 55, 57, 63, 71, 73, 75, 76, 79, 99], "confident_joint_count": 3, "indices_off_diagon": 3, "simplif": 3, "effici": [3, 4, 8, 38, 44, 55, 69, 71, 77, 86, 87, 96, 98], "practic": [3, 81, 87, 88, 93, 95, 97, 98], "complet": [3, 79, 80, 81, 83, 84, 86, 87, 88, 91, 92, 95], "gist": 3, "cj_ish": 3, "guess": [3, 44, 88, 90], "8": [3, 4, 5, 6, 45, 46, 47, 49, 59, 73, 75, 79, 80, 81, 83, 84, 86, 87, 90, 91, 92, 93, 95, 96, 97, 98, 99], "parallel": [3, 41, 63, 73, 85], "again": [3, 54, 86, 93, 97], "simplifi": [3, 12], "understand": [3, 7, 34, 56, 63, 81, 88, 95, 96, 99], "100": [3, 35, 39, 65, 80, 81, 83, 85, 86, 87, 88, 91, 92, 93, 97, 98, 99], "optim": [3, 35, 36, 39, 54, 87, 90], "speed": [3, 41, 85, 86, 95, 98], "dtype": [3, 21, 23, 24, 29, 35, 39, 49, 50, 59, 75, 79, 92], "enumer": [3, 35, 39, 79, 80, 81, 87, 99], "s_label": 3, "confident_bin": 3, "6": [3, 4, 39, 46, 50, 75, 79, 80, 81, 83, 84, 85, 86, 87, 90, 91, 92, 93, 95, 96, 97, 98, 99], "num_confident_bin": 3, "argmax": [3, 41, 65, 69, 72, 79, 86, 88, 92, 93, 96], "elif": 3, "estimate_lat": 3, "py_method": [3, 44], "cnt": [3, 44], "1d": [3, 4, 10, 14, 30, 38, 41, 46, 47, 50, 51, 59, 68, 79, 97], "eqn": [3, 44], "margin": [3, 41, 44, 46, 65], "marginal_p": [3, 44], "shorthand": [3, 11], "proport": [3, 8, 34, 56, 88, 94], "poorli": [3, 44, 97], "inv_noise_matrix": 3, "estimate_py_and_noise_matrices_from_prob": [3, 88], "variabl": [3, 5, 12, 25, 50, 67, 68, 79, 80, 83, 88, 91, 95], "exact": [3, 44, 80, 81, 83, 87, 97], "within": [3, 4, 8, 13, 30, 35, 36, 39, 40, 42, 57, 62, 71, 73, 75, 80, 81, 86, 87, 92, 96], "percent": 3, "often": [3, 34, 44, 56, 86, 88, 94, 96], "estimate_confident_joint_and_cv_pred_proba": 3, "mani": [3, 8, 50, 51, 63, 79, 80, 83, 84, 86, 87, 91, 92, 93, 95, 98], "wai": [3, 4, 54, 77, 78, 79, 80, 81, 83, 84, 86, 88, 90, 91, 92, 94, 97, 98], "pro": 3, "con": 3, "pred_proba": [3, 94], "combin": [3, 34, 80, 85, 86, 87, 88, 94, 95], "becaus": [3, 44, 50, 62, 84, 86, 88, 90, 92], "littl": [3, 38, 85, 92, 99], "uniform": [3, 65, 85, 86, 88], "20": [3, 5, 40, 76, 79, 84, 85, 86, 87, 88, 92, 95, 96, 99], "Such": [3, 87, 93], "bound": [3, 21, 23, 35, 39, 49, 59, 60, 62, 63, 92], "reason": [3, 20, 35, 39], "comment": [3, 49, 99], "end": [3, 4, 35, 39, 63], "file": [3, 4, 10, 37, 38, 53, 63, 79, 80, 83, 84, 85, 86, 92, 93, 96, 97, 99], "estimate_py_noise_matrices_and_cv_pred_proba": [3, 88], "handl": [3, 4, 5, 8, 14, 16, 17, 18, 20, 21, 23, 24, 25, 26, 28, 29, 31, 35, 38, 39, 78, 80, 81, 83, 84, 87, 88, 96, 97, 99], "five": [3, 60, 63, 88, 92], "estimate_cv_predicted_prob": [3, 88], "estimate_noise_matric": 3, "get_confident_threshold": [3, 37, 38], "amongst": [3, 8, 92], "confident_threshold": [3, 8, 20, 38, 64], "unifi": 4, "audit": [4, 7, 10, 11, 14, 79, 82, 83, 84, 86, 87, 88, 91, 92, 95], "kind": [4, 5, 79, 80, 83, 84, 85, 87, 88], "addit": [4, 5, 7, 8, 9, 11, 31, 33, 35, 39, 46, 51, 55, 63, 73, 79, 80, 83, 84, 88, 90, 93, 94, 97, 98], "depend": [4, 5, 7, 8, 9, 10, 11, 33, 37, 41, 43, 50, 53, 57, 64, 67, 68, 77], "instal": [4, 5, 7, 8, 9, 33, 35, 37, 38, 39, 41, 53, 54, 69, 71], "pip": [4, 5, 7, 9, 33, 77, 79, 80, 81, 83, 84, 85, 87, 88, 90, 91, 92, 93, 95, 96, 97, 98, 99], "development": [4, 5, 7, 9, 33], "git": [4, 5, 7, 9, 33, 77, 79, 80, 81, 83, 84, 85, 87, 88, 90, 91, 92, 93, 95, 97, 98], "github": [4, 5, 7, 9, 33, 35, 36, 50, 77, 79, 80, 81, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 95, 97, 98], "com": [4, 5, 7, 9, 33, 35, 36, 38, 43, 50, 64, 77, 79, 80, 81, 83, 84, 85, 87, 88, 90, 91, 92, 93, 95, 96, 97, 98, 99], "egg": [4, 5, 7, 9, 33, 77, 85], "label_nam": [4, 5, 6, 8, 10, 16, 29, 77, 79, 80, 81, 83, 84, 86, 87, 88, 91, 92, 95], "image_kei": [4, 87], "interfac": [4, 77, 86, 88], "librari": [4, 8, 39, 60, 63, 64, 77, 80, 84, 85, 86, 98], "goal": [4, 95], "track": [4, 5, 11, 12, 77, 80, 85, 86, 88], "intermedi": [4, 7, 81], "statist": [4, 8, 11, 20, 24, 34, 55, 56, 63, 81, 83, 84, 88], "convert": [4, 10, 32, 35, 39, 47, 48, 51, 55, 62, 71, 75, 78, 79, 84, 85, 86, 87, 90, 91, 92, 98], "hug": [4, 10, 87], "face": [4, 10, 14, 85, 87, 91], "kei": [4, 5, 8, 10, 14, 16, 17, 18, 20, 21, 23, 24, 25, 26, 28, 29, 34, 35, 39, 46, 55, 56, 62, 64, 80, 81, 84, 86, 87, 88, 90, 92], "string": [4, 8, 10, 12, 16, 17, 18, 20, 21, 23, 24, 25, 26, 28, 29, 31, 32, 34, 35, 39, 50, 55, 56, 68, 72, 75, 76, 83, 84, 86, 90, 91, 98, 99], "dictionari": [4, 5, 8, 10, 11, 14, 16, 17, 18, 20, 21, 23, 24, 25, 26, 28, 29, 34, 35, 39, 45, 50, 55, 56, 59, 60, 62, 63, 80, 81, 83, 84, 88, 90, 91, 92], "path": [4, 10, 35, 38, 39, 63, 79, 80, 86, 92], "local": [4, 5, 10, 35, 36, 39, 79, 80, 81, 85, 86, 87, 88, 90, 91, 93, 95, 99], "text": [4, 5, 8, 10, 16, 17, 18, 20, 21, 23, 24, 25, 26, 28, 29, 40, 46, 64, 73, 75, 76, 77, 80, 81, 82, 85, 86, 88, 89, 90, 93], "txt": [4, 10, 99], "csv": [4, 10, 83, 84, 95, 97, 98], "json": [4, 10], "hub": [4, 10], "multiclass": [4, 10, 13, 46, 50, 55, 91], "regress": [4, 5, 10, 12, 14, 19, 28, 30, 32, 80, 81, 84, 89, 90, 93, 98], "multilabel": [4, 10, 12, 13, 19, 23, 30, 32, 47, 91], "imag": [4, 7, 34, 39, 60, 62, 63, 64, 69, 71, 72, 77, 80, 81, 85, 86, 89, 90, 91, 92, 94, 96], "point": [4, 5, 8, 16, 24, 35, 39, 80, 81, 83, 84, 86, 87, 88, 90], "field": [4, 8, 35, 39], "themselv": [4, 95, 97, 98], "cleanvis": [4, 8], "level": [4, 14, 16, 17, 18, 20, 21, 23, 24, 25, 26, 28, 29, 31, 34, 49, 73, 75, 81, 87, 89, 91, 96], "load_dataset": [4, 10, 87], "glue": 4, "sst2": 4, "properti": [4, 10, 11, 32, 35, 39], "has_label": [4, 10], "class_nam": [4, 10, 18, 34, 40, 56, 63, 72, 76, 77, 85, 88, 92, 96, 99], "empti": [4, 10, 44, 55, 81, 86, 91], "find_issu": [4, 5, 6, 8, 12, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 77, 79, 80, 81, 83, 84, 86, 87, 88, 91, 95], "knn_graph": [4, 8, 14, 16, 17, 24, 26, 29, 83], "issue_typ": [4, 5, 6, 8, 11, 12, 14, 16, 17, 18, 20, 21, 23, 24, 26, 28, 29, 79, 80, 81, 83, 84, 86, 87, 88, 91, 95], "sort": [4, 14, 38, 41, 46, 55, 57, 60, 62, 63, 65, 71, 73, 75, 79, 80, 81, 83, 84, 86, 87, 88, 90, 91, 92, 95, 96, 97, 98, 99], "common": [4, 11, 14, 81, 82, 85, 86, 88, 91, 92, 96], "real": [4, 14, 77, 80, 81, 86, 88, 90, 95, 96], "world": [4, 14, 77, 80, 81, 86, 88, 90, 95, 96], "interact": [4, 14, 84, 86], "embed": [4, 8, 14, 64, 77, 79, 80, 81, 83, 84, 88, 91, 95, 98], "thereof": [4, 14], "insight": [4, 14, 63, 90], "best": [4, 14, 45, 55, 65, 80, 81, 83, 84, 86, 87, 90, 91, 93, 95, 97, 98, 99], "2d": [4, 14, 30, 38, 46, 47, 49, 50, 55, 79, 91, 97], "num_exampl": [4, 14, 16, 17, 18, 20, 21, 23, 24, 26, 28, 29, 31, 34, 56, 79, 80, 81, 83, 84, 87, 88], "properli": [4, 8, 38, 45, 50, 51, 69, 79, 80, 81, 83, 84, 86, 87, 88, 91, 93, 95, 96], "respect": [4, 35, 39, 60, 63, 79, 80, 81, 83, 84, 87, 88, 91, 92], "lexicograph": [4, 45, 50, 79, 80, 81, 83, 84, 87, 88, 91], "represent": [4, 8, 14, 32, 35, 39, 47, 57, 77, 79, 80, 81, 84, 86, 87, 88, 93, 98], "num_featur": [4, 14, 35, 39, 54], "distanc": [4, 8, 14, 16, 24, 26, 29, 48, 62, 64, 83, 93], "nearest": [4, 8, 14, 21, 24, 26, 48, 64, 81, 84, 93], "neighbor": [4, 8, 14, 16, 21, 24, 26, 48, 64, 80, 81, 83, 84, 86, 87, 93], "graph": [4, 8, 11, 14, 16, 24, 29], "squar": [4, 50, 67, 85, 95], "csr": 4, "evenli": 4, "omit": [4, 62, 63, 87, 92], "itself": [4, 30, 35, 39, 92], "three": [4, 8, 34, 55, 56, 67, 72, 79, 80, 81, 83, 85, 88, 90, 94, 95, 96, 97, 99], "indptr": 4, "wise": 4, "start": [4, 5, 8, 32, 35, 36, 39, 46, 77, 83, 91, 99], "th": [4, 40, 45, 49, 50, 55, 57, 60, 62, 63, 64, 73, 75, 76, 84, 91, 92, 99], "ascend": [4, 34, 56, 87, 88], "segment": [4, 69, 71, 72, 89], "reflect": [4, 83, 84, 90, 92, 93, 95, 97, 98], "maintain": 4, "posit": [4, 35, 39, 48, 50, 63, 85, 93], "nearestneighbor": [4, 8, 16, 64, 83, 93], "kneighbors_graph": [4, 16, 83], "illustr": 4, "todens": 4, "second": [4, 46, 50, 63, 65, 80, 86, 88, 99], "duplic": [4, 7, 19, 20, 35, 39, 77, 80, 88, 95], "explicit": 4, "precend": 4, "construct": [4, 5, 8, 12, 16, 17, 18, 20, 21, 23, 24, 25, 26, 28, 29, 31, 35, 39, 46, 54], "neither": [4, 8, 12, 92], "nor": [4, 8, 12], "collect": [4, 8, 11, 14, 16, 17, 18, 20, 21, 23, 24, 25, 26, 28, 29, 30, 55, 86, 90, 99], "unspecifi": [4, 14, 41, 57], "interest": [4, 14, 20, 72, 76, 84, 88, 95, 96, 97, 98, 99], "constructor": [4, 8, 14, 21, 28], "issuemanag": [4, 7, 11, 12, 14, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 28, 29, 31], "respons": [4, 14, 20, 67, 68, 85, 95, 99], "random_st": [4, 79, 80, 81, 87, 88, 91, 93, 97], "lab": [4, 6, 16, 17, 18, 20, 21, 23, 24, 25, 26, 28, 29, 38, 77, 79, 80, 81, 83, 84, 85, 86, 87, 88, 91, 95], "comprehens": [4, 77, 87, 91, 95], "nbr": 4, "n_neighbor": [4, 8, 16, 64], "metric": [4, 8, 17, 24, 29, 50, 54, 63, 64, 79, 83, 84, 87, 88, 95, 97, 98], "euclidean": [4, 8, 62, 64, 83], "mode": [4, 16, 35, 38, 39, 93], "4x4": 4, "float64": [4, 24, 35, 39, 75], "compress": [4, 8, 50, 69, 71], "toarrai": 4, "NOT": [4, 38, 84], "23606798": 4, "41421356": 4, "configur": [4, 14, 46, 81], "suppos": [4, 8, 60, 93, 95, 97, 98], "who": [4, 62, 83, 88, 97, 99], "manag": [4, 6, 7, 8, 11, 12, 13, 14, 15, 17, 18, 20, 21, 23, 24, 25, 26, 28, 29, 80], "clean_learning_kwarg": [4, 8, 21, 28, 95], "labelissuemanag": [4, 8, 12, 19, 21], "prune_method": [4, 78], "prune_by_noise_r": [4, 41, 57, 88], "report": [4, 5, 9, 13, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 34, 56, 76, 77, 79, 80, 81, 83, 84, 88, 91, 95, 99], "include_descript": [4, 16, 17, 18, 20, 21, 23, 24, 26, 28, 29, 31], "show_summary_scor": [4, 31], "show_all_issu": [4, 31], "summari": [4, 5, 11, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 34, 40, 53, 54, 56, 61, 70, 71, 73, 74, 75, 78, 79, 80, 81, 83, 84, 85, 87, 88, 92, 95, 96, 99], "show": [4, 5, 24, 35, 39, 45, 50, 63, 72, 76, 81, 83, 84, 85, 86, 87, 88, 90, 93, 95, 96, 97, 99], "top": [4, 8, 34, 38, 40, 41, 50, 57, 60, 63, 65, 72, 76, 77, 79, 80, 81, 83, 84, 85, 86, 88, 92, 93, 95, 98, 99], "suffer": [4, 8, 11, 20, 57, 65, 76, 99], "onc": [4, 20, 34, 35, 39, 80, 86, 88, 91, 92, 97], "familiar": 4, "overal": [4, 5, 8, 11, 16, 17, 18, 20, 21, 23, 24, 25, 26, 28, 29, 34, 40, 46, 55, 56, 59, 62, 63, 67, 71, 72, 73, 75, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 90, 92, 99], "sever": [4, 5, 8, 10, 11, 20, 35, 38, 39, 41, 59, 62, 64, 65, 71, 75, 77, 79, 80, 81, 83, 84, 85, 86, 88, 92, 93, 97, 98, 99], "compar": [4, 55, 64, 75, 80, 81, 83, 88, 92], "issue_summari": [4, 5, 8, 11, 80], "With": [4, 38, 84, 88, 90, 95, 96, 98, 99], "usag": [4, 38, 54], "found": [4, 5, 8, 11, 12, 16, 17, 18, 20, 21, 23, 24, 25, 26, 28, 29, 35, 39, 50, 77, 79, 80, 81, 83, 84, 86, 87, 91, 93, 95, 97, 98, 99], "usual": [4, 10, 30, 31, 87, 90, 95], "directli": [4, 12, 14, 31, 32, 38, 54, 55, 81, 84, 91, 92, 95, 98], "ti": [4, 55], "exhibit": [4, 5, 8, 11, 72, 81, 83, 84, 87, 88, 92], "ie": [4, 67], "likelihood": [4, 8, 38, 40, 41, 57, 62, 64, 65, 69, 73], "wherea": [4, 50, 57, 94], "outlier": [4, 7, 12, 19, 20, 29, 42, 65, 77, 80, 81, 88, 89, 95], "fundament": [4, 8], "incompar": 4, "quantiti": [4, 88, 95], "global": [4, 5, 20, 35, 39], "non_iid": [4, 8, 12, 24, 81, 83, 84, 87, 88], "hypothesi": 4, "iid": [4, 5, 7, 24, 83, 88], "never": [4, 79, 88, 91, 93, 94], "someth": [4, 5, 35, 39, 65, 92], "123": [4, 80, 81], "456": [4, 79, 97, 98], "nearest_neighbor": 4, "7": [4, 46, 47, 54, 73, 75, 79, 80, 81, 83, 84, 85, 86, 90, 91, 92, 93, 95, 96, 97, 98, 99], "9": [4, 16, 17, 18, 20, 21, 23, 24, 26, 28, 29, 40, 46, 47, 59, 73, 75, 79, 80, 81, 83, 84, 85, 88, 90, 91, 92, 93, 95, 96, 97, 98, 99], "distance_to_nearest_neighbor": [4, 80, 81, 83, 84, 87, 88], "789": 4, "get_issu": [4, 8, 11, 79, 81, 83, 84, 86, 87, 91, 95], "issue_nam": [4, 5, 8, 11, 12, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 80, 81], "focu": [4, 11, 84, 96, 99], "full": [4, 8, 11, 38, 63, 87, 99], "summar": [4, 11, 16, 17, 18, 20, 21, 23, 24, 25, 26, 28, 29, 34, 56, 72, 76, 77, 96], "valueerror": [4, 10, 11, 32, 43, 46, 86], "specific_issu": [4, 11], "lie": [4, 8, 64, 65, 79, 80, 81, 83, 84, 87, 88, 98], "get_issue_summari": [4, 11, 81], "get_info": [4, 11, 81, 84], "yet": [4, 15, 25, 85, 90], "list_possible_issue_typ": [4, 12, 13], "regist": [4, 5, 12, 13, 15, 25, 35, 39, 80], "rtype": [4, 12, 16, 17, 18, 20, 21, 23, 24, 25, 26, 28, 29, 35, 39], "registri": [4, 12, 13], "list_default_issue_typ": [4, 12, 13], "folder": [4, 79, 80, 87], "load": [4, 10, 38, 63, 85, 86, 87, 88, 92, 93, 96, 99], "futur": [4, 8, 20, 35, 39, 55, 77, 79, 80, 84, 86, 98], "overwrit": [4, 80], "separ": [4, 34, 46, 59, 80, 81, 86, 87, 92, 94], "static": 4, "rememb": [4, 84, 86, 88], "part": [4, 8, 35, 39, 41, 60, 62, 63, 79, 80, 85, 96, 99], "ident": [4, 8, 20, 50, 84], "walk": 5, "alongsid": [5, 35, 39, 80, 86], "pre": [5, 6, 8, 35, 39, 80, 81, 95], "runtim": [5, 35, 38, 39, 67, 69, 71, 79, 86, 87], "issue_manager_factori": [5, 12, 80], "myissuemanag": [5, 12], "myissuemanagerforregress": 5, "decor": [5, 12], "ll": [5, 46, 79, 80, 81, 83, 84, 86, 87, 88, 90, 91, 92, 93, 94, 95, 97, 98, 99], "thing": [5, 39, 88, 95, 98], "next": [5, 55, 77, 79, 83, 84, 86, 90, 92, 95, 97, 98, 99], "dummi": 5, "randint": [5, 29, 46, 80, 81, 86], "mark": [5, 8, 78, 92, 93, 95], "regard": [5, 81, 88], "rand": [5, 46, 80, 81], "is_": [5, 8, 80], "_issu": [5, 8, 80], "issue_score_kei": [5, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 80], "whole": [5, 24, 35, 39, 81], "make_summari": [5, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 80], "popul": [5, 81, 84], "verbosity_level": [5, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29], "std": [5, 92], "raw_scor": 5, "bit": 5, "involv": [5, 38, 72, 76, 86, 91], "intermediate_arg": 5, "min": [5, 46, 62, 75, 80, 86, 93], "sin_filt": 5, "sin": 5, "arang": 5, "kernel": 5, "affect": [5, 8, 35, 39, 69, 75, 84, 86], "easili": [5, 44, 78, 79, 81, 83, 84, 88, 90, 91, 93, 94, 95, 96, 97, 98], "hard": [5, 39, 85, 93], "sai": [5, 8, 35, 39, 91, 96], "anoth": [5, 20, 34, 38, 49, 62, 65, 83, 84, 86, 88, 90, 93, 98], "try": [5, 8, 38, 41, 54, 55, 69, 71, 77, 81, 83, 84, 86, 87, 88, 96], "won": [5, 35, 39, 80, 81, 86, 91], "issue_manag": [5, 8, 9, 11, 13, 16, 17, 18, 21, 23, 24, 25, 26, 28, 29, 80], "instanti": [5, 14, 38, 54, 64, 79, 81, 83, 98], "477762": 5, "286455": 5, "term": [5, 8, 44, 50, 63, 79, 80, 81, 83, 84, 87, 88], "4778": 5, "is_basic_issu": 5, "basic_scor": 5, "13": [5, 17, 26, 79, 80, 81, 83, 84, 85, 87, 88, 90, 92, 93, 95, 96, 97, 98, 99], "003042": 5, "058117": 5, "11": [5, 54, 79, 80, 81, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 95, 96, 97, 98, 99], "121908": 5, "15": [5, 48, 67, 79, 80, 81, 83, 84, 85, 86, 87, 88, 90, 92, 93, 95, 96, 97, 98, 99], "169312": 5, "17": [5, 79, 81, 83, 84, 85, 86, 87, 88, 90, 92, 93, 95, 96, 98, 99], "229044": 5, "2865": 5, "is_intermediate_issu": 5, "intermediate_scor": 5, "000000": [5, 80, 81, 85, 88], "007059": 5, "009967": 5, "010995": 5, "087332": 5, "016296": 5, "03947": 5, "019459": 5, "794251": 5, "underperform": [6, 7, 29], "group": [6, 7, 24, 29, 85, 92, 99], "dbscan": [6, 8, 29, 86], "hdbscan": [6, 86], "etc": [6, 8, 20, 30, 35, 39, 44, 54, 55, 73, 77, 80, 81, 83, 84, 86, 88, 91, 95], "sensit": [6, 8, 48], "ep": [6, 29, 63], "radiu": 6, "min_sampl": [6, 29], "datalab": [6, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 77, 79, 86, 87, 90, 95, 97, 98], "kmean": [6, 86], "your_data": 6, "get_pred_prob": 6, "n_cluster": [6, 29, 86], "cluster_id": [6, 8, 29, 86], "labels_": 6, "underperforming_group": [6, 8, 12, 19, 81, 83, 84, 86, 87, 88], "search": [7, 8, 18, 24, 25, 49, 67, 86, 94], "nondefault": 7, "Near": [7, 86], "imbal": [7, 19, 59, 64, 65, 81], "null": [7, 12, 19, 81, 84, 87, 88], "valuat": [7, 16], "togeth": [7, 8, 44, 80, 81, 83, 84, 87, 88, 95, 98, 99], "built": [7, 46], "own": [7, 35, 37, 39, 53, 59, 60, 63, 69, 73, 79, 81, 83, 84, 86, 87, 90, 91, 95, 96, 97, 98, 99], "prerequisit": 7, "basic": [7, 39, 54, 83, 84, 93], "page": [8, 81, 86, 88], "variou": [8, 11, 28, 37, 51, 53, 77, 80, 81, 83, 84, 85, 88, 90, 92, 97], "why": [8, 84], "matter": [8, 34, 56, 84, 98], "_score": 8, "flag": [8, 20, 24, 41, 46, 56, 57, 60, 67, 77, 79, 80, 81, 83, 84, 85, 87, 88, 92, 93, 95, 96, 98], "badli": [8, 62, 99], "code": [8, 35, 39, 44, 50, 54, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 90, 91, 92, 93, 95, 96, 97, 98, 99], "issue_scor": 8, "outlier_scor": [8, 26, 80, 81, 83, 84, 87, 88, 93], "atyp": [8, 64, 80, 81, 83, 84, 87, 88, 93], "datapoint": [8, 29, 41, 46, 50, 65, 68, 77, 79, 80, 81, 83, 84, 86, 94, 95, 97, 98], "is_issu": [8, 20], "is_outlier_issu": [8, 80, 81, 83, 84, 87, 88], "annot": [8, 34, 45, 55, 56, 57, 59, 60, 62, 63, 72, 75, 76, 77, 79, 80, 81, 83, 84, 86, 87, 88, 89, 92, 96], "transform": [8, 30, 46, 48, 50, 64, 65, 81, 84, 87, 93, 97, 98, 99], "dissimilar": [8, 83, 84], "preced": 8, "cosin": [8, 64, 93], "incorrect": [8, 62, 65, 68, 79, 80, 81, 83, 84, 87, 88, 92, 95, 97], "due": [8, 38, 41, 65, 69, 71, 79, 80, 81, 83, 84, 87, 88, 95], "appear": [8, 34, 45, 56, 57, 60, 68, 81, 83, 84, 87, 95, 96], "now": [8, 38, 78, 79, 81, 90, 92, 93, 95, 97, 98, 99], "u": [8, 79, 80, 83, 86, 87, 88, 90, 91, 94, 95, 96, 97, 98, 99], "token": [8, 40, 49, 71, 72, 73, 74, 75, 76, 86, 88, 89], "calcul": [8, 16, 24, 38, 46, 55, 59, 60, 62, 63, 64, 67, 71, 85, 87], "hamper": [8, 85, 87], "analyt": [8, 77, 86, 90], "lead": [8, 62, 65, 87, 92], "draw": [8, 80, 81], "conclus": [8, 84], "veri": [8, 34, 56, 60, 62, 80, 81, 83, 84, 86, 87, 88, 90, 93, 95, 98], "rare": [8, 41, 63, 80, 81, 83, 84, 86, 87, 88], "anomal": [8, 65, 80, 81, 83, 84, 87, 88], "articl": [8, 38, 86], "ai": [8, 77, 79, 80, 81, 83, 84, 85, 86, 87, 89, 90, 91, 93, 95, 97, 98, 99], "blog": 8, "unexpect": [8, 35, 39, 84], "consequ": 8, "inspect": [8, 79, 81, 87, 88, 92, 95, 98], "neg": [8, 62, 63, 80, 81, 85], "extrem": [8, 80, 81, 83, 84, 86, 87, 88], "rel": [8, 34, 55, 56, 64, 80, 81, 83, 84, 87, 88, 93], "record": [8, 35, 39, 79, 83, 95], "abbrevi": 8, "misspel": 8, "typo": [8, 76], "resolut": 8, "video": [8, 85], "audio": [8, 80, 81, 86, 89], "minor": [8, 49], "variat": 8, "translat": 8, "d": [8, 48, 83, 84, 88, 91, 95, 97, 99], "constant": [8, 29, 67], "median": [8, 28, 48], "question": [8, 20, 77, 88], "nearli": [8, 20, 81, 83, 84, 87], "awar": [8, 78, 88], "presenc": [8, 88], "signific": [8, 83, 84, 88], "violat": [8, 83, 84, 88], "assumpt": [8, 83, 84, 88], "changepoint": [8, 83, 84, 88], "shift": [8, 83, 84, 88], "drift": [8, 81, 83, 88], "autocorrel": [8, 83, 84, 88], "almost": [8, 83, 84, 88], "adjac": [8, 83, 84, 88], "tend": [8, 34, 44, 83, 84, 88, 96, 99], "sequenti": [8, 35, 39, 54, 87], "gap": 8, "b": [8, 16, 17, 18, 20, 21, 23, 24, 26, 28, 29, 34, 49, 50, 75, 83, 84, 85, 88, 94, 97, 99], "x1": [8, 60, 63, 92], "x2": [8, 60, 63, 92], "10th": 8, "100th": 8, "90": [8, 75, 83, 88, 94, 95, 97], "similarli": [8, 35, 39, 80, 83, 86, 87, 92], "math": [8, 87], "behind": [8, 64, 88], "proper": [8, 50, 55, 60, 63, 84, 87, 90, 92, 97], "closer": [8, 62, 92], "scenario": [8, 65, 80, 81], "underli": [8, 40, 64, 73, 75, 99], "stem": [8, 64, 93], "evolv": 8, "influenc": 8, "act": [8, 62, 80], "accordingli": [8, 30], "emploi": [8, 91, 93], "partit": [8, 94], "ahead": 8, "good": [8, 35, 39, 48, 54, 56, 62, 65, 69, 71, 72, 77, 83, 84, 87], "fix": [8, 55, 84, 88, 95, 98], "problem": [8, 30, 38, 46, 72, 77, 80, 81, 84, 86, 87], "deploy": [8, 88, 95, 97, 98], "overlook": [8, 62, 92], "fact": 8, "thu": [8, 34, 39, 56, 79, 83, 84, 88, 94, 97, 99], "diagnos": [8, 81, 86], "rarest": [8, 81], "q": [8, 92], "fall": [8, 62, 71, 75, 88, 93], "subpar": 8, "special": [8, 49], "techniqu": [8, 92], "smote": 8, "asymmetr": [8, 34], "too": [8, 41, 46, 64, 81, 86, 87, 92], "dark": [8, 96], "bright": [8, 99], "blurri": [8, 87], "abnorm": [8, 63, 87, 92], "cluster": [8, 16, 29], "slice": 8, "poor": 8, "subpopul": 8, "lowest": [8, 55, 63, 81, 86, 87, 90, 91, 92, 96], "get_self_confidence_for_each_label": [8, 46, 65], "power": [8, 83, 84, 85, 87, 88, 99], "r": [8, 38, 67, 80, 81, 95, 96], "tabular": [8, 77, 80, 81, 82, 86, 89, 90], "categor": [8, 64, 80, 81, 82, 86, 95, 97], "encod": [8, 47, 63, 69, 72, 83, 84, 86, 95, 96, 97, 98], "miss": [8, 25, 35, 39, 50, 60, 62, 83, 86, 92, 95], "pattern": 8, "contribut": [8, 16, 92], "isn": [8, 15, 25], "approxim": [8, 16, 38, 64, 90], "shaplei": [8, 16], "knn": [8, 11, 16, 24, 29, 64, 83, 93], "scalabl": 8, "sacrific": 8, "One": [8, 50, 64, 86], "quantif": 8, "exert": [8, 81], "possible_issue_typ": 8, "label_kwarg": 8, "outlier_kwarg": 8, "near_dupl": [8, 12, 17, 80, 81, 83, 84, 86, 87, 88], "near_duplicate_kwarg": 8, "non_iid_kwarg": 8, "class_imbal": [8, 12, 18, 81, 83, 84, 87, 88], "class_imbalance_kwarg": 8, "underperforming_group_kwarg": 8, "null_kwarg": 8, "health_summary_paramet": [8, 19, 21, 28], "health_summari": [8, 21, 34, 77, 85], "health_summary_kwarg": 8, "tandem": [8, 85], "view": [8, 35, 39, 40, 41, 71, 73, 75, 77, 79, 80, 81, 83, 84, 85, 88, 90, 91, 92, 93, 94, 95, 97, 98, 99], "ood_kwarg": 8, "outofdistribut": [8, 26, 64, 93], "outsid": [8, 91], "outlierissuemanag": [8, 12, 19, 26, 80], "nearduplicateissuemanag": [8, 12, 17, 19], "noniidissuemanag": [8, 12, 19, 24], "num_permut": [8, 24], "permut": [8, 24], "significance_threshold": [8, 24], "signic": 8, "noniid": [8, 19], "classimbalanceissuemanag": [8, 12, 18, 19], "underperforminggroupissuemanag": [8, 12, 19, 29], "determinin": 8, "neighbour": 8, "min_cluster_sampl": [8, 29], "filter_cluster_id": [8, 19, 29], "clustering_kwarg": [8, 29], "faq": [8, 77, 81, 83, 84, 87, 89], "nullissuemanag": [8, 12, 19, 25], "data_valuation_kwarg": 8, "data_valu": [8, 12, 19], "datavaluationissuemanag": [8, 12, 16, 19], "codeblock": 8, "demonstr": [8, 38, 80, 81, 84, 86, 87, 88, 90, 91, 92, 95, 96], "howev": [8, 35, 39, 50, 79, 83, 84, 87, 90, 94, 96, 97, 98], "mandatori": 8, "image_issue_types_kwarg": 8, "32": [8, 79, 80, 85, 90, 92, 99], "fewer": [8, 41, 50, 92], "vice": [8, 56], "versa": [8, 56], "light": [8, 85, 87, 92, 96], "29": [8, 85, 87, 90, 91, 92, 96, 99], "low_inform": [8, 87], "odd_aspect_ratio": [8, 87], "35": [8, 80, 85, 90, 91, 92], "odd_siz": [8, 87], "10": [8, 16, 17, 21, 24, 29, 35, 36, 63, 64, 65, 76, 79, 80, 81, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99], "doc": [8, 35, 39, 77, 79, 80, 81, 85, 87, 88, 90, 91, 93, 95, 99], "data_issu": [9, 13, 14, 31, 80], "issue_find": [9, 13], "factori": [9, 13, 14], "model_output": [9, 13], "except": [10, 35, 39, 54, 65, 80, 81, 87, 90], "dataformaterror": [10, 13], "add_not": 10, "with_traceback": 10, "tb": 10, "__traceback__": 10, "datasetdicterror": [10, 13], "datasetdict": 10, "datasetloaderror": [10, 13], "dataset_typ": 10, "fail": 10, "hold": 10, "associ": [10, 14, 30, 32, 35, 39, 63, 90], "sublist": 10, "map_to_int": 10, "abc": [10, 20, 30], "is_avail": [10, 87], "dataissu": [11, 13, 14, 31], "serv": [11, 14, 90], "central": [11, 99], "repositori": 11, "strategi": [11, 46, 86], "being": [11, 34, 35, 39, 41, 46, 49, 50, 65, 83, 86, 88, 95, 96, 97], "_infostrategi": 11, "basi": 11, "collect_statist": 11, "reus": [11, 20], "avoid": [11, 35, 38, 39, 41, 50, 57, 60, 63, 67, 69, 71, 80, 81, 86], "recomput": [11, 98], "weighted_knn_graph": 11, "issue_manager_that_computes_knn_graph": 11, "collect_issues_from_issue_manag": 11, "collect_issues_from_imagelab": 11, "imagelab": 11, "set_health_scor": 11, "health": [11, 21, 34, 56, 77], "get_data_statist": [11, 13], "concret": 12, "subclass": [12, 35, 39, 64, 80], "regressionlabelissuemanag": [12, 19, 27, 28], "multilabelissuemanag": [12, 19, 22, 23], "from_str": [12, 32, 42, 46], "my_issu": 12, "logic": [12, 32, 38, 41, 69, 71], "stabl": [13, 19, 22, 27, 37, 42, 50, 53, 64, 78], "issuefind": [13, 14, 31], "modeloutput": [13, 30], "multiclasspredprob": [13, 30], "regressionpredict": [13, 30], "multilabelpredprob": [13, 30], "instati": 14, "public": [14, 88, 92, 96, 99], "creation": [14, 39], "execut": [14, 35, 39, 80, 86, 92], "coordin": [14, 60, 62, 63, 92, 99], "behavior": [14, 34, 35, 39, 63, 86], "At": [14, 63, 86], "get_available_issue_typ": 14, "direct": [15, 25, 35, 39], "valuabl": 16, "vstack": [16, 50, 85, 86, 87, 88, 90, 91], "25": [16, 24, 35, 46, 48, 81, 85, 87, 88, 90, 91, 92, 99], "classvar": [16, 17, 18, 20, 21, 23, 24, 25, 26, 28, 29], "short": [16, 17, 18, 20, 21, 23, 24, 25, 26, 28, 29, 49, 50], "data_valuation_scor": 16, "item": [16, 17, 18, 20, 21, 23, 24, 25, 26, 28, 29, 35, 39, 50, 80, 81, 86, 87, 88, 90, 91], "some_info_kei": [16, 17, 18, 20, 21, 23, 24, 25, 26, 28, 29], "additional_info_kei": [16, 17, 18, 20, 21, 23, 24, 25, 26, 28, 29], "default_threshold": [16, 19, 26], "arxiv": [16, 88], "ab": [16, 88, 92], "1911": 16, "07128": 16, "larger": [16, 67, 69, 71, 84, 85, 86, 87], "collect_info": [16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29], "info_to_omit": [16, 17, 18, 20, 21, 23, 24, 26, 28, 29], "compos": [16, 17, 18, 20, 21, 23, 24, 26, 28, 29, 35, 39, 84, 93, 98], "is_x_issu": [16, 17, 18, 20, 21, 23, 24, 26, 28, 29], "x_score": [16, 17, 18, 20, 21, 23, 24, 26, 28, 29], "val_a": [16, 17, 18, 20, 21, 23, 24, 26, 28, 29], "val_b1": [16, 17, 18, 20, 21, 23, 24, 26, 28, 29], "val_b2": [16, 17, 18, 20, 21, 23, 24, 26, 28, 29], "report_str": [16, 17, 18, 20, 21, 23, 24, 25, 26, 28, 29, 31], "_": [17, 20, 21, 23, 24, 25, 28, 29, 46, 49, 50, 79, 80, 85, 87, 88, 91, 97], "near_duplicate_set": [17, 19, 80, 81, 83, 84, 86, 87, 88], "occurr": [17, 18, 20, 24, 25, 26, 29, 49], "median_nn_dist": 17, "near_duplicate_scor": [17, 80, 81, 83, 84, 86, 87, 88], "class_imbalance_scor": [18, 81], "bleed": [19, 22, 27, 37], "edg": [19, 22, 27, 37, 62, 77, 88, 99], "sharp": [19, 22, 27, 37], "get_health_summari": [19, 21], "ood": [19, 26, 64, 65, 80, 81, 84, 87, 88, 93], "simplified_kolmogorov_smirnov_test": [19, 24], "outlier_cluster_label": [19, 29], "no_underperforming_cluster_id": [19, 29], "set_knn_graph": [19, 29], "perform_clust": [19, 29], "get_worst_clust": [19, 29], "find_issues_with_predict": [19, 27, 28], "find_issues_with_featur": [19, 27, 28], "believ": [20, 96], "priori": [20, 88], "abstract": [20, 30], "applic": [21, 55, 86, 88, 90, 99], "typevar": [21, 23, 35, 39, 49, 59, 62, 63], "scalartyp": [21, 23], "covari": [21, 23, 67, 95], "summary_dict": 21, "label_scor": [21, 23, 28, 79, 80, 81, 83, 84, 87, 88, 91, 95], "neighbor_histogram": 24, "non_neighbor_histogram": 24, "kolmogorov": 24, "smirnov": 24, "largest": [24, 38, 46, 65, 69, 71, 92, 96], "empir": [24, 45, 55], "cumul": 24, "ecdf": 24, "histogram": [24, 83, 95], "absolut": [24, 28], "dimension": [24, 50, 79, 88, 93], "trial": 24, "non_iid_scor": [24, 81, 83, 84, 88], "null_track": 25, "extend": [25, 47, 87, 92, 93, 99], "superclass": 25, "arbitrari": [25, 34, 71, 75, 80, 93, 95], "prompt": 25, "address": [25, 80, 81, 84, 86, 98], "enabl": [25, 39], "null_scor": [25, 81], "37037": 26, "q3_avg_dist": 26, "iqr_avg_dist": 26, "median_outlier_scor": 26, "multipli": 28, "deleg": 28, "confus": [29, 30, 34, 35, 39, 41, 50, 63, 98, 99], "50": [29, 39, 86, 88, 90, 92, 93, 95], "keepdim": [29, 86], "signifi": 29, "absenc": 29, "find_issues_kwarg": 29, "int64": [29, 79, 90], "npt": 29, "int_": 29, "id": [29, 55, 80, 86, 87, 90], "unique_cluster_id": 29, "_description_": 29, "performed_clust": 29, "worst_cluster_id": 29, "underperforming_group_scor": [29, 81], "convent": [30, 32], "subject": [30, 32], "meant": [30, 32], "Not": 30, "mainli": [30, 93, 99], "content": [30, 64, 79, 80, 81, 85, 87, 88, 90, 91, 93, 95, 99], "fetch": [30, 38, 79, 81], "datset": 31, "exclud": [31, 40, 72, 76, 80, 86, 99], "get_report": 31, "enum": [32, 46], "qualnam": [32, 46], "boundari": [32, 46, 80, 81], "continu": [32, 84, 86, 87, 90, 92, 95, 97, 98, 99], "binari": [32, 46, 50, 57, 59, 88, 99], "simultan": [32, 95], "task_str": 32, "is_classif": 32, "__contains__": [32, 42, 46], "member": [32, 35, 39, 46, 80, 81], "typeerror": [32, 46], "12": [32, 46, 79, 80, 81, 83, 84, 85, 86, 87, 88, 90, 92, 93, 95, 96, 97, 98, 99], "__getitem__": [32, 42, 46], "match": [32, 34, 35, 39, 41, 46, 55, 56, 65, 80, 81, 85, 87, 92, 94, 96], "__iter__": [32, 42, 46], "__len__": [32, 42, 46], "alias": [32, 46], "is_regress": 32, "is_multilabel": 32, "overview": [34, 79, 81, 83, 84, 87, 90, 92, 93, 95, 97, 98, 99], "modifi": [34, 35, 38, 39, 50, 86, 88], "help": [34, 35, 39, 63, 77, 78, 79, 80, 83, 84, 85, 86, 87, 90, 91, 95, 96, 97, 98, 99], "rank_classes_by_label_qu": [34, 81], "merg": [34, 49, 77, 85, 86, 99], "find_overlapping_class": [34, 86, 88], "problemat": [34, 56, 72, 76, 79, 92, 99], "unnorm": [34, 56, 88], "abov": [34, 35, 38, 39, 50, 55, 62, 63, 65, 71, 75, 79, 80, 81, 83, 84, 86, 87, 88, 90, 91, 92, 94, 95, 96, 97, 98, 99], "model_select": [34, 46, 79, 80, 81, 83, 84, 86, 87, 88, 90, 91, 93, 95, 97, 98], "cross_val_predict": [34, 39, 79, 80, 81, 83, 84, 86, 88, 90, 94, 95, 97, 98], "get_data_labels_from_dataset": 34, "yourfavoritemodel": [34, 88], "cv": [34, 46, 79, 80, 81, 83, 88, 90, 97], "df": [34, 50, 76, 79, 86], "overall_label_qu": [34, 56], "col": 34, "prob": [34, 49, 88, 94], "divid": [34, 56, 65], "label_nois": [34, 56], "human": [34, 85, 96, 99], "clearli": [34, 65, 87, 92, 96], "num": [34, 56, 85, 88], "overlap": [34, 77, 85, 86, 88], "ontolog": 34, "publish": [34, 99], "therefor": [34, 65], "vehicl": [34, 85], "truck": [34, 85, 93, 96], "intuit": [34, 56], "car": [34, 85, 92, 96], "frequent": [34, 55, 83, 86, 95], "characterist": 34, "l": [34, 35, 39, 60, 62, 63], "class1": 34, "class2": 34, "relationship": 34, "dog": [34, 50, 56, 58, 72, 85, 86, 93, 94, 99], "cat": [34, 50, 56, 58, 85, 86, 93, 94], "captur": [34, 79, 92, 93, 96], "co": [34, 35, 36], "noisy_label": [34, 80, 81, 91], "overlapping_class": 34, "descend": [34, 35, 39, 46, 56, 63], "overall_label_health_scor": [34, 56, 88], "suggest": [34, 55, 56, 62, 84, 86, 87, 95, 98], "half": [34, 35, 37, 39, 56, 85, 99], "health_scor": [34, 56], "classes_by_label_qu": [34, 81], "cnn": [35, 37, 39, 87], "cifar": [35, 36, 85, 93], "teach": [35, 36], "bhanml": 35, "blob": 35, "master": [35, 79, 80, 81, 83, 84, 85, 87, 88, 90, 91, 92, 93, 95, 97, 98], "call_bn": [35, 37], "bn": 35, "input_channel": 35, "n_output": 35, "dropout_r": 35, "top_bn": 35, "architectur": [35, 39], "shown": [35, 63, 80, 86, 90, 93, 94, 96, 99], "forward": [35, 36, 37, 39, 87, 90], "overridden": [35, 39], "although": [35, 39, 64, 83, 97], "recip": [35, 39], "afterward": [35, 39], "sinc": [35, 39, 43, 51, 56, 63, 71, 75, 86, 90, 91, 92, 94, 99], "former": [35, 39], "hook": [35, 39, 85], "silent": [35, 38, 39], "t_destin": [35, 37, 39], "__call__": [35, 37, 39, 42, 46], "add_modul": [35, 37, 39], "child": [35, 39], "fn": [35, 39, 63], "recurs": [35, 39, 46], "submodul": [35, 39], "children": [35, 37, 39, 99], "nn": [35, 36, 39, 87], "init": [35, 39, 88], "no_grad": [35, 39, 87, 93], "init_weight": [35, 39], "linear": [35, 39, 84, 87, 98], "fill_": [35, 39], "net": [35, 39, 79, 85, 87], "in_featur": [35, 39], "out_featur": [35, 39], "bia": [35, 39, 87], "tensor": [35, 36, 39, 79, 84, 87, 93, 98], "requires_grad": [35, 39], "bfloat16": [35, 37, 39], "cast": [35, 39, 79], "buffer": [35, 37, 39], "datatyp": [35, 39], "xdoctest": [35, 39], "undefin": [35, 39], "var": [35, 39], "buf": [35, 39], "20l": [35, 39], "1l": [35, 39], "5l": [35, 39], "call_super_init": [35, 37, 39], "immedi": [35, 39, 93], "compil": [35, 37, 39, 54], "cpu": [35, 37, 39, 41, 79, 87], "move": [35, 39, 46, 78, 85], "cuda": [35, 37, 39, 79, 87], "devic": [35, 39, 79, 87], "gpu": [35, 39, 79, 84, 98], "live": [35, 39], "copi": [35, 39, 67, 79, 80, 81, 83, 86, 91, 94, 95, 97], "doubl": [35, 37, 39], "dump_patch": [35, 37, 39], "eval": [35, 37, 39, 87, 91, 93], "dropout": [35, 39], "batchnorm": [35, 39], "grad": [35, 39], "extra_repr": [35, 37, 39], "line": [35, 39, 77, 80, 85, 90, 93, 99], "get_buff": [35, 37, 39], "target": [35, 36, 39, 67, 68, 93, 95], "throw": [35, 39], "get_submodul": [35, 37, 39], "explan": [35, 39], "fulli": [35, 39, 54, 86], "qualifi": [35, 39], "referenc": [35, 39], "attributeerror": [35, 39], "invalid": [35, 39, 84], "resolv": [35, 39, 99], "get_extra_st": [35, 37, 39], "state_dict": [35, 37, 39], "set_extra_st": [35, 37, 39], "build": [35, 39, 87, 96], "picklabl": [35, 39], "serial": [35, 39], "backward": [35, 39, 87], "break": [35, 39, 87, 92], "pickl": [35, 39, 92], "get_paramet": [35, 37, 39], "let": [35, 39, 64, 65, 79, 81, 83, 84, 86, 87, 90, 91, 92, 93, 95, 96, 97, 98, 99], "net_b": [35, 39], "net_c": [35, 39], "conv": [35, 39], "conv2d": [35, 39, 87], "16": [35, 39, 46, 71, 79, 80, 81, 83, 84, 85, 86, 87, 88, 90, 92, 93, 96, 98, 99], "33": [35, 39, 85, 92], "kernel_s": [35, 39], "stride": [35, 39], "200": [35, 39, 65, 85, 92, 99], "diagram": [35, 39, 94], "degre": [35, 39], "queri": [35, 39, 81, 86, 87, 91], "named_modul": [35, 37, 39], "o": [35, 39, 48, 49, 79, 80, 81, 85, 86, 88, 91, 92, 99], "transit": [35, 39], "ipu": [35, 37, 39], "load_state_dict": [35, 37, 39], "strict": [35, 39, 46], "persist": [35, 39], "strictli": [35, 39], "inplac": [35, 39, 90], "preserv": [35, 39, 50], "namedtupl": [35, 39], "missing_kei": [35, 39], "unexpected_kei": [35, 39], "runtimeerror": [35, 39], "idx": [35, 39, 50, 51, 63, 80, 86, 87, 88, 90, 92, 93], "named_buff": [35, 37, 39], "prefix": [35, 39, 79, 99], "remove_dupl": [35, 39], "prepend": [35, 39], "running_var": [35, 39], "named_children": [35, 37, 39], "conv4": [35, 39], "conv5": [35, 39], "memo": [35, 39], "named_paramet": [35, 37, 39], "register_backward_hook": [35, 37, 39], "deprec": [35, 39, 43, 79, 84, 86, 98], "favor": [35, 39], "register_full_backward_hook": [35, 37, 39], "removablehandl": [35, 39], "register_buff": [35, 37, 39], "running_mean": [35, 39], "register_forward_hook": [35, 37, 39], "with_kwarg": [35, 39], "always_cal": [35, 39], "possibli": [35, 39, 83, 97], "fire": [35, 39, 85], "register_module_forward_hook": [35, 39], "regardless": [35, 39, 80, 81], "register_forward_pre_hook": [35, 37, 39], "And": [35, 39], "forward_pr": [35, 39], "register_module_forward_pre_hook": [35, 39], "gradient": [35, 39, 83, 87, 95], "grad_input": [35, 39], "grad_output": [35, 39], "technic": [35, 39], "caller": [35, 39], "register_module_full_backward_hook": [35, 39], "register_full_backward_pre_hook": [35, 37, 39], "backward_pr": [35, 39], "register_module_full_backward_pre_hook": [35, 39], "register_load_state_dict_post_hook": [35, 37, 39], "post": [35, 39], "incompatible_kei": [35, 39], "modif": [35, 39], "thrown": [35, 39], "register_modul": [35, 37, 39], "register_paramet": [35, 37, 39], "register_state_dict_pre_hook": [35, 37, 39], "keep_var": [35, 39], "requires_grad_": [35, 37, 39], "autograd": [35, 39], "freez": [35, 39, 79, 84, 98], "finetun": [35, 39], "gan": [35, 39], "share_memori": [35, 37, 39], "share_memory_": [35, 39], "destin": [35, 39], "shallow": [35, 39], "releas": [35, 39, 78, 79, 86], "design": [35, 39], "ordereddict": [35, 39], "detach": [35, 39, 87], "non_block": [35, 39], "memory_format": [35, 39], "channels_last": [35, 39], "Its": [35, 39, 46, 56, 62], "complex": [35, 39, 79], "integr": [35, 39, 77], "asynchron": [35, 39], "host": [35, 39], "pin": [35, 39, 84, 85, 98], "desir": [35, 39, 49, 63], "4d": [35, 39], "ignore_w": [35, 39], "determinist": [35, 39, 79], "1913": [35, 39], "3420": [35, 39], "5113": [35, 39], "2325": [35, 39], "env": [35, 39], "torch_doctest_cuda1": [35, 39], "gpu1": [35, 39], "1914": [35, 39], "5112": [35, 39], "2324": [35, 39], "float16": [35, 39], "cdoubl": [35, 39], "3741": [35, 39], "2382": [35, 39], "5593": [35, 39], "4443": [35, 39], "complex128": [35, 39], "6122": [35, 39], "1150": [35, 39], "to_empti": [35, 37, 39], "storag": [35, 39, 84, 98], "dst_type": [35, 39], "xpu": [35, 37, 39], "zero_grad": [35, 37, 39, 87], "set_to_non": [35, 39], "reset": [35, 39], "context": [35, 39, 92], "noisili": [36, 88], "han": 36, "2018": 36, "cifar_cnn": [36, 37], "loss_coteach": [36, 37], "y_1": 36, "y_2": 36, "forget_r": 36, "class_weight": 36, "logit": [36, 54, 87], "decim": [36, 50], "quickli": [36, 79, 83, 84, 86, 87, 91, 93, 96, 97, 99], "forget": [36, 46, 99], "rate_schedul": 36, "epoch": [36, 37, 39, 86, 87], "initialize_lr_schedul": [36, 37], "lr": [36, 37, 39], "001": [36, 65, 86], "250": [36, 80, 81, 88, 92], "epoch_decay_start": 36, "80": [36, 83, 91, 95, 97], "schedul": 36, "adjust": [36, 41, 59, 64, 65, 77, 88], "beta": 36, "adam": 36, "adjust_learning_r": [36, 37], "alpha_plan": 36, "beta1_plan": 36, "forget_rate_schedul": [36, 37], "num_gradu": 36, "expon": 36, "tell": [36, 84, 87, 88, 98], "train_load": [36, 39], "model1": [36, 88], "optimizer1": 36, "model2": [36, 88], "optimizer2": 36, "dataload": [36, 87, 93], "parser": 36, "parse_arg": 36, "num_iter_per_epoch": 36, "print_freq": 36, "topk": 36, "top1": 36, "top5": 36, "test_load": 36, "offici": [37, 53, 99], "wish": [37, 53, 93, 96, 99], "adj_confident_thresholds_shar": [37, 38], "labels_shar": [37, 38], "pred_probs_shar": [37, 38], "labelinspector": [37, 38, 86], "get_num_issu": [37, 38], "get_quality_scor": [37, 38], "update_confident_threshold": [37, 38], "score_label_qu": [37, 38], "split_arr": [37, 38], "span_classif": 37, "display_issu": [37, 40, 70, 71, 72, 73, 74, 75, 76, 96, 99], "mnist_pytorch": 37, "get_mnist_dataset": [37, 39], "get_sklearn_digits_dataset": [37, 39], "simplenet": [37, 39], "batch_siz": [37, 38, 39, 69, 71, 86, 87, 93, 96], "log_interv": [37, 39], "momentum": [37, 39], "no_cuda": [37, 39], "test_batch_s": [37, 39, 87], "loader": [37, 39, 87], "set_predict_proba_request": [37, 39], "set_predict_request": [37, 39], "coteach": [37, 78], "mini": [38, 69, 71, 86], "low_self_confid": [38, 41, 57], "self_confid": [38, 41, 42, 46, 57, 59, 65, 73, 75, 86, 88, 97, 98], "conveni": [38, 79, 84, 98], "script": 38, "labels_fil": [38, 86], "pred_probs_fil": [38, 86], "quality_score_kwarg": 38, "num_issue_kwarg": 38, "return_mask": 38, "variant": [38, 55, 96], "read": [38, 43, 81, 86, 88, 93, 99], "zarr": [38, 86], "memmap": [38, 96], "pythonspe": 38, "mmap": [38, 86], "hdf5": 38, "further": [38, 40, 56, 57, 59, 62, 63, 71, 72, 79, 86], "yourfil": 38, "npy": [38, 85, 86, 96], "mmap_mod": [38, 96], "tip": [38, 41, 54, 86], "save_arrai": 38, "your_arrai": 38, "disk": [38, 85, 86], "npz": [38, 99], "maxim": [38, 55, 69, 71, 96], "multiprocess": [38, 41, 57, 69, 71, 86, 87], "linux": [38, 69, 71], "physic": [38, 41, 69, 71, 92], "psutil": [38, 41, 69, 71], "labels_arrai": [38, 51], "predprob": 38, "pred_probs_arrai": 38, "back": [38, 63, 80, 86, 92, 93], "store_result": 38, "becom": [38, 93], "verifi": [38, 86, 90, 93], "long": [38, 55, 64, 90], "enough": [38, 50, 86], "chunk": [38, 94], "ram": [38, 85], "faster": [38, 64, 67, 69, 71, 86, 88], "end_index": 38, "labels_batch": 38, "pred_probs_batch": 38, "batch_result": 38, "indices_of_examples_with_issu": [38, 86], "shortcut": 38, "encount": [38, 41, 69], "1000": [38, 79, 84, 86, 93], "aggreg": [38, 42, 46, 55, 59, 62, 65, 75, 86, 88, 90], "seen": [38, 86, 93, 99], "far": [38, 55], "label_quality_scor": [38, 59, 62, 65, 68, 88, 92], "method1": 38, "method2": 38, "normalized_margin": [38, 41, 42, 46, 57, 59, 65, 73, 75], "low_normalized_margin": [38, 41, 57], "issue_indic": [38, 62, 87], "update_num_issu": 38, "arr": [38, 86], "chunksiz": 38, "convnet": 39, "bespok": [39, 54], "download": [39, 79, 86, 93], "mnist": [39, 77, 79, 85], "handwritten": 39, "digit": [39, 79, 85], "last": [39, 46, 60, 63, 80, 81, 86, 90, 92, 99], "sklearn_digits_test_s": 39, "64": [39, 83, 87, 88, 92, 97], "01": [39, 65, 67, 79, 88, 91, 92, 93], "templat": 39, "flexibli": 39, "among": [39, 55, 88], "test_set": 39, "Be": 39, "overrid": 39, "train_idx": [39, 50, 93], "train_label": [39, 93, 98], "scikit": [39, 50, 64, 77, 79, 80, 81, 83, 84, 86, 89, 95, 98], "span": 40, "sentenc": [40, 49, 73, 75, 76, 84, 98], "token_classif": [40, 49, 73, 75, 76, 86], "encourag": [41, 57, 65, 68], "multilabel_classif": [41, 56, 57, 59, 65, 86, 91], "pred_probs_by_class": 41, "prune_count_matrix_col": 41, "rank_by_kwarg": [41, 57, 65, 88], "num_to_remove_per_class": [41, 57], "bad": [41, 57, 62, 65, 84, 86, 98], "seem": [41, 88, 91], "aren": 41, "confidence_weighted_entropi": [41, 42, 46, 57, 59, 65, 73, 75], "label_issues_idx": [41, 65], "entropi": [41, 43, 45, 46, 64, 65], "prune_by_class": [41, 57, 88], "predicted_neq_given": [41, 57, 88], "prune_counts_matrix": 41, "smallest": [41, 65], "unus": 41, "number_of_mislabeled_examples_in_class_k": 41, "delet": [41, 77, 86, 98], "thread": [41, 57], "window": [41, 79, 85], "shorter": [41, 60], "find_predicted_neq_given": 41, "find_label_issues_using_argmax_confusion_matrix": 41, "remove_noise_from_class": [42, 50], "clip_noise_r": [42, 50], "clip_valu": [42, 50], "value_count": [42, 50, 86], "value_counts_fill_missing_class": [42, 50], "get_missing_class": [42, 50], "round_preserving_sum": [42, 50], "round_preserving_row_tot": [42, 50], "estimate_pu_f1": [42, 50], "confusion_matrix": [42, 50], "print_square_matrix": [42, 50], "print_noise_matrix": [42, 50, 88], "print_inverse_noise_matrix": [42, 50], "print_joint_matrix": [42, 50, 88], "compress_int_arrai": [42, 50], "train_val_split": [42, 50], "subset_x_i": [42, 50], "subset_label": [42, 50], "subset_data": [42, 50], "extract_indices_tf": [42, 50], "unshuffle_tensorflow_dataset": [42, 50], "is_torch_dataset": [42, 50], "is_tensorflow_dataset": [42, 50], "csr_vstack": [42, 50], "append_extra_datapoint": [42, 50], "get_num_class": [42, 50], "num_unique_class": [42, 50], "get_unique_class": [42, 50], "format_label": [42, 50], "smart_display_datafram": [42, 50], "force_two_dimens": [42, 50], "latent_algebra": [42, 78], "compute_ps_py_inv_noise_matrix": [42, 44], "compute_py_inv_noise_matrix": [42, 44], "compute_inv_noise_matrix": [42, 44], "compute_noise_matrix_from_invers": [42, 44], "compute_pi": [42, 44], "compute_pyx": [42, 44], "label_quality_util": 42, "get_normalized_entropi": [42, 43], "multilabel_util": [42, 91], "stack_compl": [42, 47], "get_onehot_num_class": [42, 47], "int2onehot": [42, 47, 91], "onehot2int": [42, 47, 91], "multilabel_scor": [42, 59], "classlabelscor": [42, 46], "exponential_moving_averag": [42, 46, 59], "softmin": [42, 46, 59, 62, 71, 75], "possible_method": [42, 46], "multilabelscor": [42, 46], "get_class_label_quality_scor": [42, 46], "multilabel_pi": [42, 46], "get_cross_validated_multilabel_pred_prob": [42, 46], "transform_distances_to_scor": [42, 48], "token_classification_util": [42, 99], "get_sent": [42, 49, 99], "filter_sent": [42, 49, 99], "process_token": [42, 49], "merge_prob": [42, 49], "color_sent": [42, 49], "assert_valid_input": [42, 51], "assert_valid_class_label": [42, 51], "assert_nonempty_input": [42, 51], "assert_indexing_work": [42, 51], "labels_to_arrai": [42, 51], "labels_to_list_multilabel": [42, 51], "min_allowed_prob": 43, "wikipedia": 43, "activ": [43, 45, 55, 77, 90], "towardsdatasci": 43, "cheatsheet": 43, "ec57bc067c0b": 43, "clip": [43, 50, 79], "behav": 43, "unnecessari": [43, 86], "slightli": [43, 97, 98], "interv": [43, 46, 93], "herein": 44, "inexact": 44, "cours": 44, "propag": 44, "throughout": [44, 50, 67, 79, 90, 96, 99], "increas": [44, 62, 64, 65, 79, 80, 86, 90, 91, 99], "dot": [44, 75, 86], "true_labels_class_count": 44, "pyx": 44, "multiannot": 45, "assert_valid_inputs_multiannot": 45, "labels_multiannot": [45, 55], "ensembl": [45, 46, 55, 65, 83, 86, 91, 93, 95, 97], "allow_single_label": 45, "annotator_id": 45, "assert_valid_pred_prob": 45, "pred_probs_unlabel": [45, 55], "format_multiannotator_label": [45, 55, 90], "formatted_label": [45, 50], "old": [45, 50, 78, 79, 85], "check_consensus_label_class": 45, "consensus_label": [45, 55, 90], "consensus_method": [45, 55], "consensu": [45, 55, 77, 89, 99], "establish": [45, 95, 98], "compute_soft_cross_entropi": 45, "soft": [45, 85], "find_best_temp_scal": 45, "coarse_search_rang": [45, 67, 86], "fine_search_s": [45, 67, 86], "temperatur": [45, 46, 62, 71, 75], "scale": [45, 48, 85, 86, 93, 96, 97], "factor": [45, 46, 48, 69, 71], "minim": [45, 62, 93], "temp_scale_pred_prob": 45, "temp": 45, "sharpen": [45, 85], "smoothen": 45, "get_normalized_margin_for_each_label": [46, 65], "get_confidence_weighted_entropy_for_each_label": [46, 65], "75": [46, 80, 81, 85, 90, 91, 92, 95, 99], "scorer": 46, "alpha": [46, 59, 62, 80, 81, 88, 91, 95], "exponenti": 46, "ema": 46, "s_1": 46, "s_k": 46, "ema_k": 46, "accord": [46, 57, 83, 84, 88, 99], "formula": [46, 48], "_t": 46, "cdot": 46, "s_t": 46, "qquad": 46, "leq": 46, "_1": 46, "give": [46, 65, 88, 90, 96], "recent": [46, 99], "success": 46, "previou": [46, 86, 87, 92], "discount": 46, "s_ema": 46, "175": [46, 87, 88, 92], "underflow": 46, "nan": [46, 55, 83, 90, 95, 97], "aggregated_scor": 46, "base_scor": 46, "base_scorer_kwarg": 46, "aggregator_kwarg": [46, 59], "n_sampl": 46, "n_label": 46, "worst": [46, 90], "class_label_quality_scor": 46, "42": [46, 84, 85, 92, 99], "452": 46, "new_scor": 46, "575": 46, "get_label_quality_scores_per_class": [46, 58, 59], "ml_scorer": 46, "binar": [46, 47], "reformat": [46, 79], "wider": 46, "splitter": 46, "kfold": [46, 87], "onevsrestclassifi": [46, 91], "randomforestclassifi": [46, 88, 91], "n_split": [46, 81, 87, 91], "pred_prob_slic": 47, "onehot": 47, "hot": [47, 57, 63, 69, 72, 83, 85, 86, 95, 96, 97], "onehot_matrix": 47, "avg_dist": 48, "scaling_factor": 48, "exp": [48, 64, 65, 80], "dt": 48, "right": [48, 60, 63, 84, 91, 92, 93, 98], "strength": [48, 63], "pronounc": 48, "differenti": 48, "ly": 48, "rule": [48, 49, 85], "thumb": 48, "ood_features_scor": [48, 64, 93], "88988177": 48, "80519832": 48, "readabl": 49, "lambda": [49, 79, 80, 86, 90], "long_sent": 49, "headlin": 49, "charact": [49, 50], "s1": 49, "s2": 49, "processed_token": 49, "alecnlcb": 49, "entiti": [49, 77, 86, 99], "mapped_ent": 49, "unique_ident": 49, "loc": [49, 80, 81, 87, 99], "nbitbas": [49, 59], "probs_merg": 49, "55": [49, 85, 92, 95], "0125": [49, 75], "0375": 49, "075": [49, 87], "025": 49, "color": [49, 72, 80, 81, 83, 88, 91, 93, 95, 96], "red": [49, 63, 80, 81, 85, 88, 91, 92, 93, 96], "colored_sent": 49, "termcolor": 49, "31msentenc": 49, "0m": 49, "ancillari": 50, "class_without_nois": 50, "any_other_class": 50, "choos": [50, 65, 83, 86, 88, 95, 97], "tradition": 50, "new_sum": 50, "fill": 50, "come": [50, 80, 81, 86, 96], "major": [50, 55, 78, 87, 93], "versu": [50, 88], "obviou": 50, "cgdeboer": 50, "iteround": 50, "reach": 50, "prob_s_eq_1": 50, "claesen": 50, "f1": [50, 63, 84, 88], "BE": 50, "left_nam": 50, "top_nam": 50, "titl": [50, 80, 81, 88, 91, 93], "short_titl": 50, "round_plac": 50, "pretti": [50, 88], "joint_matrix": 50, "num_possible_valu": 50, "holdout_idx": 50, "extract": [50, 64, 79, 84, 90, 93, 96, 98], "allow_shuffl": 50, "turn": [50, 77, 92], "shuffledataset": 50, "histori": 50, "pre_x": 50, "buffer_s": 50, "csr_matric": 50, "append": [50, 79, 85, 86, 87, 88, 90, 91, 92, 93, 99], "bottom": [50, 60, 63, 92], "to_data": 50, "from_data": 50, "taken": 50, "label_matrix": 50, "canon": 50, "displai": [50, 63, 72, 76, 79, 84, 88, 98, 99], "jupyt": [50, 79, 80, 81, 85, 86, 87, 88, 90, 91, 93, 95, 99], "notebook": [50, 55, 79, 81, 85, 86, 88, 90, 91, 92, 96, 99], "consol": 50, "html": [50, 60, 63, 64, 83, 86, 88], "allow_missing_class": 51, "allow_one_class": 51, "length_x": 51, "labellik": 51, "labels_list": [51, 57], "keraswrappermodel": [53, 54, 77], "keraswrappersequenti": [53, 54], "tf": [54, 79], "legaci": 54, "lack": 54, "keraswrapp": 54, "huggingface_keras_imdb": 54, "unit": [54, 99], "model_kwarg": [54, 67], "compile_kwarg": 54, "sparsecategoricalcrossentropi": 54, "layer": [54, 79, 84, 93, 98], "dens": 54, "my_keras_model": 54, "from_logit": 54, "declar": 54, "apply_softmax": 54, "analysi": 55, "analyz": [55, 77, 88, 90, 91], "get_label_quality_multiannot": [55, 90], "vote": 55, "crowdsourc": [55, 77, 90], "dawid": [55, 90], "skene": [55, 90], "analog": [55, 85, 90], "chosen": [55, 65, 86, 90], "crowdlab": [55, 90], "unlabel": [55, 83, 84, 87, 90, 93, 96], "decid": [55, 84, 85, 90, 95, 98, 99], "get_active_learning_scor": [55, 90], "activelab": [55, 90], "priorit": [55, 62, 92, 96, 99], "showcas": 55, "main": 55, "best_qual": 55, "quality_method": 55, "calibrate_prob": 55, "return_detailed_qu": 55, "return_annotator_stat": 55, "return_weight": 55, "label_quality_score_kwarg": 55, "necessarili": [55, 63, 84, 88], "did": [55, 56, 79, 83, 88, 90, 95, 97, 98], "majority_vot": 55, "broken": [55, 63, 85, 95], "highest": [55, 63, 80, 87, 94], "0th": 55, "consensus_quality_scor": [55, 90], "annotator_agr": [55, 90], "reman": 55, "1st": 55, "2nd": [55, 69], "3rd": 55, "consensus_label_suffix": 55, "consensus_quality_score_suffix": 55, "suffix": 55, "emsembl": 55, "weigh": [55, 85], "agreement": [55, 90], "agre": 55, "prevent": [55, 86], "overconfid": [55, 94], "wrong": [55, 60, 62, 78, 80, 81, 84, 86, 88, 92, 98], "detailed_label_qu": [55, 90], "annotator_stat": [55, 90], "model_weight": 55, "annotator_weight": 55, "warn": [55, 80, 81, 86], "labels_info": 55, "num_annot": [55, 90], "deriv": [55, 90], "quality_annotator_1": 55, "quality_annotator_2": 55, "quality_annotator_m": 55, "annotator_qu": [55, 90], "num_examples_label": [55, 90], "agreement_with_consensu": [55, 90], "worst_class": [55, 90], "trustworthi": [55, 90, 95], "get_label_quality_multiannotator_ensembl": 55, "weigtht": 55, "budget": 55, "retrain": [55, 95, 98], "active_learning_scor": 55, "improv": [55, 81, 85, 86, 87, 88, 95, 96, 97, 98], "active_learning_scores_unlabel": 55, "get_active_learning_scores_ensembl": 55, "henc": [55, 79, 80, 90], "get_majority_vote_label": [55, 90], "event": 55, "lastli": [55, 83], "convert_long_to_wide_dataset": 55, "labels_multiannotator_long": 55, "wide": [55, 79, 97, 98], "suitabl": [55, 83, 97], "labels_multiannotator_wid": 55, "common_multilabel_issu": [56, 58], "mutual": [56, 91], "exclus": [56, 91], "rank_classes_by_multilabel_qu": [56, 58], "overall_multilabel_health_scor": [56, 58], "multilabel_health_summari": [56, 58], "classes_by_multilabel_qu": 56, "inner": [57, 71], "find_multilabel_issues_per_class": [57, 58], "per_class_label_issu": 57, "label_issues_list": 57, "pred_probs_list": [57, 65, 87, 88], "anim": [58, 93], "rat": 58, "predat": 58, "pet": 58, "reptil": 58, "manner": [59, 90, 95, 97, 98], "box": [60, 62, 63, 85, 92], "object_detect": [60, 62, 63, 92], "return_indices_ranked_by_scor": [60, 92], "overlapping_label_check": [60, 62], "suboptim": [60, 62], "locat": [60, 62, 92, 96, 99], "bbox": [60, 63, 92], "image_nam": [60, 63], "y1": [60, 63, 92], "y2": [60, 63, 92], "later": [60, 63, 64, 98, 99], "corner": [60, 63, 92], "xyxi": [60, 63, 92], "io": [60, 63, 79, 85], "keras_cv": [60, 63], "bounding_box": [60, 63, 92], "detectron": [60, 63, 92], "detectron2": [60, 63, 92], "readthedoc": [60, 63], "en": [60, 63], "latest": [60, 63], "visual": [60, 61, 63, 80, 81, 87, 95, 97, 99], "draw_box": [60, 63], "mmdetect": [60, 63, 92], "swap": [60, 62, 72, 76], "penal": [60, 62], "concern": [60, 62, 77, 81], "issues_from_scor": [61, 62, 70, 71, 72, 74, 75, 76, 92, 96, 99], "compute_overlooked_box_scor": [61, 62], "compute_badloc_box_scor": [61, 62], "compute_swap_box_scor": [61, 62], "pool_box_scores_per_imag": [61, 62], "object_counts_per_imag": [61, 63, 92], "bounding_box_size_distribut": [61, 63, 92], "class_label_distribut": [61, 63, 92], "get_sorted_bbox_count_idx": [61, 63], "plot_class_size_distribut": [61, 63], "plot_class_distribut": [61, 63], "get_average_per_class_confusion_matrix": [61, 63], "calculate_per_class_metr": [61, 63], "aggregation_weight": 62, "imperfect": [62, 86], "chose": [62, 90, 92], "imperfectli": [62, 92], "dirti": [62, 65, 68, 95], "subtyp": 62, "badloc": 62, "nonneg": 62, "high_probability_threshold": 62, "auxiliary_input": [62, 63], "vari": [62, 81], "iou": [62, 63], "heavili": 62, "auxiliarytypesdict": 62, "pred_label": [62, 98], "pred_label_prob": 62, "pred_bbox": 62, "lab_label": 62, "lab_bbox": 62, "similarity_matrix": 62, "min_possible_similar": 62, "scores_overlook": 62, "low_probability_threshold": 62, "scores_badloc": 62, "accident": [62, 83, 84, 86, 98], "scores_swap": 62, "box_scor": 62, "image_scor": [62, 71, 96], "discov": [63, 81, 99], "auxiliari": [63, 93, 96], "_get_valid_inputs_for_compute_scor": 63, "object_count": 63, "down": 63, "bbox_siz": 63, "class_distribut": 63, "plot": [63, 80, 81, 88, 91, 93, 95, 96], "sorted_idx": [63, 93], "class_to_show": 63, "hidden": [63, 93], "max_class_to_show": 63, "prediction_threshold": 63, "overlai": [63, 92], "figsiz": [63, 80, 81, 87, 88, 91, 93], "save_path": [63, 92], "blue": [63, 85, 88, 92], "overlaid": 63, "side": [63, 85, 92], "figur": [63, 88, 91, 93, 95], "extens": [63, 88, 90], "png": [63, 92], "pdf": [63, 64], "svg": 63, "matplotlib": [63, 80, 81, 87, 88, 91, 92, 93, 95], "num_proc": [63, 87], "intersect": [63, 86], "tp": 63, "fp": 63, "ground": [63, 85, 88, 90, 95], "truth": [63, 88, 90, 95], "bias": 63, "avg_metr": 63, "distionari": 63, "95": [63, 73, 75, 83, 85, 88, 95], "per_class_metr": 63, "Of": 64, "li": 64, "smaller": [64, 91, 92], "find_top_issu": [64, 65, 93], "reli": [64, 79, 80, 81, 84, 92, 93, 95, 98], "dist_metr": 64, "dim": [64, 87, 96], "subtract": [64, 65], "renorm": [64, 65, 86], "least_confid": 64, "sum_": 64, "log": [64, 65, 78], "softmax": [64, 71, 75, 87], "literatur": 64, "gen": 64, "liu": 64, "lochman": 64, "zach": 64, "openaccess": 64, "thecvf": 64, "cvpr2023": 64, "liu_gen_pushing_the_limits_of_softmax": 64, "based_out": 64, "distribution_detection_cvpr_2023_pap": 64, "fit_scor": [64, 93], "ood_predictions_scor": 64, "pretrain": [64, 79, 84, 93, 98], "adjust_confident_threshold": 64, "probabilist": [64, 79, 80, 81, 83, 84, 93, 94, 97], "order_label_issu": [65, 78], "whichev": [65, 94], "argsort": [65, 84, 87, 88, 92, 93, 95, 98], "max_": 65, "get_label_quality_ensemble_scor": [65, 86, 88], "weight_ensemble_members_bi": 65, "custom_weight": 65, "log_loss_search_t_valu": 65, "0001": [65, 85], "scheme": 65, "log_loss_search": 65, "log_loss": [65, 84], "1e0": 65, "1e1": 65, "1e2": 65, "2e2": 65, "quality_scor": [65, 93], "forth": 65, "top_issue_indic": 65, "rank_bi": [65, 78], "weird": [65, 76], "minu": 65, "prob_label": 65, "max_prob_not_label": 65, "idea": [65, 92], "AND": [65, 84], "get_epistemic_uncertainti": [66, 67], "get_aleatoric_uncertainti": [66, 67], "corrupt": [67, 95], "linearregress": [67, 86, 95], "y_with_nois": 67, "n_boot": [67, 86], "include_aleatoric_uncertainti": [67, 86], "sole": [67, 80, 90, 93, 97], "bootstrap": [67, 86, 95], "resampl": [67, 79, 86], "epistem": [67, 86, 93, 95], "aleator": [67, 86, 95], "model_final_kwarg": 67, "coars": 67, "thorough": [67, 86], "fine": [67, 79, 84, 93, 98], "grain": 67, "grid": 67, "varianc": [67, 88], "epistemic_uncertainti": 67, "residu": [67, 68, 86], "deviat": [67, 92, 95], "aleatoric_uncertainti": 67, "outr": 68, "contin": 68, "raw": [68, 77, 78, 81, 85, 87, 90, 92, 93, 95], "aka": [68, 79, 88, 92, 95, 99], "00323821": 68, "33692597": 68, "00191686": 68, "semant": [69, 71, 72, 89], "pixel": [69, 71, 72, 93, 96], "h": [69, 71, 72, 96], "height": [69, 71, 72, 96], "w": [69, 71, 72, 96], "width": [69, 71, 72, 96], "labels_one_hot": [69, 72, 96], "stream": [69, 93, 99], "downsampl": [69, 71, 96], "shrink": [69, 71], "divis": [69, 71, 80], "common_label_issu": [70, 72, 74, 76, 96, 99], "filter_by_class": [70, 72, 96], "segmant": [71, 72], "num_pixel_issu": [71, 96], "product": [71, 86, 87], "pixel_scor": [71, 96], "highlight": [72, 76, 80, 81, 83, 96], "enter": 72, "legend": [72, 80, 81, 91, 92, 95, 96], "colormap": 72, "background": 72, "person": [72, 86, 92, 96, 99], "ambigu": [72, 76, 79, 84, 85, 88, 98, 99], "systemat": [72, 76, 90], "misunderstood": [72, 76], "issues_df": [72, 87], "class_index": 72, "issues_subset": [72, 76], "filter_by_token": [74, 76, 99], "token_score_method": 75, "sentence_score_method": 75, "sentence_score_kwarg": 75, "compris": [75, 76], "token_scor": [75, 99], "converg": 75, "toward": 75, "_softmin_sentence_scor": 75, "sentence_scor": [75, 99], "token_info": 75, "70": [75, 83], "02": [75, 80, 81, 88, 92, 99], "03": [75, 83, 85, 88, 92, 99], "04": [75, 83, 92], "08": [75, 88, 92, 95, 99], "commonli": [76, 78, 80, 81, 91, 99], "But": [76, 84, 88, 95, 99], "restrict": [76, 86], "reliabl": [77, 79, 86, 90, 96, 97], "thousand": 77, "imagenet": [77, 85], "popular": [77, 90, 92], "centric": [77, 83, 84, 87, 89], "capabl": 77, "minut": [77, 79, 83, 84, 85, 90, 91, 92, 95, 96, 97, 98, 99], "conda": 77, "feature_embed": [77, 93], "Then": [77, 86, 87, 97, 98], "your_dataset": [77, 79, 80, 81, 83, 84, 86, 87], "column_name_of_label": [77, 79, 80, 81, 83, 84, 87], "plagu": [77, 81], "untrain": 77, "\u30c4": 77, "label_issues_info": [77, 81], "sklearn_compatible_model": 77, "framework": [77, 91, 92], "complianc": 77, "tag": [77, 91, 99], "sequenc": 77, "recognit": [77, 79, 86, 99], "train_data": [77, 93, 95, 97, 98], "gotten": 77, "test_data": [77, 88, 91, 93, 95, 97, 98], "deal": [77, 81], "tutori": [77, 79, 80, 81, 83, 84, 86, 87, 88, 90, 91, 92, 93, 95, 96, 97, 98, 99], "feel": [77, 79, 81, 86], "free": [77, 79, 81, 83, 84, 86, 87, 88], "ask": [77, 86], "slack": [77, 86], "project": [77, 95], "welcom": 77, "commun": [77, 86], "guidelin": [77, 92], "piec": 77, "studio": [77, 81, 83, 84, 86, 87], "platform": [77, 83, 84, 86, 87], "automl": [77, 86], "foundat": 77, "smart": [77, 83, 84, 86, 87], "edit": [77, 86], "easier": [77, 88], "unreli": [77, 79, 83, 84, 97], "link": [77, 79, 85, 92], "older": 78, "outlin": 78, "substitut": 78, "v2": [78, 83, 97], "get_noise_indic": 78, "psx": 78, "sorted_index_method": 78, "order_label_error": 78, "label_errors_bool": 78, "latent_estim": 78, "num_label_error": 78, "learningwithnoisylabel": 78, "neatli": 78, "organ": [78, 83, 85, 97, 99], "reorgan": 78, "baseline_method": 78, "incorpor": [78, 88], "research": [78, 88], "polyplex": 78, "terminologi": 78, "label_error": 78, "quickstart": [79, 80, 81, 83, 84, 85, 87, 90, 91, 92, 93, 95, 96, 97, 98, 99], "spoken": 79, "500": [79, 93, 99], "english": [79, 85], "pronunci": 79, "wav": 79, "huggingfac": [79, 80, 81, 87], "voxceleb": 79, "speech": [79, 99], "your_pred_prob": [79, 80, 81, 83, 84], "tensorflow_io": 79, "huggingface_hub": 79, "branch": [79, 80, 81, 83, 84, 85, 87, 88, 90, 91, 92, 93, 95, 97, 98], "reproduc": [79, 83, 88, 90], "command": 79, "wget": [79, 92, 96, 99], "navig": 79, "browser": 79, "jakobovski": 79, "archiv": [79, 99], "v1": 79, "tar": [79, 93], "gz": [79, 93], "mkdir": [79, 99], "spoken_digit": 79, "xf": 79, "6_nicolas_32": 79, "data_path": 79, "listdir": 79, "nondeterminist": 79, "file_nam": 79, "endswith": 79, "file_path": 79, "join": [79, 86, 87], "39": [79, 80, 84, 85, 86, 87, 92, 95, 96, 98, 99], "7_george_26": 79, "0_nicolas_24": 79, "0_nicolas_6": 79, "listen": 79, "display_exampl": 79, "click": [79, 80, 81, 85, 87, 88, 90, 91, 93, 95, 99], "expand": [79, 80, 81, 85, 87, 88, 90, 91, 93, 95, 99], "pulldown": [79, 80, 81, 85, 87, 88, 90, 91, 93, 95, 99], "colab": [79, 80, 81, 85, 86, 87, 88, 90, 91, 93, 95, 99], "tfio": 79, "pathlib": 79, "ipython": 79, "load_wav_16k_mono": 79, "filenam": 79, "khz": 79, "file_cont": 79, "read_fil": 79, "sample_r": 79, "decode_wav": 79, "desired_channel": 79, "squeez": 79, "rate_in": 79, "rate_out": 79, "16000": 79, "wav_file_nam": 79, "audio_r": 79, "wav_file_exampl": 79, "plai": [79, 85, 86], "button": 79, "wav_file_name_exampl": 79, "7_jackson_43": 79, "hear": 79, "extractor": 79, "encoderclassifi": 79, "spkrec": 79, "xvect": 79, "feature_extractor": 79, "from_hparam": 79, "run_opt": 79, "uncom": 79, "ffmpeg": 79, "system": [79, 83, 84, 87, 96], "backend": 79, "wav_audio_file_path": 79, "head": [79, 81, 83, 84, 85, 87, 88, 90, 95, 97, 98], "torchaudio": 79, "extract_audio_embed": 79, "emb": [79, 87], "signal": 79, "encode_batch": 79, "embeddings_list": [79, 87], "embeddings_arrai": 79, "opt": [79, 81, 84, 98], "hostedtoolcach": [79, 81, 84, 98], "x64": [79, 81, 84, 98], "lib": [79, 81, 84, 98], "python3": [79, 81, 84, 98], "site": [79, 81, 84, 98], "650": 79, "userwarn": [79, 80, 81, 84, 98], "stft": 79, "return_complex": 79, "view_as_r": 79, "recov": 79, "trigger": 79, "aten": 79, "src": 79, "nativ": 79, "spectralop": 79, "cpp": 79, "863": [79, 98], "_vf": 79, "n_fft": 79, "hop_length": 79, "win_length": 79, "attr": 79, "512": [79, 87], "14": [79, 80, 81, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 95, 96, 97, 98, 99], "196311": 79, "319459": 79, "478975": 79, "2890875": 79, "8170238": 79, "89265": 79, "24": [79, 85, 88, 90, 92, 95], "898056": 79, "256195": 79, "559641": 79, "559721": 79, "62067": 79, "285245": 79, "21": [79, 80, 85, 86, 88, 92, 95, 99], "709627": 79, "5033693": 79, "913803": 79, "819831": 79, "1831515": 79, "208763": 79, "084257": 79, "3210397": 79, "005453": 79, "216152": 79, "478235": 79, "6821785": 79, "053807": 79, "242471": 79, "091424": 79, "78334856": 79, "03954": 79, "23": [79, 85, 87, 88, 92, 95], "569176": 79, "19": [79, 84, 85, 86, 87, 88, 92, 93, 95, 96, 98], "761097": 79, "1258295": 79, "753237": 79, "3508866": 79, "598274": 79, "23712": 79, "2500": 79, "leverag": [79, 84, 86, 88, 90, 98], "tune": [79, 84, 85, 93, 98], "computation": [79, 84, 98], "intens": [79, 84, 98], "held": [79, 83, 84, 85, 92, 93, 94, 97], "straightforward": [79, 83, 97], "benefit": [79, 94, 96, 97], "tol": 79, "num_crossval_fold": [79, 83, 90, 97], "decreas": [79, 86], "accuracy_scor": [79, 84, 88, 97, 98], "cv_accuraci": 79, "9708": 79, "probabilit": [79, 98], "9976": 79, "986": 79, "002161": 79, "176": [79, 85, 88, 91], "002483": 79, "2318": 79, "004411": 79, "1005": 79, "004857": 79, "1871": 79, "007494": 79, "investig": 79, "040587": 79, "999207": 79, "999377": 79, "975220": 79, "999367": 79, "18": [79, 84, 85, 86, 88, 92, 93, 95, 96, 98], "identified_label_issu": [79, 84], "lowest_quality_label": [79, 84, 88, 95, 98], "sort_valu": [79, 81, 83, 84, 86, 87, 88, 90, 91, 95], "516": 79, "1946": 79, "469": 79, "2132": 79, "worth": [79, 88], "iloc": [79, 83, 84, 95, 97, 98], "6_yweweler_25": 79, "7_nicolas_43": 79, "6_theo_27": 79, "6_yweweler_36": 79, "6_yweweler_14": 79, "6_yweweler_35": 79, "6_nicolas_8": 79, "sound": 79, "quit": [79, 93], "22": [79, 80, 85, 87, 88, 91, 92, 99], "blindli": [79, 86, 95, 97, 98], "trust": [79, 86, 88, 90, 94, 95, 97, 98], "underneath": 80, "hood": 80, "alert": 80, "introduct": 80, "mayb": [80, 81, 84], "examin": [80, 81, 83, 92, 97], "your_feature_matrix": [80, 81], "toi": [80, 81, 85, 87, 88, 90], "train_test_split": [80, 81, 93, 97, 98], "inf": [80, 81], "mid": [80, 81], "bins_map": [80, 81], "create_data": [80, 81], "y_bin": [80, 81], "y_i": [80, 81], "y_bin_idx": [80, 81], "y_train": [80, 81, 88, 95], "y_test": [80, 81, 88, 95], "y_train_idx": [80, 81], "y_test_idx": [80, 81], "test_siz": [80, 81, 97, 98], "slide": [80, 81, 85], "decis": [80, 81, 97], "frame": [80, 81], "x_out": [80, 81], "tini": [80, 81], "concaten": [80, 81, 86, 94], "y_out": [80, 81], "y_out_bin": [80, 81], "y_out_bin_idx": [80, 81], "exact_duplicate_idx": [80, 81], "x_duplic": [80, 81], "y_duplic": [80, 81], "y_duplicate_idx": [80, 81], "noisy_labels_idx": [80, 81, 91], "scatter": [80, 81, 88, 91, 95], "black": [80, 81, 85, 95], "cyan": [80, 81], "pyplot": [80, 81, 87, 88, 91, 93, 95], "plt": [80, 81, 87, 88, 91, 93, 95], "plot_data": [80, 81, 88, 91, 95], "fig": [80, 81, 85, 87, 93, 95], "ax": [80, 81, 87, 93, 95], "subplot": [80, 81, 87, 93], "set_titl": [80, 81, 87, 93], "set_xlabel": [80, 81], "x_1": [80, 81], "fontsiz": [80, 81, 87, 88, 91], "set_ylabel": [80, 81], "x_2": [80, 81], "set_xlim": [80, 81], "set_ylim": [80, 81], "linestyl": [80, 81], "circl": [80, 81, 88, 91], "misclassifi": [80, 81], "zip": [80, 81, 87, 92, 99], "label_err": [80, 81], "180": [80, 81, 92], "marker": [80, 81], "facecolor": [80, 81], "edgecolor": [80, 81], "linewidth": [80, 81, 93], "dup": [80, 81], "first_legend": [80, 81], "align": [80, 81], "title_fontproperti": [80, 81], "semibold": [80, 81], "second_legend": [80, 81], "45": [80, 81, 85, 88, 92], "gca": [80, 81], "add_artist": [80, 81], "tight_layout": [80, 81], "ideal": [80, 81], "logist": [80, 81, 84, 90, 93, 98], "remaind": 80, "modal": [80, 81, 86, 90], "132": [80, 81, 88, 92], "9318": 80, "77": [80, 81, 83, 92, 97], "006940": 80, "007830": 80, "40": [80, 81, 84, 85], "014828": 80, "107": [80, 81, 88, 91], "021241": 80, "120": [80, 81, 97], "026407": 80, "notic": [80, 88, 90, 92], "3558": [80, 81], "126": [80, 81, 88, 92], "006636": [80, 81], "130": [80, 81], "012571": [80, 81], "129": [80, 81], "127": [80, 81], "014909": [80, 81], "128": [80, 81, 87], "017443": [80, 81], "6160": [80, 81], "is_near_duplicate_issu": [80, 81, 83, 84, 86, 87, 88], "131": [80, 81, 96, 99], "000000e": [80, 81], "00": [80, 81, 83, 85, 93, 97], "000002": [80, 81], "463180e": [80, 81], "07": [80, 81, 83, 87, 88, 92, 95], "51": [80, 81, 83, 85, 88, 92], "161148": [80, 81], "859087e": [80, 81], "30": [80, 81, 85, 86, 87, 91, 96, 99], "3453": 80, "029542": 80, "031182": 80, "057961": 80, "058244": 80, "home": [80, 81, 84, 85, 98], "runner": [80, 81, 84, 98], "329": [80, 87, 92], "359": 80, "338": 80, "34": [80, 85, 88, 90, 92, 99], "54": [80, 85, 88, 92, 99], "039122": 80, "53": [80, 81, 83, 85, 91, 92, 97], "044598": 80, "105": [80, 92], "105196": 80, "133654": 80, "43": [80, 85, 88, 92], "168033": 80, "125": 80, "101107": 80, "37": [80, 85], "183382": 80, "109": [80, 85, 92], "209259": 80, "211042": 80, "221316": 80, "average_ood_scor": 80, "34530442089193386": 80, "52": [80, 85, 92, 99], "169820": 80, "087324e": 80, "89": [80, 83, 92, 95, 98], "92": [80, 88, 92, 97], "259024": 80, "583757e": 80, "91": [80, 92], "346458": 80, "341292e": 80, "specfi": 80, "new_lab": 80, "scoring_funct": 80, "div": 80, "rem": 80, "inv_scal": 80, "49": [80, 85, 88, 92], "superstitionissuemanag": 80, "unlucki": 80, "superstit": 80, "to_seri": 80, "issues_mask": 80, "summary_scor": 80, "9242": 80, "is_superstition_issu": 80, "superstition_scor": 80, "26": [80, 85, 87, 88, 90, 92], "047581": 80, "090635": 80, "129591": 80, "65": [80, 92, 97], "164840": 80, "demo": [81, 83, 91, 97], "lurk": [81, 87, 88], "_split": 81, "737": 81, "thoroughli": 81, "preprocess": [81, 83, 93, 95, 97, 98], "904": 81, "review": [81, 83, 84, 85, 86, 88, 92, 95, 96, 97, 98, 99], "8561": 81, "001908": 81, "58": [81, 83, 85, 88, 92, 97], "003564": 81, "007331": 81, "008963": 81, "009664": 81, "0227": 81, "is_class_imbalance_issu": 81, "022727": 81, "86": [81, 83, 87, 88, 92, 95, 97], "87": [81, 87, 92, 95, 98], "auto": [81, 85, 86, 95, 97, 98], "conceptu": 81, "856061": 81, "355772": 81, "616034": 81, "821750": 81, "901562": 81, "betweeen": 81, "is_null_issu": 81, "is_non_iid_issu": [81, 83, 84, 88], "is_underperforming_group_issu": 81, "859131": 81, "417707": 81, "664083": 81, "970324": 81, "816953": 81, "375317": 81, "641516": 81, "890575": 81, "531021": 81, "460593": 81, "601188": 81, "826147": 81, "752808": 81, "321635": 81, "562539": 81, "948362": 81, "090243": 81, "472909": 81, "746763": 81, "878267": 81, "examples_w_issu": [81, 86], "013445": 81, "025184": 81, "026376": 81, "inde": [81, 84], "miscellan": [81, 99], "428571": 81, "111111": 81, "571429": 81, "407407": 81, "592593": 81, "337838": 81, "092593": 81, "662162": 81, "333333": [81, 85], "952381": 81, "666667": 81, "portion": 81, "huge": [81, 88], "worri": [81, 84], "critic": 81, "highli": [81, 87], "sql": [83, 97], "databas": [83, 97], "excel": [83, 97], "parquet": [83, 97], "student": [83, 95, 97, 99], "grade": [83, 95, 97], "900": [83, 95, 97], "exam": [83, 95, 97], "letter": [83, 97, 99], "hundr": [83, 97], "histgradientboostingclassifi": 83, "standardscal": [83, 93, 97], "grades_data": [83, 97], "read_csv": [83, 84, 95, 97, 98], "stud_id": [83, 97], "exam_1": [83, 95, 97], "exam_2": [83, 95, 97], "exam_3": [83, 95, 97], "letter_grad": [83, 97], "f48f73": [83, 97], "0bd4e7": [83, 97], "81": [83, 84, 92, 95, 97, 99], "great": [83, 85, 97], "particip": [83, 97], "cb9d7a": [83, 97], "61": [83, 88, 92, 95, 97, 99], "94": [83, 85, 88, 92, 95, 97], "78": [83, 85, 88, 92, 95, 97], "9acca4": [83, 97], "48": [83, 85, 88, 92, 97], "x_raw": [83, 97], "cat_featur": 83, "x_encod": [83, 97], "get_dummi": [83, 95, 97], "drop_first": [83, 97], "numeric_featur": [83, 97], "scaler": [83, 93, 97], "x_process": [83, 97], "fit_transform": [83, 97], "bring": [83, 84, 87, 90, 95, 97, 98], "byod": [83, 84, 87, 90, 95, 97, 98], "boost": [83, 86, 90, 95], "xgboost": [83, 86, 95], "think": [83, 84, 86, 91, 96, 99], "carefulli": [83, 84, 87, 97], "nonzero": 83, "suspici": [83, 97], "tabl": [83, 85, 90, 97], "358": 83, "294": [83, 92], "46": [83, 85, 88, 92], "941": 83, "7109": 83, "000005": [83, 84, 95], "886": 83, "000059": 83, "709": 83, "000104": 83, "723": 83, "000169": 83, "689": 83, "000181": 83, "3590": 83, "051882e": 83, "683133e": 83, "536582e": 83, "406589e": 83, "324246e": 83, "6165": 83, "582": 83, "185": [83, 85, 92], "187": [83, 85], "27": [83, 85, 88, 92, 99], "898": 83, "637": [83, 97], "0014": [83, 85], "595": 83, "702427": 83, "147": [83, 88, 92], "711186": 83, "157": [83, 88], "721394": 83, "771": 83, "731979": 83, "740335": 83, "0014153602099278074": 83, "issue_result": 83, "000842": 83, "555944": 83, "004374": 83, "sorted_issu": 83, "73": [83, 85, 91, 92, 95], "deserv": 83, "outlier_result": 83, "sorted_outli": 83, "56": [83, 85, 95], "96": [83, 85, 88, 91, 92, 95], "lt": [83, 84, 85, 90, 93], "style": [83, 96], "font": 83, "18px": 83, "ff00ff": 83, "bac": 83, "unintend": [83, 84], "mistak": [83, 84, 87, 97, 98], "duplicate_result": 83, "690": 83, "246": [83, 92], "perhap": [83, 88, 90], "twice": 83, "67": [83, 85, 92, 95], "wari": [83, 84, 86], "super": [83, 84, 87], "intent": [84, 98], "servic": [84, 86, 98], "onlin": [84, 98], "bank": [84, 85, 98], "banking77": [84, 98], "oo": [84, 98], "000": [84, 85, 87, 98, 99], "categori": [84, 87, 98], "scope": [84, 98], "dive": 84, "your_featur": 84, "sentence_transform": [84, 98], "sentencetransform": [84, 98], "payment": [84, 98], "cancel_transf": [84, 98], "transfer": [84, 98], "fund": [84, 98], "cancel": [84, 98], "transact": [84, 98], "my": [84, 98], "revert": [84, 98], "morn": [84, 98], "realis": [84, 98], "yesterdai": [84, 98], "rent": [84, 98], "realli": [84, 90, 96, 98], "tomorrow": [84, 98], "raw_text": [84, 98], "card_about_to_expir": [84, 98], "card_payment_fee_charg": [84, 98], "apple_pay_or_google_pai": [84, 98], "getting_spare_card": [84, 98], "change_pin": [84, 98], "visa_or_mastercard": [84, 98], "supported_cards_and_curr": [84, 98], "lost_or_stolen_phon": [84, 98], "beneficiary_not_allow": [84, 98], "utter": [84, 98], "suit": [84, 85, 86, 98], "electra": [84, 98], "discrimin": [84, 98], "googl": [84, 98], "text_embed": 84, "No": [84, 86, 98], "google_electra": [84, 98], "pool": [84, 86, 93, 98], "_util": [84, 98], "831": [84, 98], "typedstorag": [84, 98], "untypedstorag": [84, 98], "untyped_storag": [84, 98], "fget": [84, 98], "__get__": [84, 98], "owner": [84, 98], "400": [84, 98], "data_dict": [84, 88, 90], "85": [84, 92], "38": [84, 85, 92], "9710": 84, "981": 84, "974": 84, "000146": 84, "982": [84, 85], "000224": 84, "971": 84, "000507": 84, "980": [84, 85], "000960": 84, "3584": 84, "994": 84, "009642": 84, "999": 84, "013067": 84, "013841": 84, "433": 84, "014722": 84, "989": 84, "018224": 84, "6070": 84, "160": [84, 95], "095724": 84, "148": 84, "006237": 84, "546": 84, "099341": 84, "514": 84, "006485": 84, "481": 84, "123418": 84, "008165": 84, "0000": [84, 85, 88], "313": [84, 92], "564102": 84, "572258": 84, "28": [84, 85, 87, 88, 90, 99], "574915": 84, "31": [84, 85, 88, 90, 92], "575507": 84, "575874": 84, "792090": 84, "257611": 84, "698710": 84, "182121": 84, "771619": 84, "to_numpi": [84, 86, 95, 98], "data_with_suggested_label": 84, "suggested_label": 84, "charg": [84, 98], "cash": [84, 98], "holidai": [84, 98], "sent": [84, 98, 99], "card": [84, 85, 98], "mine": [84, 98], "expir": [84, 98], "me": [84, 98], "withdraw": 84, "monei": 84, "whoever": [84, 98], "outlier_issu": [84, 87], "lowest_quality_outli": 84, "OR": 84, "636c65616e6c616220697320617765736f6d6521": 84, "phone": [84, 85], "gone": 84, "gt": [84, 90, 99], "samp": 84, "br": 84, "press": [84, 99], "nonsens": 84, "sens": 84, "detriment": 84, "duplicate_issu": 84, "fee": 84, "pai": 84, "go": [84, 85, 88], "strongli": 84, "p_valu": 84, "benign": 84, "shortlist": [84, 95, 98], "curat": [84, 89], "mnist_test_set": 85, "imagenet_val_set": 85, "tench": 85, "goldfish": 85, "white": [85, 99], "shark": 85, "tiger": 85, "hammerhead": 85, "electr": 85, "rai": 85, "stingrai": 85, "cock": 85, "hen": 85, "ostrich": 85, "brambl": 85, "goldfinch": 85, "hous": 85, "finch": 85, "junco": 85, "indigo": 85, "bunt": 85, "american": [85, 99], "robin": 85, "bulbul": 85, "jai": 85, "magpi": 85, "chickade": 85, "dipper": 85, "kite": 85, "bald": 85, "eagl": 85, "vultur": 85, "grei": 85, "owl": 85, "salamand": 85, "smooth": 85, "newt": 85, "spot": [85, 92], "axolotl": 85, "bullfrog": 85, "tree": 85, "frog": [85, 93], "tail": 85, "loggerhead": 85, "sea": 85, "turtl": 85, "leatherback": 85, "mud": 85, "terrapin": 85, "band": 85, "gecko": 85, "green": [85, 99], "iguana": 85, "carolina": 85, "anol": 85, "desert": 85, "grassland": 85, "whiptail": 85, "lizard": 85, "agama": 85, "frill": 85, "neck": 85, "allig": 85, "gila": 85, "monster": 85, "european": 85, "chameleon": 85, "komodo": 85, "dragon": 85, "nile": 85, "crocodil": 85, "triceratop": 85, "worm": 85, "snake": 85, "ring": 85, "eastern": 85, "hog": 85, "nose": 85, "kingsnak": 85, "garter": 85, "water": 85, "vine": 85, "night": 85, "boa": 85, "constrictor": 85, "african": 85, "rock": 85, "indian": 85, "cobra": 85, "mamba": 85, "saharan": 85, "horn": 85, "viper": 85, "diamondback": 85, "rattlesnak": 85, "sidewind": 85, "trilobit": 85, "harvestman": 85, "scorpion": 85, "yellow": 85, "garden": 85, "spider": 85, "barn": 85, "southern": 85, "widow": 85, "tarantula": 85, "wolf": 85, "tick": 85, "centiped": 85, "grous": 85, "ptarmigan": 85, "ruf": 85, "prairi": 85, "peacock": 85, "quail": 85, "partridg": 85, "parrot": 85, "macaw": 85, "sulphur": 85, "crest": 85, "cockatoo": 85, "lorikeet": 85, "coucal": 85, "bee": 85, "eater": 85, "hornbil": 85, "hummingbird": 85, "jacamar": 85, "toucan": 85, "duck": [85, 98], "breast": 85, "mergans": 85, "goos": 85, "swan": 85, "tusker": 85, "echidna": 85, "platypu": 85, "wallabi": 85, "koala": 85, "wombat": 85, "jellyfish": 85, "anemon": 85, "brain": 85, "coral": 85, "flatworm": 85, "nematod": 85, "conch": 85, "snail": 85, "slug": 85, "chiton": 85, "chamber": 85, "nautilu": 85, "dung": 85, "crab": 85, "fiddler": 85, "king": 85, "lobster": 85, "spini": 85, "crayfish": 85, "hermit": 85, "isopod": 85, "stork": 85, "spoonbil": 85, "flamingo": 85, "heron": 85, "egret": 85, "bittern": 85, "crane": 85, "bird": [85, 93], "limpkin": 85, "gallinul": 85, "coot": 85, "bustard": 85, "ruddi": 85, "turnston": 85, "dunlin": 85, "redshank": 85, "dowitch": 85, "oystercatch": 85, "pelican": 85, "penguin": 85, "albatross": 85, "whale": 85, "killer": 85, "dugong": 85, "lion": 85, "chihuahua": 85, "japanes": 85, "chin": 85, "maltes": 85, "pekinges": 85, "shih": 85, "tzu": 85, "charl": 85, "spaniel": 85, "papillon": 85, "terrier": 85, "rhodesian": 85, "ridgeback": 85, "afghan": [85, 99], "hound": 85, "basset": 85, "beagl": 85, "bloodhound": 85, "bluetick": 85, "coonhound": 85, "tan": 85, "walker": 85, "foxhound": 85, "redbon": 85, "borzoi": 85, "irish": 85, "wolfhound": 85, "italian": 85, "greyhound": 85, "whippet": 85, "ibizan": 85, "norwegian": 85, "elkhound": 85, "otterhound": 85, "saluki": 85, "scottish": 85, "deerhound": 85, "weimaran": 85, "staffordshir": 85, "bull": 85, "bedlington": 85, "border": 85, "kerri": 85, "norfolk": 85, "norwich": 85, "yorkshir": 85, "wire": 85, "fox": 85, "lakeland": 85, "sealyham": 85, "airedal": 85, "cairn": 85, "australian": 85, "dandi": 85, "dinmont": 85, "boston": 85, "miniatur": 85, "schnauzer": 85, "giant": 85, "tibetan": 85, "silki": 85, "coat": [85, 87], "wheaten": 85, "west": 85, "highland": 85, "lhasa": 85, "apso": 85, "flat": 85, "retriev": 85, "curli": 85, "golden": 85, "labrador": 85, "chesapeak": 85, "bai": 85, "german": [85, 99], "shorthair": 85, "pointer": 85, "vizsla": 85, "setter": 85, "gordon": 85, "brittani": 85, "clumber": 85, "springer": 85, "welsh": 85, "cocker": 85, "sussex": 85, "kuvasz": 85, "schipperk": 85, "groenendael": 85, "malinoi": 85, "briard": 85, "kelpi": 85, "komondor": 85, "sheepdog": 85, "shetland": 85, "colli": 85, "bouvier": 85, "de": 85, "flandr": 85, "rottweil": 85, "shepherd": 85, "dobermann": 85, "pinscher": 85, "swiss": [85, 99], "mountain": 85, "bernes": 85, "appenzel": 85, "sennenhund": 85, "entlebuch": 85, "boxer": 85, "bullmastiff": 85, "mastiff": 85, "french": 85, "bulldog": 85, "dane": 85, "st": 85, "bernard": 85, "huski": 85, "alaskan": 85, "malamut": 85, "siberian": 85, "dalmatian": 85, "affenpinsch": 85, "basenji": 85, "pug": 85, "leonberg": 85, "newfoundland": 85, "pyrenean": 85, "samoi": 85, "pomeranian": 85, "chow": 85, "keeshond": 85, "griffon": 85, "bruxelloi": 85, "pembrok": 85, "corgi": 85, "cardigan": 85, "poodl": 85, "mexican": 85, "hairless": 85, "tundra": 85, "coyot": 85, "dingo": 85, "dhole": 85, "wild": 85, "hyena": 85, "kit": 85, "arctic": 85, "tabbi": 85, "persian": 85, "siames": 85, "egyptian": 85, "mau": 85, "cougar": 85, "lynx": 85, "leopard": 85, "snow": 85, "jaguar": 85, "cheetah": 85, "brown": [85, 96], "bear": 85, "polar": 85, "sloth": 85, "mongoos": 85, "meerkat": 85, "beetl": 85, "ladybug": 85, "longhorn": 85, "leaf": 85, "rhinocero": 85, "weevil": 85, "fly": 85, "ant": 85, "grasshopp": 85, "cricket": 85, "stick": 85, "insect": 85, "cockroach": 85, "manti": 85, "cicada": 85, "leafhopp": 85, "lacew": 85, "dragonfli": 85, "damselfli": 85, "admir": 85, "ringlet": 85, "monarch": 85, "butterfli": 85, "gossam": 85, "wing": 85, "starfish": 85, "urchin": 85, "cucumb": 85, "cottontail": 85, "rabbit": 85, "hare": 85, "angora": 85, "hamster": 85, "porcupin": 85, "squirrel": 85, "marmot": 85, "beaver": 85, "guinea": 85, "pig": 85, "sorrel": 85, "zebra": 85, "boar": 85, "warthog": 85, "hippopotamu": 85, "ox": 85, "buffalo": 85, "bison": 85, "bighorn": 85, "sheep": 85, "alpin": 85, "ibex": 85, "hartebeest": 85, "impala": 85, "gazel": 85, "dromedari": 85, "llama": 85, "weasel": 85, "mink": 85, "polecat": 85, "foot": 85, "ferret": 85, "otter": 85, "skunk": 85, "badger": 85, "armadillo": 85, "toed": 85, "orangutan": 85, "gorilla": 85, "chimpanze": 85, "gibbon": 85, "siamang": 85, "guenon": 85, "pata": 85, "monkei": 85, "baboon": 85, "macaqu": 85, "langur": 85, "colobu": 85, "probosci": 85, "marmoset": 85, "capuchin": 85, "howler": 85, "titi": 85, "geoffroi": 85, "lemur": 85, "indri": 85, "asian": 85, "eleph": 85, "bush": 85, "snoek": 85, "eel": 85, "coho": 85, "salmon": 85, "beauti": 85, "clownfish": 85, "sturgeon": 85, "garfish": 85, "lionfish": 85, "pufferfish": 85, "abacu": 85, "abaya": 85, "academ": 85, "gown": 85, "accordion": 85, "acoust": 85, "guitar": 85, "aircraft": 85, "carrier": 85, "airlin": 85, "airship": 85, "altar": 85, "ambul": 85, "amphibi": 85, "clock": [85, 99], "apiari": 85, "apron": 85, "wast": 85, "assault": 85, "rifl": 85, "backpack": 85, "bakeri": 85, "balanc": 85, "beam": 85, "balloon": 85, "ballpoint": 85, "pen": 85, "aid": 85, "banjo": 85, "balust": 85, "barbel": 85, "barber": 85, "chair": [85, 92], "barbershop": 85, "baromet": 85, "barrel": 85, "wheelbarrow": 85, "basebal": 85, "basketbal": 85, "bassinet": 85, "bassoon": 85, "swim": 85, "cap": 85, "bath": 85, "towel": 85, "bathtub": 85, "station": 85, "wagon": 85, "lighthous": 85, "beaker": 85, "militari": 85, "beer": 85, "bottl": 85, "glass": 85, "bell": 85, "cot": 85, "bib": 85, "bicycl": [85, 96], "bikini": 85, "binder": 85, "binocular": 85, "birdhous": 85, "boathous": 85, "bobsleigh": 85, "bolo": 85, "tie": 85, "poke": 85, "bonnet": 85, "bookcas": 85, "bookstor": 85, "bow": 85, "brass": 85, "bra": 85, "breakwat": 85, "breastplat": 85, "broom": 85, "bucket": 85, "buckl": 85, "bulletproof": 85, "vest": 85, "butcher": 85, "shop": 85, "taxicab": 85, "cauldron": 85, "candl": 85, "cannon": 85, "cano": 85, "mirror": [85, 92], "carousel": 85, "tool": [85, 88, 90], "carton": 85, "wheel": 85, "teller": 85, "cassett": 85, "player": 85, "castl": 85, "catamaran": 85, "cd": 85, "cello": 85, "mobil": [85, 99], "chain": 85, "fenc": [85, 96], "mail": 85, "chainsaw": 85, "chest": 85, "chiffoni": 85, "chime": 85, "china": 85, "cabinet": 85, "christma": 85, "stock": 85, "church": 85, "movi": 85, "theater": 85, "cleaver": 85, "cliff": 85, "dwell": 85, "cloak": 85, "clog": 85, "cocktail": 85, "shaker": 85, "coffe": 85, "mug": 85, "coffeemak": 85, "coil": 85, "lock": 85, "keyboard": 85, "confectioneri": 85, "ship": [85, 93], "corkscrew": 85, "cornet": 85, "cowboi": 85, "boot": 85, "hat": 85, "cradl": 85, "crash": 85, "helmet": 85, "crate": 85, "infant": 85, "bed": 85, "crock": 85, "pot": 85, "croquet": 85, "crutch": 85, "cuirass": 85, "dam": 85, "desk": 85, "desktop": 85, "rotari": 85, "dial": 85, "telephon": 85, "diaper": 85, "watch": 85, "dine": 85, "dishcloth": 85, "dishwash": 85, "disc": 85, "brake": 85, "dock": 85, "sled": 85, "dome": 85, "doormat": 85, "drill": 85, "rig": 85, "drum": 85, "drumstick": 85, "dumbbel": 85, "dutch": 85, "oven": 85, "fan": 85, "locomot": 85, "entertain": 85, "center": 85, "envelop": 85, "espresso": 85, "powder": 85, "feather": 85, "fireboat": 85, "engin": [85, 96], "screen": 85, "sheet": 85, "flagpol": 85, "flute": 85, "footbal": 85, "forklift": 85, "fountain": 85, "poster": 85, "freight": 85, "fry": 85, "pan": 85, "fur": 85, "garbag": 85, "ga": 85, "pump": 85, "goblet": 85, "kart": 85, "golf": 85, "cart": 85, "gondola": 85, "gong": 85, "grand": 85, "piano": 85, "greenhous": 85, "grill": 85, "groceri": 85, "guillotin": 85, "barrett": 85, "hair": 85, "sprai": 85, "hammer": 85, "dryer": 85, "hand": [85, 88], "handkerchief": 85, "drive": 85, "harmonica": 85, "harp": 85, "harvest": 85, "hatchet": 85, "holster": 85, "honeycomb": 85, "hoop": 85, "skirt": 85, "horizont": 85, "bar": 85, "hors": [85, 93, 98], "drawn": 85, "hourglass": 85, "ipod": 85, "cloth": 85, "iron": 85, "jack": 85, "lantern": 85, "jean": 85, "jeep": 85, "shirt": [85, 87], "jigsaw": 85, "puzzl": 85, "pull": 85, "rickshaw": 85, "joystick": 85, "kimono": 85, "knee": 85, "pad": 85, "knot": 85, "ladl": 85, "lampshad": 85, "laptop": 85, "lawn": 85, "mower": 85, "knife": 85, "lifeboat": 85, "lighter": 85, "limousin": 85, "ocean": 85, "liner": 85, "lipstick": 85, "slip": 85, "shoe": 85, "lotion": 85, "speaker": 85, "loup": 85, "sawmil": 85, "magnet": 85, "compass": 85, "bag": [85, 87, 93, 94], "mailbox": 85, "tight": 85, "tank": 85, "manhol": 85, "maraca": 85, "marimba": 85, "maypol": 85, "maze": 85, "cup": [85, 92], "medicin": 85, "megalith": 85, "microphon": 85, "microwav": 85, "milk": 85, "minibu": 85, "miniskirt": 85, "minivan": 85, "missil": 85, "mitten": 85, "mix": 85, "bowl": 85, "modem": 85, "monasteri": 85, "monitor": 85, "mope": 85, "mortar": 85, "mosqu": 85, "mosquito": 85, "scooter": 85, "bike": 85, "tent": 85, "mous": [85, 86], "mousetrap": 85, "van": 85, "muzzl": 85, "nail": 85, "brace": 85, "necklac": 85, "nippl": 85, "obelisk": 85, "obo": 85, "ocarina": 85, "odomet": 85, "oil": 85, "oscilloscop": 85, "overskirt": 85, "bullock": 85, "oxygen": 85, "packet": 85, "paddl": 85, "padlock": 85, "paintbrush": 85, "pajama": 85, "palac": [85, 99], "parachut": 85, "park": 85, "bench": 85, "meter": 85, "passeng": 85, "patio": 85, "payphon": 85, "pedest": 85, "pencil": 85, "perfum": 85, "petri": 85, "dish": 85, "photocopi": 85, "plectrum": 85, "pickelhaub": 85, "picket": 85, "pickup": 85, "pier": 85, "piggi": 85, "pill": 85, "pillow": 85, "ping": 85, "pong": 85, "pinwheel": 85, "pirat": 85, "pitcher": 85, "plane": 85, "planetarium": 85, "plastic": 85, "plate": 85, "rack": 85, "plow": 85, "plunger": 85, "polaroid": 85, "camera": 85, "pole": [85, 96], "polic": 85, "poncho": 85, "billiard": 85, "soda": 85, "potter": 85, "prayer": 85, "rug": 85, "printer": 85, "prison": 85, "projectil": 85, "projector": 85, "hockei": 85, "puck": 85, "punch": 85, "purs": 85, "quill": 85, "quilt": 85, "race": 85, "racket": 85, "radiat": 85, "radio": 85, "telescop": 85, "rain": 85, "recreat": 85, "reel": 85, "reflex": 85, "refriger": 85, "remot": 85, "restaur": 85, "revolv": 85, "rotisseri": 85, "eras": 85, "rugbi": 85, "ruler": 85, "safe": 85, "safeti": 85, "salt": 85, "sandal": [85, 87], "sarong": 85, "saxophon": 85, "scabbard": 85, "school": 85, "bu": [85, 96], "schooner": 85, "scoreboard": 85, "crt": 85, "screw": 85, "screwdriv": 85, "seat": 85, "belt": 85, "sew": 85, "shield": 85, "shoji": 85, "basket": 85, "shovel": 85, "shower": 85, "curtain": 85, "ski": 85, "sleep": 85, "door": 85, "slot": 85, "snorkel": 85, "snowmobil": 85, "snowplow": 85, "soap": 85, "dispens": 85, "soccer": [85, 99], "sock": 85, "solar": 85, "thermal": 85, "collector": 85, "sombrero": 85, "soup": 85, "heater": 85, "shuttl": 85, "spatula": 85, "motorboat": 85, "web": 85, "spindl": 85, "sport": [85, 99], "spotlight": 85, "stage": 85, "steam": 85, "arch": 85, "bridg": 85, "steel": 85, "stethoscop": 85, "scarf": 85, "stone": 85, "wall": [85, 96], "stopwatch": 85, "stove": 85, "strainer": 85, "tram": 85, "stretcher": 85, "couch": 85, "stupa": 85, "submarin": 85, "sundial": 85, "sunglass": 85, "sunscreen": 85, "suspens": 85, "mop": 85, "sweatshirt": 85, "swimsuit": 85, "swing": 85, "switch": 85, "syring": 85, "lamp": 85, "tape": 85, "teapot": 85, "teddi": 85, "televis": [85, 99], "tenni": 85, "thatch": 85, "roof": 85, "front": 85, "thimbl": 85, "thresh": 85, "throne": 85, "tile": 85, "toaster": 85, "tobacco": 85, "toilet": 85, "totem": 85, "tow": 85, "tractor": 85, "semi": 85, "trailer": 85, "trai": 85, "trench": 85, "tricycl": 85, "trimaran": 85, "tripod": 85, "triumphal": 85, "trolleybu": 85, "trombon": 85, "tub": 85, "turnstil": 85, "typewrit": 85, "umbrella": 85, "unicycl": 85, "upright": 85, "vacuum": 85, "cleaner": 85, "vase": 85, "vault": 85, "velvet": 85, "vend": 85, "vestment": 85, "viaduct": 85, "violin": 85, "volleybal": 85, "waffl": 85, "wallet": 85, "wardrob": 85, "sink": 85, "wash": 85, "jug": 85, "tower": 85, "whiskei": 85, "whistl": 85, "wig": 85, "shade": [85, 96], "windsor": 85, "wine": 85, "wok": 85, "wooden": 85, "spoon": 85, "wool": 85, "rail": 85, "shipwreck": 85, "yawl": 85, "yurt": 85, "websit": 85, "comic": 85, "book": 85, "crossword": 85, "traffic": [85, 92, 96], "sign": [85, 96, 99], "dust": 85, "jacket": [85, 92], "menu": 85, "guacamol": 85, "consomm": 85, "trifl": 85, "ic": 85, "cream": 85, "pop": 85, "baguett": 85, "bagel": 85, "pretzel": 85, "cheeseburg": 85, "mash": 85, "potato": 85, "cabbag": 85, "broccoli": 85, "cauliflow": 85, "zucchini": 85, "spaghetti": 85, "squash": 85, "acorn": 85, "butternut": 85, "artichok": 85, "pepper": 85, "cardoon": 85, "mushroom": 85, "granni": 85, "smith": 85, "strawberri": 85, "orang": 85, "lemon": 85, "pineappl": 85, "banana": 85, "jackfruit": 85, "custard": 85, "appl": 85, "pomegran": 85, "hai": 85, "carbonara": 85, "chocol": 85, "syrup": 85, "dough": 85, "meatloaf": 85, "pizza": 85, "pie": 85, "burrito": 85, "eggnog": 85, "alp": 85, "bubbl": 85, "reef": 85, "geyser": 85, "lakeshor": 85, "promontori": 85, "shoal": 85, "seashor": 85, "vallei": 85, "volcano": 85, "bridegroom": 85, "scuba": 85, "diver": 85, "rapese": 85, "daisi": 85, "ladi": 85, "slipper": 85, "corn": 85, "rose": 85, "hip": 85, "chestnut": 85, "fungu": 85, "agar": 85, "gyromitra": 85, "stinkhorn": 85, "earth": 85, "star": 85, "wood": 85, "bolet": 85, "ear": 85, "cifar10_test_set": 85, "airplan": [85, 93], "automobil": [85, 93], "deer": [85, 93], "cifar100_test_set": 85, "aquarium_fish": 85, "babi": 85, "boi": 85, "camel": 85, "caterpillar": 85, "cattl": [85, 99], "cloud": 85, "dinosaur": 85, "dolphin": 85, "flatfish": 85, "forest": 85, "girl": 85, "kangaroo": 85, "lawn_mow": 85, "man": 85, "maple_tre": 85, "motorcycl": [85, 96], "oak_tre": 85, "orchid": 85, "palm_tre": 85, "pear": 85, "pickup_truck": 85, "pine_tre": 85, "plain": 85, "poppi": 85, "possum": 85, "raccoon": 85, "road": [85, 96], "rocket": 85, "seal": 85, "shrew": 85, "skyscrap": 85, "streetcar": 85, "sunflow": 85, "sweet_pepp": 85, "trout": 85, "tulip": 85, "willow_tre": 85, "woman": [85, 92], "caltech256": 85, "ak47": 85, "bat": 85, "glove": 85, "birdbath": 85, "blimp": 85, "bonsai": 85, "boom": 85, "breadmak": 85, "buddha": 85, "bulldoz": 85, "cactu": 85, "cake": 85, "tire": 85, "cartman": 85, "cereal": 85, "chandeli": 85, "chess": 85, "board": 85, "chimp": 85, "chopstick": 85, "coffin": 85, "coin": 85, "comet": 85, "cormor": 85, "globe": 85, "diamond": 85, "dice": 85, "doorknob": 85, "drink": 85, "straw": 85, "dumb": 85, "eiffel": 85, "elk": 85, "ewer": 85, "eyeglass": 85, "fern": 85, "fighter": 85, "jet": [85, 95], "extinguish": 85, "hydrant": 85, "firework": 85, "flashlight": 85, "floppi": 85, "fri": 85, "frisbe": 85, "galaxi": 85, "giraff": 85, "goat": 85, "gate": 85, "grape": 85, "pick": [85, 86], "hamburg": 85, "hammock": 85, "harpsichord": 85, "hawksbil": 85, "helicopt": 85, "hibiscu": 85, "homer": 85, "simpson": 85, "horsesho": 85, "air": 85, "skeleton": 85, "ibi": 85, "cone": 85, "iri": 85, "jesu": 85, "christ": 85, "joi": 85, "kayak": 85, "ketch": 85, "ladder": 85, "lath": 85, "licens": 85, "lightbulb": 85, "lightn": 85, "mandolin": 85, "mar": 85, "mattress": 85, "megaphon": 85, "menorah": 85, "microscop": 85, "minaret": 85, "minotaur": 85, "motorbik": 85, "mussel": 85, "neckti": 85, "octopu": 85, "palm": 85, "pilot": 85, "paperclip": 85, "shredder": 85, "pci": 85, "peopl": [85, 92], "pez": 85, "picnic": 85, "pram": 85, "prai": 85, "pyramid": 85, "rainbow": 85, "roulett": 85, "saddl": 85, "saturn": 85, "segwai": 85, "propel": 85, "sextant": 85, "music": 85, "skateboard": 85, "smokestack": 85, "sneaker": 85, "boat": 85, "stain": 85, "steer": 85, "stirrup": 85, "superman": 85, "sushi": 85, "armi": [85, 99], "sword": 85, "tambourin": 85, "teepe": 85, "court": 85, "theodolit": 85, "tomato": 85, "tombston": 85, "tour": 85, "pisa": 85, "treadmil": 85, "fork": 85, "tweezer": 85, "unicorn": 85, "vcr": 85, "waterfal": 85, "watermelon": 85, "weld": 85, "windmil": 85, "xylophon": 85, "yarmulk": 85, "yo": 85, "toad": 85, "twenty_news_test_set": 85, "alt": 85, "atheism": 85, "comp": 85, "graphic": [85, 96], "misc": [85, 99], "sy": 85, "ibm": 85, "pc": 85, "hardwar": 85, "mac": 85, "forsal": 85, "rec": 85, "sci": 85, "crypt": 85, "electron": 85, "med": 85, "soc": 85, "religion": 85, "christian": [85, 99], "talk": [85, 99], "polit": 85, "gun": 85, "mideast": 85, "amazon": 85, "neutral": 85, "imdb_test_set": 85, "all_class": 85, "20news_test_set": 85, "_load_classes_predprobs_label": 85, "dataset_nam": 85, "labelerror": 85, "url_bas": 85, "5392f6c71473055060be3044becdde1cbc18284d": 85, "url_label": 85, "original_test_label": 85, "_original_label": 85, "url_prob": 85, "cross_validated_predicted_prob": 85, "_pyx": 85, "num_part": 85, "datatset": 85, "bytesio": 85, "allow_pickl": 85, "pred_probs_part": 85, "url": 85, "_of_": 85, "nload": 85, "imdb": 85, "ve": [85, 86, 88, 90, 92], "interpret": [85, 86, 88, 91, 95], "capit": 85, "29780": 85, "256": [85, 86, 92], "780": 85, "medic": [85, 99], "doctor": 85, "254": [85, 92], "359223": 85, "640777": 85, "184": [85, 88], "258427": 85, "341176": 85, "263158": 85, "658824": 85, "337349": 85, "246575": 85, "662651": 85, "248": 85, "330000": 85, "355769": 85, "670000": 85, "251": [85, 92], "167": [85, 88, 92], "252": 85, "112": 85, "253": [85, 92], "022989": 85, "255": [85, 87], "049505": 85, "190": [85, 88, 92], "66": 85, "002216": 85, "000974": 85, "59": [85, 92], "88": [85, 86, 87, 88, 91, 92, 95], "000873": 85, "000739": 85, "79": [85, 92, 97], "32635": 85, "32636": 85, "47": [85, 92], "32637": 85, "32638": 85, "32639": 85, "32640": 85, "051": 85, "93": [85, 92, 95, 97], "002242": 85, "997758": 85, "002088": 85, "001045": 85, "997912": 85, "002053": 85, "997947": 85, "001980": 85, "000991": 85, "998020": 85, "001946": 85, "002915": 85, "998054": 85, "001938": 85, "002904": 85, "998062": 85, "001020": 85, "998980": 85, "001018": 85, "002035": 85, "998982": 85, "999009": 85, "0003": 85, "0002": 85, "36": [85, 99], "41": [85, 92, 95], "44": [85, 91, 92, 98], "71": [85, 88, 92, 95], "071": 85, "067269": 85, "929": 85, "046": 85, "058243": 85, "954": 85, "035": 85, "032096": 85, "965": 85, "031": 85, "012232": 85, "969": 85, "022": 85, "025896": 85, "978": 85, "020": [85, 88], "013092": 85, "018": 85, "013065": 85, "016": 85, "030542": 85, "984": 85, "013": 85, "020833": 85, "987": 85, "012": 85, "010020": 85, "988": 85, "0073": 85, "0020": 85, "0016": 85, "0015": 85, "0013": 85, "0012": 85, "0010": 85, "0008": 85, "0007": 85, "0006": 85, "0005": 85, "0004": 85, "244": [85, 92], "98": [85, 86, 95], "452381": 85, "459770": 85, "72": [85, 88, 91, 95], "523364": 85, "460784": 85, "446602": 85, "57": [85, 88], "68": [85, 88, 92, 97], "103774": 85, "030612": 85, "97": [85, 86, 88, 92, 95, 97, 99], "110092": 85, "049020": 85, "99": [85, 88, 97], "0034": 85, "0032": 85, "0026": 85, "0025": 85, "4945": 85, "4946": 85, "4947": 85, "4948": 85, "4949": 85, "4950": 85, "846": 85, "82": [85, 88, 92, 95], "7532": 85, "532": 85, "034483": 85, "009646": 85, "965517": 85, "030457": 85, "020513": 85, "969543": 85, "028061": 85, "035443": 85, "971939": 85, "025316": 85, "005168": 85, "974684": 85, "049751": 85, "979487": 85, "019920": 85, "042802": 85, "980080": 85, "017677": 85, "005115": 85, "982323": 85, "012987": 85, "005236": 85, "987013": 85, "012723": 85, "025126": 85, "987277": 85, "010989": 85, "008264": 85, "989011": 85, "010283": 85, "027778": 85, "989717": 85, "009677": 85, "990323": 85, "007614": 85, "010127": 85, "992386": 85, "005051": 85, "994949": 85, "005025": 85, "994975": 85, "005013": 85, "994987": 85, "001859": 85, "001328": 85, "000929": 85, "000664": 85, "186": [85, 88], "188": [85, 88, 91], "189": [85, 88], "snippet": 86, "nlp": [86, 99], "mind": [86, 88], "number_of_class": 86, "total_number_of_data_point": 86, "drop": [86, 90, 95, 98], "feed": 86, "alphabet": 86, "labels_proper_format": 86, "your_classifi": 86, "issues_datafram": 86, "class_predicted_for_flagged_exampl": 86, "class_predicted_for_all_exampl": 86, "grant": 86, "datataset": 86, "fair": [86, 88], "game": 86, "speedup": [86, 93], "flexibl": 86, "tempfil": 86, "mkdtemp": 86, "sped": 86, "anywai": 86, "pred_probs_merg": 86, "merge_rare_class": 86, "count_threshold": 86, "class_mapping_orig2new": 86, "heath_summari": 86, "num_examples_per_class": 86, "rare_class": 86, "num_classes_merg": 86, "other_class": 86, "labels_merg": 86, "new_c": 86, "merged_prob": 86, "hstack": [86, 87, 88, 90], "new_class": 86, "original_class": 86, "num_check": 86, "ones_array_ref": 86, "isclos": 86, "though": [86, 88, 99], "successfulli": 86, "meaning": [86, 93], "virtuou": [86, 90], "cycl": [86, 90], "jointli": 86, "junk": 86, "clutter": 86, "unknown": 86, "caltech": 86, "combined_boolean_mask": 86, "mask1": 86, "mask2": 86, "gradientboostingclassifi": [86, 88], "true_error": [86, 88, 91], "101": [86, 92], "102": [86, 91, 92], "104": [86, 88, 92], "model_to_find_error": 86, "model_to_return": 86, "cl0": 86, "randomizedsearchcv": 86, "expens": 86, "param_distribut": 86, "learning_r": [86, 88], "max_depth": [86, 88], "magnitud": 86, "coeffici": [86, 95], "optin": 86, "environ": [86, 88], "rerun": [86, 88], "cell": [86, 88], "On": [86, 88, 92], "unabl": [86, 88], "render": [86, 88], "nbviewer": [86, 88], "nbsp": [86, 88], "cleanlearninginot": [86, 88], "fittedcleanlearn": [86, 88], "linearregressionlinearregress": 86, "n_init": 86, "fit_predict": 86, "continuous_column": 86, "categorical_column": 86, "data_df": 86, "feature_a": 86, "feature_b": 86, "unexpectedli": 86, "emphas": 86, "especi": [86, 87, 95, 97, 98], "crucial": 86, "merge_duplicate_set": 86, "merge_kei": 86, "construct_group_kei": 86, "merged_set": 86, "consolidate_set": 86, "tolist": [86, 91], "issubset": 86, "frozenset": 86, "sets_list": 86, "mutabl": 86, "new_set": 86, "current_set": 86, "intersecting_set": 86, "lowest_score_strategi": 86, "sub_df": 86, "idxmin": 86, "filter_near_dupl": 86, "strategy_fn": 86, "strategy_kwarg": 86, "duplicate_row": 86, "group_kei": 86, "to_keep_indic": 86, "groupbi": 86, "explod": 86, "to_remov": 86, "isin": [86, 93], "kept": 86, "near_duplicate_issu": [86, 87], "ids_to_remove_seri": 86, "tmp": 86, "ipykernel_6278": 86, "1995098996": 86, "deprecationwarn": 86, "dataframegroupbi": 86, "include_group": 86, "silenc": 86, "assist": 86, "streamlin": 86, "ux": 86, "agpl": 86, "compani": 86, "commerci": 86, "alter": 86, "email": 86, "discuss": 86, "anywher": 86, "profession": 86, "expert": 86, "60": [87, 88, 95], "excess": 87, "torchvis": [87, 93], "tensordataset": 87, "stratifiedkfold": [87, 91], "tqdm": 87, "autonotebook": 87, "fashion_mnist": 87, "num_row": 87, "60000": 87, "pil": 87, "transformed_dataset": 87, "with_format": 87, "unsqueez": 87, "cpu_count": 87, "torch_dataset": 87, "quick": [87, 91], "relu": 87, "batchnorm2d": 87, "maxpool2d": 87, "lazylinear": 87, "flatten": 87, "get_test_accuraci": 87, "testload": [87, 93], "energi": 87, "trainload": [87, 93], "n_epoch": 87, "patienc": 87, "criterion": 87, "crossentropyloss": 87, "adamw": 87, "best_test_accuraci": 87, "start_epoch": 87, "running_loss": 87, "best_epoch": 87, "end_epoch": 87, "3f": [87, 95], "acc": [87, 88], "time_taken": 87, "compute_embed": 87, "compute_pred_prob": 87, "train_batch_s": 87, "num_work": 87, "worker": [87, 99], "train_id_list": 87, "test_id_list": 87, "train_id": 87, "test_id": 87, "embeddings_model": 87, "ntrain": 87, "trainset": 87, "testset": 87, "pin_memori": 87, "fold_embed": 87, "fold_pred_prob": 87, "finish": 87, "482": 87, "720": 87, "195": 87, "753": 87, "493": 87, "060": 87, "059": 87, "330": [87, 92], "505": 87, "815": 87, "476": 87, "340": 87, "977": 87, "328": [87, 92], "310": 87, "683": 87, "reorder": 87, "vision": 87, "grayscal": 87, "exce": 87, "max_preval": 87, "7714": 87, "3772": 87, "3585": 87, "166": 87, "3651": 87, "27080": 87, "873833e": 87, "40378": 87, "915575e": 87, "25316": 87, "390277e": 87, "06": [87, 88, 92, 99], "2090": 87, "751164e": 87, "14999": 87, "881301e": 87, "9569": 87, "11262": 87, "000003": 87, "19228": 87, "000010": 87, "dress": 87, "32657": 87, "000013": 87, "21282": 87, "000016": 87, "53564": 87, "000018": 87, "pullov": 87, "6321": 87, "30968": 87, "001267": 87, "30659": 87, "000022": [87, 99], "47824": 87, "001454": 87, "3370": 87, "000026": 87, "54565": 87, "001854": 87, "9762": 87, "258": 87, "47139": 87, "000033": 87, "166980": 87, "986195": 87, "997205": 87, "948781": 87, "999358": 87, "54078": 87, "17371": 87, "000025": 87, "plot_label_issue_exampl": 87, "ncol": [87, 93], "nrow": [87, 93], "ceil": 87, "axes_list": 87, "label_issue_indic": 87, "gl": 87, "sl": 87, "fontdict": 87, "imshow": [87, 93], "cmap": [87, 95], "grai": 87, "subplots_adjust": 87, "hspace": 87, "outsiz": 87, "outlier_issues_df": 87, "depict": [87, 91, 92, 93, 94, 96], "plot_outlier_issues_exampl": 87, "n_comparison_imag": 87, "sample_from_class": 87, "number_of_sampl": 87, "non_outlier_indic": 87, "isnul": 87, "non_outlier_indices_excluding_curr": 87, "sampled_indic": 87, "label_scores_of_sampl": 87, "top_score_indic": 87, "top_label_indic": 87, "sampled_imag": 87, "get_image_given_label_and_sampl": 87, "image_from_dataset": 87, "corresponding_label": 87, "comparison_imag": 87, "images_to_plot": 87, "idlist": 87, "iterrow": 87, "closest": 87, "counterpart": 87, "near_duplicate_issues_df": 87, "plot_near_duplicate_issue_exampl": 87, "seen_id_pair": 87, "get_image_and_given_label_and_predicted_label": 87, "duplicate_imag": 87, "nd_set": 87, "challeng": 87, "dark_issu": 87, "reveal": [87, 92, 96], "dark_scor": 87, "dark_issues_df": 87, "is_dark_issu": 87, "34848": 87, "203922": 87, "50270": 87, "204588": 87, "3936": 87, "213098": 87, "733": 87, "217686": 87, "8094": 87, "230118": 87, "plot_image_issue_exampl": 87, "difficult": 87, "disproportion": 87, "lowinfo_issu": 87, "low_information_scor": 87, "lowinfo_issues_df": 87, "is_low_information_issu": 87, "53050": 87, "067975": 87, "40875": 87, "089929": 87, "9594": 87, "092601": 87, "34825": 87, "107744": 87, "37530": 87, "108516": 87, "lot": 87, "depth": 88, "survei": [88, 99], "focus": [88, 90, 91, 95], "scienc": 88, "multivariate_norm": [88, 90, 91], "make_data": [88, 90], "cov": [88, 90, 91], "avg_trac": [88, 91], "test_label": [88, 91, 93, 98], "py_tru": 88, "noise_matrix_tru": 88, "noise_marix": 88, "s_test": 88, "noisy_test_label": 88, "purpl": 88, "val": 88, "namespac": 88, "exec": 88, "markerfacecolor": [88, 91], "markeredgecolor": [88, 91, 95], "markers": [88, 91, 95], "markeredgewidth": [88, 91, 95], "realist": 88, "7560": 88, "637318e": 88, "896262e": 88, "548391e": 88, "923417e": 88, "375075e": 88, "3454": 88, "014051": 88, "020451": 88, "249": [88, 92], "042594": 88, "043859": 88, "045954": 88, "6120": 88, "023714": 88, "007136": 88, "119": [88, 92], "107266": 88, "103": [88, 92], "033738": 88, "238": [88, 92], "119505": 88, "236": [88, 92, 99], "037843": 88, "222": 88, "614915": 88, "122": [88, 92], "624422": 88, "625965": 88, "626079": 88, "118": 88, "627675": 88, "695223": 88, "323529": 88, "523015": 88, "013720": 88, "675727": 88, "646521": 88, "anyth": 88, "enhanc": [88, 90, 92], "magic": 88, "83": [88, 92, 95, 97, 99], "liter": 88, "identif": 88, "x27": 88, "logisticregressionlogisticregress": 88, "ever": 88, "092": 88, "040": 88, "024": 88, "004": 88, "surpris": 88, "1705": 88, "01936": 88, "ton": 88, "yourfavoritemodel1": 88, "merged_label": 88, "merged_test_label": 88, "newli": [88, 90], "yourfavoritemodel2": 88, "yourfavoritemodel3": 88, "cl3": 88, "takeawai": 88, "That": [88, 91], "randomli": 88, "my_test_pred_prob": 88, "my_test_pr": 88, "issues_test": 88, "corrected_test_label": 88, "pretend": 88, "cl_test_pr": 88, "69": [88, 95], "fairli": 88, "label_acc": 88, "percentag": 88, "offset": 88, "nquestion": 88, "overestim": 88, "answer": 88, "experienc": 88, "76": [88, 91, 92, 95, 97], "knowledg": 88, "prioiri": 88, "known": 88, "versatil": 88, "label_issues_indic": 88, "213": [88, 92], "212": [88, 97], "218": [88, 92], "152": 88, "197": [88, 92], "196": [88, 92], "170": 88, "214": 88, "164": [88, 91], "198": [88, 92], "191": [88, 92], "63": [88, 92, 95], "121": [88, 98], "117": [88, 95], "62": [88, 92, 95], "206": [88, 92], "115": [88, 92], "193": 88, "194": 88, "201": [88, 92], "174": 88, "163": 88, "150": [88, 90, 92, 99], "169": [88, 99], "151": [88, 92], "168": 88, "precision_scor": 88, "recall_scor": 88, "f1_score": 88, "true_label_issu": 88, "filter_by_list": 88, "718750": [88, 90], "807018": 88, "912": 88, "733333": 88, "800000": 88, "721311": 88, "792793": 88, "908": 88, "676923": 88, "765217": 88, "892": 88, "567901": 88, "702290": 88, "844": 88, "gaug": 88, "label_issues_count": 88, "155": [88, 92], "156": 88, "172": [88, 91], "easiest": 88, "modular": 88, "penalti": 88, "l2": 88, "model3": 88, "n_estim": 88, "cv_pred_probs_1": 88, "cv_pred_probs_2": 88, "cv_pred_probs_3": 88, "label_quality_scores_best": 88, "cv_pred_probs_ensembl": 88, "label_quality_scores_bett": 88, "superior": [88, 94], "workflow": [89, 95], "speechbrain": 89, "timm": 89, "glad": 90, "multiannotator_label": 90, "300": [90, 99], "noisier": 90, "111": [90, 95], "local_data": [90, 91], "true_labels_train": [90, 91], "noise_matrix_bett": 90, "noise_matrix_wors": 90, "transpos": [90, 93], "dropna": 90, "zfill": 90, "row_na_check": 90, "notna": 90, "reset_index": 90, "a0001": 90, "a0002": 90, "a0003": 90, "a0004": 90, "a0005": 90, "a0006": 90, "a0007": 90, "a0008": 90, "a0009": 90, "a0010": 90, "a0041": 90, "a0042": 90, "a0043": 90, "a0044": 90, "a0045": 90, "a0046": 90, "a0047": 90, "a0048": 90, "a0049": 90, "a0050": 90, "na": 90, "60856743": 90, "41693214": 90, "40908785": 90, "87147629": 90, "64941785": 90, "10774851": 90, "0524466": 90, "71853246": 90, "37169848": 90, "66031048": 90, "multiannotator_util": 90, "crude": 90, "straight": 90, "majority_vote_label": 90, "736118": 90, "757751": 90, "782232": 90, "715565": 90, "824256": 90, "quality_annotator_a0001": 90, "quality_annotator_a0002": 90, "quality_annotator_a0003": 90, "quality_annotator_a0004": 90, "quality_annotator_a0005": 90, "quality_annotator_a0006": 90, "quality_annotator_a0007": 90, "quality_annotator_a0008": 90, "quality_annotator_a0009": 90, "quality_annotator_a0010": 90, "quality_annotator_a0041": 90, "quality_annotator_a0042": 90, "quality_annotator_a0043": 90, "quality_annotator_a0044": 90, "quality_annotator_a0045": 90, "quality_annotator_a0046": 90, "quality_annotator_a0047": 90, "quality_annotator_a0048": 90, "quality_annotator_a0049": 90, "quality_annotator_a0050": 90, "070564": 90, "216078": 90, "119188": 90, "alongisd": 90, "244981": 90, "208333": 90, "295979": 90, "294118": 90, "324197": 90, "310345": 90, "355316": 90, "346154": 90, "439732": 90, "480000": 90, "a0031": 90, "523205": 90, "580645": 90, "a0034": 90, "535313": 90, "607143": 90, "a0021": 90, "606999": 90, "a0015": 90, "609526": 90, "678571": 90, "a0011": 90, "621103": 90, "692308": 90, "wors": 90, "improved_consensus_label": 90, "majority_vote_accuraci": 90, "cleanlab_label_accuraci": 90, "8581081081081081": 90, "9797297297297297": 90, "besid": 90, "sorted_consensus_quality_scor": 90, "worst_qual": 90, "better_qu": 90, "worst_quality_accuraci": 90, "better_quality_accuraci": 90, "9893238434163701": 90, "improved_pred_prob": 90, "treat": [90, 91, 95, 99], "analzi": 90, "copyright": 91, "advertis": 91, "violenc": 91, "nsfw": 91, "suppli": [91, 92, 95], "celeba": 91, "make_multilabel_data": 91, "boxes_coordin": 91, "box_multilabel": 91, "make_multi": 91, "bx1": 91, "by1": 91, "bx2": 91, "by2": 91, "label_list": 91, "ur": 91, "upper": 91, "inidx": 91, "logical_and": 91, "inv_d": 91, "labels_idx": 91, "true_labels_test": 91, "dict_unique_label": 91, "get_color_arrai": 91, "dcolor": 91, "aa4400": 91, "55227f": 91, "55a100": 91, "00ff00": 91, "007f7f": 91, "386b55": 91, "0000ff": 91, "simplic": 91, "advis": 91, "y_onehot": 91, "single_class_label": 91, "stratifi": [91, 94], "kf": 91, "train_index": 91, "test_index": 91, "clf_cv": 91, "x_train_cv": 91, "x_test_cv": 91, "y_train_cv": 91, "y_test_cv": 91, "y_pred_cv": 91, "saw": 91, "num_to_displai": 91, "09": [91, 92, 95], "275": 91, "267": 91, "225": 91, "171": 91, "234": 91, "165": 91, "227": [91, 92], "262": [91, 92], "263": [91, 92], "266": [91, 92], "139": 91, "143": [91, 92], "216": [91, 92, 99], "265": 91, "159": [91, 92], "despit": [91, 99], "suspect": 91, "888": 91, "8224": 91, "9632": 91, "968": 91, "6512": 91, "0444": 91, "774": 91, "labels_binary_format": 91, "labels_list_format": 91, "surround": 92, "scene": 92, "coco": 92, "everydai": 92, "has_label_issu": 92, "insal": 92, "nc": [92, 96, 99], "s3": [92, 96, 99], "amazonaw": [92, 96, 99], "objectdetectionbenchmark": 92, "tutorial_obj": 92, "pkl": 92, "example_imag": 92, "unzip": [92, 99], "_separate_label": 92, "_separate_predict": 92, "begin": 92, "image_path": 92, "rb": 92, "image_to_visu": 92, "seg_map": 92, "334": 92, "float32": 92, "bboxes_ignor": 92, "290": 92, "286": 92, "285": 92, "224": 92, "231": 92, "293": 92, "235": 92, "289": 92, "282": 92, "74": [92, 95, 97], "281": 92, "271": 92, "280": 92, "277": 92, "279": 92, "287": 92, "299": 92, "276": 92, "307": 92, "321": 92, "326": 92, "333": 92, "261": 92, "319": 92, "257": 92, "295": 92, "283": 92, "243": 92, "303": 92, "316": 92, "247": 92, "323": 92, "327": 92, "226": 92, "228": 92, "232": 92, "219": 92, "239": 92, "240": 92, "209": [92, 99], "242": 92, "202": 92, "230": 92, "215": 92, "220": 92, "229": 92, "217": [92, 99], "237": 92, "207": [92, 99], "204": 92, "84": [92, 95], "205": 92, "223": 92, "153": 92, "149": 92, "140": 92, "124": 92, "268": 92, "273": 92, "108": 92, "284": 92, "110": 92, "136": 92, "145": 92, "173": 92, "297": 92, "317": 92, "192": 92, "332": 92, "324": 92, "203": 92, "320": 92, "314": 92, "199": 92, "291": 92, "000000481413": 92, "jpg": 92, "42398": 92, "44503": 92, "337": [92, 98], "29968": 92, "336": 92, "21005": 92, "9978472": 92, "forgot": 92, "drew": 92, "label_issue_idx": 92, "num_examples_to_show": 92, "138": 92, "candid": 92, "97489622": 92, "70610878": 92, "98764951": 92, "88899237": 92, "99085805": 92, "issue_idx": 92, "95569726e": 92, "03354841e": 92, "57510169e": 92, "58447666e": 92, "39755858e": 92, "issue_to_visu": 92, "000000009483": 92, "95569726168054e": 92, "addition": [92, 96], "visibl": 92, "missmatch": 92, "likelei": 92, "agnost": 92, "vaidat": 92, "inconsist": 92, "000000395701": 92, "033548411774308e": 92, "armchair": 92, "tv": 92, "000000154004": 92, "38300759625496356": 92, "foreground": 92, "000000448410": 92, "0008575101690203273": 92, "crowd": 92, "alon": 92, "explor": [92, 93], "resembl": [92, 93], "000000499768": 92, "9748962231208227": 92, "000000521141": 92, "8889923658893665": 92, "000000143931": 92, "9876495074395956": 92, "bonu": 92, "uncov": 92, "irregular": 92, "anomali": 92, "unusu": [92, 93], "object_detection_util": 92, "calculate_bounding_box_area": 92, "num_imgs_to_show": 92, "lab_object_count": 92, "pred_object_count": 92, "000000430073": 92, "000000183709": 92, "000000189475": 92, "studi": 92, "label_norm": 92, "pred_norm": 92, "area": [92, 96], "assess": 92, "lab_area": 92, "pred_area": 92, "lab_area_mean": 92, "lab_area_std": 92, "max_deviation_valu": 92, "max_deviation_class": 92, "deviation_valu": 92, "deviation_class": 92, "mean_area": 92, "std_area": 92, "class_area": 92, "deviations_awai": 92, "max_deviation_index": 92, "num_imgs_to_show_per_class": 92, "class_num": 92, "sorted_indic": 92, "000000422886": 92, "000000341828": 92, "000000461009": 92, "train_feature_embed": 93, "ood_train_feature_scor": 93, "test_feature_embed": 93, "ood_test_feature_scor": 93, "ood_train_predictions_scor": 93, "train_pred_prob": 93, "ood_test_predictions_scor": 93, "test_pred_prob": 93, "pylab": 93, "rcparam": 93, "baggingclassifi": 93, "therebi": 93, "rescal": 93, "transform_norm": 93, "totensor": 93, "root": 93, "animal_class": 93, "non_animal_class": 93, "animal_idx": 93, "test_idx": 93, "toronto": 93, "edu": 93, "kriz": 93, "170498071": 93, "102922526": 93, "55it": 93, "5000": 93, "plot_imag": 93, "visualize_outli": 93, "txt_class": 93, "img": [93, 95], "npimg": 93, "show_label": 93, "data_subset": 93, "resnet50": 93, "corpu": 93, "2048": 93, "embed_imag": 93, "create_model": 93, "strang": 93, "odd": 93, "train_ood_features_scor": 93, "top_train_ood_features_idx": 93, "fun": 93, "negat": 93, "homogen": 93, "bottom_train_ood_features_idx": 93, "test_ood_features_scor": 93, "top_ood_features_idx": 93, "inevit": 93, "trade": 93, "5th": 93, "percentil": 93, "fifth_percentil": 93, "plt_rang": 93, "hist": 93, "train_outlier_scor": 93, "ylabel": 93, "axvlin": 93, "test_outlier_scor": 93, "ood_features_indic": 93, "revisit": 93, "return_invers": 93, "train_feature_embeddings_sc": 93, "test_feature_embeddings_sc": 93, "train_pred_label": 93, "9702": 93, "train_ood_predictions_scor": 93, "test_ood_predictions_scor": 93, "lost": 93, "unsuit": 94, "ok": [94, 99], "convention": 94, "aforement": 94, "hypothet": 94, "contrast": 94, "tradit": 94, "disjoint": 94, "out_of_sample_pred_probs_for_a": 94, "out_of_sample_pred_probs_for_b": 94, "out_of_sample_pred_probs_for_c": 94, "out_of_sample_pred_prob": 94, "price": 95, "incom": 95, "ag": 95, "sensor": 95, "histgradientboostingregressor": 95, "r2_score": 95, "student_grades_r": 95, "final_scor": 95, "true_final_scor": 95, "homework": 95, "3d": 95, "hue": 95, "mpl_toolkit": 95, "mplot3d": 95, "axes3d": 95, "errors_idx": 95, "add_subplot": 95, "z": 95, "colorbar": 95, "errors_mask": 95, "feature_column": 95, "predicted_column": 95, "x_train_raw": 95, "x_test_raw": 95, "categorical_featur": [95, 97], "randomforestregressor": 95, "636197": 95, "499503": 95, "843478": 95, "776647": 95, "350358": 95, "170547": 95, "706969": 95, "984759": 95, "812515": 95, "795928": 95, "identified_issu": [95, 98], "141": 95, "659": 95, "367": 95, "318": 95, "305": 95, "560": 95, "657": 95, "688": 95, "view_datapoint": 95, "concat": 95, "consum": [95, 98], "baseline_model": [95, 98], "preds_og": 95, "r2_og": 95, "838": 95, "robustli": [95, 97, 98], "acceler": [95, 98], "found_label_issu": 95, "preds_cl": 95, "r2_cl": 95, "926": 95, "effort": [95, 97, 98], "favorit": 95, "968627e": 95, "228799": 95, "646674e": 95, "402962": 95, "323818e": 95, "952758": 95, "422144e": 95, "456908": 95, "465815e": 95, "753968": 95, "110719": 95, "000044": 95, "670640": 95, "000060": 95, "749976": 95, "000066": 95, "947007": 95, "000314": 95, "648396": 95, "plu": 95, "synthia": 96, "imagesegment": 96, "given_mask": 96, "predicted_mask": 96, "set_printopt": [96, 99], "sky": 96, "sidewalk": 96, "veget": 96, "terrain": 96, "rider": 96, "pred_probs_filepath": 96, "1088": 96, "1920": 96, "label_filepath": 96, "synthia_class": 96, "maunal": 96, "100000": 96, "244800": 96, "leftmost": 96, "middl": [96, 99], "infact": 96, "rightmost": 96, "discrep": 96, "3263230": 96, "783379": 96, "275110": 96, "255792": 96, "78225": 96, "55990": 96, "54427": 96, "33591": 96, "24645": 96, "21308": 96, "15045": 96, "14171": 96, "13832": 96, "13498": 96, "11490": 96, "9164": 96, "8769": 96, "6999": 96, "6031": 96, "5011": 96, "mistakenli": 96, "class_issu": 96, "aim": [96, 99], "domin": 96, "extratreesclassifi": 97, "extratre": 97, "ranked_label_issu": [97, 98], "labelencod": [97, 98], "labels_raw": 97, "interg": [97, 98], "tress": 97, "827": 97, "cheat": 97, "0pt": 97, "233": [97, 99], "labels_train": 97, "labels_test": 97, "acc_og": [97, 98], "783068783068783": 97, "acc_cl": [97, 98], "8095238095238095": 97, "earlier": [98, 99], "raw_label": 98, "raw_train_text": 98, "raw_test_text": 98, "raw_train_label": 98, "raw_test_label": 98, "encond": 98, "train_text": 98, "test_text": 98, "858371": 98, "547274": 98, "826228": 98, "966008": 98, "792449": 98, "646": 98, "390": 98, "628": 98, "702": 98, "135": 98, "735": 98, "print_as_df": 98, "inverse_transform": 98, "fight": 98, "bunch": 99, "conll": 99, "2003": 99, "love": 99, "n_i": 99, "optional_list_of_ordered_class_nam": 99, "deepai": 99, "conll2003": 99, "rm": 99, "tokenclassif": 99, "2024": 99, "2400": 99, "52e0": 99, "1a00": 99, "894": 99, "connect": 99, "443": 99, "await": 99, "982975": 99, "960k": 99, "959": 99, "94k": 99, "kb": 99, "mb": 99, "directori": 99, "inflat": 99, "113": 99, "17045998": 99, "16m": 99, "octet": 99, "26m": 99, "5mb": 99, "bert": 99, "read_npz": 99, "filepath": 99, "corrsespond": 99, "iob2": 99, "given_ent": 99, "entity_map": 99, "readfil": 99, "sep": 99, "startswith": 99, "docstart": 99, "isalpha": 99, "isupp": 99, "indices_to_preview": 99, "nsentenc": 99, "eu": 99, "reject": 99, "boycott": 99, "british": 99, "lamb": 99, "00030412": 99, "00023826": 99, "99936208": 99, "00007009": 99, "00002545": 99, "99998795": 99, "00000401": 99, "00000218": 99, "00000455": 99, "00000131": 99, "00000749": 99, "99996115": 99, "00001371": 99, "0000087": 99, "00000895": 99, "99998936": 99, "00000382": 99, "00000178": 99, "00000366": 99, "00000137": 99, "99999101": 99, "00000266": 99, "00000174": 99, "0000035": 99, "00000109": 99, "99998768": 99, "00000482": 99, "00000202": 99, "00000438": 99, "0000011": 99, "00000465": 99, "99996392": 99, "00001105": 99, "0000116": 99, "00000878": 99, "99998671": 99, "00000364": 99, "00000213": 99, "00000472": 99, "00000281": 99, "99999073": 99, "00000211": 99, "00000159": 99, "00000442": 99, "00000115": 99, "peter": 99, "blackburn": 99, "00000358": 99, "00000529": 99, "99995623": 99, "0000129": 99, "0000024": 99, "00001812": 99, "99994141": 99, "00001645": 99, "00002162": 99, "brussel": 99, "1996": 99, "00001172": 99, "00000821": 99, "00004661": 99, "0000618": 99, "99987167": 99, "99999061": 99, "00000201": 99, "00000195": 99, "00000408": 99, "00000135": 99, "2254": 99, "2907": 99, "19392": 99, "9962": 99, "8904": 99, "19303": 99, "12918": 99, "9256": 99, "11855": 99, "18392": 99, "20426": 99, "19402": 99, "14744": 99, "19371": 99, "4645": 99, "10331": 99, "9430": 99, "6143": 99, "18367": 99, "12914": 99, "todai": 99, "weather": 99, "march": 99, "scalfaro": 99, "northern": 99, "himself": 99, "said": 99, "germani": 99, "nastja": 99, "rysich": 99, "north": 99, "spla": 99, "fought": 99, "khartoum": 99, "govern": 99, "south": 99, "1983": 99, "autonomi": 99, "animist": 99, "region": 99, "moslem": 99, "arabis": 99, "mayor": 99, "antonio": 99, "gonzalez": 99, "garcia": 99, "revolutionari": 99, "parti": 99, "wednesdai": 99, "troop": 99, "raid": 99, "farm": 99, "stole": 99, "rape": 99, "women": 99, "spring": 99, "chg": 99, "hrw": 99, "12pct": 99, "princ": 99, "photo": 99, "moment": 99, "spokeswoman": 99, "rainier": 99, "told": 99, "reuter": 99, "danila": 99, "carib": 99, "w224": 99, "equip": 99, "radiomet": 99, "earn": 99, "19996": 99, "london": 99, "denom": 99, "sale": 99, "uk": 99, "jp": 99, "fr": 99, "maccabi": 99, "hapoel": 99, "haifa": 99, "tel": 99, "aviv": 99, "hospit": 99, "rever": 99, "roman": 99, "cathol": 99, "nun": 99, "admit": 99, "calcutta": 99, "week": 99, "ago": 99, "fever": 99, "vomit": 99, "allianc": 99, "embattl": 99, "kabul": 99, "salang": 99, "highwai": 99, "mondai": 99, "tuesdai": 99, "suprem": 99, "council": 99, "led": 99, "jumbish": 99, "milli": 99, "movement": 99, "warlord": 99, "abdul": 99, "rashid": 99, "dostum": 99, "dollar": 99, "exchang": 99, "3570": 99, "12049": 99, "born": 99, "1937": 99, "provinc": 99, "anhui": 99, "dai": 99, "came": 99, "shanghai": 99, "citi": 99, "prolif": 99, "author": 99, "teacher": 99, "chines": 99, "16764": 99, "1990": 99, "historian": 99, "alan": 99, "john": 99, "percival": 99, "taylor": 99, "di": 99, "20446": 99, "pace": 99, "bowler": 99, "ian": 99, "harvei": 99, "claim": 99, "victoria": 99, "15514": 99, "cotti": 99, "osc": 99, "foreign": 99, "minist": 99, "7525": 99, "sultan": 99, "specter": 99, "met": 99, "crown": 99, "abdullah": 99, "defenc": 99, "aviat": 99, "jeddah": 99, "saudi": 99, "agenc": 99, "2288": 99, "hi": 99, "customari": 99, "outfit": 99, "champion": 99, "damp": 99, "scalp": 99, "canada": 99, "reign": 99, "olymp": 99, "donovan": 99, "bailei": 99, "1992": 99, "linford": 99, "christi": 99, "britain": 99, "1984": 99, "1988": 99, "carl": 99, "lewi": 99, "ambigi": 99, "punctuat": 99, "chicago": 99, "digest": 99, "philadelphia": 99, "usda": 99, "york": 99, "token_issu": 99, "471": 99, "kean": 99, "year": 99, "contract": 99, "manchest": 99, "19072": 99, "societi": 99, "million": 99, "bite": 99, "deliv": 99, "19910": 99, "father": 99, "clarenc": 99, "woolmer": 99, "renam": 99, "uttar": 99, "pradesh": 99, "india": 99, "ranji": 99, "trophi": 99, "nation": 99, "championship": 99, "captain": 99, "1949": 99, "15658": 99, "19879": 99, "iii": 99, "brian": 99, "shimer": 99, "randi": 99, "jone": 99, "19104": 99}, "objects": {"cleanlab": [[0, 0, 0, "-", "benchmarking"], [2, 0, 0, "-", "classification"], [3, 0, 0, "-", "count"], [9, 0, 0, "-", "datalab"], [34, 0, 0, "-", "dataset"], [37, 0, 0, "-", "experimental"], [41, 0, 0, "-", "filter"], [42, 0, 0, "-", "internal"], [53, 0, 0, "-", "models"], [55, 0, 0, "-", "multiannotator"], [58, 0, 0, "-", "multilabel_classification"], [61, 0, 0, "-", "object_detection"], [64, 0, 0, "-", "outlier"], [65, 0, 0, "-", "rank"], [66, 0, 0, "-", "regression"], [70, 0, 0, "-", "segmentation"], [74, 0, 0, "-", "token_classification"]], "cleanlab.benchmarking": [[1, 0, 0, "-", "noise_generation"]], "cleanlab.benchmarking.noise_generation": [[1, 1, 1, "", "generate_n_rand_probabilities_that_sum_to_m"], [1, 1, 1, "", "generate_noise_matrix_from_trace"], [1, 1, 1, "", "generate_noisy_labels"], [1, 1, 1, "", "noise_matrix_is_valid"], [1, 1, 1, "", "randomly_distribute_N_balls_into_K_bins"]], "cleanlab.classification": [[2, 2, 1, "", "CleanLearning"]], "cleanlab.classification.CleanLearning": [[2, 3, 1, "", "__init_subclass__"], [2, 3, 1, "", "find_label_issues"], [2, 3, 1, "", "fit"], [2, 3, 1, "", "get_label_issues"], [2, 3, 1, "", "get_metadata_routing"], [2, 3, 1, "", "get_params"], [2, 3, 1, "", "predict"], [2, 3, 1, "", "predict_proba"], [2, 3, 1, "", "save_space"], [2, 3, 1, "", "score"], [2, 3, 1, "", "set_fit_request"], [2, 3, 1, "", "set_params"], [2, 3, 1, "", "set_score_request"]], "cleanlab.count": [[3, 1, 1, "", "calibrate_confident_joint"], [3, 1, 1, "", "compute_confident_joint"], [3, 1, 1, "", "estimate_confident_joint_and_cv_pred_proba"], [3, 1, 1, "", "estimate_cv_predicted_probabilities"], [3, 1, 1, "", "estimate_joint"], [3, 1, 1, "", "estimate_latent"], [3, 1, 1, "", "estimate_noise_matrices"], [3, 1, 1, "", "estimate_py_and_noise_matrices_from_probabilities"], [3, 1, 1, "", "estimate_py_noise_matrices_and_cv_pred_proba"], [3, 1, 1, "", "get_confident_thresholds"], [3, 1, 1, "", "num_label_issues"]], "cleanlab.datalab": [[4, 0, 0, "-", "datalab"], [13, 0, 0, "-", "internal"]], "cleanlab.datalab.datalab": [[4, 2, 1, "", "Datalab"]], "cleanlab.datalab.datalab.Datalab": [[4, 4, 1, "", "class_names"], [4, 3, 1, "", "find_issues"], [4, 3, 1, "", "get_info"], [4, 3, 1, "", "get_issue_summary"], [4, 3, 1, "", "get_issues"], [4, 4, 1, "", "has_labels"], [4, 4, 1, "", "info"], [4, 4, 1, "", "issue_summary"], [4, 4, 1, "", "issues"], [4, 4, 1, "", "labels"], [4, 3, 1, "", "list_default_issue_types"], [4, 3, 1, "", "list_possible_issue_types"], [4, 3, 1, "", "load"], [4, 3, 1, "", "report"], [4, 3, 1, "", "save"]], "cleanlab.datalab.internal": [[10, 0, 0, "-", "data"], [11, 0, 0, "-", "data_issues"], [14, 0, 0, "-", "issue_finder"], [12, 0, 0, "-", "issue_manager_factory"], [30, 0, 0, "-", "model_outputs"], [31, 0, 0, "-", "report"], [32, 0, 0, "-", "task"]], "cleanlab.datalab.internal.data": [[10, 2, 1, "", "Data"], [10, 5, 1, "", "DataFormatError"], [10, 5, 1, "", "DatasetDictError"], [10, 5, 1, "", "DatasetLoadError"], [10, 2, 1, "", "Label"], [10, 2, 1, "", "MultiClass"], [10, 2, 1, "", "MultiLabel"]], "cleanlab.datalab.internal.data.Data": [[10, 4, 1, "", "class_names"], [10, 4, 1, "", "has_labels"]], "cleanlab.datalab.internal.data.DataFormatError": [[10, 3, 1, "", "add_note"], [10, 6, 1, "", "args"], [10, 3, 1, "", "with_traceback"]], "cleanlab.datalab.internal.data.DatasetDictError": [[10, 3, 1, "", "add_note"], [10, 6, 1, "", "args"], [10, 3, 1, "", "with_traceback"]], "cleanlab.datalab.internal.data.DatasetLoadError": [[10, 3, 1, "", "add_note"], [10, 6, 1, "", "args"], [10, 3, 1, "", "with_traceback"]], "cleanlab.datalab.internal.data.Label": [[10, 4, 1, "", "class_names"], [10, 4, 1, "", "is_available"]], "cleanlab.datalab.internal.data.MultiClass": [[10, 4, 1, "", "class_names"], [10, 4, 1, "", "is_available"]], "cleanlab.datalab.internal.data.MultiLabel": [[10, 4, 1, "", "class_names"], [10, 4, 1, "", "is_available"]], "cleanlab.datalab.internal.data_issues": [[11, 2, 1, "", "DataIssues"], [11, 1, 1, "", "get_data_statistics"]], "cleanlab.datalab.internal.data_issues.DataIssues": [[11, 3, 1, "", "collect_issues_from_imagelab"], [11, 3, 1, "", "collect_issues_from_issue_manager"], [11, 3, 1, "", "collect_statistics"], [11, 3, 1, "", "get_info"], [11, 3, 1, "", "get_issue_summary"], [11, 3, 1, "", "get_issues"], [11, 6, 1, "", "info"], [11, 6, 1, "", "issue_summary"], [11, 6, 1, "", "issues"], [11, 3, 1, "", "set_health_score"], [11, 4, 1, "", "statistics"]], "cleanlab.datalab.internal.issue_finder": [[14, 2, 1, "", "IssueFinder"]], "cleanlab.datalab.internal.issue_finder.IssueFinder": [[14, 3, 1, "", "find_issues"], [14, 3, 1, "", "get_available_issue_types"]], "cleanlab.datalab.internal.issue_manager": [[16, 0, 0, "-", "data_valuation"], [17, 0, 0, "-", "duplicate"], [18, 0, 0, "-", "imbalance"], [20, 0, 0, "-", "issue_manager"], [21, 0, 0, "-", "label"], [24, 0, 0, "-", "noniid"], [25, 0, 0, "-", "null"], [26, 0, 0, "-", "outlier"], [29, 0, 0, "-", "underperforming_group"]], "cleanlab.datalab.internal.issue_manager.data_valuation": [[16, 2, 1, "", "DataValuationIssueManager"]], "cleanlab.datalab.internal.issue_manager.data_valuation.DataValuationIssueManager": [[16, 6, 1, "", "DEFAULT_THRESHOLD"], [16, 3, 1, "", "collect_info"], [16, 6, 1, "", "description"], [16, 3, 1, "", "find_issues"], [16, 6, 1, "", "info"], [16, 6, 1, "", "issue_name"], [16, 6, 1, "", "issue_score_key"], [16, 6, 1, "", "issues"], [16, 3, 1, "", "make_summary"], [16, 3, 1, "", "report"], [16, 6, 1, "", "summary"], [16, 6, 1, "", "verbosity_levels"]], "cleanlab.datalab.internal.issue_manager.duplicate": [[17, 2, 1, "", "NearDuplicateIssueManager"]], "cleanlab.datalab.internal.issue_manager.duplicate.NearDuplicateIssueManager": [[17, 3, 1, "", "collect_info"], [17, 6, 1, "", "description"], [17, 3, 1, "", "find_issues"], [17, 6, 1, "", "info"], [17, 6, 1, "", "issue_name"], [17, 6, 1, "", "issue_score_key"], [17, 6, 1, "", "issues"], [17, 3, 1, "", "make_summary"], [17, 6, 1, "", "near_duplicate_sets"], [17, 3, 1, "", "report"], [17, 6, 1, "", "summary"], [17, 6, 1, "", "verbosity_levels"]], "cleanlab.datalab.internal.issue_manager.imbalance": [[18, 2, 1, "", "ClassImbalanceIssueManager"]], "cleanlab.datalab.internal.issue_manager.imbalance.ClassImbalanceIssueManager": [[18, 3, 1, "", "collect_info"], [18, 6, 1, "", "description"], [18, 3, 1, "", "find_issues"], [18, 6, 1, "", "info"], [18, 6, 1, "", "issue_name"], [18, 6, 1, "", "issue_score_key"], [18, 6, 1, "", "issues"], [18, 3, 1, "", "make_summary"], [18, 3, 1, "", "report"], [18, 6, 1, "", "summary"], [18, 6, 1, "", "verbosity_levels"]], "cleanlab.datalab.internal.issue_manager.issue_manager": [[20, 2, 1, "", "IssueManager"]], "cleanlab.datalab.internal.issue_manager.issue_manager.IssueManager": [[20, 3, 1, "", "collect_info"], [20, 6, 1, "", "description"], [20, 3, 1, "", "find_issues"], [20, 6, 1, "", "info"], [20, 6, 1, "", "issue_name"], [20, 6, 1, "", "issue_score_key"], [20, 6, 1, "", "issues"], [20, 3, 1, "", "make_summary"], [20, 3, 1, "", "report"], [20, 6, 1, "", "summary"], [20, 6, 1, "", "verbosity_levels"]], "cleanlab.datalab.internal.issue_manager.label": [[21, 2, 1, "", "LabelIssueManager"]], "cleanlab.datalab.internal.issue_manager.label.LabelIssueManager": [[21, 3, 1, "", "collect_info"], [21, 6, 1, "", "description"], [21, 3, 1, "", "find_issues"], [21, 3, 1, "", "get_health_summary"], [21, 6, 1, "", "health_summary_parameters"], [21, 6, 1, "", "info"], [21, 6, 1, "", "issue_name"], [21, 6, 1, "", "issue_score_key"], [21, 6, 1, "", "issues"], [21, 3, 1, "", "make_summary"], [21, 3, 1, "", "report"], [21, 6, 1, "", "summary"], [21, 6, 1, "", "verbosity_levels"]], "cleanlab.datalab.internal.issue_manager.multilabel": [[23, 0, 0, "-", "label"]], "cleanlab.datalab.internal.issue_manager.multilabel.label": [[23, 2, 1, "", "MultilabelIssueManager"]], "cleanlab.datalab.internal.issue_manager.multilabel.label.MultilabelIssueManager": [[23, 3, 1, "", "collect_info"], [23, 6, 1, "", "description"], [23, 3, 1, "", "find_issues"], [23, 6, 1, "", "info"], [23, 6, 1, "", "issue_name"], [23, 6, 1, "", "issue_score_key"], [23, 6, 1, "", "issues"], [23, 3, 1, "", "make_summary"], [23, 3, 1, "", "report"], [23, 6, 1, "", "summary"], [23, 6, 1, "", "verbosity_levels"]], "cleanlab.datalab.internal.issue_manager.noniid": [[24, 2, 1, "", "NonIIDIssueManager"], [24, 1, 1, "", "simplified_kolmogorov_smirnov_test"]], "cleanlab.datalab.internal.issue_manager.noniid.NonIIDIssueManager": [[24, 3, 1, "", "collect_info"], [24, 6, 1, "", "description"], [24, 3, 1, "", "find_issues"], [24, 6, 1, "", "info"], [24, 6, 1, "", "issue_name"], [24, 6, 1, "", "issue_score_key"], [24, 6, 1, "", "issues"], [24, 3, 1, "", "make_summary"], [24, 3, 1, "", "report"], [24, 6, 1, "", "summary"], [24, 6, 1, "", "verbosity_levels"]], "cleanlab.datalab.internal.issue_manager.null": [[25, 2, 1, "", "NullIssueManager"]], "cleanlab.datalab.internal.issue_manager.null.NullIssueManager": [[25, 3, 1, "", "collect_info"], [25, 6, 1, "", "description"], [25, 3, 1, "", "find_issues"], [25, 6, 1, "", "info"], [25, 6, 1, "", "issue_name"], [25, 6, 1, "", "issue_score_key"], [25, 6, 1, "", "issues"], [25, 3, 1, "", "make_summary"], [25, 3, 1, "", "report"], [25, 6, 1, "", "summary"], [25, 6, 1, "", "verbosity_levels"]], "cleanlab.datalab.internal.issue_manager.outlier": [[26, 2, 1, "", "OutlierIssueManager"]], "cleanlab.datalab.internal.issue_manager.outlier.OutlierIssueManager": [[26, 6, 1, "", "DEFAULT_THRESHOLDS"], [26, 3, 1, "", "collect_info"], [26, 6, 1, "", "description"], [26, 3, 1, "", "find_issues"], [26, 6, 1, "", "info"], [26, 6, 1, "", "issue_name"], [26, 6, 1, "", "issue_score_key"], [26, 6, 1, "", "issues"], [26, 3, 1, "", "make_summary"], [26, 6, 1, "", "ood"], [26, 3, 1, "", "report"], [26, 6, 1, "", "summary"], [26, 6, 1, "", "verbosity_levels"]], "cleanlab.datalab.internal.issue_manager.regression": [[28, 0, 0, "-", "label"]], "cleanlab.datalab.internal.issue_manager.regression.label": [[28, 2, 1, "", "RegressionLabelIssueManager"], [28, 1, 1, "", "find_issues_with_features"], [28, 1, 1, "", "find_issues_with_predictions"]], "cleanlab.datalab.internal.issue_manager.regression.label.RegressionLabelIssueManager": [[28, 3, 1, "", "collect_info"], [28, 6, 1, "", "description"], [28, 3, 1, "", "find_issues"], [28, 6, 1, "", "info"], [28, 6, 1, "", "issue_name"], [28, 6, 1, "", "issue_score_key"], [28, 6, 1, "", "issues"], [28, 3, 1, "", "make_summary"], [28, 3, 1, "", "report"], [28, 6, 1, "", "summary"], [28, 6, 1, "", "verbosity_levels"]], "cleanlab.datalab.internal.issue_manager.underperforming_group": [[29, 2, 1, "", "UnderperformingGroupIssueManager"]], "cleanlab.datalab.internal.issue_manager.underperforming_group.UnderperformingGroupIssueManager": [[29, 6, 1, "", "NO_UNDERPERFORMING_CLUSTER_ID"], [29, 6, 1, "", "OUTLIER_CLUSTER_LABELS"], [29, 3, 1, "", "collect_info"], [29, 6, 1, "", "description"], [29, 3, 1, "", "filter_cluster_ids"], [29, 3, 1, "", "find_issues"], [29, 3, 1, "", "get_worst_cluster"], [29, 6, 1, "", "info"], [29, 6, 1, "", "issue_name"], [29, 6, 1, "", "issue_score_key"], [29, 6, 1, "", "issues"], [29, 3, 1, "", "make_summary"], [29, 3, 1, "", "perform_clustering"], [29, 3, 1, "", "report"], [29, 3, 1, "", "set_knn_graph"], [29, 6, 1, "", "summary"], [29, 6, 1, "", "verbosity_levels"]], "cleanlab.datalab.internal.issue_manager_factory": [[12, 7, 1, "", "REGISTRY"], [12, 1, 1, "", "list_default_issue_types"], [12, 1, 1, "", "list_possible_issue_types"], [12, 1, 1, "", "register"]], "cleanlab.datalab.internal.model_outputs": [[30, 2, 1, "", "ModelOutput"], [30, 2, 1, "", "MultiClassPredProbs"], [30, 2, 1, "", "MultiLabelPredProbs"], [30, 2, 1, "", "RegressionPredictions"]], "cleanlab.datalab.internal.model_outputs.ModelOutput": [[30, 3, 1, "", "collect"], [30, 6, 1, "", "data"], [30, 3, 1, "", "validate"]], "cleanlab.datalab.internal.model_outputs.MultiClassPredProbs": [[30, 6, 1, "", "argument"], [30, 3, 1, "", "collect"], [30, 6, 1, "", "data"], [30, 3, 1, "", "validate"]], "cleanlab.datalab.internal.model_outputs.MultiLabelPredProbs": [[30, 6, 1, "", "argument"], [30, 3, 1, "", "collect"], [30, 6, 1, "", "data"], [30, 3, 1, "", "validate"]], "cleanlab.datalab.internal.model_outputs.RegressionPredictions": [[30, 6, 1, "", "argument"], [30, 3, 1, "", "collect"], [30, 6, 1, "", "data"], [30, 3, 1, "", "validate"]], "cleanlab.datalab.internal.report": [[31, 2, 1, "", "Reporter"]], "cleanlab.datalab.internal.report.Reporter": [[31, 3, 1, "", "get_report"], [31, 3, 1, "", "report"]], "cleanlab.datalab.internal.task": [[32, 2, 1, "", "Task"]], "cleanlab.datalab.internal.task.Task": [[32, 6, 1, "", "CLASSIFICATION"], [32, 6, 1, "", "MULTILABEL"], [32, 6, 1, "", "REGRESSION"], [32, 3, 1, "", "__contains__"], [32, 3, 1, "", "__getitem__"], [32, 3, 1, "", "__iter__"], [32, 3, 1, "", "__len__"], [32, 3, 1, "", "from_str"], [32, 4, 1, "", "is_classification"], [32, 4, 1, "", "is_multilabel"], [32, 4, 1, "", "is_regression"]], "cleanlab.dataset": [[34, 1, 1, "", "find_overlapping_classes"], [34, 1, 1, "", "health_summary"], [34, 1, 1, "", "overall_label_health_score"], [34, 1, 1, "", "rank_classes_by_label_quality"]], "cleanlab.experimental": [[35, 0, 0, "-", "cifar_cnn"], [36, 0, 0, "-", "coteaching"], [38, 0, 0, "-", "label_issues_batched"], [39, 0, 0, "-", "mnist_pytorch"], [40, 0, 0, "-", "span_classification"]], "cleanlab.experimental.cifar_cnn": [[35, 2, 1, "", "CNN"], [35, 1, 1, "", "call_bn"]], "cleanlab.experimental.cifar_cnn.CNN": [[35, 6, 1, "", "T_destination"], [35, 3, 1, "", "__call__"], [35, 3, 1, "", "add_module"], [35, 3, 1, "", "apply"], [35, 3, 1, "", "bfloat16"], [35, 3, 1, "", "buffers"], [35, 6, 1, "", "call_super_init"], [35, 3, 1, "", "children"], [35, 3, 1, "", "compile"], [35, 3, 1, "", "cpu"], [35, 3, 1, "", "cuda"], [35, 3, 1, "", "double"], [35, 6, 1, "", "dump_patches"], [35, 3, 1, "", "eval"], [35, 3, 1, "", "extra_repr"], [35, 3, 1, "", "float"], [35, 3, 1, "id0", "forward"], [35, 3, 1, "", "get_buffer"], [35, 3, 1, "", "get_extra_state"], [35, 3, 1, "", "get_parameter"], [35, 3, 1, "", "get_submodule"], [35, 3, 1, "", "half"], [35, 3, 1, "", "ipu"], [35, 3, 1, "", "load_state_dict"], [35, 3, 1, "", "modules"], [35, 3, 1, "", "named_buffers"], [35, 3, 1, "", "named_children"], [35, 3, 1, "", "named_modules"], [35, 3, 1, "", "named_parameters"], [35, 3, 1, "", "parameters"], [35, 3, 1, "", "register_backward_hook"], [35, 3, 1, "", "register_buffer"], [35, 3, 1, "", "register_forward_hook"], [35, 3, 1, "", "register_forward_pre_hook"], [35, 3, 1, "", "register_full_backward_hook"], [35, 3, 1, "", "register_full_backward_pre_hook"], [35, 3, 1, "", "register_load_state_dict_post_hook"], [35, 3, 1, "", "register_module"], [35, 3, 1, "", "register_parameter"], [35, 3, 1, "", "register_state_dict_pre_hook"], [35, 3, 1, "", "requires_grad_"], [35, 3, 1, "", "set_extra_state"], [35, 3, 1, "", "share_memory"], [35, 3, 1, "", "state_dict"], [35, 3, 1, "", "to"], [35, 3, 1, "", "to_empty"], [35, 3, 1, "", "train"], [35, 6, 1, "", "training"], [35, 3, 1, "", "type"], [35, 3, 1, "", "xpu"], [35, 3, 1, "", "zero_grad"]], "cleanlab.experimental.coteaching": [[36, 1, 1, "", "adjust_learning_rate"], [36, 1, 1, "", "evaluate"], [36, 1, 1, "", "forget_rate_scheduler"], [36, 1, 1, "", "initialize_lr_scheduler"], [36, 1, 1, "", "loss_coteaching"], [36, 1, 1, "", "train"]], "cleanlab.experimental.label_issues_batched": [[38, 2, 1, "", "LabelInspector"], [38, 7, 1, "", "adj_confident_thresholds_shared"], [38, 1, 1, "", "find_label_issues_batched"], [38, 7, 1, "", "labels_shared"], [38, 7, 1, "", "pred_probs_shared"], [38, 1, 1, "", "split_arr"]], "cleanlab.experimental.label_issues_batched.LabelInspector": [[38, 3, 1, "", "get_confident_thresholds"], [38, 3, 1, "", "get_label_issues"], [38, 3, 1, "", "get_num_issues"], [38, 3, 1, "", "get_quality_scores"], [38, 3, 1, "", "score_label_quality"], [38, 3, 1, "", "update_confident_thresholds"]], "cleanlab.experimental.mnist_pytorch": [[39, 2, 1, "", "CNN"], [39, 2, 1, "", "SimpleNet"], [39, 1, 1, "", "get_mnist_dataset"], [39, 1, 1, "", "get_sklearn_digits_dataset"]], "cleanlab.experimental.mnist_pytorch.CNN": [[39, 3, 1, "", "__init_subclass__"], [39, 6, 1, "", "batch_size"], [39, 6, 1, "", "dataset"], [39, 6, 1, "", "epochs"], [39, 3, 1, "id0", "fit"], [39, 3, 1, "", "get_metadata_routing"], [39, 3, 1, "", "get_params"], [39, 6, 1, "", "loader"], [39, 6, 1, "", "log_interval"], [39, 6, 1, "", "lr"], [39, 6, 1, "", "momentum"], [39, 6, 1, "", "no_cuda"], [39, 3, 1, "id1", "predict"], [39, 3, 1, "id4", "predict_proba"], [39, 6, 1, "", "seed"], [39, 3, 1, "", "set_fit_request"], [39, 3, 1, "", "set_params"], [39, 3, 1, "", "set_predict_proba_request"], [39, 3, 1, "", "set_predict_request"], [39, 6, 1, "", "test_batch_size"]], "cleanlab.experimental.mnist_pytorch.SimpleNet": [[39, 6, 1, "", "T_destination"], [39, 3, 1, "", "__call__"], [39, 3, 1, "", "add_module"], [39, 3, 1, "", "apply"], [39, 3, 1, "", "bfloat16"], [39, 3, 1, "", "buffers"], [39, 6, 1, "", "call_super_init"], [39, 3, 1, "", "children"], [39, 3, 1, "", "compile"], [39, 3, 1, "", "cpu"], [39, 3, 1, "", "cuda"], [39, 3, 1, "", "double"], [39, 6, 1, "", "dump_patches"], [39, 3, 1, "", "eval"], [39, 3, 1, "", "extra_repr"], [39, 3, 1, "", "float"], [39, 3, 1, "", "forward"], [39, 3, 1, "", "get_buffer"], [39, 3, 1, "", "get_extra_state"], [39, 3, 1, "", "get_parameter"], [39, 3, 1, "", "get_submodule"], [39, 3, 1, "", "half"], [39, 3, 1, "", "ipu"], [39, 3, 1, "", "load_state_dict"], [39, 3, 1, "", "modules"], [39, 3, 1, "", "named_buffers"], [39, 3, 1, "", "named_children"], [39, 3, 1, "", "named_modules"], [39, 3, 1, "", "named_parameters"], [39, 3, 1, "", "parameters"], [39, 3, 1, "", "register_backward_hook"], [39, 3, 1, "", "register_buffer"], [39, 3, 1, "", "register_forward_hook"], [39, 3, 1, "", "register_forward_pre_hook"], [39, 3, 1, "", "register_full_backward_hook"], [39, 3, 1, "", "register_full_backward_pre_hook"], [39, 3, 1, "", "register_load_state_dict_post_hook"], [39, 3, 1, "", "register_module"], [39, 3, 1, "", "register_parameter"], [39, 3, 1, "", "register_state_dict_pre_hook"], [39, 3, 1, "", "requires_grad_"], [39, 3, 1, "", "set_extra_state"], [39, 3, 1, "", "share_memory"], [39, 3, 1, "", "state_dict"], [39, 3, 1, "", "to"], [39, 3, 1, "", "to_empty"], [39, 3, 1, "", "train"], [39, 6, 1, "", "training"], [39, 3, 1, "", "type"], [39, 3, 1, "", "xpu"], [39, 3, 1, "", "zero_grad"]], "cleanlab.experimental.span_classification": [[40, 1, 1, "", "display_issues"], [40, 1, 1, "", "find_label_issues"], [40, 1, 1, "", "get_label_quality_scores"]], "cleanlab.filter": [[41, 1, 1, "", "find_label_issues"], [41, 1, 1, "", "find_label_issues_using_argmax_confusion_matrix"], [41, 1, 1, "", "find_predicted_neq_given"], [41, 7, 1, "", "pred_probs_by_class"], [41, 7, 1, "", "prune_count_matrix_cols"]], "cleanlab.internal": [[43, 0, 0, "-", "label_quality_utils"], [44, 0, 0, "-", "latent_algebra"], [45, 0, 0, "-", "multiannotator_utils"], [46, 0, 0, "-", "multilabel_scorer"], [47, 0, 0, "-", "multilabel_utils"], [48, 0, 0, "-", "outlier"], [49, 0, 0, "-", "token_classification_utils"], [50, 0, 0, "-", "util"], [51, 0, 0, "-", "validation"]], "cleanlab.internal.label_quality_utils": [[43, 1, 1, "", "get_normalized_entropy"]], "cleanlab.internal.latent_algebra": [[44, 1, 1, "", "compute_inv_noise_matrix"], [44, 1, 1, "", "compute_noise_matrix_from_inverse"], [44, 1, 1, "", "compute_ps_py_inv_noise_matrix"], [44, 1, 1, "", "compute_py"], [44, 1, 1, "", "compute_py_inv_noise_matrix"], [44, 1, 1, "", "compute_pyx"]], "cleanlab.internal.multiannotator_utils": [[45, 1, 1, "", "assert_valid_inputs_multiannotator"], [45, 1, 1, "", "assert_valid_pred_probs"], [45, 1, 1, "", "check_consensus_label_classes"], [45, 1, 1, "", "compute_soft_cross_entropy"], [45, 1, 1, "", "find_best_temp_scaler"], [45, 1, 1, "", "format_multiannotator_labels"], [45, 1, 1, "", "temp_scale_pred_probs"]], "cleanlab.internal.multilabel_scorer": [[46, 2, 1, "", "Aggregator"], [46, 2, 1, "", "ClassLabelScorer"], [46, 2, 1, "", "MultilabelScorer"], [46, 1, 1, "", "exponential_moving_average"], [46, 1, 1, "", "get_cross_validated_multilabel_pred_probs"], [46, 1, 1, "", "get_label_quality_scores"], [46, 1, 1, "", "multilabel_py"], [46, 1, 1, "", "softmin"]], "cleanlab.internal.multilabel_scorer.Aggregator": [[46, 3, 1, "", "__call__"], [46, 6, 1, "", "possible_methods"]], "cleanlab.internal.multilabel_scorer.ClassLabelScorer": [[46, 6, 1, "", "CONFIDENCE_WEIGHTED_ENTROPY"], [46, 6, 1, "", "NORMALIZED_MARGIN"], [46, 6, 1, "", "SELF_CONFIDENCE"], [46, 3, 1, "", "__call__"], [46, 3, 1, "", "__contains__"], [46, 3, 1, "", "__getitem__"], [46, 3, 1, "", "__iter__"], [46, 3, 1, "", "__len__"], [46, 3, 1, "", "from_str"]], "cleanlab.internal.multilabel_scorer.MultilabelScorer": [[46, 3, 1, "", "__call__"], [46, 3, 1, "", "aggregate"], [46, 3, 1, "", "get_class_label_quality_scores"]], "cleanlab.internal.multilabel_utils": [[47, 1, 1, "", "get_onehot_num_classes"], [47, 1, 1, "", "int2onehot"], [47, 1, 1, "", "onehot2int"], [47, 1, 1, "", "stack_complement"]], "cleanlab.internal.outlier": [[48, 1, 1, "", "transform_distances_to_scores"]], "cleanlab.internal.token_classification_utils": [[49, 1, 1, "", "color_sentence"], [49, 1, 1, "", "filter_sentence"], [49, 1, 1, "", "get_sentence"], [49, 1, 1, "", "mapping"], [49, 1, 1, "", "merge_probs"], [49, 1, 1, "", "process_token"]], "cleanlab.internal.util": [[50, 1, 1, "", "append_extra_datapoint"], [50, 1, 1, "", "clip_noise_rates"], [50, 1, 1, "", "clip_values"], [50, 1, 1, "", "compress_int_array"], [50, 1, 1, "", "confusion_matrix"], [50, 1, 1, "", "csr_vstack"], [50, 1, 1, "", "estimate_pu_f1"], [50, 1, 1, "", "extract_indices_tf"], [50, 1, 1, "", "force_two_dimensions"], [50, 1, 1, "", "format_labels"], [50, 1, 1, "", "get_missing_classes"], [50, 1, 1, "", "get_num_classes"], [50, 1, 1, "", "get_unique_classes"], [50, 1, 1, "", "is_tensorflow_dataset"], [50, 1, 1, "", "is_torch_dataset"], [50, 1, 1, "", "num_unique_classes"], [50, 1, 1, "", "print_inverse_noise_matrix"], [50, 1, 1, "", "print_joint_matrix"], [50, 1, 1, "", "print_noise_matrix"], [50, 1, 1, "", "print_square_matrix"], [50, 1, 1, "", "remove_noise_from_class"], [50, 1, 1, "", "round_preserving_row_totals"], [50, 1, 1, "", "round_preserving_sum"], [50, 1, 1, "", "smart_display_dataframe"], [50, 1, 1, "", "subset_X_y"], [50, 1, 1, "", "subset_data"], [50, 1, 1, "", "subset_labels"], [50, 1, 1, "", "train_val_split"], [50, 1, 1, "", "unshuffle_tensorflow_dataset"], [50, 1, 1, "", "value_counts"], [50, 1, 1, "", "value_counts_fill_missing_classes"]], "cleanlab.internal.validation": [[51, 1, 1, "", "assert_indexing_works"], [51, 1, 1, "", "assert_nonempty_input"], [51, 1, 1, "", "assert_valid_class_labels"], [51, 1, 1, "", "assert_valid_inputs"], [51, 1, 1, "", "labels_to_array"], [51, 1, 1, "", "labels_to_list_multilabel"]], "cleanlab.models": [[54, 0, 0, "-", "keras"]], "cleanlab.models.keras": [[54, 2, 1, "", "KerasWrapperModel"], [54, 2, 1, "", "KerasWrapperSequential"]], "cleanlab.models.keras.KerasWrapperModel": [[54, 3, 1, "", "fit"], [54, 3, 1, "", "get_params"], [54, 3, 1, "", "predict"], [54, 3, 1, "", "predict_proba"], [54, 3, 1, "", "set_params"], [54, 3, 1, "", "summary"]], "cleanlab.models.keras.KerasWrapperSequential": [[54, 3, 1, "", "fit"], [54, 3, 1, "", "get_params"], [54, 3, 1, "", "predict"], [54, 3, 1, "", "predict_proba"], [54, 3, 1, "", "set_params"], [54, 3, 1, "", "summary"]], "cleanlab.multiannotator": [[55, 1, 1, "", "convert_long_to_wide_dataset"], [55, 1, 1, "", "get_active_learning_scores"], [55, 1, 1, "", "get_active_learning_scores_ensemble"], [55, 1, 1, "", "get_label_quality_multiannotator"], [55, 1, 1, "", "get_label_quality_multiannotator_ensemble"], [55, 1, 1, "", "get_majority_vote_label"]], "cleanlab.multilabel_classification": [[56, 0, 0, "-", "dataset"], [57, 0, 0, "-", "filter"], [59, 0, 0, "-", "rank"]], "cleanlab.multilabel_classification.dataset": [[56, 1, 1, "", "common_multilabel_issues"], [56, 1, 1, "", "multilabel_health_summary"], [56, 1, 1, "", "overall_multilabel_health_score"], [56, 1, 1, "", "rank_classes_by_multilabel_quality"]], "cleanlab.multilabel_classification.filter": [[57, 1, 1, "", "find_label_issues"], [57, 1, 1, "", "find_multilabel_issues_per_class"]], "cleanlab.multilabel_classification.rank": [[59, 1, 1, "", "get_label_quality_scores"], [59, 1, 1, "", "get_label_quality_scores_per_class"]], "cleanlab.object_detection": [[60, 0, 0, "-", "filter"], [62, 0, 0, "-", "rank"], [63, 0, 0, "-", "summary"]], "cleanlab.object_detection.filter": [[60, 1, 1, "", "find_label_issues"]], "cleanlab.object_detection.rank": [[62, 1, 1, "", "compute_badloc_box_scores"], [62, 1, 1, "", "compute_overlooked_box_scores"], [62, 1, 1, "", "compute_swap_box_scores"], [62, 1, 1, "", "get_label_quality_scores"], [62, 1, 1, "", "issues_from_scores"], [62, 1, 1, "", "pool_box_scores_per_image"]], "cleanlab.object_detection.summary": [[63, 1, 1, "", "bounding_box_size_distribution"], [63, 1, 1, "", "calculate_per_class_metrics"], [63, 1, 1, "", "class_label_distribution"], [63, 1, 1, "", "get_average_per_class_confusion_matrix"], [63, 1, 1, "", "get_sorted_bbox_count_idxs"], [63, 1, 1, "", "object_counts_per_image"], [63, 1, 1, "", "plot_class_distribution"], [63, 1, 1, "", "plot_class_size_distributions"], [63, 1, 1, "", "visualize"]], "cleanlab.outlier": [[64, 2, 1, "", "OutOfDistribution"]], "cleanlab.outlier.OutOfDistribution": [[64, 3, 1, "", "fit"], [64, 3, 1, "", "fit_score"], [64, 3, 1, "", "score"]], "cleanlab.rank": [[65, 1, 1, "", "find_top_issues"], [65, 1, 1, "", "get_confidence_weighted_entropy_for_each_label"], [65, 1, 1, "", "get_label_quality_ensemble_scores"], [65, 1, 1, "", "get_label_quality_scores"], [65, 1, 1, "", "get_normalized_margin_for_each_label"], [65, 1, 1, "", "get_self_confidence_for_each_label"], [65, 1, 1, "", "order_label_issues"]], "cleanlab.regression": [[67, 0, 0, "-", "learn"], [68, 0, 0, "-", "rank"]], "cleanlab.regression.learn": [[67, 2, 1, "", "CleanLearning"]], "cleanlab.regression.learn.CleanLearning": [[67, 3, 1, "", "__init_subclass__"], [67, 3, 1, "", "find_label_issues"], [67, 3, 1, "", "fit"], [67, 3, 1, "", "get_aleatoric_uncertainty"], [67, 3, 1, "", "get_epistemic_uncertainty"], [67, 3, 1, "", "get_label_issues"], [67, 3, 1, "", "get_metadata_routing"], [67, 3, 1, "", "get_params"], [67, 3, 1, "", "predict"], [67, 3, 1, "", "save_space"], [67, 3, 1, "", "score"], [67, 3, 1, "", "set_fit_request"], [67, 3, 1, "", "set_params"], [67, 3, 1, "", "set_score_request"]], "cleanlab.regression.rank": [[68, 1, 1, "", "get_label_quality_scores"]], "cleanlab.segmentation": [[69, 0, 0, "-", "filter"], [71, 0, 0, "-", "rank"], [72, 0, 0, "-", "summary"]], "cleanlab.segmentation.filter": [[69, 1, 1, "", "find_label_issues"]], "cleanlab.segmentation.rank": [[71, 1, 1, "", "get_label_quality_scores"], [71, 1, 1, "", "issues_from_scores"]], "cleanlab.segmentation.summary": [[72, 1, 1, "", "common_label_issues"], [72, 1, 1, "", "display_issues"], [72, 1, 1, "", "filter_by_class"]], "cleanlab.token_classification": [[73, 0, 0, "-", "filter"], [75, 0, 0, "-", "rank"], [76, 0, 0, "-", "summary"]], "cleanlab.token_classification.filter": [[73, 1, 1, "", "find_label_issues"]], "cleanlab.token_classification.rank": [[75, 1, 1, "", "get_label_quality_scores"], [75, 1, 1, "", "issues_from_scores"]], "cleanlab.token_classification.summary": [[76, 1, 1, "", "common_label_issues"], [76, 1, 1, "", "display_issues"], [76, 1, 1, "", "filter_by_token"]]}, "objtypes": {"0": "py:module", "1": "py:function", "2": "py:class", "3": "py:method", "4": "py:property", "5": "py:exception", "6": "py:attribute", "7": "py:data"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "function", "Python function"], "2": ["py", "class", "Python class"], "3": ["py", "method", "Python method"], "4": ["py", "property", "Python property"], "5": ["py", "exception", "Python exception"], "6": ["py", "attribute", "Python attribute"], "7": ["py", "data", "Python data"]}, "titleterms": {"benchmark": 0, "noise_gener": 1, "classif": [2, 79, 83, 84, 86, 87, 88, 91, 97, 98, 99], "count": [3, 88], "datalab": [4, 5, 7, 8, 9, 80, 81, 82, 83, 84, 88, 91], "creat": [5, 80, 81, 88, 90], "your": [5, 77, 80, 81, 84, 86, 88], "own": 5, "issu": [5, 7, 8, 19, 28, 77, 79, 80, 81, 83, 84, 85, 86, 87, 88, 91, 92, 96, 97, 99], "manag": [5, 19], "prerequisit": 5, "implement": 5, "issuemanag": [5, 80], "basic": 5, "check": 5, "intermedi": 5, "advanc": [5, 80], "us": [5, 79, 81, 83, 84, 86, 87, 88, 90, 91, 92, 93, 95, 96, 97, 98, 99], "gener": 6, "cluster": [6, 86], "id": 6, "guid": [7, 9], "type": [7, 8, 88], "custom": [7, 80], "can": [8, 81, 85, 86, 88, 90], "detect": [8, 81, 83, 84, 86, 88, 92, 93], "estim": [8, 88, 90, 91], "each": 8, "label": [8, 21, 23, 28, 77, 79, 81, 83, 84, 86, 87, 88, 90, 91, 92, 95, 96, 97, 98, 99], "outlier": [8, 26, 48, 64, 83, 84, 87, 91, 93], "Near": [8, 81, 83, 84, 87], "duplic": [8, 17, 81, 83, 84, 86, 87, 91], "non": [8, 84], "iid": [8, 84], "class": [8, 78, 88, 96], "imbal": [8, 18], "imag": [8, 87, 93], "specif": [8, 19, 96], "underperform": [8, 86], "group": [8, 86], "null": [8, 25], "data": [8, 10, 77, 79, 80, 81, 83, 84, 85, 86, 88, 90, 91, 92, 93, 95, 96, 97, 99], "valuat": 8, "option": 8, "paramet": [8, 88], "get": [9, 80, 81, 90, 91, 92, 96, 99], "start": [9, 85], "api": 9, "refer": 9, "data_issu": 11, "factori": 12, "intern": [13, 42], "issue_find": 14, "data_valu": 16, "issue_manag": [19, 20], "regist": 19, "ml": [19, 86, 88], "task": [19, 32], "multilabel": 22, "noniid": 24, "regress": [27, 66, 67, 68, 86, 95], "prioriti": 28, "order": 28, "find": [28, 77, 79, 81, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 95, 96, 97, 98, 99], "underperforming_group": 29, "model_output": 30, "report": [31, 87], "dataset": [34, 56, 77, 81, 84, 85, 86, 87, 88, 91, 92, 93, 95, 96, 98, 99], "cifar_cnn": 35, "coteach": 36, "experiment": 37, "label_issues_batch": 38, "mnist_pytorch": 39, "span_classif": 40, "filter": [41, 57, 60, 69, 73, 88], "label_quality_util": 43, "latent_algebra": 44, "multiannotator_util": 45, "multilabel_scor": 46, "multilabel_util": 47, "token_classification_util": 49, "util": 50, "valid": [51, 87, 94], "fasttext": 52, "model": [53, 77, 79, 83, 84, 86, 87, 88, 90, 91, 92, 93, 95, 97, 98], "kera": 54, "multiannot": [55, 90], "multilabel_classif": 58, "rank": [59, 62, 65, 68, 71, 75, 88], "object_detect": 61, "summari": [63, 72, 76], "learn": [67, 81, 86, 88, 97], "segment": [70, 96], "token_classif": [74, 99], "cleanlab": [77, 79, 83, 84, 86, 87, 88, 90, 91, 92, 93, 95, 96, 97, 98, 99], "open": [77, 86], "sourc": [77, 86], "document": 77, "quickstart": 77, "1": [77, 78, 79, 80, 81, 83, 84, 87, 88, 90, 91, 92, 93, 95, 96, 97, 98, 99], "instal": [77, 79, 80, 81, 83, 84, 85, 87, 88, 90, 91, 92, 93, 95, 96, 97, 98, 99], "2": [77, 78, 79, 80, 81, 83, 84, 87, 88, 90, 91, 92, 93, 95, 96, 97, 98, 99], "common": [77, 78, 99], "3": [77, 79, 80, 81, 83, 84, 87, 88, 90, 91, 92, 93, 95, 96, 97, 98, 99], "handl": [77, 86], "error": [77, 86, 87, 88, 90, 91, 92, 95, 96, 98, 99], "train": [77, 79, 86, 93, 95, 97, 98], "robust": [77, 88, 95, 97, 98], "noisi": [77, 88, 95, 97, 98], "4": [77, 79, 80, 81, 83, 84, 87, 88, 90, 92, 93, 95, 97, 98], "curat": [77, 85], "fix": [77, 86], "level": [77, 85, 88, 99], "5": [77, 79, 81, 83, 87, 88, 90, 95, 97], "improv": [77, 90], "via": [77, 88, 90], "mani": [77, 88], "other": [77, 90, 92, 95], "techniqu": 77, "contribut": 77, "easi": [77, 83, 84, 87], "mode": [77, 83, 84, 87], "how": [78, 86, 88, 90, 91, 99], "migrat": 78, "version": 78, "0": 78, "from": [78, 80, 81, 88, 95, 97, 98], "pre": [78, 79, 86, 93], "function": [78, 80], "name": 78, "chang": 78, "modul": [78, 88], "new": 78, "remov": 78, "argument": [78, 80], "variabl": 78, "audio": 79, "speechbrain": 79, "depend": [79, 80, 81, 83, 84, 85, 87, 88, 90, 91, 92, 93, 95, 96, 97, 98, 99], "import": [79, 80, 81, 85, 87, 88, 90], "them": [79, 85, 88], "load": [79, 80, 81, 83, 84, 95, 97, 98], "featur": [79, 87, 93], "fit": 79, "linear": 79, "comput": [79, 83, 84, 86, 87, 90, 94, 97], "out": [79, 80, 81, 83, 84, 87, 90, 94, 97], "sampl": [79, 80, 81, 83, 84, 87, 90, 94, 97], "predict": [79, 80, 81, 83, 84, 87, 90, 91, 92, 94, 97], "probabl": [79, 80, 81, 83, 84, 87, 90, 94, 97], "workflow": [80, 88], "audit": [80, 81], "requir": [80, 81, 83, 84, 87, 90, 91, 92, 93, 95, 96, 97, 98, 99], "classifi": [80, 81], "instanti": 80, "object": [80, 92], "increment": 80, "search": 80, "specifi": [80, 86], "nondefault": 80, "save": 80, "ad": 80, "A": 81, "unifi": 81, "all": [81, 88], "kind": [81, 92], "skip": [81, 85, 88, 90], "detail": [81, 85, 88, 90], "more": [81, 88, 95, 97, 98], "about": 81, "addit": 81, "inform": [81, 87], "tutori": [82, 85, 89], "tabular": [83, 97], "numer": 83, "categor": 83, "column": 83, "process": [83, 93, 95, 97], "select": [83, 97], "construct": 83, "k": [83, 87, 94], "nearest": 83, "neighbour": 83, "graph": 83, "text": [84, 98, 99], "format": [84, 86, 91, 92, 98], "defin": [84, 87, 95, 98], "drift": [84, 91], "fetch": [85, 87], "evalu": 85, "health": [85, 88], "8": [85, 88], "popular": 85, "faq": 86, "what": [86, 88, 94], "do": [86, 88], "i": [86, 88, 94], "infer": 86, "correct": 86, "exampl": [86, 87, 88, 93], "ha": 86, "flag": 86, "should": 86, "v": 86, "test": [86, 88, 93], "big": 86, "limit": 86, "memori": 86, "why": 86, "isn": 86, "t": 86, "cleanlearn": [86, 88], "work": [86, 88, 90, 99], "me": 86, "differ": [86, 92], "clean": [86, 88], "final": 86, "hyperparamet": 86, "tune": 86, "onli": 86, "one": [86, 88, 91, 96], "doe": [86, 90, 99], "take": 86, "so": 86, "long": 86, "slice": 86, "when": [86, 88], "identifi": [86, 92], "run": 86, "licens": 86, "under": 86, "an": 86, "answer": 86, "question": 86, "pytorch": [87, 93], "normal": 87, "fashion": 87, "mnist": 87, "prepar": 87, "fold": [87, 94], "cross": [87, 94], "embed": [87, 93], "7": [87, 88], "view": 87, "most": [87, 99], "like": 87, "sever": 87, "set": [87, 88], "dark": 87, "top": [87, 96], "low": 87, "The": 88, "centric": 88, "ai": 88, "machin": 88, "find_label_issu": 88, "line": 88, "code": 88, "visual": [88, 92, 93, 96], "twenti": 88, "lowest": 88, "qualiti": [88, 90, 91, 92, 96, 99], "see": 88, "now": 88, "let": 88, "": 88, "happen": 88, "we": 88, "merg": 88, "seafoam": 88, "green": 88, "yellow": 88, "too": 88, "you": 88, "re": 88, "6": 88, "One": 88, "score": [88, 90, 91, 92, 96, 99], "rule": 88, "overal": [88, 96], "accur": 88, "thi": 88, "directli": 88, "fulli": 88, "character": 88, "nois": 88, "matrix": [88, 91], "joint": 88, "prior": 88, "true": 88, "distribut": 88, "flip": 88, "rate": 88, "ani": 88, "again": 88, "support": 88, "lot": 88, "method": 88, "filter_bi": 88, "automat": 88, "everi": 88, "uniqu": 88, "num_label_issu": 88, "threshold": 88, "found": 88, "Not": 88, "sure": 88, "ensembl": 88, "multipl": [88, 90], "predictor": 88, "consensu": 90, "annot": 90, "initi": 90, "major": 90, "vote": 90, "better": 90, "statist": 90, "compar": 90, "inspect": 90, "potenti": [90, 95, 98], "retrain": 90, "further": 90, "multi": 91, "beyond": 91, "mislabel": [91, 96, 99], "given": 91, "hot": 91, "binari": 91, "without": 91, "applic": 91, "real": 91, "download": [92, 96, 99], "objectlab": 92, "exploratori": 92, "analysi": 92, "timm": 93, "cifar10": 93, "some": 93, "pred_prob": [93, 96, 99], "wai": 95, "semant": 96, "which": 96, "ar": 96, "commonli": 96, "focus": 96, "scikit": 97, "token": 99, "word": 99, "sentenc": 99, "contain": 99, "particular": 99}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "nbsphinx": 4, "sphinx.ext.viewcode": 1, "sphinx.ext.todo": 2, "sphinx": 58}, "alltitles": {"benchmarking": [[0, "module-cleanlab.benchmarking"]], "noise_generation": [[1, "module-cleanlab.benchmarking.noise_generation"]], "classification": [[2, "module-cleanlab.classification"]], "count": [[3, "module-cleanlab.count"]], "datalab": [[4, "module-cleanlab.datalab.datalab"], [9, "module-cleanlab.datalab"]], "Creating Your Own Issues Manager": [[5, "creating-your-own-issues-manager"]], "Prerequisites": [[5, "prerequisites"]], "Implementing IssueManagers": [[5, "implementing-issuemanagers"]], "Basic Issue Check": [[5, "basic-issue-check"]], "Intermediate Issue Check": [[5, "intermediate-issue-check"]], "Advanced Issue Check": [[5, "advanced-issue-check"]], "Use with Datalab": [[5, "use-with-datalab"]], "Generating Cluster IDs": [[6, "generating-cluster-ids"]], "Datalab guides": [[7, "datalab-guides"]], "Types of issues": [[7, "types-of-issues"]], "Customizing issue types": [[7, "customizing-issue-types"]], "Datalab Issue Types": [[8, "datalab-issue-types"]], "Types of issues Datalab can detect": [[8, "types-of-issues-datalab-can-detect"]], "Estimates for Each Issue Type": [[8, "estimates-for-each-issue-type"]], "Label Issue": [[8, "label-issue"]], "Outlier Issue": [[8, "outlier-issue"]], "(Near) Duplicate Issue": [[8, "near-duplicate-issue"]], "Non-IID Issue": [[8, "non-iid-issue"]], "Class Imbalance Issue": [[8, "class-imbalance-issue"]], "Image-specific Issues": [[8, "image-specific-issues"]], "Underperforming Group Issue": [[8, "underperforming-group-issue"]], "Null Issue": [[8, "null-issue"]], "Data Valuation Issue": [[8, "data-valuation-issue"]], "Optional Issue Parameters": [[8, "optional-issue-parameters"]], "Label Issue Parameters": [[8, "label-issue-parameters"]], "Outlier Issue Parameters": [[8, "outlier-issue-parameters"]], "Duplicate Issue Parameters": [[8, "duplicate-issue-parameters"]], "Non-IID Issue Parameters": [[8, "non-iid-issue-parameters"]], "Imbalance Issue Parameters": [[8, "imbalance-issue-parameters"]], "Underperforming Group Issue Parameters": [[8, "underperforming-group-issue-parameters"]], "Null Issue Parameters": [[8, "null-issue-parameters"]], "Data Valuation Issue Parameters": [[8, "data-valuation-issue-parameters"]], "Image Issue Parameters": [[8, "image-issue-parameters"]], "Getting Started": [[9, "getting-started"]], "Guides": [[9, "guides"]], "API Reference": [[9, "api-reference"]], "data": [[10, "module-cleanlab.datalab.internal.data"]], "data_issues": [[11, "module-cleanlab.datalab.internal.data_issues"]], "factory": [[12, "module-cleanlab.datalab.internal.issue_manager_factory"]], "internal": [[13, "internal"], [42, "internal"]], "issue_finder": [[14, "issue-finder"]], "data_valuation": [[16, "data-valuation"]], "duplicate": [[17, "module-cleanlab.datalab.internal.issue_manager.duplicate"]], "imbalance": [[18, "module-cleanlab.datalab.internal.issue_manager.imbalance"]], "issue_manager": [[19, "issue-manager"], [20, "module-cleanlab.datalab.internal.issue_manager.issue_manager"]], "Registered issue managers": [[19, "registered-issue-managers"]], "ML task-specific issue managers": [[19, "ml-task-specific-issue-managers"]], "label": [[21, "module-cleanlab.datalab.internal.issue_manager.label"], [23, "module-cleanlab.datalab.internal.issue_manager.multilabel.label"], [28, "module-cleanlab.datalab.internal.issue_manager.regression.label"]], "multilabel": [[22, "multilabel"]], "noniid": [[24, "module-cleanlab.datalab.internal.issue_manager.noniid"]], "null": [[25, "null"]], "outlier": [[26, "module-cleanlab.datalab.internal.issue_manager.outlier"], [48, "module-cleanlab.internal.outlier"], [64, "module-cleanlab.outlier"]], "regression": [[27, "regression"], [66, "regression"]], "Priority Order for finding issues:": [[28, null]], "underperforming_group": [[29, "underperforming-group"]], "model_outputs": [[30, "module-cleanlab.datalab.internal.model_outputs"]], "report": [[31, "report"]], "task": [[32, "task"]], "dataset": [[34, "module-cleanlab.dataset"], [56, "module-cleanlab.multilabel_classification.dataset"]], "cifar_cnn": [[35, "module-cleanlab.experimental.cifar_cnn"]], "coteaching": [[36, "module-cleanlab.experimental.coteaching"]], "experimental": [[37, "experimental"]], "label_issues_batched": [[38, "module-cleanlab.experimental.label_issues_batched"]], "mnist_pytorch": [[39, "module-cleanlab.experimental.mnist_pytorch"]], "span_classification": [[40, "module-cleanlab.experimental.span_classification"]], "filter": [[41, "module-cleanlab.filter"], [57, "module-cleanlab.multilabel_classification.filter"], [60, "filter"], [69, "filter"], [73, "module-cleanlab.token_classification.filter"]], "label_quality_utils": [[43, "module-cleanlab.internal.label_quality_utils"]], "latent_algebra": [[44, "module-cleanlab.internal.latent_algebra"]], "multiannotator_utils": [[45, "module-cleanlab.internal.multiannotator_utils"]], "multilabel_scorer": [[46, "module-cleanlab.internal.multilabel_scorer"]], "multilabel_utils": [[47, "module-cleanlab.internal.multilabel_utils"]], "token_classification_utils": [[49, "module-cleanlab.internal.token_classification_utils"]], "util": [[50, "module-cleanlab.internal.util"]], "validation": [[51, "module-cleanlab.internal.validation"]], "fasttext": [[52, "fasttext"]], "models": [[53, "models"]], "keras": [[54, "module-cleanlab.models.keras"]], "multiannotator": [[55, "module-cleanlab.multiannotator"]], "multilabel_classification": [[58, "multilabel-classification"]], "rank": [[59, "module-cleanlab.multilabel_classification.rank"], [62, "module-cleanlab.object_detection.rank"], [65, "module-cleanlab.rank"], [71, "module-cleanlab.segmentation.rank"], [75, "module-cleanlab.token_classification.rank"]], "object_detection": [[61, "object-detection"]], "summary": [[63, "summary"], [72, "module-cleanlab.segmentation.summary"], [76, "module-cleanlab.token_classification.summary"]], "regression.learn": [[67, "module-cleanlab.regression.learn"]], "regression.rank": [[68, "module-cleanlab.regression.rank"]], "segmentation": [[70, "segmentation"]], "token_classification": [[74, "token-classification"]], "cleanlab open-source documentation": [[77, "cleanlab-open-source-documentation"]], "Quickstart": [[77, "quickstart"]], "1. Install cleanlab": [[77, "install-cleanlab"]], "2. Find common issues in your data": [[77, "find-common-issues-in-your-data"]], "3. Handle label errors and train robust models with noisy labels": [[77, "handle-label-errors-and-train-robust-models-with-noisy-labels"]], "4. Dataset curation: fix dataset-level issues": [[77, "dataset-curation-fix-dataset-level-issues"]], "5. Improve your data via many other techniques": [[77, "improve-your-data-via-many-other-techniques"]], "Contributing": [[77, "contributing"]], "Easy Mode": [[77, "easy-mode"], [83, "Easy-Mode"], [84, "Easy-Mode"], [87, "Easy-Mode"]], "How to migrate to versions >= 2.0.0 from pre 1.0.1": [[78, "how-to-migrate-to-versions-2-0-0-from-pre-1-0-1"]], "Function and class name changes": [[78, "function-and-class-name-changes"]], "Module name changes": [[78, "module-name-changes"]], "New modules": [[78, "new-modules"]], "Removed modules": [[78, "removed-modules"]], "Common argument and variable name changes": [[78, "common-argument-and-variable-name-changes"]], "Audio Classification with SpeechBrain and Cleanlab": [[79, "Audio-Classification-with-SpeechBrain-and-Cleanlab"]], "1. Install dependencies and import them": [[79, "1.-Install-dependencies-and-import-them"]], "2. Load the data": [[79, "2.-Load-the-data"]], "3. Use pre-trained SpeechBrain model to featurize audio": [[79, "3.-Use-pre-trained-SpeechBrain-model-to-featurize-audio"]], "4. Fit linear model and compute out-of-sample predicted probabilities": [[79, "4.-Fit-linear-model-and-compute-out-of-sample-predicted-probabilities"]], "5. Use cleanlab to find label issues": [[79, "5.-Use-cleanlab-to-find-label-issues"], [83, "5.-Use-cleanlab-to-find-label-issues"]], "Datalab: Advanced workflows to audit your data": [[80, "Datalab:-Advanced-workflows-to-audit-your-data"]], "Install and import required dependencies": [[80, "Install-and-import-required-dependencies"]], "Create and load the data": [[80, "Create-and-load-the-data"]], "Get out-of-sample predicted probabilities from a classifier": [[80, "Get-out-of-sample-predicted-probabilities-from-a-classifier"]], "Instantiate Datalab object": [[80, "Instantiate-Datalab-object"]], "Functionality 1: Incremental issue search": [[80, "Functionality-1:-Incremental-issue-search"]], "Functionality 2: Specifying nondefault arguments": [[80, "Functionality-2:-Specifying-nondefault-arguments"]], "Functionality 3: Save and load Datalab objects": [[80, "Functionality-3:-Save-and-load-Datalab-objects"]], "Functionality 4: Adding a custom IssueManager": [[80, "Functionality-4:-Adding-a-custom-IssueManager"]], "Datalab: A unified audit to detect all kinds of issues in data and labels": [[81, "Datalab:-A-unified-audit-to-detect-all-kinds-of-issues-in-data-and-labels"]], "1. Install and import required dependencies": [[81, "1.-Install-and-import-required-dependencies"], [87, "1.-Install-and-import-required-dependencies"], [90, "1.-Install-and-import-required-dependencies"]], "2. Create and load the data (can skip these details)": [[81, "2.-Create-and-load-the-data-(can-skip-these-details)"]], "3. Get out-of-sample predicted probabilities from a classifier": [[81, "3.-Get-out-of-sample-predicted-probabilities-from-a-classifier"]], "4. Use Datalab to find issues in the dataset": [[81, "4.-Use-Datalab-to-find-issues-in-the-dataset"]], "5. Learn more about the issues in your dataset": [[81, "5.-Learn-more-about-the-issues-in-your-dataset"]], "Get additional information": [[81, "Get-additional-information"]], "Near duplicate issues": [[81, "Near-duplicate-issues"], [87, "Near-duplicate-issues"]], "Datalab Tutorials": [[82, "datalab-tutorials"]], "Detecting Issues in Tabular Data\u00a0(Numeric/Categorical columns) with Datalab": [[83, "Detecting-Issues-in-Tabular-Data\u00a0(Numeric/Categorical-columns)-with-Datalab"]], "1. Install required dependencies": [[83, "1.-Install-required-dependencies"], [84, "1.-Install-required-dependencies"], [95, "1.-Install-required-dependencies"], [97, "1.-Install-required-dependencies"], [98, "1.-Install-required-dependencies"]], "2. Load and process the data": [[83, "2.-Load-and-process-the-data"], [95, "2.-Load-and-process-the-data"], [97, "2.-Load-and-process-the-data"]], "3. Select a classification model and compute out-of-sample predicted probabilities": [[83, "3.-Select-a-classification-model-and-compute-out-of-sample-predicted-probabilities"], [97, "3.-Select-a-classification-model-and-compute-out-of-sample-predicted-probabilities"]], "4. Construct K nearest neighbours graph": [[83, "4.-Construct-K-nearest-neighbours-graph"]], "Label issues": [[83, "Label-issues"], [84, "Label-issues"], [87, "Label-issues"]], "Outlier issues": [[83, "Outlier-issues"], [84, "Outlier-issues"], [87, "Outlier-issues"]], "Near-duplicate issues": [[83, "Near-duplicate-issues"], [84, "Near-duplicate-issues"]], "Detecting Issues in a Text Dataset with Datalab": [[84, "Detecting-Issues-in-a-Text-Dataset-with-Datalab"]], "2. Load and format the text dataset": [[84, "2.-Load-and-format-the-text-dataset"], [98, "2.-Load-and-format-the-text-dataset"]], "3. Define a classification model and compute out-of-sample predicted probabilities": [[84, "3.-Define-a-classification-model-and-compute-out-of-sample-predicted-probabilities"]], "4. Use cleanlab to find issues in your dataset": [[84, "4.-Use-cleanlab-to-find-issues-in-your-dataset"]], "Non-IID issues (data drift)": [[84, "Non-IID-issues-(data-drift)"]], "Find Dataset-level Issues for Dataset Curation": [[85, "Find-Dataset-level-Issues-for-Dataset-Curation"]], "Install dependencies and import them": [[85, "Install-dependencies-and-import-them"], [88, "Install-dependencies-and-import-them"]], "Fetch the data (can skip these details)": [[85, "Fetch-the-data-(can-skip-these-details)"]], "Start of tutorial: Evaluate the health of 8 popular datasets": [[85, "Start-of-tutorial:-Evaluate-the-health-of-8-popular-datasets"]], "FAQ": [[86, "FAQ"]], "What data can cleanlab detect issues in?": [[86, "What-data-can-cleanlab-detect-issues-in?"]], "How do I format classification labels for cleanlab?": [[86, "How-do-I-format-classification-labels-for-cleanlab?"]], "How do I infer the correct labels for examples cleanlab has flagged?": [[86, "How-do-I-infer-the-correct-labels-for-examples-cleanlab-has-flagged?"]], "How should I handle label errors in train vs. test data?": [[86, "How-should-I-handle-label-errors-in-train-vs.-test-data?"]], "How can I find label issues in big datasets with limited memory?": [[86, "How-can-I-find-label-issues-in-big-datasets-with-limited-memory?"]], "Why isn\u2019t CleanLearning working for me?": [[86, "Why-isn\u2019t-CleanLearning-working-for-me?"]], "How can I use different models for data cleaning vs. final training in CleanLearning?": [[86, "How-can-I-use-different-models-for-data-cleaning-vs.-final-training-in-CleanLearning?"]], "How do I hyperparameter tune only the final model trained (and not the one finding label issues) in CleanLearning?": [[86, "How-do-I-hyperparameter-tune-only-the-final-model-trained-(and-not-the-one-finding-label-issues)-in-CleanLearning?"]], "Why does regression.learn.CleanLearning take so long?": [[86, "Why-does-regression.learn.CleanLearning-take-so-long?"]], "How do I specify pre-computed data slices/clusters when detecting the Underperforming Group Issue?": [[86, "How-do-I-specify-pre-computed-data-slices/clusters-when-detecting-the-Underperforming-Group-Issue?"]], "How to handle near-duplicate data identified by cleanlab?": [[86, "How-to-handle-near-duplicate-data-identified-by-cleanlab?"]], "What ML models should I run cleanlab with? How do I fix the issues cleanlab has identified?": [[86, "What-ML-models-should-I-run-cleanlab-with?-How-do-I-fix-the-issues-cleanlab-has-identified?"]], "What license is cleanlab open-sourced under?": [[86, "What-license-is-cleanlab-open-sourced-under?"]], "Can\u2019t find an answer to your question?": [[86, "Can't-find-an-answer-to-your-question?"]], "Image Classification with PyTorch and Cleanlab": [[87, "Image-Classification-with-PyTorch-and-Cleanlab"]], "2. Fetch and normalize the Fashion-MNIST dataset": [[87, "2.-Fetch-and-normalize-the-Fashion-MNIST-dataset"]], "3. Define a classification model": [[87, "3.-Define-a-classification-model"]], "4. Prepare the dataset for K-fold cross-validation": [[87, "4.-Prepare-the-dataset-for-K-fold-cross-validation"]], "5. Compute out-of-sample predicted probabilities and feature embeddings": [[87, "5.-Compute-out-of-sample-predicted-probabilities-and-feature-embeddings"]], "7. Use cleanlab to find issues": [[87, "7.-Use-cleanlab-to-find-issues"]], "View report": [[87, "View-report"]], "View most likely examples with label errors": [[87, "View-most-likely-examples-with-label-errors"]], "View most severe outliers": [[87, "View-most-severe-outliers"]], "View sets of near duplicate images": [[87, "View-sets-of-near-duplicate-images"]], "Dark images": [[87, "Dark-images"]], "View top examples of dark images": [[87, "View-top-examples-of-dark-images"]], "Low information images": [[87, "Low-information-images"]], "The Workflows of Data-centric AI for Classification with Noisy Labels": [[88, "The-Workflows-of-Data-centric-AI-for-Classification-with-Noisy-Labels"]], "Create the data (can skip these details)": [[88, "Create-the-data-(can-skip-these-details)"]], "Workflow 1: Use Datalab to detect many types of issues": [[88, "Workflow-1:-Use-Datalab-to-detect-many-types-of-issues"]], "Workflow 2: Use CleanLearning for more robust Machine Learning": [[88, "Workflow-2:-Use-CleanLearning-for-more-robust-Machine-Learning"]], "Clean Learning = Machine Learning with cleaned data": [[88, "Clean-Learning-=-Machine-Learning-with-cleaned-data"]], "Workflow 3: Use CleanLearning to find_label_issues in one line of code": [[88, "Workflow-3:-Use-CleanLearning-to-find_label_issues-in-one-line-of-code"]], "Visualize the twenty examples with lowest label quality to see if Cleanlab works.": [[88, "Visualize-the-twenty-examples-with-lowest-label-quality-to-see-if-Cleanlab-works."]], "Workflow 4: Use cleanlab to find dataset-level and class-level issues": [[88, "Workflow-4:-Use-cleanlab-to-find-dataset-level-and-class-level-issues"]], "Now, let\u2019s see what happens if we merge classes \u201cseafoam green\u201d and \u201cyellow\u201d": [[88, "Now,-let's-see-what-happens-if-we-merge-classes-%22seafoam-green%22-and-%22yellow%22"]], "Workflow 5: Clean your test set too if you\u2019re doing ML with noisy labels!": [[88, "Workflow-5:-Clean-your-test-set-too-if-you're-doing-ML-with-noisy-labels!"]], "Workflow 6: One score to rule them all \u2013 use cleanlab\u2019s overall dataset health score": [[88, "Workflow-6:-One-score-to-rule-them-all----use-cleanlab's-overall-dataset-health-score"]], "How accurate is this dataset health score?": [[88, "How-accurate-is-this-dataset-health-score?"]], "Workflow(s) 7: Use count, rank, filter modules directly": [[88, "Workflow(s)-7:-Use-count,-rank,-filter-modules-directly"]], "Workflow 7.1 (count): Fully characterize label noise (noise matrix, joint, prior of true labels, \u2026)": [[88, "Workflow-7.1-(count):-Fully-characterize-label-noise-(noise-matrix,-joint,-prior-of-true-labels,-...)"]], "Use cleanlab to estimate and visualize the joint distribution of label noise and noise matrix of label flipping rates:": [[88, "Use-cleanlab-to-estimate-and-visualize-the-joint-distribution-of-label-noise-and-noise-matrix-of-label-flipping-rates:"]], "Workflow 7.2 (filter): Find label issues for any dataset and any model in one line of code": [[88, "Workflow-7.2-(filter):-Find-label-issues-for-any-dataset-and-any-model-in-one-line-of-code"]], "Again, we can visualize the twenty examples with lowest label quality to see if Cleanlab works.": [[88, "Again,-we-can-visualize-the-twenty-examples-with-lowest-label-quality-to-see-if-Cleanlab-works."]], "Workflow 7.2 supports lots of methods to find_label_issues() via the filter_by parameter.": [[88, "Workflow-7.2-supports-lots-of-methods-to-find_label_issues()-via-the-filter_by-parameter."]], "Workflow 7.3 (rank): Automatically rank every example by a unique label quality score. Find errors using cleanlab.count.num_label_issues as a threshold.": [[88, "Workflow-7.3-(rank):-Automatically-rank-every-example-by-a-unique-label-quality-score.-Find-errors-using-cleanlab.count.num_label_issues-as-a-threshold."]], "Again, we can visualize the label issues found to see if Cleanlab works.": [[88, "Again,-we-can-visualize-the-label-issues-found-to-see-if-Cleanlab-works."]], "Not sure when to use Workflow 7.2 or 7.3 to find label issues?": [[88, "Not-sure-when-to-use-Workflow-7.2-or-7.3-to-find-label-issues?"]], "Workflow 8: Ensembling label quality scores from multiple predictors": [[88, "Workflow-8:-Ensembling-label-quality-scores-from-multiple-predictors"]], "Tutorials": [[89, "tutorials"]], "Estimate Consensus and Annotator Quality for Data Labeled by Multiple Annotators": [[90, "Estimate-Consensus-and-Annotator-Quality-for-Data-Labeled-by-Multiple-Annotators"]], "2. Create the data (can skip these details)": [[90, "2.-Create-the-data-(can-skip-these-details)"]], "3. Get initial consensus labels via majority vote and compute out-of-sample predicted probabilities": [[90, "3.-Get-initial-consensus-labels-via-majority-vote-and-compute-out-of-sample-predicted-probabilities"]], "4. Use cleanlab to get better consensus labels and other statistics": [[90, "4.-Use-cleanlab-to-get-better-consensus-labels-and-other-statistics"]], "Comparing improved consensus labels": [[90, "Comparing-improved-consensus-labels"]], "Inspecting consensus quality scores to find potential consensus label errors": [[90, "Inspecting-consensus-quality-scores-to-find-potential-consensus-label-errors"]], "5. Retrain model using improved consensus labels": [[90, "5.-Retrain-model-using-improved-consensus-labels"]], "Further improvements": [[90, "Further-improvements"]], "How does cleanlab.multiannotator work?": [[90, "How-does-cleanlab.multiannotator-work?"]], "Find Label Errors in Multi-Label Classification Datasets": [[91, "Find-Label-Errors-in-Multi-Label-Classification-Datasets"]], "1. Install required dependencies and get dataset": [[91, "1.-Install-required-dependencies-and-get-dataset"]], "2. Format data, labels, and model predictions": [[91, "2.-Format-data,-labels,-and-model-predictions"], [92, "2.-Format-data,-labels,-and-model-predictions"]], "3. Use cleanlab to find label issues": [[91, "3.-Use-cleanlab-to-find-label-issues"], [92, "3.-Use-cleanlab-to-find-label-issues"], [96, "3.-Use-cleanlab-to-find-label-issues"], [99, "3.-Use-cleanlab-to-find-label-issues"]], "Label quality scores": [[91, "Label-quality-scores"]], "Data issues beyond mislabeling (outliers, duplicates, drift, \u2026)": [[91, "Data-issues-beyond-mislabeling-(outliers,-duplicates,-drift,-...)"]], "How to format labels given as a one-hot (multi-hot) binary matrix?": [[91, "How-to-format-labels-given-as-a-one-hot-(multi-hot)-binary-matrix?"]], "Estimate label issues without Datalab": [[91, "Estimate-label-issues-without-Datalab"]], "Application to Real Data": [[91, "Application-to-Real-Data"]], "Finding Label Errors in Object Detection Datasets": [[92, "Finding-Label-Errors-in-Object-Detection-Datasets"]], "1. Install required dependencies and download data": [[92, "1.-Install-required-dependencies-and-download-data"], [96, "1.-Install-required-dependencies-and-download-data"], [99, "1.-Install-required-dependencies-and-download-data"]], "Get label quality scores": [[92, "Get-label-quality-scores"], [96, "Get-label-quality-scores"]], "4. Use ObjectLab to visualize label issues": [[92, "4.-Use-ObjectLab-to-visualize-label-issues"]], "Different kinds of label issues identified by ObjectLab": [[92, "Different-kinds-of-label-issues-identified-by-ObjectLab"]], "Other uses of visualize": [[92, "Other-uses-of-visualize"]], "Exploratory data analysis": [[92, "Exploratory-data-analysis"]], "Detect Outliers with Cleanlab and PyTorch Image Models (timm)": [[93, "Detect-Outliers-with-Cleanlab-and-PyTorch-Image-Models-(timm)"]], "1. Install the required dependencies": [[93, "1.-Install-the-required-dependencies"]], "2. Pre-process the Cifar10 dataset": [[93, "2.-Pre-process-the-Cifar10-dataset"]], "Visualize some of the training and test examples": [[93, "Visualize-some-of-the-training-and-test-examples"]], "3. Use cleanlab and feature embeddings to find outliers in the data": [[93, "3.-Use-cleanlab-and-feature-embeddings-to-find-outliers-in-the-data"]], "4. Use cleanlab and pred_probs to find outliers in the data": [[93, "4.-Use-cleanlab-and-pred_probs-to-find-outliers-in-the-data"]], "Computing Out-of-Sample Predicted Probabilities with Cross-Validation": [[94, "computing-out-of-sample-predicted-probabilities-with-cross-validation"]], "Out-of-sample predicted probabilities?": [[94, "out-of-sample-predicted-probabilities"]], "What is K-fold cross-validation?": [[94, "what-is-k-fold-cross-validation"]], "Find Noisy Labels in Regression Datasets": [[95, "Find-Noisy-Labels-in-Regression-Datasets"]], "3. Define a regression model and use cleanlab to find potential label errors": [[95, "3.-Define-a-regression-model-and-use-cleanlab-to-find-potential-label-errors"]], "4. Train a more robust model from noisy labels": [[95, "4.-Train-a-more-robust-model-from-noisy-labels"], [98, "4.-Train-a-more-robust-model-from-noisy-labels"]], "5. Other ways to find noisy labels in regression datasets": [[95, "5.-Other-ways-to-find-noisy-labels-in-regression-datasets"]], "Find Label Errors in Semantic Segmentation Datasets": [[96, "Find-Label-Errors-in-Semantic-Segmentation-Datasets"]], "2. Get data, labels, and pred_probs": [[96, "2.-Get-data,-labels,-and-pred_probs"], [99, "2.-Get-data,-labels,-and-pred_probs"]], "Visualize top label issues": [[96, "Visualize-top-label-issues"]], "Classes which are commonly mislabeled overall": [[96, "Classes-which-are-commonly-mislabeled-overall"]], "Focusing on one specific class": [[96, "Focusing-on-one-specific-class"]], "Classification with Tabular Data using Scikit-Learn and Cleanlab": [[97, "Classification-with-Tabular-Data-using-Scikit-Learn-and-Cleanlab"]], "4. Use cleanlab to find label issues": [[97, "4.-Use-cleanlab-to-find-label-issues"]], "5. Train a more robust model from noisy labels": [[97, "5.-Train-a-more-robust-model-from-noisy-labels"]], "Text Classification with Noisy Labels": [[98, "Text-Classification-with-Noisy-Labels"]], "3. Define a classification model and use cleanlab to find potential label errors": [[98, "3.-Define-a-classification-model-and-use-cleanlab-to-find-potential-label-errors"]], "Find Label Errors in Token Classification (Text) Datasets": [[99, "Find-Label-Errors-in-Token-Classification-(Text)-Datasets"]], "Most common word-level token mislabels": [[99, "Most-common-word-level-token-mislabels"]], "Find sentences containing a particular mislabeled word": [[99, "Find-sentences-containing-a-particular-mislabeled-word"]], "Sentence label quality score": [[99, "Sentence-label-quality-score"]], "How does cleanlab.token_classification work?": [[99, "How-does-cleanlab.token_classification-work?"]]}, "indexentries": {"cleanlab.benchmarking": [[0, "module-cleanlab.benchmarking"]], "module": [[0, "module-cleanlab.benchmarking"], [1, "module-cleanlab.benchmarking.noise_generation"], [2, "module-cleanlab.classification"], [3, "module-cleanlab.count"], [4, "module-cleanlab.datalab.datalab"], [9, "module-cleanlab.datalab"], [10, "module-cleanlab.datalab.internal.data"], [11, "module-cleanlab.datalab.internal.data_issues"], [12, "module-cleanlab.datalab.internal.issue_manager_factory"], [13, "module-cleanlab.datalab.internal"], [14, "module-cleanlab.datalab.internal.issue_finder"], [16, "module-cleanlab.datalab.internal.issue_manager.data_valuation"], [17, "module-cleanlab.datalab.internal.issue_manager.duplicate"], [18, "module-cleanlab.datalab.internal.issue_manager.imbalance"], [20, "module-cleanlab.datalab.internal.issue_manager.issue_manager"], [21, "module-cleanlab.datalab.internal.issue_manager.label"], [23, "module-cleanlab.datalab.internal.issue_manager.multilabel.label"], [24, "module-cleanlab.datalab.internal.issue_manager.noniid"], [25, "module-cleanlab.datalab.internal.issue_manager.null"], [26, "module-cleanlab.datalab.internal.issue_manager.outlier"], [28, "module-cleanlab.datalab.internal.issue_manager.regression.label"], [29, "module-cleanlab.datalab.internal.issue_manager.underperforming_group"], [30, "module-cleanlab.datalab.internal.model_outputs"], [31, "module-cleanlab.datalab.internal.report"], [32, "module-cleanlab.datalab.internal.task"], [34, "module-cleanlab.dataset"], [35, "module-cleanlab.experimental.cifar_cnn"], [36, "module-cleanlab.experimental.coteaching"], [37, "module-cleanlab.experimental"], [38, "module-cleanlab.experimental.label_issues_batched"], [39, "module-cleanlab.experimental.mnist_pytorch"], [40, "module-cleanlab.experimental.span_classification"], [41, "module-cleanlab.filter"], [42, "module-cleanlab.internal"], [43, "module-cleanlab.internal.label_quality_utils"], [44, "module-cleanlab.internal.latent_algebra"], [45, "module-cleanlab.internal.multiannotator_utils"], [46, "module-cleanlab.internal.multilabel_scorer"], [47, "module-cleanlab.internal.multilabel_utils"], [48, "module-cleanlab.internal.outlier"], [49, "module-cleanlab.internal.token_classification_utils"], [50, "module-cleanlab.internal.util"], [51, "module-cleanlab.internal.validation"], [53, "module-cleanlab.models"], [54, "module-cleanlab.models.keras"], [55, "module-cleanlab.multiannotator"], [56, "module-cleanlab.multilabel_classification.dataset"], [57, "module-cleanlab.multilabel_classification.filter"], [58, "module-cleanlab.multilabel_classification"], [59, "module-cleanlab.multilabel_classification.rank"], [60, "module-cleanlab.object_detection.filter"], [61, "module-cleanlab.object_detection"], [62, "module-cleanlab.object_detection.rank"], [63, "module-cleanlab.object_detection.summary"], [64, "module-cleanlab.outlier"], [65, "module-cleanlab.rank"], [66, "module-cleanlab.regression"], [67, "module-cleanlab.regression.learn"], [68, "module-cleanlab.regression.rank"], [69, "module-cleanlab.segmentation.filter"], [70, "module-cleanlab.segmentation"], [71, "module-cleanlab.segmentation.rank"], [72, "module-cleanlab.segmentation.summary"], [73, "module-cleanlab.token_classification.filter"], [74, "module-cleanlab.token_classification"], [75, "module-cleanlab.token_classification.rank"], [76, "module-cleanlab.token_classification.summary"]], "cleanlab.benchmarking.noise_generation": [[1, "module-cleanlab.benchmarking.noise_generation"]], "generate_n_rand_probabilities_that_sum_to_m() (in module cleanlab.benchmarking.noise_generation)": [[1, "cleanlab.benchmarking.noise_generation.generate_n_rand_probabilities_that_sum_to_m"]], "generate_noise_matrix_from_trace() (in module cleanlab.benchmarking.noise_generation)": [[1, "cleanlab.benchmarking.noise_generation.generate_noise_matrix_from_trace"]], "generate_noisy_labels() (in module cleanlab.benchmarking.noise_generation)": [[1, "cleanlab.benchmarking.noise_generation.generate_noisy_labels"]], "noise_matrix_is_valid() (in module cleanlab.benchmarking.noise_generation)": [[1, "cleanlab.benchmarking.noise_generation.noise_matrix_is_valid"]], "randomly_distribute_n_balls_into_k_bins() (in module cleanlab.benchmarking.noise_generation)": [[1, "cleanlab.benchmarking.noise_generation.randomly_distribute_N_balls_into_K_bins"]], "cleanlearning (class in cleanlab.classification)": [[2, "cleanlab.classification.CleanLearning"]], "__init_subclass__() (cleanlab.classification.cleanlearning class method)": [[2, "cleanlab.classification.CleanLearning.__init_subclass__"]], "cleanlab.classification": [[2, "module-cleanlab.classification"]], "find_label_issues() (cleanlab.classification.cleanlearning method)": [[2, "cleanlab.classification.CleanLearning.find_label_issues"]], "fit() (cleanlab.classification.cleanlearning method)": [[2, "cleanlab.classification.CleanLearning.fit"]], "get_label_issues() (cleanlab.classification.cleanlearning method)": [[2, "cleanlab.classification.CleanLearning.get_label_issues"]], "get_metadata_routing() (cleanlab.classification.cleanlearning method)": [[2, "cleanlab.classification.CleanLearning.get_metadata_routing"]], "get_params() (cleanlab.classification.cleanlearning method)": [[2, "cleanlab.classification.CleanLearning.get_params"]], "predict() (cleanlab.classification.cleanlearning method)": [[2, "cleanlab.classification.CleanLearning.predict"]], "predict_proba() (cleanlab.classification.cleanlearning method)": [[2, "cleanlab.classification.CleanLearning.predict_proba"]], "save_space() (cleanlab.classification.cleanlearning method)": [[2, "cleanlab.classification.CleanLearning.save_space"]], "score() (cleanlab.classification.cleanlearning method)": [[2, "cleanlab.classification.CleanLearning.score"]], "set_fit_request() (cleanlab.classification.cleanlearning method)": [[2, "cleanlab.classification.CleanLearning.set_fit_request"]], "set_params() (cleanlab.classification.cleanlearning method)": [[2, "cleanlab.classification.CleanLearning.set_params"]], "set_score_request() (cleanlab.classification.cleanlearning method)": [[2, "cleanlab.classification.CleanLearning.set_score_request"]], "calibrate_confident_joint() (in module cleanlab.count)": [[3, "cleanlab.count.calibrate_confident_joint"]], "cleanlab.count": [[3, "module-cleanlab.count"]], "compute_confident_joint() (in module cleanlab.count)": [[3, "cleanlab.count.compute_confident_joint"]], "estimate_confident_joint_and_cv_pred_proba() (in module cleanlab.count)": [[3, "cleanlab.count.estimate_confident_joint_and_cv_pred_proba"]], "estimate_cv_predicted_probabilities() (in module cleanlab.count)": [[3, "cleanlab.count.estimate_cv_predicted_probabilities"]], "estimate_joint() (in module cleanlab.count)": [[3, "cleanlab.count.estimate_joint"]], "estimate_latent() (in module cleanlab.count)": [[3, "cleanlab.count.estimate_latent"]], "estimate_noise_matrices() (in module cleanlab.count)": [[3, "cleanlab.count.estimate_noise_matrices"]], "estimate_py_and_noise_matrices_from_probabilities() (in module cleanlab.count)": [[3, "cleanlab.count.estimate_py_and_noise_matrices_from_probabilities"]], "estimate_py_noise_matrices_and_cv_pred_proba() (in module cleanlab.count)": [[3, "cleanlab.count.estimate_py_noise_matrices_and_cv_pred_proba"]], "get_confident_thresholds() (in module cleanlab.count)": [[3, "cleanlab.count.get_confident_thresholds"]], "num_label_issues() (in module cleanlab.count)": [[3, "cleanlab.count.num_label_issues"]], "datalab (class in cleanlab.datalab.datalab)": [[4, "cleanlab.datalab.datalab.Datalab"]], "class_names (cleanlab.datalab.datalab.datalab property)": [[4, "cleanlab.datalab.datalab.Datalab.class_names"]], "cleanlab.datalab.datalab": [[4, "module-cleanlab.datalab.datalab"]], "find_issues() (cleanlab.datalab.datalab.datalab method)": [[4, "cleanlab.datalab.datalab.Datalab.find_issues"]], "get_info() (cleanlab.datalab.datalab.datalab method)": [[4, "cleanlab.datalab.datalab.Datalab.get_info"]], "get_issue_summary() (cleanlab.datalab.datalab.datalab method)": [[4, "cleanlab.datalab.datalab.Datalab.get_issue_summary"]], "get_issues() (cleanlab.datalab.datalab.datalab method)": [[4, "cleanlab.datalab.datalab.Datalab.get_issues"]], "has_labels (cleanlab.datalab.datalab.datalab property)": [[4, "cleanlab.datalab.datalab.Datalab.has_labels"]], "info (cleanlab.datalab.datalab.datalab property)": [[4, "cleanlab.datalab.datalab.Datalab.info"]], "issue_summary (cleanlab.datalab.datalab.datalab property)": [[4, "cleanlab.datalab.datalab.Datalab.issue_summary"]], "issues (cleanlab.datalab.datalab.datalab property)": [[4, "cleanlab.datalab.datalab.Datalab.issues"]], "labels (cleanlab.datalab.datalab.datalab property)": [[4, "cleanlab.datalab.datalab.Datalab.labels"]], "list_default_issue_types() (cleanlab.datalab.datalab.datalab method)": [[4, "cleanlab.datalab.datalab.Datalab.list_default_issue_types"]], "list_possible_issue_types() (cleanlab.datalab.datalab.datalab method)": [[4, "cleanlab.datalab.datalab.Datalab.list_possible_issue_types"]], "load() (cleanlab.datalab.datalab.datalab static method)": [[4, "cleanlab.datalab.datalab.Datalab.load"]], "report() (cleanlab.datalab.datalab.datalab method)": [[4, "cleanlab.datalab.datalab.Datalab.report"]], "save() (cleanlab.datalab.datalab.datalab method)": [[4, "cleanlab.datalab.datalab.Datalab.save"]], "cleanlab.datalab": [[9, "module-cleanlab.datalab"]], "data (class in cleanlab.datalab.internal.data)": [[10, "cleanlab.datalab.internal.data.Data"]], "dataformaterror": [[10, "cleanlab.datalab.internal.data.DataFormatError"]], "datasetdicterror": [[10, "cleanlab.datalab.internal.data.DatasetDictError"]], "datasetloaderror": [[10, "cleanlab.datalab.internal.data.DatasetLoadError"]], "label (class in cleanlab.datalab.internal.data)": [[10, "cleanlab.datalab.internal.data.Label"]], "multiclass (class in cleanlab.datalab.internal.data)": [[10, "cleanlab.datalab.internal.data.MultiClass"]], "multilabel (class in cleanlab.datalab.internal.data)": [[10, "cleanlab.datalab.internal.data.MultiLabel"]], "add_note() (cleanlab.datalab.internal.data.dataformaterror method)": [[10, "cleanlab.datalab.internal.data.DataFormatError.add_note"]], "add_note() (cleanlab.datalab.internal.data.datasetdicterror method)": [[10, "cleanlab.datalab.internal.data.DatasetDictError.add_note"]], "add_note() (cleanlab.datalab.internal.data.datasetloaderror method)": [[10, "cleanlab.datalab.internal.data.DatasetLoadError.add_note"]], "args (cleanlab.datalab.internal.data.dataformaterror attribute)": [[10, "cleanlab.datalab.internal.data.DataFormatError.args"]], "args (cleanlab.datalab.internal.data.datasetdicterror attribute)": [[10, "cleanlab.datalab.internal.data.DatasetDictError.args"]], "args (cleanlab.datalab.internal.data.datasetloaderror attribute)": [[10, "cleanlab.datalab.internal.data.DatasetLoadError.args"]], "class_names (cleanlab.datalab.internal.data.data property)": [[10, "cleanlab.datalab.internal.data.Data.class_names"]], "class_names (cleanlab.datalab.internal.data.label property)": [[10, "cleanlab.datalab.internal.data.Label.class_names"]], "class_names (cleanlab.datalab.internal.data.multiclass property)": [[10, "cleanlab.datalab.internal.data.MultiClass.class_names"]], "class_names (cleanlab.datalab.internal.data.multilabel property)": [[10, "cleanlab.datalab.internal.data.MultiLabel.class_names"]], "cleanlab.datalab.internal.data": [[10, "module-cleanlab.datalab.internal.data"]], "has_labels (cleanlab.datalab.internal.data.data property)": [[10, "cleanlab.datalab.internal.data.Data.has_labels"]], "is_available (cleanlab.datalab.internal.data.label property)": [[10, "cleanlab.datalab.internal.data.Label.is_available"]], "is_available (cleanlab.datalab.internal.data.multiclass property)": [[10, "cleanlab.datalab.internal.data.MultiClass.is_available"]], "is_available (cleanlab.datalab.internal.data.multilabel property)": [[10, "cleanlab.datalab.internal.data.MultiLabel.is_available"]], "with_traceback() (cleanlab.datalab.internal.data.dataformaterror method)": [[10, "cleanlab.datalab.internal.data.DataFormatError.with_traceback"]], "with_traceback() (cleanlab.datalab.internal.data.datasetdicterror method)": [[10, "cleanlab.datalab.internal.data.DatasetDictError.with_traceback"]], "with_traceback() (cleanlab.datalab.internal.data.datasetloaderror method)": [[10, "cleanlab.datalab.internal.data.DatasetLoadError.with_traceback"]], "dataissues (class in cleanlab.datalab.internal.data_issues)": [[11, "cleanlab.datalab.internal.data_issues.DataIssues"]], "cleanlab.datalab.internal.data_issues": [[11, "module-cleanlab.datalab.internal.data_issues"]], "collect_issues_from_imagelab() (cleanlab.datalab.internal.data_issues.dataissues method)": [[11, "cleanlab.datalab.internal.data_issues.DataIssues.collect_issues_from_imagelab"]], "collect_issues_from_issue_manager() (cleanlab.datalab.internal.data_issues.dataissues method)": [[11, "cleanlab.datalab.internal.data_issues.DataIssues.collect_issues_from_issue_manager"]], "collect_statistics() (cleanlab.datalab.internal.data_issues.dataissues method)": [[11, "cleanlab.datalab.internal.data_issues.DataIssues.collect_statistics"]], "get_data_statistics() (in module cleanlab.datalab.internal.data_issues)": [[11, "cleanlab.datalab.internal.data_issues.get_data_statistics"]], "get_info() (cleanlab.datalab.internal.data_issues.dataissues method)": [[11, "cleanlab.datalab.internal.data_issues.DataIssues.get_info"]], "get_issue_summary() (cleanlab.datalab.internal.data_issues.dataissues method)": [[11, "cleanlab.datalab.internal.data_issues.DataIssues.get_issue_summary"]], "get_issues() (cleanlab.datalab.internal.data_issues.dataissues method)": [[11, "cleanlab.datalab.internal.data_issues.DataIssues.get_issues"]], "info (cleanlab.datalab.internal.data_issues.dataissues attribute)": [[11, "cleanlab.datalab.internal.data_issues.DataIssues.info"]], "issue_summary (cleanlab.datalab.internal.data_issues.dataissues attribute)": [[11, "cleanlab.datalab.internal.data_issues.DataIssues.issue_summary"]], "issues (cleanlab.datalab.internal.data_issues.dataissues attribute)": [[11, "cleanlab.datalab.internal.data_issues.DataIssues.issues"]], "set_health_score() (cleanlab.datalab.internal.data_issues.dataissues method)": [[11, "cleanlab.datalab.internal.data_issues.DataIssues.set_health_score"]], "statistics (cleanlab.datalab.internal.data_issues.dataissues property)": [[11, "cleanlab.datalab.internal.data_issues.DataIssues.statistics"]], "registry (in module cleanlab.datalab.internal.issue_manager_factory)": [[12, "cleanlab.datalab.internal.issue_manager_factory.REGISTRY"]], "cleanlab.datalab.internal.issue_manager_factory": [[12, "module-cleanlab.datalab.internal.issue_manager_factory"]], "list_default_issue_types() (in module cleanlab.datalab.internal.issue_manager_factory)": [[12, "cleanlab.datalab.internal.issue_manager_factory.list_default_issue_types"]], "list_possible_issue_types() (in module cleanlab.datalab.internal.issue_manager_factory)": [[12, "cleanlab.datalab.internal.issue_manager_factory.list_possible_issue_types"]], "register() (in module cleanlab.datalab.internal.issue_manager_factory)": [[12, "cleanlab.datalab.internal.issue_manager_factory.register"]], "cleanlab.datalab.internal": [[13, "module-cleanlab.datalab.internal"]], "issuefinder (class in cleanlab.datalab.internal.issue_finder)": [[14, "cleanlab.datalab.internal.issue_finder.IssueFinder"]], "cleanlab.datalab.internal.issue_finder": [[14, "module-cleanlab.datalab.internal.issue_finder"]], "find_issues() (cleanlab.datalab.internal.issue_finder.issuefinder method)": [[14, "cleanlab.datalab.internal.issue_finder.IssueFinder.find_issues"]], "get_available_issue_types() (cleanlab.datalab.internal.issue_finder.issuefinder method)": [[14, "cleanlab.datalab.internal.issue_finder.IssueFinder.get_available_issue_types"]], "default_threshold (cleanlab.datalab.internal.issue_manager.data_valuation.datavaluationissuemanager attribute)": [[16, "cleanlab.datalab.internal.issue_manager.data_valuation.DataValuationIssueManager.DEFAULT_THRESHOLD"]], "datavaluationissuemanager (class in cleanlab.datalab.internal.issue_manager.data_valuation)": [[16, "cleanlab.datalab.internal.issue_manager.data_valuation.DataValuationIssueManager"]], "cleanlab.datalab.internal.issue_manager.data_valuation": [[16, "module-cleanlab.datalab.internal.issue_manager.data_valuation"]], "collect_info() (cleanlab.datalab.internal.issue_manager.data_valuation.datavaluationissuemanager method)": [[16, "cleanlab.datalab.internal.issue_manager.data_valuation.DataValuationIssueManager.collect_info"]], "description (cleanlab.datalab.internal.issue_manager.data_valuation.datavaluationissuemanager attribute)": [[16, "cleanlab.datalab.internal.issue_manager.data_valuation.DataValuationIssueManager.description"]], "find_issues() (cleanlab.datalab.internal.issue_manager.data_valuation.datavaluationissuemanager method)": [[16, "cleanlab.datalab.internal.issue_manager.data_valuation.DataValuationIssueManager.find_issues"]], "info (cleanlab.datalab.internal.issue_manager.data_valuation.datavaluationissuemanager attribute)": [[16, "cleanlab.datalab.internal.issue_manager.data_valuation.DataValuationIssueManager.info"]], "issue_name (cleanlab.datalab.internal.issue_manager.data_valuation.datavaluationissuemanager attribute)": [[16, "cleanlab.datalab.internal.issue_manager.data_valuation.DataValuationIssueManager.issue_name"]], "issue_score_key (cleanlab.datalab.internal.issue_manager.data_valuation.datavaluationissuemanager attribute)": [[16, "cleanlab.datalab.internal.issue_manager.data_valuation.DataValuationIssueManager.issue_score_key"]], "issues (cleanlab.datalab.internal.issue_manager.data_valuation.datavaluationissuemanager attribute)": [[16, "cleanlab.datalab.internal.issue_manager.data_valuation.DataValuationIssueManager.issues"]], "make_summary() (cleanlab.datalab.internal.issue_manager.data_valuation.datavaluationissuemanager class method)": [[16, "cleanlab.datalab.internal.issue_manager.data_valuation.DataValuationIssueManager.make_summary"]], "report() (cleanlab.datalab.internal.issue_manager.data_valuation.datavaluationissuemanager class method)": [[16, "cleanlab.datalab.internal.issue_manager.data_valuation.DataValuationIssueManager.report"]], "summary (cleanlab.datalab.internal.issue_manager.data_valuation.datavaluationissuemanager attribute)": [[16, "cleanlab.datalab.internal.issue_manager.data_valuation.DataValuationIssueManager.summary"]], "verbosity_levels (cleanlab.datalab.internal.issue_manager.data_valuation.datavaluationissuemanager attribute)": [[16, "cleanlab.datalab.internal.issue_manager.data_valuation.DataValuationIssueManager.verbosity_levels"]], "nearduplicateissuemanager (class in cleanlab.datalab.internal.issue_manager.duplicate)": [[17, "cleanlab.datalab.internal.issue_manager.duplicate.NearDuplicateIssueManager"]], "cleanlab.datalab.internal.issue_manager.duplicate": [[17, "module-cleanlab.datalab.internal.issue_manager.duplicate"]], "collect_info() (cleanlab.datalab.internal.issue_manager.duplicate.nearduplicateissuemanager method)": [[17, "cleanlab.datalab.internal.issue_manager.duplicate.NearDuplicateIssueManager.collect_info"]], "description (cleanlab.datalab.internal.issue_manager.duplicate.nearduplicateissuemanager attribute)": [[17, "cleanlab.datalab.internal.issue_manager.duplicate.NearDuplicateIssueManager.description"]], "find_issues() (cleanlab.datalab.internal.issue_manager.duplicate.nearduplicateissuemanager method)": [[17, "cleanlab.datalab.internal.issue_manager.duplicate.NearDuplicateIssueManager.find_issues"]], "info (cleanlab.datalab.internal.issue_manager.duplicate.nearduplicateissuemanager attribute)": [[17, "cleanlab.datalab.internal.issue_manager.duplicate.NearDuplicateIssueManager.info"]], "issue_name (cleanlab.datalab.internal.issue_manager.duplicate.nearduplicateissuemanager attribute)": [[17, "cleanlab.datalab.internal.issue_manager.duplicate.NearDuplicateIssueManager.issue_name"]], "issue_score_key (cleanlab.datalab.internal.issue_manager.duplicate.nearduplicateissuemanager attribute)": [[17, "cleanlab.datalab.internal.issue_manager.duplicate.NearDuplicateIssueManager.issue_score_key"]], "issues (cleanlab.datalab.internal.issue_manager.duplicate.nearduplicateissuemanager attribute)": [[17, "cleanlab.datalab.internal.issue_manager.duplicate.NearDuplicateIssueManager.issues"]], "make_summary() (cleanlab.datalab.internal.issue_manager.duplicate.nearduplicateissuemanager class method)": [[17, "cleanlab.datalab.internal.issue_manager.duplicate.NearDuplicateIssueManager.make_summary"]], "near_duplicate_sets (cleanlab.datalab.internal.issue_manager.duplicate.nearduplicateissuemanager attribute)": [[17, "cleanlab.datalab.internal.issue_manager.duplicate.NearDuplicateIssueManager.near_duplicate_sets"]], "report() (cleanlab.datalab.internal.issue_manager.duplicate.nearduplicateissuemanager class method)": [[17, "cleanlab.datalab.internal.issue_manager.duplicate.NearDuplicateIssueManager.report"]], "summary (cleanlab.datalab.internal.issue_manager.duplicate.nearduplicateissuemanager attribute)": [[17, "cleanlab.datalab.internal.issue_manager.duplicate.NearDuplicateIssueManager.summary"]], "verbosity_levels (cleanlab.datalab.internal.issue_manager.duplicate.nearduplicateissuemanager attribute)": [[17, "cleanlab.datalab.internal.issue_manager.duplicate.NearDuplicateIssueManager.verbosity_levels"]], "classimbalanceissuemanager (class in cleanlab.datalab.internal.issue_manager.imbalance)": [[18, "cleanlab.datalab.internal.issue_manager.imbalance.ClassImbalanceIssueManager"]], "cleanlab.datalab.internal.issue_manager.imbalance": [[18, "module-cleanlab.datalab.internal.issue_manager.imbalance"]], "collect_info() (cleanlab.datalab.internal.issue_manager.imbalance.classimbalanceissuemanager method)": [[18, "cleanlab.datalab.internal.issue_manager.imbalance.ClassImbalanceIssueManager.collect_info"]], "description (cleanlab.datalab.internal.issue_manager.imbalance.classimbalanceissuemanager attribute)": [[18, "cleanlab.datalab.internal.issue_manager.imbalance.ClassImbalanceIssueManager.description"]], "find_issues() (cleanlab.datalab.internal.issue_manager.imbalance.classimbalanceissuemanager method)": [[18, "cleanlab.datalab.internal.issue_manager.imbalance.ClassImbalanceIssueManager.find_issues"]], "info (cleanlab.datalab.internal.issue_manager.imbalance.classimbalanceissuemanager attribute)": [[18, "cleanlab.datalab.internal.issue_manager.imbalance.ClassImbalanceIssueManager.info"]], "issue_name (cleanlab.datalab.internal.issue_manager.imbalance.classimbalanceissuemanager attribute)": [[18, "cleanlab.datalab.internal.issue_manager.imbalance.ClassImbalanceIssueManager.issue_name"]], "issue_score_key (cleanlab.datalab.internal.issue_manager.imbalance.classimbalanceissuemanager attribute)": [[18, "cleanlab.datalab.internal.issue_manager.imbalance.ClassImbalanceIssueManager.issue_score_key"]], "issues (cleanlab.datalab.internal.issue_manager.imbalance.classimbalanceissuemanager attribute)": [[18, "cleanlab.datalab.internal.issue_manager.imbalance.ClassImbalanceIssueManager.issues"]], "make_summary() (cleanlab.datalab.internal.issue_manager.imbalance.classimbalanceissuemanager class method)": [[18, "cleanlab.datalab.internal.issue_manager.imbalance.ClassImbalanceIssueManager.make_summary"]], "report() (cleanlab.datalab.internal.issue_manager.imbalance.classimbalanceissuemanager class method)": [[18, "cleanlab.datalab.internal.issue_manager.imbalance.ClassImbalanceIssueManager.report"]], "summary (cleanlab.datalab.internal.issue_manager.imbalance.classimbalanceissuemanager attribute)": [[18, "cleanlab.datalab.internal.issue_manager.imbalance.ClassImbalanceIssueManager.summary"]], "verbosity_levels (cleanlab.datalab.internal.issue_manager.imbalance.classimbalanceissuemanager attribute)": [[18, "cleanlab.datalab.internal.issue_manager.imbalance.ClassImbalanceIssueManager.verbosity_levels"]], "issuemanager (class in cleanlab.datalab.internal.issue_manager.issue_manager)": [[20, "cleanlab.datalab.internal.issue_manager.issue_manager.IssueManager"]], "cleanlab.datalab.internal.issue_manager.issue_manager": [[20, "module-cleanlab.datalab.internal.issue_manager.issue_manager"]], "collect_info() (cleanlab.datalab.internal.issue_manager.issue_manager.issuemanager method)": [[20, "cleanlab.datalab.internal.issue_manager.issue_manager.IssueManager.collect_info"]], "description (cleanlab.datalab.internal.issue_manager.issue_manager.issuemanager attribute)": [[20, "cleanlab.datalab.internal.issue_manager.issue_manager.IssueManager.description"]], "find_issues() (cleanlab.datalab.internal.issue_manager.issue_manager.issuemanager method)": [[20, "cleanlab.datalab.internal.issue_manager.issue_manager.IssueManager.find_issues"]], "info (cleanlab.datalab.internal.issue_manager.issue_manager.issuemanager attribute)": [[20, "cleanlab.datalab.internal.issue_manager.issue_manager.IssueManager.info"]], "issue_name (cleanlab.datalab.internal.issue_manager.issue_manager.issuemanager attribute)": [[20, "cleanlab.datalab.internal.issue_manager.issue_manager.IssueManager.issue_name"]], "issue_score_key (cleanlab.datalab.internal.issue_manager.issue_manager.issuemanager attribute)": [[20, "cleanlab.datalab.internal.issue_manager.issue_manager.IssueManager.issue_score_key"]], "issues (cleanlab.datalab.internal.issue_manager.issue_manager.issuemanager attribute)": [[20, "cleanlab.datalab.internal.issue_manager.issue_manager.IssueManager.issues"]], "make_summary() (cleanlab.datalab.internal.issue_manager.issue_manager.issuemanager class method)": [[20, "cleanlab.datalab.internal.issue_manager.issue_manager.IssueManager.make_summary"]], "report() (cleanlab.datalab.internal.issue_manager.issue_manager.issuemanager class method)": [[20, "cleanlab.datalab.internal.issue_manager.issue_manager.IssueManager.report"]], "summary (cleanlab.datalab.internal.issue_manager.issue_manager.issuemanager attribute)": [[20, "cleanlab.datalab.internal.issue_manager.issue_manager.IssueManager.summary"]], "verbosity_levels (cleanlab.datalab.internal.issue_manager.issue_manager.issuemanager attribute)": [[20, "cleanlab.datalab.internal.issue_manager.issue_manager.IssueManager.verbosity_levels"]], "labelissuemanager (class in cleanlab.datalab.internal.issue_manager.label)": [[21, "cleanlab.datalab.internal.issue_manager.label.LabelIssueManager"]], "cleanlab.datalab.internal.issue_manager.label": [[21, "module-cleanlab.datalab.internal.issue_manager.label"]], "collect_info() (cleanlab.datalab.internal.issue_manager.label.labelissuemanager method)": [[21, "cleanlab.datalab.internal.issue_manager.label.LabelIssueManager.collect_info"]], "description (cleanlab.datalab.internal.issue_manager.label.labelissuemanager attribute)": [[21, "cleanlab.datalab.internal.issue_manager.label.LabelIssueManager.description"]], "find_issues() (cleanlab.datalab.internal.issue_manager.label.labelissuemanager method)": [[21, "cleanlab.datalab.internal.issue_manager.label.LabelIssueManager.find_issues"]], "get_health_summary() (cleanlab.datalab.internal.issue_manager.label.labelissuemanager method)": [[21, "cleanlab.datalab.internal.issue_manager.label.LabelIssueManager.get_health_summary"]], "health_summary_parameters (cleanlab.datalab.internal.issue_manager.label.labelissuemanager attribute)": [[21, "cleanlab.datalab.internal.issue_manager.label.LabelIssueManager.health_summary_parameters"]], "info (cleanlab.datalab.internal.issue_manager.label.labelissuemanager attribute)": [[21, "cleanlab.datalab.internal.issue_manager.label.LabelIssueManager.info"]], "issue_name (cleanlab.datalab.internal.issue_manager.label.labelissuemanager attribute)": [[21, "cleanlab.datalab.internal.issue_manager.label.LabelIssueManager.issue_name"]], "issue_score_key (cleanlab.datalab.internal.issue_manager.label.labelissuemanager attribute)": [[21, "cleanlab.datalab.internal.issue_manager.label.LabelIssueManager.issue_score_key"]], "issues (cleanlab.datalab.internal.issue_manager.label.labelissuemanager attribute)": [[21, "cleanlab.datalab.internal.issue_manager.label.LabelIssueManager.issues"]], "make_summary() (cleanlab.datalab.internal.issue_manager.label.labelissuemanager class method)": [[21, "cleanlab.datalab.internal.issue_manager.label.LabelIssueManager.make_summary"]], "report() (cleanlab.datalab.internal.issue_manager.label.labelissuemanager class method)": [[21, "cleanlab.datalab.internal.issue_manager.label.LabelIssueManager.report"]], "summary (cleanlab.datalab.internal.issue_manager.label.labelissuemanager attribute)": [[21, "cleanlab.datalab.internal.issue_manager.label.LabelIssueManager.summary"]], "verbosity_levels (cleanlab.datalab.internal.issue_manager.label.labelissuemanager attribute)": [[21, "cleanlab.datalab.internal.issue_manager.label.LabelIssueManager.verbosity_levels"]], "multilabelissuemanager (class in cleanlab.datalab.internal.issue_manager.multilabel.label)": [[23, "cleanlab.datalab.internal.issue_manager.multilabel.label.MultilabelIssueManager"]], "cleanlab.datalab.internal.issue_manager.multilabel.label": [[23, "module-cleanlab.datalab.internal.issue_manager.multilabel.label"]], "collect_info() (cleanlab.datalab.internal.issue_manager.multilabel.label.multilabelissuemanager method)": [[23, "cleanlab.datalab.internal.issue_manager.multilabel.label.MultilabelIssueManager.collect_info"]], "description (cleanlab.datalab.internal.issue_manager.multilabel.label.multilabelissuemanager attribute)": [[23, "cleanlab.datalab.internal.issue_manager.multilabel.label.MultilabelIssueManager.description"]], "find_issues() (cleanlab.datalab.internal.issue_manager.multilabel.label.multilabelissuemanager method)": [[23, "cleanlab.datalab.internal.issue_manager.multilabel.label.MultilabelIssueManager.find_issues"]], "info (cleanlab.datalab.internal.issue_manager.multilabel.label.multilabelissuemanager attribute)": [[23, "cleanlab.datalab.internal.issue_manager.multilabel.label.MultilabelIssueManager.info"]], "issue_name (cleanlab.datalab.internal.issue_manager.multilabel.label.multilabelissuemanager attribute)": [[23, "cleanlab.datalab.internal.issue_manager.multilabel.label.MultilabelIssueManager.issue_name"]], "issue_score_key (cleanlab.datalab.internal.issue_manager.multilabel.label.multilabelissuemanager attribute)": [[23, "cleanlab.datalab.internal.issue_manager.multilabel.label.MultilabelIssueManager.issue_score_key"]], "issues (cleanlab.datalab.internal.issue_manager.multilabel.label.multilabelissuemanager attribute)": [[23, "cleanlab.datalab.internal.issue_manager.multilabel.label.MultilabelIssueManager.issues"]], "make_summary() (cleanlab.datalab.internal.issue_manager.multilabel.label.multilabelissuemanager class method)": [[23, "cleanlab.datalab.internal.issue_manager.multilabel.label.MultilabelIssueManager.make_summary"]], "report() (cleanlab.datalab.internal.issue_manager.multilabel.label.multilabelissuemanager class method)": [[23, "cleanlab.datalab.internal.issue_manager.multilabel.label.MultilabelIssueManager.report"]], "summary (cleanlab.datalab.internal.issue_manager.multilabel.label.multilabelissuemanager attribute)": [[23, "cleanlab.datalab.internal.issue_manager.multilabel.label.MultilabelIssueManager.summary"]], "verbosity_levels (cleanlab.datalab.internal.issue_manager.multilabel.label.multilabelissuemanager attribute)": [[23, "cleanlab.datalab.internal.issue_manager.multilabel.label.MultilabelIssueManager.verbosity_levels"]], "noniidissuemanager (class in cleanlab.datalab.internal.issue_manager.noniid)": [[24, "cleanlab.datalab.internal.issue_manager.noniid.NonIIDIssueManager"]], "cleanlab.datalab.internal.issue_manager.noniid": [[24, "module-cleanlab.datalab.internal.issue_manager.noniid"]], "collect_info() (cleanlab.datalab.internal.issue_manager.noniid.noniidissuemanager method)": [[24, "cleanlab.datalab.internal.issue_manager.noniid.NonIIDIssueManager.collect_info"]], "description (cleanlab.datalab.internal.issue_manager.noniid.noniidissuemanager attribute)": [[24, "cleanlab.datalab.internal.issue_manager.noniid.NonIIDIssueManager.description"]], "find_issues() (cleanlab.datalab.internal.issue_manager.noniid.noniidissuemanager method)": [[24, "cleanlab.datalab.internal.issue_manager.noniid.NonIIDIssueManager.find_issues"]], "info (cleanlab.datalab.internal.issue_manager.noniid.noniidissuemanager attribute)": [[24, "cleanlab.datalab.internal.issue_manager.noniid.NonIIDIssueManager.info"]], "issue_name (cleanlab.datalab.internal.issue_manager.noniid.noniidissuemanager attribute)": [[24, "cleanlab.datalab.internal.issue_manager.noniid.NonIIDIssueManager.issue_name"]], "issue_score_key (cleanlab.datalab.internal.issue_manager.noniid.noniidissuemanager attribute)": [[24, "cleanlab.datalab.internal.issue_manager.noniid.NonIIDIssueManager.issue_score_key"]], "issues (cleanlab.datalab.internal.issue_manager.noniid.noniidissuemanager attribute)": [[24, "cleanlab.datalab.internal.issue_manager.noniid.NonIIDIssueManager.issues"]], "make_summary() (cleanlab.datalab.internal.issue_manager.noniid.noniidissuemanager class method)": [[24, "cleanlab.datalab.internal.issue_manager.noniid.NonIIDIssueManager.make_summary"]], "report() (cleanlab.datalab.internal.issue_manager.noniid.noniidissuemanager class method)": [[24, "cleanlab.datalab.internal.issue_manager.noniid.NonIIDIssueManager.report"]], "simplified_kolmogorov_smirnov_test() (in module cleanlab.datalab.internal.issue_manager.noniid)": [[24, "cleanlab.datalab.internal.issue_manager.noniid.simplified_kolmogorov_smirnov_test"]], "summary (cleanlab.datalab.internal.issue_manager.noniid.noniidissuemanager attribute)": [[24, "cleanlab.datalab.internal.issue_manager.noniid.NonIIDIssueManager.summary"]], "verbosity_levels (cleanlab.datalab.internal.issue_manager.noniid.noniidissuemanager attribute)": [[24, "cleanlab.datalab.internal.issue_manager.noniid.NonIIDIssueManager.verbosity_levels"]], "nullissuemanager (class in cleanlab.datalab.internal.issue_manager.null)": [[25, "cleanlab.datalab.internal.issue_manager.null.NullIssueManager"]], "cleanlab.datalab.internal.issue_manager.null": [[25, "module-cleanlab.datalab.internal.issue_manager.null"]], "collect_info() (cleanlab.datalab.internal.issue_manager.null.nullissuemanager method)": [[25, "cleanlab.datalab.internal.issue_manager.null.NullIssueManager.collect_info"]], "description (cleanlab.datalab.internal.issue_manager.null.nullissuemanager attribute)": [[25, "cleanlab.datalab.internal.issue_manager.null.NullIssueManager.description"]], "find_issues() (cleanlab.datalab.internal.issue_manager.null.nullissuemanager method)": [[25, "cleanlab.datalab.internal.issue_manager.null.NullIssueManager.find_issues"]], "info (cleanlab.datalab.internal.issue_manager.null.nullissuemanager attribute)": [[25, "cleanlab.datalab.internal.issue_manager.null.NullIssueManager.info"]], "issue_name (cleanlab.datalab.internal.issue_manager.null.nullissuemanager attribute)": [[25, "cleanlab.datalab.internal.issue_manager.null.NullIssueManager.issue_name"]], "issue_score_key (cleanlab.datalab.internal.issue_manager.null.nullissuemanager attribute)": [[25, "cleanlab.datalab.internal.issue_manager.null.NullIssueManager.issue_score_key"]], "issues (cleanlab.datalab.internal.issue_manager.null.nullissuemanager attribute)": [[25, "cleanlab.datalab.internal.issue_manager.null.NullIssueManager.issues"]], "make_summary() (cleanlab.datalab.internal.issue_manager.null.nullissuemanager class method)": [[25, "cleanlab.datalab.internal.issue_manager.null.NullIssueManager.make_summary"]], "report() (cleanlab.datalab.internal.issue_manager.null.nullissuemanager class method)": [[25, "cleanlab.datalab.internal.issue_manager.null.NullIssueManager.report"]], "summary (cleanlab.datalab.internal.issue_manager.null.nullissuemanager attribute)": [[25, "cleanlab.datalab.internal.issue_manager.null.NullIssueManager.summary"]], "verbosity_levels (cleanlab.datalab.internal.issue_manager.null.nullissuemanager attribute)": [[25, "cleanlab.datalab.internal.issue_manager.null.NullIssueManager.verbosity_levels"]], "default_thresholds (cleanlab.datalab.internal.issue_manager.outlier.outlierissuemanager attribute)": [[26, "cleanlab.datalab.internal.issue_manager.outlier.OutlierIssueManager.DEFAULT_THRESHOLDS"]], "outlierissuemanager (class in cleanlab.datalab.internal.issue_manager.outlier)": [[26, "cleanlab.datalab.internal.issue_manager.outlier.OutlierIssueManager"]], "cleanlab.datalab.internal.issue_manager.outlier": [[26, "module-cleanlab.datalab.internal.issue_manager.outlier"]], "collect_info() (cleanlab.datalab.internal.issue_manager.outlier.outlierissuemanager method)": [[26, "cleanlab.datalab.internal.issue_manager.outlier.OutlierIssueManager.collect_info"]], "description (cleanlab.datalab.internal.issue_manager.outlier.outlierissuemanager attribute)": [[26, "cleanlab.datalab.internal.issue_manager.outlier.OutlierIssueManager.description"]], "find_issues() (cleanlab.datalab.internal.issue_manager.outlier.outlierissuemanager method)": [[26, "cleanlab.datalab.internal.issue_manager.outlier.OutlierIssueManager.find_issues"]], "info (cleanlab.datalab.internal.issue_manager.outlier.outlierissuemanager attribute)": [[26, "cleanlab.datalab.internal.issue_manager.outlier.OutlierIssueManager.info"]], "issue_name (cleanlab.datalab.internal.issue_manager.outlier.outlierissuemanager attribute)": [[26, "cleanlab.datalab.internal.issue_manager.outlier.OutlierIssueManager.issue_name"]], "issue_score_key (cleanlab.datalab.internal.issue_manager.outlier.outlierissuemanager attribute)": [[26, "cleanlab.datalab.internal.issue_manager.outlier.OutlierIssueManager.issue_score_key"]], "issues (cleanlab.datalab.internal.issue_manager.outlier.outlierissuemanager attribute)": [[26, "cleanlab.datalab.internal.issue_manager.outlier.OutlierIssueManager.issues"]], "make_summary() (cleanlab.datalab.internal.issue_manager.outlier.outlierissuemanager class method)": [[26, "cleanlab.datalab.internal.issue_manager.outlier.OutlierIssueManager.make_summary"]], "ood (cleanlab.datalab.internal.issue_manager.outlier.outlierissuemanager attribute)": [[26, "cleanlab.datalab.internal.issue_manager.outlier.OutlierIssueManager.ood"]], "report() (cleanlab.datalab.internal.issue_manager.outlier.outlierissuemanager class method)": [[26, "cleanlab.datalab.internal.issue_manager.outlier.OutlierIssueManager.report"]], "summary (cleanlab.datalab.internal.issue_manager.outlier.outlierissuemanager attribute)": [[26, "cleanlab.datalab.internal.issue_manager.outlier.OutlierIssueManager.summary"]], "verbosity_levels (cleanlab.datalab.internal.issue_manager.outlier.outlierissuemanager attribute)": [[26, "cleanlab.datalab.internal.issue_manager.outlier.OutlierIssueManager.verbosity_levels"]], "regressionlabelissuemanager (class in cleanlab.datalab.internal.issue_manager.regression.label)": [[28, "cleanlab.datalab.internal.issue_manager.regression.label.RegressionLabelIssueManager"]], "cleanlab.datalab.internal.issue_manager.regression.label": [[28, "module-cleanlab.datalab.internal.issue_manager.regression.label"]], "collect_info() (cleanlab.datalab.internal.issue_manager.regression.label.regressionlabelissuemanager method)": [[28, "cleanlab.datalab.internal.issue_manager.regression.label.RegressionLabelIssueManager.collect_info"]], "description (cleanlab.datalab.internal.issue_manager.regression.label.regressionlabelissuemanager attribute)": [[28, "cleanlab.datalab.internal.issue_manager.regression.label.RegressionLabelIssueManager.description"]], "find_issues() (cleanlab.datalab.internal.issue_manager.regression.label.regressionlabelissuemanager method)": [[28, "cleanlab.datalab.internal.issue_manager.regression.label.RegressionLabelIssueManager.find_issues"]], "find_issues_with_features() (in module cleanlab.datalab.internal.issue_manager.regression.label)": [[28, "cleanlab.datalab.internal.issue_manager.regression.label.find_issues_with_features"]], "find_issues_with_predictions() (in module cleanlab.datalab.internal.issue_manager.regression.label)": [[28, "cleanlab.datalab.internal.issue_manager.regression.label.find_issues_with_predictions"]], "info (cleanlab.datalab.internal.issue_manager.regression.label.regressionlabelissuemanager attribute)": [[28, "cleanlab.datalab.internal.issue_manager.regression.label.RegressionLabelIssueManager.info"]], "issue_name (cleanlab.datalab.internal.issue_manager.regression.label.regressionlabelissuemanager attribute)": [[28, "cleanlab.datalab.internal.issue_manager.regression.label.RegressionLabelIssueManager.issue_name"]], "issue_score_key (cleanlab.datalab.internal.issue_manager.regression.label.regressionlabelissuemanager attribute)": [[28, "cleanlab.datalab.internal.issue_manager.regression.label.RegressionLabelIssueManager.issue_score_key"]], "issues (cleanlab.datalab.internal.issue_manager.regression.label.regressionlabelissuemanager attribute)": [[28, "cleanlab.datalab.internal.issue_manager.regression.label.RegressionLabelIssueManager.issues"]], "make_summary() (cleanlab.datalab.internal.issue_manager.regression.label.regressionlabelissuemanager class method)": [[28, "cleanlab.datalab.internal.issue_manager.regression.label.RegressionLabelIssueManager.make_summary"]], "report() (cleanlab.datalab.internal.issue_manager.regression.label.regressionlabelissuemanager class method)": [[28, "cleanlab.datalab.internal.issue_manager.regression.label.RegressionLabelIssueManager.report"]], "summary (cleanlab.datalab.internal.issue_manager.regression.label.regressionlabelissuemanager attribute)": [[28, "cleanlab.datalab.internal.issue_manager.regression.label.RegressionLabelIssueManager.summary"]], "verbosity_levels (cleanlab.datalab.internal.issue_manager.regression.label.regressionlabelissuemanager attribute)": [[28, "cleanlab.datalab.internal.issue_manager.regression.label.RegressionLabelIssueManager.verbosity_levels"]], "no_underperforming_cluster_id (cleanlab.datalab.internal.issue_manager.underperforming_group.underperforminggroupissuemanager attribute)": [[29, "cleanlab.datalab.internal.issue_manager.underperforming_group.UnderperformingGroupIssueManager.NO_UNDERPERFORMING_CLUSTER_ID"]], "outlier_cluster_labels (cleanlab.datalab.internal.issue_manager.underperforming_group.underperforminggroupissuemanager attribute)": [[29, "cleanlab.datalab.internal.issue_manager.underperforming_group.UnderperformingGroupIssueManager.OUTLIER_CLUSTER_LABELS"]], "underperforminggroupissuemanager (class in cleanlab.datalab.internal.issue_manager.underperforming_group)": [[29, "cleanlab.datalab.internal.issue_manager.underperforming_group.UnderperformingGroupIssueManager"]], "cleanlab.datalab.internal.issue_manager.underperforming_group": [[29, "module-cleanlab.datalab.internal.issue_manager.underperforming_group"]], "collect_info() (cleanlab.datalab.internal.issue_manager.underperforming_group.underperforminggroupissuemanager method)": [[29, "cleanlab.datalab.internal.issue_manager.underperforming_group.UnderperformingGroupIssueManager.collect_info"]], "description (cleanlab.datalab.internal.issue_manager.underperforming_group.underperforminggroupissuemanager attribute)": [[29, "cleanlab.datalab.internal.issue_manager.underperforming_group.UnderperformingGroupIssueManager.description"]], "filter_cluster_ids() (cleanlab.datalab.internal.issue_manager.underperforming_group.underperforminggroupissuemanager method)": [[29, "cleanlab.datalab.internal.issue_manager.underperforming_group.UnderperformingGroupIssueManager.filter_cluster_ids"]], "find_issues() (cleanlab.datalab.internal.issue_manager.underperforming_group.underperforminggroupissuemanager method)": [[29, "cleanlab.datalab.internal.issue_manager.underperforming_group.UnderperformingGroupIssueManager.find_issues"]], "get_worst_cluster() (cleanlab.datalab.internal.issue_manager.underperforming_group.underperforminggroupissuemanager method)": [[29, "cleanlab.datalab.internal.issue_manager.underperforming_group.UnderperformingGroupIssueManager.get_worst_cluster"]], "info (cleanlab.datalab.internal.issue_manager.underperforming_group.underperforminggroupissuemanager attribute)": [[29, "cleanlab.datalab.internal.issue_manager.underperforming_group.UnderperformingGroupIssueManager.info"]], "issue_name (cleanlab.datalab.internal.issue_manager.underperforming_group.underperforminggroupissuemanager attribute)": [[29, "cleanlab.datalab.internal.issue_manager.underperforming_group.UnderperformingGroupIssueManager.issue_name"]], "issue_score_key (cleanlab.datalab.internal.issue_manager.underperforming_group.underperforminggroupissuemanager attribute)": [[29, "cleanlab.datalab.internal.issue_manager.underperforming_group.UnderperformingGroupIssueManager.issue_score_key"]], "issues (cleanlab.datalab.internal.issue_manager.underperforming_group.underperforminggroupissuemanager attribute)": [[29, "cleanlab.datalab.internal.issue_manager.underperforming_group.UnderperformingGroupIssueManager.issues"]], "make_summary() (cleanlab.datalab.internal.issue_manager.underperforming_group.underperforminggroupissuemanager class method)": [[29, "cleanlab.datalab.internal.issue_manager.underperforming_group.UnderperformingGroupIssueManager.make_summary"]], "perform_clustering() (cleanlab.datalab.internal.issue_manager.underperforming_group.underperforminggroupissuemanager method)": [[29, "cleanlab.datalab.internal.issue_manager.underperforming_group.UnderperformingGroupIssueManager.perform_clustering"]], "report() (cleanlab.datalab.internal.issue_manager.underperforming_group.underperforminggroupissuemanager class method)": [[29, "cleanlab.datalab.internal.issue_manager.underperforming_group.UnderperformingGroupIssueManager.report"]], "set_knn_graph() (cleanlab.datalab.internal.issue_manager.underperforming_group.underperforminggroupissuemanager method)": [[29, "cleanlab.datalab.internal.issue_manager.underperforming_group.UnderperformingGroupIssueManager.set_knn_graph"]], "summary (cleanlab.datalab.internal.issue_manager.underperforming_group.underperforminggroupissuemanager attribute)": [[29, "cleanlab.datalab.internal.issue_manager.underperforming_group.UnderperformingGroupIssueManager.summary"]], "verbosity_levels (cleanlab.datalab.internal.issue_manager.underperforming_group.underperforminggroupissuemanager attribute)": [[29, "cleanlab.datalab.internal.issue_manager.underperforming_group.UnderperformingGroupIssueManager.verbosity_levels"]], "modeloutput (class in cleanlab.datalab.internal.model_outputs)": [[30, "cleanlab.datalab.internal.model_outputs.ModelOutput"]], "multiclasspredprobs (class in cleanlab.datalab.internal.model_outputs)": [[30, "cleanlab.datalab.internal.model_outputs.MultiClassPredProbs"]], "multilabelpredprobs (class in cleanlab.datalab.internal.model_outputs)": [[30, "cleanlab.datalab.internal.model_outputs.MultiLabelPredProbs"]], "regressionpredictions (class in cleanlab.datalab.internal.model_outputs)": [[30, "cleanlab.datalab.internal.model_outputs.RegressionPredictions"]], "argument (cleanlab.datalab.internal.model_outputs.multiclasspredprobs attribute)": [[30, "cleanlab.datalab.internal.model_outputs.MultiClassPredProbs.argument"]], "argument (cleanlab.datalab.internal.model_outputs.multilabelpredprobs attribute)": [[30, "cleanlab.datalab.internal.model_outputs.MultiLabelPredProbs.argument"]], "argument (cleanlab.datalab.internal.model_outputs.regressionpredictions attribute)": [[30, "cleanlab.datalab.internal.model_outputs.RegressionPredictions.argument"]], "cleanlab.datalab.internal.model_outputs": [[30, "module-cleanlab.datalab.internal.model_outputs"]], "collect() (cleanlab.datalab.internal.model_outputs.modeloutput method)": [[30, "cleanlab.datalab.internal.model_outputs.ModelOutput.collect"]], "collect() (cleanlab.datalab.internal.model_outputs.multiclasspredprobs method)": [[30, "cleanlab.datalab.internal.model_outputs.MultiClassPredProbs.collect"]], "collect() (cleanlab.datalab.internal.model_outputs.multilabelpredprobs method)": [[30, "cleanlab.datalab.internal.model_outputs.MultiLabelPredProbs.collect"]], "collect() (cleanlab.datalab.internal.model_outputs.regressionpredictions method)": [[30, "cleanlab.datalab.internal.model_outputs.RegressionPredictions.collect"]], "data (cleanlab.datalab.internal.model_outputs.modeloutput attribute)": [[30, "cleanlab.datalab.internal.model_outputs.ModelOutput.data"]], "data (cleanlab.datalab.internal.model_outputs.multiclasspredprobs attribute)": [[30, "cleanlab.datalab.internal.model_outputs.MultiClassPredProbs.data"]], "data (cleanlab.datalab.internal.model_outputs.multilabelpredprobs attribute)": [[30, "cleanlab.datalab.internal.model_outputs.MultiLabelPredProbs.data"]], "data (cleanlab.datalab.internal.model_outputs.regressionpredictions attribute)": [[30, "cleanlab.datalab.internal.model_outputs.RegressionPredictions.data"]], "validate() (cleanlab.datalab.internal.model_outputs.modeloutput method)": [[30, "cleanlab.datalab.internal.model_outputs.ModelOutput.validate"]], "validate() (cleanlab.datalab.internal.model_outputs.multiclasspredprobs method)": [[30, "cleanlab.datalab.internal.model_outputs.MultiClassPredProbs.validate"]], "validate() (cleanlab.datalab.internal.model_outputs.multilabelpredprobs method)": [[30, "cleanlab.datalab.internal.model_outputs.MultiLabelPredProbs.validate"]], "validate() (cleanlab.datalab.internal.model_outputs.regressionpredictions method)": [[30, "cleanlab.datalab.internal.model_outputs.RegressionPredictions.validate"]], "reporter (class in cleanlab.datalab.internal.report)": [[31, "cleanlab.datalab.internal.report.Reporter"]], "cleanlab.datalab.internal.report": [[31, "module-cleanlab.datalab.internal.report"]], "get_report() (cleanlab.datalab.internal.report.reporter method)": [[31, "cleanlab.datalab.internal.report.Reporter.get_report"]], "report() (cleanlab.datalab.internal.report.reporter method)": [[31, "cleanlab.datalab.internal.report.Reporter.report"]], "classification (cleanlab.datalab.internal.task.task attribute)": [[32, "cleanlab.datalab.internal.task.Task.CLASSIFICATION"]], "multilabel (cleanlab.datalab.internal.task.task attribute)": [[32, "cleanlab.datalab.internal.task.Task.MULTILABEL"]], "regression (cleanlab.datalab.internal.task.task attribute)": [[32, "cleanlab.datalab.internal.task.Task.REGRESSION"]], "task (class in cleanlab.datalab.internal.task)": [[32, "cleanlab.datalab.internal.task.Task"]], "__contains__() (cleanlab.datalab.internal.task.task class method)": [[32, "cleanlab.datalab.internal.task.Task.__contains__"]], "__getitem__() (cleanlab.datalab.internal.task.task class method)": [[32, "cleanlab.datalab.internal.task.Task.__getitem__"]], "__iter__() (cleanlab.datalab.internal.task.task class method)": [[32, "cleanlab.datalab.internal.task.Task.__iter__"]], "__len__() (cleanlab.datalab.internal.task.task class method)": [[32, "cleanlab.datalab.internal.task.Task.__len__"]], "cleanlab.datalab.internal.task": [[32, "module-cleanlab.datalab.internal.task"]], "from_str() (cleanlab.datalab.internal.task.task class method)": [[32, "cleanlab.datalab.internal.task.Task.from_str"]], "is_classification (cleanlab.datalab.internal.task.task property)": [[32, "cleanlab.datalab.internal.task.Task.is_classification"]], "is_multilabel (cleanlab.datalab.internal.task.task property)": [[32, "cleanlab.datalab.internal.task.Task.is_multilabel"]], "is_regression (cleanlab.datalab.internal.task.task property)": [[32, "cleanlab.datalab.internal.task.Task.is_regression"]], "cleanlab.dataset": [[34, "module-cleanlab.dataset"]], "find_overlapping_classes() (in module cleanlab.dataset)": [[34, "cleanlab.dataset.find_overlapping_classes"]], "health_summary() (in module cleanlab.dataset)": [[34, "cleanlab.dataset.health_summary"]], "overall_label_health_score() (in module cleanlab.dataset)": [[34, "cleanlab.dataset.overall_label_health_score"]], "rank_classes_by_label_quality() (in module cleanlab.dataset)": [[34, "cleanlab.dataset.rank_classes_by_label_quality"]], "cnn (class in cleanlab.experimental.cifar_cnn)": [[35, "cleanlab.experimental.cifar_cnn.CNN"]], "t_destination (cleanlab.experimental.cifar_cnn.cnn attribute)": [[35, "cleanlab.experimental.cifar_cnn.CNN.T_destination"]], "__call__() (cleanlab.experimental.cifar_cnn.cnn method)": [[35, "cleanlab.experimental.cifar_cnn.CNN.__call__"]], "add_module() (cleanlab.experimental.cifar_cnn.cnn method)": [[35, "cleanlab.experimental.cifar_cnn.CNN.add_module"]], "apply() (cleanlab.experimental.cifar_cnn.cnn method)": [[35, "cleanlab.experimental.cifar_cnn.CNN.apply"]], "bfloat16() (cleanlab.experimental.cifar_cnn.cnn method)": [[35, "cleanlab.experimental.cifar_cnn.CNN.bfloat16"]], "buffers() (cleanlab.experimental.cifar_cnn.cnn method)": [[35, "cleanlab.experimental.cifar_cnn.CNN.buffers"]], "call_bn() (in module cleanlab.experimental.cifar_cnn)": [[35, "cleanlab.experimental.cifar_cnn.call_bn"]], "call_super_init (cleanlab.experimental.cifar_cnn.cnn attribute)": [[35, "cleanlab.experimental.cifar_cnn.CNN.call_super_init"]], "children() (cleanlab.experimental.cifar_cnn.cnn method)": [[35, "cleanlab.experimental.cifar_cnn.CNN.children"]], "cleanlab.experimental.cifar_cnn": [[35, "module-cleanlab.experimental.cifar_cnn"]], "compile() (cleanlab.experimental.cifar_cnn.cnn method)": [[35, "cleanlab.experimental.cifar_cnn.CNN.compile"]], "cpu() (cleanlab.experimental.cifar_cnn.cnn method)": [[35, "cleanlab.experimental.cifar_cnn.CNN.cpu"]], "cuda() (cleanlab.experimental.cifar_cnn.cnn method)": [[35, "cleanlab.experimental.cifar_cnn.CNN.cuda"]], "double() (cleanlab.experimental.cifar_cnn.cnn method)": [[35, "cleanlab.experimental.cifar_cnn.CNN.double"]], "dump_patches (cleanlab.experimental.cifar_cnn.cnn attribute)": [[35, "cleanlab.experimental.cifar_cnn.CNN.dump_patches"]], "eval() (cleanlab.experimental.cifar_cnn.cnn method)": [[35, "cleanlab.experimental.cifar_cnn.CNN.eval"]], "extra_repr() (cleanlab.experimental.cifar_cnn.cnn method)": [[35, "cleanlab.experimental.cifar_cnn.CNN.extra_repr"]], "float() (cleanlab.experimental.cifar_cnn.cnn method)": [[35, "cleanlab.experimental.cifar_cnn.CNN.float"]], "forward() (cleanlab.experimental.cifar_cnn.cnn method)": [[35, "cleanlab.experimental.cifar_cnn.CNN.forward"], [35, "id0"]], "get_buffer() (cleanlab.experimental.cifar_cnn.cnn method)": [[35, "cleanlab.experimental.cifar_cnn.CNN.get_buffer"]], "get_extra_state() (cleanlab.experimental.cifar_cnn.cnn method)": [[35, "cleanlab.experimental.cifar_cnn.CNN.get_extra_state"]], "get_parameter() (cleanlab.experimental.cifar_cnn.cnn method)": [[35, "cleanlab.experimental.cifar_cnn.CNN.get_parameter"]], "get_submodule() (cleanlab.experimental.cifar_cnn.cnn method)": [[35, "cleanlab.experimental.cifar_cnn.CNN.get_submodule"]], "half() (cleanlab.experimental.cifar_cnn.cnn method)": [[35, "cleanlab.experimental.cifar_cnn.CNN.half"]], "ipu() (cleanlab.experimental.cifar_cnn.cnn method)": [[35, "cleanlab.experimental.cifar_cnn.CNN.ipu"]], "load_state_dict() (cleanlab.experimental.cifar_cnn.cnn method)": [[35, "cleanlab.experimental.cifar_cnn.CNN.load_state_dict"]], "modules() (cleanlab.experimental.cifar_cnn.cnn method)": [[35, "cleanlab.experimental.cifar_cnn.CNN.modules"]], "named_buffers() (cleanlab.experimental.cifar_cnn.cnn method)": [[35, "cleanlab.experimental.cifar_cnn.CNN.named_buffers"]], "named_children() (cleanlab.experimental.cifar_cnn.cnn method)": [[35, "cleanlab.experimental.cifar_cnn.CNN.named_children"]], "named_modules() (cleanlab.experimental.cifar_cnn.cnn method)": [[35, "cleanlab.experimental.cifar_cnn.CNN.named_modules"]], "named_parameters() (cleanlab.experimental.cifar_cnn.cnn method)": [[35, "cleanlab.experimental.cifar_cnn.CNN.named_parameters"]], "parameters() (cleanlab.experimental.cifar_cnn.cnn method)": [[35, "cleanlab.experimental.cifar_cnn.CNN.parameters"]], "register_backward_hook() (cleanlab.experimental.cifar_cnn.cnn method)": [[35, "cleanlab.experimental.cifar_cnn.CNN.register_backward_hook"]], "register_buffer() (cleanlab.experimental.cifar_cnn.cnn method)": [[35, "cleanlab.experimental.cifar_cnn.CNN.register_buffer"]], "register_forward_hook() (cleanlab.experimental.cifar_cnn.cnn method)": [[35, "cleanlab.experimental.cifar_cnn.CNN.register_forward_hook"]], "register_forward_pre_hook() (cleanlab.experimental.cifar_cnn.cnn method)": [[35, "cleanlab.experimental.cifar_cnn.CNN.register_forward_pre_hook"]], "register_full_backward_hook() (cleanlab.experimental.cifar_cnn.cnn method)": [[35, "cleanlab.experimental.cifar_cnn.CNN.register_full_backward_hook"]], "register_full_backward_pre_hook() (cleanlab.experimental.cifar_cnn.cnn method)": [[35, "cleanlab.experimental.cifar_cnn.CNN.register_full_backward_pre_hook"]], "register_load_state_dict_post_hook() (cleanlab.experimental.cifar_cnn.cnn method)": [[35, "cleanlab.experimental.cifar_cnn.CNN.register_load_state_dict_post_hook"]], "register_module() (cleanlab.experimental.cifar_cnn.cnn method)": [[35, "cleanlab.experimental.cifar_cnn.CNN.register_module"]], "register_parameter() (cleanlab.experimental.cifar_cnn.cnn method)": [[35, "cleanlab.experimental.cifar_cnn.CNN.register_parameter"]], "register_state_dict_pre_hook() (cleanlab.experimental.cifar_cnn.cnn method)": [[35, "cleanlab.experimental.cifar_cnn.CNN.register_state_dict_pre_hook"]], "requires_grad_() (cleanlab.experimental.cifar_cnn.cnn method)": [[35, "cleanlab.experimental.cifar_cnn.CNN.requires_grad_"]], "set_extra_state() (cleanlab.experimental.cifar_cnn.cnn method)": [[35, "cleanlab.experimental.cifar_cnn.CNN.set_extra_state"]], "share_memory() (cleanlab.experimental.cifar_cnn.cnn method)": [[35, "cleanlab.experimental.cifar_cnn.CNN.share_memory"]], "state_dict() (cleanlab.experimental.cifar_cnn.cnn method)": [[35, "cleanlab.experimental.cifar_cnn.CNN.state_dict"]], "to() (cleanlab.experimental.cifar_cnn.cnn method)": [[35, "cleanlab.experimental.cifar_cnn.CNN.to"]], "to_empty() (cleanlab.experimental.cifar_cnn.cnn method)": [[35, "cleanlab.experimental.cifar_cnn.CNN.to_empty"]], "train() (cleanlab.experimental.cifar_cnn.cnn method)": [[35, "cleanlab.experimental.cifar_cnn.CNN.train"]], "training (cleanlab.experimental.cifar_cnn.cnn attribute)": [[35, "cleanlab.experimental.cifar_cnn.CNN.training"]], "type() (cleanlab.experimental.cifar_cnn.cnn method)": [[35, "cleanlab.experimental.cifar_cnn.CNN.type"]], "xpu() (cleanlab.experimental.cifar_cnn.cnn method)": [[35, "cleanlab.experimental.cifar_cnn.CNN.xpu"]], "zero_grad() (cleanlab.experimental.cifar_cnn.cnn method)": [[35, "cleanlab.experimental.cifar_cnn.CNN.zero_grad"]], "adjust_learning_rate() (in module cleanlab.experimental.coteaching)": [[36, "cleanlab.experimental.coteaching.adjust_learning_rate"]], "cleanlab.experimental.coteaching": [[36, "module-cleanlab.experimental.coteaching"]], "evaluate() (in module cleanlab.experimental.coteaching)": [[36, "cleanlab.experimental.coteaching.evaluate"]], "forget_rate_scheduler() (in module cleanlab.experimental.coteaching)": [[36, "cleanlab.experimental.coteaching.forget_rate_scheduler"]], "initialize_lr_scheduler() (in module cleanlab.experimental.coteaching)": [[36, "cleanlab.experimental.coteaching.initialize_lr_scheduler"]], "loss_coteaching() (in module cleanlab.experimental.coteaching)": [[36, "cleanlab.experimental.coteaching.loss_coteaching"]], "train() (in module cleanlab.experimental.coteaching)": [[36, "cleanlab.experimental.coteaching.train"]], "cleanlab.experimental": [[37, "module-cleanlab.experimental"]], "labelinspector (class in cleanlab.experimental.label_issues_batched)": [[38, "cleanlab.experimental.label_issues_batched.LabelInspector"]], "adj_confident_thresholds_shared (in module cleanlab.experimental.label_issues_batched)": [[38, "cleanlab.experimental.label_issues_batched.adj_confident_thresholds_shared"]], "cleanlab.experimental.label_issues_batched": [[38, "module-cleanlab.experimental.label_issues_batched"]], "find_label_issues_batched() (in module cleanlab.experimental.label_issues_batched)": [[38, "cleanlab.experimental.label_issues_batched.find_label_issues_batched"]], "get_confident_thresholds() (cleanlab.experimental.label_issues_batched.labelinspector method)": [[38, "cleanlab.experimental.label_issues_batched.LabelInspector.get_confident_thresholds"]], "get_label_issues() (cleanlab.experimental.label_issues_batched.labelinspector method)": [[38, "cleanlab.experimental.label_issues_batched.LabelInspector.get_label_issues"]], "get_num_issues() (cleanlab.experimental.label_issues_batched.labelinspector method)": [[38, "cleanlab.experimental.label_issues_batched.LabelInspector.get_num_issues"]], "get_quality_scores() (cleanlab.experimental.label_issues_batched.labelinspector method)": [[38, "cleanlab.experimental.label_issues_batched.LabelInspector.get_quality_scores"]], "labels_shared (in module cleanlab.experimental.label_issues_batched)": [[38, "cleanlab.experimental.label_issues_batched.labels_shared"]], "pred_probs_shared (in module cleanlab.experimental.label_issues_batched)": [[38, "cleanlab.experimental.label_issues_batched.pred_probs_shared"]], "score_label_quality() (cleanlab.experimental.label_issues_batched.labelinspector method)": [[38, "cleanlab.experimental.label_issues_batched.LabelInspector.score_label_quality"]], "split_arr() (in module cleanlab.experimental.label_issues_batched)": [[38, "cleanlab.experimental.label_issues_batched.split_arr"]], "update_confident_thresholds() (cleanlab.experimental.label_issues_batched.labelinspector method)": [[38, "cleanlab.experimental.label_issues_batched.LabelInspector.update_confident_thresholds"]], "cnn (class in cleanlab.experimental.mnist_pytorch)": [[39, "cleanlab.experimental.mnist_pytorch.CNN"]], "simplenet (class in cleanlab.experimental.mnist_pytorch)": [[39, "cleanlab.experimental.mnist_pytorch.SimpleNet"]], "t_destination (cleanlab.experimental.mnist_pytorch.simplenet attribute)": [[39, "cleanlab.experimental.mnist_pytorch.SimpleNet.T_destination"]], "__call__() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[39, "cleanlab.experimental.mnist_pytorch.SimpleNet.__call__"]], "__init_subclass__() (cleanlab.experimental.mnist_pytorch.cnn class method)": [[39, "cleanlab.experimental.mnist_pytorch.CNN.__init_subclass__"]], "add_module() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[39, "cleanlab.experimental.mnist_pytorch.SimpleNet.add_module"]], "apply() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[39, "cleanlab.experimental.mnist_pytorch.SimpleNet.apply"]], "batch_size (cleanlab.experimental.mnist_pytorch.cnn attribute)": [[39, "cleanlab.experimental.mnist_pytorch.CNN.batch_size"]], "bfloat16() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[39, "cleanlab.experimental.mnist_pytorch.SimpleNet.bfloat16"]], "buffers() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[39, "cleanlab.experimental.mnist_pytorch.SimpleNet.buffers"]], "call_super_init (cleanlab.experimental.mnist_pytorch.simplenet attribute)": [[39, "cleanlab.experimental.mnist_pytorch.SimpleNet.call_super_init"]], "children() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[39, "cleanlab.experimental.mnist_pytorch.SimpleNet.children"]], "cleanlab.experimental.mnist_pytorch": [[39, "module-cleanlab.experimental.mnist_pytorch"]], "compile() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[39, "cleanlab.experimental.mnist_pytorch.SimpleNet.compile"]], "cpu() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[39, "cleanlab.experimental.mnist_pytorch.SimpleNet.cpu"]], "cuda() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[39, "cleanlab.experimental.mnist_pytorch.SimpleNet.cuda"]], "dataset (cleanlab.experimental.mnist_pytorch.cnn attribute)": [[39, "cleanlab.experimental.mnist_pytorch.CNN.dataset"]], "double() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[39, "cleanlab.experimental.mnist_pytorch.SimpleNet.double"]], "dump_patches (cleanlab.experimental.mnist_pytorch.simplenet attribute)": [[39, "cleanlab.experimental.mnist_pytorch.SimpleNet.dump_patches"]], "epochs (cleanlab.experimental.mnist_pytorch.cnn attribute)": [[39, "cleanlab.experimental.mnist_pytorch.CNN.epochs"]], "eval() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[39, "cleanlab.experimental.mnist_pytorch.SimpleNet.eval"]], "extra_repr() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[39, "cleanlab.experimental.mnist_pytorch.SimpleNet.extra_repr"]], "fit() (cleanlab.experimental.mnist_pytorch.cnn method)": [[39, "cleanlab.experimental.mnist_pytorch.CNN.fit"], [39, "id0"]], "float() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[39, "cleanlab.experimental.mnist_pytorch.SimpleNet.float"]], "forward() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[39, "cleanlab.experimental.mnist_pytorch.SimpleNet.forward"]], "get_buffer() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[39, "cleanlab.experimental.mnist_pytorch.SimpleNet.get_buffer"]], "get_extra_state() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[39, "cleanlab.experimental.mnist_pytorch.SimpleNet.get_extra_state"]], "get_metadata_routing() (cleanlab.experimental.mnist_pytorch.cnn method)": [[39, "cleanlab.experimental.mnist_pytorch.CNN.get_metadata_routing"]], "get_mnist_dataset() (in module cleanlab.experimental.mnist_pytorch)": [[39, "cleanlab.experimental.mnist_pytorch.get_mnist_dataset"]], "get_parameter() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[39, "cleanlab.experimental.mnist_pytorch.SimpleNet.get_parameter"]], "get_params() (cleanlab.experimental.mnist_pytorch.cnn method)": [[39, "cleanlab.experimental.mnist_pytorch.CNN.get_params"]], "get_sklearn_digits_dataset() (in module cleanlab.experimental.mnist_pytorch)": [[39, "cleanlab.experimental.mnist_pytorch.get_sklearn_digits_dataset"]], "get_submodule() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[39, "cleanlab.experimental.mnist_pytorch.SimpleNet.get_submodule"]], "half() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[39, "cleanlab.experimental.mnist_pytorch.SimpleNet.half"]], "ipu() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[39, "cleanlab.experimental.mnist_pytorch.SimpleNet.ipu"]], "load_state_dict() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[39, "cleanlab.experimental.mnist_pytorch.SimpleNet.load_state_dict"]], "loader (cleanlab.experimental.mnist_pytorch.cnn attribute)": [[39, "cleanlab.experimental.mnist_pytorch.CNN.loader"]], "log_interval (cleanlab.experimental.mnist_pytorch.cnn attribute)": [[39, "cleanlab.experimental.mnist_pytorch.CNN.log_interval"]], "lr (cleanlab.experimental.mnist_pytorch.cnn attribute)": [[39, "cleanlab.experimental.mnist_pytorch.CNN.lr"]], "modules() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[39, "cleanlab.experimental.mnist_pytorch.SimpleNet.modules"]], "momentum (cleanlab.experimental.mnist_pytorch.cnn attribute)": [[39, "cleanlab.experimental.mnist_pytorch.CNN.momentum"]], "named_buffers() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[39, "cleanlab.experimental.mnist_pytorch.SimpleNet.named_buffers"]], "named_children() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[39, "cleanlab.experimental.mnist_pytorch.SimpleNet.named_children"]], "named_modules() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[39, "cleanlab.experimental.mnist_pytorch.SimpleNet.named_modules"]], "named_parameters() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[39, "cleanlab.experimental.mnist_pytorch.SimpleNet.named_parameters"]], "no_cuda (cleanlab.experimental.mnist_pytorch.cnn attribute)": [[39, "cleanlab.experimental.mnist_pytorch.CNN.no_cuda"]], "parameters() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[39, "cleanlab.experimental.mnist_pytorch.SimpleNet.parameters"]], "predict() (cleanlab.experimental.mnist_pytorch.cnn method)": [[39, "cleanlab.experimental.mnist_pytorch.CNN.predict"], [39, "id1"]], "predict_proba() (cleanlab.experimental.mnist_pytorch.cnn method)": [[39, "cleanlab.experimental.mnist_pytorch.CNN.predict_proba"], [39, "id4"]], "register_backward_hook() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[39, "cleanlab.experimental.mnist_pytorch.SimpleNet.register_backward_hook"]], "register_buffer() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[39, "cleanlab.experimental.mnist_pytorch.SimpleNet.register_buffer"]], "register_forward_hook() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[39, "cleanlab.experimental.mnist_pytorch.SimpleNet.register_forward_hook"]], "register_forward_pre_hook() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[39, "cleanlab.experimental.mnist_pytorch.SimpleNet.register_forward_pre_hook"]], "register_full_backward_hook() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[39, "cleanlab.experimental.mnist_pytorch.SimpleNet.register_full_backward_hook"]], "register_full_backward_pre_hook() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[39, "cleanlab.experimental.mnist_pytorch.SimpleNet.register_full_backward_pre_hook"]], "register_load_state_dict_post_hook() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[39, "cleanlab.experimental.mnist_pytorch.SimpleNet.register_load_state_dict_post_hook"]], "register_module() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[39, "cleanlab.experimental.mnist_pytorch.SimpleNet.register_module"]], "register_parameter() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[39, "cleanlab.experimental.mnist_pytorch.SimpleNet.register_parameter"]], "register_state_dict_pre_hook() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[39, "cleanlab.experimental.mnist_pytorch.SimpleNet.register_state_dict_pre_hook"]], "requires_grad_() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[39, "cleanlab.experimental.mnist_pytorch.SimpleNet.requires_grad_"]], "seed (cleanlab.experimental.mnist_pytorch.cnn attribute)": [[39, "cleanlab.experimental.mnist_pytorch.CNN.seed"]], "set_extra_state() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[39, "cleanlab.experimental.mnist_pytorch.SimpleNet.set_extra_state"]], "set_fit_request() (cleanlab.experimental.mnist_pytorch.cnn method)": [[39, "cleanlab.experimental.mnist_pytorch.CNN.set_fit_request"]], "set_params() (cleanlab.experimental.mnist_pytorch.cnn method)": [[39, "cleanlab.experimental.mnist_pytorch.CNN.set_params"]], "set_predict_proba_request() (cleanlab.experimental.mnist_pytorch.cnn method)": [[39, "cleanlab.experimental.mnist_pytorch.CNN.set_predict_proba_request"]], "set_predict_request() (cleanlab.experimental.mnist_pytorch.cnn method)": [[39, "cleanlab.experimental.mnist_pytorch.CNN.set_predict_request"]], "share_memory() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[39, "cleanlab.experimental.mnist_pytorch.SimpleNet.share_memory"]], "state_dict() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[39, "cleanlab.experimental.mnist_pytorch.SimpleNet.state_dict"]], "test_batch_size (cleanlab.experimental.mnist_pytorch.cnn attribute)": [[39, "cleanlab.experimental.mnist_pytorch.CNN.test_batch_size"]], "to() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[39, "cleanlab.experimental.mnist_pytorch.SimpleNet.to"]], "to_empty() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[39, "cleanlab.experimental.mnist_pytorch.SimpleNet.to_empty"]], "train() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[39, "cleanlab.experimental.mnist_pytorch.SimpleNet.train"]], "training (cleanlab.experimental.mnist_pytorch.simplenet attribute)": [[39, "cleanlab.experimental.mnist_pytorch.SimpleNet.training"]], "type() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[39, "cleanlab.experimental.mnist_pytorch.SimpleNet.type"]], "xpu() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[39, "cleanlab.experimental.mnist_pytorch.SimpleNet.xpu"]], "zero_grad() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[39, "cleanlab.experimental.mnist_pytorch.SimpleNet.zero_grad"]], "cleanlab.experimental.span_classification": [[40, "module-cleanlab.experimental.span_classification"]], "display_issues() (in module cleanlab.experimental.span_classification)": [[40, "cleanlab.experimental.span_classification.display_issues"]], "find_label_issues() (in module cleanlab.experimental.span_classification)": [[40, "cleanlab.experimental.span_classification.find_label_issues"]], "get_label_quality_scores() (in module cleanlab.experimental.span_classification)": [[40, "cleanlab.experimental.span_classification.get_label_quality_scores"]], "cleanlab.filter": [[41, "module-cleanlab.filter"]], "find_label_issues() (in module cleanlab.filter)": [[41, "cleanlab.filter.find_label_issues"]], "find_label_issues_using_argmax_confusion_matrix() (in module cleanlab.filter)": [[41, "cleanlab.filter.find_label_issues_using_argmax_confusion_matrix"]], "find_predicted_neq_given() (in module cleanlab.filter)": [[41, "cleanlab.filter.find_predicted_neq_given"]], "pred_probs_by_class (in module cleanlab.filter)": [[41, "cleanlab.filter.pred_probs_by_class"]], "prune_count_matrix_cols (in module cleanlab.filter)": [[41, "cleanlab.filter.prune_count_matrix_cols"]], "cleanlab.internal": [[42, "module-cleanlab.internal"]], "cleanlab.internal.label_quality_utils": [[43, "module-cleanlab.internal.label_quality_utils"]], "get_normalized_entropy() (in module cleanlab.internal.label_quality_utils)": [[43, "cleanlab.internal.label_quality_utils.get_normalized_entropy"]], "cleanlab.internal.latent_algebra": [[44, "module-cleanlab.internal.latent_algebra"]], "compute_inv_noise_matrix() (in module cleanlab.internal.latent_algebra)": [[44, "cleanlab.internal.latent_algebra.compute_inv_noise_matrix"]], "compute_noise_matrix_from_inverse() (in module cleanlab.internal.latent_algebra)": [[44, "cleanlab.internal.latent_algebra.compute_noise_matrix_from_inverse"]], "compute_ps_py_inv_noise_matrix() (in module cleanlab.internal.latent_algebra)": [[44, "cleanlab.internal.latent_algebra.compute_ps_py_inv_noise_matrix"]], "compute_py() (in module cleanlab.internal.latent_algebra)": [[44, "cleanlab.internal.latent_algebra.compute_py"]], "compute_py_inv_noise_matrix() (in module cleanlab.internal.latent_algebra)": [[44, "cleanlab.internal.latent_algebra.compute_py_inv_noise_matrix"]], "compute_pyx() (in module cleanlab.internal.latent_algebra)": [[44, "cleanlab.internal.latent_algebra.compute_pyx"]], "assert_valid_inputs_multiannotator() (in module cleanlab.internal.multiannotator_utils)": [[45, "cleanlab.internal.multiannotator_utils.assert_valid_inputs_multiannotator"]], "assert_valid_pred_probs() (in module cleanlab.internal.multiannotator_utils)": [[45, "cleanlab.internal.multiannotator_utils.assert_valid_pred_probs"]], "check_consensus_label_classes() (in module cleanlab.internal.multiannotator_utils)": [[45, "cleanlab.internal.multiannotator_utils.check_consensus_label_classes"]], "cleanlab.internal.multiannotator_utils": [[45, "module-cleanlab.internal.multiannotator_utils"]], "compute_soft_cross_entropy() (in module cleanlab.internal.multiannotator_utils)": [[45, "cleanlab.internal.multiannotator_utils.compute_soft_cross_entropy"]], "find_best_temp_scaler() (in module cleanlab.internal.multiannotator_utils)": [[45, "cleanlab.internal.multiannotator_utils.find_best_temp_scaler"]], "format_multiannotator_labels() (in module cleanlab.internal.multiannotator_utils)": [[45, "cleanlab.internal.multiannotator_utils.format_multiannotator_labels"]], "temp_scale_pred_probs() (in module cleanlab.internal.multiannotator_utils)": [[45, "cleanlab.internal.multiannotator_utils.temp_scale_pred_probs"]], "aggregator (class in cleanlab.internal.multilabel_scorer)": [[46, "cleanlab.internal.multilabel_scorer.Aggregator"]], "confidence_weighted_entropy (cleanlab.internal.multilabel_scorer.classlabelscorer attribute)": [[46, "cleanlab.internal.multilabel_scorer.ClassLabelScorer.CONFIDENCE_WEIGHTED_ENTROPY"]], "classlabelscorer (class in cleanlab.internal.multilabel_scorer)": [[46, "cleanlab.internal.multilabel_scorer.ClassLabelScorer"]], "multilabelscorer (class in cleanlab.internal.multilabel_scorer)": [[46, "cleanlab.internal.multilabel_scorer.MultilabelScorer"]], "normalized_margin (cleanlab.internal.multilabel_scorer.classlabelscorer attribute)": [[46, "cleanlab.internal.multilabel_scorer.ClassLabelScorer.NORMALIZED_MARGIN"]], "self_confidence (cleanlab.internal.multilabel_scorer.classlabelscorer attribute)": [[46, "cleanlab.internal.multilabel_scorer.ClassLabelScorer.SELF_CONFIDENCE"]], "__call__() (cleanlab.internal.multilabel_scorer.aggregator method)": [[46, "cleanlab.internal.multilabel_scorer.Aggregator.__call__"]], "__call__() (cleanlab.internal.multilabel_scorer.classlabelscorer method)": [[46, "cleanlab.internal.multilabel_scorer.ClassLabelScorer.__call__"]], "__call__() (cleanlab.internal.multilabel_scorer.multilabelscorer method)": [[46, "cleanlab.internal.multilabel_scorer.MultilabelScorer.__call__"]], "__contains__() (cleanlab.internal.multilabel_scorer.classlabelscorer class method)": [[46, "cleanlab.internal.multilabel_scorer.ClassLabelScorer.__contains__"]], "__getitem__() (cleanlab.internal.multilabel_scorer.classlabelscorer class method)": [[46, "cleanlab.internal.multilabel_scorer.ClassLabelScorer.__getitem__"]], "__iter__() (cleanlab.internal.multilabel_scorer.classlabelscorer class method)": [[46, "cleanlab.internal.multilabel_scorer.ClassLabelScorer.__iter__"]], "__len__() (cleanlab.internal.multilabel_scorer.classlabelscorer class method)": [[46, "cleanlab.internal.multilabel_scorer.ClassLabelScorer.__len__"]], "aggregate() (cleanlab.internal.multilabel_scorer.multilabelscorer method)": [[46, "cleanlab.internal.multilabel_scorer.MultilabelScorer.aggregate"]], "cleanlab.internal.multilabel_scorer": [[46, "module-cleanlab.internal.multilabel_scorer"]], "exponential_moving_average() (in module cleanlab.internal.multilabel_scorer)": [[46, "cleanlab.internal.multilabel_scorer.exponential_moving_average"]], "from_str() (cleanlab.internal.multilabel_scorer.classlabelscorer class method)": [[46, "cleanlab.internal.multilabel_scorer.ClassLabelScorer.from_str"]], "get_class_label_quality_scores() (cleanlab.internal.multilabel_scorer.multilabelscorer method)": [[46, "cleanlab.internal.multilabel_scorer.MultilabelScorer.get_class_label_quality_scores"]], "get_cross_validated_multilabel_pred_probs() (in module cleanlab.internal.multilabel_scorer)": [[46, "cleanlab.internal.multilabel_scorer.get_cross_validated_multilabel_pred_probs"]], "get_label_quality_scores() (in module cleanlab.internal.multilabel_scorer)": [[46, "cleanlab.internal.multilabel_scorer.get_label_quality_scores"]], "multilabel_py() (in module cleanlab.internal.multilabel_scorer)": [[46, "cleanlab.internal.multilabel_scorer.multilabel_py"]], "possible_methods (cleanlab.internal.multilabel_scorer.aggregator attribute)": [[46, "cleanlab.internal.multilabel_scorer.Aggregator.possible_methods"]], "softmin() (in module cleanlab.internal.multilabel_scorer)": [[46, "cleanlab.internal.multilabel_scorer.softmin"]], "cleanlab.internal.multilabel_utils": [[47, "module-cleanlab.internal.multilabel_utils"]], "get_onehot_num_classes() (in module cleanlab.internal.multilabel_utils)": [[47, "cleanlab.internal.multilabel_utils.get_onehot_num_classes"]], "int2onehot() (in module cleanlab.internal.multilabel_utils)": [[47, "cleanlab.internal.multilabel_utils.int2onehot"]], "onehot2int() (in module cleanlab.internal.multilabel_utils)": [[47, "cleanlab.internal.multilabel_utils.onehot2int"]], "stack_complement() (in module cleanlab.internal.multilabel_utils)": [[47, "cleanlab.internal.multilabel_utils.stack_complement"]], "cleanlab.internal.outlier": [[48, "module-cleanlab.internal.outlier"]], "transform_distances_to_scores() (in module cleanlab.internal.outlier)": [[48, "cleanlab.internal.outlier.transform_distances_to_scores"]], "cleanlab.internal.token_classification_utils": [[49, "module-cleanlab.internal.token_classification_utils"]], "color_sentence() (in module cleanlab.internal.token_classification_utils)": [[49, "cleanlab.internal.token_classification_utils.color_sentence"]], "filter_sentence() (in module cleanlab.internal.token_classification_utils)": [[49, "cleanlab.internal.token_classification_utils.filter_sentence"]], "get_sentence() (in module cleanlab.internal.token_classification_utils)": [[49, "cleanlab.internal.token_classification_utils.get_sentence"]], "mapping() (in module cleanlab.internal.token_classification_utils)": [[49, "cleanlab.internal.token_classification_utils.mapping"]], "merge_probs() (in module cleanlab.internal.token_classification_utils)": [[49, "cleanlab.internal.token_classification_utils.merge_probs"]], "process_token() (in module cleanlab.internal.token_classification_utils)": [[49, "cleanlab.internal.token_classification_utils.process_token"]], "append_extra_datapoint() (in module cleanlab.internal.util)": [[50, "cleanlab.internal.util.append_extra_datapoint"]], "cleanlab.internal.util": [[50, "module-cleanlab.internal.util"]], "clip_noise_rates() (in module cleanlab.internal.util)": [[50, "cleanlab.internal.util.clip_noise_rates"]], "clip_values() (in module cleanlab.internal.util)": [[50, "cleanlab.internal.util.clip_values"]], "compress_int_array() (in module cleanlab.internal.util)": [[50, "cleanlab.internal.util.compress_int_array"]], "confusion_matrix() (in module cleanlab.internal.util)": [[50, "cleanlab.internal.util.confusion_matrix"]], "csr_vstack() (in module cleanlab.internal.util)": [[50, "cleanlab.internal.util.csr_vstack"]], "estimate_pu_f1() (in module cleanlab.internal.util)": [[50, "cleanlab.internal.util.estimate_pu_f1"]], "extract_indices_tf() (in module cleanlab.internal.util)": [[50, "cleanlab.internal.util.extract_indices_tf"]], "force_two_dimensions() (in module cleanlab.internal.util)": [[50, "cleanlab.internal.util.force_two_dimensions"]], "format_labels() (in module cleanlab.internal.util)": [[50, "cleanlab.internal.util.format_labels"]], "get_missing_classes() (in module cleanlab.internal.util)": [[50, "cleanlab.internal.util.get_missing_classes"]], "get_num_classes() (in module cleanlab.internal.util)": [[50, "cleanlab.internal.util.get_num_classes"]], "get_unique_classes() (in module cleanlab.internal.util)": [[50, "cleanlab.internal.util.get_unique_classes"]], "is_tensorflow_dataset() (in module cleanlab.internal.util)": [[50, "cleanlab.internal.util.is_tensorflow_dataset"]], "is_torch_dataset() (in module cleanlab.internal.util)": [[50, "cleanlab.internal.util.is_torch_dataset"]], "num_unique_classes() (in module cleanlab.internal.util)": [[50, "cleanlab.internal.util.num_unique_classes"]], "print_inverse_noise_matrix() (in module cleanlab.internal.util)": [[50, "cleanlab.internal.util.print_inverse_noise_matrix"]], "print_joint_matrix() (in module cleanlab.internal.util)": [[50, "cleanlab.internal.util.print_joint_matrix"]], "print_noise_matrix() (in module cleanlab.internal.util)": [[50, "cleanlab.internal.util.print_noise_matrix"]], "print_square_matrix() (in module cleanlab.internal.util)": [[50, "cleanlab.internal.util.print_square_matrix"]], "remove_noise_from_class() (in module cleanlab.internal.util)": [[50, "cleanlab.internal.util.remove_noise_from_class"]], "round_preserving_row_totals() (in module cleanlab.internal.util)": [[50, "cleanlab.internal.util.round_preserving_row_totals"]], "round_preserving_sum() (in module cleanlab.internal.util)": [[50, "cleanlab.internal.util.round_preserving_sum"]], "smart_display_dataframe() (in module cleanlab.internal.util)": [[50, "cleanlab.internal.util.smart_display_dataframe"]], "subset_x_y() (in module cleanlab.internal.util)": [[50, "cleanlab.internal.util.subset_X_y"]], "subset_data() (in module cleanlab.internal.util)": [[50, "cleanlab.internal.util.subset_data"]], "subset_labels() (in module cleanlab.internal.util)": [[50, "cleanlab.internal.util.subset_labels"]], "train_val_split() (in module cleanlab.internal.util)": [[50, "cleanlab.internal.util.train_val_split"]], "unshuffle_tensorflow_dataset() (in module cleanlab.internal.util)": [[50, "cleanlab.internal.util.unshuffle_tensorflow_dataset"]], "value_counts() (in module cleanlab.internal.util)": [[50, "cleanlab.internal.util.value_counts"]], "value_counts_fill_missing_classes() (in module cleanlab.internal.util)": [[50, "cleanlab.internal.util.value_counts_fill_missing_classes"]], "assert_indexing_works() (in module cleanlab.internal.validation)": [[51, "cleanlab.internal.validation.assert_indexing_works"]], "assert_nonempty_input() (in module cleanlab.internal.validation)": [[51, "cleanlab.internal.validation.assert_nonempty_input"]], "assert_valid_class_labels() (in module cleanlab.internal.validation)": [[51, "cleanlab.internal.validation.assert_valid_class_labels"]], "assert_valid_inputs() (in module cleanlab.internal.validation)": [[51, "cleanlab.internal.validation.assert_valid_inputs"]], "cleanlab.internal.validation": [[51, "module-cleanlab.internal.validation"]], "labels_to_array() (in module cleanlab.internal.validation)": [[51, "cleanlab.internal.validation.labels_to_array"]], "labels_to_list_multilabel() (in module cleanlab.internal.validation)": [[51, "cleanlab.internal.validation.labels_to_list_multilabel"]], "cleanlab.models": [[53, "module-cleanlab.models"]], "keraswrappermodel (class in cleanlab.models.keras)": [[54, "cleanlab.models.keras.KerasWrapperModel"]], "keraswrappersequential (class in cleanlab.models.keras)": [[54, "cleanlab.models.keras.KerasWrapperSequential"]], "cleanlab.models.keras": [[54, "module-cleanlab.models.keras"]], "fit() (cleanlab.models.keras.keraswrappermodel method)": [[54, "cleanlab.models.keras.KerasWrapperModel.fit"]], "fit() (cleanlab.models.keras.keraswrappersequential method)": [[54, "cleanlab.models.keras.KerasWrapperSequential.fit"]], "get_params() (cleanlab.models.keras.keraswrappermodel method)": [[54, "cleanlab.models.keras.KerasWrapperModel.get_params"]], "get_params() (cleanlab.models.keras.keraswrappersequential method)": [[54, "cleanlab.models.keras.KerasWrapperSequential.get_params"]], "predict() (cleanlab.models.keras.keraswrappermodel method)": [[54, "cleanlab.models.keras.KerasWrapperModel.predict"]], "predict() (cleanlab.models.keras.keraswrappersequential method)": [[54, "cleanlab.models.keras.KerasWrapperSequential.predict"]], "predict_proba() (cleanlab.models.keras.keraswrappermodel method)": [[54, "cleanlab.models.keras.KerasWrapperModel.predict_proba"]], "predict_proba() (cleanlab.models.keras.keraswrappersequential method)": [[54, "cleanlab.models.keras.KerasWrapperSequential.predict_proba"]], "set_params() (cleanlab.models.keras.keraswrappermodel method)": [[54, "cleanlab.models.keras.KerasWrapperModel.set_params"]], "set_params() (cleanlab.models.keras.keraswrappersequential method)": [[54, "cleanlab.models.keras.KerasWrapperSequential.set_params"]], "summary() (cleanlab.models.keras.keraswrappermodel method)": [[54, "cleanlab.models.keras.KerasWrapperModel.summary"]], "summary() (cleanlab.models.keras.keraswrappersequential method)": [[54, "cleanlab.models.keras.KerasWrapperSequential.summary"]], "cleanlab.multiannotator": [[55, "module-cleanlab.multiannotator"]], "convert_long_to_wide_dataset() (in module cleanlab.multiannotator)": [[55, "cleanlab.multiannotator.convert_long_to_wide_dataset"]], "get_active_learning_scores() (in module cleanlab.multiannotator)": [[55, "cleanlab.multiannotator.get_active_learning_scores"]], "get_active_learning_scores_ensemble() (in module cleanlab.multiannotator)": [[55, "cleanlab.multiannotator.get_active_learning_scores_ensemble"]], "get_label_quality_multiannotator() (in module cleanlab.multiannotator)": [[55, "cleanlab.multiannotator.get_label_quality_multiannotator"]], "get_label_quality_multiannotator_ensemble() (in module cleanlab.multiannotator)": [[55, "cleanlab.multiannotator.get_label_quality_multiannotator_ensemble"]], "get_majority_vote_label() (in module cleanlab.multiannotator)": [[55, "cleanlab.multiannotator.get_majority_vote_label"]], "cleanlab.multilabel_classification.dataset": [[56, "module-cleanlab.multilabel_classification.dataset"]], "common_multilabel_issues() (in module cleanlab.multilabel_classification.dataset)": [[56, "cleanlab.multilabel_classification.dataset.common_multilabel_issues"]], "multilabel_health_summary() (in module cleanlab.multilabel_classification.dataset)": [[56, "cleanlab.multilabel_classification.dataset.multilabel_health_summary"]], "overall_multilabel_health_score() (in module cleanlab.multilabel_classification.dataset)": [[56, "cleanlab.multilabel_classification.dataset.overall_multilabel_health_score"]], "rank_classes_by_multilabel_quality() (in module cleanlab.multilabel_classification.dataset)": [[56, "cleanlab.multilabel_classification.dataset.rank_classes_by_multilabel_quality"]], "cleanlab.multilabel_classification.filter": [[57, "module-cleanlab.multilabel_classification.filter"]], "find_label_issues() (in module cleanlab.multilabel_classification.filter)": [[57, "cleanlab.multilabel_classification.filter.find_label_issues"]], "find_multilabel_issues_per_class() (in module cleanlab.multilabel_classification.filter)": [[57, "cleanlab.multilabel_classification.filter.find_multilabel_issues_per_class"]], "cleanlab.multilabel_classification": [[58, "module-cleanlab.multilabel_classification"]], "cleanlab.multilabel_classification.rank": [[59, "module-cleanlab.multilabel_classification.rank"]], "get_label_quality_scores() (in module cleanlab.multilabel_classification.rank)": [[59, "cleanlab.multilabel_classification.rank.get_label_quality_scores"]], "get_label_quality_scores_per_class() (in module cleanlab.multilabel_classification.rank)": [[59, "cleanlab.multilabel_classification.rank.get_label_quality_scores_per_class"]], "cleanlab.object_detection.filter": [[60, "module-cleanlab.object_detection.filter"]], "find_label_issues() (in module cleanlab.object_detection.filter)": [[60, "cleanlab.object_detection.filter.find_label_issues"]], "cleanlab.object_detection": [[61, "module-cleanlab.object_detection"]], "cleanlab.object_detection.rank": [[62, "module-cleanlab.object_detection.rank"]], "compute_badloc_box_scores() (in module cleanlab.object_detection.rank)": [[62, "cleanlab.object_detection.rank.compute_badloc_box_scores"]], "compute_overlooked_box_scores() (in module cleanlab.object_detection.rank)": [[62, "cleanlab.object_detection.rank.compute_overlooked_box_scores"]], "compute_swap_box_scores() (in module cleanlab.object_detection.rank)": [[62, "cleanlab.object_detection.rank.compute_swap_box_scores"]], "get_label_quality_scores() (in module cleanlab.object_detection.rank)": [[62, "cleanlab.object_detection.rank.get_label_quality_scores"]], "issues_from_scores() (in module cleanlab.object_detection.rank)": [[62, "cleanlab.object_detection.rank.issues_from_scores"]], "pool_box_scores_per_image() (in module cleanlab.object_detection.rank)": [[62, "cleanlab.object_detection.rank.pool_box_scores_per_image"]], "bounding_box_size_distribution() (in module cleanlab.object_detection.summary)": [[63, "cleanlab.object_detection.summary.bounding_box_size_distribution"]], "calculate_per_class_metrics() (in module cleanlab.object_detection.summary)": [[63, "cleanlab.object_detection.summary.calculate_per_class_metrics"]], "class_label_distribution() (in module cleanlab.object_detection.summary)": [[63, "cleanlab.object_detection.summary.class_label_distribution"]], "cleanlab.object_detection.summary": [[63, "module-cleanlab.object_detection.summary"]], "get_average_per_class_confusion_matrix() (in module cleanlab.object_detection.summary)": [[63, "cleanlab.object_detection.summary.get_average_per_class_confusion_matrix"]], "get_sorted_bbox_count_idxs() (in module cleanlab.object_detection.summary)": [[63, "cleanlab.object_detection.summary.get_sorted_bbox_count_idxs"]], "object_counts_per_image() (in module cleanlab.object_detection.summary)": [[63, "cleanlab.object_detection.summary.object_counts_per_image"]], "plot_class_distribution() (in module cleanlab.object_detection.summary)": [[63, "cleanlab.object_detection.summary.plot_class_distribution"]], "plot_class_size_distributions() (in module cleanlab.object_detection.summary)": [[63, "cleanlab.object_detection.summary.plot_class_size_distributions"]], "visualize() (in module cleanlab.object_detection.summary)": [[63, "cleanlab.object_detection.summary.visualize"]], "outofdistribution (class in cleanlab.outlier)": [[64, "cleanlab.outlier.OutOfDistribution"]], "cleanlab.outlier": [[64, "module-cleanlab.outlier"]], "fit() (cleanlab.outlier.outofdistribution method)": [[64, "cleanlab.outlier.OutOfDistribution.fit"]], "fit_score() (cleanlab.outlier.outofdistribution method)": [[64, "cleanlab.outlier.OutOfDistribution.fit_score"]], "score() (cleanlab.outlier.outofdistribution method)": [[64, "cleanlab.outlier.OutOfDistribution.score"]], "cleanlab.rank": [[65, "module-cleanlab.rank"]], "find_top_issues() (in module cleanlab.rank)": [[65, "cleanlab.rank.find_top_issues"]], "get_confidence_weighted_entropy_for_each_label() (in module cleanlab.rank)": [[65, "cleanlab.rank.get_confidence_weighted_entropy_for_each_label"]], "get_label_quality_ensemble_scores() (in module cleanlab.rank)": [[65, "cleanlab.rank.get_label_quality_ensemble_scores"]], "get_label_quality_scores() (in module cleanlab.rank)": [[65, "cleanlab.rank.get_label_quality_scores"]], "get_normalized_margin_for_each_label() (in module cleanlab.rank)": [[65, "cleanlab.rank.get_normalized_margin_for_each_label"]], "get_self_confidence_for_each_label() (in module cleanlab.rank)": [[65, "cleanlab.rank.get_self_confidence_for_each_label"]], "order_label_issues() (in module cleanlab.rank)": [[65, "cleanlab.rank.order_label_issues"]], "cleanlab.regression": [[66, "module-cleanlab.regression"]], "cleanlearning (class in cleanlab.regression.learn)": [[67, "cleanlab.regression.learn.CleanLearning"]], "__init_subclass__() (cleanlab.regression.learn.cleanlearning class method)": [[67, "cleanlab.regression.learn.CleanLearning.__init_subclass__"]], "cleanlab.regression.learn": [[67, "module-cleanlab.regression.learn"]], "find_label_issues() (cleanlab.regression.learn.cleanlearning method)": [[67, "cleanlab.regression.learn.CleanLearning.find_label_issues"]], "fit() (cleanlab.regression.learn.cleanlearning method)": [[67, "cleanlab.regression.learn.CleanLearning.fit"]], "get_aleatoric_uncertainty() (cleanlab.regression.learn.cleanlearning method)": [[67, "cleanlab.regression.learn.CleanLearning.get_aleatoric_uncertainty"]], "get_epistemic_uncertainty() (cleanlab.regression.learn.cleanlearning method)": [[67, "cleanlab.regression.learn.CleanLearning.get_epistemic_uncertainty"]], "get_label_issues() (cleanlab.regression.learn.cleanlearning method)": [[67, "cleanlab.regression.learn.CleanLearning.get_label_issues"]], "get_metadata_routing() (cleanlab.regression.learn.cleanlearning method)": [[67, "cleanlab.regression.learn.CleanLearning.get_metadata_routing"]], "get_params() (cleanlab.regression.learn.cleanlearning method)": [[67, "cleanlab.regression.learn.CleanLearning.get_params"]], "predict() (cleanlab.regression.learn.cleanlearning method)": [[67, "cleanlab.regression.learn.CleanLearning.predict"]], "save_space() (cleanlab.regression.learn.cleanlearning method)": [[67, "cleanlab.regression.learn.CleanLearning.save_space"]], "score() (cleanlab.regression.learn.cleanlearning method)": [[67, "cleanlab.regression.learn.CleanLearning.score"]], "set_fit_request() (cleanlab.regression.learn.cleanlearning method)": [[67, "cleanlab.regression.learn.CleanLearning.set_fit_request"]], "set_params() (cleanlab.regression.learn.cleanlearning method)": [[67, "cleanlab.regression.learn.CleanLearning.set_params"]], "set_score_request() (cleanlab.regression.learn.cleanlearning method)": [[67, "cleanlab.regression.learn.CleanLearning.set_score_request"]], "cleanlab.regression.rank": [[68, "module-cleanlab.regression.rank"]], "get_label_quality_scores() (in module cleanlab.regression.rank)": [[68, "cleanlab.regression.rank.get_label_quality_scores"]], "cleanlab.segmentation.filter": [[69, "module-cleanlab.segmentation.filter"]], "find_label_issues() (in module cleanlab.segmentation.filter)": [[69, "cleanlab.segmentation.filter.find_label_issues"]], "cleanlab.segmentation": [[70, "module-cleanlab.segmentation"]], "cleanlab.segmentation.rank": [[71, "module-cleanlab.segmentation.rank"]], "get_label_quality_scores() (in module cleanlab.segmentation.rank)": [[71, "cleanlab.segmentation.rank.get_label_quality_scores"]], "issues_from_scores() (in module cleanlab.segmentation.rank)": [[71, "cleanlab.segmentation.rank.issues_from_scores"]], "cleanlab.segmentation.summary": [[72, "module-cleanlab.segmentation.summary"]], "common_label_issues() (in module cleanlab.segmentation.summary)": [[72, "cleanlab.segmentation.summary.common_label_issues"]], "display_issues() (in module cleanlab.segmentation.summary)": [[72, "cleanlab.segmentation.summary.display_issues"]], "filter_by_class() (in module cleanlab.segmentation.summary)": [[72, "cleanlab.segmentation.summary.filter_by_class"]], "cleanlab.token_classification.filter": [[73, "module-cleanlab.token_classification.filter"]], "find_label_issues() (in module cleanlab.token_classification.filter)": [[73, "cleanlab.token_classification.filter.find_label_issues"]], "cleanlab.token_classification": [[74, "module-cleanlab.token_classification"]], "cleanlab.token_classification.rank": [[75, "module-cleanlab.token_classification.rank"]], "get_label_quality_scores() (in module cleanlab.token_classification.rank)": [[75, "cleanlab.token_classification.rank.get_label_quality_scores"]], "issues_from_scores() (in module cleanlab.token_classification.rank)": [[75, "cleanlab.token_classification.rank.issues_from_scores"]], "cleanlab.token_classification.summary": [[76, "module-cleanlab.token_classification.summary"]], "common_label_issues() (in module cleanlab.token_classification.summary)": [[76, "cleanlab.token_classification.summary.common_label_issues"]], "display_issues() (in module cleanlab.token_classification.summary)": [[76, "cleanlab.token_classification.summary.display_issues"]], "filter_by_token() (in module cleanlab.token_classification.summary)": [[76, "cleanlab.token_classification.summary.filter_by_token"]]}})