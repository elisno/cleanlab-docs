Search.setIndex({"docnames": ["cleanlab/benchmarking/index", "cleanlab/benchmarking/noise_generation", "cleanlab/classification", "cleanlab/count", "cleanlab/data_valuation", "cleanlab/datalab/datalab", "cleanlab/datalab/guide/_templates/issue_types_tip", "cleanlab/datalab/guide/custom_issue_manager", "cleanlab/datalab/guide/generating_cluster_ids", "cleanlab/datalab/guide/index", "cleanlab/datalab/guide/issue_type_description", "cleanlab/datalab/guide/table", "cleanlab/datalab/index", "cleanlab/datalab/internal/adapter/imagelab", "cleanlab/datalab/internal/adapter/index", "cleanlab/datalab/internal/data", "cleanlab/datalab/internal/data_issues", "cleanlab/datalab/internal/factory", "cleanlab/datalab/internal/index", "cleanlab/datalab/internal/issue_finder", "cleanlab/datalab/internal/issue_manager/_notices/not_registered", "cleanlab/datalab/internal/issue_manager/data_valuation", "cleanlab/datalab/internal/issue_manager/duplicate", "cleanlab/datalab/internal/issue_manager/imbalance", "cleanlab/datalab/internal/issue_manager/index", "cleanlab/datalab/internal/issue_manager/issue_manager", "cleanlab/datalab/internal/issue_manager/label", "cleanlab/datalab/internal/issue_manager/multilabel/index", "cleanlab/datalab/internal/issue_manager/multilabel/label", "cleanlab/datalab/internal/issue_manager/noniid", "cleanlab/datalab/internal/issue_manager/null", "cleanlab/datalab/internal/issue_manager/outlier", "cleanlab/datalab/internal/issue_manager/regression/index", "cleanlab/datalab/internal/issue_manager/regression/label", "cleanlab/datalab/internal/issue_manager/underperforming_group", "cleanlab/datalab/internal/model_outputs", "cleanlab/datalab/internal/report", "cleanlab/datalab/internal/task", "cleanlab/datalab/optional_dependencies", "cleanlab/dataset", "cleanlab/experimental/cifar_cnn", "cleanlab/experimental/coteaching", "cleanlab/experimental/index", "cleanlab/experimental/label_issues_batched", "cleanlab/experimental/mnist_pytorch", "cleanlab/experimental/span_classification", "cleanlab/filter", "cleanlab/internal/index", "cleanlab/internal/label_quality_utils", "cleanlab/internal/latent_algebra", "cleanlab/internal/multiannotator_utils", "cleanlab/internal/multilabel_scorer", "cleanlab/internal/multilabel_utils", "cleanlab/internal/neighbor/index", "cleanlab/internal/neighbor/knn_graph", "cleanlab/internal/neighbor/metric", "cleanlab/internal/neighbor/search", "cleanlab/internal/outlier", "cleanlab/internal/token_classification_utils", "cleanlab/internal/util", "cleanlab/internal/validation", "cleanlab/models/index", "cleanlab/models/keras", "cleanlab/multiannotator", "cleanlab/multilabel_classification/dataset", "cleanlab/multilabel_classification/filter", "cleanlab/multilabel_classification/index", "cleanlab/multilabel_classification/rank", "cleanlab/object_detection/filter", "cleanlab/object_detection/index", "cleanlab/object_detection/rank", "cleanlab/object_detection/summary", "cleanlab/outlier", "cleanlab/rank", "cleanlab/regression/index", "cleanlab/regression/learn", "cleanlab/regression/rank", "cleanlab/segmentation/filter", "cleanlab/segmentation/index", "cleanlab/segmentation/rank", "cleanlab/segmentation/summary", "cleanlab/token_classification/filter", "cleanlab/token_classification/index", "cleanlab/token_classification/rank", "cleanlab/token_classification/summary", "index", "migrating/migrate_v2", "tutorials/clean_learning/index", "tutorials/clean_learning/tabular", "tutorials/clean_learning/text", "tutorials/datalab/audio", "tutorials/datalab/datalab_advanced", "tutorials/datalab/datalab_quickstart", "tutorials/datalab/image", "tutorials/datalab/index", "tutorials/datalab/tabular", "tutorials/datalab/text", "tutorials/datalab/workflows", "tutorials/dataset_health", "tutorials/faq", "tutorials/improving_ml_performance", "tutorials/indepth_overview", "tutorials/index", "tutorials/multiannotator", "tutorials/multilabel_classification", "tutorials/object_detection", "tutorials/outliers", "tutorials/pred_probs_cross_val", "tutorials/regression", "tutorials/segmentation", "tutorials/token_classification"], "filenames": ["cleanlab/benchmarking/index.rst", "cleanlab/benchmarking/noise_generation.rst", "cleanlab/classification.rst", "cleanlab/count.rst", "cleanlab/data_valuation.rst", "cleanlab/datalab/datalab.rst", "cleanlab/datalab/guide/_templates/issue_types_tip.rst", "cleanlab/datalab/guide/custom_issue_manager.rst", "cleanlab/datalab/guide/generating_cluster_ids.rst", "cleanlab/datalab/guide/index.rst", "cleanlab/datalab/guide/issue_type_description.rst", "cleanlab/datalab/guide/table.rst", "cleanlab/datalab/index.rst", "cleanlab/datalab/internal/adapter/imagelab.rst", "cleanlab/datalab/internal/adapter/index.rst", "cleanlab/datalab/internal/data.rst", "cleanlab/datalab/internal/data_issues.rst", "cleanlab/datalab/internal/factory.rst", "cleanlab/datalab/internal/index.rst", "cleanlab/datalab/internal/issue_finder.rst", "cleanlab/datalab/internal/issue_manager/_notices/not_registered.rst", "cleanlab/datalab/internal/issue_manager/data_valuation.rst", "cleanlab/datalab/internal/issue_manager/duplicate.rst", "cleanlab/datalab/internal/issue_manager/imbalance.rst", "cleanlab/datalab/internal/issue_manager/index.rst", "cleanlab/datalab/internal/issue_manager/issue_manager.rst", "cleanlab/datalab/internal/issue_manager/label.rst", "cleanlab/datalab/internal/issue_manager/multilabel/index.rst", "cleanlab/datalab/internal/issue_manager/multilabel/label.rst", "cleanlab/datalab/internal/issue_manager/noniid.rst", "cleanlab/datalab/internal/issue_manager/null.rst", "cleanlab/datalab/internal/issue_manager/outlier.rst", "cleanlab/datalab/internal/issue_manager/regression/index.rst", "cleanlab/datalab/internal/issue_manager/regression/label.rst", "cleanlab/datalab/internal/issue_manager/underperforming_group.rst", "cleanlab/datalab/internal/model_outputs.rst", "cleanlab/datalab/internal/report.rst", "cleanlab/datalab/internal/task.rst", "cleanlab/datalab/optional_dependencies.rst", "cleanlab/dataset.rst", "cleanlab/experimental/cifar_cnn.rst", "cleanlab/experimental/coteaching.rst", "cleanlab/experimental/index.rst", "cleanlab/experimental/label_issues_batched.rst", "cleanlab/experimental/mnist_pytorch.rst", "cleanlab/experimental/span_classification.rst", "cleanlab/filter.rst", "cleanlab/internal/index.rst", "cleanlab/internal/label_quality_utils.rst", "cleanlab/internal/latent_algebra.rst", "cleanlab/internal/multiannotator_utils.rst", "cleanlab/internal/multilabel_scorer.rst", "cleanlab/internal/multilabel_utils.rst", "cleanlab/internal/neighbor/index.rst", "cleanlab/internal/neighbor/knn_graph.rst", "cleanlab/internal/neighbor/metric.rst", "cleanlab/internal/neighbor/search.rst", "cleanlab/internal/outlier.rst", "cleanlab/internal/token_classification_utils.rst", "cleanlab/internal/util.rst", "cleanlab/internal/validation.rst", "cleanlab/models/index.rst", "cleanlab/models/keras.rst", "cleanlab/multiannotator.rst", "cleanlab/multilabel_classification/dataset.rst", "cleanlab/multilabel_classification/filter.rst", "cleanlab/multilabel_classification/index.rst", "cleanlab/multilabel_classification/rank.rst", "cleanlab/object_detection/filter.rst", "cleanlab/object_detection/index.rst", "cleanlab/object_detection/rank.rst", "cleanlab/object_detection/summary.rst", "cleanlab/outlier.rst", "cleanlab/rank.rst", "cleanlab/regression/index.rst", "cleanlab/regression/learn.rst", "cleanlab/regression/rank.rst", "cleanlab/segmentation/filter.rst", "cleanlab/segmentation/index.rst", "cleanlab/segmentation/rank.rst", "cleanlab/segmentation/summary.rst", "cleanlab/token_classification/filter.rst", "cleanlab/token_classification/index.rst", "cleanlab/token_classification/rank.rst", "cleanlab/token_classification/summary.rst", "index.rst", "migrating/migrate_v2.rst", "tutorials/clean_learning/index.rst", "tutorials/clean_learning/tabular.ipynb", "tutorials/clean_learning/text.ipynb", "tutorials/datalab/audio.ipynb", "tutorials/datalab/datalab_advanced.ipynb", "tutorials/datalab/datalab_quickstart.ipynb", "tutorials/datalab/image.ipynb", "tutorials/datalab/index.rst", "tutorials/datalab/tabular.ipynb", "tutorials/datalab/text.ipynb", "tutorials/datalab/workflows.ipynb", "tutorials/dataset_health.ipynb", "tutorials/faq.ipynb", "tutorials/improving_ml_performance.ipynb", "tutorials/indepth_overview.ipynb", "tutorials/index.rst", "tutorials/multiannotator.ipynb", "tutorials/multilabel_classification.ipynb", "tutorials/object_detection.ipynb", "tutorials/outliers.ipynb", "tutorials/pred_probs_cross_val.rst", "tutorials/regression.ipynb", "tutorials/segmentation.ipynb", "tutorials/token_classification.ipynb"], "titles": ["benchmarking", "noise_generation", "classification", "count", "data_valuation", "datalab", "&lt;no title&gt;", "Creating Your Own Issues Manager", "Generating Cluster IDs", "Datalab guides", "Datalab Issue Types", "&lt;no title&gt;", "datalab", "imagelab", "adapter", "data", "data_issues", "factory", "internal", "issue_finder", "&lt;no title&gt;", "data_valuation", "duplicate", "imbalance", "issue_manager", "issue_manager", "label", "multilabel", "label", "noniid", "null", "outlier", "regression", "label", "underperforming_group", "model_outputs", "report", "task", "&lt;no title&gt;", "dataset", "cifar_cnn", "coteaching", "experimental", "label_issues_batched", "mnist_pytorch", "span_classification", "filter", "internal", "label_quality_utils", "latent_algebra", "multiannotator_utils", "multilabel_scorer", "multilabel_utils", "neighbor", "knn_graph", "metric", "search", "outlier", "token_classification_utils", "util", "validation", "models", "keras", "multiannotator", "dataset", "filter", "multilabel_classification", "rank", "filter", "object_detection", "rank", "summary", "outlier", "rank", "regression", "regression.learn", "regression.rank", "filter", "segmentation", "rank", "summary", "filter", "token_classification", "rank", "summary", "cleanlab open-source documentation", "How to migrate to versions &gt;= 2.0.0 from pre 1.0.1", "CleanLearning Tutorials", "Classification with Structured/Tabular Data and Noisy Labels", "Text Classification with Noisy Labels", "Detecting Issues in an Audio Dataset with Datalab", "Datalab: Advanced workflows to audit your data", "Datalab: A unified audit to detect all kinds of issues in data and labels", "Detecting Issues in an Image Dataset with Datalab", "Datalab Tutorials", "Detecting Issues in Tabular Data\u00a0(Numeric/Categorical columns) with Datalab", "Detecting Issues in a Text Dataset with Datalab", "Miscellaneous workflows with Datalab", "Understanding Dataset-level Labeling Issues", "FAQ", "Improving ML Performance via Data Curation with Train vs Test Splits", "The Workflows of Data-centric AI for Classification with Noisy Labels", "Tutorials", "Estimate Consensus and Annotator Quality for Data Labeled by Multiple Annotators", "Find Label Errors in Multi-Label Classification Datasets", "Finding Label Errors in Object Detection Datasets", "Detect Outliers with Cleanlab and PyTorch Image Models (timm)", "Computing Out-of-Sample Predicted Probabilities with Cross-Validation", "Find Noisy Labels in Regression Datasets", "Find Label Errors in Semantic Segmentation Datasets", "Find Label Errors in Token Classification (Text) Datasets"], "terms": {"noise_gener": [0, 86, 91, 92, 101, 103, 104], "noise_matrix_is_valid": [0, 1], "generate_noisy_label": [0, 1, 91, 92, 101, 103, 104], "generate_noise_matrix_from_trac": [0, 1, 91, 92, 101, 103, 104], "generate_n_rand_probabilities_that_sum_to_m": [0, 1], "randomly_distribute_n_balls_into_k_bin": [0, 1], "helper": [1, 19, 43, 48, 50, 51, 52, 53, 57, 58, 59, 70, 93, 97, 98, 110], "method": [1, 2, 3, 4, 5, 7, 10, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 88, 89, 90, 91, 92, 93, 95, 96, 97, 99, 100, 103, 104, 105, 106, 107, 108, 109, 110], "ar": [1, 2, 3, 4, 5, 7, 10, 13, 14, 15, 16, 17, 18, 19, 21, 23, 24, 25, 26, 27, 29, 32, 33, 35, 37, 39, 40, 42, 43, 44, 45, 46, 47, 49, 50, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 70, 71, 72, 73, 75, 76, 77, 79, 80, 81, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 95, 96, 97, 99, 100, 101, 103, 104, 105, 106, 107, 108, 110], "us": [1, 2, 3, 4, 5, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 67, 68, 70, 71, 72, 73, 75, 76, 77, 79, 80, 81, 83, 85, 86, 91, 98, 107], "benchmark": [1, 40, 85, 86, 91, 92, 101, 103, 104], "cleanlab": [1, 2, 3, 4, 5, 7, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 70, 71, 72, 73, 75, 76, 77, 79, 80, 81, 83, 84, 86, 91, 92, 97, 98, 100, 102, 107], "": [1, 2, 3, 4, 10, 21, 35, 39, 40, 44, 48, 51, 54, 56, 57, 59, 63, 64, 68, 70, 71, 72, 73, 75, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 103, 104, 105, 106, 107, 108, 109, 110], "core": [1, 43, 46, 77, 79], "algorithm": [1, 2, 8, 10, 34, 41, 45, 56, 57, 59, 63, 72, 81, 83, 85, 88, 89, 92, 95, 96, 97, 98, 99, 101, 103, 104, 106, 108, 110], "These": [1, 2, 3, 4, 5, 8, 10, 24, 40, 42, 44, 45, 46, 47, 54, 61, 63, 64, 67, 71, 72, 76, 80, 81, 83, 84, 88, 89, 90, 92, 93, 95, 96, 97, 99, 100, 101, 103, 104, 105, 106, 108, 109, 110], "introduc": [1, 10, 90, 97, 99, 100, 101], "synthet": [1, 103, 104, 109], "nois": [1, 2, 3, 39, 46, 49, 59, 64, 91, 92, 97, 98, 103, 108], "label": [1, 2, 3, 4, 5, 7, 8, 9, 11, 13, 15, 17, 18, 19, 23, 24, 25, 27, 32, 34, 37, 39, 40, 41, 43, 44, 45, 46, 48, 49, 50, 51, 52, 59, 60, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 91, 97, 100, 102, 106, 107], "classif": [1, 3, 4, 5, 7, 10, 11, 13, 15, 17, 19, 35, 37, 39, 43, 45, 46, 49, 51, 52, 59, 63, 64, 65, 66, 67, 72, 73, 81, 82, 83, 84, 85, 86, 87, 90, 91, 92, 97, 100, 102, 103, 106, 107, 108, 109], "dataset": [1, 2, 3, 4, 5, 7, 9, 10, 13, 15, 16, 17, 19, 21, 22, 23, 25, 28, 29, 30, 31, 33, 34, 42, 43, 44, 45, 46, 49, 51, 55, 59, 62, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 88, 91, 95, 100, 102, 103, 107], "specif": [1, 3, 5, 9, 13, 17, 18, 19, 30, 36, 37, 42, 54, 55, 56, 61, 65, 68, 71, 80, 84, 85, 93, 95, 96, 97, 100, 101, 105, 110], "thi": [1, 2, 3, 4, 5, 6, 7, 9, 10, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 70, 71, 72, 73, 75, 76, 77, 79, 80, 81, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 103, 104, 105, 106, 107, 108, 109, 110], "modul": [1, 3, 10, 13, 14, 16, 17, 18, 19, 24, 27, 32, 35, 36, 37, 39, 40, 41, 42, 43, 44, 46, 51, 53, 54, 56, 57, 59, 61, 63, 68, 71, 72, 73, 85, 93, 99, 104], "provid": [1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 13, 17, 19, 21, 26, 33, 37, 39, 40, 41, 43, 44, 46, 49, 53, 54, 56, 57, 59, 62, 63, 64, 65, 70, 71, 72, 73, 75, 77, 79, 80, 83, 84, 85, 88, 89, 90, 91, 92, 93, 96, 97, 99, 100, 101, 103, 106, 107, 108, 109, 110], "gener": [1, 2, 3, 7, 10, 21, 26, 28, 36, 39, 51, 54, 56, 59, 60, 72, 73, 75, 80, 85, 89, 90, 91, 92, 93, 96, 98, 99, 100, 101, 103, 104, 106, 107, 109, 110], "valid": [1, 2, 3, 5, 10, 15, 35, 37, 39, 46, 47, 49, 50, 51, 54, 56, 57, 59, 63, 65, 68, 71, 73, 75, 76, 84, 85, 86, 88, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 108, 109, 110], "matric": [1, 3, 49, 99], "which": [1, 2, 3, 5, 7, 10, 13, 15, 16, 17, 19, 21, 25, 29, 35, 36, 37, 39, 40, 44, 45, 46, 49, 51, 55, 56, 58, 59, 63, 64, 65, 68, 70, 71, 72, 73, 75, 76, 79, 80, 81, 83, 85, 86, 88, 89, 90, 91, 92, 93, 95, 96, 97, 99, 100, 101, 103, 104, 105, 106, 107, 108, 110], "learn": [1, 2, 3, 4, 5, 9, 10, 17, 19, 25, 33, 36, 41, 42, 43, 44, 46, 48, 50, 55, 56, 59, 61, 63, 65, 72, 74, 76, 79, 83, 85, 88, 89, 90, 91, 93, 95, 96, 97, 98, 100, 103, 104, 108], "i": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 16, 17, 19, 21, 22, 23, 25, 26, 28, 29, 30, 31, 33, 34, 35, 36, 37, 39, 40, 41, 43, 44, 45, 46, 48, 49, 50, 51, 54, 55, 56, 57, 58, 59, 60, 62, 63, 64, 65, 67, 68, 70, 71, 72, 73, 75, 76, 77, 79, 80, 81, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 95, 96, 98, 100, 103, 104, 105, 106, 108, 109, 110], "possibl": [1, 2, 3, 7, 10, 39, 40, 44, 46, 48, 49, 51, 65, 66, 67, 68, 70, 71, 72, 73, 75, 81, 83, 84, 92, 97, 99, 100, 101, 103, 104, 105, 108, 109, 110], "noisi": [1, 2, 3, 10, 34, 39, 41, 44, 46, 49, 59, 64, 65, 67, 73, 75, 76, 77, 79, 80, 86, 91, 92, 95, 96, 97, 99, 102, 103], "given": [1, 2, 3, 5, 10, 17, 33, 39, 40, 41, 43, 44, 45, 46, 48, 49, 50, 51, 58, 59, 63, 64, 65, 68, 70, 71, 72, 73, 75, 76, 80, 81, 83, 84, 86, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 103, 105, 106, 108, 109, 110], "matrix": [1, 2, 3, 5, 10, 13, 19, 21, 34, 39, 46, 48, 49, 52, 54, 59, 60, 65, 68, 70, 71, 72, 73, 95, 97, 105, 106], "trace": [1, 91, 92, 101, 103, 104], "valu": [1, 2, 3, 4, 5, 10, 13, 15, 16, 19, 21, 25, 29, 30, 35, 37, 39, 40, 41, 43, 44, 46, 48, 49, 51, 54, 55, 56, 57, 59, 63, 64, 65, 67, 68, 70, 71, 72, 73, 75, 76, 77, 79, 80, 81, 84, 89, 90, 92, 93, 95, 96, 99, 100, 101, 103, 104, 105, 106, 108, 109, 110], "more": [1, 2, 3, 4, 5, 7, 9, 10, 13, 16, 17, 19, 21, 29, 39, 40, 43, 44, 45, 48, 51, 54, 55, 56, 57, 59, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 75, 76, 79, 80, 81, 83, 85, 90, 91, 93, 95, 96, 97, 98, 99, 100, 103, 104, 105, 106, 109, 110], "function": [1, 2, 3, 4, 5, 7, 10, 13, 16, 17, 19, 26, 29, 33, 39, 40, 41, 43, 44, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 62, 63, 64, 65, 67, 68, 70, 71, 72, 73, 75, 76, 77, 79, 80, 81, 83, 84, 88, 89, 90, 92, 97, 98, 99, 100, 101, 103, 104, 105, 109, 110], "noise_matrix": [1, 2, 3, 10, 49, 59, 91, 92, 101, 103, 104], "py": [1, 3, 36, 40, 41, 46, 49, 51, 91, 92, 101, 103, 104], "verbos": [1, 2, 5, 7, 13, 19, 21, 22, 23, 25, 26, 28, 29, 30, 31, 33, 34, 36, 39, 43, 46, 63, 64, 65, 70, 72, 73, 75, 77, 79, 80, 84, 91, 97, 101, 103], "fals": [1, 2, 3, 5, 7, 10, 13, 15, 21, 22, 23, 25, 26, 28, 29, 31, 33, 34, 36, 37, 39, 40, 43, 44, 46, 50, 58, 59, 60, 63, 64, 65, 67, 68, 70, 71, 72, 73, 75, 77, 79, 80, 81, 89, 90, 91, 92, 93, 95, 96, 97, 99, 100, 101, 103, 105, 106, 108, 109], "sourc": [1, 2, 3, 4, 5, 7, 9, 10, 12, 13, 15, 16, 17, 19, 21, 22, 23, 25, 26, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 46, 48, 49, 50, 51, 52, 54, 55, 56, 57, 58, 59, 60, 62, 63, 64, 65, 67, 68, 70, 71, 72, 73, 75, 76, 77, 79, 80, 81, 83, 84, 88, 89, 92, 95, 96, 98, 101, 104, 106, 108], "prior": [1, 2, 3, 39, 46, 49, 51], "repres": [1, 2, 3, 7, 10, 13, 15, 19, 21, 29, 35, 37, 39, 43, 46, 49, 52, 54, 55, 57, 59, 63, 64, 65, 68, 70, 71, 72, 73, 75, 77, 79, 80, 84, 88, 89, 90, 91, 92, 93, 95, 96, 97, 99, 100, 101, 103, 104, 105, 106, 108, 110], "p": [1, 2, 3, 5, 10, 39, 46, 48, 49, 57, 59, 63, 71, 72, 73, 77, 95, 96, 97, 100, 101, 103, 110], "true_label": [1, 2, 3, 39, 49, 59, 101, 103], "k": [1, 2, 3, 4, 5, 8, 10, 13, 15, 19, 21, 22, 26, 29, 31, 34, 39, 43, 45, 46, 48, 49, 50, 51, 52, 54, 55, 56, 57, 58, 59, 63, 64, 65, 66, 67, 68, 71, 72, 73, 75, 77, 79, 80, 81, 83, 84, 88, 90, 91, 92, 97, 99, 100, 101, 103, 104, 105, 106, 109, 110], "check": [1, 2, 5, 6, 9, 10, 13, 15, 19, 30, 37, 40, 43, 44, 50, 60, 62, 68, 71, 75, 88, 89, 90, 91, 92, 93, 99, 101, 103, 104, 108], "learnabl": 1, "mean": [1, 2, 7, 8, 10, 13, 15, 16, 25, 29, 41, 44, 49, 51, 57, 70, 75, 89, 92, 96, 97, 99, 101, 103, 104, 105, 106, 108], "achiev": [1, 2, 40, 41, 44, 75, 99, 100, 103, 110], "better": [1, 5, 10, 46, 55, 63, 65, 73, 75, 76, 85, 89, 90, 92, 95, 96, 97, 99, 101, 104, 105, 106, 107, 110], "than": [1, 2, 3, 4, 7, 9, 10, 29, 31, 34, 39, 46, 55, 59, 62, 63, 68, 70, 72, 73, 75, 79, 83, 88, 90, 93, 97, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110], "random": [1, 2, 3, 7, 10, 21, 34, 43, 51, 54, 63, 73, 75, 88, 90, 91, 92, 93, 95, 97, 99, 100, 101, 103, 104, 106], "perform": [1, 2, 4, 7, 10, 29, 31, 34, 40, 44, 51, 53, 54, 55, 71, 75, 85, 88, 89, 91, 99, 101, 102, 103, 104, 107, 108], "averag": [1, 3, 5, 10, 25, 31, 39, 40, 44, 51, 57, 63, 64, 71, 72, 73, 99, 103, 106], "amount": [1, 3, 93], "paramet": [1, 2, 3, 4, 5, 9, 13, 15, 16, 17, 19, 21, 22, 23, 25, 26, 28, 29, 30, 31, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 54, 55, 56, 57, 58, 59, 60, 62, 63, 64, 65, 67, 68, 70, 71, 72, 73, 75, 76, 77, 79, 80, 81, 83, 84, 88, 89, 90, 92, 93, 96, 97, 100], "np": [1, 2, 3, 4, 5, 7, 13, 19, 21, 34, 39, 41, 43, 45, 46, 48, 49, 51, 52, 54, 56, 57, 58, 59, 60, 62, 63, 64, 65, 67, 68, 70, 71, 72, 73, 75, 76, 77, 80, 81, 83, 84, 88, 89, 90, 91, 92, 93, 95, 97, 98, 99, 100, 101, 103, 104, 105, 106, 108, 109, 110], "ndarrai": [1, 2, 3, 4, 5, 13, 19, 26, 28, 29, 33, 34, 35, 39, 41, 43, 45, 46, 48, 49, 50, 51, 52, 54, 55, 56, 57, 58, 59, 60, 63, 64, 65, 67, 68, 70, 71, 72, 73, 75, 76, 77, 79, 80, 83, 97, 110], "an": [1, 2, 3, 4, 5, 7, 9, 10, 13, 15, 16, 17, 19, 21, 22, 23, 25, 26, 28, 29, 31, 33, 34, 35, 36, 37, 39, 40, 41, 43, 44, 45, 46, 48, 49, 50, 51, 54, 56, 57, 59, 60, 62, 63, 64, 65, 67, 68, 70, 71, 72, 73, 75, 77, 79, 80, 84, 85, 88, 89, 91, 92, 95, 96, 97, 98, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110], "arrai": [1, 2, 3, 4, 5, 7, 10, 13, 15, 19, 21, 29, 35, 39, 41, 43, 44, 45, 46, 49, 50, 51, 52, 54, 55, 56, 57, 58, 59, 60, 62, 63, 64, 65, 67, 68, 70, 71, 72, 73, 75, 76, 77, 79, 80, 81, 83, 84, 88, 89, 90, 91, 92, 96, 97, 99, 101, 103, 104, 105, 106, 108, 109, 110], "shape": [1, 2, 3, 4, 5, 13, 19, 21, 39, 41, 43, 45, 46, 48, 49, 50, 51, 54, 55, 57, 58, 59, 62, 63, 64, 65, 67, 68, 70, 71, 72, 73, 75, 76, 77, 79, 80, 81, 83, 84, 90, 97, 98, 99, 101, 104, 105, 106, 109, 110], "condit": [1, 2, 3, 10, 49, 55, 58, 59, 73, 93, 101, 110], "probabl": [1, 2, 3, 5, 8, 10, 13, 19, 26, 28, 31, 34, 35, 39, 43, 44, 45, 46, 48, 49, 51, 52, 58, 59, 62, 63, 64, 65, 67, 68, 70, 71, 72, 73, 75, 77, 79, 80, 81, 83, 84, 85, 86, 98, 99, 101, 102, 104, 105, 106, 109, 110], "k_": [1, 2, 3, 49, 59], "k_y": [1, 2, 3, 49, 59], "contain": [1, 2, 3, 5, 10, 13, 15, 16, 21, 22, 23, 25, 26, 28, 29, 30, 31, 33, 34, 35, 36, 37, 39, 40, 41, 43, 44, 46, 48, 49, 53, 54, 58, 59, 62, 63, 64, 65, 67, 68, 70, 71, 72, 73, 75, 76, 79, 80, 81, 83, 84, 86, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 108, 109], "fraction": [1, 2, 3, 10, 23, 41, 49, 59, 63, 75, 95, 99, 100], "exampl": [1, 2, 3, 4, 5, 7, 8, 10, 13, 15, 16, 17, 19, 21, 22, 23, 25, 26, 28, 29, 30, 31, 33, 34, 36, 37, 39, 40, 41, 43, 44, 45, 46, 48, 49, 51, 52, 54, 57, 58, 59, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 75, 76, 77, 79, 80, 81, 83, 84, 85, 86, 88, 89, 90, 91, 92, 95, 96, 97, 98, 100, 103, 104, 105, 107, 108, 109, 110], "everi": [1, 2, 3, 4, 5, 10, 13, 19, 40, 44, 46, 49, 58, 59, 65, 73, 75, 76, 88, 90, 91, 92, 93, 95, 96, 99, 103, 105, 107, 109, 110], "class": [1, 2, 3, 4, 5, 7, 9, 13, 15, 16, 17, 19, 21, 22, 23, 25, 26, 28, 29, 30, 31, 33, 34, 35, 36, 37, 39, 40, 41, 43, 44, 45, 46, 48, 49, 50, 51, 52, 56, 58, 59, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 75, 77, 79, 80, 81, 83, 84, 85, 88, 89, 90, 91, 92, 93, 95, 96, 98, 99, 100, 103, 104, 105, 106, 107, 108, 110], "other": [1, 2, 3, 5, 10, 13, 19, 25, 30, 39, 40, 42, 43, 44, 46, 49, 52, 54, 59, 60, 61, 63, 64, 67, 71, 72, 73, 75, 80, 88, 89, 90, 91, 92, 93, 95, 96, 97, 99, 100, 101, 104, 106, 109, 110], "assum": [1, 2, 3, 15, 46, 49, 54, 58, 59, 73, 77, 80, 97, 99, 100, 104, 106, 108, 109, 110], "column": [1, 2, 3, 5, 9, 11, 13, 15, 16, 33, 39, 43, 46, 49, 51, 52, 55, 58, 59, 63, 64, 65, 67, 68, 71, 72, 73, 75, 80, 81, 83, 84, 88, 89, 90, 91, 92, 93, 96, 97, 98, 99, 100, 101, 103, 104, 105, 108, 109, 110], "sum": [1, 2, 3, 29, 34, 35, 39, 49, 51, 59, 64, 65, 67, 70, 75, 91, 92, 93, 99, 101, 103, 104, 109, 110], "1": [1, 2, 3, 4, 5, 7, 10, 11, 13, 15, 19, 21, 22, 23, 25, 26, 28, 29, 30, 31, 33, 34, 35, 36, 37, 39, 40, 41, 43, 44, 45, 46, 48, 49, 50, 51, 52, 54, 57, 58, 59, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 75, 76, 77, 79, 80, 81, 83, 84, 98, 99, 107], "each": [1, 2, 3, 4, 5, 7, 8, 9, 13, 15, 16, 17, 19, 23, 25, 26, 28, 29, 34, 35, 36, 39, 40, 41, 43, 44, 45, 46, 48, 49, 51, 52, 54, 56, 57, 59, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 75, 76, 77, 79, 80, 81, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110], "true": [1, 2, 3, 5, 7, 10, 13, 15, 21, 22, 23, 25, 26, 28, 29, 31, 33, 34, 36, 37, 39, 40, 41, 43, 44, 46, 49, 51, 54, 58, 59, 60, 62, 63, 64, 65, 68, 70, 71, 72, 73, 75, 77, 79, 80, 84, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 103, 104, 105, 106, 108, 109, 110], "return": [1, 2, 3, 4, 5, 10, 13, 15, 16, 17, 19, 21, 22, 23, 25, 26, 28, 29, 30, 31, 33, 34, 36, 37, 39, 40, 43, 44, 45, 46, 48, 49, 50, 51, 52, 54, 55, 56, 57, 58, 59, 60, 62, 63, 64, 65, 67, 68, 70, 71, 72, 73, 75, 76, 77, 79, 80, 81, 83, 84, 85, 89, 90, 91, 92, 93, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 108, 109, 110], "type": [1, 2, 3, 4, 5, 6, 7, 12, 13, 15, 16, 17, 19, 21, 22, 23, 25, 26, 28, 29, 30, 31, 33, 34, 35, 36, 37, 39, 40, 42, 43, 44, 45, 46, 48, 49, 50, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 63, 64, 65, 67, 68, 70, 71, 72, 73, 75, 76, 77, 79, 80, 81, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 99, 100, 104, 105, 108, 109, 110], "bool": [1, 2, 3, 5, 15, 21, 22, 23, 25, 26, 28, 29, 31, 33, 34, 36, 37, 39, 40, 43, 44, 46, 51, 54, 58, 59, 63, 65, 67, 68, 70, 71, 72, 73, 75, 77, 79, 80, 84], "is_valid": 1, "whether": [1, 3, 5, 10, 13, 15, 16, 21, 22, 23, 25, 26, 28, 29, 31, 33, 34, 36, 40, 43, 44, 46, 54, 59, 63, 64, 65, 67, 68, 84, 89, 90, 92, 93, 95, 96, 97, 98, 99, 100, 101, 108, 110], "from": [1, 2, 3, 4, 5, 7, 8, 9, 10, 12, 13, 15, 16, 17, 19, 21, 25, 26, 30, 33, 34, 35, 36, 38, 39, 40, 41, 43, 44, 45, 46, 49, 51, 52, 54, 55, 57, 58, 59, 63, 65, 67, 70, 71, 72, 73, 75, 76, 81, 83, 84, 85, 90, 93, 95, 96, 97, 98, 99, 103, 104, 105, 106, 107, 109, 110], "perfect": [1, 2, 39, 75, 101, 105], "exactli": [1, 3, 10, 39, 40, 44, 46, 66, 72, 91, 92, 93, 95, 96, 100, 101], "yield": [1, 40, 44, 100], "between": [1, 5, 9, 13, 14, 18, 19, 24, 25, 27, 29, 32, 35, 39, 40, 41, 42, 43, 44, 46, 47, 48, 50, 54, 55, 56, 57, 61, 63, 64, 67, 70, 72, 73, 75, 76, 79, 83, 84, 86, 89, 90, 91, 92, 93, 95, 96, 97, 98, 100, 101, 103, 104, 105, 106, 108, 109, 110], "below": [1, 3, 4, 5, 10, 39, 40, 43, 44, 46, 48, 51, 57, 63, 64, 65, 70, 71, 79, 83, 86, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110], "we": [1, 2, 3, 5, 7, 10, 13, 16, 25, 40, 43, 44, 46, 51, 59, 60, 62, 63, 70, 71, 73, 85, 86, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 103, 104, 105, 106, 107, 108, 109, 110], "loop": [1, 3, 49, 59, 93, 105], "implement": [1, 2, 3, 4, 9, 17, 25, 40, 41, 43, 44, 49, 53, 55, 56, 59, 72, 75, 85, 88, 90, 91, 95, 100, 106, 107], "what": [1, 5, 9, 10, 13, 19, 36, 39, 41, 43, 46, 63, 64, 68, 70, 88, 89, 90, 91, 92, 93, 95, 96, 97, 100, 103, 104, 105, 106, 108, 109, 110], "doe": [1, 2, 3, 7, 10, 43, 44, 46, 51, 54, 57, 60, 70, 71, 75, 77, 79, 83, 89, 90, 91, 92, 93, 95, 96, 97, 98, 100, 104, 108, 109], "do": [1, 2, 5, 9, 10, 39, 43, 44, 59, 60, 72, 73, 77, 88, 89, 90, 91, 92, 93, 95, 96, 97, 100, 103, 104, 105, 106, 108, 109, 110], "fast": 1, "explain": [1, 10, 97], "python": [1, 2, 44, 62, 75, 91, 92, 98, 106], "pseudocod": [1, 107], "happen": [1, 10, 46, 65, 96, 103, 109], "n": [1, 2, 3, 5, 7, 10, 39, 40, 43, 44, 46, 48, 49, 50, 51, 54, 55, 57, 58, 59, 63, 64, 65, 67, 68, 70, 71, 72, 73, 75, 76, 77, 79, 80, 83, 88, 89, 90, 93, 96, 97, 98, 99, 103, 104, 105, 108, 109, 110], "without": [1, 2, 5, 9, 10, 15, 17, 23, 40, 44, 56, 67, 75, 85, 89, 90, 96, 97, 99, 100, 101, 105, 106], "ani": [1, 2, 3, 5, 7, 9, 10, 13, 15, 16, 17, 19, 21, 22, 23, 25, 26, 28, 29, 30, 31, 33, 34, 39, 40, 43, 44, 46, 48, 50, 57, 58, 59, 62, 63, 65, 67, 68, 70, 71, 73, 75, 77, 79, 80, 85, 88, 89, 90, 91, 92, 93, 95, 96, 97, 99, 100, 103, 104, 105, 106, 107, 108, 109], "distinct": [1, 10, 21, 59, 110], "natur": [1, 10, 103, 106], "number": [1, 2, 3, 4, 5, 7, 8, 10, 13, 15, 16, 19, 21, 22, 23, 25, 26, 28, 29, 31, 33, 34, 36, 37, 39, 40, 41, 43, 44, 46, 49, 50, 51, 52, 54, 55, 56, 57, 58, 59, 63, 64, 65, 67, 68, 70, 71, 72, 73, 75, 76, 77, 79, 80, 83, 84, 86, 90, 91, 92, 93, 95, 96, 97, 99, 100, 101, 103, 104, 105, 109, 110], "0": [1, 2, 3, 4, 5, 7, 10, 15, 21, 22, 23, 25, 26, 28, 29, 30, 31, 33, 34, 35, 39, 40, 41, 43, 44, 45, 46, 48, 49, 50, 51, 52, 54, 57, 58, 59, 63, 64, 65, 67, 68, 70, 71, 72, 73, 75, 76, 77, 79, 80, 81, 83, 84, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110], "count_joint": 1, "len": [1, 2, 3, 7, 39, 43, 49, 58, 59, 60, 72, 73, 75, 88, 89, 91, 92, 93, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 108, 110], "y": [1, 2, 3, 5, 8, 21, 33, 34, 44, 49, 51, 59, 60, 62, 71, 75, 76, 89, 90, 91, 92, 95, 97, 99, 101, 103, 104, 106, 108], "round": [1, 43, 46, 59, 75, 97, 99, 100, 108], "astyp": [1, 100, 103], "int": [1, 2, 3, 4, 5, 7, 13, 19, 21, 22, 23, 25, 26, 28, 29, 30, 31, 33, 34, 36, 39, 40, 41, 43, 44, 46, 51, 52, 54, 55, 56, 57, 58, 59, 60, 64, 65, 67, 71, 72, 73, 75, 77, 79, 80, 81, 84, 90, 91, 93, 97, 100, 105, 106], "rang": [1, 3, 5, 7, 10, 15, 49, 51, 57, 59, 71, 75, 76, 93, 97, 98, 99, 101, 103, 104, 105, 106, 108, 109, 110], "idx_flip": 1, "where": [1, 2, 3, 5, 7, 10, 13, 15, 16, 19, 25, 39, 43, 46, 49, 50, 51, 52, 54, 55, 57, 58, 59, 60, 63, 64, 65, 67, 68, 70, 71, 72, 73, 75, 76, 77, 79, 80, 81, 83, 89, 90, 93, 95, 96, 97, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110], "pragma": 1, "cover": [1, 3, 86, 97, 98, 99], "choic": [1, 8, 46, 55, 57, 93, 99, 104, 106], "replac": [1, 58, 62, 73, 88, 89, 91, 92, 93, 96, 97, 98, 99, 103, 106], "max_trace_prob": 1, "min_trace_prob": 1, "1e": [1, 3, 54, 73, 90, 91, 92], "05": [1, 10, 29, 33, 58, 71, 75, 81, 83, 95, 98, 99, 100, 101, 105, 110], "max_noise_r": 1, "99999": 1, "min_noise_r": 1, "valid_noise_matrix": [1, 91, 92, 101, 103, 104], "none": [1, 2, 3, 4, 5, 7, 10, 11, 13, 15, 16, 19, 21, 22, 23, 25, 26, 28, 29, 30, 31, 33, 34, 36, 37, 39, 40, 41, 43, 44, 45, 46, 48, 49, 50, 51, 52, 54, 56, 57, 58, 59, 60, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 75, 77, 79, 80, 83, 84, 91, 92, 93, 97, 99, 100, 101, 103, 104, 109], "frac_zero_noise_r": 1, "seed": [1, 2, 3, 10, 29, 42, 44, 51, 75, 88, 90, 91, 92, 95, 97, 98, 100, 101, 103, 104], "max_it": [1, 89, 90, 96, 106], "10000": [1, 43, 98, 99], "x": [1, 2, 3, 5, 10, 21, 22, 23, 25, 26, 28, 29, 31, 33, 34, 39, 40, 41, 44, 46, 48, 49, 51, 54, 56, 58, 59, 60, 62, 63, 65, 71, 72, 73, 75, 77, 88, 89, 90, 91, 92, 93, 95, 97, 98, 99, 100, 101, 103, 104, 106, 108], "diagon": [1, 3, 5, 46, 49, 59], "equal": [1, 3, 10, 15, 54, 65, 70, 80, 107], "creat": [1, 2, 9, 13, 19, 21, 40, 43, 44, 46, 59, 75, 85, 89, 90, 93, 95, 96, 97, 99, 100, 109, 110], "impli": [1, 10, 39, 64, 71], "float": [1, 2, 10, 21, 22, 23, 25, 26, 28, 29, 30, 31, 33, 34, 39, 40, 41, 42, 43, 44, 46, 48, 50, 51, 57, 58, 59, 63, 64, 65, 67, 70, 71, 75, 79, 83, 90, 91, 92, 100, 101, 103, 104], "entri": [1, 3, 5, 10, 39, 40, 44, 46, 48, 52, 54, 57, 59, 63, 64, 65, 68, 88, 89, 95, 96, 101, 104, 105, 108], "maximum": [1, 10, 13, 72, 80, 84, 97, 109], "minimum": [1, 8, 10, 13, 23, 46, 48, 65, 70, 83, 97], "noise_r": 1, "non": [1, 2, 3, 5, 7, 9, 13, 19, 29, 40, 44, 46, 54, 70, 75, 91, 99, 100, 101, 103, 105, 106], "default": [1, 2, 3, 4, 5, 7, 10, 11, 13, 17, 19, 31, 33, 36, 39, 40, 41, 43, 44, 46, 48, 49, 51, 53, 54, 55, 56, 57, 59, 62, 63, 64, 65, 67, 68, 70, 71, 72, 73, 75, 76, 77, 79, 80, 81, 83, 84, 91, 93, 97, 99, 108, 109], "If": [1, 2, 3, 4, 5, 10, 13, 15, 16, 19, 29, 31, 37, 39, 40, 43, 44, 46, 48, 49, 51, 54, 55, 58, 59, 62, 63, 64, 65, 68, 70, 71, 72, 75, 76, 77, 79, 80, 83, 84, 85, 86, 88, 89, 90, 91, 93, 97, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110], "have": [1, 2, 3, 4, 5, 7, 9, 10, 13, 19, 24, 27, 29, 32, 39, 40, 42, 43, 44, 46, 49, 51, 54, 59, 62, 63, 64, 65, 68, 70, 71, 72, 73, 75, 76, 80, 84, 85, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 108, 109, 110], "all": [1, 2, 3, 5, 7, 8, 9, 10, 13, 16, 17, 19, 25, 36, 39, 40, 43, 44, 45, 46, 49, 51, 52, 54, 58, 59, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 75, 77, 79, 80, 81, 83, 84, 86, 88, 89, 90, 91, 93, 95, 96, 97, 98, 99, 100, 103, 104, 105, 106, 107, 108, 109, 110], "necessari": [1, 2, 3, 4, 7, 10, 15, 58, 91, 97], "In": [1, 2, 3, 5, 10, 39, 40, 43, 44, 54, 62, 63, 64, 66, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110], "particular": [1, 5, 6, 10, 13, 16, 17, 19, 22, 23, 25, 29, 30, 31, 34, 40, 44, 59, 63, 67, 71, 75, 80, 84, 85, 88, 89, 90, 92, 96, 99, 103, 104, 106, 108], "satisfi": [1, 3, 39], "requir": [1, 2, 5, 7, 8, 9, 10, 11, 12, 15, 33, 38, 40, 41, 42, 43, 44, 46, 49, 54, 56, 59, 61, 62, 65, 72, 73, 75, 77, 85, 86, 90, 97, 98, 99, 100, 101, 107], "argument": [1, 2, 3, 5, 10, 11, 13, 19, 26, 30, 33, 34, 35, 40, 43, 44, 45, 46, 51, 54, 56, 60, 62, 63, 64, 65, 67, 70, 71, 72, 73, 75, 79, 80, 81, 83, 89, 92, 93, 96, 97, 98, 99, 104, 105, 108, 110], "when": [1, 2, 3, 4, 5, 10, 15, 17, 26, 29, 40, 44, 46, 49, 51, 54, 56, 57, 59, 62, 65, 67, 68, 70, 72, 73, 75, 76, 88, 89, 91, 92, 93, 95, 96, 97, 98, 100, 103, 107, 108, 109, 110], "The": [1, 2, 3, 4, 5, 7, 8, 10, 13, 15, 16, 17, 19, 21, 22, 23, 25, 26, 28, 29, 30, 31, 33, 34, 35, 36, 37, 39, 40, 43, 44, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 62, 63, 64, 65, 68, 70, 71, 72, 73, 75, 77, 80, 81, 83, 85, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 108, 109, 110], "rate": [1, 2, 3, 10, 41, 59, 90, 110], "set": [1, 2, 3, 5, 9, 10, 13, 15, 16, 19, 20, 21, 22, 23, 25, 26, 28, 29, 30, 31, 33, 34, 36, 39, 40, 43, 44, 46, 50, 51, 53, 54, 55, 57, 59, 62, 63, 65, 68, 70, 71, 72, 73, 75, 77, 79, 80, 88, 89, 91, 92, 95, 96, 97, 99, 100, 103, 104, 106, 107, 108, 109, 110], "note": [1, 2, 3, 7, 8, 10, 11, 15, 30, 34, 37, 40, 43, 44, 45, 46, 51, 54, 59, 62, 63, 68, 70, 71, 72, 73, 75, 76, 80, 86, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 100, 101, 103, 104, 105, 106, 108, 109, 110], "you": [1, 2, 3, 5, 7, 9, 10, 13, 17, 19, 39, 40, 42, 43, 44, 46, 51, 56, 61, 62, 63, 65, 68, 70, 71, 72, 73, 75, 76, 77, 80, 81, 84, 85, 86, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 103, 104, 105, 106, 107, 108, 109, 110], "high": [1, 2, 10, 19, 43, 46, 54, 55, 59, 70, 73, 75, 88, 89, 91, 92, 93, 97, 98, 100, 101, 105, 108, 109, 110], "mai": [1, 2, 3, 4, 5, 10, 13, 16, 24, 25, 27, 32, 35, 39, 40, 42, 43, 44, 46, 49, 51, 54, 59, 63, 64, 68, 70, 71, 72, 73, 75, 77, 80, 84, 86, 89, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 107, 108, 109, 110], "imposs": [1, 10, 101], "also": [1, 2, 3, 5, 7, 9, 10, 25, 37, 39, 40, 43, 44, 46, 51, 58, 62, 63, 72, 75, 80, 83, 84, 85, 88, 89, 90, 91, 92, 93, 95, 96, 98, 99, 100, 101, 103, 104, 105, 107, 108, 109, 110], "low": [1, 10, 13, 59, 63, 85, 91, 92, 96, 97, 101, 105, 109], "zero": [1, 3, 5, 40, 44, 48, 54, 59, 60, 91, 93, 104, 105, 106], "forc": [1, 2, 3, 5, 44, 91, 110], "instead": [1, 2, 3, 10, 13, 16, 19, 36, 39, 40, 43, 44, 46, 49, 59, 62, 63, 65, 67, 71, 72, 73, 75, 76, 79, 81, 83, 86, 88, 89, 90, 93, 95, 97, 99, 100, 101, 104, 105, 106, 108, 109, 110], "onli": [1, 2, 3, 4, 5, 7, 10, 11, 13, 19, 26, 29, 33, 39, 40, 43, 44, 45, 46, 48, 49, 54, 55, 57, 58, 59, 60, 62, 63, 72, 73, 75, 77, 79, 83, 84, 85, 89, 90, 91, 92, 93, 96, 97, 100, 103, 104, 105, 106, 107, 108, 109, 110], "guarante": [1, 3, 5, 14, 18, 24, 27, 32, 40, 42, 44, 47, 49, 61, 86], "produc": [1, 2, 5, 9, 10, 13, 19, 51, 63, 73, 75, 77, 79, 85, 88, 89, 90, 93, 95, 96, 97, 99, 100, 101, 103, 104, 105, 106, 107, 109, 110], "higher": [1, 5, 10, 39, 46, 48, 49, 51, 57, 62, 63, 64, 75, 92, 96, 97, 99, 105], "opposit": [1, 110], "occur": [1, 3, 10, 39, 58, 70, 91, 92, 93, 99, 100, 106], "small": [1, 3, 10, 39, 43, 51, 54, 57, 59, 64, 71, 89, 93, 96, 98, 100, 104, 106], "numpi": [1, 3, 4, 5, 7, 10, 15, 21, 34, 35, 43, 44, 45, 51, 54, 57, 58, 60, 62, 67, 70, 75, 76, 81, 83, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 108, 109, 110], "max": [1, 46, 72, 73, 92, 93, 97, 100, 106], "tri": [1, 40, 44, 107], "befor": [1, 2, 3, 10, 40, 44, 57, 59, 72, 75, 80, 88, 89, 96, 97, 99, 100, 101, 103, 106, 108], "option": [1, 2, 3, 4, 5, 7, 8, 9, 13, 15, 16, 19, 26, 31, 33, 39, 40, 43, 44, 46, 49, 51, 54, 56, 57, 58, 59, 60, 62, 63, 64, 65, 67, 68, 70, 71, 72, 73, 75, 77, 79, 80, 83, 84, 85, 88, 90, 91, 92, 93, 95, 99, 101, 104, 108, 109], "left": [1, 2, 46, 48, 57, 59, 65, 68, 71, 91, 92, 104, 105, 106, 109], "stochast": 1, "exceed": 1, "m": [1, 5, 40, 44, 50, 51, 54, 55, 63, 68, 70, 71, 72, 91, 92, 98, 103, 104, 105, 110], "max_prob": 1, "min_prob": 1, "dirichlet": 1, "ones": [1, 40, 44, 62, 99, 101, 109], "length": [1, 5, 15, 29, 30, 39, 41, 46, 59, 65, 68, 72, 73, 75, 77, 80, 84, 88, 90, 97, 100, 104, 106, 109, 110], "must": [1, 2, 3, 4, 5, 7, 13, 19, 39, 40, 41, 42, 44, 46, 49, 51, 52, 57, 59, 61, 62, 63, 64, 65, 72, 73, 75, 77, 79, 80, 81, 83, 84, 90, 97, 100, 103, 107, 109, 110], "max_balls_per_bin": 1, "min_balls_per_bin": 1, "uniformli": 1, "integ": [1, 2, 3, 10, 15, 39, 43, 46, 52, 59, 60, 63, 65, 71, 77, 79, 80, 81, 83, 84, 88, 89, 90, 99, 100, 103, 104, 105, 109, 110], "ball": [1, 98], "bin": [1, 3, 65, 91, 92, 106], "ensur": [1, 2, 10, 40, 44, 54, 56, 57, 59, 60, 62, 70, 73, 75, 88, 89, 90, 91, 92, 93, 96, 97, 99, 100, 101, 106, 107, 108], "most": [1, 3, 5, 7, 10, 13, 19, 39, 43, 46, 51, 62, 63, 64, 65, 68, 70, 71, 72, 73, 76, 79, 83, 84, 85, 86, 88, 89, 90, 91, 92, 95, 96, 97, 99, 100, 101, 103, 104, 105, 106, 108, 109], "least": [1, 4, 10, 21, 34, 39, 43, 63, 64, 70, 73, 83, 93, 99, 100, 103, 106, 109], "int_arrai": [1, 59], "can": [2, 3, 4, 5, 7, 8, 9, 13, 16, 17, 19, 36, 37, 39, 40, 41, 42, 43, 44, 46, 50, 51, 52, 54, 55, 56, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 75, 76, 77, 80, 81, 84, 85, 86, 88, 89, 90, 91, 93, 95, 96, 97, 100, 104, 105, 106, 107, 108, 109, 110], "model": [2, 3, 4, 5, 9, 10, 11, 13, 19, 21, 33, 35, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 56, 58, 62, 63, 64, 65, 67, 68, 70, 71, 72, 73, 75, 76, 77, 79, 80, 81, 83, 84, 86, 91, 92, 97, 98, 102, 107, 109, 110], "For": [2, 3, 5, 7, 9, 10, 12, 13, 19, 25, 38, 39, 40, 43, 44, 46, 49, 51, 54, 57, 59, 62, 63, 64, 65, 67, 68, 70, 71, 72, 73, 75, 77, 79, 81, 83, 84, 85, 88, 89, 90, 92, 93, 95, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 109, 110], "regular": [2, 3, 43, 62], "multi": [2, 3, 4, 10, 35, 39, 40, 43, 44, 46, 50, 51, 52, 59, 60, 64, 65, 66, 67, 72, 73, 85, 97, 99, 100, 101, 102], "task": [2, 5, 7, 10, 11, 12, 13, 15, 17, 18, 19, 28, 33, 36, 39, 43, 49, 51, 52, 57, 59, 63, 65, 73, 75, 85, 89, 90, 96, 97, 98, 99, 100, 101, 104, 106, 108, 109, 110], "cleanlearn": [2, 3, 10, 26, 33, 40, 59, 62, 74, 75, 76, 85, 86, 88, 89, 100, 108], "wrap": [2, 40, 44, 53, 62, 72, 75, 85, 88, 89, 91, 92, 95, 96, 101, 108], "instanc": [2, 3, 5, 6, 7, 10, 13, 16, 19, 21, 22, 23, 25, 26, 28, 29, 30, 31, 33, 34, 36, 40, 44, 51, 62, 71, 72, 75, 80, 88, 90, 91, 92, 93, 95, 96, 97, 99, 100, 101, 105], "sklearn": [2, 3, 4, 5, 8, 10, 21, 34, 39, 44, 51, 55, 56, 59, 62, 72, 75, 76, 85, 88, 89, 90, 91, 92, 93, 95, 96, 97, 99, 100, 101, 103, 104, 106, 107, 108], "classifi": [2, 3, 44, 51, 59, 63, 66, 72, 73, 85, 86, 88, 89, 90, 95, 96, 99, 103, 104, 106, 107, 109, 110], "adher": [2, 44, 75], "estim": [2, 3, 4, 5, 9, 13, 16, 25, 39, 43, 44, 46, 49, 59, 63, 64, 65, 70, 72, 75, 77, 79, 83, 85, 86, 90, 91, 92, 93, 95, 96, 97, 99, 100, 102, 105, 106, 107, 108, 109, 110], "api": [2, 3, 17, 62, 68, 71, 72, 75, 86, 97, 99, 108], "defin": [2, 3, 5, 7, 10, 17, 25, 39, 40, 41, 43, 44, 46, 73, 75, 77, 85, 91, 92, 95, 98, 99, 100, 103, 106, 110], "four": [2, 10, 98, 101, 110], "clf": [2, 3, 5, 51, 75, 85, 88, 95, 97, 99, 100, 101, 104], "fit": [2, 3, 5, 8, 10, 21, 42, 44, 54, 56, 61, 62, 72, 74, 75, 85, 88, 89, 92, 93, 95, 96, 97, 98, 99, 100, 101, 103, 104, 106, 107, 108, 110], "sample_weight": [2, 44, 75, 101], "predict_proba": [2, 5, 39, 42, 44, 51, 61, 62, 88, 90, 91, 92, 95, 96, 97, 99, 100, 101, 103, 104, 106], "predict": [2, 3, 4, 5, 8, 9, 10, 11, 13, 19, 25, 26, 28, 31, 33, 34, 35, 37, 39, 42, 43, 44, 45, 46, 48, 49, 51, 52, 58, 59, 61, 62, 63, 64, 65, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 83, 84, 85, 86, 89, 98, 99, 101, 102, 106, 108, 109, 110], "score": [2, 3, 4, 5, 7, 13, 16, 21, 22, 23, 25, 26, 28, 29, 30, 31, 33, 34, 39, 43, 45, 46, 48, 51, 57, 63, 64, 65, 67, 68, 70, 71, 72, 73, 74, 75, 76, 79, 81, 83, 85, 86, 88, 89, 90, 91, 92, 93, 95, 96, 98, 99, 100, 106, 108], "data": [2, 3, 4, 5, 7, 8, 9, 12, 13, 16, 17, 18, 19, 21, 22, 23, 25, 26, 28, 29, 30, 31, 33, 34, 35, 36, 39, 41, 42, 43, 44, 45, 46, 51, 52, 54, 55, 56, 59, 61, 62, 63, 64, 65, 66, 70, 72, 73, 74, 75, 80, 81, 82, 83, 84, 86, 93, 94, 102], "e": [2, 3, 5, 10, 15, 25, 35, 39, 40, 43, 44, 46, 49, 51, 52, 54, 59, 60, 63, 64, 65, 66, 68, 71, 72, 73, 75, 77, 85, 88, 89, 90, 91, 92, 93, 95, 96, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108], "featur": [2, 3, 4, 5, 8, 10, 11, 13, 19, 21, 22, 26, 29, 30, 31, 33, 34, 51, 54, 55, 56, 59, 72, 75, 85, 88, 91, 92, 95, 96, 97, 99, 100, 101, 103, 104, 108], "element": [2, 3, 5, 39, 45, 46, 48, 59, 63, 65, 73, 80, 81, 83, 89, 90, 96, 97, 99, 110], "first": [2, 5, 10, 20, 29, 30, 39, 43, 51, 54, 59, 63, 64, 68, 71, 73, 75, 85, 88, 89, 90, 91, 93, 95, 97, 99, 100, 103, 104, 105, 106, 108, 109, 110], "index": [2, 10, 29, 39, 46, 53, 54, 56, 58, 59, 60, 64, 73, 75, 80, 83, 84, 89, 90, 91, 92, 93, 95, 97, 98, 99, 100, 101, 103, 104, 105, 106, 108, 109, 110], "should": [2, 3, 5, 7, 10, 17, 25, 29, 34, 35, 39, 40, 43, 44, 46, 48, 49, 51, 54, 56, 57, 58, 59, 62, 63, 64, 67, 68, 70, 71, 72, 73, 75, 76, 80, 81, 83, 84, 88, 89, 90, 91, 92, 93, 95, 96, 97, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110], "correspond": [2, 3, 5, 10, 13, 16, 17, 19, 21, 22, 23, 25, 26, 28, 29, 30, 31, 33, 34, 37, 39, 40, 43, 44, 45, 46, 48, 49, 51, 54, 58, 59, 63, 64, 65, 67, 68, 70, 71, 72, 73, 75, 77, 80, 81, 83, 84, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 108, 109, 110], "differ": [2, 5, 7, 10, 13, 14, 16, 18, 24, 27, 29, 30, 32, 39, 40, 42, 43, 44, 46, 47, 51, 54, 57, 59, 60, 61, 63, 68, 70, 72, 75, 88, 90, 91, 92, 93, 95, 96, 97, 98, 100, 101, 103, 104, 106, 107, 108], "sampl": [2, 3, 5, 8, 10, 13, 19, 23, 34, 46, 48, 51, 54, 55, 56, 65, 68, 71, 73, 75, 76, 85, 86, 89, 97, 98, 99, 101, 102, 104, 105, 108, 109, 110], "size": [2, 10, 34, 40, 43, 44, 46, 51, 54, 55, 65, 70, 71, 75, 77, 79, 89, 93, 95, 99, 101, 103, 104, 105, 107, 109], "here": [2, 5, 7, 10, 17, 43, 46, 49, 62, 63, 64, 65, 67, 68, 71, 72, 83, 85, 86, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110], "re": [2, 5, 40, 44, 56, 58, 63, 75, 85, 88, 89, 90, 91, 95, 96, 97, 99, 100, 108, 109, 110], "weight": [2, 10, 40, 41, 44, 51, 54, 63, 70, 73, 75, 89, 90, 91, 92, 96], "loss": [2, 41, 62, 73, 75, 93, 100], "while": [2, 3, 10, 40, 43, 44, 50, 51, 59, 75, 85, 93, 97, 99, 100, 101, 103, 104, 108], "train": [2, 3, 4, 5, 9, 10, 13, 19, 21, 35, 40, 41, 42, 44, 51, 59, 62, 63, 68, 71, 72, 75, 76, 86, 91, 92, 93, 95, 96, 98, 101, 102, 103, 104, 105, 107, 109, 110], "support": [2, 3, 4, 5, 13, 15, 17, 36, 37, 43, 45, 51, 59, 60, 62, 72, 73, 83, 85, 86, 90, 91, 92, 93, 97, 99], "your": [2, 3, 5, 9, 10, 13, 19, 39, 40, 42, 43, 44, 46, 51, 56, 59, 61, 62, 63, 64, 65, 67, 72, 73, 75, 76, 77, 79, 80, 86, 88, 89, 90, 93, 95, 98, 100, 103, 104, 105, 106, 107, 108, 109, 110], "recommend": [2, 5, 7, 10, 13, 16, 19, 43, 46, 63, 91, 92, 93, 97, 99, 100, 107, 108], "furthermor": 2, "correctli": [2, 3, 10, 39, 40, 44, 46, 49, 54, 60, 64, 65, 70, 71, 75, 77, 89, 96, 97, 99, 104, 105, 108, 109], "clonabl": [2, 75], "via": [2, 5, 7, 10, 11, 13, 16, 19, 21, 25, 39, 41, 43, 44, 51, 55, 59, 63, 68, 71, 72, 73, 75, 76, 79, 83, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 102, 104, 105, 106, 107, 108, 109, 110], "base": [2, 3, 4, 5, 7, 10, 13, 15, 16, 19, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 33, 34, 35, 36, 37, 40, 43, 44, 45, 46, 49, 50, 51, 54, 55, 57, 58, 59, 60, 62, 63, 64, 65, 67, 70, 72, 73, 75, 76, 79, 81, 83, 85, 88, 90, 91, 92, 93, 95, 96, 97, 98, 100, 101, 103, 104, 105, 106, 108, 109, 110], "clone": [2, 75, 104], "intern": [2, 3, 7, 10, 11, 12, 13, 14, 15, 16, 17, 19, 21, 22, 23, 25, 26, 28, 29, 30, 31, 33, 34, 35, 36, 37, 43, 48, 49, 50, 51, 52, 54, 55, 56, 57, 58, 59, 60, 67, 71, 75, 81, 86, 91, 97, 99, 101, 103, 104, 105, 106, 108, 110], "multipl": [2, 3, 5, 10, 13, 15, 16, 37, 39, 46, 57, 58, 63, 64, 65, 67, 70, 71, 75, 85, 91, 92, 93, 95, 99, 102, 104, 105, 108], "g": [2, 3, 5, 10, 15, 25, 35, 39, 40, 44, 46, 52, 54, 59, 65, 66, 68, 71, 72, 73, 75, 85, 88, 89, 90, 91, 92, 93, 95, 96, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108], "manual": [2, 75, 85, 88, 89, 90, 97, 99, 106, 107, 108, 110], "pytorch": [2, 40, 41, 44, 75, 85, 90, 93, 99, 102, 104, 109], "call": [2, 3, 5, 6, 10, 16, 17, 21, 22, 23, 25, 26, 28, 29, 30, 31, 33, 34, 40, 44, 51, 59, 62, 72, 75, 89, 90, 91, 92, 96, 99, 101, 104, 106, 107, 108, 109, 110], "__init__": [2, 41, 75, 93], "independ": [2, 3, 10, 64, 75, 96, 97, 100, 107, 108, 110], "compat": [2, 40, 43, 44, 56, 62, 75, 76, 79, 83, 85, 88, 89, 99, 107, 108], "neural": [2, 41, 62, 72, 75, 90, 93, 97, 99, 104, 106, 108], "network": [2, 40, 41, 44, 62, 72, 75, 89, 90, 93, 96, 97, 99, 104, 106, 108], "typic": [2, 10, 40, 44, 56, 72, 75, 88, 89, 90, 92, 93, 95, 96, 100, 106, 107], "initi": [2, 3, 10, 16, 21, 40, 44, 54, 63, 75, 88, 96, 99, 100], "insid": [2, 44, 75, 99, 101], "There": [2, 3, 7, 54, 85, 101, 103], "two": [2, 3, 10, 21, 29, 39, 40, 43, 44, 52, 54, 55, 56, 59, 68, 70, 71, 86, 89, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 104, 108, 109, 110], "new": [2, 7, 9, 10, 17, 25, 40, 43, 44, 50, 54, 58, 59, 63, 75, 89, 90, 91, 96, 98, 99, 100, 106, 107, 110], "notion": 2, "confid": [2, 3, 10, 25, 39, 43, 46, 49, 51, 59, 63, 64, 65, 68, 70, 71, 72, 73, 75, 79, 83, 85, 88, 93, 100, 101, 103, 104, 105, 107, 109, 110], "packag": [2, 5, 7, 9, 10, 12, 13, 14, 18, 38, 42, 46, 47, 59, 61, 62, 68, 71, 75, 85, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 108, 109, 110], "prune": [2, 3, 46, 65, 75, 86, 100, 105], "everyth": [2, 71, 101], "els": [2, 71, 91, 93, 97, 98, 99, 100, 103, 104, 105], "mathemat": [2, 3, 10, 49, 104], "keep": [2, 16, 17, 59, 85, 91, 97, 98, 99, 100, 109], "belong": [2, 3, 10, 39, 46, 48, 49, 54, 64, 65, 66, 67, 72, 73, 77, 81, 83, 84, 92, 93, 100, 101, 104, 106, 109, 110], "2": [2, 3, 4, 5, 7, 10, 11, 13, 15, 21, 22, 23, 25, 26, 28, 29, 30, 31, 33, 34, 39, 40, 41, 43, 44, 46, 48, 49, 50, 51, 52, 54, 56, 57, 58, 59, 62, 64, 65, 67, 68, 71, 72, 73, 75, 76, 80, 81, 83, 84, 98, 99, 107], "error": [2, 3, 5, 10, 40, 44, 45, 46, 48, 49, 59, 64, 65, 67, 68, 70, 71, 73, 75, 77, 79, 80, 83, 86, 88, 90, 91, 92, 95, 96, 97, 98, 100, 102], "erron": [2, 3, 39, 46, 49, 59, 64, 65, 73, 75, 76, 77, 106, 108], "import": [2, 3, 4, 5, 7, 8, 10, 13, 15, 16, 17, 21, 22, 23, 25, 26, 28, 29, 31, 33, 34, 36, 39, 43, 45, 51, 54, 57, 58, 63, 67, 70, 75, 76, 81, 83, 84, 85, 88, 89, 95, 96, 97, 99, 100, 104, 105, 106, 108, 109, 110], "linear_model": [2, 5, 39, 59, 75, 85, 89, 90, 91, 92, 96, 97, 99, 101, 103, 106], "logisticregress": [2, 3, 5, 39, 59, 85, 89, 90, 91, 92, 96, 97, 99, 101, 103, 106], "logreg": 2, "cl": [2, 17, 33, 75, 85, 88, 89, 99, 101, 108], "pass": [2, 3, 5, 8, 10, 11, 13, 15, 16, 17, 19, 26, 33, 36, 40, 43, 44, 46, 50, 51, 54, 56, 59, 62, 63, 65, 71, 72, 73, 75, 80, 81, 85, 89, 90, 91, 92, 96, 97, 98, 99, 101, 103, 105, 106, 108], "x_train": [2, 88, 91, 92, 101, 103, 104, 108], "labels_maybe_with_error": 2, "had": [2, 3, 75, 105], "issu": [2, 3, 4, 5, 6, 8, 11, 12, 13, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 39, 40, 42, 43, 44, 45, 46, 54, 61, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 89, 94, 102, 103, 106, 107, 108], "pred": [2, 46, 59, 88, 89, 100, 107, 108], "x_test": [2, 88, 91, 92, 101, 104, 108], "might": [2, 5, 10, 54, 63, 75, 80, 88, 89, 91, 92, 93, 99, 105], "case": [2, 3, 10, 13, 16, 39, 51, 54, 63, 75, 88, 89, 90, 91, 92, 93, 95, 97, 98, 99, 100, 101, 106, 108, 110], "standard": [2, 3, 5, 33, 39, 46, 62, 64, 65, 67, 73, 75, 85, 88, 91, 92, 95, 98, 100, 101, 105], "adapt": [2, 12, 13, 18, 40, 42, 59, 61, 75, 106], "skorch": [2, 75, 85, 99], "kera": [2, 61, 68, 71, 75, 85, 99, 105], "scikera": [2, 62, 75, 99], "open": [2, 43, 88, 89, 92, 95, 96, 98, 101, 104, 105, 106, 108, 110], "doesn": [2, 10, 75, 85], "t": [2, 3, 4, 7, 10, 20, 30, 31, 40, 41, 43, 44, 45, 46, 51, 57, 58, 67, 72, 73, 75, 81, 83, 84, 85, 91, 92, 93, 96, 97, 98, 100, 101, 104, 105, 108, 110], "alreadi": [2, 5, 10, 13, 19, 40, 43, 44, 49, 54, 62, 63, 75, 85, 88, 89, 90, 91, 92, 93, 95, 96, 98, 99, 100, 101, 103, 105, 106, 108], "exist": [2, 5, 10, 15, 21, 40, 43, 44, 56, 58, 62, 68, 70, 72, 75, 85, 86, 88, 89, 91, 92, 96, 103, 110], "made": [2, 5, 13, 19, 40, 44, 55, 75, 88, 89, 93, 96, 97, 99, 100, 103, 105, 107, 108], "easi": [2, 12, 49, 75, 91, 92, 98, 99, 101, 104], "inherit": [2, 7, 41, 75], "baseestim": [2, 44, 75], "yourmodel": [2, 75], "def": [2, 7, 17, 40, 44, 62, 75, 89, 90, 91, 92, 93, 97, 98, 99, 100, 101, 103, 104, 106, 108, 110], "self": [2, 3, 5, 7, 10, 13, 15, 16, 17, 19, 34, 40, 41, 43, 44, 46, 51, 72, 73, 75, 88, 91, 93, 97, 98, 100, 104, 109, 110], "refer": [2, 10, 13, 19, 40, 44, 45, 64, 65, 67, 68, 70, 71, 72, 75, 79, 80, 91, 92, 93, 95, 96, 97, 99, 100, 101, 104, 107, 108], "origin": [2, 5, 10, 44, 45, 46, 58, 59, 62, 64, 65, 68, 71, 72, 75, 76, 79, 81, 83, 88, 89, 91, 93, 95, 96, 97, 99, 101, 105, 106, 108, 110], "total": [2, 3, 4, 39, 43, 59, 64, 84, 93, 99, 109], "state": [2, 3, 5, 40, 41, 44, 50, 75, 101, 104, 105, 110], "art": [2, 41, 101, 104], "northcutt": [2, 3, 39, 72, 73], "et": [2, 3, 39, 41, 72, 73], "al": [2, 3, 39, 41, 72, 73], "2021": [2, 3, 39, 72, 73], "weak": [2, 71], "supervis": [2, 10, 85, 91, 92, 99, 103], "find": [2, 5, 9, 10, 13, 16, 17, 19, 22, 23, 25, 26, 28, 29, 30, 31, 34, 35, 39, 40, 42, 43, 44, 45, 46, 50, 56, 58, 59, 61, 68, 71, 72, 73, 75, 77, 81, 83, 85, 86, 91, 98, 100, 102, 107], "uncertainti": [2, 10, 48, 72, 75, 99, 106, 108], "It": [2, 3, 5, 7, 10, 15, 16, 19, 25, 30, 33, 35, 36, 37, 40, 44, 46, 49, 51, 54, 55, 57, 63, 70, 71, 75, 85, 91, 92, 93, 97, 99, 101, 104, 107], "work": [2, 3, 7, 10, 15, 33, 39, 40, 43, 44, 46, 49, 58, 59, 60, 62, 63, 73, 75, 85, 86, 89, 91, 92, 97, 98, 100, 106, 108], "includ": [2, 3, 5, 7, 10, 13, 16, 21, 22, 23, 25, 26, 28, 29, 31, 33, 34, 36, 39, 40, 42, 43, 44, 54, 58, 59, 61, 63, 64, 67, 68, 72, 73, 75, 79, 80, 81, 83, 85, 86, 91, 92, 93, 95, 96, 97, 99, 100, 101, 104, 105, 106, 110], "deep": [2, 42, 44, 61, 62, 75, 96], "see": [2, 3, 5, 7, 10, 13, 16, 17, 36, 39, 40, 43, 44, 45, 46, 51, 56, 59, 62, 64, 65, 67, 68, 71, 72, 73, 75, 81, 83, 85, 86, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 103, 104, 105, 106, 108, 109, 110], "subfield": 2, "theori": [2, 101], "machin": [2, 4, 5, 9, 10, 17, 19, 36, 42, 57, 61, 75, 88, 89, 91, 92, 97, 98, 100, 103], "across": [2, 3, 5, 7, 10, 13, 16, 25, 39, 43, 51, 64, 71, 72, 85, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 104, 105, 107, 108], "varieti": [2, 88, 89, 99], "like": [2, 3, 5, 6, 7, 10, 17, 35, 39, 40, 43, 44, 46, 49, 59, 62, 63, 64, 67, 68, 70, 73, 75, 76, 79, 80, 81, 83, 84, 85, 86, 88, 89, 90, 91, 92, 95, 96, 97, 99, 100, 101, 103, 104, 105, 106, 108, 109, 110], "pu": [2, 59], "input": [2, 3, 5, 9, 13, 19, 29, 39, 40, 43, 44, 49, 51, 54, 55, 58, 59, 60, 62, 71, 75, 85, 86, 89, 92, 93, 96, 98, 99, 100, 101, 103, 104, 105, 108, 109, 110], "discret": [2, 37, 46, 49, 59, 72, 73, 77, 79, 80], "vector": [2, 3, 4, 5, 10, 13, 19, 46, 49, 51, 52, 54, 59, 72, 73, 85, 89, 90, 91, 92, 93, 95, 96, 100, 101, 104, 105, 106, 109, 110], "would": [2, 3, 5, 10, 40, 43, 44, 46, 55, 59, 65, 75, 85, 89, 91, 93, 99, 100, 101, 106, 108, 110], "obtain": [2, 5, 8, 10, 13, 19, 46, 63, 65, 68, 71, 73, 76, 90, 92, 96, 99, 103, 105, 107, 109, 110], "been": [2, 4, 39, 46, 49, 54, 58, 59, 63, 64, 68, 70, 72, 73, 75, 90, 91, 95, 97, 99, 100, 101, 103, 104, 105, 106, 109, 110], "dure": [2, 10, 19, 54, 56, 72, 75, 88, 89, 90, 95, 96, 97, 99, 101, 104, 107, 108, 110], "denot": [2, 3, 49, 51, 59, 65, 72, 73, 83], "tild": 2, "paper": [2, 4, 10, 63, 72, 81, 83, 98, 101, 103, 106, 108, 110], "cv_n_fold": [2, 3, 75, 89], "5": [2, 3, 4, 5, 8, 10, 13, 21, 22, 23, 25, 26, 28, 29, 31, 33, 34, 36, 39, 44, 46, 48, 50, 51, 59, 63, 64, 67, 68, 71, 75, 76, 83, 89, 91, 96, 98, 99, 104, 105, 106, 107, 109, 110], "converge_latent_estim": [2, 3], "pulearn": [2, 59], "find_label_issues_kwarg": [2, 10, 75, 86, 99, 101], "label_quality_scores_kwarg": [2, 10], "low_memori": [2, 65, 81, 99], "clean": [2, 70, 73, 75, 76, 85, 88, 89, 91, 92, 98, 108], "even": [2, 3, 7, 9, 10, 39, 43, 48, 49, 59, 75, 90, 97, 99, 100, 101, 103, 104, 105], "messi": [2, 75, 101], "ridden": [2, 75], "autom": [2, 9, 10, 75, 85, 88, 89, 92, 95, 96, 98, 99, 100, 101, 104, 106, 108], "robust": [2, 49, 54, 75, 92, 97, 99, 100], "prone": [2, 75], "out": [2, 3, 5, 10, 13, 19, 31, 40, 44, 46, 51, 54, 62, 65, 66, 68, 71, 72, 73, 75, 76, 84, 85, 86, 89, 97, 98, 99, 101, 102, 104, 105, 106, 108, 109, 110], "current": [2, 3, 5, 7, 10, 11, 13, 16, 17, 25, 40, 44, 45, 46, 51, 63, 70, 75, 91, 92, 99, 100, 103, 105], "intend": [2, 13, 14, 16, 17, 18, 19, 35, 36, 37, 47, 54, 63, 79, 83, 90, 91, 92, 96, 101], "A": [2, 3, 4, 5, 7, 10, 13, 15, 16, 17, 21, 22, 23, 25, 26, 28, 29, 30, 31, 33, 34, 35, 36, 39, 40, 41, 44, 46, 49, 50, 51, 52, 54, 55, 56, 57, 58, 59, 62, 63, 64, 67, 70, 71, 72, 73, 75, 77, 79, 80, 84, 86, 88, 89, 90, 91, 93, 95, 96, 97, 98, 99, 100, 101, 103, 105, 107, 110], "follow": [2, 3, 10, 17, 33, 37, 39, 40, 43, 44, 51, 53, 57, 63, 64, 68, 70, 71, 72, 75, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 108, 109, 110], "tutori": [2, 85, 88, 89, 90, 91, 92, 93, 95, 96, 97, 99, 101, 103, 104, 105, 106, 108, 109, 110], "repo": 2, "wrapper": [2, 13, 62, 88, 89, 90, 108], "around": [2, 13, 70, 91, 92, 100, 105, 106, 110], "fasttext": 2, "store": [2, 4, 5, 10, 13, 15, 16, 21, 22, 23, 25, 26, 28, 29, 30, 31, 33, 34, 36, 40, 43, 44, 72, 75, 88, 89, 95, 96, 97, 98, 99, 109, 110], "along": [2, 51, 65, 83, 91, 92, 93, 97, 99, 106], "dimens": [2, 59, 77, 80, 93, 99, 106, 109], "select": [2, 9, 10, 29, 53, 63, 73, 93, 100, 103, 106], "split": [2, 3, 5, 10, 15, 43, 51, 58, 59, 75, 88, 90, 91, 92, 93, 95, 96, 97, 98, 101, 102, 104, 107, 110], "cross": [2, 3, 10, 39, 46, 49, 50, 51, 65, 68, 71, 73, 75, 76, 86, 88, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 108, 109, 110], "fold": [2, 3, 39, 46, 49, 75, 88, 90, 95, 98, 99, 105, 109], "By": [2, 39, 64, 65, 75, 91, 97, 109], "need": [2, 3, 10, 11, 39, 40, 43, 44, 46, 54, 56, 64, 65, 67, 72, 75, 85, 89, 90, 91, 92, 96, 97, 99, 100, 101, 103, 104, 105, 109], "holdout": [2, 3, 75], "comput": [2, 3, 4, 5, 7, 8, 10, 13, 22, 23, 25, 26, 29, 30, 31, 34, 39, 40, 41, 43, 44, 46, 48, 49, 50, 51, 54, 55, 56, 59, 63, 64, 65, 67, 70, 71, 72, 73, 75, 76, 77, 79, 85, 86, 89, 91, 92, 98, 101, 102, 105, 106, 108, 109], "them": [2, 3, 5, 7, 9, 10, 12, 15, 30, 35, 38, 40, 42, 43, 44, 46, 56, 61, 63, 72, 75, 86, 88, 89, 91, 92, 93, 95, 96, 97, 99, 103, 104, 106, 108, 109, 110], "numer": [2, 3, 4, 5, 10, 13, 16, 25, 33, 37, 51, 54, 55, 70, 72, 75, 80, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 100, 101, 103, 104, 106, 108], "consist": [2, 3, 10, 40, 44, 53, 59, 63, 97, 109, 110], "latent": [2, 3, 49], "thei": [2, 3, 5, 10, 14, 18, 24, 27, 29, 32, 40, 41, 42, 44, 46, 47, 54, 57, 59, 62, 65, 70, 73, 75, 76, 79, 83, 85, 89, 90, 91, 92, 93, 95, 96, 99, 100, 101, 103, 106, 108, 110], "relat": [2, 3, 10, 16, 22, 23, 29, 30, 31, 34, 49, 59, 64, 75, 92, 96, 97], "close": [2, 3, 10, 43, 49, 72, 90, 91, 92, 93, 95, 96, 97, 99, 100, 101, 105], "form": [2, 3, 10, 40, 41, 44, 49, 58, 59, 73, 75, 99], "equival": [2, 3, 40, 44, 49, 72, 106, 108], "iter": [2, 3, 39, 40, 44, 46, 59, 64, 65, 75, 99, 103, 109], "enforc": [2, 40, 44, 59], "perfectli": [2, 39, 64, 101], "certain": [2, 3, 5, 10, 40, 44, 62, 71, 75, 91, 92, 97, 98, 105, 106], "dict": [2, 3, 5, 10, 13, 15, 16, 17, 19, 21, 22, 23, 25, 26, 28, 29, 30, 31, 33, 34, 39, 40, 43, 44, 46, 50, 51, 59, 62, 63, 64, 65, 67, 68, 70, 71, 72, 73, 75, 83, 91, 92, 93, 99, 100, 110], "keyword": [2, 3, 5, 10, 11, 13, 19, 26, 30, 33, 40, 43, 44, 46, 48, 51, 54, 56, 58, 62, 63, 65, 71, 72, 73, 75, 80, 81, 83, 91], "filter": [2, 3, 10, 43, 45, 58, 64, 66, 67, 69, 71, 78, 79, 80, 82, 83, 84, 85, 86, 88, 89, 90, 93, 96, 98, 99, 100, 104, 105, 108, 109, 110], "find_label_issu": [2, 3, 10, 33, 42, 43, 45, 46, 64, 65, 66, 67, 68, 69, 70, 71, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 99, 104, 105, 108, 109, 110], "particularli": [2, 85, 97, 100, 103, 106], "filter_bi": [2, 3, 43, 46, 65, 86, 99], "frac_nois": [2, 46, 65, 81, 99], "min_examples_per_class": [2, 46, 65, 99, 101], "impact": [2, 4, 10, 91, 92, 93, 97], "ml": [2, 4, 5, 9, 10, 18, 75, 85, 88, 89, 91, 92, 93, 95, 96, 97, 98, 102, 103, 104, 106, 107, 108], "accuraci": [2, 10, 41, 73, 88, 89, 90, 93, 99, 100, 101, 103, 106, 108, 109], "n_job": [2, 43, 46, 65, 77, 79, 81, 99, 100, 106, 109], "disabl": [2, 40, 44, 46, 106], "process": [2, 3, 7, 13, 16, 19, 35, 40, 43, 44, 46, 54, 58, 63, 65, 71, 77, 79, 81, 89, 90, 91, 97, 99, 100, 103, 107], "caus": [2, 46, 51, 91, 92, 97, 99], "rank": [2, 3, 10, 39, 43, 45, 46, 51, 64, 65, 66, 68, 69, 71, 72, 74, 78, 80, 81, 82, 84, 85, 86, 88, 89, 91, 92, 98, 99, 104, 105, 106, 109, 110], "get_label_quality_scor": [2, 42, 43, 45, 46, 47, 51, 63, 65, 66, 67, 68, 69, 70, 73, 74, 76, 78, 79, 81, 82, 83, 86, 99, 101, 104, 105, 109, 110], "adjust_pred_prob": [2, 10, 67, 72, 73, 101], "control": [2, 5, 9, 10, 13, 19, 43, 46, 63, 71, 72, 75, 81, 83, 91, 92, 97, 98, 99], "how": [2, 3, 5, 10, 13, 15, 16, 17, 19, 25, 39, 40, 41, 43, 44, 49, 59, 63, 64, 67, 68, 70, 72, 73, 75, 79, 83, 85, 88, 89, 91, 92, 93, 95, 96, 97, 98, 100, 105, 106, 107, 108, 109], "much": [2, 10, 39, 43, 46, 75, 97, 99, 103], "output": [2, 3, 5, 10, 13, 19, 35, 40, 41, 44, 49, 59, 62, 63, 64, 68, 70, 71, 72, 75, 79, 80, 83, 84, 85, 86, 89, 90, 91, 93, 96, 97, 98, 99, 100, 105, 106, 107, 108], "print": [2, 5, 7, 13, 21, 22, 23, 25, 26, 28, 29, 30, 31, 33, 34, 36, 37, 39, 40, 43, 44, 46, 59, 63, 64, 65, 70, 72, 73, 75, 77, 79, 80, 84, 86, 88, 89, 90, 92, 93, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 108, 109, 110], "suppress": [2, 43, 63, 70, 72, 73, 75, 77, 79, 80, 109, 110], "statement": [2, 43, 63, 70, 72, 73, 75, 77, 79, 80], "big": [2, 43, 65, 71, 75, 101], "limit": [2, 5, 13, 19, 43, 54, 65, 85, 97, 105, 109, 110], "memori": [2, 40, 43, 44, 65, 71, 77, 79, 91, 109], "experiment": [2, 40, 41, 43, 44, 45, 65, 86, 88, 89, 92, 95, 96, 98, 99, 101, 104, 106, 108], "label_issues_batch": [2, 42, 65, 99], "find_label_issues_batch": [2, 42, 43, 65, 99], "pred_prob": [2, 3, 5, 8, 10, 11, 13, 19, 26, 28, 29, 31, 34, 35, 39, 43, 45, 46, 48, 49, 50, 51, 52, 59, 60, 63, 64, 65, 67, 68, 71, 72, 73, 77, 79, 80, 81, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 107, 108], "threshold": [2, 3, 4, 7, 10, 13, 21, 22, 23, 25, 31, 33, 34, 43, 57, 70, 71, 72, 73, 79, 83, 91, 97, 105, 106, 109, 110], "inverse_noise_matrix": [2, 3, 10, 49, 59, 86, 101], "label_issu": [2, 43, 46, 65, 68, 75, 77, 86, 88, 89, 90, 93, 96, 99, 100, 101, 104, 108], "clf_kwarg": [2, 3, 10, 75], "clf_final_kwarg": [2, 75], "validation_func": [2, 3, 10], "correct": [2, 5, 9, 10, 39, 43, 46, 48, 54, 63, 64, 65, 67, 68, 70, 71, 73, 75, 76, 79, 83, 85, 88, 89, 90, 92, 93, 95, 96, 98, 101, 103, 104, 105, 106, 107, 108], "result": [2, 3, 9, 10, 13, 16, 19, 21, 22, 23, 25, 26, 28, 29, 30, 31, 33, 34, 40, 43, 44, 46, 48, 57, 59, 65, 67, 68, 71, 73, 75, 76, 77, 79, 83, 88, 89, 90, 91, 92, 93, 95, 96, 99, 100, 101, 103, 104, 108, 109, 110], "identifi": [2, 3, 5, 7, 9, 13, 15, 19, 30, 36, 39, 43, 45, 46, 54, 65, 68, 71, 73, 75, 76, 77, 80, 81, 83, 84, 85, 88, 89, 90, 91, 92, 93, 95, 96, 98, 101, 104, 106, 108, 109, 110], "final": [2, 10, 75, 88, 95, 97, 100, 105, 107, 108], "remain": [2, 75, 86, 88, 89, 93, 97, 100, 104, 108, 110], "datasetlik": [2, 59, 75], "beyond": [2, 5, 7, 9, 10, 12, 38, 85, 88, 89, 100, 108, 109], "pd": [2, 3, 5, 7, 13, 16, 21, 22, 23, 25, 26, 28, 29, 31, 33, 34, 39, 50, 62, 63, 64, 75, 83, 88, 89, 90, 91, 92, 95, 96, 97, 99, 100, 101, 103, 108, 110], "datafram": [2, 3, 5, 7, 13, 15, 16, 21, 22, 23, 25, 26, 28, 29, 30, 31, 33, 34, 39, 43, 50, 59, 60, 62, 63, 64, 75, 80, 84, 86, 89, 90, 91, 92, 93, 95, 96, 97, 99, 100, 101, 103, 108, 109, 110], "scipi": [2, 4, 5, 13, 16, 55, 59, 72, 97], "spars": [2, 4, 5, 10, 13, 16, 19, 21, 34, 54, 59, 60, 95, 97], "csr_matrix": [2, 4, 5, 13, 16, 19, 21, 34, 54, 97], "torch": [2, 40, 41, 44, 89, 90, 93, 96, 98, 106], "util": [2, 5, 10, 13, 19, 36, 40, 41, 44, 47, 54, 62, 63, 68, 71, 75, 85, 86, 90, 91, 92, 93, 99, 101, 106], "tensorflow": [2, 59, 62, 85, 90, 99], "object": [2, 5, 10, 13, 15, 16, 19, 35, 36, 40, 41, 43, 44, 51, 54, 56, 59, 60, 62, 65, 68, 69, 70, 71, 72, 75, 83, 85, 89, 90, 92, 93, 95, 97, 99, 100, 101, 102, 104, 108], "list": [2, 3, 5, 10, 15, 17, 21, 22, 23, 25, 26, 28, 29, 30, 31, 33, 34, 39, 40, 41, 43, 44, 45, 46, 52, 54, 58, 59, 60, 62, 63, 64, 65, 67, 68, 70, 71, 72, 73, 75, 79, 80, 81, 83, 84, 86, 89, 90, 91, 92, 93, 98, 99, 100, 101, 104, 105, 108, 110], "index_list": 2, "subset": [2, 3, 5, 13, 19, 39, 43, 46, 59, 73, 80, 84, 88, 89, 90, 93, 95, 96, 97, 99, 104, 105, 106, 107, 108, 110], "wa": [2, 3, 10, 15, 17, 43, 57, 59, 63, 64, 70, 72, 84, 88, 89, 90, 91, 92, 93, 95, 96, 97, 99, 100, 101, 104, 105, 107, 109, 110], "abl": [2, 3, 10, 75, 90, 99, 100, 101, 103, 104], "format": [2, 3, 5, 10, 15, 35, 40, 43, 44, 46, 49, 50, 51, 52, 54, 59, 60, 62, 63, 64, 65, 68, 71, 72, 73, 75, 77, 79, 80, 83, 84, 88, 91, 92, 93, 95, 97, 98, 100, 103, 108, 109, 110], "make": [2, 3, 5, 21, 40, 43, 44, 51, 62, 85, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 101, 103, 104, 105, 106, 108], "sure": [2, 5, 43, 46, 51, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 100, 103, 104, 105, 106, 108], "shuffl": [2, 10, 59, 90, 93, 96, 97, 104, 106], "ha": [2, 3, 5, 6, 10, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 33, 34, 40, 44, 45, 49, 51, 54, 58, 59, 63, 68, 70, 75, 81, 83, 84, 85, 88, 89, 90, 91, 92, 95, 96, 97, 100, 101, 103, 104, 105, 106, 107, 108, 110], "batch": [2, 43, 59, 62, 63, 77, 79, 93, 99, 106], "order": [2, 5, 10, 37, 39, 40, 44, 45, 46, 49, 50, 51, 57, 59, 63, 64, 65, 68, 71, 72, 73, 77, 80, 81, 83, 84, 86, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 104, 105, 108, 109, 110], "destroi": [2, 59], "oper": [2, 40, 43, 44, 54, 59, 62, 73, 85, 88, 89, 96, 99, 106], "eg": [2, 5, 10, 59, 68, 71, 91, 92, 99, 100], "repeat": [2, 59, 63, 103, 106], "appli": [2, 10, 37, 40, 42, 44, 46, 51, 52, 54, 58, 59, 67, 72, 81, 85, 88, 89, 90, 91, 92, 93, 95, 97, 99, 100, 103, 104, 106, 107, 108, 109], "array_lik": [2, 3, 39, 46, 59, 65, 72, 76], "some": [2, 3, 5, 10, 17, 25, 39, 40, 42, 44, 46, 49, 54, 58, 59, 61, 63, 64, 65, 67, 68, 71, 72, 73, 75, 77, 86, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 107, 108, 109, 110], "seri": [2, 3, 43, 59, 60, 75, 83, 99, 100], "row": [2, 3, 5, 10, 13, 16, 30, 35, 39, 43, 46, 48, 49, 54, 55, 59, 63, 64, 65, 67, 72, 73, 75, 80, 81, 83, 84, 88, 90, 93, 95, 96, 97, 98, 99, 100, 103, 104, 106, 110], "rather": [2, 3, 5, 10, 29, 39, 59, 62, 63, 70, 79, 83, 89, 97, 98, 100, 103, 107, 108, 109, 110], "leav": [2, 46], "per": [2, 3, 5, 7, 10, 13, 16, 39, 43, 46, 51, 58, 63, 64, 65, 67, 70, 71, 73, 76, 77, 79, 83, 92, 97, 99, 105, 110], "determin": [2, 3, 10, 15, 19, 25, 29, 33, 39, 43, 46, 51, 54, 59, 63, 65, 68, 70, 73, 79, 83, 91, 97, 99, 100, 103, 105, 106, 108], "cutoff": [2, 3, 55, 106], "consid": [2, 3, 4, 5, 10, 13, 16, 19, 26, 29, 31, 34, 39, 40, 44, 46, 54, 56, 59, 63, 70, 72, 73, 76, 79, 83, 88, 89, 90, 93, 95, 96, 97, 99, 100, 101, 105, 106, 107, 108, 109], "section": [2, 3, 7, 10, 86, 93, 95, 97, 99, 100, 105], "3": [2, 3, 4, 5, 7, 10, 11, 37, 39, 40, 44, 46, 49, 50, 51, 52, 55, 57, 58, 59, 62, 65, 72, 73, 75, 76, 81, 83, 98, 99, 107], "equat": [2, 3, 49], "advanc": [2, 3, 5, 9, 10, 13, 19, 70, 72, 83, 86, 92, 94, 97, 99, 100, 101], "user": [2, 3, 5, 9, 10, 13, 17, 19, 30, 35, 36, 37, 40, 44, 46, 54, 62, 70, 72, 73, 75, 79, 83, 100, 101], "specifi": [2, 3, 4, 5, 8, 10, 13, 16, 17, 19, 21, 34, 36, 40, 43, 44, 46, 51, 54, 56, 58, 62, 63, 64, 65, 68, 70, 72, 73, 75, 76, 84, 86, 89, 90, 92, 93, 96, 97, 100, 103, 105, 108], "automat": [2, 3, 5, 29, 39, 85, 88, 89, 92, 93, 95, 96, 97, 98, 99, 100, 103, 104, 105, 106, 107, 108, 109, 110], "greater": [2, 3, 4, 5, 7, 9, 10, 31, 43, 55, 59, 70, 92, 98, 99, 110], "count": [2, 25, 29, 39, 43, 46, 49, 59, 64, 65, 71, 86, 93, 97, 99, 105], "observ": [2, 3, 49, 56, 90, 91, 92, 103, 106, 108], "mislabel": [2, 10, 39, 43, 45, 46, 49, 63, 64, 65, 68, 70, 73, 79, 81, 83, 84, 85, 88, 89, 90, 93, 95, 96, 99, 100, 101, 105, 108], "one": [2, 3, 5, 7, 10, 29, 39, 40, 43, 44, 45, 46, 51, 57, 59, 63, 64, 65, 67, 68, 70, 71, 72, 73, 75, 76, 77, 79, 80, 81, 83, 84, 85, 88, 89, 90, 91, 92, 93, 95, 96, 97, 100, 103, 106, 107, 108, 110], "get_label_issu": [2, 42, 43, 74, 75, 88, 89, 101, 108], "either": [2, 3, 4, 7, 10, 40, 43, 44, 46, 55, 63, 65, 70, 72, 73, 77, 79, 92, 97, 99, 104, 105], "boolean": [2, 7, 10, 25, 43, 46, 56, 58, 63, 65, 68, 73, 75, 77, 79, 80, 85, 89, 90, 92, 93, 96, 99, 105, 108, 109], "label_issues_mask": [2, 46, 73, 75, 86], "indic": [2, 3, 4, 5, 7, 10, 13, 16, 25, 39, 43, 44, 45, 46, 48, 51, 54, 56, 59, 62, 63, 64, 65, 67, 68, 70, 71, 72, 73, 75, 76, 79, 81, 83, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 108, 109, 110], "its": [2, 5, 7, 9, 10, 13, 19, 40, 43, 44, 46, 54, 56, 57, 58, 65, 68, 71, 72, 73, 75, 77, 81, 83, 85, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 103, 105, 106, 107, 108, 109, 110], "return_indices_ranked_bi": [2, 43, 46, 65, 81, 86, 88, 89, 99, 101], "significantli": [2, 10, 93, 97, 101, 103, 107], "reduc": [2, 43, 46, 59, 90, 99], "time": [2, 10, 40, 43, 44, 59, 63, 84, 86, 91, 93, 99, 100, 105, 109, 110], "take": [2, 5, 10, 39, 40, 44, 50, 51, 54, 56, 59, 62, 73, 88, 93, 95, 103, 104, 105, 110], "run": [2, 5, 6, 7, 9, 10, 11, 12, 13, 17, 19, 29, 30, 35, 38, 40, 43, 44, 56, 75, 85, 88, 89, 90, 91, 92, 93, 95, 96, 98, 100, 101, 103, 104, 105, 106, 108, 110], "skip": [2, 10, 40, 44, 75, 90, 97, 99, 100, 104, 110], "slow": [2, 3], "step": [2, 7, 29, 51, 71, 93, 97, 100, 101, 103, 107], "caution": [2, 5, 99, 100], "previous": [2, 5, 13, 16, 59, 72, 75, 86, 88, 90, 91, 95, 96, 100, 103, 107], "assign": [2, 7, 10, 21, 22, 23, 25, 26, 28, 29, 30, 31, 33, 34, 35, 40, 44, 50, 51, 59, 75, 88, 91, 93, 95, 97, 99, 108, 109, 110], "individu": [2, 4, 7, 10, 13, 16, 29, 40, 44, 45, 63, 67, 70, 73, 75, 81, 83, 86, 88, 92, 95, 97, 98, 99, 103, 104, 105, 110], "still": [2, 43, 44, 59, 72, 88, 93, 99, 106], "extra": [2, 40, 44, 59, 62, 63, 64, 75, 93, 96, 99, 100, 103, 106], "receiv": [2, 10, 40, 44, 45, 64, 67, 68, 75, 77, 81, 92, 105], "overwritten": [2, 75], "callabl": [2, 3, 4, 10, 29, 40, 44, 51, 54, 55, 56, 58, 62, 67, 99], "x_val": 2, "y_val": 2, "map": [2, 3, 15, 43, 44, 47, 50, 58, 59, 71, 73, 75, 80, 90, 91, 92, 93, 97, 99, 101, 104, 110], "appropri": [2, 10, 19, 37, 55, 65, 73, 91, 95, 100, 104, 105], "earli": [2, 93], "stop": [2, 93], "x_valid": 2, "y_valid": 2, "could": [2, 7, 10, 25, 39, 59, 72, 88, 91, 93, 95, 97, 100, 104, 108, 110], "f": [2, 7, 88, 89, 90, 91, 93, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 108], "ignor": [2, 40, 44, 58, 62, 75, 80, 84, 90, 91, 92, 93, 98, 100, 101, 103, 104, 106, 108, 110], "allow": [2, 13, 39, 40, 43, 44, 48, 56, 59, 63, 71, 72, 75, 77, 79, 89, 90, 93, 97, 99, 107, 109], "access": [2, 10, 16, 40, 44, 75, 92, 93, 98, 104], "hyperparamet": [2, 67, 72, 93], "purpos": [2, 54, 91, 92, 97, 99, 104, 108], "want": [2, 5, 10, 39, 43, 54, 60, 63, 65, 75, 89, 91, 93, 96, 98, 100, 103, 105, 106, 107, 109, 110], "explicitli": [2, 8, 10, 44, 54, 75], "yourself": [2, 5, 43, 92, 97], "altern": [2, 7, 10, 51, 56, 59, 62, 63, 73, 86, 89, 90, 93, 95, 96, 98, 99, 100, 101, 103, 104, 106, 108], "same": [2, 3, 5, 7, 9, 10, 13, 15, 17, 19, 29, 33, 40, 43, 44, 46, 54, 59, 62, 63, 65, 72, 73, 75, 79, 80, 83, 84, 85, 88, 89, 91, 92, 93, 95, 96, 97, 99, 100, 104, 105, 106, 107, 108, 109], "effect": [2, 10, 30, 40, 44, 63, 72, 75, 88, 89, 92, 93, 95, 96, 97, 98, 99, 100, 101, 104, 106, 108], "offer": [2, 5, 9, 10, 89, 90, 91, 92, 96, 99, 100, 101, 104], "after": [2, 3, 5, 10, 13, 16, 21, 22, 23, 25, 26, 28, 29, 30, 31, 33, 34, 40, 44, 59, 63, 75, 89, 91, 93, 96, 99, 100, 101, 103, 105, 106, 107, 108, 109], "attribut": [2, 5, 7, 10, 13, 15, 16, 19, 21, 22, 23, 25, 26, 28, 29, 30, 31, 33, 34, 35, 36, 37, 40, 43, 44, 51, 56, 72, 75, 88, 91, 97], "label_issues_df": [2, 75, 93], "similar": [2, 10, 39, 40, 44, 56, 59, 63, 67, 68, 70, 72, 75, 79, 83, 91, 92, 93, 95, 96, 97, 99, 100, 101, 105, 106, 109], "document": [2, 3, 5, 13, 17, 19, 39, 40, 43, 44, 45, 46, 51, 58, 62, 64, 65, 67, 70, 71, 72, 75, 79, 80, 81, 83, 86, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 108, 110], "descript": [2, 5, 7, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 39, 45, 59, 68, 75, 91, 92], "were": [2, 3, 5, 10, 39, 44, 54, 64, 70, 83, 88, 90, 95, 99, 101, 103, 105, 107, 109], "present": [2, 3, 5, 10, 13, 15, 16, 23, 39, 59, 72, 80, 85, 93, 97, 99, 100, 106], "actual": [2, 3, 5, 10, 39, 54, 63, 64, 73, 92, 99, 101, 107, 110], "num_class": [2, 39, 43, 59, 62, 88, 89, 90, 91, 92, 93, 95, 96, 99, 100, 101, 103, 104, 106], "uniqu": [2, 34, 59, 80, 91, 97, 99, 100, 104, 106], "given_label": [2, 5, 11, 28, 33, 39, 49, 75, 80, 84, 89, 90, 91, 92, 93, 95, 96, 97, 100, 101, 108, 109, 110], "normal": [2, 3, 10, 21, 29, 34, 46, 48, 51, 57, 58, 59, 73, 97, 99, 101, 106], "trick": [2, 99], "distribut": [2, 3, 5, 10, 29, 31, 39, 44, 46, 50, 57, 63, 71, 72, 73, 85, 91, 92, 93, 95, 96, 97, 100, 105, 106], "account": [2, 39, 63, 67, 72, 73, 89, 96, 99, 101, 103, 104, 106, 108], "word": [2, 3, 58, 83, 84, 99], "remov": [2, 10, 34, 39, 40, 44, 46, 75, 85, 88, 89, 93, 96, 97, 98, 99, 100, 104, 106, 108], "so": [2, 3, 5, 6, 7, 10, 17, 29, 37, 39, 40, 43, 44, 46, 54, 59, 63, 64, 70, 73, 75, 79, 83, 90, 91, 92, 93, 96, 97, 100, 101, 104, 106, 109], "proportion": [2, 10, 46], "just": [2, 3, 5, 10, 13, 16, 35, 39, 41, 43, 59, 62, 73, 75, 77, 85, 86, 88, 89, 90, 92, 93, 95, 96, 97, 99, 101, 104, 105, 106, 107, 108, 109], "procedur": 2, "get": [2, 3, 5, 8, 10, 11, 16, 34, 40, 41, 44, 46, 51, 57, 58, 59, 63, 65, 67, 72, 73, 75, 76, 77, 85, 88, 89, 90, 93, 96, 97, 98, 99, 100, 101, 106, 107, 108], "detect": [2, 5, 7, 9, 13, 16, 17, 19, 21, 25, 31, 45, 54, 57, 66, 68, 69, 70, 71, 72, 73, 74, 75, 78, 82, 85, 88, 89, 91, 94, 98, 100, 102, 104, 108, 109, 110], "arg": [2, 15, 25, 30, 34, 40, 41, 44, 51, 59, 73, 75, 100], "kwarg": [2, 7, 10, 13, 17, 19, 21, 22, 23, 25, 26, 28, 29, 30, 31, 33, 34, 36, 40, 43, 44, 45, 51, 54, 62, 71, 75, 77, 79, 80, 81, 99], "test": [2, 5, 10, 29, 44, 51, 54, 62, 75, 85, 88, 89, 91, 92, 93, 95, 96, 102, 107, 108, 110], "expect": [2, 3, 10, 40, 44, 46, 51, 54, 63, 72, 73, 75, 88, 89, 99, 100, 101, 103, 104, 105, 108, 110], "class_predict": 2, "evalu": [2, 10, 40, 41, 42, 43, 44, 71, 75, 88, 89, 90, 91, 92, 93, 99, 101, 103, 107, 108, 109], "simpli": [2, 10, 39, 73, 85, 89, 91, 92, 95, 96, 99, 101, 104, 108, 109, 110], "quantifi": [2, 4, 5, 7, 10, 13, 16, 46, 67, 72, 75, 85, 92, 93, 95, 96, 100, 101, 105], "save_spac": [2, 10, 74, 75], "potenti": [2, 10, 39, 46, 58, 65, 68, 71, 73, 75, 77, 79, 84, 86, 88, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 104, 105, 109, 110], "cach": [2, 89, 96], "panda": [2, 5, 7, 15, 21, 22, 23, 25, 26, 28, 29, 31, 33, 34, 39, 59, 60, 62, 63, 64, 86, 88, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 103, 108, 109], "unlik": [2, 10, 46, 48, 51, 62, 64, 65, 67, 83, 91, 97, 100, 103, 104, 106, 108], "both": [2, 5, 10, 13, 19, 29, 39, 40, 44, 46, 54, 59, 63, 65, 73, 77, 79, 84, 85, 91, 93, 99, 100, 101, 103, 110], "mask": [2, 43, 46, 58, 59, 65, 68, 73, 75, 77, 79, 80, 85, 98, 99, 103, 105, 109, 110], "prefer": [2, 73, 81, 104], "plan": 2, "subsequ": [2, 3, 40, 44, 56, 89, 96, 99, 101, 105], "invok": [2, 40, 44, 101, 107], "scratch": [2, 54, 75], "To": [2, 5, 7, 9, 10, 12, 13, 16, 19, 29, 38, 40, 43, 44, 45, 46, 62, 63, 65, 67, 71, 72, 73, 75, 76, 77, 79, 85, 88, 89, 90, 91, 92, 93, 95, 96, 97, 99, 100, 103, 104, 105, 106, 107, 108, 109, 110], "share": [2, 10, 73, 75], "mostli": [2, 59, 70, 75, 100, 104, 108], "longer": [2, 37, 50, 51, 58, 75, 86, 89, 96, 99, 100, 105], "info": [2, 5, 7, 10, 13, 16, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 39, 64, 75, 83, 92, 97, 98, 110], "about": [2, 3, 5, 7, 10, 13, 16, 21, 22, 23, 25, 26, 28, 29, 30, 31, 33, 34, 36, 39, 41, 43, 48, 63, 64, 67, 71, 75, 80, 83, 85, 90, 91, 93, 95, 96, 97, 98, 99, 100, 101, 103, 106], "docstr": [2, 39, 40, 44, 59, 75, 98, 101], "unless": [2, 40, 44, 54, 75, 99], "our": [2, 3, 10, 62, 63, 73, 75, 85, 88, 89, 90, 91, 92, 93, 95, 96, 97, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110], "is_label_issu": [2, 11, 33, 75, 89, 90, 91, 92, 93, 95, 96, 97, 100, 101, 104, 108], "entir": [2, 10, 29, 43, 46, 49, 64, 65, 70, 73, 75, 77, 79, 80, 85, 91, 92, 97, 99, 100, 105, 106, 107, 109, 110], "accur": [2, 3, 5, 9, 10, 13, 19, 39, 43, 46, 55, 63, 64, 65, 68, 71, 73, 75, 76, 77, 79, 80, 86, 88, 89, 92, 93, 95, 96, 97, 98, 99, 100, 103, 104, 106, 108], "label_qu": [2, 63, 75, 89, 101, 103, 108], "measur": [2, 5, 39, 63, 64, 75, 85, 88, 97, 98, 99, 100, 101, 103, 104, 108, 109, 110], "qualiti": [2, 3, 5, 7, 9, 10, 13, 16, 33, 34, 39, 43, 45, 46, 48, 51, 63, 64, 65, 67, 68, 70, 73, 75, 76, 79, 81, 83, 85, 86, 90, 91, 93, 99, 100, 102], "lower": [2, 4, 5, 7, 10, 13, 16, 31, 43, 51, 57, 63, 64, 67, 70, 71, 73, 75, 76, 79, 83, 89, 90, 92, 93, 95, 96, 97, 99, 100, 103, 104, 105, 106, 108, 109, 110], "eas": 2, "comparison": [2, 40, 44, 71, 100, 101, 103], "against": [2, 40, 44, 91, 95, 97, 99, 100, 103, 104], "predicted_label": [2, 5, 11, 28, 33, 75, 80, 84, 89, 90, 91, 92, 93, 95, 96, 97, 100, 101, 108, 109], "ad": [2, 40, 44, 92, 103, 108], "precis": [2, 55, 57, 65, 68, 71, 97, 98, 99, 101, 109, 110], "definit": [2, 7, 37, 51, 75, 88, 95, 97], "accessor": [2, 75], "describ": [2, 10, 21, 63, 72, 73, 75, 81, 83, 101, 103, 104, 105, 107, 110], "precomput": [2, 4, 5, 49, 54, 75, 98], "clear": [2, 40, 44, 56, 75, 89, 96, 97, 108], "save": [2, 5, 13, 19, 40, 43, 44, 71, 75, 97, 99, 105, 109, 110], "space": [2, 5, 10, 72, 75, 93, 95, 97, 98], "place": [2, 40, 44, 54, 59, 75, 88, 103], "larg": [2, 9, 10, 43, 54, 75, 93, 99, 105, 106, 109, 110], "deploi": [2, 9, 10, 75, 93, 99, 100], "care": [2, 10, 40, 44, 54, 75, 96, 97, 99, 101], "avail": [2, 4, 5, 7, 10, 15, 17, 36, 44, 56, 75, 97, 99, 100, 101, 103, 105, 108], "cannot": [2, 5, 15, 17, 59, 100, 107, 110], "anymor": 2, "classmethod": [2, 21, 22, 23, 25, 26, 28, 29, 30, 31, 33, 34, 37, 44, 51, 75], "__init_subclass__": [2, 42, 44, 74, 75], "set_": [2, 44, 75], "_request": [2, 44, 75], "pep": [2, 44, 75], "487": [2, 44, 75], "look": [2, 5, 7, 10, 19, 40, 44, 59, 75, 80, 88, 91, 92, 95, 96, 99, 100, 101, 103, 104, 105, 106, 109, 110], "inform": [2, 5, 7, 10, 13, 16, 19, 36, 40, 44, 56, 59, 63, 64, 68, 71, 75, 80, 83, 84, 85, 90, 91, 95, 96, 97, 98, 100, 101, 103, 106, 109, 110], "__metadata_request__": [2, 44, 75], "infer": [2, 44, 59, 75, 80, 84, 88, 89, 93, 103, 104], "signatur": [2, 40, 44, 75], "accept": [2, 40, 44, 56, 57, 73, 75, 91, 92, 99], "metadata": [2, 10, 44, 75, 93, 110], "through": [2, 5, 7, 44, 75, 89, 90, 92, 96, 97, 98, 99, 100, 103, 105, 106], "develop": [2, 9, 44, 56, 75, 99, 101, 110], "request": [2, 44, 75, 88, 89, 92, 96, 97, 98, 104, 110], "those": [2, 3, 4, 10, 43, 44, 46, 53, 62, 63, 65, 71, 75, 79, 83, 84, 85, 90, 93, 97, 99, 100, 105, 109], "http": [2, 4, 5, 7, 9, 10, 12, 21, 38, 40, 41, 43, 44, 48, 56, 59, 68, 71, 72, 75, 85, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 100, 101, 103, 104, 105, 106, 108, 109, 110], "www": [2, 44, 75, 106], "org": [2, 4, 21, 40, 41, 44, 56, 59, 72, 75, 99, 100, 101, 110], "dev": [2, 44, 75], "0487": [2, 44, 75], "get_metadata_rout": [2, 42, 44, 74, 75], "rout": [2, 44, 75], "pleas": [2, 40, 44, 62, 75, 85, 89, 90, 91, 92, 93, 96, 97, 98, 99, 100, 101, 103, 104, 106, 108, 110], "guid": [2, 7, 10, 44, 75, 86, 90, 91, 92, 93, 94, 95, 96, 97, 100, 101], "mechan": [2, 40, 44, 75], "metadatarequest": [2, 44, 75], "encapsul": [2, 19, 44, 70, 75], "get_param": [2, 42, 44, 61, 62, 74, 75], "subobject": [2, 44, 75], "param": [2, 10, 40, 44, 62, 72, 75, 99], "name": [2, 5, 6, 7, 10, 11, 13, 15, 16, 35, 37, 39, 40, 44, 50, 51, 55, 59, 62, 63, 64, 71, 75, 80, 84, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 104, 108, 109, 110], "set_fit_request": [2, 42, 44, 74, 75], "str": [2, 3, 4, 5, 13, 15, 16, 17, 19, 21, 22, 23, 25, 26, 28, 29, 30, 31, 33, 34, 36, 37, 39, 40, 43, 44, 46, 49, 51, 54, 55, 56, 57, 58, 59, 62, 63, 64, 68, 70, 71, 73, 75, 80, 84, 90, 91, 97, 99, 103, 104, 105, 110], "unchang": [2, 40, 44, 75, 97, 110], "relev": [2, 10, 19, 29, 44, 75, 93, 95, 97], "enable_metadata_rout": [2, 44, 75], "set_config": [2, 44, 75], "meta": [2, 44, 75], "rais": [2, 4, 5, 13, 15, 16, 37, 40, 44, 48, 51, 54, 57, 75, 99], "alia": [2, 40, 44, 75], "metadata_rout": [2, 44, 75], "retain": [2, 44, 59, 75], "chang": [2, 35, 37, 40, 43, 44, 48, 75, 83, 88, 89, 90, 91, 96, 99, 100, 105, 106, 110], "version": [2, 4, 5, 7, 9, 10, 12, 14, 18, 24, 27, 32, 38, 40, 42, 44, 47, 48, 59, 61, 62, 73, 75, 85, 88, 89, 90, 91, 92, 93, 95, 96, 98, 99, 100, 101, 103, 104, 105, 106, 108, 110], "sub": [2, 44, 70, 75], "pipelin": [2, 44, 75, 108], "otherwis": [2, 4, 7, 10, 37, 39, 40, 43, 44, 46, 52, 55, 57, 58, 59, 65, 75, 77, 79, 80, 84, 85, 89, 96, 99, 100], "updat": [2, 13, 16, 40, 43, 44, 54, 62, 75, 86, 91, 93, 100], "set_param": [2, 42, 44, 61, 62, 74, 75], "simpl": [2, 40, 44, 46, 63, 73, 75, 88, 89, 91, 92, 93, 95, 96, 100, 103, 106, 108], "well": [2, 3, 9, 10, 40, 44, 48, 49, 63, 65, 71, 73, 75, 80, 83, 84, 86, 91, 92, 93, 95, 96, 99, 100, 101, 103, 105, 106], "nest": [2, 40, 44, 45, 60, 75, 81, 83, 84, 110], "latter": [2, 40, 44, 75, 106], "compon": [2, 44, 75], "__": [2, 44, 75], "set_score_request": [2, 74, 75], "structur": [3, 72, 95, 97, 99, 100], "unobserv": 3, "less": [3, 4, 5, 10, 34, 43, 51, 63, 72, 73, 77, 79, 83, 93, 95, 97, 98, 99, 100, 101, 105, 110], "channel": [3, 90, 101], "character": 3, "flip": 3, "nm": 3, "invers": [3, 10, 39, 49, 59, 64, 89, 92, 98], "inv": 3, "confident_joint": [3, 25, 39, 46, 59, 64, 65, 86, 99, 101], "un": 3, "under": [3, 10, 40, 44, 64, 71, 72, 92, 97, 100, 106], "joint": [3, 39, 46, 49, 59, 64, 65, 98], "num_label_issu": [3, 43, 46, 65, 80, 84, 86], "estimation_method": [3, 43], "off_diagon": 3, "multi_label": [3, 39, 46, 59, 60, 65, 104], "don": [3, 10, 85, 92, 93, 96, 101, 105, 108], "statis": 3, "compute_confident_joint": [3, 39, 46, 59, 65, 101], "off": [3, 46, 59, 70, 93, 101, 105, 106], "j": [3, 5, 39, 40, 44, 45, 46, 65, 68, 71, 72, 81, 83, 84, 91, 92, 101, 109, 110], "confident_learn": [3, 46, 65, 101], "off_diagonal_calibr": 3, "calibr": [3, 4, 46, 59, 63, 103], "cj": [3, 49, 59], "axi": [3, 34, 49, 51, 57, 77, 80, 90, 91, 92, 93, 97, 99, 100, 101, 103, 104, 106, 108, 109], "bincount": [3, 91, 92, 101, 103, 104], "alwai": [3, 10, 40, 44, 59, 88, 89, 90, 101, 108], "estimate_issu": 3, "over": [3, 5, 10, 40, 43, 44, 70, 71, 77, 79, 88, 92, 93, 95, 97, 98, 99, 100, 101, 106, 108], "As": [3, 7, 85, 91, 92, 96, 97, 100, 101, 108, 110], "add": [3, 5, 7, 13, 15, 16, 40, 44, 62, 71, 89, 90, 91, 92, 93, 96, 97, 99, 100, 101, 104], "approach": [3, 39, 43, 46, 62, 88, 95, 97, 100, 101, 104, 106, 108], "custom": [3, 7, 10, 12, 33, 40, 43, 44, 51, 58, 73, 89, 92, 96, 97, 101, 108], "know": [3, 10, 91, 92, 93, 96, 99, 101, 103, 108], "cut": [3, 70, 85, 88, 89, 92, 95, 96, 98, 101, 104, 106, 107, 108], "off_diagonal_custom": 3, "tl": 3, "dr": 3, "sometim": [3, 35, 105, 106, 110], "underestim": 3, "few": [3, 9, 10, 71, 85, 97, 99, 103, 104, 105, 106, 110], "4": [3, 4, 5, 10, 11, 21, 22, 23, 25, 26, 28, 29, 31, 33, 34, 50, 51, 58, 67, 68, 70, 71, 73, 76, 83, 98, 99, 104, 109, 110], "detail": [3, 4, 5, 10, 13, 17, 19, 36, 39, 40, 44, 45, 51, 56, 59, 62, 63, 64, 65, 67, 68, 70, 71, 72, 79, 80, 81, 85, 86, 90, 97, 99, 100, 104, 106, 110], "num_issu": [3, 7, 43, 90, 91, 92, 93, 95, 96, 97, 100, 101], "calibrate_confident_joint": 3, "up": [3, 7, 10, 20, 29, 30, 33, 46, 51, 53, 62, 63, 89, 98, 99, 105, 108, 110], "p_": [3, 39, 46], "pair": [3, 5, 10, 39, 46, 101], "v": [3, 10, 43, 64, 65, 67, 73, 91, 92, 97, 102, 104, 105, 106, 107], "rest": [3, 5, 7, 9, 10, 12, 38, 64, 65, 67, 75, 88, 89, 91, 92, 93, 95, 96, 99, 100, 101, 103, 108], "fashion": [3, 5, 77, 88], "2x2": 3, "incorrectli": [3, 39, 64, 65, 68, 95, 100, 110], "calibrated_cj": 3, "c": [3, 10, 57, 58, 65, 73, 85, 88, 90, 91, 92, 95, 96, 97, 99, 100, 101, 104, 105, 106, 107, 108], "whose": [3, 4, 5, 10, 31, 40, 44, 49, 54, 58, 63, 67, 70, 76, 79, 83, 84, 90, 91, 92, 93, 95, 96, 99, 100, 101, 104, 105, 106, 109, 110], "truli": [3, 106, 109], "estimate_joint": [3, 39, 101], "joint_estim": 3, "confident_joint_distribut": 3, "recal": [3, 65, 71, 101, 105, 107, 109, 110], "return_indices_of_off_diagon": 3, "frequenc": [3, 29, 63, 64, 71, 80, 105, 106], "done": [3, 10, 62, 75, 91, 99, 101, 104, 106, 107], "overfit": [3, 10, 68, 71, 88, 90, 91, 92, 93, 95, 96, 107], "classifict": 3, "singl": [3, 5, 9, 10, 15, 29, 39, 40, 44, 45, 51, 52, 59, 63, 64, 70, 71, 72, 73, 83, 88, 90, 91, 97, 99, 101, 104, 105], "baselin": [3, 40, 46, 89, 106, 108], "proxi": 3, "union": [3, 5, 15, 29, 51, 54, 55, 56, 59, 60, 65, 71, 75, 83, 99], "tupl": [3, 34, 40, 44, 45, 49, 50, 52, 54, 58, 59, 63, 65, 71, 79, 81, 83, 84, 90, 110], "confident_joint_count": 3, "indices_off_diagon": 3, "simplif": 3, "effici": [3, 4, 5, 10, 43, 49, 54, 55, 63, 72, 77, 79, 85, 89, 93, 97, 99, 100, 109], "practic": [3, 88, 89, 92, 93, 100, 101, 106, 108], "complet": [3, 90, 91, 92, 93, 95, 96, 97, 99, 100, 101, 104, 105, 108], "gist": 3, "cj_ish": 3, "guess": [3, 49, 101, 103], "8": [3, 5, 7, 8, 50, 51, 52, 58, 67, 81, 83, 88, 89, 90, 91, 92, 93, 95, 96, 97, 99, 103, 104, 105, 106, 108, 109, 110], "parallel": [3, 46, 71, 81, 98], "again": [3, 62, 88, 99, 106], "simplifi": [3, 17, 99], "understand": [3, 9, 10, 39, 64, 71, 92, 101, 102, 108, 109, 110], "100": [3, 4, 40, 44, 54, 55, 57, 72, 73, 88, 89, 91, 92, 93, 95, 97, 98, 99, 100, 101, 104, 105, 106, 110], "optim": [3, 40, 41, 44, 62, 88, 89, 92, 93, 95, 96, 97, 98, 101, 103, 104, 106, 108], "speed": [3, 46, 89, 98, 99, 108], "dtype": [3, 26, 28, 29, 34, 40, 44, 58, 59, 67, 83, 90, 97, 100, 105], "enumer": [3, 40, 44, 90, 91, 92, 93, 97, 110], "s_label": 3, "confident_bin": 3, "6": [3, 5, 10, 44, 51, 59, 83, 88, 89, 90, 91, 92, 93, 95, 96, 98, 99, 103, 104, 105, 106, 108, 109, 110], "num_confident_bin": 3, "argmax": [3, 46, 73, 77, 80, 90, 97, 99, 101, 105, 106, 109], "elif": 3, "estimate_lat": 3, "py_method": [3, 49], "cnt": [3, 49], "1d": [3, 5, 13, 15, 19, 35, 43, 46, 51, 52, 54, 59, 60, 67, 76, 88, 90, 97], "eqn": [3, 49], "margin": [3, 46, 49, 51, 73], "marginal_p": [3, 49], "shorthand": [3, 13, 16], "proport": [3, 10, 39, 64, 101, 107], "poorli": [3, 49, 88, 97], "inv_noise_matrix": 3, "estimate_py_and_noise_matrices_from_prob": [3, 101], "variabl": [3, 7, 17, 30, 59, 75, 76, 90, 91, 95, 101, 104, 108], "exact": [3, 10, 49, 54, 88, 91, 92, 93, 95, 97, 100], "within": [3, 4, 5, 10, 14, 18, 35, 40, 41, 44, 45, 47, 65, 70, 79, 81, 83, 91, 92, 93, 99, 105, 109], "percent": 3, "often": [3, 39, 49, 64, 99, 101, 107, 109], "estimate_confident_joint_and_cv_pred_proba": 3, "mani": [3, 9, 10, 59, 60, 71, 88, 89, 90, 91, 93, 95, 96, 99, 100, 104, 105, 106, 108], "wai": [3, 5, 10, 54, 62, 85, 86, 88, 89, 90, 91, 92, 95, 96, 97, 99, 100, 101, 103, 104, 105, 107], "pro": 3, "con": 3, "pred_proba": [3, 107], "combin": [3, 39, 91, 93, 97, 98, 99, 100, 101, 107, 108], "becaus": [3, 10, 49, 55, 59, 70, 96, 97, 99, 100, 101, 103, 105, 107], "littl": [3, 43, 98, 105, 110], "uniform": [3, 73, 98, 99, 101], "20": [3, 7, 45, 84, 90, 93, 96, 97, 98, 99, 100, 101, 105, 108, 109, 110], "Such": [3, 93, 106], "bound": [3, 26, 28, 40, 44, 58, 67, 68, 70, 71, 105], "reason": [3, 10, 25, 40, 44, 55, 72], "comment": [3, 58, 97, 110], "end": [3, 5, 40, 44, 56, 71], "file": [3, 5, 15, 42, 43, 61, 71, 88, 90, 91, 95, 96, 98, 99, 105, 106, 109, 110], "estimate_py_noise_matrices_and_cv_pred_proba": [3, 101], "handl": [3, 5, 7, 10, 19, 21, 22, 23, 25, 26, 28, 29, 30, 31, 33, 34, 36, 40, 43, 44, 54, 55, 56, 86, 88, 89, 91, 92, 93, 95, 96, 97, 98, 100, 101, 104, 106, 108, 109, 110], "five": [3, 68, 71, 101, 105], "estimate_cv_predicted_prob": [3, 101], "estimate_noise_matric": 3, "get_confident_threshold": [3, 42, 43], "amongst": [3, 10, 100, 105], "confident_threshold": [3, 10, 25, 26, 43, 72], "point": [4, 5, 7, 9, 10, 21, 29, 40, 44, 54, 56, 85, 91, 92, 93, 96, 97, 98, 99, 100, 101, 103], "valuat": [4, 9, 21], "help": [4, 39, 40, 44, 71, 85, 86, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 103, 104, 106, 108, 109, 110], "u": [4, 88, 89, 90, 91, 93, 95, 97, 99, 101, 103, 104, 107, 108, 109, 110], "assess": [4, 10, 97, 100, 105], "contribut": [4, 10, 21, 97, 105], "data_shapley_knn": 4, "knn_graph": [4, 5, 10, 11, 13, 19, 21, 22, 29, 31, 34, 47, 53, 95, 97], "metric": [4, 5, 10, 21, 22, 24, 29, 31, 34, 47, 53, 54, 56, 57, 59, 62, 71, 72, 88, 89, 90, 93, 95, 96, 97, 100, 101, 108], "10": [4, 10, 21, 22, 26, 29, 31, 34, 40, 41, 54, 71, 72, 73, 84, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110], "shaplei": [4, 10, 21], "nearest": [4, 5, 10, 13, 19, 26, 29, 31, 53, 54, 55, 56, 57, 72, 92, 96, 97, 106], "neighbor": [4, 5, 10, 13, 19, 21, 26, 29, 31, 47, 54, 55, 56, 57, 72, 91, 92, 93, 95, 96, 97, 99, 106], "knn": [4, 10, 13, 16, 21, 29, 31, 34, 53, 54, 55, 56, 57, 72, 95, 106], "graph": [4, 5, 10, 13, 16, 19, 21, 29, 34, 53, 54], "calcul": [4, 10, 21, 29, 43, 51, 53, 54, 57, 63, 67, 68, 70, 71, 72, 75, 79, 93, 98, 100], "directli": [4, 5, 10, 13, 17, 19, 36, 37, 43, 56, 62, 63, 89, 92, 96, 97, 99, 100, 104, 105, 108], "lowest": [4, 10, 63, 71, 92, 93, 95, 97, 99, 100, 103, 104, 105, 109], "fall": [4, 10, 70, 79, 83, 101, 106], "flag": [4, 10, 25, 29, 46, 51, 64, 65, 68, 75, 85, 89, 90, 91, 92, 93, 95, 96, 97, 98, 100, 101, 105, 106, 108, 109], "approxim": [4, 10, 21, 43, 56, 72, 97, 103], "top": [4, 5, 10, 39, 43, 45, 46, 59, 65, 68, 71, 73, 80, 84, 85, 88, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 104, 105, 106, 108, 110], "found": [4, 5, 7, 10, 13, 16, 17, 21, 22, 23, 25, 26, 28, 29, 30, 31, 33, 34, 40, 44, 59, 85, 88, 89, 90, 91, 92, 93, 95, 96, 97, 99, 100, 104, 106, 108, 110], "arxiv": [4, 21, 101], "ab": [4, 21, 101, 105], "1908": 4, "08619": 4, "1911": [4, 21], "07128": [4, 21], "embed": [4, 5, 10, 13, 19, 72, 85, 89, 90, 91, 92, 95, 96, 97, 100, 101, 104, 108], "represent": [4, 5, 10, 13, 19, 37, 40, 44, 52, 54, 65, 85, 89, 90, 91, 92, 93, 96, 97, 99, 100, 101, 106], "suppli": [4, 104, 105, 108], "2d": [4, 5, 13, 19, 35, 43, 51, 52, 54, 58, 59, 63, 88, 90, 97, 104], "num_exampl": [4, 5, 13, 19, 21, 22, 23, 25, 26, 28, 29, 31, 33, 34, 36, 39, 64, 90, 91, 92, 93, 95, 96, 100, 101], "num_featur": [4, 5, 13, 19, 40, 44, 62], "distanc": [4, 5, 10, 13, 19, 21, 29, 31, 34, 53, 54, 55, 56, 57, 70, 72, 95, 97, 106], "construct": [4, 5, 7, 10, 13, 17, 21, 22, 23, 25, 26, 28, 29, 30, 31, 33, 34, 36, 40, 44, 51, 53, 54, 56, 62, 97, 100], "nearestneighbor": [4, 5, 10, 21, 54, 56, 72, 95, 106], "cosin": [4, 10, 54, 55, 57, 72, 97, 106], "dim": [4, 72, 93, 109], "euclidean": [4, 5, 10, 54, 55, 57, 70, 72, 95], "dimension": [4, 29, 55, 59, 90, 101, 106], "scikit": [4, 44, 55, 56, 59, 72, 85, 88, 89, 90, 91, 92, 95, 96, 97, 99, 108], "fewer": [4, 10, 46, 59, 72, 97, 105], "stabl": [4, 14, 18, 24, 27, 32, 42, 47, 56, 59, 61, 72, 86, 90, 91, 92, 93, 95, 96, 100, 101], "exce": [4, 54, 93, 97], "transform": [4, 10, 35, 51, 54, 57, 59, 72, 73, 88, 89, 92, 93, 96, 97, 100, 106, 110], "rel": [4, 10, 39, 54, 63, 64, 72, 91, 92, 93, 95, 96, 100, 101, 106], "adjust": [4, 41, 46, 54, 67, 72, 73, 85, 97, 100, 101], "closer": [4, 10, 70, 97, 105], "highli": [4, 92, 93], "influenti": 4, "posit": [4, 5, 10, 40, 44, 57, 59, 71, 97, 98, 106], "convers": 4, "neg": [4, 10, 70, 71, 91, 92, 97, 98], "valueerror": [4, 5, 13, 15, 16, 37, 48, 51, 54, 57, 99], "neither": [4, 5, 10, 17, 55, 105], "nor": [4, 5, 10, 17], "larger": [4, 21, 55, 75, 77, 79, 93, 96, 98, 99], "55": [4, 58, 97, 98, 105, 108], "525": 4, "unifi": 5, "audit": [5, 9, 13, 15, 16, 19, 90, 93, 94, 95, 96, 97, 99, 100, 101, 104, 105, 108], "kind": [5, 6, 7, 10, 97, 98], "addit": [5, 7, 9, 12, 13, 16, 36, 38, 40, 44, 51, 54, 56, 60, 63, 71, 80, 81, 88, 89, 90, 91, 95, 96, 97, 100, 101, 103, 106, 107], "depend": [5, 7, 9, 12, 13, 15, 16, 38, 42, 46, 48, 59, 61, 65, 72, 75, 76, 85, 97, 107], "instal": [5, 7, 9, 12, 38, 40, 42, 43, 44, 46, 61, 62, 77, 79, 97], "pip": [5, 7, 9, 12, 38, 62, 85, 88, 89, 90, 91, 92, 93, 95, 96, 98, 100, 101, 103, 104, 105, 106, 108, 109, 110], "development": [5, 7, 9, 12, 38], "git": [5, 7, 9, 12, 38, 85, 88, 89, 90, 91, 92, 93, 95, 96, 98, 100, 101, 103, 104, 105, 106, 108], "github": [5, 7, 9, 12, 38, 40, 41, 59, 85, 88, 89, 90, 91, 92, 93, 95, 96, 98, 99, 100, 101, 103, 104, 105, 106, 108], "com": [5, 7, 9, 12, 38, 40, 41, 43, 48, 59, 72, 85, 88, 89, 90, 91, 92, 93, 95, 96, 98, 100, 101, 103, 104, 105, 106, 108, 109, 110], "egg": [5, 7, 9, 12, 38, 85, 98], "label_nam": [5, 7, 8, 10, 11, 15, 21, 34, 85, 90, 91, 92, 93, 95, 96, 97, 99, 100, 101, 104, 105, 108], "image_kei": [5, 10, 13, 93, 97], "interfac": [5, 9, 10, 56, 85, 88, 89, 92, 95, 96, 98, 99, 100, 101, 104, 106, 108], "librari": [5, 10, 44, 56, 68, 71, 72, 85, 89, 91, 96, 97, 98, 99], "goal": [5, 108], "track": [5, 7, 16, 17, 85, 91, 98, 99, 101], "intermedi": [5, 9, 92], "statist": [5, 10, 13, 16, 25, 29, 39, 63, 64, 71, 92, 95, 96, 97, 100, 101], "convert": [5, 10, 15, 37, 40, 44, 52, 57, 60, 63, 70, 79, 83, 86, 89, 90, 93, 96, 97, 98, 99, 100, 103, 104, 105], "hug": [5, 10, 15, 93], "face": [5, 10, 15, 19, 93, 98, 104], "kei": [5, 7, 10, 13, 15, 19, 21, 22, 23, 25, 26, 28, 29, 30, 31, 33, 34, 39, 40, 44, 51, 63, 64, 70, 72, 91, 92, 93, 96, 99, 101, 103, 105], "string": [5, 10, 13, 15, 17, 21, 22, 23, 25, 26, 28, 29, 30, 31, 33, 34, 36, 37, 39, 40, 44, 55, 59, 63, 64, 76, 80, 83, 84, 89, 95, 96, 97, 99, 103, 104, 110], "dictionari": [5, 7, 10, 13, 15, 16, 19, 21, 22, 23, 25, 26, 28, 29, 30, 31, 33, 34, 39, 40, 44, 50, 59, 63, 64, 67, 68, 70, 71, 91, 92, 95, 96, 101, 103, 104, 105], "path": [5, 15, 40, 43, 44, 71, 90, 91, 97, 99, 105], "local": [5, 7, 10, 15, 40, 41, 44, 90, 91, 92, 93, 98, 99, 100, 101, 103, 104, 106, 108, 110], "text": [5, 7, 10, 15, 21, 22, 23, 25, 26, 28, 29, 30, 31, 33, 34, 45, 51, 72, 81, 83, 84, 85, 87, 91, 92, 94, 98, 99, 100, 101, 102, 103, 106], "txt": [5, 15, 110], "csv": [5, 15, 88, 89, 95, 96, 100, 108], "json": [5, 15], "hub": [5, 15], "multiclass": [5, 15, 18, 51, 59, 63, 104], "regress": [5, 7, 10, 11, 13, 15, 17, 19, 24, 33, 35, 37, 89, 91, 92, 96, 102, 103, 106], "multilabel": [5, 10, 11, 15, 17, 18, 24, 28, 35, 37, 52, 104], "imag": [5, 9, 13, 39, 44, 68, 70, 71, 72, 77, 79, 80, 85, 91, 92, 94, 98, 99, 100, 102, 103, 104, 105, 107, 109], "field": [5, 10, 40, 44], "themselv": [5, 88, 89, 97, 108], "pil": [5, 93], "cleanvis": [5, 10, 13, 97], "level": [5, 10, 19, 21, 22, 23, 25, 26, 28, 29, 30, 31, 33, 34, 36, 39, 54, 58, 81, 83, 92, 93, 97, 99, 102, 104, 109], "load_dataset": [5, 15, 93], "glue": 5, "sst2": 5, "properti": [5, 9, 13, 15, 16, 37, 40, 44, 97], "has_label": [5, 15], "class_nam": [5, 15, 23, 39, 45, 64, 71, 80, 84, 85, 98, 101, 105, 109, 110], "empti": [5, 15, 49, 63, 92, 97, 99, 104], "find_issu": [5, 6, 7, 8, 10, 11, 13, 17, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 85, 90, 91, 92, 93, 95, 96, 97, 99, 100, 101, 104, 108], "issue_typ": [5, 6, 7, 8, 10, 11, 13, 16, 17, 19, 21, 22, 23, 25, 26, 28, 29, 31, 33, 34, 90, 91, 92, 93, 95, 96, 97, 99, 100, 101, 104, 108], "sort": [5, 13, 19, 43, 46, 51, 63, 65, 68, 70, 71, 73, 79, 81, 83, 88, 89, 90, 91, 92, 93, 95, 96, 99, 100, 101, 103, 104, 105, 108, 109, 110], "common": [5, 10, 13, 16, 19, 85, 92, 94, 97, 98, 99, 100, 101, 104, 105, 109], "real": [5, 13, 19, 85, 91, 92, 97, 99, 100, 101, 103, 108, 109], "world": [5, 13, 19, 85, 91, 92, 97, 99, 100, 101, 103, 108, 109], "interact": [5, 13, 19, 96, 99], "thereof": [5, 13, 19], "insight": [5, 13, 19, 71, 97, 103], "best": [5, 9, 10, 13, 19, 50, 63, 73, 88, 89, 91, 92, 93, 95, 97, 99, 100, 103, 104, 106, 107, 108, 110], "properli": [5, 10, 43, 50, 54, 59, 60, 77, 90, 91, 92, 93, 95, 96, 99, 100, 101, 104, 106, 108, 109], "respect": [5, 40, 44, 68, 71, 90, 91, 92, 93, 95, 96, 100, 101, 104, 105], "lexicograph": [5, 50, 59, 90, 91, 92, 93, 95, 96, 100, 101, 104], "squar": [5, 59, 75, 98, 108], "csr": [5, 54, 97], "evenli": 5, "omit": [5, 70, 71, 93, 97, 105], "itself": [5, 35, 40, 44, 54, 97, 105], "three": [5, 10, 39, 63, 64, 75, 80, 88, 90, 91, 92, 95, 98, 101, 103, 107, 108, 109, 110], "indptr": [5, 97], "wise": 5, "start": [5, 7, 10, 37, 40, 41, 44, 51, 85, 104, 110], "th": [5, 10, 45, 50, 58, 59, 63, 65, 68, 70, 71, 72, 81, 83, 84, 96, 104, 105, 110], "ascend": [5, 39, 64, 93, 101], "segment": [5, 77, 79, 80, 102], "reflect": [5, 10, 54, 88, 89, 95, 96, 100, 103, 105, 106, 108], "maintain": [5, 62], "kneighbors_graph": [5, 21, 56, 95], "illustr": [5, 97], "todens": 5, "second": [5, 51, 59, 71, 73, 91, 95, 99, 101, 110], "duplic": [5, 9, 24, 25, 40, 44, 54, 85, 91, 97, 100, 101, 108], "explicit": 5, "precend": 5, "collect": [5, 10, 13, 16, 19, 21, 22, 23, 25, 26, 28, 29, 30, 31, 33, 34, 35, 63, 97, 99, 103, 110], "unspecifi": [5, 13, 19, 46, 65], "interest": [5, 13, 19, 25, 80, 84, 88, 89, 96, 100, 101, 108, 109, 110], "constructor": [5, 10, 11, 13, 19, 26, 33, 54, 56], "issuemanag": [5, 9, 13, 16, 17, 19, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 33, 34, 36], "respons": [5, 13, 19, 25, 56, 75, 76, 97, 98, 108, 110], "random_st": [5, 88, 90, 91, 92, 93, 97, 100, 101, 104, 106], "lab": [5, 6, 8, 10, 21, 22, 23, 25, 26, 28, 29, 30, 31, 33, 34, 43, 85, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 104, 108], "comprehens": [5, 85, 93, 97, 100, 104, 108], "nbr": 5, "n_neighbor": [5, 10, 21, 54, 56, 72, 97], "mode": [5, 12, 21, 40, 43, 44, 95, 106], "4x4": 5, "float64": [5, 29, 40, 44, 83], "compress": [5, 10, 54, 59, 77, 79, 97], "toarrai": [5, 54, 97], "NOT": [5, 43, 96], "23606798": 5, "41421356": [5, 54], "configur": [5, 19, 51, 92], "suppos": [5, 10, 68, 88, 89, 106, 108], "who": [5, 70, 88, 95, 97, 101, 110], "manag": [5, 8, 9, 10, 13, 16, 17, 18, 19, 20, 22, 23, 25, 26, 28, 29, 30, 31, 33, 34, 62, 91, 99], "clean_learning_kwarg": [5, 10, 11, 26, 33, 99, 108], "labelissuemanag": [5, 10, 17, 24, 26], "prune_method": [5, 86], "prune_by_noise_r": [5, 46, 65, 101], "report": [5, 7, 10, 12, 13, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 39, 64, 84, 85, 90, 91, 92, 95, 96, 97, 99, 100, 101, 104, 108, 110], "include_descript": [5, 13, 21, 22, 23, 25, 26, 28, 29, 31, 33, 34, 36], "show_summary_scor": [5, 13, 36, 97, 100], "show_all_issu": [5, 13, 36, 97, 100], "summari": [5, 7, 10, 13, 16, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 39, 45, 61, 62, 64, 69, 78, 79, 81, 82, 83, 86, 90, 91, 92, 93, 95, 96, 97, 98, 100, 101, 105, 108, 109, 110], "show": [5, 7, 10, 29, 40, 44, 50, 59, 71, 80, 84, 88, 92, 93, 95, 96, 97, 98, 99, 100, 101, 103, 106, 108, 109, 110], "suffer": [5, 10, 13, 16, 25, 65, 73, 84, 97, 110], "onc": [5, 10, 25, 39, 40, 44, 88, 91, 99, 100, 101, 104, 105], "familiar": [5, 97], "overal": [5, 7, 10, 13, 16, 21, 22, 23, 25, 26, 28, 29, 30, 31, 33, 34, 39, 45, 51, 63, 64, 67, 70, 71, 75, 79, 80, 81, 83, 85, 86, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 103, 105, 110], "sever": [5, 7, 10, 13, 15, 16, 25, 40, 43, 44, 46, 67, 70, 72, 73, 79, 83, 85, 88, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 105, 106, 110], "compar": [5, 63, 72, 83, 91, 92, 95, 97, 100, 101, 105], "issue_summari": [5, 7, 10, 13, 16, 97], "With": [5, 9, 10, 43, 89, 96, 99, 101, 103, 108, 109, 110], "usag": [5, 43, 62], "usual": [5, 15, 35, 36, 93, 103, 108], "ti": [5, 63], "exhibit": [5, 7, 10, 13, 16, 80, 90, 91, 92, 93, 95, 96, 100, 101, 105], "ie": [5, 75], "likelihood": [5, 10, 43, 45, 46, 65, 70, 72, 73, 77, 81], "wherea": [5, 10, 59, 65, 88, 89, 97, 107], "outlier": [5, 9, 11, 17, 24, 25, 34, 47, 54, 73, 85, 91, 92, 97, 100, 101, 102, 108], "fundament": [5, 10], "incompar": 5, "quantiti": [5, 101, 108], "global": [5, 7, 10, 25, 40, 44, 98], "non_iid": [5, 10, 11, 17, 29, 92, 93, 95, 96, 97, 100, 101], "hypothesi": [5, 97], "iid": [5, 7, 9, 29, 85, 95, 100, 101], "never": [5, 90, 100, 101, 104, 106, 107], "someth": [5, 7, 10, 40, 44, 73, 105], "123": [5, 91, 92], "456": [5, 88, 89, 90], "nearest_neighbor": 5, "7": [5, 10, 51, 52, 62, 81, 83, 88, 89, 90, 91, 92, 95, 96, 97, 98, 99, 103, 104, 105, 106, 108, 109, 110], "9": [5, 21, 22, 23, 25, 26, 28, 29, 31, 33, 34, 45, 51, 52, 67, 81, 83, 88, 89, 90, 91, 92, 95, 96, 97, 98, 101, 103, 104, 105, 106, 108, 109, 110], "distance_to_nearest_neighbor": [5, 11, 91, 92, 93, 95, 96, 100, 101], "789": 5, "get_issu": [5, 10, 13, 16, 90, 91, 92, 93, 95, 96, 97, 99, 100, 101, 104, 108], "issue_nam": [5, 6, 7, 10, 13, 16, 17, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 90, 91, 92, 93, 95, 96, 97, 100, 101], "focu": [5, 10, 13, 16, 96, 97, 100, 109, 110], "full": [5, 10, 13, 16, 43, 62, 71, 93, 100, 110], "summar": [5, 13, 16, 21, 22, 23, 25, 26, 28, 29, 30, 31, 33, 34, 39, 64, 80, 84, 85, 109], "specific_issu": [5, 13, 16], "lie": [5, 10, 72, 73, 89, 90, 91, 92, 93, 95, 96, 97, 100, 101], "get_issue_summari": [5, 10, 13, 16, 92, 97], "get_info": [5, 10, 13, 16, 92, 96, 97, 98], "yet": [5, 20, 30, 62, 98, 100, 103], "list_possible_issue_typ": [5, 17, 18], "regist": [5, 7, 17, 18, 20, 30, 40, 44, 91], "rtype": [5, 17, 21, 22, 23, 25, 26, 28, 29, 30, 31, 33, 34, 40, 44], "registri": [5, 17, 18], "list_default_issue_typ": [5, 17, 18], "folder": [5, 90, 91, 93], "load": [5, 15, 43, 71, 93, 98, 99, 100, 101, 105, 106, 109, 110], "futur": [5, 10, 25, 40, 44, 63, 85, 91, 96], "overwrit": [5, 91], "separ": [5, 39, 51, 67, 91, 92, 93, 97, 99, 100, 105, 107], "static": 5, "rememb": [5, 96, 97, 99, 100, 101], "part": [5, 10, 40, 44, 46, 68, 70, 71, 90, 91, 97, 98, 100, 109, 110], "ident": [5, 10, 25, 59, 96, 97], "datalab": [6, 8, 11, 13, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 85, 88, 89, 98, 100, 103, 108], "walk": [7, 100], "alongsid": [7, 13, 40, 44, 91, 99], "pre": [7, 8, 10, 40, 44, 85, 91, 92, 108], "runtim": [7, 40, 43, 44, 75, 77, 79, 90, 93, 99, 100], "issue_manager_factori": [7, 17, 91], "myissuemanag": [7, 17], "myissuemanagerforregress": 7, "decor": [7, 17], "ll": [7, 51, 88, 89, 90, 91, 92, 93, 95, 96, 97, 99, 100, 101, 103, 104, 105, 106, 107, 108, 110], "thing": [7, 44, 89, 97, 101, 108], "next": [7, 63, 85, 88, 89, 90, 95, 96, 97, 99, 103, 105, 108, 110], "dummi": 7, "randint": [7, 34, 51, 91, 92, 97], "mark": [7, 10, 86, 105, 106, 108], "regard": [7, 92, 97, 100, 101], "rand": [7, 51, 54, 91, 92, 97], "is_": [7, 10, 91], "_issu": [7, 10, 91], "issue_score_kei": [7, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 91], "whole": [7, 10, 29, 40, 44, 92, 97], "make_summari": [7, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 91], "popul": [7, 96, 100], "verbosity_level": [7, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34], "std": [7, 105], "raw_scor": 7, "bit": 7, "involv": [7, 43, 80, 84, 97, 99, 104], "intermediate_arg": 7, "min": [7, 51, 70, 83, 91, 99, 106], "sin_filt": 7, "sin": 7, "arang": [7, 97], "kernel": [7, 97], "affect": [7, 10, 40, 44, 55, 77, 83, 96, 97, 99], "easili": [7, 10, 49, 86, 88, 89, 90, 92, 95, 96, 100, 101, 103, 104, 106, 107, 108, 109], "hard": [7, 44, 85, 98, 106], "sai": [7, 10, 40, 44, 97, 104, 109], "anoth": [7, 10, 25, 39, 43, 55, 58, 70, 73, 89, 95, 96, 97, 99, 101, 103, 106], "try": [7, 9, 10, 43, 46, 62, 63, 77, 79, 85, 88, 89, 92, 93, 95, 96, 97, 98, 99, 100, 101, 104, 106, 107, 108, 109], "won": [7, 40, 44, 91, 92, 99, 104], "issue_manag": [7, 10, 12, 13, 16, 18, 21, 22, 23, 26, 28, 29, 30, 31, 33, 34, 91], "instanti": [7, 19, 43, 62, 72, 89, 90, 92, 95], "477762": 7, "286455": 7, "term": [7, 10, 49, 59, 71, 90, 91, 92, 93, 95, 96, 100, 101], "4778": 7, "is_basic_issu": 7, "basic_scor": 7, "13": [7, 22, 31, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 100, 101, 103, 105, 106, 108, 109, 110], "003042": 7, "058117": 7, "11": [7, 10, 62, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 108, 109, 110], "121908": 7, "15": [7, 57, 62, 75, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 103, 105, 106, 108, 109, 110], "169312": 7, "17": [7, 89, 90, 92, 93, 95, 96, 97, 98, 99, 100, 101, 103, 105, 106, 108, 109, 110], "229044": 7, "2865": 7, "is_intermediate_issu": 7, "intermediate_scor": 7, "000000": [7, 91, 92, 97, 98, 100, 101], "007059": 7, "009967": 7, "010995": 7, "087332": 7, "016296": 7, "03947": 7, "019459": 7, "794251": 7, "underperform": [8, 9, 34, 85, 100], "group": [8, 9, 29, 34, 85, 98, 100, 105, 110], "dbscan": [8, 10, 34], "hdbscan": 8, "etc": [8, 10, 25, 35, 40, 44, 49, 62, 63, 81, 85, 91, 92, 95, 96, 97, 99, 100, 101, 104, 108], "sensit": [8, 10, 57, 97, 100], "ep": [8, 34, 71], "radiu": 8, "min_sampl": [8, 34], "kmean": [8, 97], "your_data": 8, "get_pred_prob": 8, "n_cluster": [8, 34, 97], "cluster_id": [8, 10, 11, 34, 97], "labels_": 8, "underperforming_group": [8, 10, 11, 17, 24, 92, 93, 95, 96, 97, 100, 101], "search": [9, 10, 23, 29, 30, 47, 53, 54, 55, 58, 75, 97, 99, 100, 107], "nondefault": 9, "Near": [9, 99], "imbal": [9, 24, 67, 72, 73, 92], "spuriou": [9, 13, 93], "correl": [9, 13, 93], "null": [9, 11, 17, 24, 92, 93, 96, 100, 101], "togeth": [9, 10, 49, 89, 91, 92, 93, 95, 96, 100, 101, 108, 110], "built": [9, 51, 88, 89, 92, 95, 96, 98, 101, 104, 106, 108], "own": [9, 40, 42, 44, 56, 61, 67, 68, 71, 77, 81, 88, 89, 90, 92, 93, 95, 96, 97, 99, 100, 103, 104, 108, 109, 110], "prerequisit": 9, "basic": [9, 44, 62, 97, 100, 106], "fulli": [9, 10, 40, 44, 62, 99], "platform": [9, 10, 85, 88, 89, 92, 93, 95, 96, 98, 99, 101, 104, 106, 107, 108], "write": [9, 10], "code": [9, 10, 40, 44, 49, 59, 62, 85, 86, 88, 89, 90, 91, 92, 93, 95, 96, 98, 99, 103, 104, 105, 106, 108, 109, 110], "being": [9, 10, 13, 16, 39, 40, 44, 46, 51, 58, 59, 73, 88, 95, 99, 100, 101, 108, 109], "100x": [9, 10, 88, 89, 92, 95, 96, 98, 101, 104, 106, 108], "faster": [9, 10, 43, 72, 75, 77, 79, 85, 88, 89, 92, 95, 96, 98, 99, 101, 104, 106, 108], "intellig": [9, 10, 100], "quickli": [9, 10, 41, 88, 90, 93, 95, 96, 99, 100, 104, 106, 107, 109, 110], "fix": [9, 10, 63, 88, 89, 92, 95, 96, 97, 98, 100, 101, 104, 106, 107, 108], "scientist": [9, 10], "million": [9, 10, 110], "thank": [9, 10], "ai": [9, 10, 85, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 102, 103, 104, 106, 108, 110], "suggest": [9, 10, 39, 63, 64, 70, 89, 93, 96, 97, 99, 108], "power": [9, 10, 93, 98, 101, 110], "automl": [9, 10, 85, 88, 89, 92, 95, 96, 98, 99, 101, 104, 106, 107, 108], "system": [9, 10, 90, 93, 109], "foundat": [9, 10, 85, 88, 89, 92, 95, 96, 97, 98, 101, 104, 106, 107, 108], "improv": [9, 10, 63, 88, 89, 92, 93, 98, 99, 101, 102, 108, 109], "click": [9, 10, 90, 91, 92, 93, 98, 100, 101, 103, 104, 106, 108, 110], "tune": [9, 10, 89, 90, 96, 98, 100, 106], "serv": [9, 10, 16, 19, 103], "auto": [9, 10, 88, 89, 92, 98, 99, 100, 108], "free": [9, 10, 85, 88, 89, 90, 92, 93, 95, 96, 98, 99, 100, 101, 104, 106, 107, 108], "page": [10, 92, 99, 100, 101], "variou": [10, 16, 33, 42, 60, 61, 85, 88, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 103, 105], "why": [10, 88, 89, 92, 95, 96, 97, 98, 101, 104, 106, 108], "matter": [10, 39, 64], "didn": [10, 97, 100], "plu": [10, 88, 89, 92, 95, 96, 98, 101, 104, 106, 108], "ye": [10, 11], "near_dupl": [10, 11, 17, 22, 91, 92, 93, 95, 96, 97, 99, 100, 101], "class_imbal": [10, 11, 17, 23, 92, 93, 95, 96, 97, 100, 101], "data_valu": [10, 11, 17, 24, 97], "No": [10, 11, 88, 89, 96, 97, 99], "reinterpret": [10, 11], "your_regression_model": [10, 11], "_score": 10, "badli": [10, 70, 88, 89, 110], "issue_scor": 10, "atyp": [10, 72, 91, 92, 93, 95, 96, 100, 101, 106], "datapoint": [10, 34, 46, 51, 59, 73, 76, 85, 88, 89, 90, 91, 92, 95, 96, 99, 100, 107, 108], "is_issu": [10, 25], "primarili": 10, "former": [10, 40, 44], "investig": [10, 90, 97], "expertis": [10, 88, 89, 92, 95, 96, 98, 101, 104, 106, 108], "interpret": [10, 98, 99, 101, 104, 108], "annot": [10, 39, 50, 63, 64, 65, 67, 68, 70, 71, 80, 83, 84, 85, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 105, 109], "dissimilar": [10, 95, 96], "preced": 10, "incorrect": [10, 70, 73, 76, 88, 90, 91, 92, 93, 95, 96, 97, 100, 101, 105, 108], "due": [10, 43, 46, 73, 77, 79, 90, 91, 92, 93, 95, 96, 97, 100, 101, 108], "appear": [10, 39, 50, 64, 65, 68, 76, 92, 93, 95, 96, 97, 100, 108, 109], "now": [10, 13, 43, 86, 88, 89, 90, 92, 97, 99, 100, 103, 105, 106, 108, 110], "token": [10, 45, 58, 79, 80, 81, 82, 83, 84, 99, 101, 102], "hamper": [10, 93, 98], "analyt": [10, 85, 97, 99, 103], "lead": [10, 70, 73, 93, 97, 100, 105], "draw": [10, 91, 92, 97], "conclus": [10, 96, 97], "let": [10, 40, 44, 72, 73, 88, 89, 90, 92, 93, 95, 96, 97, 99, 100, 103, 104, 105, 106, 108, 109, 110], "sort_valu": [10, 90, 92, 93, 95, 96, 97, 99, 100, 101, 103, 104, 108], "head": [10, 88, 89, 90, 92, 93, 95, 96, 97, 98, 100, 101, 103, 108], "97": [10, 88, 98, 99, 100, 101, 105, 108, 110], "064045": 10, "58": [10, 88, 92, 97, 98, 101, 105], "680894": 10, "41": [10, 97, 98, 100, 105, 108], "746043": 10, "794894": 10, "98": [10, 98, 99, 100, 108], "802911": 10, "give": [10, 51, 73, 101, 103, 109], "li": [10, 72], "especi": [10, 88, 89, 93, 97, 99, 108], "veri": [10, 39, 64, 68, 70, 89, 91, 92, 93, 95, 96, 99, 100, 101, 103, 106, 108], "rare": [10, 46, 71, 91, 92, 93, 95, 96, 99, 100, 101], "anomal": [10, 73, 91, 92, 93, 95, 96, 100, 101], "articl": [10, 43, 99], "blog": 10, "unexpect": [10, 40, 44, 96], "consequ": 10, "inspect": [10, 89, 90, 92, 93, 100, 101, 105, 108], "011562": 10, "62": [10, 97, 100, 101, 105, 108], "019657": 10, "22": [10, 90, 91, 93, 97, 98, 100, 101, 104, 105, 110], "035243": 10, "040907": 10, "42": [10, 51, 96, 97, 98, 105, 110], "056865": 10, "smaller": [10, 72, 104, 105], "extrem": [10, 13, 91, 92, 93, 95, 96, 97, 99, 100, 101], "record": [10, 40, 44, 90, 95, 108], "abbrevi": 10, "misspel": 10, "typo": [10, 84], "resolut": 10, "video": [10, 98], "audio": [10, 91, 92, 94, 99], "minor": [10, 58], "variat": 10, "translat": [10, 100], "d": [10, 57, 88, 95, 96, 97, 99, 100, 101, 104, 108, 110], "constant": [10, 34, 75], "median": [10, 33, 57], "question": [10, 25, 85, 101], "nearli": [10, 25, 92, 93, 95, 96], "awar": [10, 86, 101], "presenc": [10, 54, 56, 101], "36": [10, 97, 98, 100, 110], "066009": 10, "80": [10, 41, 88, 95, 100, 104, 108], "003906": 10, "093245": 10, "005599": 10, "27": [10, 95, 97, 98, 100, 101, 105, 110], "156720": 10, "009751": 10, "72": [10, 97, 98, 100, 101, 104, 108], "signific": [10, 88, 89, 92, 95, 96, 98, 100, 101, 104, 106, 108], "violat": [10, 85, 95, 96, 100, 101], "assumpt": [10, 95, 96, 100, 101], "changepoint": [10, 95, 96, 100, 101], "shift": [10, 54, 56, 95, 96, 100, 101], "drift": [10, 92, 95, 97, 100, 101], "autocorrel": [10, 95, 96, 100, 101], "almost": [10, 95, 96, 100, 101], "adjac": [10, 54, 95, 96, 100, 101], "tend": [10, 39, 49, 95, 96, 100, 101, 109, 110], "sequenti": [10, 40, 44, 62, 93], "pai": [10, 96, 97], "attent": [10, 97], "realli": [10, 89, 96, 100, 103, 109], "mere": 10, "highlight": [10, 80, 84, 91, 92, 95, 97, 109], "necessarili": [10, 63, 71, 96, 100, 101], "wrong": [10, 63, 68, 70, 86, 89, 91, 92, 96, 99, 100, 101, 105], "gap": 10, "b": [10, 21, 22, 23, 25, 26, 28, 29, 31, 33, 34, 39, 58, 59, 83, 88, 95, 96, 97, 98, 99, 100, 101, 107, 110], "x1": [10, 68, 71, 105], "x2": [10, 68, 71, 105], "10th": 10, "100th": 10, "90": [10, 83, 88, 95, 100, 101, 107, 108], "similarli": [10, 40, 44, 91, 93, 95, 99, 100, 105], "associ": [10, 15, 19, 35, 37, 40, 44, 71, 103], "blogpost": 10, "proper": [10, 59, 63, 68, 71, 88, 93, 96, 99, 103, 105], "scenario": [10, 54, 56, 73, 91, 92], "underli": [10, 45, 56, 72, 81, 83, 110], "stem": [10, 72, 106], "evolv": 10, "influenc": 10, "act": [10, 70, 91], "accordingli": [10, 35, 54], "emploi": [10, 104, 106], "partit": [10, 107], "ahead": 10, "good": [10, 40, 44, 57, 62, 64, 70, 73, 77, 79, 80, 85, 93, 97, 100], "problem": [10, 35, 43, 51, 80, 85, 91, 92, 93, 96, 97, 99], "deploy": [10, 88, 89, 101, 108], "overlook": [10, 70, 105], "fact": 10, "thu": [10, 39, 44, 64, 88, 90, 95, 96, 100, 101, 107, 110], "diagnos": [10, 92, 99], "24": [10, 90, 97, 98, 100, 101, 103, 105, 108], "681458": 10, "37": [10, 91, 97, 98, 100], "804582": 10, "64": [10, 44, 88, 93, 95, 97, 101, 105], "810646": 10, "815691": 10, "78": [10, 88, 95, 98, 100, 101, 105, 108], "834293": 10, "Be": [10, 44], "cautiou": 10, "behavior": [10, 19, 39, 40, 44, 71, 99], "rarest": [10, 92, 100], "q": [10, 97, 105], "subpar": 10, "special": [10, 54, 58], "techniqu": [10, 105], "smote": 10, "asymmetr": [10, 39], "28": [10, 93, 96, 97, 98, 100, 101, 103, 110], "75": [10, 51, 91, 92, 97, 98, 100, 103, 104, 105, 108, 110], "33": [10, 40, 44, 97, 98, 100, 105], "68": [10, 88, 98, 100, 101, 105], "excess": [10, 93], "dark": [10, 97, 109], "bright": [10, 110], "blurri": [10, 93, 97], "lack": [10, 62, 97, 100], "unusu": [10, 105, 106], "discuss": [10, 99], "earlier": [10, 89, 110], "unintend": [10, 95, 96, 97], "relationship": [10, 39], "irrelev": 10, "exploit": 10, "fail": [10, 15], "unseen": 10, "hold": [10, 15], "aris": 10, "captur": [10, 39, 90, 105, 106, 109], "environment": 10, "preprocess": [10, 88, 89, 92, 95, 97, 106, 108], "systemat": [10, 80, 84, 103], "photograph": 10, "uncorrelated": [10, 97], "strongli": [10, 96, 97], "minu": [10, 73], "sole": [10, 75, 88, 91, 100, 103, 106], "review": [10, 88, 89, 92, 95, 96, 98, 99, 100, 101, 105, 108, 109, 110], "latch": 10, "onto": 10, "troublesom": 10, "spurious_correl": [10, 97], "correlations_df": [10, 97], "blurry_scor": [10, 97], "559": [10, 100], "dark_scor": [10, 93, 97], "808": 10, "light_scor": [10, 97], "723": [10, 95, 100], "odd_size_scor": [10, 97], "957": 10, "odd_aspect_ratio_scor": [10, 97], "835": 10, "grayscale_scor": [10, 97], "003": 10, "spurious": 10, "low_information_scor": [10, 93, 97], "688": [10, 100, 108], "categor": [10, 72, 87, 88, 91, 92, 94, 99, 100, 108], "characterist": [10, 39, 97], "grayscal": [10, 93, 97], "cluster": [10, 21, 34, 100], "slice": [10, 100], "poor": [10, 97, 100], "subpopul": [10, 100], "faq": [10, 85, 92, 93, 95, 96, 102], "get_self_confidence_for_each_label": [10, 51, 73], "r": [10, 43, 75, 91, 92, 97, 108, 109], "tabular": [10, 85, 87, 91, 92, 94, 97, 99, 100, 103], "encod": [10, 52, 71, 77, 80, 88, 89, 95, 96, 99, 100, 108, 109], "71": [10, 97, 98, 100, 101, 105, 108], "70": [10, 83, 95, 97, 100], "69": [10, 100, 101, 108], "subgroup": [10, 97], "wors": [10, 97, 103], "ratio": [10, 97], "miss": [10, 30, 40, 44, 59, 68, 70, 99, 100, 105, 108], "pattern": [10, 97], "isn": [10, 20, 30], "scalabl": 10, "sacrific": 10, "One": [10, 59, 72, 99], "quantif": 10, "39": [10, 89, 90, 91, 93, 96, 97, 98, 99, 100, 105, 108, 109, 110], "32": [10, 90, 91, 97, 98, 100, 103, 105], "valuabl": [10, 21, 97], "formal": 10, "num_row": [10, 93], "met": [10, 55, 110], "identifier_column": 10, "binari": [10, 37, 51, 59, 65, 67, 101, 110], "column_identifi": 10, "exert": [10, 92], "possible_issue_typ": 10, "label_kwarg": 10, "outlier_kwarg": 10, "near_duplicate_kwarg": 10, "non_iid_kwarg": 10, "class_imbalance_kwarg": 10, "underperforming_group_kwarg": 10, "null_kwarg": 10, "data_valuation_kwarg": 10, "identifier_column_kwarg": 10, "health_summary_paramet": [10, 24, 26, 33], "health_summari": [10, 26, 39, 85, 98], "health_summary_kwarg": 10, "tandem": [10, 98], "view": [10, 40, 44, 45, 46, 79, 81, 83, 85, 88, 89, 90, 91, 92, 95, 96, 98, 100, 101, 103, 104, 105, 106, 107, 108, 110], "strength": [10, 57, 71, 97], "scaling_factor": [10, 31, 57], "ood_kwarg": 10, "outofdistribut": [10, 31, 72, 106], "outsid": [10, 99, 104], "outlierissuemanag": [10, 17, 24, 31], "nearduplicateissuemanag": [10, 17, 22, 24], "noniidissuemanag": [10, 17, 24, 29], "num_permut": [10, 29], "permut": [10, 29], "significance_threshold": [10, 29], "signic": 10, "noniid": [10, 24], "classimbalanceissuemanag": [10, 17, 23, 24], "underperforminggroupissuemanag": [10, 17, 24, 34], "determinin": 10, "neighbour": 10, "min_cluster_sampl": [10, 34], "filter_cluster_id": [10, 24, 34], "clustering_kwarg": [10, 34], "nullissuemanag": [10, 17, 24, 30], "datavaluationissuemanag": [10, 17, 21, 24], "identifiercolumnissuemanag": 10, "codeblock": 10, "demonstr": [10, 43, 54, 91, 92, 93, 96, 97, 98, 99, 100, 101, 103, 104, 105, 107, 108, 109], "howev": [10, 40, 44, 54, 59, 88, 89, 90, 93, 95, 96, 97, 100, 103, 107, 109], "mandatori": 10, "image_issue_types_kwarg": 10, "vice": [10, 64], "versa": [10, 64], "light": [10, 93, 97, 98, 105, 109], "29": [10, 93, 97, 98, 100, 103, 104, 105, 109, 110], "low_inform": [10, 93, 97], "odd_aspect_ratio": [10, 93, 97], "35": [10, 91, 97, 98, 100, 103, 104, 105], "odd_siz": [10, 93, 97], "doc": [10, 40, 44, 72, 85, 90, 91, 92, 93, 95, 96, 98, 100, 101, 103, 104, 106, 108, 110], "spurious_correlations_kwarg": 10, "enough": [10, 43, 59, 97, 99], "label_scor": [11, 26, 28, 33, 90, 91, 92, 93, 95, 96, 97, 100, 101, 104, 108], "is_outlier_issu": [11, 91, 92, 93, 95, 96, 97, 100, 101], "outlier_scor": [11, 31, 91, 92, 93, 95, 96, 97, 100, 101, 106], "is_near_duplicate_issu": [11, 91, 92, 93, 95, 96, 97, 99, 100, 101], "near_duplicate_scor": [11, 22, 91, 92, 93, 95, 96, 97, 99, 100, 101], "near_duplicate_set": [11, 22, 24, 91, 92, 93, 95, 96, 99, 100, 101], "is_non_iid_issu": [11, 92, 95, 96, 97, 100, 101], "non_iid_scor": [11, 29, 92, 95, 96, 97, 100, 101], "is_class_imbalance_issu": [11, 92, 97, 100], "class_imbalance_scor": [11, 23, 92, 97, 100], "is_underperforming_group_issu": [11, 92, 97, 100], "underperforming_group_scor": [11, 34, 92, 97, 100], "is_null_issu": [11, 92, 97, 100], "null_scor": [11, 30, 92, 97, 100], "is_data_valuation_issu": [11, 97], "data_valuation_scor": [11, 21, 97], "studio": [12, 85, 88, 89, 92, 93, 95, 96, 98, 99, 100, 101, 104, 106, 107, 108], "data_issu": [12, 13, 18, 19, 36], "issue_find": [12, 18], "factori": [12, 18, 19], "model_output": [12, 18], "incorpor": [13, 86, 101], "vision": [13, 93], "create_imagelab": [13, 14], "huggingfac": [13, 90, 91, 92, 93, 99], "imagelabdataissuesadapt": [13, 14], "strategi": [13, 16, 51, 97, 99], "dataissu": [13, 16, 18, 19, 36], "_infostrategi": [13, 16], "basi": [13, 16], "filter_based_on_max_preval": 13, "max_num": 13, "collect_issues_from_imagelab": [13, 16], "collect_issues_from_issue_manag": [13, 16], "collect_statist": [13, 16], "reus": [13, 16, 25], "avoid": [13, 16, 40, 43, 44, 46, 54, 59, 65, 68, 71, 75, 77, 79, 91, 92, 99, 100], "recomput": [13, 16, 89], "weighted_knn_graph": [13, 16], "issue_manager_that_computes_knn_graph": [13, 16], "set_health_scor": [13, 16], "health": [13, 16, 26, 39, 64, 85], "correlationvisu": [13, 14], "visual": [13, 68, 69, 71, 88, 91, 92, 93, 108, 110], "title_info": 13, "ncol": [13, 93, 106], "cell_siz": 13, "correlationreport": [13, 14], "anyth": [13, 101], "imagelabreporteradapt": [13, 14], "get_report": [13, 36], "report_str": [13, 21, 22, 23, 25, 26, 28, 29, 30, 31, 33, 34, 36], "imagelabissuefinderadapt": [13, 14], "issuefind": [13, 18, 19, 36], "get_available_issue_typ": [13, 19], "handle_spurious_correl": [13, 14], "imagelab_issu": 13, "_": [13, 22, 23, 25, 26, 28, 29, 30, 33, 34, 51, 58, 59, 88, 90, 91, 93, 97, 98, 101, 104], "imagelab": [14, 16, 18], "except": [15, 40, 44, 62, 73, 91, 92, 93, 100, 103], "dataformaterror": [15, 18], "add_not": 15, "with_traceback": 15, "tb": 15, "__traceback__": 15, "datasetdicterror": [15, 18], "datasetdict": 15, "datasetloaderror": [15, 18], "dataset_typ": 15, "sublist": 15, "map_to_int": 15, "abc": [15, 25, 35], "is_avail": [15, 93], "central": [16, 110], "repositori": 16, "get_data_statist": [16, 18], "concret": 17, "subclass": [17, 40, 44, 72, 91], "regressionlabelissuemanag": [17, 24, 32, 33], "multilabelissuemanag": [17, 24, 27, 28], "from_str": [17, 37, 47, 51], "my_issu": 17, "logic": [17, 37, 43, 46, 77, 79, 100], "modeloutput": [18, 35], "multiclasspredprob": [18, 35], "regressionpredict": [18, 35], "multilabelpredprob": [18, 35], "instati": 19, "public": [19, 97, 100, 101, 105, 109, 110], "creation": [19, 44, 97], "execut": [19, 40, 44, 91, 99, 105], "coordin": [19, 68, 70, 71, 105, 110], "At": [19, 71, 99], "direct": [20, 30, 40, 44, 56, 62], "vstack": [21, 59, 93, 98, 99, 101, 103, 104], "25": [21, 29, 40, 51, 57, 92, 93, 97, 98, 100, 101, 103, 104, 105, 110], "classvar": [21, 22, 23, 25, 26, 28, 29, 30, 31, 33, 34], "short": [21, 22, 23, 25, 26, 28, 29, 30, 31, 33, 34, 58, 59], "item": [21, 22, 23, 25, 26, 28, 29, 30, 31, 33, 34, 40, 44, 59, 91, 92, 93, 97, 99, 101, 103, 104], "some_info_kei": [21, 22, 23, 25, 26, 28, 29, 30, 31, 33, 34], "additional_info_kei": [21, 22, 23, 25, 26, 28, 29, 30, 31, 33, 34], "default_threshold": [21, 24, 31], "collect_info": [21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34], "info_to_omit": [21, 22, 23, 25, 26, 28, 29, 31, 33, 34], "compos": [21, 22, 23, 25, 26, 28, 29, 31, 33, 34, 40, 44, 89, 96, 106], "is_x_issu": [21, 22, 23, 25, 26, 28, 29, 31, 33, 34], "x_score": [21, 22, 23, 25, 26, 28, 29, 31, 33, 34], "val_a": [21, 22, 23, 25, 26, 28, 29, 31, 33, 34], "val_b1": [21, 22, 23, 25, 26, 28, 29, 31, 33, 34], "val_b2": [21, 22, 23, 25, 26, 28, 29, 31, 33, 34], "occurr": [22, 23, 25, 29, 30, 31, 34, 58], "median_nn_dist": 22, "bleed": [24, 27, 32, 42], "edg": [24, 27, 32, 42, 70, 85, 88, 89, 92, 95, 96, 98, 101, 104, 106, 107, 108, 110], "sharp": [24, 27, 32, 42], "get_health_summari": [24, 26], "ood": [24, 31, 72, 73, 106], "simplified_kolmogorov_smirnov_test": [24, 29], "outlier_cluster_label": [24, 34], "no_underperforming_cluster_id": [24, 34], "perform_clust": [24, 34], "get_underperforming_clust": [24, 34], "find_issues_with_predict": [24, 32, 33], "find_issues_with_featur": [24, 32, 33], "believ": [25, 109], "priori": [25, 101], "abstract": [25, 35], "applic": [26, 63, 85, 97, 99, 101, 103, 110], "typevar": [26, 28, 40, 44, 58, 67, 70, 71], "scalartyp": [26, 28], "covari": [26, 28, 75, 108], "summary_dict": 26, "neighbor_histogram": 29, "non_neighbor_histogram": 29, "kolmogorov": 29, "smirnov": 29, "largest": [29, 43, 51, 54, 73, 77, 79, 105, 109], "empir": [29, 50, 63], "cumul": 29, "ecdf": 29, "histogram": [29, 95, 97, 108], "absolut": [29, 33], "trial": 29, "null_track": 30, "extend": [30, 52, 62, 93, 97, 100, 105, 106, 110], "superclass": 30, "arbitrari": [30, 39, 79, 83, 91, 106, 108], "prompt": 30, "address": [30, 89, 91, 92, 96, 99], "enabl": [30, 44, 56, 100], "37037": 31, "q3_avg_dist": 31, "iqr_avg_dist": 31, "median_outlier_scor": 31, "issue_threshold": 31, "multipli": [33, 57], "deleg": 33, "confus": [34, 35, 39, 40, 44, 46, 59, 71, 89, 110], "50": [34, 44, 97, 99, 100, 101, 103, 105, 106, 108], "keepdim": [34, 99], "signifi": 34, "absenc": 34, "int64": [34, 90, 100, 103], "npt": 34, "int_": 34, "id": [34, 63, 91, 93, 97, 99, 103], "unique_cluster_id": 34, "exclud": [34, 36, 45, 80, 84, 91, 110], "worst": [34, 51, 103], "performed_clust": 34, "worst_cluster_id": 34, "convent": [35, 37], "subject": [35, 37, 100], "meant": [35, 37], "Not": [35, 56], "mainli": [35, 106, 110], "content": [35, 72, 90, 91, 92, 93, 98, 100, 101, 103, 104, 106, 108, 110], "fetch": [35, 43, 90, 92, 97, 99], "datset": 36, "enum": [37, 51], "qualnam": [37, 51], "boundari": [37, 51, 91, 92], "continu": [37, 62, 88, 89, 93, 96, 99, 103, 105, 108, 110], "simultan": [37, 108], "task_str": 37, "is_classif": 37, "__contains__": [37, 47, 51], "member": [37, 40, 44, 51, 91], "typeerror": [37, 51], "12": [37, 51, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 103, 105, 106, 108, 109, 110], "__getitem__": [37, 47, 51], "match": [37, 39, 40, 44, 46, 51, 63, 64, 73, 91, 92, 93, 98, 105, 107, 109], "__iter__": [37, 47, 51], "__len__": [37, 47, 51], "alias": [37, 51], "is_regress": 37, "is_multilabel": 37, "overview": [39, 54, 88, 89, 90, 92, 93, 95, 96, 103, 105, 106, 108, 110], "modifi": [39, 40, 43, 44, 54, 56, 59, 99, 100, 101], "rank_classes_by_label_qu": [39, 92], "merg": [39, 54, 58, 85, 98, 99, 100, 110], "find_overlapping_class": [39, 99, 101], "problemat": [39, 64, 80, 84, 90, 105, 110], "unnorm": [39, 64, 101], "abov": [39, 40, 43, 44, 56, 59, 63, 70, 71, 73, 79, 83, 88, 89, 90, 91, 92, 93, 95, 96, 97, 99, 100, 101, 103, 104, 105, 107, 108, 109, 110], "model_select": [39, 51, 88, 89, 90, 91, 92, 93, 95, 96, 97, 99, 100, 101, 103, 104, 106, 108], "cross_val_predict": [39, 44, 88, 89, 90, 91, 92, 95, 96, 97, 100, 101, 103, 107, 108], "get_data_labels_from_dataset": 39, "yourfavoritemodel": [39, 101], "cv": [39, 51, 88, 90, 91, 92, 95, 97, 100, 101, 103], "df": [39, 59, 84, 90, 97, 99], "overall_label_qu": [39, 64], "col": 39, "prob": [39, 58, 101, 107], "divid": [39, 64, 73], "label_nois": [39, 64], "human": [39, 98, 109, 110], "clearli": [39, 73, 93, 105, 109], "num": [39, 64, 98, 101], "overlap": [39, 85, 97, 98, 99, 101], "ontolog": 39, "publish": [39, 110], "therefor": [39, 73, 97, 100], "vehicl": [39, 98], "truck": [39, 97, 98, 106, 109], "intuit": [39, 64], "car": [39, 98, 105, 109], "frequent": [39, 63, 97, 99, 100, 108], "l": [39, 40, 44, 68, 70, 71], "class1": 39, "class2": 39, "dog": [39, 59, 64, 66, 80, 98, 99, 106, 107, 110], "cat": [39, 59, 64, 66, 98, 99, 106, 107], "co": [39, 40, 41], "noisy_label": [39, 91, 92, 104], "overlapping_class": 39, "descend": [39, 40, 44, 51, 64, 71], "overall_label_health_scor": [39, 64, 101], "half": [39, 40, 42, 44, 64, 98, 110], "health_scor": [39, 64], "classes_by_label_qu": [39, 92], "cnn": [40, 42, 44, 93], "cifar": [40, 41, 97, 98, 106], "teach": [40, 41], "bhanml": 40, "blob": [40, 97], "master": [40, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 100, 101, 103, 104, 105, 106, 108], "call_bn": [40, 42], "bn": 40, "input_channel": 40, "n_output": 40, "dropout_r": 40, "top_bn": 40, "architectur": [40, 44], "shown": [40, 71, 90, 91, 92, 93, 95, 96, 99, 100, 101, 103, 106, 107, 109, 110], "forward": [40, 41, 42, 44, 93, 103], "overridden": [40, 44], "although": [40, 44, 72, 88, 95, 100], "recip": [40, 44], "afterward": [40, 44], "sinc": [40, 44, 48, 60, 64, 71, 79, 83, 99, 100, 103, 104, 105, 107, 110], "hook": [40, 44, 98], "silent": [40, 43, 44], "t_destin": [40, 42, 44], "__call__": [40, 42, 44, 47, 51], "add_modul": [40, 42, 44], "child": [40, 44], "fn": [40, 44, 71], "recurs": [40, 44, 51], "submodul": [40, 44, 53], "children": [40, 42, 44, 110], "nn": [40, 41, 44, 54, 93], "init": [40, 44, 101], "no_grad": [40, 44, 93, 106], "init_weight": [40, 44], "linear": [40, 44, 89, 93, 96], "fill_": [40, 44], "net": [40, 44, 90, 93, 98], "in_featur": [40, 44], "out_featur": [40, 44], "bia": [40, 44, 93], "tensor": [40, 41, 44, 90, 93, 106], "requires_grad": [40, 44], "bfloat16": [40, 42, 44], "cast": [40, 44, 90], "buffer": [40, 42, 44], "datatyp": [40, 44], "xdoctest": [40, 44], "undefin": [40, 44], "var": [40, 44], "buf": [40, 44], "20l": [40, 44], "1l": [40, 44], "5l": [40, 44], "call_super_init": [40, 42, 44], "immedi": [40, 44, 106], "compil": [40, 42, 44, 62], "cpu": [40, 42, 44, 46, 90, 93], "move": [40, 44, 51, 86, 98], "cuda": [40, 42, 44, 90, 93], "devic": [40, 44, 90, 93, 100], "gpu": [40, 44, 89, 90, 96], "live": [40, 44], "copi": [40, 44, 75, 88, 90, 91, 92, 95, 97, 99, 100, 104, 107, 108], "doubl": [40, 42, 44], "dump_patch": [40, 42, 44], "eval": [40, 42, 44, 93, 104, 106], "dropout": [40, 44], "batchnorm": [40, 44], "grad": [40, 44], "extra_repr": [40, 42, 44], "line": [40, 44, 85, 91, 97, 98, 103, 106, 110], "get_buff": [40, 42, 44], "target": [40, 41, 44, 75, 76, 97, 106, 108], "throw": [40, 44], "get_submodul": [40, 42, 44], "explan": [40, 44], "qualifi": [40, 44], "referenc": [40, 44], "attributeerror": [40, 44], "invalid": [40, 44, 96], "resolv": [40, 44, 97, 110], "get_extra_st": [40, 42, 44], "state_dict": [40, 42, 44], "set_extra_st": [40, 42, 44], "build": [40, 44, 54, 93, 97, 109], "picklabl": [40, 44], "serial": [40, 44], "backward": [40, 44, 93], "break": [40, 44, 93, 105], "pickl": [40, 44, 105], "get_paramet": [40, 42, 44], "net_b": [40, 44], "net_c": [40, 44], "conv": [40, 44], "conv2d": [40, 44, 93], "16": [40, 44, 51, 54, 62, 79, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 103, 105, 106, 109, 110], "kernel_s": [40, 44], "stride": [40, 44], "200": [40, 44, 73, 97, 98, 105, 110], "diagram": [40, 44, 107], "degre": [40, 44], "queri": [40, 44, 54, 56, 92, 93, 97, 99, 100, 104], "named_modul": [40, 42, 44], "o": [40, 44, 57, 58, 90, 91, 92, 98, 99, 100, 101, 104, 105, 110], "transit": [40, 44], "ipu": [40, 42, 44], "load_state_dict": [40, 42, 44], "strict": [40, 44, 51], "persist": [40, 44], "strictli": [40, 44], "inplac": [40, 44, 97, 103], "preserv": [40, 44, 59], "namedtupl": [40, 44], "missing_kei": [40, 44], "unexpected_kei": [40, 44], "runtimeerror": [40, 44], "idx": [40, 44, 59, 60, 71, 91, 93, 97, 99, 100, 101, 103, 105, 106], "named_buff": [40, 42, 44], "prefix": [40, 44, 90, 110], "remove_dupl": [40, 44], "prepend": [40, 44], "running_var": [40, 44], "named_children": [40, 42, 44], "conv4": [40, 44], "conv5": [40, 44], "memo": [40, 44], "named_paramet": [40, 42, 44], "register_backward_hook": [40, 42, 44], "deprec": [40, 44, 48], "favor": [40, 44], "register_full_backward_hook": [40, 42, 44], "removablehandl": [40, 44], "register_buff": [40, 42, 44], "running_mean": [40, 44], "register_forward_hook": [40, 42, 44], "with_kwarg": [40, 44], "always_cal": [40, 44], "possibli": [40, 44, 88, 95], "fire": [40, 44, 98], "register_module_forward_hook": [40, 44], "regardless": [40, 44, 91, 92], "register_forward_pre_hook": [40, 42, 44], "And": [40, 44], "forward_pr": [40, 44], "register_module_forward_pre_hook": [40, 44], "gradient": [40, 44, 93, 95, 108], "grad_input": [40, 44], "grad_output": [40, 44], "technic": [40, 44], "caller": [40, 44], "register_module_full_backward_hook": [40, 44], "register_full_backward_pre_hook": [40, 42, 44], "backward_pr": [40, 44], "register_module_full_backward_pre_hook": [40, 44], "register_load_state_dict_post_hook": [40, 42, 44], "post": [40, 44, 54], "incompatible_kei": [40, 44], "modif": [40, 44, 54], "thrown": [40, 44], "register_modul": [40, 42, 44], "register_paramet": [40, 42, 44], "register_state_dict_pre_hook": [40, 42, 44], "keep_var": [40, 44], "requires_grad_": [40, 42, 44], "autograd": [40, 44], "freez": [40, 44, 89, 90, 96], "finetun": [40, 44], "gan": [40, 44], "share_memori": [40, 42, 44], "share_memory_": [40, 44], "destin": [40, 44], "shallow": [40, 44], "releas": [40, 44, 62, 86, 99], "design": [40, 44, 54], "ordereddict": [40, 44], "detach": [40, 44, 93], "non_block": [40, 44], "memory_format": [40, 44], "channels_last": [40, 44], "Its": [40, 44, 51, 64, 70], "complex": [40, 44, 100], "integr": [40, 44, 56, 85, 99], "asynchron": [40, 44], "host": [40, 44], "pin": [40, 44, 89, 96, 98], "desir": [40, 44, 54, 58, 71], "4d": [40, 44], "ignore_w": [40, 44], "determinist": [40, 44, 90], "1913": [40, 44], "3420": [40, 44], "5113": [40, 44], "2325": [40, 44], "env": [40, 44], "torch_doctest_cuda1": [40, 44], "gpu1": [40, 44], "1914": [40, 44], "5112": [40, 44], "2324": [40, 44], "float16": [40, 44], "cdoubl": [40, 44], "3741": [40, 44], "2382": [40, 44], "5593": [40, 44], "4443": [40, 44], "complex128": [40, 44], "6122": [40, 44], "1150": [40, 44], "to_empti": [40, 42, 44], "storag": [40, 44], "dst_type": [40, 44], "xpu": [40, 42, 44], "zero_grad": [40, 42, 44, 93], "set_to_non": [40, 44], "reset": [40, 44], "context": [40, 44, 105], "noisili": [41, 101], "han": 41, "2018": 41, "cifar_cnn": [41, 42], "loss_coteach": [41, 42], "y_1": 41, "y_2": 41, "forget_r": 41, "class_weight": 41, "logit": [41, 62, 93], "decim": [41, 59], "forget": [41, 51, 110], "rate_schedul": 41, "epoch": [41, 42, 44, 93, 99], "initialize_lr_schedul": [41, 42], "lr": [41, 42, 44], "001": [41, 73, 97, 99], "250": [41, 91, 92, 101, 105], "epoch_decay_start": 41, "schedul": 41, "beta": 41, "adam": 41, "adjust_learning_r": [41, 42], "alpha_plan": 41, "beta1_plan": 41, "forget_rate_schedul": [41, 42], "num_gradu": 41, "expon": 41, "tell": [41, 89, 93, 96, 101], "train_load": [41, 44], "model1": [41, 101], "optimizer1": 41, "model2": [41, 101], "optimizer2": 41, "dataload": [41, 93, 106], "parser": 41, "parse_arg": 41, "num_iter_per_epoch": 41, "print_freq": 41, "topk": 41, "top1": 41, "top5": 41, "test_load": 41, "offici": [42, 61, 97, 110], "wish": [42, 61, 100, 106, 109, 110], "adj_confident_thresholds_shar": [42, 43], "labels_shar": [42, 43], "pred_probs_shar": [42, 43], "labelinspector": [42, 43, 99], "get_num_issu": [42, 43], "get_quality_scor": [42, 43], "update_confident_threshold": [42, 43], "score_label_qu": [42, 43], "split_arr": [42, 43], "span_classif": 42, "display_issu": [42, 45, 78, 79, 80, 81, 82, 83, 84, 109, 110], "mnist_pytorch": 42, "get_mnist_dataset": [42, 44], "get_sklearn_digits_dataset": [42, 44], "simplenet": [42, 44], "batch_siz": [42, 43, 44, 77, 79, 93, 99, 106, 109], "log_interv": [42, 44], "momentum": [42, 44], "no_cuda": [42, 44], "test_batch_s": [42, 44, 93], "loader": [42, 44, 93], "set_predict_proba_request": [42, 44], "set_predict_request": [42, 44], "coteach": [42, 86], "mini": [43, 77, 79, 99], "low_self_confid": [43, 46, 65], "self_confid": [43, 46, 47, 51, 65, 67, 73, 81, 83, 88, 89, 99, 101], "conveni": [43, 56, 88, 89, 90, 96, 100], "script": 43, "labels_fil": [43, 99], "pred_probs_fil": [43, 99], "quality_score_kwarg": 43, "num_issue_kwarg": 43, "return_mask": 43, "variant": [43, 63, 109], "read": [43, 48, 92, 99, 101, 106, 110], "zarr": [43, 99], "memmap": [43, 109], "pythonspe": 43, "mmap": [43, 99], "hdf5": 43, "further": [43, 45, 64, 65, 67, 70, 71, 79, 80, 90, 97, 99, 100], "yourfil": 43, "npy": [43, 98, 99, 109], "mmap_mod": [43, 109], "tip": [43, 46, 62, 99], "save_arrai": 43, "your_arrai": 43, "disk": [43, 98, 99], "npz": [43, 110], "maxim": [43, 63, 77, 79, 100, 109], "multiprocess": [43, 46, 65, 77, 79, 93, 99], "linux": [43, 77, 79], "physic": [43, 46, 77, 79, 105], "psutil": [43, 46, 77, 79], "labels_arrai": [43, 60], "predprob": 43, "pred_probs_arrai": 43, "back": [43, 54, 71, 91, 99, 100, 105, 106], "store_result": 43, "becom": [43, 97, 106], "verifi": [43, 56, 99, 100, 103, 106], "long": [43, 63, 72, 100, 103], "chunk": [43, 107], "ram": [43, 98], "end_index": 43, "labels_batch": 43, "pred_probs_batch": 43, "batch_result": 43, "indices_of_examples_with_issu": [43, 99], "shortcut": 43, "encount": [43, 46, 77], "1000": [43, 90, 96, 99, 106], "aggreg": [43, 47, 51, 63, 67, 70, 73, 83, 99, 101, 103], "seen": [43, 99, 100, 106, 110], "far": [43, 63, 100], "label_quality_scor": [43, 67, 70, 73, 76, 101, 105], "method1": 43, "method2": 43, "normalized_margin": [43, 46, 47, 51, 65, 67, 73, 81, 83], "low_normalized_margin": [43, 46, 65], "issue_indic": [43, 70, 93], "update_num_issu": 43, "arr": [43, 99], "chunksiz": 43, "convnet": 44, "bespok": [44, 62], "download": [44, 90, 97, 99, 106], "mnist": [44, 85, 90, 98], "handwritten": 44, "digit": [44, 90, 98], "last": [44, 51, 68, 71, 91, 92, 99, 100, 103, 105, 110], "sklearn_digits_test_s": 44, "01": [44, 73, 75, 90, 97, 101, 104, 105], "templat": 44, "flexibli": 44, "among": [44, 63, 101], "test_set": 44, "overrid": 44, "train_idx": [44, 59, 106], "train_label": [44, 89, 100, 106], "span": [45, 100], "sentenc": [45, 58, 81, 83, 84, 89, 96], "token_classif": [45, 58, 81, 83, 84, 99], "encourag": [46, 65, 73, 76], "multilabel_classif": [46, 64, 65, 67, 73, 99, 104], "pred_probs_by_class": 46, "prune_count_matrix_col": 46, "rank_by_kwarg": [46, 65, 73, 101], "num_to_remove_per_class": [46, 65], "bad": [46, 54, 65, 70, 73, 96, 99], "seem": [46, 101, 104], "aren": 46, "confidence_weighted_entropi": [46, 47, 51, 65, 67, 73, 81, 83], "label_issues_idx": [46, 73, 100], "entropi": [46, 48, 50, 51, 72, 73], "prune_by_class": [46, 65, 101], "predicted_neq_given": [46, 65, 101], "prune_counts_matrix": 46, "smallest": [46, 73], "unus": 46, "number_of_mislabeled_examples_in_class_k": 46, "delet": [46, 85, 89, 99], "too": [46, 51, 54, 72, 93, 99, 100, 105], "thread": [46, 65], "window": [46, 98], "shorter": [46, 68], "find_predicted_neq_given": 46, "find_label_issues_using_argmax_confusion_matrix": 46, "remove_noise_from_class": [47, 59], "clip_noise_r": [47, 59], "clip_valu": [47, 59], "value_count": [47, 59, 99], "value_counts_fill_missing_class": [47, 59], "get_missing_class": [47, 59], "round_preserving_sum": [47, 59], "round_preserving_row_tot": [47, 59], "estimate_pu_f1": [47, 59], "confusion_matrix": [47, 59], "print_square_matrix": [47, 59], "print_noise_matrix": [47, 59, 101], "print_inverse_noise_matrix": [47, 59], "print_joint_matrix": [47, 59, 101], "compress_int_arrai": [47, 59], "train_val_split": [47, 59], "subset_x_i": [47, 59], "subset_label": [47, 59], "subset_data": [47, 59], "extract_indices_tf": [47, 59], "unshuffle_tensorflow_dataset": [47, 59], "is_torch_dataset": [47, 59], "is_tensorflow_dataset": [47, 59], "csr_vstack": [47, 59], "append_extra_datapoint": [47, 59], "get_num_class": [47, 59], "num_unique_class": [47, 59], "get_unique_class": [47, 59], "format_label": [47, 59], "smart_display_datafram": [47, 59], "force_two_dimens": [47, 59], "latent_algebra": [47, 86], "compute_ps_py_inv_noise_matrix": [47, 49], "compute_py_inv_noise_matrix": [47, 49], "compute_inv_noise_matrix": [47, 49], "compute_noise_matrix_from_invers": [47, 49], "compute_pi": [47, 49], "compute_pyx": [47, 49], "label_quality_util": 47, "get_normalized_entropi": [47, 48], "multilabel_util": [47, 104], "stack_compl": [47, 52], "get_onehot_num_class": [47, 52], "int2onehot": [47, 52, 104], "onehot2int": [47, 52, 104], "multilabel_scor": [47, 67], "classlabelscor": [47, 51], "exponential_moving_averag": [47, 51, 67], "softmin": [47, 51, 67, 70, 79, 83], "possible_method": [47, 51], "multilabelscor": [47, 51], "get_class_label_quality_scor": [47, 51], "multilabel_pi": [47, 51], "get_cross_validated_multilabel_pred_prob": [47, 51], "default_k": [47, 53, 54], "features_to_knn": [47, 53, 54], "construct_knn_graph_from_index": [47, 53, 54, 56], "create_knn_graph_and_index": [47, 53, 54], "correct_knn_graph": [47, 53, 54, 97], "correct_knn_distances_and_indices_with_exact_duplicate_sets_inplac": [47, 53, 54], "correct_knn_distances_and_indic": [47, 53, 54], "high_dimension_cutoff": [47, 53, 55], "row_count_cutoff": [47, 53, 55], "decide_euclidean_metr": [47, 53, 55], "decide_default_metr": [47, 53, 55], "construct_knn": [47, 53, 56], "transform_distances_to_scor": [47, 57], "correct_precision_error": [47, 57], "token_classification_util": [47, 110], "get_sent": [47, 58, 110], "filter_sent": [47, 58, 110], "process_token": [47, 58], "merge_prob": [47, 58], "color_sent": [47, 58], "assert_valid_input": [47, 60], "assert_valid_class_label": [47, 60], "assert_nonempty_input": [47, 60], "assert_indexing_work": [47, 60], "labels_to_arrai": [47, 60], "labels_to_list_multilabel": [47, 60], "min_allowed_prob": 48, "wikipedia": 48, "activ": [48, 50, 62, 63, 85, 103], "towardsdatasci": 48, "cheatsheet": 48, "ec57bc067c0b": 48, "clip": [48, 59, 90, 97], "behav": 48, "unnecessari": [48, 99], "slightli": [48, 88, 89], "interv": [48, 51, 106], "herein": 49, "inexact": 49, "cours": [49, 100], "propag": 49, "throughout": [49, 59, 75, 84, 90, 103, 109, 110], "increas": [49, 57, 70, 72, 73, 90, 91, 97, 99, 103, 104, 110], "dot": [49, 83, 99], "true_labels_class_count": 49, "pyx": 49, "multiannot": 50, "assert_valid_inputs_multiannot": 50, "labels_multiannot": [50, 63], "ensembl": [50, 51, 63, 73, 88, 95, 99, 104, 106, 108], "allow_single_label": 50, "annotator_id": 50, "assert_valid_pred_prob": 50, "pred_probs_unlabel": [50, 63], "format_multiannotator_label": [50, 63, 103], "formatted_label": [50, 59], "old": [50, 59, 86, 98], "check_consensus_label_class": 50, "consensus_label": [50, 63, 103], "consensus_method": [50, 63], "consensu": [50, 63, 85, 102, 110], "establish": [50, 62, 89, 108], "compute_soft_cross_entropi": 50, "soft": [50, 98], "find_best_temp_scal": 50, "coarse_search_rang": [50, 75, 99], "fine_search_s": [50, 75, 99], "temperatur": [50, 51, 70, 79, 83], "scale": [50, 57, 88, 97, 98, 99, 106, 109], "factor": [50, 51, 57, 77, 79], "minim": [50, 70, 106], "temp_scale_pred_prob": 50, "temp": 50, "sharpen": [50, 98], "smoothen": 50, "get_normalized_margin_for_each_label": [51, 73], "get_confidence_weighted_entropy_for_each_label": [51, 73], "scorer": 51, "alpha": [51, 67, 70, 91, 92, 97, 101, 104, 108], "exponenti": 51, "ema": 51, "s_1": 51, "s_k": 51, "ema_k": 51, "accord": [51, 65, 95, 96, 101, 110], "formula": [51, 57], "_t": 51, "cdot": 51, "s_t": 51, "qquad": 51, "leq": 51, "_1": 51, "recent": [51, 110], "success": 51, "previou": [51, 54, 93, 95, 99, 105], "discount": 51, "s_ema": 51, "175": [51, 93, 100, 101, 105], "underflow": 51, "nan": [51, 63, 88, 95, 97, 100, 103, 108], "aggregated_scor": 51, "base_scor": [51, 100], "base_scorer_kwarg": 51, "aggregator_kwarg": [51, 67], "n_sampl": [51, 97], "n_label": 51, "class_label_quality_scor": 51, "452": 51, "new_scor": 51, "575": [51, 100], "get_label_quality_scores_per_class": [51, 66, 67], "ml_scorer": 51, "binar": [51, 52], "reformat": [51, 90], "wider": 51, "splitter": 51, "kfold": [51, 93], "onevsrestclassifi": [51, 104], "randomforestclassifi": [51, 101, 104], "n_split": [51, 93, 104], "pred_prob_slic": 52, "onehot": 52, "hot": [52, 65, 71, 77, 80, 88, 95, 97, 98, 99, 108, 109], "onehot_matrix": 52, "pairwis": [53, 55, 72], "reli": [54, 72, 89, 90, 91, 92, 96, 105, 106, 108], "sklearn_knn_kwarg": 54, "correction_featur": 54, "discourag": 54, "flexibl": [54, 99], "manner": [54, 67, 88, 89, 97, 103, 108], "701": 54, "900": [54, 88, 95, 108, 110], "436": [54, 100], "000": [54, 89, 93, 96, 97, 98, 110], "idea": [54, 73, 100, 105], "dens": [54, 62, 97], "33140006": 54, "76210367": 54, "correct_exact_dupl": 54, "mutual": [54, 64, 104], "vari": [54, 70, 92], "exact_duplicate_set": 54, "main": [54, 63], "front": [54, 98], "consider": 54, "capabl": [54, 85, 100], "come": [54, 59, 91, 92, 99, 109], "misidentif": 54, "corrected_dist": 54, "corrected_indic": 54, "sqrt": 54, "distant": 54, "suitabl": [55, 63, 88, 95, 97, 100], "slower": 55, "decid": [55, 63, 89, 96, 98, 103, 108, 110], "predefin": 55, "euclidean_dist": [55, 72], "spatial": [55, 72], "decis": [55, 88, 91, 92, 100], "That": [55, 88, 89, 92, 95, 96, 98, 101, 104, 106, 108], "cosine_dist": 55, "knn_kwarg": 56, "html": [56, 59, 68, 71, 72, 90, 91, 92, 93, 95, 96, 99, 100, 101], "kneighbor": 56, "metric_param": 56, "n_features_in_": 56, "effective_metric_params_": 56, "effective_metric_": 56, "n_samples_fit_": 56, "__sklearn_is_fitted__": 56, "conduct": 56, "is_fit": 56, "trail": 56, "underscor": 56, "avg_dist": 57, "exp": [57, 72, 73, 91], "dt": 57, "right": [57, 68, 71, 89, 96, 104, 105, 106], "pronounc": 57, "differenti": 57, "ly": 57, "rule": [57, 58, 85, 98], "thumb": 57, "ood_features_scor": [57, 72, 106], "88988177": 57, "80519832": 57, "toler": 57, "minkowski": 57, "noth": 57, "epsilon": 57, "sensibl": 57, "fixed_scor": 57, "readabl": 58, "lambda": [58, 90, 91, 99, 100, 103], "long_sent": 58, "headlin": 58, "charact": [58, 59], "s1": 58, "s2": 58, "processed_token": 58, "alecnlcb": 58, "entiti": [58, 85, 99, 110], "mapped_ent": 58, "unique_ident": 58, "loc": [58, 91, 92, 93, 95, 97, 110], "nbitbas": [58, 67], "probs_merg": 58, "0125": [58, 83], "0375": 58, "075": 58, "025": 58, "color": [58, 80, 91, 92, 95, 97, 101, 104, 106, 108, 109], "red": [58, 71, 91, 92, 97, 98, 101, 104, 105, 106, 109], "colored_sent": 58, "termcolor": 58, "31msentenc": 58, "0m": 58, "ancillari": 59, "class_without_nois": 59, "any_other_class": 59, "choos": [59, 73, 88, 95, 99, 101, 108], "tradition": 59, "new_sum": 59, "fill": 59, "major": [59, 63, 86, 93, 106], "versu": [59, 101], "obviou": 59, "cgdeboer": 59, "iteround": 59, "reach": 59, "prob_s_eq_1": 59, "claesen": 59, "f1": [59, 71, 96, 101], "BE": 59, "left_nam": 59, "top_nam": 59, "titl": [59, 91, 92, 97, 101, 104, 106], "short_titl": 59, "round_plac": 59, "pretti": [59, 101], "joint_matrix": 59, "num_possible_valu": 59, "holdout_idx": 59, "extract": [59, 72, 89, 90, 95, 96, 100, 103, 106, 109], "allow_shuffl": 59, "turn": [59, 85, 105], "shuffledataset": 59, "histori": 59, "pre_x": 59, "buffer_s": 59, "csr_matric": 59, "append": [59, 90, 93, 98, 99, 100, 101, 103, 104, 105, 106, 110], "bottom": [59, 68, 71, 97, 105], "to_data": 59, "from_data": 59, "taken": 59, "label_matrix": 59, "canon": 59, "displai": [59, 71, 80, 84, 89, 90, 95, 96, 97, 101, 110], "jupyt": [59, 90, 91, 92, 93, 98, 99, 100, 101, 103, 104, 106, 108, 110], "notebook": [59, 63, 90, 92, 98, 99, 100, 101, 103, 104, 105, 107, 109, 110], "consol": 59, "allow_missing_class": 60, "allow_one_class": 60, "length_x": 60, "labellik": 60, "labels_list": [60, 65], "keraswrappermodel": [61, 62, 85], "keraswrappersequenti": [61, 62], "tf": [62, 90], "legaci": 62, "newer": 62, "interim": 62, "advis": [62, 104], "stabil": [62, 72], "until": 62, "accommod": 62, "keraswrapp": 62, "huggingface_keras_imdb": 62, "unit": [62, 110], "model_kwarg": [62, 75], "compile_kwarg": 62, "sparsecategoricalcrossentropi": 62, "layer": [62, 89, 90, 96, 106], "my_keras_model": 62, "from_logit": 62, "declar": 62, "apply_softmax": 62, "analysi": 63, "analyz": [63, 85, 97, 101, 103, 104], "get_label_quality_multiannot": [63, 103], "vote": 63, "crowdsourc": [63, 85, 103], "dawid": [63, 103], "skene": [63, 103], "analog": [63, 98, 103], "chosen": [63, 73, 99, 103], "crowdlab": [63, 103], "unlabel": [63, 93, 103, 106, 109], "get_active_learning_scor": [63, 103], "activelab": [63, 103], "priorit": [63, 70, 105, 109, 110], "showcas": 63, "best_qual": 63, "quality_method": 63, "calibrate_prob": 63, "return_detailed_qu": 63, "return_annotator_stat": 63, "return_weight": 63, "label_quality_score_kwarg": 63, "did": [63, 64, 88, 89, 90, 95, 101, 103, 108], "majority_vot": 63, "broken": [63, 71, 98, 108], "highest": [63, 71, 91, 93, 100, 107], "0th": 63, "consensus_quality_scor": [63, 103], "annotator_agr": [63, 103], "reman": 63, "1st": 63, "2nd": [63, 77], "3rd": 63, "consensus_label_suffix": 63, "consensus_quality_score_suffix": 63, "suffix": 63, "emsembl": 63, "weigh": [63, 98], "agreement": [63, 103], "agre": 63, "prevent": [63, 99], "overconfid": [63, 107], "detailed_label_qu": [63, 103], "annotator_stat": [63, 103], "model_weight": 63, "annotator_weight": 63, "warn": 63, "labels_info": 63, "num_annot": [63, 103], "deriv": [63, 103], "quality_annotator_1": 63, "quality_annotator_2": 63, "quality_annotator_m": 63, "annotator_qu": [63, 103], "num_examples_label": [63, 103], "agreement_with_consensu": [63, 103], "worst_class": [63, 103], "trustworthi": [63, 103, 108], "get_label_quality_multiannotator_ensembl": 63, "weigtht": 63, "budget": 63, "retrain": [63, 89, 108], "active_learning_scor": 63, "active_learning_scores_unlabel": 63, "get_active_learning_scores_ensembl": 63, "henc": [63, 90, 91, 100, 103], "get_majority_vote_label": [63, 103], "event": 63, "lastli": [63, 95], "convert_long_to_wide_dataset": 63, "labels_multiannotator_long": 63, "wide": [63, 88, 89, 90], "labels_multiannotator_wid": 63, "common_multilabel_issu": [64, 66], "exclus": [64, 104], "rank_classes_by_multilabel_qu": [64, 66], "overall_multilabel_health_scor": [64, 66], "multilabel_health_summari": [64, 66], "classes_by_multilabel_qu": 64, "inner": [65, 79, 97], "find_multilabel_issues_per_class": [65, 66], "per_class_label_issu": 65, "label_issues_list": 65, "pred_probs_list": [65, 73, 93, 101], "anim": [66, 106], "rat": 66, "predat": 66, "pet": 66, "reptil": 66, "box": [68, 70, 71, 98, 105], "object_detect": [68, 70, 71, 105], "return_indices_ranked_by_scor": [68, 105], "overlapping_label_check": [68, 70], "suboptim": [68, 70], "locat": [68, 70, 97, 105, 109, 110], "bbox": [68, 71, 105], "image_nam": [68, 71], "y1": [68, 71, 105], "y2": [68, 71, 105], "later": [68, 71, 72, 89, 100, 110], "corner": [68, 71, 105], "xyxi": [68, 71, 105], "io": [68, 71, 90, 97, 98], "keras_cv": [68, 71], "bounding_box": [68, 71, 105], "detectron": [68, 71, 105], "detectron2": [68, 71, 105], "readthedoc": [68, 71], "en": [68, 71], "latest": [68, 71], "draw_box": [68, 71], "mmdetect": [68, 71, 105], "swap": [68, 70, 80, 84], "penal": [68, 70], "concern": [68, 70, 85, 92, 97], "issues_from_scor": [69, 70, 78, 79, 80, 82, 83, 84, 105, 109, 110], "compute_overlooked_box_scor": [69, 70], "compute_badloc_box_scor": [69, 70], "compute_swap_box_scor": [69, 70], "pool_box_scores_per_imag": [69, 70], "object_counts_per_imag": [69, 71, 105], "bounding_box_size_distribut": [69, 71, 105], "class_label_distribut": [69, 71, 105], "get_sorted_bbox_count_idx": [69, 71], "plot_class_size_distribut": [69, 71], "plot_class_distribut": [69, 71], "get_average_per_class_confusion_matrix": [69, 71], "calculate_per_class_metr": [69, 71], "aggregation_weight": 70, "imperfect": [70, 99, 100], "chose": [70, 103, 105], "imperfectli": [70, 105], "dirti": [70, 73, 76, 108], "subtyp": 70, "badloc": 70, "nonneg": 70, "high_probability_threshold": 70, "auxiliary_input": [70, 71], "iou": [70, 71], "heavili": 70, "auxiliarytypesdict": 70, "pred_label": [70, 89], "pred_label_prob": 70, "pred_bbox": 70, "lab_label": 70, "lab_bbox": 70, "similarity_matrix": 70, "min_possible_similar": 70, "scores_overlook": 70, "low_probability_threshold": 70, "scores_badloc": 70, "accident": [70, 89, 95, 96, 99], "scores_swap": 70, "box_scor": 70, "image_scor": [70, 79, 109], "discov": [71, 92, 97, 110], "abnorm": [71, 93, 105], "auxiliari": [71, 106, 109], "_get_valid_inputs_for_compute_scor": 71, "object_count": 71, "down": 71, "bbox_siz": 71, "class_distribut": 71, "plot": [71, 91, 92, 97, 101, 104, 106, 108, 109], "sorted_idx": [71, 106], "class_to_show": 71, "hidden": [71, 106], "max_class_to_show": 71, "plt": [71, 80, 91, 92, 93, 97, 101, 104, 106, 108], "matplotlib": [71, 80, 91, 92, 93, 97, 101, 104, 105, 106, 108], "pyplot": [71, 80, 91, 92, 93, 97, 101, 104, 106, 108], "prediction_threshold": 71, "overlai": [71, 105], "figsiz": [71, 91, 92, 93, 97, 101, 104, 106], "save_path": [71, 105], "blue": [71, 98, 101, 105], "overlaid": 71, "side": [71, 98, 105], "figur": [71, 97, 101, 104, 106, 108], "extens": [71, 101, 103], "png": [71, 105], "pdf": [71, 72], "svg": 71, "num_proc": [71, 93], "intersect": [71, 99], "tp": 71, "fp": 71, "ground": [71, 98, 101, 103, 108], "truth": [71, 101, 103, 108], "bias": [71, 97], "avg_metr": 71, "distionari": 71, "95": [71, 81, 83, 95, 98, 100, 101, 108], "per_class_metr": 71, "Of": 72, "find_top_issu": [72, 73, 106], "behind": [72, 101], "dist_metr": 72, "subtract": [72, 73], "renorm": [72, 73, 99], "least_confid": 72, "sum_": 72, "log": [72, 73, 86], "softmax": [72, 79, 83, 93], "literatur": 72, "gen": 72, "liu": 72, "lochman": 72, "zach": 72, "openaccess": 72, "thecvf": 72, "cvpr2023": 72, "liu_gen_pushing_the_limits_of_softmax": 72, "based_out": 72, "distribution_detection_cvpr_2023_pap": 72, "fit_scor": [72, 106], "ood_predictions_scor": 72, "pretrain": [72, 89, 90, 96, 100, 106], "adjust_confident_threshold": 72, "probabilist": [72, 88, 90, 91, 92, 95, 96, 106, 107], "order_label_issu": [73, 86], "whichev": [73, 107], "argsort": [73, 89, 93, 96, 101, 105, 106, 108], "max_": 73, "get_label_quality_ensemble_scor": [73, 99, 101], "weight_ensemble_members_bi": 73, "custom_weight": 73, "log_loss_search_t_valu": 73, "0001": [73, 98], "scheme": 73, "log_loss_search": 73, "log_loss": [73, 96], "1e0": 73, "1e1": 73, "1e2": 73, "2e2": 73, "quality_scor": [73, 106], "forth": 73, "top_issue_indic": 73, "rank_bi": [73, 86], "weird": [73, 84], "prob_label": 73, "max_prob_not_label": 73, "AND": [73, 96], "get_epistemic_uncertainti": [74, 75], "get_aleatoric_uncertainti": [74, 75], "corrupt": [75, 108], "linearregress": [75, 99, 108], "y_with_nois": 75, "n_boot": [75, 99], "include_aleatoric_uncertainti": [75, 99], "bootstrap": [75, 99, 108], "resampl": [75, 90, 99], "epistem": [75, 99, 106, 108], "aleator": [75, 99, 108], "model_final_kwarg": 75, "coars": 75, "thorough": [75, 99], "fine": [75, 89, 90, 96, 106], "grain": 75, "grid": [75, 100], "varianc": [75, 101], "epistemic_uncertainti": 75, "residu": [75, 76, 99], "deviat": [75, 105, 108], "aleatoric_uncertainti": 75, "outr": 76, "contin": 76, "raw": [76, 85, 86, 92, 93, 98, 99, 100, 103, 105, 106, 108], "aka": [76, 90, 101, 105, 108, 110], "00323821": 76, "33692597": 76, "00191686": 76, "semant": [77, 79, 80, 102], "pixel": [77, 79, 80, 93, 106, 109], "h": [77, 79, 80, 109], "height": [77, 79, 80, 109], "w": [77, 79, 80, 109], "width": [77, 79, 80, 109], "labels_one_hot": [77, 80, 109], "stream": [77, 106, 110], "downsampl": [77, 79, 109], "shrink": [77, 79], "divis": [77, 79, 91], "common_label_issu": [78, 80, 82, 84, 109, 110], "filter_by_class": [78, 80, 109], "segmant": [79, 80], "num_pixel_issu": [79, 109], "product": [79, 93, 97, 99, 100], "pixel_scor": [79, 109], "enter": 80, "legend": [80, 91, 92, 97, 104, 105, 108, 109], "colormap": 80, "background": [80, 97], "person": [80, 99, 105, 109, 110], "ambigu": [80, 84, 89, 90, 96, 98, 101, 110], "misunderstood": [80, 84], "issues_df": [80, 93], "class_index": 80, "issues_subset": [80, 84], "filter_by_token": [82, 84, 110], "token_score_method": 83, "sentence_score_method": 83, "sentence_score_kwarg": 83, "compris": [83, 84], "token_scor": [83, 110], "converg": 83, "toward": [83, 97], "_softmin_sentence_scor": 83, "sentence_scor": [83, 110], "token_info": 83, "02": [83, 91, 92, 97, 101, 105, 110], "03": [83, 95, 97, 98, 100, 101, 105, 110], "04": [83, 95, 97, 105, 106], "08": [83, 97, 101, 105, 108, 110], "commonli": [84, 86, 91, 92, 104, 110], "But": [84, 96, 97, 100, 101, 108, 110], "restrict": [84, 99], "reliabl": [85, 88, 90, 97, 99, 100, 103, 109], "llm": 85, "rag": 85, "thousand": 85, "imagenet": [85, 98], "popular": [85, 103, 105], "centric": [85, 93, 102], "minut": [85, 88, 89, 90, 95, 96, 98, 103, 104, 105, 108, 109, 110], "conda": 85, "feature_embed": [85, 106], "your_dataset": [85, 90, 91, 92, 93, 95, 96, 99], "column_name_of_label": [85, 90, 91, 92, 93, 95, 96], "tool": [85, 98, 101, 103], "catch": [85, 100], "dive": [85, 96, 97, 100], "plagu": [85, 92], "untrain": 85, "\u30c4": 85, "label_issues_info": [85, 92], "sklearn_compatible_model": 85, "framework": [85, 104, 105], "complianc": 85, "tag": [85, 104, 110], "sequenc": 85, "recognit": [85, 90, 99, 110], "train_data": [85, 88, 89, 106, 108], "gotten": 85, "test_data": [85, 88, 89, 101, 104, 106, 108], "deal": [85, 92, 97, 100], "feel": [85, 90, 92, 99], "ask": [85, 99], "slack": [85, 99], "project": [85, 100, 108], "welcom": 85, "commun": [85, 99], "guidelin": [85, 105], "piec": 85, "smart": [85, 88, 89, 92, 93, 95, 96, 98, 99, 101, 104, 106, 108], "edit": [85, 99, 100], "essenti": 85, "retriev": [85, 98], "augment": 85, "compani": [85, 99], "unreli": [85, 88, 90, 95, 96, 97, 100], "link": [85, 90, 98, 105], "older": 86, "outlin": 86, "substitut": [86, 100], "v2": [86, 88, 95], "get_noise_indic": 86, "psx": 86, "sorted_index_method": 86, "order_label_error": 86, "label_errors_bool": 86, "latent_estim": 86, "num_label_error": 86, "learningwithnoisylabel": 86, "neatli": 86, "organ": [86, 88, 95, 97, 98, 110], "reorgan": 86, "baseline_method": 86, "research": [86, 101], "polyplex": 86, "terminologi": 86, "label_error": 86, "quickstart": [88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 103, 104, 105, 106, 108, 109, 110], "sql": [88, 95], "databas": [88, 95], "excel": [88, 95], "parquet": [88, 95], "student": [88, 95, 100, 108, 110], "grade": [88, 95, 100, 108], "exam": [88, 95, 100, 108], "letter": [88, 95, 110], "hundr": [88, 95], "mistak": [88, 89, 93, 95, 96, 100], "extratreesclassifi": 88, "extratre": 88, "Then": [88, 89, 93, 99], "ranked_label_issu": [88, 89], "branch": [88, 89, 90, 91, 92, 93, 95, 96, 98, 100, 101, 103, 104, 105, 106, 108], "standardscal": [88, 95, 100, 106], "labelencod": [88, 89, 100], "train_test_split": [88, 89, 91, 92, 106], "accuracy_scor": [88, 89, 90, 96, 100, 101], "grades_data": [88, 95], "read_csv": [88, 89, 95, 96, 97, 100, 108], "demo": [88, 92, 95, 104], "stud_id": [88, 95, 100], "exam_1": [88, 95, 100, 108], "exam_2": [88, 95, 100, 108], "exam_3": [88, 95, 100, 108], "letter_grad": [88, 95], "f48f73": [88, 95], "53": [88, 91, 92, 95, 97, 98, 100, 104, 105], "00": [88, 91, 92, 95, 97, 98, 100, 106], "77": [88, 91, 92, 95, 100, 105], "0bd4e7": [88, 95], "81": [88, 95, 96, 100, 105, 108, 110], "great": [88, 95, 98, 100], "particip": [88, 95, 100], "cb9d7a": [88, 95], "61": [88, 95, 97, 101, 105, 108], "94": [88, 95, 98, 100, 101, 105, 108], "9acca4": [88, 95], "48": [88, 95, 97, 98, 101, 105], "x_raw": [88, 95], "labels_raw": 88, "interg": [88, 89], "categorical_featur": [88, 108], "x_encod": [88, 95], "get_dummi": [88, 95, 108], "drop_first": [88, 95], "numeric_featur": [88, 95], "scaler": [88, 95, 106], "x_process": [88, 95], "fit_transform": [88, 95, 97, 100], "bring": [88, 89, 93, 95, 96, 103, 108], "byod": [88, 89, 93, 95, 96, 103, 108], "tress": 88, "held": [88, 90, 95, 96, 98, 105, 106, 107], "straightforward": [88, 90, 95], "benefit": [88, 90, 107, 109], "num_crossval_fold": [88, 90, 95, 100, 103], "tabl": [88, 95, 98, 103], "212": [88, 100, 101], "iloc": [88, 89, 90, 95, 96, 100, 108], "92": [88, 91, 100, 101, 105], "93": [88, 98, 100, 105, 108], "827": 88, "99": [88, 97, 98, 100, 101], "86": [88, 92, 93, 95, 100, 101, 105, 108], "74": [88, 97, 100, 105, 108], "637": [88, 95], "79": [88, 98, 100, 105], "65": [88, 91, 97, 100, 105], "cheat": [88, 100], "0pt": [88, 100], "120": [88, 91, 92, 100], "233": 88, "83": [88, 100, 101, 105, 108, 110], "76": [88, 100, 101, 104, 105, 108], "suspici": [88, 95], "carefulli": [88, 93, 95, 96, 100], "examin": [88, 91, 92, 95, 97, 100, 105], "labels_train": 88, "labels_test": 88, "test_siz": [88, 89, 91, 92], "acc_og": [88, 89], "783068783068783": 88, "robustli": [88, 89, 108], "14": [88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 108, 109, 110], "acc_cl": [88, 89], "8095238095238095": 88, "blindli": [88, 89, 90, 99, 100, 108], "trust": [88, 89, 90, 99, 100, 101, 103, 107, 108], "effort": [88, 89, 100, 108], "cumbersom": [88, 89, 92, 95, 96, 98, 101, 104, 106, 108], "intent": [89, 96], "servic": [89, 96, 99], "onlin": [89, 96], "bank": [89, 96, 98], "banking77": [89, 96], "oo": [89, 96], "categori": [89, 93, 96, 97, 100], "shortlist": [89, 96, 108], "scope": [89, 96], "logist": [89, 91, 92, 96, 103, 106], "probabilit": [89, 90], "drop": [89, 95, 97, 99, 100, 103, 108], "sentence_transform": [89, 96], "sentencetransform": [89, 96], "payment": [89, 96], "cancel_transf": [89, 96], "transfer": [89, 96], "fund": [89, 96], "cancel": [89, 96], "transact": [89, 96], "my": [89, 96], "revert": [89, 96], "morn": [89, 96], "realis": [89, 96], "yesterdai": [89, 96], "rent": [89, 96], "tomorrow": [89, 96], "raw_text": [89, 96], "raw_label": 89, "raw_train_text": 89, "raw_test_text": 89, "raw_train_label": 89, "raw_test_label": 89, "beneficiary_not_allow": [89, 96], "supported_cards_and_curr": [89, 96], "card_about_to_expir": [89, 96], "getting_spare_card": [89, 96], "apple_pay_or_google_pai": [89, 96], "change_pin": [89, 96], "visa_or_mastercard": [89, 96], "lost_or_stolen_phon": [89, 96], "card_payment_fee_charg": [89, 96], "card": [89, 96, 98], "utter": [89, 96], "encond": 89, "test_label": [89, 100, 101, 104, 106], "suit": [89, 96, 97, 98, 99], "electra": [89, 96], "discrimin": [89, 96], "googl": [89, 96], "train_text": 89, "test_text": 89, "home": [89, 96, 98], "runner": [89, 96], "google_electra": [89, 96], "pool": [89, 96, 99, 106], "leverag": [89, 90, 96, 99, 101, 103], "computation": [89, 90, 96], "intens": [89, 90, 96], "400": [89, 96, 100], "858304": 89, "547274": 89, "826228": 89, "965979": 89, "792293": 89, "identified_issu": [89, 108], "lowest_quality_label": [89, 90, 96, 101, 108], "to_numpi": [89, 96, 97, 100, 108], "43": [89, 91, 97, 98, 100, 101, 105], "646": 89, "390": 89, "628": 89, "121": [89, 101], "702": 89, "863": 89, "135": 89, "337": [89, 100, 105], "735": 89, "print_as_df": 89, "inverse_transform": 89, "charg": [89, 96], "cash": [89, 96], "holidai": [89, 96], "sent": [89, 96, 97, 110], "mine": [89, 96], "expir": [89, 96], "fight": 89, "hors": [89, 98, 106], "duck": [89, 98], "me": [89, 96, 97], "whoever": [89, 96], "consum": [89, 108], "18": [89, 90, 96, 97, 98, 99, 100, 101, 105, 106, 108, 109], "baseline_model": [89, 108], "87": [89, 92, 93, 100, 105, 108], "acceler": [89, 108], "19": [89, 90, 93, 96, 97, 98, 99, 100, 101, 105, 106, 108, 109, 110], "spoken": 90, "500": [90, 97, 100, 106, 110], "english": [90, 98], "pronunci": 90, "wav": 90, "voxceleb": 90, "speech": [90, 110], "your_pred_prob": [90, 91, 92, 95, 96], "tensorflow_io": 90, "huggingface_hub": 90, "reproduc": [90, 95, 97, 100, 101, 103], "command": 90, "wget": [90, 97, 105, 109, 110], "navig": 90, "browser": 90, "jakobovski": 90, "archiv": [90, 110], "v1": 90, "tar": [90, 106], "gz": [90, 106], "mkdir": [90, 110], "spoken_digit": 90, "xf": 90, "6_nicolas_32": 90, "data_path": 90, "listdir": 90, "nondeterminist": 90, "file_nam": 90, "endswith": 90, "file_path": 90, "join": [90, 93, 97, 99, 100], "7_george_26": 90, "0_nicolas_24": 90, "0_nicolas_6": 90, "listen": 90, "display_exampl": 90, "expand": [90, 91, 92, 93, 98, 100, 101, 103, 104, 106, 108, 110], "pulldown": [90, 91, 92, 93, 98, 100, 101, 103, 104, 106, 108, 110], "colab": [90, 91, 92, 93, 98, 99, 100, 101, 103, 104, 106, 108, 110], "tfio": 90, "pathlib": 90, "ipython": [90, 97], "load_wav_16k_mono": 90, "filenam": 90, "khz": 90, "file_cont": 90, "read_fil": 90, "sample_r": 90, "decode_wav": 90, "desired_channel": 90, "squeez": 90, "rate_in": 90, "rate_out": 90, "16000": 90, "wav_file_nam": 90, "audio_r": 90, "wav_file_exampl": 90, "plai": [90, 98, 99], "button": 90, "wav_file_name_exampl": 90, "7_jackson_43": 90, "hear": 90, "extractor": 90, "encoderclassifi": 90, "spkrec": 90, "xvect": 90, "feature_extractor": 90, "from_hparam": 90, "run_opt": 90, "uncom": [90, 97], "ffmpeg": 90, "backend": 90, "wav_audio_file_path": 90, "torchaudio": 90, "extract_audio_embed": 90, "emb": [90, 93], "signal": 90, "encode_batch": 90, "embeddings_list": [90, 93], "embeddings_arrai": 90, "512": [90, 93], "196311": 90, "319459": 90, "478975": 90, "2890875": 90, "8170238": 90, "89265": 90, "898056": 90, "256195": 90, "559641": 90, "559721": 90, "62067": 90, "285245": 90, "21": [90, 91, 97, 98, 100, 101, 105, 108, 110], "709627": 90, "5033693": 90, "913803": 90, "819831": 90, "1831515": 90, "208763": 90, "084257": 90, "3210397": 90, "005453": 90, "216152": 90, "478235": 90, "6821785": 90, "053807": 90, "242471": 90, "091424": 90, "78334856": 90, "03954": 90, "23": [90, 93, 97, 98, 100, 101, 105, 108], "569176": 90, "761097": 90, "1258295": 90, "753237": 90, "3508866": 90, "598274": 90, "23712": 90, "2500": 90, "tol": 90, "decreas": [90, 99], "cv_accuraci": 90, "9708": 90, "issue_type_descript": [90, 91, 92, 93, 95, 96, 100, 101], "lt": [90, 91, 92, 93, 95, 96, 97, 98, 100, 101, 103, 106], "gt": [90, 91, 92, 93, 95, 96, 97, 100, 101, 103, 110], "9976": 90, "986": 90, "002161": 90, "176": [90, 98, 101, 104], "002483": 90, "2318": 90, "004411": 90, "1005": 90, "004857": 90, "1871": 90, "007494": 90, "040587": 90, "999207": 90, "999377": 90, "975220": 90, "999367": 90, "identified_label_issu": [90, 96], "516": [90, 100], "1946": 90, "469": 90, "2132": 90, "worth": [90, 101], "6_yweweler_25": 90, "7_nicolas_43": 90, "6_theo_27": 90, "6_yweweler_36": 90, "6_yweweler_14": 90, "6_yweweler_35": 90, "6_nicolas_8": 90, "sound": 90, "quit": [90, 106], "underneath": 91, "hood": [91, 97, 99], "alert": 91, "introduct": 91, "mayb": [91, 92, 96], "your_feature_matrix": [91, 92], "toi": [91, 92, 93, 97, 98, 101, 103, 107], "inf": [91, 92], "mid": [91, 92], "bins_map": [91, 92], "create_data": [91, 92], "y_bin": [91, 92], "y_i": [91, 92], "y_bin_idx": [91, 92], "y_train": [91, 92, 101, 108], "y_test": [91, 92, 101, 108], "y_train_idx": [91, 92], "y_test_idx": [91, 92], "slide": [91, 92, 98], "frame": [91, 92], "x_out": [91, 92], "tini": [91, 92], "concaten": [91, 92, 107], "y_out": [91, 92], "y_out_bin": [91, 92], "y_out_bin_idx": [91, 92], "exact_duplicate_idx": [91, 92], "x_duplic": [91, 92], "y_duplic": [91, 92], "y_duplicate_idx": [91, 92], "noisy_labels_idx": [91, 92, 104], "scatter": [91, 92, 97, 101, 104, 108], "black": [91, 92, 98, 108], "cyan": [91, 92], "plot_data": [91, 92, 97, 101, 104, 108], "fig": [91, 92, 93, 98, 106, 108], "ax": [91, 92, 93, 97, 106, 108], "subplot": [91, 92, 93, 106], "set_titl": [91, 92, 93, 106], "set_xlabel": [91, 92], "x_1": [91, 92], "fontsiz": [91, 92, 93, 97, 101, 104], "set_ylabel": [91, 92], "x_2": [91, 92], "set_xlim": [91, 92], "set_ylim": [91, 92], "linestyl": [91, 92, 97], "circl": [91, 92, 101, 104], "misclassifi": [91, 92], "zip": [91, 92, 93, 97, 105, 110], "label_err": [91, 92], "180": [91, 92, 97, 105], "marker": [91, 92], "facecolor": [91, 92, 97], "edgecolor": [91, 92, 97], "linewidth": [91, 92, 97, 106], "dup": [91, 92], "first_legend": [91, 92], "align": [91, 92], "title_fontproperti": [91, 92], "semibold": [91, 92], "second_legend": [91, 92], "45": [91, 92, 97, 98, 100, 101, 105], "gca": [91, 92], "add_artist": [91, 92], "tight_layout": [91, 92, 97], "ideal": [91, 92], "remaind": 91, "modal": [91, 92, 99, 100, 103], "132": [91, 92, 100, 101, 105], "9318": 91, "006940": 91, "007830": 91, "40": [91, 92, 96, 97, 98, 100], "014828": 91, "107": [91, 92, 101, 104], "021241": 91, "026407": 91, "notic": [91, 101, 103, 105], "3558": [91, 92], "126": [91, 92, 93, 101, 105], "006636": [91, 92], "130": [91, 92], "012571": [91, 92], "129": [91, 92], "127": [91, 92, 100], "014909": [91, 92], "128": [91, 92, 93], "017443": [91, 92], "6160": [91, 92], "131": [91, 92, 100, 109], "000000e": [91, 92, 100], "000002": [91, 92], "463180e": [91, 92], "07": [91, 92, 93, 95, 97, 101, 105, 108, 110], "51": [91, 92, 95, 97, 98, 101, 105], "161148": [91, 92], "859087e": [91, 92], "30": [91, 92, 93, 97, 98, 99, 100, 104, 109, 110], "3453": 91, "029542": 91, "031182": 91, "057961": 91, "058244": 91, "54": [91, 97, 98, 101, 105], "039122": 91, "044598": 91, "105": [91, 105], "105196": 91, "133654": 91, "168033": 91, "125": 91, "101107": 91, "183382": 91, "109": [91, 97, 98, 100, 105], "209259": 91, "211042": 91, "221316": 91, "average_ood_scor": 91, "34530442089193386": 91, "52": [91, 97, 98, 100, 105, 110], "169820": 91, "087324e": 91, "89": [91, 95, 100, 105, 108], "259024": 91, "583757e": 91, "91": [91, 100, 105], "346458": 91, "341292e": 91, "specfi": 91, "new_lab": 91, "scoring_funct": 91, "div": 91, "rem": 91, "inv_scal": 91, "49": [91, 97, 98, 101, 105, 110], "superstitionissuemanag": 91, "unlucki": 91, "superstit": 91, "to_seri": 91, "issues_mask": 91, "summary_scor": 91, "9242": 91, "is_superstition_issu": 91, "superstition_scor": 91, "26": [91, 93, 97, 98, 100, 101, 103, 105], "047581": 91, "090635": 91, "129591": 91, "164840": 91, "lurk": [92, 93, 100, 101], "thoroughli": 92, "8561": 92, "001908": 92, "003564": 92, "007331": 92, "008963": 92, "009664": 92, "0227": 92, "022727": 92, "conceptu": 92, "856061": 92, "355772": 92, "616034": 92, "821750": 92, "926818": 92, "betweeen": 92, "859131": 92, "417707": 92, "664083": 92, "970324": 92, "816953": 92, "375317": 92, "641516": 92, "890575": 92, "910232": 92, "531021": 92, "460593": 92, "601188": 92, "826147": 92, "752808": 92, "321635": 92, "562539": 92, "948362": 92, "890169": 92, "090243": 92, "472909": 92, "746763": 92, "878267": 92, "examples_w_issu": [92, 99], "013445": 92, "025184": 92, "026376": 92, "inde": [92, 96], "miscellan": [92, 94, 110], "428571": 92, "111111": 92, "571429": 92, "407407": 92, "592593": 92, "337838": 92, "092593": 92, "662162": 92, "333333": [92, 98], "952381": 92, "666667": [92, 97], "portion": 92, "huge": [92, 101], "worri": [92, 96, 100], "critic": [92, 107], "60": [93, 97, 101, 108], "torchvis": [93, 97, 106], "tensordataset": 93, "stratifiedkfold": [93, 104], "tqdm": 93, "autonotebook": 93, "math": [93, 100], "fashion_mnist": 93, "60000": 93, "transformed_dataset": 93, "with_format": 93, "255": [93, 98], "cpu_count": 93, "torch_dataset": 93, "quick": [93, 104, 106], "super": 93, "relu": 93, "batchnorm2d": 93, "maxpool2d": 93, "lazylinear": 93, "flatten": 93, "get_test_accuraci": 93, "testload": [93, 106], "energi": 93, "trainload": [93, 106], "n_epoch": 93, "patienc": 93, "criterion": 93, "crossentropyloss": 93, "adamw": 93, "best_test_accuraci": 93, "start_epoch": 93, "running_loss": 93, "best_epoch": 93, "end_epoch": 93, "3f": [93, 108], "acc": [93, 101], "time_taken": 93, "compute_embed": 93, "compute_pred_prob": 93, "train_batch_s": 93, "num_work": 93, "worker": [93, 110], "train_id_list": 93, "test_id_list": 93, "train_id": 93, "test_id": 93, "embeddings_model": 93, "ntrain": 93, "trainset": 93, "testset": 93, "pin_memori": 93, "fold_embed": 93, "fold_pred_prob": 93, "finish": 93, "482": 93, "720": 93, "288": [93, 100], "329": [93, 95, 100, 105], "88": [93, 98, 100, 101, 104, 105, 108], "195": [93, 97, 100], "199": [93, 97, 100, 105], "493": 93, "060": 93, "330": [93, 100, 105], "505": 93, "911": 93, "476": [93, 100], "340": [93, 100], "113": 93, "328": [93, 105], "310": 93, "856": 93, "reorder": 93, "hstack": [93, 99, 101, 103], "max_preval": [93, 97], "7714": 93, "3772": 93, "3585": 93, "166": 93, "3651": 93, "27080": 93, "873833e": 93, "40378": 93, "915575e": 93, "25316": 93, "390277e": 93, "06": [93, 100, 101, 105, 110], "2090": 93, "751164e": 93, "14999": 93, "881301e": 93, "9569": 93, "11262": 93, "000003": 93, "coat": [93, 98], "shirt": [93, 98], "19228": 93, "000010": 93, "dress": 93, "32657": 93, "000013": 93, "bag": [93, 98, 106, 107], "21282": 93, "000016": [93, 100], "53564": 93, "000018": [93, 100], "pullov": 93, "6321": 93, "30968": 93, "001267": 93, "30659": 93, "000022": [93, 110], "47824": 93, "001454": 93, "3370": 93, "000026": 93, "54565": 93, "001854": 93, "9762": 93, "258": 93, "47139": 93, "000033": 93, "166980": 93, "986195": 93, "997205": 93, "sandal": [93, 98], "948781": 93, "999358": 93, "54078": 93, "17371": 93, "000025": 93, "plot_label_issue_exampl": 93, "nrow": [93, 106], "ceil": [93, 100], "axes_list": 93, "label_issue_indic": 93, "gl": 93, "sl": 93, "fontdict": 93, "imshow": [93, 106], "cmap": [93, 97, 108], "grai": 93, "subplots_adjust": 93, "hspace": 93, "outsiz": 93, "outlier_issu": [93, 96], "outlier_issues_df": 93, "depict": [93, 104, 105, 106, 107, 109], "plot_outlier_issues_exampl": 93, "n_comparison_imag": 93, "sample_from_class": 93, "number_of_sampl": 93, "non_outlier_indic": 93, "isnul": [93, 97], "non_outlier_indices_excluding_curr": 93, "sampled_indic": 93, "label_scores_of_sampl": 93, "top_score_indic": 93, "top_label_indic": 93, "sampled_imag": 93, "get_image_given_label_and_sampl": 93, "image_from_dataset": 93, "corresponding_label": 93, "comparison_imag": 93, "images_to_plot": 93, "idlist": 93, "iterrow": 93, "near_duplicate_issu": [93, 99], "closest": 93, "counterpart": 93, "near_duplicate_issues_df": 93, "plot_near_duplicate_issue_exampl": 93, "seen_id_pair": 93, "get_image_and_given_label_and_predicted_label": 93, "duplicate_imag": 93, "nd_set": 93, "challeng": 93, "dark_issu": 93, "reveal": [93, 97, 105, 109], "dark_issues_df": 93, "is_dark_issu": [93, 97], "34848": 93, "203922": 93, "50270": 93, "204588": 93, "3936": 93, "213098": 93, "733": 93, "217686": 93, "8094": 93, "230118": 93, "plot_image_issue_exampl": 93, "difficult": 93, "disproportion": [93, 97], "lowinfo_issu": 93, "lowinfo_issues_df": 93, "is_low_information_issu": 93, "53050": 93, "067975": 93, "40875": 93, "089929": 93, "9594": 93, "092601": 93, "34825": 93, "107744": 93, "37530": 93, "108516": 93, "lot": 93, "workflow": [94, 99, 100, 102, 108], "histgradientboostingclassifi": 95, "cat_featur": 95, "boost": [95, 99, 103, 108], "xgboost": [95, 99, 100, 108], "think": [95, 96, 99, 104, 109, 110], "nonzero": 95, "358": 95, "941": 95, "294": [95, 105], "46": [95, 97, 98, 100, 101, 105], "7109": 95, "000005": [95, 96], "886": 95, "000059": 95, "709": [95, 100], "000104": 95, "000169": 95, "689": 95, "000181": 95, "3590": 95, "051882e": 95, "683133e": 95, "536582e": 95, "406589e": 95, "324246e": 95, "6165": 95, "582": [95, 100], "185": [95, 97, 98, 105], "187": [95, 98, 100], "898": 95, "0000": [95, 96, 98, 100, 101], "865": 95, "515002": 95, "837": 95, "556480": 95, "622": 95, "593068": 95, "593207": 95, "920": 95, "618041": 95, "4386345844794593e": 95, "issue_result": 95, "000842": 95, "555944": 95, "004374": 95, "sorted_issu": 95, "73": [95, 97, 98, 100, 104, 105, 108, 110], "deserv": 95, "outlier_result": 95, "sorted_outli": 95, "56": [95, 97, 98, 108], "96": [95, 97, 98, 100, 101, 104, 105, 108], "style": [95, 97, 109], "font": 95, "18px": 95, "ff00ff": 95, "bac": 95, "duplicate_result": 95, "lowest_scoring_dupl": 95, "idxmin": [95, 99], "indices_to_displai": 95, "tolist": [95, 99, 100, 104], "perhap": [95, 101, 103], "second_lowest_scoring_dupl": 95, "next_indices_to_displai": 95, "wari": [95, 96, 99], "your_featur": 96, "text_embed": 96, "data_dict": [96, 101, 103], "85": [96, 97, 100, 105], "38": [96, 97, 98, 105], "9710": 96, "981": 96, "974": 96, "000146": 96, "982": [96, 98], "000224": 96, "971": 96, "000507": 96, "980": [96, 98], "000959": 96, "3584": 96, "994": 96, "009642": 96, "999": 96, "013067": 96, "013841": 96, "433": 96, "014722": 96, "989": 96, "018224": 96, "6070": 96, "160": [96, 108], "095724": 96, "148": 96, "006237": 96, "546": [96, 100], "099341": 96, "514": 96, "006485": 96, "481": 96, "123418": 96, "008165": 96, "313": [96, 100, 105], "564102": 96, "572258": 96, "574915": 96, "31": [96, 97, 98, 100, 101, 103, 105], "575507": 96, "575874": 96, "792093": 96, "257609": 96, "698706": 96, "182124": 96, "771623": 96, "data_with_suggested_label": 96, "suggested_label": 96, "withdraw": 96, "monei": 96, "lowest_quality_outli": 96, "OR": 96, "636c65616e6c616220697320617765736f6d6521": 96, "phone": [96, 98], "gone": 96, "samp": 96, "br": 96, "press": [96, 110], "nonsens": 96, "sens": 96, "detriment": 96, "duplicate_issu": 96, "fee": 96, "go": [96, 97, 98, 101], "p_valu": 96, "benign": 96, "curat": [96, 102], "bigger": 97, "make_classif": 97, "5000": [97, 106], "n_featur": 97, "n_inform": 97, "n_redund": 97, "n_repeat": 97, "n_class": 97, "n_clusters_per_class": 97, "flip_i": 97, "class_sep": 97, "faiss": 97, "x_faiss": 97, "float32": [97, 105], "normalize_l2": 97, "index_factori": 97, "hnsw32": 97, "flat": [97, 98], "metric_inner_product": 97, "a_min": 97, "a_max": 97, "create_knn_graph": 97, "assert": 97, "indices_1d": 97, "ravel": 97, "distances_1d": 97, "sort_graph_by_row_valu": 97, "warn_when_not_sort": 97, "50000": 97, "523": [97, 100], "991400": 97, "356958": 97, "362": 97, "619565": 97, "108": [97, 105], "500000": 97, "651838": 97, "999827": 97, "031217": 97, "933716": 97, "627345": 97, "998540": 97, "530909": 97, "296974": 97, "646765": 97, "942721": 97, "332824": 97, "803246": 97, "625202": 97, "999816": 97, "474031": 97, "706253": 97, "655108": 97, "997703": 97, "131466": 97, "912389": 97, "639200": 97, "4995": 97, "998646": 97, "504755": 97, "746777": 97, "680033": 97, "4996": 97, "894230": 97, "340986": 97, "816472": 97, "640711": 97, "4997": 97, "999100": 97, "428545": 97, "592421": 97, "658949": 97, "4998": 97, "986792": 97, "273710": 97, "618033": 97, "4999": 97, "986776": 97, "273524": 97, "618084": 97, "instabl": 97, "proxim": 97, "analys": 97, "comfort": 97, "explor": [97, 105, 106], "third": 97, "parti": [97, 110], "newsgroup": 97, "alt": [97, 98], "atheism": [97, 98], "sci": [97, 98], "fetch_20newsgroup": 97, "newsgroups_train": 97, "header": 97, "footer": 97, "quot": 97, "df_text": 97, "target_nam": 97, "enlighten": 97, "omnipot": 97, "19apr199320262420": 97, "kelvin": 97, "jpl": 97, "nasa": 97, "gov": 97, "baa": 97, "nhenri": 97, "he": 97, "nno": 97, "ge": 97, "nlucki": 97, "babi": [97, 98], "tfidfvector": 97, "feature_extract": 97, "x_vector": 97, "data_valuation_issu": 97, "147": [97, 101, 105], "500047": 97, "500093": 97, "499953": 97, "1068": 97, "1069": 97, "1070": 97, "1071": 97, "1072": 97, "1073": 97, "concentr": 97, "seaborn": 97, "sn": 97, "distinguish": [97, 100], "strip": 97, "stripplot": 97, "hue": [97, 108], "dodg": 97, "jitter": 97, "axvlin": [97, 106], "xlabel": 97, "ourselv": 97, "make_blob": 97, "center": [97, 98], "cluster_std": 97, "n_noisy_label": 97, "meaning": [97, 99, 100, 106], "silhouette_scor": 97, "gridsearchcv": 97, "silhouett": 97, "cluster_label": 97, "fit_predict": 97, "param_grid": [97, 100], "grid_search": 97, "best_kmean": 97, "best_estimator_": 97, "underperforming_group_issu": 97, "328308": 97, "tab10": 97, "domain": 97, "knowledg": [97, 101], "dataset_tsv": 97, "ag": [97, 108], "gender": 97, "educ": 97, "experi": 97, "highsalari": 97, "indiana": 97, "phd": 97, "male": 97, "bachelor": 97, "femal": 97, "kansa": 97, "school": [97, 98], "ohio": 97, "44": [97, 98, 104, 105], "57": [97, 98, 100, 101], "california": 97, "59": [97, 98, 105], "34": [97, 98, 101, 103, 105, 110], "63": [97, 100, 101, 105, 108], "47": [97, 98, 105], "stringio": 97, "sep": [97, 110], "easier": [97, 101], "simplic": [97, 104], "ordinalencod": 97, "columns_to_encod": 97, "encoded_df": 97, "salari": 97, "573681": 97, "underpin": 97, "caught": 97, "whenev": 97, "generate_data_depend": 97, "num_sampl": 97, "a1": 97, "a2": 97, "a3": 97, "375": 97, "975": 97, "strong": 97, "evid": [97, 100], "inter": 97, "oppos": 97, "non_iid_issu": 97, "796474": 97, "842432": 97, "922562": 97, "820759": 97, "873136": 97, "887373": 97, "825101": 97, "855875": 97, "751795": 97, "835796": 97, "trend": 97, "ylabel": [97, 106], "coolwarm": 97, "colorbar": [97, 108], "glean": 97, "mitig": 97, "risk": [97, 100], "deeper": 97, "tsv": 97, "tab": 97, "pars": 97, "annual_spend": 97, "number_of_transact": 97, "last_purchase_d": 97, "rural": 97, "4099": 97, "2024": 97, "6421": 97, "nat": 97, "suburban": 97, "5436": 97, "4046": 97, "66": [97, 98, 100], "3467": 97, "67": [97, 98, 100, 105, 108], "4757": 97, "4199": 97, "4991": 97, "4655": 97, "82": [97, 98, 100, 101, 105, 108], "5584": 97, "urban": 97, "3102": 97, "6637": 97, "9167": 97, "6790": 97, "5327": 97, "parse_d": 97, "lose": 97, "intact": 97, "encode_categorical_column": 97, "placehold": 97, "dropna": [97, 103], "category_to_numb": 97, "_encod": 97, "gender_encod": 97, "location_encod": 97, "focus": [97, 100, 101, 103, 104, 108], "null_issu": 97, "833333": 97, "sorted_indic": [97, 105], "sorted_df": 97, "nice": 97, "styler": 97, "combined_df": 97, "concat": [97, 100, 108], "highlight_null_valu": 97, "val": [97, 101], "yellow": [97, 98], "highlight_datalab_column": 97, "lightblu": 97, "highlight_is_null_issu": 97, "orang": [97, 98], "styled_df": 97, "nbsp": [97, 99, 100, 101], "160000": 97, "820000": 97, "460000": 97, "470000": 97, "960000": 97, "620000": 97, "550000": 97, "660000": 97, "670000": [97, 98], "370000": 97, "530000": 97, "710000": 97, "020000": 97, "320000": 97, "990000": 97, "rarer": 97, "fairer": 97, "randomli": [97, 100, 101], "class_imbalance_issu": 97, "countplot": 97, "xtick": 97, "rotat": 97, "ytick": 97, "filtered_df": 97, "xy": 97, "va": 97, "textual": 97, "get_ytick": 97, "nbar": 97, "nimbal": 97, "get_legend_handles_label": 97, "title_fonts": 97, "aspect": 97, "anomali": [97, 105], "enhanc": [97, 101, 103, 105], "artifici": 97, "directori": [97, 110], "subdirectori": 97, "nc": [97, 105, 109, 110], "unzip": [97, 105, 110], "2025": [97, 110], "111": [97, 103, 108], "153": [97, 100, 105], "110": [97, 105], "connect": [97, 110], "443": [97, 110], "await": [97, 110], "ok": [97, 107, 110], "986707": 97, "964k": 97, "963": 97, "58k": 97, "kb": [97, 110], "mb": [97, 110], "imagefold": 97, "load_image_dataset": 97, "data_dir": 97, "root": [97, 106], "image_dataset": 97, "img": [97, 106, 108], "from_dict": [97, 99], "darkened_imag": 97, "job": 97, "015": 97, "label_uncorrelatedness_scor": 97, "image_issu": 97, "nimag": 97, "237196": 97, "197229": 97, "254188": 97, "229170": 97, "208907": 97, "793840": 97, "196": [97, 100, 101, 105], "197": [97, 101, 105], "971560": 97, "198": [97, 101, 105], "862236": 97, "973533": 97, "stronger": 97, "frog": [97, 98, 106], "darken": 97, "concept": 97, "notabl": 97, "preval": 97, "warrant": 97, "programmat": 97, "plot_scores_label": 97, "issues_copi": 97, "boxplot": 97, "refin": 98, "instruct": [98, 99, 100], "studi": [98, 105], "mnist_test_set": 98, "imagenet_val_set": 98, "tench": 98, "goldfish": 98, "white": [98, 110], "shark": 98, "tiger": 98, "hammerhead": 98, "electr": 98, "rai": 98, "stingrai": 98, "cock": 98, "hen": 98, "ostrich": 98, "brambl": 98, "goldfinch": 98, "hous": 98, "finch": 98, "junco": 98, "indigo": 98, "bunt": 98, "american": [98, 110], "robin": 98, "bulbul": 98, "jai": 98, "magpi": 98, "chickade": 98, "dipper": 98, "kite": 98, "bald": 98, "eagl": 98, "vultur": 98, "grei": 98, "owl": 98, "salamand": 98, "smooth": 98, "newt": 98, "spot": [98, 99, 105], "axolotl": 98, "bullfrog": 98, "tree": 98, "tail": 98, "loggerhead": 98, "sea": 98, "turtl": 98, "leatherback": 98, "mud": 98, "terrapin": 98, "band": 98, "gecko": 98, "green": [98, 110], "iguana": 98, "carolina": 98, "anol": 98, "desert": 98, "grassland": 98, "whiptail": 98, "lizard": 98, "agama": 98, "frill": 98, "neck": 98, "allig": 98, "gila": 98, "monster": 98, "european": 98, "chameleon": 98, "komodo": 98, "dragon": 98, "nile": 98, "crocodil": 98, "triceratop": 98, "worm": 98, "snake": 98, "ring": 98, "eastern": 98, "hog": 98, "nose": 98, "kingsnak": 98, "garter": 98, "water": 98, "vine": 98, "night": 98, "boa": 98, "constrictor": 98, "african": 98, "rock": 98, "indian": 98, "cobra": 98, "mamba": 98, "saharan": 98, "horn": 98, "viper": 98, "diamondback": 98, "rattlesnak": 98, "sidewind": 98, "trilobit": 98, "harvestman": 98, "scorpion": 98, "garden": 98, "spider": 98, "barn": 98, "southern": 98, "widow": 98, "tarantula": 98, "wolf": 98, "tick": 98, "centiped": 98, "grous": 98, "ptarmigan": 98, "ruf": 98, "prairi": 98, "peacock": 98, "quail": 98, "partridg": 98, "parrot": 98, "macaw": 98, "sulphur": 98, "crest": 98, "cockatoo": 98, "lorikeet": 98, "coucal": 98, "bee": 98, "eater": 98, "hornbil": 98, "hummingbird": 98, "jacamar": 98, "toucan": 98, "breast": 98, "mergans": 98, "goos": 98, "swan": 98, "tusker": 98, "echidna": 98, "platypu": 98, "wallabi": 98, "koala": 98, "wombat": 98, "jellyfish": 98, "anemon": 98, "brain": 98, "coral": 98, "flatworm": 98, "nematod": 98, "conch": 98, "snail": 98, "slug": 98, "chiton": 98, "chamber": 98, "nautilu": 98, "dung": 98, "crab": 98, "fiddler": 98, "king": 98, "lobster": 98, "spini": 98, "crayfish": 98, "hermit": 98, "isopod": 98, "stork": 98, "spoonbil": 98, "flamingo": 98, "heron": 98, "egret": 98, "bittern": 98, "crane": 98, "bird": [98, 106], "limpkin": 98, "gallinul": 98, "coot": 98, "bustard": 98, "ruddi": 98, "turnston": 98, "dunlin": 98, "redshank": 98, "dowitch": 98, "oystercatch": 98, "pelican": 98, "penguin": 98, "albatross": 98, "whale": 98, "killer": 98, "dugong": 98, "lion": 98, "chihuahua": 98, "japanes": 98, "chin": 98, "maltes": 98, "pekinges": 98, "shih": 98, "tzu": 98, "charl": 98, "spaniel": 98, "papillon": 98, "terrier": 98, "rhodesian": 98, "ridgeback": 98, "afghan": [98, 110], "hound": 98, "basset": 98, "beagl": 98, "bloodhound": 98, "bluetick": 98, "coonhound": 98, "tan": 98, "walker": 98, "foxhound": 98, "redbon": 98, "borzoi": 98, "irish": 98, "wolfhound": 98, "italian": 98, "greyhound": 98, "whippet": 98, "ibizan": 98, "norwegian": 98, "elkhound": 98, "otterhound": 98, "saluki": 98, "scottish": 98, "deerhound": 98, "weimaran": 98, "staffordshir": 98, "bull": 98, "bedlington": 98, "border": 98, "kerri": 98, "norfolk": 98, "norwich": 98, "yorkshir": 98, "wire": 98, "fox": 98, "lakeland": 98, "sealyham": 98, "airedal": 98, "cairn": 98, "australian": 98, "dandi": 98, "dinmont": 98, "boston": 98, "miniatur": 98, "schnauzer": 98, "giant": 98, "tibetan": 98, "silki": 98, "wheaten": 98, "west": 98, "highland": 98, "lhasa": 98, "apso": 98, "curli": 98, "golden": 98, "labrador": 98, "chesapeak": 98, "bai": 98, "german": [98, 110], "shorthair": 98, "pointer": 98, "vizsla": 98, "setter": 98, "gordon": 98, "brittani": 98, "clumber": 98, "springer": 98, "welsh": 98, "cocker": 98, "sussex": 98, "kuvasz": 98, "schipperk": 98, "groenendael": 98, "malinoi": 98, "briard": 98, "kelpi": 98, "komondor": 98, "sheepdog": 98, "shetland": 98, "colli": 98, "bouvier": 98, "de": 98, "flandr": 98, "rottweil": 98, "shepherd": 98, "dobermann": 98, "pinscher": 98, "swiss": [98, 110], "mountain": 98, "bernes": 98, "appenzel": 98, "sennenhund": 98, "entlebuch": 98, "boxer": 98, "bullmastiff": 98, "mastiff": 98, "french": 98, "bulldog": 98, "dane": 98, "st": 98, "bernard": 98, "huski": 98, "alaskan": 98, "malamut": 98, "siberian": 98, "dalmatian": 98, "affenpinsch": 98, "basenji": 98, "pug": 98, "leonberg": 98, "newfoundland": 98, "pyrenean": 98, "samoi": 98, "pomeranian": 98, "chow": 98, "keeshond": 98, "griffon": 98, "bruxelloi": 98, "pembrok": 98, "corgi": 98, "cardigan": 98, "poodl": 98, "mexican": 98, "hairless": 98, "tundra": 98, "coyot": 98, "dingo": 98, "dhole": 98, "wild": 98, "hyena": 98, "kit": 98, "arctic": 98, "tabbi": 98, "persian": 98, "siames": 98, "egyptian": 98, "mau": 98, "cougar": 98, "lynx": 98, "leopard": 98, "snow": 98, "jaguar": 98, "cheetah": 98, "brown": [98, 109], "bear": 98, "polar": 98, "sloth": 98, "mongoos": 98, "meerkat": 98, "beetl": 98, "ladybug": 98, "longhorn": 98, "leaf": 98, "rhinocero": 98, "weevil": 98, "fly": 98, "ant": 98, "grasshopp": 98, "cricket": 98, "stick": 98, "insect": 98, "cockroach": 98, "manti": 98, "cicada": 98, "leafhopp": 98, "lacew": 98, "dragonfli": 98, "damselfli": 98, "admir": 98, "ringlet": 98, "monarch": 98, "butterfli": 98, "gossam": 98, "wing": 98, "starfish": 98, "urchin": 98, "cucumb": 98, "cottontail": 98, "rabbit": 98, "hare": 98, "angora": 98, "hamster": 98, "porcupin": 98, "squirrel": 98, "marmot": 98, "beaver": 98, "guinea": 98, "pig": 98, "sorrel": 98, "zebra": 98, "boar": 98, "warthog": 98, "hippopotamu": 98, "ox": 98, "buffalo": 98, "bison": 98, "bighorn": 98, "sheep": 98, "alpin": 98, "ibex": 98, "hartebeest": 98, "impala": 98, "gazel": 98, "dromedari": 98, "llama": 98, "weasel": 98, "mink": 98, "polecat": 98, "foot": 98, "ferret": 98, "otter": 98, "skunk": 98, "badger": 98, "armadillo": 98, "toed": 98, "orangutan": 98, "gorilla": 98, "chimpanze": 98, "gibbon": 98, "siamang": 98, "guenon": 98, "pata": 98, "monkei": 98, "baboon": 98, "macaqu": 98, "langur": 98, "colobu": 98, "probosci": 98, "marmoset": 98, "capuchin": 98, "howler": 98, "titi": 98, "geoffroi": 98, "lemur": 98, "indri": 98, "asian": 98, "eleph": 98, "bush": 98, "snoek": 98, "eel": 98, "coho": 98, "salmon": 98, "beauti": 98, "clownfish": 98, "sturgeon": 98, "garfish": 98, "lionfish": 98, "pufferfish": 98, "abacu": 98, "abaya": 98, "academ": 98, "gown": 98, "accordion": 98, "acoust": 98, "guitar": 98, "aircraft": 98, "carrier": 98, "airlin": 98, "airship": 98, "altar": 98, "ambul": 98, "amphibi": 98, "clock": [98, 110], "apiari": 98, "apron": 98, "wast": 98, "assault": 98, "rifl": 98, "backpack": 98, "bakeri": 98, "balanc": 98, "beam": 98, "balloon": 98, "ballpoint": 98, "pen": 98, "aid": 98, "banjo": 98, "balust": 98, "barbel": 98, "barber": 98, "chair": [98, 105], "barbershop": 98, "baromet": 98, "barrel": 98, "wheelbarrow": 98, "basebal": 98, "basketbal": 98, "bassinet": 98, "bassoon": 98, "swim": 98, "cap": 98, "bath": 98, "towel": 98, "bathtub": 98, "station": 98, "wagon": 98, "lighthous": 98, "beaker": 98, "militari": 98, "beer": 98, "bottl": 98, "glass": 98, "bell": 98, "cot": 98, "bib": 98, "bicycl": [98, 109], "bikini": 98, "binder": 98, "binocular": 98, "birdhous": 98, "boathous": 98, "bobsleigh": 98, "bolo": 98, "tie": 98, "poke": 98, "bonnet": 98, "bookcas": 98, "bookstor": 98, "bow": 98, "brass": 98, "bra": 98, "breakwat": 98, "breastplat": 98, "broom": 98, "bucket": 98, "buckl": 98, "bulletproof": 98, "vest": 98, "butcher": 98, "shop": 98, "taxicab": 98, "cauldron": 98, "candl": 98, "cannon": 98, "cano": 98, "mirror": [98, 105], "carousel": 98, "carton": 98, "wheel": 98, "teller": 98, "cassett": 98, "player": 98, "castl": 98, "catamaran": 98, "cd": 98, "cello": 98, "mobil": [98, 110], "chain": 98, "fenc": [98, 109], "mail": 98, "chainsaw": 98, "chest": 98, "chiffoni": 98, "chime": 98, "china": 98, "cabinet": 98, "christma": 98, "stock": 98, "church": 98, "movi": 98, "theater": 98, "cleaver": 98, "cliff": 98, "dwell": 98, "cloak": 98, "clog": 98, "cocktail": 98, "shaker": 98, "coffe": 98, "mug": 98, "coffeemak": 98, "coil": 98, "lock": 98, "keyboard": 98, "confectioneri": 98, "ship": [98, 106], "corkscrew": 98, "cornet": 98, "cowboi": 98, "boot": 98, "hat": 98, "cradl": 98, "crash": 98, "helmet": 98, "crate": 98, "infant": 98, "bed": 98, "crock": 98, "pot": 98, "croquet": 98, "crutch": 98, "cuirass": 98, "dam": 98, "desk": 98, "desktop": 98, "rotari": 98, "dial": 98, "telephon": 98, "diaper": 98, "watch": 98, "dine": 98, "dishcloth": 98, "dishwash": 98, "disc": 98, "brake": 98, "dock": 98, "sled": 98, "dome": 98, "doormat": 98, "drill": 98, "rig": 98, "drum": 98, "drumstick": 98, "dumbbel": 98, "dutch": 98, "oven": 98, "fan": 98, "locomot": 98, "entertain": 98, "envelop": 98, "espresso": 98, "powder": 98, "feather": 98, "fireboat": 98, "engin": [98, 109], "screen": 98, "sheet": 98, "flagpol": 98, "flute": 98, "footbal": 98, "forklift": 98, "fountain": 98, "poster": 98, "freight": 98, "fry": 98, "pan": 98, "fur": 98, "garbag": 98, "ga": 98, "pump": 98, "goblet": 98, "kart": 98, "golf": 98, "cart": 98, "gondola": 98, "gong": 98, "grand": 98, "piano": 98, "greenhous": 98, "grill": 98, "groceri": 98, "guillotin": 98, "barrett": 98, "hair": 98, "sprai": 98, "hammer": 98, "dryer": 98, "hand": [98, 101], "handkerchief": 98, "drive": 98, "harmonica": 98, "harp": 98, "harvest": 98, "hatchet": 98, "holster": 98, "honeycomb": 98, "hoop": 98, "skirt": 98, "horizont": 98, "bar": 98, "drawn": 98, "hourglass": 98, "ipod": 98, "cloth": 98, "iron": 98, "jack": 98, "lantern": 98, "jean": 98, "jeep": 98, "jigsaw": 98, "puzzl": 98, "pull": 98, "rickshaw": 98, "joystick": 98, "kimono": 98, "knee": 98, "pad": 98, "knot": 98, "ladl": 98, "lampshad": 98, "laptop": 98, "lawn": 98, "mower": 98, "knife": 98, "lifeboat": 98, "lighter": 98, "limousin": 98, "ocean": 98, "liner": 98, "lipstick": 98, "slip": 98, "shoe": 98, "lotion": 98, "speaker": 98, "loup": 98, "sawmil": 98, "magnet": 98, "compass": 98, "mailbox": 98, "tight": 98, "tank": 98, "manhol": 98, "maraca": 98, "marimba": 98, "maypol": 98, "maze": 98, "cup": [98, 105], "medicin": 98, "megalith": 98, "microphon": 98, "microwav": 98, "milk": 98, "minibu": 98, "miniskirt": 98, "minivan": 98, "missil": 98, "mitten": [98, 99], "mix": 98, "bowl": 98, "modem": 98, "monasteri": 98, "monitor": 98, "mope": 98, "mortar": 98, "mosqu": 98, "mosquito": 98, "scooter": 98, "bike": 98, "tent": 98, "mous": [98, 99], "mousetrap": 98, "van": 98, "muzzl": 98, "nail": 98, "brace": 98, "necklac": 98, "nippl": 98, "obelisk": 98, "obo": 98, "ocarina": 98, "odomet": 98, "oil": 98, "oscilloscop": 98, "overskirt": 98, "bullock": 98, "oxygen": 98, "packet": 98, "paddl": 98, "padlock": 98, "paintbrush": 98, "pajama": 98, "palac": [98, 110], "parachut": 98, "park": 98, "bench": 98, "meter": 98, "passeng": 98, "patio": 98, "payphon": 98, "pedest": 98, "pencil": 98, "perfum": 98, "petri": 98, "dish": 98, "photocopi": 98, "plectrum": 98, "pickelhaub": 98, "picket": 98, "pickup": 98, "pier": 98, "piggi": 98, "pill": 98, "pillow": 98, "ping": 98, "pong": 98, "pinwheel": 98, "pirat": 98, "pitcher": 98, "plane": 98, "planetarium": 98, "plastic": 98, "plate": 98, "rack": 98, "plow": 98, "plunger": 98, "polaroid": 98, "camera": 98, "pole": [98, 109], "polic": 98, "poncho": 98, "billiard": 98, "soda": 98, "potter": 98, "prayer": 98, "rug": 98, "printer": 98, "prison": 98, "projectil": 98, "projector": 98, "hockei": 98, "puck": 98, "punch": 98, "purs": 98, "quill": 98, "quilt": 98, "race": 98, "racket": 98, "radiat": 98, "radio": 98, "telescop": 98, "rain": 98, "recreat": 98, "reel": 98, "reflex": 98, "refriger": 98, "remot": 98, "restaur": 98, "revolv": 98, "rotisseri": 98, "eras": 98, "rugbi": 98, "ruler": 98, "safe": 98, "safeti": 98, "salt": 98, "sarong": 98, "saxophon": 98, "scabbard": 98, "bu": [98, 109], "schooner": 98, "scoreboard": 98, "crt": 98, "screw": 98, "screwdriv": 98, "seat": 98, "belt": 98, "sew": 98, "shield": 98, "shoji": 98, "basket": 98, "shovel": 98, "shower": 98, "curtain": 98, "ski": 98, "sleep": 98, "door": 98, "slot": 98, "snorkel": 98, "snowmobil": 98, "snowplow": 98, "soap": 98, "dispens": 98, "soccer": [98, 110], "sock": [98, 99], "solar": 98, "thermal": 98, "collector": 98, "sombrero": 98, "soup": 98, "heater": 98, "shuttl": 98, "spatula": 98, "motorboat": 98, "web": 98, "spindl": 98, "sport": [98, 110], "spotlight": 98, "stage": 98, "steam": 98, "arch": 98, "bridg": 98, "steel": 98, "stethoscop": 98, "scarf": 98, "stone": 98, "wall": [98, 109], "stopwatch": 98, "stove": 98, "strainer": 98, "tram": 98, "stretcher": 98, "couch": 98, "stupa": 98, "submarin": 98, "sundial": 98, "sunglass": 98, "sunscreen": 98, "suspens": 98, "mop": 98, "sweatshirt": 98, "swimsuit": 98, "swing": 98, "switch": 98, "syring": 98, "lamp": 98, "tape": 98, "teapot": 98, "teddi": 98, "televis": [98, 110], "tenni": 98, "thatch": 98, "roof": 98, "thimbl": 98, "thresh": 98, "throne": 98, "tile": 98, "toaster": 98, "tobacco": 98, "toilet": 98, "totem": 98, "tow": 98, "tractor": 98, "semi": 98, "trailer": 98, "trai": 98, "trench": 98, "tricycl": 98, "trimaran": 98, "tripod": 98, "triumphal": 98, "trolleybu": 98, "trombon": 98, "tub": 98, "turnstil": 98, "typewrit": 98, "umbrella": 98, "unicycl": 98, "upright": 98, "vacuum": 98, "cleaner": [98, 100], "vase": 98, "vault": 98, "velvet": 98, "vend": 98, "vestment": 98, "viaduct": 98, "violin": 98, "volleybal": 98, "waffl": 98, "wallet": 98, "wardrob": 98, "sink": 98, "wash": 98, "jug": 98, "tower": 98, "whiskei": 98, "whistl": 98, "wig": 98, "shade": [98, 109], "windsor": 98, "wine": 98, "wok": 98, "wooden": 98, "spoon": 98, "wool": 98, "rail": 98, "shipwreck": 98, "yawl": 98, "yurt": 98, "websit": 98, "comic": 98, "book": 98, "crossword": 98, "traffic": [98, 105, 109], "sign": [98, 109, 110], "dust": 98, "jacket": [98, 105], "menu": 98, "guacamol": 98, "consomm": 98, "trifl": 98, "ic": 98, "cream": 98, "pop": 98, "baguett": 98, "bagel": 98, "pretzel": 98, "cheeseburg": 98, "mash": 98, "potato": 98, "cabbag": 98, "broccoli": 98, "cauliflow": 98, "zucchini": 98, "spaghetti": 98, "squash": 98, "acorn": 98, "butternut": 98, "artichok": 98, "pepper": [98, 99], "cardoon": 98, "mushroom": 98, "granni": 98, "smith": 98, "strawberri": 98, "lemon": 98, "pineappl": 98, "banana": 98, "jackfruit": 98, "custard": 98, "appl": 98, "pomegran": 98, "hai": 98, "carbonara": 98, "chocol": 98, "syrup": 98, "dough": 98, "meatloaf": 98, "pizza": 98, "pie": 98, "burrito": 98, "eggnog": 98, "alp": 98, "bubbl": 98, "reef": 98, "geyser": 98, "lakeshor": 98, "promontori": 98, "shoal": 98, "seashor": 98, "vallei": 98, "volcano": 98, "bridegroom": 98, "scuba": 98, "diver": 98, "rapese": 98, "daisi": 98, "ladi": 98, "slipper": 98, "corn": 98, "rose": 98, "hip": 98, "chestnut": 98, "fungu": 98, "agar": 98, "gyromitra": 98, "stinkhorn": 98, "earth": 98, "star": 98, "wood": 98, "bolet": 98, "ear": 98, "cifar10_test_set": 98, "airplan": [98, 106], "automobil": [98, 106], "deer": [98, 106], "cifar100_test_set": 98, "aquarium_fish": 98, "boi": 98, "camel": 98, "caterpillar": 98, "cattl": [98, 110], "cloud": 98, "dinosaur": 98, "dolphin": 98, "flatfish": 98, "forest": 98, "girl": 98, "kangaroo": 98, "lawn_mow": 98, "man": 98, "maple_tre": 98, "motorcycl": [98, 109], "oak_tre": 98, "orchid": 98, "palm_tre": 98, "pear": 98, "pickup_truck": 98, "pine_tre": 98, "plain": 98, "poppi": 98, "possum": 98, "raccoon": 98, "road": [98, 109], "rocket": 98, "seal": 98, "shrew": 98, "skyscrap": 98, "streetcar": 98, "sunflow": 98, "sweet_pepp": 98, "trout": 98, "tulip": 98, "willow_tre": 98, "woman": [98, 105], "caltech256": 98, "ak47": 98, "bat": 98, "glove": 98, "birdbath": 98, "blimp": 98, "bonsai": 98, "boom": 98, "breadmak": 98, "buddha": 98, "bulldoz": 98, "cactu": 98, "cake": 98, "tire": 98, "cartman": 98, "cereal": 98, "chandeli": 98, "chess": 98, "board": 98, "chimp": 98, "chopstick": 98, "coffin": 98, "coin": 98, "comet": 98, "cormor": 98, "globe": 98, "diamond": 98, "dice": 98, "doorknob": 98, "drink": 98, "straw": 98, "dumb": 98, "eiffel": 98, "elk": 98, "ewer": 98, "eyeglass": 98, "fern": 98, "fighter": 98, "jet": [98, 108], "extinguish": 98, "hydrant": 98, "firework": 98, "flashlight": 98, "floppi": 98, "fri": 98, "frisbe": 98, "galaxi": 98, "giraff": 98, "goat": 98, "gate": 98, "grape": 98, "pick": [98, 99], "hamburg": 98, "hammock": 98, "harpsichord": 98, "hawksbil": 98, "helicopt": 98, "hibiscu": 98, "homer": 98, "simpson": 98, "horsesho": 98, "air": 98, "skeleton": 98, "ibi": 98, "cone": 98, "iri": 98, "jesu": 98, "christ": 98, "joi": 98, "kayak": 98, "ketch": 98, "ladder": 98, "lath": 98, "licens": 98, "lightbulb": 98, "lightn": 98, "mandolin": 98, "mar": 98, "mattress": 98, "megaphon": 98, "menorah": 98, "microscop": 98, "minaret": 98, "minotaur": 98, "motorbik": 98, "mussel": 98, "neckti": 98, "octopu": 98, "palm": 98, "pilot": 98, "paperclip": 98, "shredder": 98, "pci": 98, "peopl": [98, 105], "pez": 98, "picnic": 98, "pram": 98, "prai": 98, "pyramid": 98, "rainbow": 98, "roulett": 98, "saddl": 98, "saturn": 98, "segwai": 98, "propel": 98, "sextant": 98, "music": 98, "skateboard": 98, "smokestack": 98, "sneaker": 98, "boat": 98, "stain": 98, "steer": 98, "stirrup": 98, "superman": 98, "sushi": 98, "armi": [98, 110], "sword": 98, "tambourin": 98, "teepe": 98, "court": 98, "theodolit": 98, "tomato": 98, "tombston": 98, "tour": 98, "pisa": 98, "treadmil": 98, "fork": 98, "tweezer": 98, "unicorn": 98, "vcr": 98, "waterfal": 98, "watermelon": 98, "weld": 98, "windmil": 98, "xylophon": 98, "yarmulk": 98, "yo": 98, "toad": 98, "twenty_news_test_set": 98, "comp": 98, "graphic": [98, 109], "misc": [98, 110], "sy": 98, "ibm": 98, "pc": 98, "hardwar": 98, "mac": 98, "forsal": 98, "rec": 98, "crypt": 98, "electron": 98, "med": 98, "soc": 98, "religion": 98, "christian": [98, 110], "talk": [98, 110], "polit": 98, "gun": 98, "mideast": 98, "amazon": 98, "neutral": 98, "imdb_test_set": 98, "all_class": 98, "20news_test_set": 98, "_load_classes_predprobs_label": 98, "dataset_nam": 98, "labelerror": 98, "url_bas": 98, "5392f6c71473055060be3044becdde1cbc18284d": 98, "url_label": 98, "original_test_label": 98, "_original_label": 98, "url_prob": 98, "cross_validated_predicted_prob": 98, "_pyx": 98, "num_part": 98, "datatset": 98, "bytesio": 98, "allow_pickl": 98, "pred_probs_part": 98, "url": 98, "_of_": 98, "nload": 98, "imdb": 98, "ve": [98, 99, 100, 101, 103, 105], "capit": 98, "29780": 98, "256": [98, 99, 100, 105], "780": 98, "medic": [98, 110], "doctor": 98, "254": [98, 105], "359223": 98, "640777": 98, "184": [98, 101], "258427": 98, "341176": 98, "263158": 98, "658824": 98, "337349": 98, "246575": 98, "662651": 98, "248": 98, "330000": 98, "355769": 98, "251": [98, 105], "167": [98, 101, 105], "252": [98, 100], "112": [98, 100], "253": [98, 105], "022989": 98, "049505": 98, "190": [98, 101, 105], "002216": 98, "000974": 98, "000873": 98, "000739": 98, "32635": 98, "32636": 98, "32637": 98, "32638": 98, "32639": 98, "32640": 98, "051": 98, "002242": 98, "997758": 98, "002088": 98, "001045": 98, "997912": 98, "002053": 98, "997947": 98, "001980": 98, "000991": 98, "998020": 98, "001946": 98, "002915": 98, "998054": 98, "001938": 98, "002904": 98, "998062": 98, "001020": 98, "998980": 98, "001018": 98, "002035": 98, "998982": 98, "999009": 98, "0003": 98, "0002": 98, "071": 98, "067269": 98, "929": 98, "046": 98, "058243": 98, "954": 98, "035": 98, "032096": 98, "965": 98, "031": 98, "012232": 98, "969": 98, "022": 98, "025896": 98, "978": 98, "020": [98, 101], "013092": 98, "018": 98, "013065": 98, "016": 98, "030542": 98, "984": 98, "013": 98, "020833": 98, "987": 98, "012": 98, "010020": 98, "988": 98, "0073": 98, "0020": 98, "0016": 98, "0015": 98, "0014": 98, "0013": 98, "0012": 98, "0010": 98, "0008": 98, "0007": 98, "0006": 98, "0005": 98, "0004": 98, "244": [98, 105, 110], "452381": 98, "459770": 98, "523364": 98, "460784": 98, "446602": 98, "103774": 98, "030612": 98, "110092": 98, "049020": 98, "0034": 98, "0032": 98, "0026": 98, "0025": 98, "4945": 98, "4946": 98, "4947": 98, "4948": 98, "4949": 98, "4950": 98, "846": 98, "7532": 98, "532": 98, "034483": 98, "009646": 98, "965517": 98, "030457": 98, "020513": 98, "969543": 98, "028061": 98, "035443": 98, "971939": 98, "025316": 98, "005168": 98, "974684": 98, "049751": 98, "979487": 98, "019920": 98, "042802": 98, "980080": 98, "017677": 98, "005115": 98, "982323": 98, "012987": 98, "005236": 98, "987013": 98, "012723": 98, "025126": 98, "987277": 98, "010989": 98, "008264": 98, "989011": 98, "010283": 98, "027778": 98, "989717": 98, "009677": 98, "990323": 98, "007614": 98, "010127": 98, "992386": 98, "005051": 98, "994949": 98, "005025": 98, "994975": 98, "005013": 98, "994987": 98, "001859": 98, "001328": 98, "000929": 98, "000664": 98, "186": [98, 101], "188": [98, 101, 104], "189": [98, 101], "snippet": 99, "nlp": [99, 110], "mind": [99, 101], "alphanumer": 99, "facilit": 99, "seamless": 99, "classlabel": 99, "guidanc": 99, "labels_str": 99, "datalab_str": 99, "labels_int": 99, "remap": 99, "datalab_int": 99, "my_dict": 99, "pet_nam": 99, "rover": 99, "rocki": 99, "speci": 99, "datalab_dataset": 99, "number_of_class": 99, "total_number_of_data_point": 99, "feed": 99, "alphabet": 99, "labels_proper_format": 99, "your_classifi": 99, "issues_datafram": 99, "class_predicted_for_flagged_exampl": 99, "class_predicted_for_all_exampl": 99, "grant": 99, "On": [99, 100, 101, 105], "merged_dataset": 99, "label_column_nam": 99, "datataset": 99, "fair": [99, 101], "game": 99, "speedup": [99, 106], "tempfil": 99, "mkdtemp": 99, "sped": 99, "anywai": 99, "pred_probs_merg": 99, "merge_rare_class": 99, "count_threshold": 99, "class_mapping_orig2new": 99, "heath_summari": 99, "num_examples_per_class": 99, "rare_class": 99, "num_classes_merg": 99, "other_class": 99, "labels_merg": 99, "new_c": 99, "merged_prob": 99, "new_class": 99, "original_class": 99, "num_check": 99, "ones_array_ref": 99, "isclos": 99, "though": [99, 101, 110], "successfulli": 99, "virtuou": [99, 103], "cycl": [99, 103], "jointli": 99, "junk": 99, "clutter": 99, "unknown": 99, "caltech": 99, "combined_boolean_mask": 99, "mask1": 99, "mask2": 99, "gradientboostingclassifi": [99, 101], "true_error": [99, 101, 104], "101": [99, 100, 105], "102": [99, 104, 105], "104": [99, 101, 105], "model_to_find_error": 99, "model_to_return": 99, "cl0": 99, "randomizedsearchcv": 99, "expens": 99, "param_distribut": 99, "learning_r": [99, 100, 101], "max_depth": [99, 100, 101], "magnitud": 99, "coeffici": [99, 108], "optin": 99, "environ": [99, 100, 101], "rerun": [99, 100, 101], "cell": [99, 100, 101], "unabl": [99, 100, 101], "render": [99, 100, 101], "nbviewer": [99, 100, 101], "cleanlearninginot": [99, 101], "fittedcleanlearn": [99, 101], "linearregressionlinearregress": 99, "unexpectedli": 99, "emphas": 99, "crucial": 99, "merge_duplicate_set": 99, "merge_kei": 99, "construct_group_kei": 99, "merged_set": 99, "consolidate_set": 99, "issubset": 99, "frozenset": [99, 100], "sets_list": 99, "mutabl": 99, "new_set": 99, "current_set": 99, "intersecting_set": 99, "lowest_score_strategi": 99, "sub_df": 99, "filter_near_dupl": 99, "strategy_fn": 99, "strategy_kwarg": 99, "duplicate_row": 99, "group_kei": 99, "to_keep_indic": 99, "groupbi": 99, "explod": 99, "to_remov": 99, "isin": [99, 106], "kept": 99, "ids_to_remove_seri": 99, "assist": 99, "streamlin": [99, 100], "ux": 99, "agpl": 99, "commerci": 99, "alter": [99, 100], "email": 99, "team": 99, "anywher": 99, "profession": 99, "expert": 99, "recogn": 100, "vital": 100, "leakag": 100, "comparion": 100, "leak": 100, "blueprint": 100, "divers": 100, "parameter": 100, "tldr": 100, "answer": [100, 101], "subtl": 100, "faith": 100, "danger": 100, "inevit": [100, 106], "xgbclassifi": 100, "123456": 100, "df_train": 100, "s3": [100, 105, 109, 110], "amazonaw": [100, 105, 109, 110], "clos_train_data": 100, "df_test": 100, "clos_test_data": 100, "noisy_letter_grad": 100, "018bff": 100, "076d92": 100, "c80059": 100, "e38f8a": 100, "d57e1a": 100, "grade_l": 100, "notes_l": 100, "train_featur": 100, "train_features_v2": 100, "train_labels_v2": 100, "test_featur": 100, "preprocessed_train_data": 100, "preprocessed_test_data": 100, "haven": 100, "features_df": 100, "heterogenou": 100, "full_df": 100, "reset_index": [100, 103], "749": 100, "583745": 100, "291382": 100, "5837": 100, "748": 100, "604": 100, "510": 100, "227": [100, 104, 105], "719": 100, "690": 100, "444": 100, "547": 100, "647": 100, "2914": 100, "611": 100, "687869": 100, "610": 100, "687883": 100, "612": 100, "688146": 100, "609": 100, "688189": 100, "613": 100, "688713": 100, "2913818469137725": 100, "came": [100, 110], "full_duplicate_result": 100, "train_idx_cutoff": 100, "nd_set_has_index_over_training_cutoff": 100, "exact_dupl": 100, "627": 100, "678": 100, "615": 100, "292": 100, "620": 100, "420": 100, "704": 100, "431": 100, "459": 100, "672": 100, "564": 100, "696": 100, "605": 100, "exact_duplicates_indic": 100, "indices_of_duplicates_to_drop": 100, "4a3f75": 100, "d030b5": 100, "ddd0ba": 100, "8e6d24": 100, "464aab": 100, "ee3387": 100, "61e807": 100, "71d7b9": 100, "83e31f": 100, "edeb53": 100, "cd52b5": 100, "84": [100, 105, 108], "454e51": 100, "042686": 100, "12a73f": 100, "tree_method": 100, "hist": [100, 106], "enable_categor": 100, "booster": 100, "callback": 100, "colsample_bylevel": 100, "colsample_bynod": 100, "colsample_bytre": 100, "early_stopping_round": 100, "eval_metr": 100, "feature_typ": 100, "gamma": 100, "grow_polici": 100, "importance_typ": 100, "interaction_constraint": 100, "max_bin": 100, "max_cat_threshold": 100, "max_cat_to_onehot": 100, "max_delta_step": 100, "max_leav": 100, "min_child_weight": 100, "monotone_constraint": 100, "multi_strategi": 100, "n_estim": [100, 101], "num_parallel_tre": 100, "x27": [100, 101], "softprob": 100, "xgbclassifierifittedxgbclassifi": 100, "test_pred_prob": [100, 106], "test_lab": 100, "test_features_arrai": 100, "134": 100, "798507": 100, "370259": 100, "625352": 100, "524042": 100, "097015": 100, "7985": 100, "000537": 100, "000903": 100, "001743": 100, "106": 100, "001853": 100, "002121": 100, "3703": 100, "752463e": 100, "784418e": 100, "09": [100, 104, 105, 108], "477741e": 100, "134230e": 100, "153555e": 100, "6254": 100, "143272": 100, "146501": 100, "161431": 100, "5240": 100, "765240": 100, "771221": 100, "801589": 100, "801652": 100, "810735": 100, "5240417899434826": 100, "0970": 100, "na": [100, 103], "test_label_issue_result": 100, "test_label_issues_ord": 100, "2bd759": 100, "34ccdd": 100, "bb3bab": 100, "103": [100, 101, 105], "bf1b14": 100, "4787de": 100, "865cbd": 100, "32d53f": 100, "5b2f76": 100, "28f8b4": 100, "df814d": 100, "f17261": 100, "1db3ff": 100, "ded944": 100, "124": [100, 105], "343dd3": 100, "homework": [100, 108], "8d904d": 100, "e4f0d5": 100, "d6d208": 100, "76c083": 100, "695f96": 100, "745c23": 100, "13b36e": 100, "5ba892": 100, "9f0216": 100, "003628": 100, "004006": 100, "004031": 100, "007930": 100, "013226": 100, "015255": 100, "017692": 100, "019767": 100, "036197": 100, "054746": 100, "055110": 100, "062675": 100, "112695": 100, "121059": 100, "171280": 100, "181689": 100, "208001": 100, "275028": 100, "346032": 100, "396350": 100, "401493": 100, "474349": 100, "mislead": 100, "breviti": 100, "indices_to_drop_from_test_data": 100, "df_test_clean": 100, "acc_origin": 100, "tediou": 100, "train_features_arrai": 100, "train_lab": 100, "318": [100, 108], "601": 100, "740433": 100, "344154": 100, "588290": 100, "437267": 100, "146423": 100, "977223": 100, "7404": 100, "162": 100, "000072": 100, "348": 100, "000161": 100, "232": [100, 105], "000256": 100, "205": [100, 105], "000458": 100, "000738": 100, "3442": 100, "588": 100, "358961e": 100, "336": [100, 105], "490911e": 100, "269": 100, "122475e": 100, "321": [100, 105], "374139e": 100, "311": 100, "358617e": 100, "5883": 100, "600": 100, "592": 100, "593": 100, "594": 100, "595": 100, "596": 100, "597": 100, "598": 100, "599": 100, "221": 100, "222": [100, 101], "315": 100, "332": [100, 105], "791060e": 100, "243": [100, 105], "540": 100, "379106e": 100, "396": 100, "397": 100, "398": 100, "399": 100, "4373": 100, "165": [100, 104], "550374": 100, "627357": 100, "627496": 100, "627502": 100, "627919": 100, "43726734378061227": 100, "1464": 100, "506": 100, "393": 100, "508": 100, "9772": 100, "402": 100, "401": 100, "aggress": 100, "faithfulli": 100, "label_issue_result": 100, "566": 100, "568": 100, "571": 100, "572": 100, "574": 100, "576": 100, "578": 100, "585": 100, "587": 100, "590": 100, "near_duplicates_idx": 100, "117": [100, 101, 108], "122": [100, 101, 105], "146": 100, "155": [100, 101, 105], "156": [100, 101], "173": [100, 105], "224": [100, 105], "272": 100, "277": [100, 105], "279": [100, 105], "300": [100, 103, 110], "342": 100, "352": 100, "363": 100, "365": 100, "366": 100, "384": 100, "388": 100, "394": 100, "404": 100, "474": 100, "480": 100, "494": 100, "515": 100, "536": 100, "537": 100, "539": 100, "542": 100, "outliers_idx": 100, "143": [100, 104, 105, 110], "159": [100, 104, 105], "163": [100, 101], "193": [100, 101], "194": [100, 101], "208": 100, "240": [100, 105], "241": 100, "242": [100, 105], "247": [100, 105], "287": [100, 105], "295": [100, 105], "299": [100, 105], "307": [100, 105], "350": 100, "361": 100, "378": 100, "379": 100, "392": 100, "419": 100, "432": 100, "479": 100, "484": 100, "485": 100, "489": 100, "492": 100, "504": 100, "511": 100, "522": 100, "535": 100, "543": 100, "567": 100, "579": 100, "591": 100, "idx_to_drop": 100, "276": [100, 105], "df_train_cur": 100, "clean_clf": 100, "clean_pr": 100, "acc_clean": 100, "inaccur": 100, "hybrid": 100, "quantit": 100, "hyper": 100, "default_edit_param": 100, "drop_label_issu": 100, "drop_outli": 100, "drop_near_dupl": 100, "candid": [100, 105], "edit_data": 100, "percentag": [100, 101], "num_label_issues_to_drop": 100, "num_outliers_to_drop": 100, "dedupl": 100, "unique_clust": 100, "unique_clusters_list": 100, "near_duplicates_idx_to_drop": 100, "n_drop": 100, "label_issues_idx_to_drop": 100, "outliers_idx_to_drop": 100, "train_features_clean": 100, "train_labels_clean": 100, "itertool": 100, "finer": 100, "param_combin": 100, "best_scor": 100, "best_param": 100, "train_features_preprocess": 100, "train_labels_preprocess": 100, "depth": 101, "survei": [101, 110], "scienc": 101, "multivariate_norm": [101, 103, 104], "make_data": [101, 103], "cov": [101, 103, 104], "avg_trac": [101, 104], "py_tru": 101, "noise_matrix_tru": 101, "noise_marix": 101, "s_test": 101, "noisy_test_label": 101, "purpl": 101, "namespac": 101, "exec": 101, "markerfacecolor": [101, 104], "markeredgecolor": [101, 104, 108], "markers": [101, 104, 108], "markeredgewidth": [101, 104, 108], "realist": 101, "7560": 101, "637318e": 101, "896262e": 101, "548391e": 101, "923417e": 101, "375075e": 101, "3454": 101, "014051": 101, "020451": 101, "249": [101, 105], "042594": 101, "043859": 101, "045954": 101, "6120": 101, "023714": 101, "007136": 101, "119": [101, 105], "107266": 101, "033738": 101, "238": [101, 105], "119505": 101, "236": [101, 105], "037843": 101, "614915": 101, "624422": 101, "625965": 101, "626079": 101, "118": 101, "627675": 101, "695223": 101, "323529": 101, "523015": 101, "013720": 101, "675727": 101, "646521": 101, "magic": 101, "liter": 101, "identif": 101, "logisticregressionlogisticregress": 101, "ever": 101, "092": 101, "040": 101, "024": 101, "004": 101, "surpris": 101, "1705": 101, "01936": 101, "ton": 101, "yourfavoritemodel1": 101, "merged_label": 101, "merged_test_label": 101, "newli": [101, 103], "yourfavoritemodel2": 101, "yourfavoritemodel3": 101, "cl3": 101, "takeawai": 101, "my_test_pred_prob": 101, "my_test_pr": 101, "issues_test": 101, "corrected_test_label": 101, "pretend": 101, "cl_test_pr": 101, "fairli": 101, "label_acc": 101, "offset": 101, "nquestion": 101, "overestim": 101, "experienc": 101, "prioiri": 101, "known": 101, "versatil": 101, "label_issues_indic": 101, "213": [101, 105], "218": [101, 105], "152": 101, "170": 101, "214": 101, "164": [101, 104], "191": [101, 105], "206": [101, 105], "115": [101, 105], "201": [101, 105], "174": 101, "150": [101, 103, 105], "169": 101, "151": [101, 105], "168": 101, "precision_scor": 101, "recall_scor": 101, "f1_score": 101, "true_label_issu": 101, "filter_by_list": 101, "718750": [101, 103], "807018": 101, "912": 101, "733333": 101, "800000": 101, "721311": 101, "792793": 101, "908": 101, "676923": 101, "765217": 101, "892": 101, "567901": 101, "702290": 101, "844": 101, "gaug": 101, "label_issues_count": 101, "172": [101, 104], "157": 101, "easiest": 101, "modular": 101, "penalti": 101, "l2": 101, "model3": 101, "cv_pred_probs_1": 101, "cv_pred_probs_2": 101, "cv_pred_probs_3": 101, "label_quality_scores_best": 101, "cv_pred_probs_ensembl": 101, "label_quality_scores_bett": 101, "superior": [101, 107], "timm": 102, "glad": 103, "multiannotator_label": 103, "noisier": 103, "local_data": [103, 104], "true_labels_train": [103, 104], "noise_matrix_bett": 103, "noise_matrix_wors": 103, "transpos": [103, 106], "zfill": 103, "row_na_check": 103, "notna": 103, "a0001": 103, "a0002": 103, "a0003": 103, "a0004": 103, "a0005": 103, "a0006": 103, "a0007": 103, "a0008": 103, "a0009": 103, "a0010": 103, "a0041": 103, "a0042": 103, "a0043": 103, "a0044": 103, "a0045": 103, "a0046": 103, "a0047": 103, "a0048": 103, "a0049": 103, "a0050": 103, "60856743": 103, "41693214": 103, "40908785": 103, "87147629": 103, "64941785": 103, "10774851": 103, "0524466": 103, "71853246": 103, "37169848": 103, "66031048": 103, "multiannotator_util": 103, "crude": 103, "straight": 103, "majority_vote_label": 103, "736118": 103, "757751": 103, "782232": 103, "715565": 103, "824256": 103, "quality_annotator_a0001": 103, "quality_annotator_a0002": 103, "quality_annotator_a0003": 103, "quality_annotator_a0004": 103, "quality_annotator_a0005": 103, "quality_annotator_a0006": 103, "quality_annotator_a0007": 103, "quality_annotator_a0008": 103, "quality_annotator_a0009": 103, "quality_annotator_a0010": 103, "quality_annotator_a0041": 103, "quality_annotator_a0042": 103, "quality_annotator_a0043": 103, "quality_annotator_a0044": 103, "quality_annotator_a0045": 103, "quality_annotator_a0046": 103, "quality_annotator_a0047": 103, "quality_annotator_a0048": 103, "quality_annotator_a0049": 103, "quality_annotator_a0050": 103, "070564": 103, "216078": 103, "119188": 103, "alongisd": 103, "244981": 103, "208333": 103, "295979": 103, "294118": 103, "324197": 103, "310345": 103, "355316": 103, "346154": 103, "439732": 103, "480000": 103, "a0031": 103, "523205": 103, "580645": 103, "a0034": 103, "535313": 103, "607143": 103, "a0021": 103, "606999": 103, "a0015": 103, "609526": 103, "678571": 103, "a0011": 103, "621103": 103, "692308": 103, "improved_consensus_label": 103, "majority_vote_accuraci": 103, "cleanlab_label_accuraci": 103, "8581081081081081": 103, "9797297297297297": 103, "besid": 103, "sorted_consensus_quality_scor": 103, "worst_qual": 103, "better_qu": 103, "worst_quality_accuraci": 103, "better_quality_accuraci": 103, "9893238434163701": 103, "improved_pred_prob": 103, "treat": [103, 104, 108, 110], "analzi": 103, "copyright": 104, "advertis": 104, "violenc": 104, "nsfw": 104, "celeba": 104, "make_multilabel_data": 104, "boxes_coordin": 104, "box_multilabel": 104, "make_multi": 104, "bx1": 104, "by1": 104, "bx2": 104, "by2": 104, "label_list": 104, "ur": 104, "upper": 104, "inidx": 104, "logical_and": 104, "inv_d": 104, "labels_idx": 104, "true_labels_test": 104, "dict_unique_label": 104, "get_color_arrai": 104, "dcolor": 104, "aa4400": 104, "55227f": 104, "55a100": 104, "00ff00": 104, "007f7f": 104, "386b55": 104, "0000ff": 104, "y_onehot": 104, "single_class_label": 104, "stratifi": [104, 107], "kf": 104, "train_index": 104, "test_index": 104, "clf_cv": 104, "x_train_cv": 104, "x_test_cv": 104, "y_train_cv": 104, "y_test_cv": 104, "y_pred_cv": 104, "saw": 104, "num_to_displai": 104, "275": 104, "267": 104, "225": 104, "171": 104, "234": [104, 110], "262": [104, 105], "263": [104, 105], "266": [104, 105], "139": 104, "216": [104, 105, 110], "265": 104, "despit": [104, 110], "suspect": 104, "888": 104, "8224": 104, "9632": 104, "968": 104, "6512": 104, "0444": 104, "774": 104, "labels_binary_format": 104, "labels_list_format": 104, "surround": 105, "scene": 105, "coco": 105, "everydai": 105, "has_label_issu": 105, "objectdetectionbenchmark": 105, "tutorial_obj": 105, "pkl": 105, "example_imag": 105, "_separate_label": 105, "_separate_predict": 105, "begin": 105, "image_path": 105, "rb": 105, "image_to_visu": 105, "seg_map": 105, "334": 105, "bboxes_ignor": 105, "290": 105, "286": 105, "285": 105, "231": 105, "293": 105, "235": 105, "289": 105, "282": 105, "281": 105, "271": 105, "280": 105, "326": 105, "333": 105, "261": 105, "319": 105, "257": 105, "283": 105, "303": 105, "316": 105, "323": 105, "327": 105, "226": 105, "228": 105, "219": 105, "239": 105, "209": 105, "202": 105, "230": 105, "215": 105, "220": 105, "229": 105, "217": [105, 110], "237": 105, "207": 105, "204": 105, "223": 105, "149": 105, "140": 105, "246": 105, "268": 105, "273": 105, "284": 105, "136": 105, "145": 105, "297": 105, "317": 105, "192": 105, "324": 105, "203": 105, "320": 105, "314": 105, "291": 105, "000000481413": 105, "jpg": 105, "42398": 105, "44503": 105, "29968": 105, "21005": 105, "9978472": 105, "forgot": 105, "drew": 105, "label_issue_idx": 105, "num_examples_to_show": 105, "138": 105, "97489622": 105, "70610878": 105, "98764951": 105, "88899237": 105, "99085805": 105, "issue_idx": 105, "95569726e": 105, "03354841e": 105, "57510169e": 105, "58447666e": 105, "39755858e": 105, "issue_to_visu": 105, "000000009483": 105, "95569726168054e": 105, "addition": [105, 109], "visibl": 105, "missmatch": 105, "likelei": 105, "agnost": 105, "vaidat": 105, "inconsist": 105, "000000395701": 105, "033548411774308e": 105, "armchair": 105, "tv": 105, "000000154004": 105, "38300759625496356": 105, "foreground": 105, "000000448410": 105, "0008575101690203273": 105, "crowd": 105, "alon": 105, "resembl": [105, 106], "000000499768": 105, "9748962231208227": 105, "000000521141": 105, "8889923658893665": 105, "000000143931": 105, "9876495074395956": 105, "bonu": 105, "uncov": 105, "irregular": 105, "object_detection_util": 105, "calculate_bounding_box_area": 105, "num_imgs_to_show": 105, "lab_object_count": 105, "pred_object_count": 105, "000000430073": 105, "000000183709": 105, "000000189475": 105, "label_norm": 105, "pred_norm": 105, "area": [105, 109], "lab_area": 105, "pred_area": 105, "lab_area_mean": 105, "lab_area_std": 105, "max_deviation_valu": 105, "max_deviation_class": 105, "deviation_valu": 105, "deviation_class": 105, "mean_area": 105, "std_area": 105, "class_area": 105, "deviations_awai": 105, "max_deviation_index": 105, "num_imgs_to_show_per_class": 105, "class_num": 105, "000000422886": 105, "000000341828": 105, "000000461009": 105, "train_feature_embed": 106, "ood_train_feature_scor": 106, "test_feature_embed": 106, "ood_test_feature_scor": 106, "ood_train_predictions_scor": 106, "train_pred_prob": 106, "ood_test_predictions_scor": 106, "pylab": 106, "rcparam": 106, "baggingclassifi": 106, "therebi": 106, "rescal": 106, "transform_norm": 106, "totensor": 106, "animal_class": 106, "non_animal_class": 106, "animal_idx": 106, "test_idx": 106, "toronto": 106, "edu": 106, "kriz": 106, "170498071": 106, "41892687": 106, "37it": 106, "plot_imag": 106, "visualize_outli": 106, "txt_class": 106, "npimg": 106, "show_label": 106, "data_subset": 106, "resnet50": 106, "corpu": 106, "2048": 106, "embed_imag": 106, "create_model": 106, "strang": 106, "odd": 106, "train_ood_features_scor": 106, "top_train_ood_features_idx": 106, "fun": 106, "negat": 106, "homogen": 106, "bottom_train_ood_features_idx": 106, "test_ood_features_scor": 106, "top_ood_features_idx": 106, "trade": 106, "5th": 106, "percentil": 106, "fifth_percentil": 106, "plt_rang": 106, "train_outlier_scor": 106, "test_outlier_scor": 106, "ood_features_indic": 106, "revisit": 106, "return_invers": 106, "train_feature_embeddings_sc": 106, "test_feature_embeddings_sc": 106, "train_pred_label": 106, "9702": 106, "train_ood_predictions_scor": 106, "test_ood_predictions_scor": 106, "lost": 106, "unsuit": 107, "convention": 107, "aforement": 107, "hypothet": 107, "contrast": 107, "tradit": 107, "disjoint": 107, "out_of_sample_pred_probs_for_a": 107, "out_of_sample_pred_probs_for_b": 107, "out_of_sample_pred_probs_for_c": 107, "out_of_sample_pred_prob": 107, "unsur": 107, "price": 108, "incom": 108, "sensor": 108, "histgradientboostingregressor": 108, "r2_score": 108, "student_grades_r": 108, "final_scor": 108, "true_final_scor": 108, "3d": 108, "mpl_toolkit": 108, "mplot3d": 108, "axes3d": 108, "errors_idx": 108, "add_subplot": 108, "z": 108, "errors_mask": 108, "feature_column": 108, "predicted_column": 108, "x_train_raw": 108, "x_test_raw": 108, "randomforestregressor": 108, "385101": 108, "499503": 108, "698255": 108, "776647": 108, "109373": 108, "170547": 108, "481096": 108, "984759": 108, "645270": 108, "795928": 108, "141": 108, "659": 108, "367": 108, "305": 108, "560": 108, "657": 108, "view_datapoint": 108, "preds_og": 108, "r2_og": 108, "838": 108, "found_label_issu": 108, "preds_cl": 108, "r2_cl": 108, "926": 108, "favorit": 108, "968627e": 108, "228799": 108, "646674e": 108, "402962": 108, "323818e": 108, "952758": 108, "422144e": 108, "456908": 108, "465815e": 108, "753968": 108, "791186e": 108, "110719": 108, "485156e": 108, "670640": 108, "225300e": 108, "749976": 108, "499679e": 108, "947007": 108, "067882e": 108, "648396": 108, "synthia": 109, "imagesegment": 109, "given_mask": 109, "predicted_mask": 109, "set_printopt": [109, 110], "sky": 109, "sidewalk": 109, "veget": 109, "terrain": 109, "rider": 109, "pred_probs_filepath": 109, "1088": 109, "1920": 109, "label_filepath": 109, "synthia_class": 109, "maunal": 109, "100000": 109, "244800": 109, "leftmost": 109, "middl": [109, 110], "infact": 109, "rightmost": 109, "discrep": 109, "3263230": 109, "783381": 109, "275110": 109, "255917": 109, "78225": 109, "55990": 109, "54315": 109, "33591": 109, "24645": 109, "21054": 109, "15045": 109, "14171": 109, "13832": 109, "13498": 109, "11490": 109, "9164": 109, "8769": 109, "6999": 109, "6031": 109, "5011": 109, "mistakenli": 109, "class_issu": 109, "aim": [109, 110], "domin": 109, "bunch": 110, "conll": 110, "2003": 110, "love": 110, "n_i": 110, "optional_list_of_ordered_class_nam": 110, "deepai": 110, "conll2003": 110, "rm": 110, "tokenclassif": 110, "179": 110, "2400": 110, "52e0": 110, "1a01": 110, "982975": 110, "960k": 110, "959": 110, "94k": 110, "inflat": 110, "114": 110, "17045998": 110, "16m": 110, "octet": 110, "26m": 110, "1mb": 110, "bert": 110, "read_npz": 110, "filepath": 110, "corrsespond": 110, "iob2": 110, "given_ent": 110, "entity_map": 110, "readfil": 110, "startswith": 110, "docstart": 110, "isalpha": 110, "isupp": 110, "indices_to_preview": 110, "nsentenc": 110, "eu": 110, "reject": 110, "boycott": 110, "british": 110, "lamb": 110, "00030412": 110, "00023826": 110, "99936208": 110, "00007009": 110, "00002545": 110, "99998795": 110, "00000401": 110, "00000218": 110, "00000455": 110, "00000131": 110, "00000749": 110, "99996115": 110, "00001371": 110, "0000087": 110, "00000895": 110, "99998936": 110, "00000382": 110, "00000178": 110, "00000366": 110, "00000137": 110, "99999101": 110, "00000266": 110, "00000174": 110, "0000035": 110, "00000109": 110, "99998768": 110, "00000482": 110, "00000202": 110, "00000438": 110, "0000011": 110, "00000465": 110, "99996392": 110, "00001105": 110, "0000116": 110, "00000878": 110, "99998671": 110, "00000364": 110, "00000213": 110, "00000472": 110, "00000281": 110, "99999073": 110, "00000211": 110, "00000159": 110, "00000442": 110, "00000115": 110, "peter": 110, "blackburn": 110, "00000358": 110, "00000529": 110, "99995623": 110, "0000129": 110, "0000024": 110, "00001812": 110, "99994141": 110, "00001645": 110, "00002162": 110, "brussel": 110, "1996": 110, "00001172": 110, "00000821": 110, "00004661": 110, "0000618": 110, "99987167": 110, "99999061": 110, "00000201": 110, "00000195": 110, "00000408": 110, "00000135": 110, "2254": 110, "2907": 110, "19392": 110, "9962": 110, "8904": 110, "19303": 110, "12918": 110, "9256": 110, "11855": 110, "18392": 110, "20426": 110, "19402": 110, "14744": 110, "19371": 110, "4645": 110, "10331": 110, "9430": 110, "6143": 110, "18367": 110, "12914": 110, "todai": 110, "weather": 110, "march": 110, "scalfaro": 110, "northern": 110, "himself": 110, "said": 110, "germani": 110, "nastja": 110, "rysich": 110, "north": 110, "spla": 110, "fought": 110, "khartoum": 110, "govern": 110, "south": 110, "1983": 110, "autonomi": 110, "animist": 110, "region": 110, "moslem": 110, "arabis": 110, "mayor": 110, "antonio": 110, "gonzalez": 110, "garcia": 110, "revolutionari": 110, "wednesdai": 110, "troop": 110, "raid": 110, "farm": 110, "stole": 110, "rape": 110, "women": 110, "spring": 110, "chg": 110, "hrw": 110, "12pct": 110, "princ": 110, "photo": 110, "moment": 110, "spokeswoman": 110, "rainier": 110, "told": 110, "reuter": 110, "danila": 110, "carib": 110, "w224": 110, "equip": 110, "radiomet": 110, "earn": 110, "19996": 110, "london": 110, "denom": 110, "sale": 110, "uk": 110, "jp": 110, "fr": 110, "maccabi": 110, "hapoel": 110, "haifa": 110, "tel": 110, "aviv": 110, "hospit": 110, "rever": 110, "roman": 110, "cathol": 110, "nun": 110, "admit": 110, "calcutta": 110, "week": 110, "ago": 110, "fever": 110, "vomit": 110, "allianc": 110, "embattl": 110, "kabul": 110, "salang": 110, "highwai": 110, "mondai": 110, "tuesdai": 110, "suprem": 110, "council": 110, "led": 110, "jumbish": 110, "milli": 110, "movement": 110, "warlord": 110, "abdul": 110, "rashid": 110, "dostum": 110, "dollar": 110, "exchang": 110, "3570": 110, "12049": 110, "born": 110, "1937": 110, "provinc": 110, "anhui": 110, "dai": 110, "shanghai": 110, "citi": 110, "prolif": 110, "author": 110, "teacher": 110, "chines": 110, "16764": 110, "1990": 110, "historian": 110, "alan": 110, "john": 110, "percival": 110, "taylor": 110, "di": 110, "20446": 110, "pace": 110, "bowler": 110, "ian": 110, "harvei": 110, "claim": 110, "victoria": 110, "15514": 110, "cotti": 110, "osc": 110, "foreign": 110, "minist": 110, "7525": 110, "sultan": 110, "specter": 110, "crown": 110, "abdullah": 110, "defenc": 110, "aviat": 110, "jeddah": 110, "saudi": 110, "agenc": 110, "2288": 110, "hi": 110, "customari": 110, "outfit": 110, "champion": 110, "damp": 110, "scalp": 110, "canada": 110, "reign": 110, "olymp": 110, "donovan": 110, "bailei": 110, "1992": 110, "linford": 110, "christi": 110, "britain": 110, "1984": 110, "1988": 110, "carl": 110, "lewi": 110, "ambigi": 110, "punctuat": 110, "chicago": 110, "digest": 110, "philadelphia": 110, "usda": 110, "york": 110, "token_issu": 110, "471": 110, "kean": 110, "year": 110, "contract": 110, "manchest": 110, "19072": 110, "societi": 110, "bite": 110, "deliv": 110, "19910": 110, "father": 110, "clarenc": 110, "woolmer": 110, "renam": 110, "uttar": 110, "pradesh": 110, "india": 110, "ranji": 110, "trophi": 110, "nation": 110, "championship": 110, "captain": 110, "1949": 110, "15658": 110, "19879": 110, "iii": 110, "brian": 110, "shimer": 110, "randi": 110, "jone": 110, "19104": 110}, "objects": {"cleanlab": [[0, 0, 0, "-", "benchmarking"], [2, 0, 0, "-", "classification"], [3, 0, 0, "-", "count"], [4, 0, 0, "-", "data_valuation"], [12, 0, 0, "-", "datalab"], [39, 0, 0, "-", "dataset"], [42, 0, 0, "-", "experimental"], [46, 0, 0, "-", "filter"], [47, 0, 0, "-", "internal"], [61, 0, 0, "-", "models"], [63, 0, 0, "-", "multiannotator"], [66, 0, 0, "-", "multilabel_classification"], [69, 0, 0, "-", "object_detection"], [72, 0, 0, "-", "outlier"], [73, 0, 0, "-", "rank"], [74, 0, 0, "-", "regression"], [78, 0, 0, "-", "segmentation"], [82, 0, 0, "-", "token_classification"]], "cleanlab.benchmarking": [[1, 0, 0, "-", "noise_generation"]], "cleanlab.benchmarking.noise_generation": [[1, 1, 1, "", "generate_n_rand_probabilities_that_sum_to_m"], [1, 1, 1, "", "generate_noise_matrix_from_trace"], [1, 1, 1, "", "generate_noisy_labels"], [1, 1, 1, "", "noise_matrix_is_valid"], [1, 1, 1, "", "randomly_distribute_N_balls_into_K_bins"]], "cleanlab.classification": [[2, 2, 1, "", "CleanLearning"]], "cleanlab.classification.CleanLearning": [[2, 3, 1, "", "__init_subclass__"], [2, 3, 1, "", "find_label_issues"], [2, 3, 1, "", "fit"], [2, 3, 1, "", "get_label_issues"], [2, 3, 1, "", "get_metadata_routing"], [2, 3, 1, "", "get_params"], [2, 3, 1, "", "predict"], [2, 3, 1, "", "predict_proba"], [2, 3, 1, "", "save_space"], [2, 3, 1, "", "score"], [2, 3, 1, "", "set_fit_request"], [2, 3, 1, "", "set_params"], [2, 3, 1, "", "set_score_request"]], "cleanlab.count": [[3, 1, 1, "", "calibrate_confident_joint"], [3, 1, 1, "", "compute_confident_joint"], [3, 1, 1, "", "estimate_confident_joint_and_cv_pred_proba"], [3, 1, 1, "", "estimate_cv_predicted_probabilities"], [3, 1, 1, "", "estimate_joint"], [3, 1, 1, "", "estimate_latent"], [3, 1, 1, "", "estimate_noise_matrices"], [3, 1, 1, "", "estimate_py_and_noise_matrices_from_probabilities"], [3, 1, 1, "", "estimate_py_noise_matrices_and_cv_pred_proba"], [3, 1, 1, "", "get_confident_thresholds"], [3, 1, 1, "", "num_label_issues"]], "cleanlab.data_valuation": [[4, 1, 1, "", "data_shapley_knn"]], "cleanlab.datalab": [[5, 0, 0, "-", "datalab"], [18, 0, 0, "-", "internal"]], "cleanlab.datalab.datalab": [[5, 2, 1, "", "Datalab"]], "cleanlab.datalab.datalab.Datalab": [[5, 4, 1, "", "class_names"], [5, 3, 1, "", "find_issues"], [5, 3, 1, "", "get_info"], [5, 3, 1, "", "get_issue_summary"], [5, 3, 1, "", "get_issues"], [5, 4, 1, "", "has_labels"], [5, 4, 1, "", "info"], [5, 4, 1, "", "issue_summary"], [5, 4, 1, "", "issues"], [5, 4, 1, "", "labels"], [5, 3, 1, "", "list_default_issue_types"], [5, 3, 1, "", "list_possible_issue_types"], [5, 3, 1, "", "load"], [5, 3, 1, "", "report"], [5, 3, 1, "", "save"]], "cleanlab.datalab.internal.adapter": [[13, 0, 0, "-", "imagelab"]], "cleanlab.datalab.internal.adapter.imagelab": [[13, 2, 1, "", "CorrelationReporter"], [13, 2, 1, "", "CorrelationVisualizer"], [13, 2, 1, "", "ImagelabDataIssuesAdapter"], [13, 2, 1, "", "ImagelabIssueFinderAdapter"], [13, 2, 1, "", "ImagelabReporterAdapter"], [13, 1, 1, "", "create_imagelab"], [13, 1, 1, "", "handle_spurious_correlations"]], "cleanlab.datalab.internal.adapter.imagelab.CorrelationReporter": [[13, 3, 1, "", "report"]], "cleanlab.datalab.internal.adapter.imagelab.CorrelationVisualizer": [[13, 3, 1, "", "visualize"]], "cleanlab.datalab.internal.adapter.imagelab.ImagelabDataIssuesAdapter": [[13, 3, 1, "", "collect_issues_from_imagelab"], [13, 3, 1, "", "collect_issues_from_issue_manager"], [13, 3, 1, "", "collect_statistics"], [13, 3, 1, "", "filter_based_on_max_prevalence"], [13, 3, 1, "", "get_info"], [13, 3, 1, "", "get_issue_summary"], [13, 3, 1, "", "get_issues"], [13, 3, 1, "", "set_health_score"], [13, 4, 1, "", "statistics"]], "cleanlab.datalab.internal.adapter.imagelab.ImagelabIssueFinderAdapter": [[13, 3, 1, "", "find_issues"], [13, 3, 1, "", "get_available_issue_types"]], "cleanlab.datalab.internal.adapter.imagelab.ImagelabReporterAdapter": [[13, 3, 1, "", "get_report"], [13, 3, 1, "", "report"]], "cleanlab.datalab.internal": [[15, 0, 0, "-", "data"], [16, 0, 0, "-", "data_issues"], [19, 0, 0, "-", "issue_finder"], [17, 0, 0, "-", "issue_manager_factory"], [35, 0, 0, "-", "model_outputs"], [36, 0, 0, "-", "report"], [37, 0, 0, "-", "task"]], "cleanlab.datalab.internal.data": [[15, 2, 1, "", "Data"], [15, 5, 1, "", "DataFormatError"], [15, 5, 1, "", "DatasetDictError"], [15, 5, 1, "", "DatasetLoadError"], [15, 2, 1, "", "Label"], [15, 2, 1, "", "MultiClass"], [15, 2, 1, "", "MultiLabel"]], "cleanlab.datalab.internal.data.Data": [[15, 4, 1, "", "class_names"], [15, 4, 1, "", "has_labels"]], "cleanlab.datalab.internal.data.DataFormatError": [[15, 3, 1, "", "add_note"], [15, 6, 1, "", "args"], [15, 3, 1, "", "with_traceback"]], "cleanlab.datalab.internal.data.DatasetDictError": [[15, 3, 1, "", "add_note"], [15, 6, 1, "", "args"], [15, 3, 1, "", "with_traceback"]], "cleanlab.datalab.internal.data.DatasetLoadError": [[15, 3, 1, "", "add_note"], [15, 6, 1, "", "args"], [15, 3, 1, "", "with_traceback"]], "cleanlab.datalab.internal.data.Label": [[15, 4, 1, "", "class_names"], [15, 4, 1, "", "is_available"]], "cleanlab.datalab.internal.data.MultiClass": [[15, 4, 1, "", "class_names"], [15, 4, 1, "", "is_available"]], "cleanlab.datalab.internal.data.MultiLabel": [[15, 4, 1, "", "class_names"], [15, 4, 1, "", "is_available"]], "cleanlab.datalab.internal.data_issues": [[16, 2, 1, "", "DataIssues"], [16, 1, 1, "", "get_data_statistics"]], "cleanlab.datalab.internal.data_issues.DataIssues": [[16, 3, 1, "", "collect_issues_from_imagelab"], [16, 3, 1, "", "collect_issues_from_issue_manager"], [16, 3, 1, "", "collect_statistics"], [16, 3, 1, "", "get_info"], [16, 3, 1, "", "get_issue_summary"], [16, 3, 1, "", "get_issues"], [16, 6, 1, "", "info"], [16, 6, 1, "", "issue_summary"], [16, 6, 1, "", "issues"], [16, 3, 1, "", "set_health_score"], [16, 4, 1, "", "statistics"]], "cleanlab.datalab.internal.issue_finder": [[19, 2, 1, "", "IssueFinder"]], "cleanlab.datalab.internal.issue_finder.IssueFinder": [[19, 3, 1, "", "find_issues"], [19, 3, 1, "", "get_available_issue_types"]], "cleanlab.datalab.internal.issue_manager": [[21, 0, 0, "-", "data_valuation"], [22, 0, 0, "-", "duplicate"], [23, 0, 0, "-", "imbalance"], [25, 0, 0, "-", "issue_manager"], [26, 0, 0, "-", "label"], [29, 0, 0, "-", "noniid"], [30, 0, 0, "-", "null"], [31, 0, 0, "-", "outlier"], [34, 0, 0, "-", "underperforming_group"]], "cleanlab.datalab.internal.issue_manager.data_valuation": [[21, 2, 1, "", "DataValuationIssueManager"]], "cleanlab.datalab.internal.issue_manager.data_valuation.DataValuationIssueManager": [[21, 6, 1, "", "DEFAULT_THRESHOLD"], [21, 3, 1, "", "collect_info"], [21, 6, 1, "", "description"], [21, 3, 1, "", "find_issues"], [21, 6, 1, "", "info"], [21, 6, 1, "", "issue_name"], [21, 6, 1, "", "issue_score_key"], [21, 6, 1, "", "issues"], [21, 3, 1, "", "make_summary"], [21, 3, 1, "", "report"], [21, 6, 1, "", "summary"], [21, 6, 1, "", "verbosity_levels"]], "cleanlab.datalab.internal.issue_manager.duplicate": [[22, 2, 1, "", "NearDuplicateIssueManager"]], "cleanlab.datalab.internal.issue_manager.duplicate.NearDuplicateIssueManager": [[22, 3, 1, "", "collect_info"], [22, 6, 1, "", "description"], [22, 3, 1, "", "find_issues"], [22, 6, 1, "", "info"], [22, 6, 1, "", "issue_name"], [22, 6, 1, "", "issue_score_key"], [22, 6, 1, "", "issues"], [22, 3, 1, "", "make_summary"], [22, 6, 1, "", "near_duplicate_sets"], [22, 3, 1, "", "report"], [22, 6, 1, "", "summary"], [22, 6, 1, "", "verbosity_levels"]], "cleanlab.datalab.internal.issue_manager.imbalance": [[23, 2, 1, "", "ClassImbalanceIssueManager"]], "cleanlab.datalab.internal.issue_manager.imbalance.ClassImbalanceIssueManager": [[23, 3, 1, "", "collect_info"], [23, 6, 1, "", "description"], [23, 3, 1, "", "find_issues"], [23, 6, 1, "", "info"], [23, 6, 1, "", "issue_name"], [23, 6, 1, "", "issue_score_key"], [23, 6, 1, "", "issues"], [23, 3, 1, "", "make_summary"], [23, 3, 1, "", "report"], [23, 6, 1, "", "summary"], [23, 6, 1, "", "verbosity_levels"]], "cleanlab.datalab.internal.issue_manager.issue_manager": [[25, 2, 1, "", "IssueManager"]], "cleanlab.datalab.internal.issue_manager.issue_manager.IssueManager": [[25, 3, 1, "", "collect_info"], [25, 6, 1, "", "description"], [25, 3, 1, "", "find_issues"], [25, 6, 1, "", "info"], [25, 6, 1, "", "issue_name"], [25, 6, 1, "", "issue_score_key"], [25, 6, 1, "", "issues"], [25, 3, 1, "", "make_summary"], [25, 3, 1, "", "report"], [25, 6, 1, "", "summary"], [25, 6, 1, "", "verbosity_levels"]], "cleanlab.datalab.internal.issue_manager.label": [[26, 2, 1, "", "LabelIssueManager"]], "cleanlab.datalab.internal.issue_manager.label.LabelIssueManager": [[26, 3, 1, "", "collect_info"], [26, 6, 1, "", "description"], [26, 3, 1, "", "find_issues"], [26, 3, 1, "", "get_health_summary"], [26, 6, 1, "", "health_summary_parameters"], [26, 6, 1, "", "info"], [26, 6, 1, "", "issue_name"], [26, 6, 1, "", "issue_score_key"], [26, 6, 1, "", "issues"], [26, 3, 1, "", "make_summary"], [26, 3, 1, "", "report"], [26, 6, 1, "", "summary"], [26, 6, 1, "", "verbosity_levels"]], "cleanlab.datalab.internal.issue_manager.multilabel": [[28, 0, 0, "-", "label"]], "cleanlab.datalab.internal.issue_manager.multilabel.label": [[28, 2, 1, "", "MultilabelIssueManager"]], "cleanlab.datalab.internal.issue_manager.multilabel.label.MultilabelIssueManager": [[28, 3, 1, "", "collect_info"], [28, 6, 1, "", "description"], [28, 3, 1, "", "find_issues"], [28, 6, 1, "", "info"], [28, 6, 1, "", "issue_name"], [28, 6, 1, "", "issue_score_key"], [28, 6, 1, "", "issues"], [28, 3, 1, "", "make_summary"], [28, 3, 1, "", "report"], [28, 6, 1, "", "summary"], [28, 6, 1, "", "verbosity_levels"]], "cleanlab.datalab.internal.issue_manager.noniid": [[29, 2, 1, "", "NonIIDIssueManager"], [29, 1, 1, "", "simplified_kolmogorov_smirnov_test"]], "cleanlab.datalab.internal.issue_manager.noniid.NonIIDIssueManager": [[29, 3, 1, "", "collect_info"], [29, 6, 1, "", "description"], [29, 3, 1, "", "find_issues"], [29, 6, 1, "", "info"], [29, 6, 1, "", "issue_name"], [29, 6, 1, "", "issue_score_key"], [29, 6, 1, "", "issues"], [29, 3, 1, "", "make_summary"], [29, 3, 1, "", "report"], [29, 6, 1, "", "summary"], [29, 6, 1, "", "verbosity_levels"]], "cleanlab.datalab.internal.issue_manager.null": [[30, 2, 1, "", "NullIssueManager"]], "cleanlab.datalab.internal.issue_manager.null.NullIssueManager": [[30, 3, 1, "", "collect_info"], [30, 6, 1, "", "description"], [30, 3, 1, "", "find_issues"], [30, 6, 1, "", "info"], [30, 6, 1, "", "issue_name"], [30, 6, 1, "", "issue_score_key"], [30, 6, 1, "", "issues"], [30, 3, 1, "", "make_summary"], [30, 3, 1, "", "report"], [30, 6, 1, "", "summary"], [30, 6, 1, "", "verbosity_levels"]], "cleanlab.datalab.internal.issue_manager.outlier": [[31, 2, 1, "", "OutlierIssueManager"]], "cleanlab.datalab.internal.issue_manager.outlier.OutlierIssueManager": [[31, 6, 1, "", "DEFAULT_THRESHOLDS"], [31, 3, 1, "", "collect_info"], [31, 6, 1, "", "description"], [31, 3, 1, "", "find_issues"], [31, 6, 1, "", "info"], [31, 6, 1, "", "issue_name"], [31, 6, 1, "", "issue_score_key"], [31, 6, 1, "", "issues"], [31, 3, 1, "", "make_summary"], [31, 6, 1, "", "metric"], [31, 6, 1, "", "ood"], [31, 3, 1, "", "report"], [31, 6, 1, "", "summary"], [31, 6, 1, "", "verbosity_levels"]], "cleanlab.datalab.internal.issue_manager.regression": [[33, 0, 0, "-", "label"]], "cleanlab.datalab.internal.issue_manager.regression.label": [[33, 2, 1, "", "RegressionLabelIssueManager"], [33, 1, 1, "", "find_issues_with_features"], [33, 1, 1, "", "find_issues_with_predictions"]], "cleanlab.datalab.internal.issue_manager.regression.label.RegressionLabelIssueManager": [[33, 3, 1, "", "collect_info"], [33, 6, 1, "", "description"], [33, 3, 1, "", "find_issues"], [33, 6, 1, "", "info"], [33, 6, 1, "", "issue_name"], [33, 6, 1, "", "issue_score_key"], [33, 6, 1, "", "issues"], [33, 3, 1, "", "make_summary"], [33, 3, 1, "", "report"], [33, 6, 1, "", "summary"], [33, 6, 1, "", "verbosity_levels"]], "cleanlab.datalab.internal.issue_manager.underperforming_group": [[34, 2, 1, "", "UnderperformingGroupIssueManager"]], "cleanlab.datalab.internal.issue_manager.underperforming_group.UnderperformingGroupIssueManager": [[34, 6, 1, "", "NO_UNDERPERFORMING_CLUSTER_ID"], [34, 6, 1, "", "OUTLIER_CLUSTER_LABELS"], [34, 3, 1, "", "collect_info"], [34, 6, 1, "", "description"], [34, 3, 1, "", "filter_cluster_ids"], [34, 3, 1, "", "find_issues"], [34, 3, 1, "", "get_underperforming_clusters"], [34, 6, 1, "", "info"], [34, 6, 1, "", "issue_name"], [34, 6, 1, "", "issue_score_key"], [34, 6, 1, "", "issues"], [34, 3, 1, "", "make_summary"], [34, 3, 1, "", "perform_clustering"], [34, 3, 1, "", "report"], [34, 6, 1, "", "summary"], [34, 6, 1, "", "verbosity_levels"]], "cleanlab.datalab.internal.issue_manager_factory": [[17, 7, 1, "", "REGISTRY"], [17, 1, 1, "", "list_default_issue_types"], [17, 1, 1, "", "list_possible_issue_types"], [17, 1, 1, "", "register"]], "cleanlab.datalab.internal.model_outputs": [[35, 2, 1, "", "ModelOutput"], [35, 2, 1, "", "MultiClassPredProbs"], [35, 2, 1, "", "MultiLabelPredProbs"], [35, 2, 1, "", "RegressionPredictions"]], "cleanlab.datalab.internal.model_outputs.ModelOutput": [[35, 3, 1, "", "collect"], [35, 6, 1, "", "data"], [35, 3, 1, "", "validate"]], "cleanlab.datalab.internal.model_outputs.MultiClassPredProbs": [[35, 6, 1, "", "argument"], [35, 3, 1, "", "collect"], [35, 6, 1, "", "data"], [35, 3, 1, "", "validate"]], "cleanlab.datalab.internal.model_outputs.MultiLabelPredProbs": [[35, 6, 1, "", "argument"], [35, 3, 1, "", "collect"], [35, 6, 1, "", "data"], [35, 3, 1, "", "validate"]], "cleanlab.datalab.internal.model_outputs.RegressionPredictions": [[35, 6, 1, "", "argument"], [35, 3, 1, "", "collect"], [35, 6, 1, "", "data"], [35, 3, 1, "", "validate"]], "cleanlab.datalab.internal.report": [[36, 2, 1, "", "Reporter"]], "cleanlab.datalab.internal.report.Reporter": [[36, 3, 1, "", "get_report"], [36, 3, 1, "", "report"]], "cleanlab.datalab.internal.task": [[37, 2, 1, "", "Task"]], "cleanlab.datalab.internal.task.Task": [[37, 6, 1, "", "CLASSIFICATION"], [37, 6, 1, "", "MULTILABEL"], [37, 6, 1, "", "REGRESSION"], [37, 3, 1, "", "__contains__"], [37, 3, 1, "", "__getitem__"], [37, 3, 1, "", "__iter__"], [37, 3, 1, "", "__len__"], [37, 3, 1, "", "from_str"], [37, 4, 1, "", "is_classification"], [37, 4, 1, "", "is_multilabel"], [37, 4, 1, "", "is_regression"]], "cleanlab.dataset": [[39, 1, 1, "", "find_overlapping_classes"], [39, 1, 1, "", "health_summary"], [39, 1, 1, "", "overall_label_health_score"], [39, 1, 1, "", "rank_classes_by_label_quality"]], "cleanlab.experimental": [[40, 0, 0, "-", "cifar_cnn"], [41, 0, 0, "-", "coteaching"], [43, 0, 0, "-", "label_issues_batched"], [44, 0, 0, "-", "mnist_pytorch"], [45, 0, 0, "-", "span_classification"]], "cleanlab.experimental.cifar_cnn": [[40, 2, 1, "", "CNN"], [40, 1, 1, "", "call_bn"]], "cleanlab.experimental.cifar_cnn.CNN": [[40, 6, 1, "", "T_destination"], [40, 3, 1, "", "__call__"], [40, 3, 1, "", "add_module"], [40, 3, 1, "", "apply"], [40, 3, 1, "", "bfloat16"], [40, 3, 1, "", "buffers"], [40, 6, 1, "", "call_super_init"], [40, 3, 1, "", "children"], [40, 3, 1, "", "compile"], [40, 3, 1, "", "cpu"], [40, 3, 1, "", "cuda"], [40, 3, 1, "", "double"], [40, 6, 1, "", "dump_patches"], [40, 3, 1, "", "eval"], [40, 3, 1, "", "extra_repr"], [40, 3, 1, "", "float"], [40, 3, 1, "id0", "forward"], [40, 3, 1, "", "get_buffer"], [40, 3, 1, "", "get_extra_state"], [40, 3, 1, "", "get_parameter"], [40, 3, 1, "", "get_submodule"], [40, 3, 1, "", "half"], [40, 3, 1, "", "ipu"], [40, 3, 1, "", "load_state_dict"], [40, 3, 1, "", "modules"], [40, 3, 1, "", "named_buffers"], [40, 3, 1, "", "named_children"], [40, 3, 1, "", "named_modules"], [40, 3, 1, "", "named_parameters"], [40, 3, 1, "", "parameters"], [40, 3, 1, "", "register_backward_hook"], [40, 3, 1, "", "register_buffer"], [40, 3, 1, "", "register_forward_hook"], [40, 3, 1, "", "register_forward_pre_hook"], [40, 3, 1, "", "register_full_backward_hook"], [40, 3, 1, "", "register_full_backward_pre_hook"], [40, 3, 1, "", "register_load_state_dict_post_hook"], [40, 3, 1, "", "register_module"], [40, 3, 1, "", "register_parameter"], [40, 3, 1, "", "register_state_dict_pre_hook"], [40, 3, 1, "", "requires_grad_"], [40, 3, 1, "", "set_extra_state"], [40, 3, 1, "", "share_memory"], [40, 3, 1, "", "state_dict"], [40, 3, 1, "", "to"], [40, 3, 1, "", "to_empty"], [40, 3, 1, "", "train"], [40, 6, 1, "", "training"], [40, 3, 1, "", "type"], [40, 3, 1, "", "xpu"], [40, 3, 1, "", "zero_grad"]], "cleanlab.experimental.coteaching": [[41, 1, 1, "", "adjust_learning_rate"], [41, 1, 1, "", "evaluate"], [41, 1, 1, "", "forget_rate_scheduler"], [41, 1, 1, "", "initialize_lr_scheduler"], [41, 1, 1, "", "loss_coteaching"], [41, 1, 1, "", "train"]], "cleanlab.experimental.label_issues_batched": [[43, 2, 1, "", "LabelInspector"], [43, 7, 1, "", "adj_confident_thresholds_shared"], [43, 1, 1, "", "find_label_issues_batched"], [43, 7, 1, "", "labels_shared"], [43, 7, 1, "", "pred_probs_shared"], [43, 1, 1, "", "split_arr"]], "cleanlab.experimental.label_issues_batched.LabelInspector": [[43, 3, 1, "", "get_confident_thresholds"], [43, 3, 1, "", "get_label_issues"], [43, 3, 1, "", "get_num_issues"], [43, 3, 1, "", "get_quality_scores"], [43, 3, 1, "", "score_label_quality"], [43, 3, 1, "", "update_confident_thresholds"]], "cleanlab.experimental.mnist_pytorch": [[44, 2, 1, "", "CNN"], [44, 2, 1, "", "SimpleNet"], [44, 1, 1, "", "get_mnist_dataset"], [44, 1, 1, "", "get_sklearn_digits_dataset"]], "cleanlab.experimental.mnist_pytorch.CNN": [[44, 3, 1, "", "__init_subclass__"], [44, 6, 1, "", "batch_size"], [44, 6, 1, "", "dataset"], [44, 6, 1, "", "epochs"], [44, 3, 1, "id0", "fit"], [44, 3, 1, "", "get_metadata_routing"], [44, 3, 1, "", "get_params"], [44, 6, 1, "", "loader"], [44, 6, 1, "", "log_interval"], [44, 6, 1, "", "lr"], [44, 6, 1, "", "momentum"], [44, 6, 1, "", "no_cuda"], [44, 3, 1, "id1", "predict"], [44, 3, 1, "id4", "predict_proba"], [44, 6, 1, "", "seed"], [44, 3, 1, "", "set_fit_request"], [44, 3, 1, "", "set_params"], [44, 3, 1, "", "set_predict_proba_request"], [44, 3, 1, "", "set_predict_request"], [44, 6, 1, "", "test_batch_size"]], "cleanlab.experimental.mnist_pytorch.SimpleNet": [[44, 6, 1, "", "T_destination"], [44, 3, 1, "", "__call__"], [44, 3, 1, "", "add_module"], [44, 3, 1, "", "apply"], [44, 3, 1, "", "bfloat16"], [44, 3, 1, "", "buffers"], [44, 6, 1, "", "call_super_init"], [44, 3, 1, "", "children"], [44, 3, 1, "", "compile"], [44, 3, 1, "", "cpu"], [44, 3, 1, "", "cuda"], [44, 3, 1, "", "double"], [44, 6, 1, "", "dump_patches"], [44, 3, 1, "", "eval"], [44, 3, 1, "", "extra_repr"], [44, 3, 1, "", "float"], [44, 3, 1, "", "forward"], [44, 3, 1, "", "get_buffer"], [44, 3, 1, "", "get_extra_state"], [44, 3, 1, "", "get_parameter"], [44, 3, 1, "", "get_submodule"], [44, 3, 1, "", "half"], [44, 3, 1, "", "ipu"], [44, 3, 1, "", "load_state_dict"], [44, 3, 1, "", "modules"], [44, 3, 1, "", "named_buffers"], [44, 3, 1, "", "named_children"], [44, 3, 1, "", "named_modules"], [44, 3, 1, "", "named_parameters"], [44, 3, 1, "", "parameters"], [44, 3, 1, "", "register_backward_hook"], [44, 3, 1, "", "register_buffer"], [44, 3, 1, "", "register_forward_hook"], [44, 3, 1, "", "register_forward_pre_hook"], [44, 3, 1, "", "register_full_backward_hook"], [44, 3, 1, "", "register_full_backward_pre_hook"], [44, 3, 1, "", "register_load_state_dict_post_hook"], [44, 3, 1, "", "register_module"], [44, 3, 1, "", "register_parameter"], [44, 3, 1, "", "register_state_dict_pre_hook"], [44, 3, 1, "", "requires_grad_"], [44, 3, 1, "", "set_extra_state"], [44, 3, 1, "", "share_memory"], [44, 3, 1, "", "state_dict"], [44, 3, 1, "", "to"], [44, 3, 1, "", "to_empty"], [44, 3, 1, "", "train"], [44, 6, 1, "", "training"], [44, 3, 1, "", "type"], [44, 3, 1, "", "xpu"], [44, 3, 1, "", "zero_grad"]], "cleanlab.experimental.span_classification": [[45, 1, 1, "", "display_issues"], [45, 1, 1, "", "find_label_issues"], [45, 1, 1, "", "get_label_quality_scores"]], "cleanlab.filter": [[46, 1, 1, "", "find_label_issues"], [46, 1, 1, "", "find_label_issues_using_argmax_confusion_matrix"], [46, 1, 1, "", "find_predicted_neq_given"], [46, 7, 1, "", "pred_probs_by_class"], [46, 7, 1, "", "prune_count_matrix_cols"]], "cleanlab.internal": [[48, 0, 0, "-", "label_quality_utils"], [49, 0, 0, "-", "latent_algebra"], [50, 0, 0, "-", "multiannotator_utils"], [51, 0, 0, "-", "multilabel_scorer"], [52, 0, 0, "-", "multilabel_utils"], [53, 0, 0, "-", "neighbor"], [57, 0, 0, "-", "outlier"], [58, 0, 0, "-", "token_classification_utils"], [59, 0, 0, "-", "util"], [60, 0, 0, "-", "validation"]], "cleanlab.internal.label_quality_utils": [[48, 1, 1, "", "get_normalized_entropy"]], "cleanlab.internal.latent_algebra": [[49, 1, 1, "", "compute_inv_noise_matrix"], [49, 1, 1, "", "compute_noise_matrix_from_inverse"], [49, 1, 1, "", "compute_ps_py_inv_noise_matrix"], [49, 1, 1, "", "compute_py"], [49, 1, 1, "", "compute_py_inv_noise_matrix"], [49, 1, 1, "", "compute_pyx"]], "cleanlab.internal.multiannotator_utils": [[50, 1, 1, "", "assert_valid_inputs_multiannotator"], [50, 1, 1, "", "assert_valid_pred_probs"], [50, 1, 1, "", "check_consensus_label_classes"], [50, 1, 1, "", "compute_soft_cross_entropy"], [50, 1, 1, "", "find_best_temp_scaler"], [50, 1, 1, "", "format_multiannotator_labels"], [50, 1, 1, "", "temp_scale_pred_probs"]], "cleanlab.internal.multilabel_scorer": [[51, 2, 1, "", "Aggregator"], [51, 2, 1, "", "ClassLabelScorer"], [51, 2, 1, "", "MultilabelScorer"], [51, 1, 1, "", "exponential_moving_average"], [51, 1, 1, "", "get_cross_validated_multilabel_pred_probs"], [51, 1, 1, "", "get_label_quality_scores"], [51, 1, 1, "", "multilabel_py"], [51, 1, 1, "", "softmin"]], "cleanlab.internal.multilabel_scorer.Aggregator": [[51, 3, 1, "", "__call__"], [51, 6, 1, "", "possible_methods"]], "cleanlab.internal.multilabel_scorer.ClassLabelScorer": [[51, 6, 1, "", "CONFIDENCE_WEIGHTED_ENTROPY"], [51, 6, 1, "", "NORMALIZED_MARGIN"], [51, 6, 1, "", "SELF_CONFIDENCE"], [51, 3, 1, "", "__call__"], [51, 3, 1, "", "__contains__"], [51, 3, 1, "", "__getitem__"], [51, 3, 1, "", "__iter__"], [51, 3, 1, "", "__len__"], [51, 3, 1, "", "from_str"]], "cleanlab.internal.multilabel_scorer.MultilabelScorer": [[51, 3, 1, "", "__call__"], [51, 3, 1, "", "aggregate"], [51, 3, 1, "", "get_class_label_quality_scores"]], "cleanlab.internal.multilabel_utils": [[52, 1, 1, "", "get_onehot_num_classes"], [52, 1, 1, "", "int2onehot"], [52, 1, 1, "", "onehot2int"], [52, 1, 1, "", "stack_complement"]], "cleanlab.internal.neighbor": [[54, 0, 0, "-", "knn_graph"], [55, 0, 0, "-", "metric"], [56, 0, 0, "-", "search"]], "cleanlab.internal.neighbor.knn_graph": [[54, 7, 1, "", "DEFAULT_K"], [54, 1, 1, "", "construct_knn_graph_from_index"], [54, 1, 1, "", "correct_knn_distances_and_indices"], [54, 1, 1, "", "correct_knn_distances_and_indices_with_exact_duplicate_sets_inplace"], [54, 1, 1, "", "correct_knn_graph"], [54, 1, 1, "", "create_knn_graph_and_index"], [54, 1, 1, "", "features_to_knn"]], "cleanlab.internal.neighbor.metric": [[55, 7, 1, "", "HIGH_DIMENSION_CUTOFF"], [55, 7, 1, "", "ROW_COUNT_CUTOFF"], [55, 1, 1, "", "decide_default_metric"], [55, 1, 1, "", "decide_euclidean_metric"]], "cleanlab.internal.neighbor.search": [[56, 1, 1, "", "construct_knn"]], "cleanlab.internal.outlier": [[57, 1, 1, "", "correct_precision_errors"], [57, 1, 1, "", "transform_distances_to_scores"]], "cleanlab.internal.token_classification_utils": [[58, 1, 1, "", "color_sentence"], [58, 1, 1, "", "filter_sentence"], [58, 1, 1, "", "get_sentence"], [58, 1, 1, "", "mapping"], [58, 1, 1, "", "merge_probs"], [58, 1, 1, "", "process_token"]], "cleanlab.internal.util": [[59, 1, 1, "", "append_extra_datapoint"], [59, 1, 1, "", "clip_noise_rates"], [59, 1, 1, "", "clip_values"], [59, 1, 1, "", "compress_int_array"], [59, 1, 1, "", "confusion_matrix"], [59, 1, 1, "", "csr_vstack"], [59, 1, 1, "", "estimate_pu_f1"], [59, 1, 1, "", "extract_indices_tf"], [59, 1, 1, "", "force_two_dimensions"], [59, 1, 1, "", "format_labels"], [59, 1, 1, "", "get_missing_classes"], [59, 1, 1, "", "get_num_classes"], [59, 1, 1, "", "get_unique_classes"], [59, 1, 1, "", "is_tensorflow_dataset"], [59, 1, 1, "", "is_torch_dataset"], [59, 1, 1, "", "num_unique_classes"], [59, 1, 1, "", "print_inverse_noise_matrix"], [59, 1, 1, "", "print_joint_matrix"], [59, 1, 1, "", "print_noise_matrix"], [59, 1, 1, "", "print_square_matrix"], [59, 1, 1, "", "remove_noise_from_class"], [59, 1, 1, "", "round_preserving_row_totals"], [59, 1, 1, "", "round_preserving_sum"], [59, 1, 1, "", "smart_display_dataframe"], [59, 1, 1, "", "subset_X_y"], [59, 1, 1, "", "subset_data"], [59, 1, 1, "", "subset_labels"], [59, 1, 1, "", "train_val_split"], [59, 1, 1, "", "unshuffle_tensorflow_dataset"], [59, 1, 1, "", "value_counts"], [59, 1, 1, "", "value_counts_fill_missing_classes"]], "cleanlab.internal.validation": [[60, 1, 1, "", "assert_indexing_works"], [60, 1, 1, "", "assert_nonempty_input"], [60, 1, 1, "", "assert_valid_class_labels"], [60, 1, 1, "", "assert_valid_inputs"], [60, 1, 1, "", "labels_to_array"], [60, 1, 1, "", "labels_to_list_multilabel"]], "cleanlab.models": [[62, 0, 0, "-", "keras"]], "cleanlab.models.keras": [[62, 2, 1, "", "KerasWrapperModel"], [62, 2, 1, "", "KerasWrapperSequential"]], "cleanlab.models.keras.KerasWrapperModel": [[62, 3, 1, "", "fit"], [62, 3, 1, "", "get_params"], [62, 3, 1, "", "predict"], [62, 3, 1, "", "predict_proba"], [62, 3, 1, "", "set_params"], [62, 3, 1, "", "summary"]], "cleanlab.models.keras.KerasWrapperSequential": [[62, 3, 1, "", "fit"], [62, 3, 1, "", "get_params"], [62, 3, 1, "", "predict"], [62, 3, 1, "", "predict_proba"], [62, 3, 1, "", "set_params"], [62, 3, 1, "", "summary"]], "cleanlab.multiannotator": [[63, 1, 1, "", "convert_long_to_wide_dataset"], [63, 1, 1, "", "get_active_learning_scores"], [63, 1, 1, "", "get_active_learning_scores_ensemble"], [63, 1, 1, "", "get_label_quality_multiannotator"], [63, 1, 1, "", "get_label_quality_multiannotator_ensemble"], [63, 1, 1, "", "get_majority_vote_label"]], "cleanlab.multilabel_classification": [[64, 0, 0, "-", "dataset"], [65, 0, 0, "-", "filter"], [67, 0, 0, "-", "rank"]], "cleanlab.multilabel_classification.dataset": [[64, 1, 1, "", "common_multilabel_issues"], [64, 1, 1, "", "multilabel_health_summary"], [64, 1, 1, "", "overall_multilabel_health_score"], [64, 1, 1, "", "rank_classes_by_multilabel_quality"]], "cleanlab.multilabel_classification.filter": [[65, 1, 1, "", "find_label_issues"], [65, 1, 1, "", "find_multilabel_issues_per_class"]], "cleanlab.multilabel_classification.rank": [[67, 1, 1, "", "get_label_quality_scores"], [67, 1, 1, "", "get_label_quality_scores_per_class"]], "cleanlab.object_detection": [[68, 0, 0, "-", "filter"], [70, 0, 0, "-", "rank"], [71, 0, 0, "-", "summary"]], "cleanlab.object_detection.filter": [[68, 1, 1, "", "find_label_issues"]], "cleanlab.object_detection.rank": [[70, 1, 1, "", "compute_badloc_box_scores"], [70, 1, 1, "", "compute_overlooked_box_scores"], [70, 1, 1, "", "compute_swap_box_scores"], [70, 1, 1, "", "get_label_quality_scores"], [70, 1, 1, "", "issues_from_scores"], [70, 1, 1, "", "pool_box_scores_per_image"]], "cleanlab.object_detection.summary": [[71, 1, 1, "", "bounding_box_size_distribution"], [71, 1, 1, "", "calculate_per_class_metrics"], [71, 1, 1, "", "class_label_distribution"], [71, 1, 1, "", "get_average_per_class_confusion_matrix"], [71, 1, 1, "", "get_sorted_bbox_count_idxs"], [71, 1, 1, "", "object_counts_per_image"], [71, 1, 1, "", "plot_class_distribution"], [71, 1, 1, "", "plot_class_size_distributions"], [71, 1, 1, "", "visualize"]], "cleanlab.outlier": [[72, 2, 1, "", "OutOfDistribution"]], "cleanlab.outlier.OutOfDistribution": [[72, 3, 1, "", "fit"], [72, 3, 1, "", "fit_score"], [72, 3, 1, "", "score"]], "cleanlab.rank": [[73, 1, 1, "", "find_top_issues"], [73, 1, 1, "", "get_confidence_weighted_entropy_for_each_label"], [73, 1, 1, "", "get_label_quality_ensemble_scores"], [73, 1, 1, "", "get_label_quality_scores"], [73, 1, 1, "", "get_normalized_margin_for_each_label"], [73, 1, 1, "", "get_self_confidence_for_each_label"], [73, 1, 1, "", "order_label_issues"]], "cleanlab.regression": [[75, 0, 0, "-", "learn"], [76, 0, 0, "-", "rank"]], "cleanlab.regression.learn": [[75, 2, 1, "", "CleanLearning"]], "cleanlab.regression.learn.CleanLearning": [[75, 3, 1, "", "__init_subclass__"], [75, 3, 1, "", "find_label_issues"], [75, 3, 1, "", "fit"], [75, 3, 1, "", "get_aleatoric_uncertainty"], [75, 3, 1, "", "get_epistemic_uncertainty"], [75, 3, 1, "", "get_label_issues"], [75, 3, 1, "", "get_metadata_routing"], [75, 3, 1, "", "get_params"], [75, 3, 1, "", "predict"], [75, 3, 1, "", "save_space"], [75, 3, 1, "", "score"], [75, 3, 1, "", "set_fit_request"], [75, 3, 1, "", "set_params"], [75, 3, 1, "", "set_score_request"]], "cleanlab.regression.rank": [[76, 1, 1, "", "get_label_quality_scores"]], "cleanlab.segmentation": [[77, 0, 0, "-", "filter"], [79, 0, 0, "-", "rank"], [80, 0, 0, "-", "summary"]], "cleanlab.segmentation.filter": [[77, 1, 1, "", "find_label_issues"]], "cleanlab.segmentation.rank": [[79, 1, 1, "", "get_label_quality_scores"], [79, 1, 1, "", "issues_from_scores"]], "cleanlab.segmentation.summary": [[80, 1, 1, "", "common_label_issues"], [80, 1, 1, "", "display_issues"], [80, 1, 1, "", "filter_by_class"]], "cleanlab.token_classification": [[81, 0, 0, "-", "filter"], [83, 0, 0, "-", "rank"], [84, 0, 0, "-", "summary"]], "cleanlab.token_classification.filter": [[81, 1, 1, "", "find_label_issues"]], "cleanlab.token_classification.rank": [[83, 1, 1, "", "get_label_quality_scores"], [83, 1, 1, "", "issues_from_scores"]], "cleanlab.token_classification.summary": [[84, 1, 1, "", "common_label_issues"], [84, 1, 1, "", "display_issues"], [84, 1, 1, "", "filter_by_token"]]}, "objtypes": {"0": "py:module", "1": "py:function", "2": "py:class", "3": "py:method", "4": "py:property", "5": "py:exception", "6": "py:attribute", "7": "py:data"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "function", "Python function"], "2": ["py", "class", "Python class"], "3": ["py", "method", "Python method"], "4": ["py", "property", "Python property"], "5": ["py", "exception", "Python exception"], "6": ["py", "attribute", "Python attribute"], "7": ["py", "data", "Python data"]}, "titleterms": {"benchmark": 0, "noise_gener": 1, "classif": [2, 88, 89, 93, 95, 96, 99, 101, 104, 110], "count": [3, 101], "data_valu": [4, 21], "datalab": [5, 7, 9, 10, 12, 90, 91, 92, 93, 94, 95, 96, 97, 99, 101, 104], "creat": [7, 91, 92, 101, 103], "your": [7, 85, 91, 92, 96, 97, 99, 101], "own": 7, "issu": [7, 9, 10, 24, 33, 85, 88, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 104, 105, 109, 110], "manag": [7, 24], "prerequisit": 7, "implement": 7, "issuemanag": [7, 91], "basic": 7, "check": [7, 85, 97, 100], "intermedi": 7, "advanc": [7, 91], "us": [7, 88, 89, 90, 92, 93, 95, 96, 97, 99, 100, 101, 103, 104, 105, 106, 108, 109, 110], "gener": [8, 97], "cluster": [8, 97, 99], "id": 8, "guid": [9, 12], "type": [9, 10, 101], "custom": [9, 91], "cleanlab": [9, 10, 85, 88, 89, 90, 93, 95, 96, 99, 101, 103, 104, 105, 106, 108, 109, 110], "studio": [9, 10], "easi": [9, 10, 85, 93], "mode": [9, 10, 85, 93], "can": [10, 92, 98, 99, 101, 103], "detect": [10, 90, 92, 93, 95, 96, 97, 99, 101, 105, 106], "estim": [10, 101, 103, 104], "each": 10, "input": 10, "label": [10, 26, 28, 33, 85, 88, 89, 90, 92, 93, 95, 96, 98, 99, 101, 103, 104, 105, 108, 109, 110], "is_label_issu": 10, "label_scor": 10, "given_label": 10, "predicted_label": 10, "outlier": [10, 31, 57, 72, 93, 95, 96, 104, 106], "is_outlier_issu": 10, "outlier_scor": 10, "Near": [10, 92, 93, 95, 96], "duplic": [10, 22, 92, 93, 95, 96, 99, 104], "is_near_duplicate_issu": 10, "near_duplicate_scor": 10, "near_duplicate_set": 10, "distance_to_nearest_neighbor": 10, "non": [10, 96, 97], "iid": [10, 96, 97], "is_non_iid_issu": 10, "non_iid_scor": 10, "class": [10, 86, 97, 101, 109], "imbal": [10, 23, 97], "is_class_imbalance_issu": 10, "class_imbalance_scor": 10, "imag": [10, 93, 97, 106], "specif": [10, 24, 109], "spuriou": [10, 97], "correl": [10, 97], "between": 10, "properti": 10, "score": [10, 97, 101, 103, 104, 105, 109, 110], "underperform": [10, 97, 99], "group": [10, 97, 99], "is_underperforming_group_issu": 10, "underperforming_group_scor": 10, "null": [10, 30, 97], "is_null_issu": 10, "null_scor": 10, "data": [10, 15, 85, 88, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110], "valuat": [10, 97], "is_data_valuation_issu": 10, "data_valuation_scor": 10, "identifi": [10, 97, 99, 100, 105], "column": [10, 95], "option": [10, 97], "paramet": [10, 101], "get": [12, 91, 92, 103, 104, 105, 109, 110], "start": [12, 98], "api": 12, "refer": 12, "imagelab": 13, "adapt": 14, "data_issu": 16, "factori": 17, "intern": [18, 47], "issue_find": 19, "issue_manag": [24, 25], "regist": 24, "ml": [24, 99, 100, 101], "task": [24, 37], "multilabel": 27, "noniid": 29, "regress": [32, 74, 75, 76, 99, 108], "prioriti": 33, "order": 33, "find": [33, 88, 89, 90, 92, 93, 95, 96, 97, 99, 101, 103, 104, 105, 106, 108, 109, 110], "underperforming_group": 34, "model_output": 35, "report": [36, 93], "dataset": [39, 64, 85, 89, 90, 92, 93, 96, 97, 98, 99, 101, 104, 105, 106, 108, 109, 110], "cifar_cnn": 40, "coteach": 41, "experiment": 42, "label_issues_batch": 43, "mnist_pytorch": 44, "span_classif": 45, "filter": [46, 65, 68, 77, 81, 101], "label_quality_util": 48, "latent_algebra": 49, "multiannotator_util": 50, "multilabel_scor": 51, "multilabel_util": 52, "neighbor": 53, "knn_graph": 54, "metric": 55, "search": [56, 91], "token_classification_util": 58, "util": 59, "valid": [60, 93, 107], "model": [61, 85, 88, 89, 90, 93, 95, 96, 99, 100, 101, 103, 104, 105, 106, 108], "kera": 62, "multiannot": [63, 103], "multilabel_classif": 66, "rank": [67, 70, 73, 76, 79, 83, 101], "object_detect": 69, "summari": [71, 80, 84], "learn": [75, 92, 99, 101], "segment": [78, 109], "token_classif": [82, 110], "open": [85, 99], "sourc": [85, 99], "document": 85, "quickstart": 85, "1": [85, 86, 88, 89, 90, 91, 92, 93, 95, 96, 97, 100, 101, 103, 104, 105, 106, 108, 109, 110], "instal": [85, 88, 89, 90, 91, 92, 93, 95, 96, 98, 100, 101, 103, 104, 105, 106, 108, 109, 110], "2": [85, 86, 88, 89, 90, 91, 92, 93, 95, 96, 97, 100, 101, 103, 104, 105, 106, 108, 109, 110], "all": [85, 92, 101], "sort": [85, 97], "3": [85, 88, 89, 90, 91, 92, 93, 95, 96, 97, 100, 101, 103, 104, 105, 106, 108, 109, 110], "handl": [85, 99], "error": [85, 89, 93, 99, 101, 103, 104, 105, 108, 109, 110], "train": [85, 88, 89, 90, 97, 99, 100, 106, 108], "robust": [85, 88, 89, 101, 108], "noisi": [85, 88, 89, 100, 101, 108], "4": [85, 88, 89, 90, 91, 92, 93, 95, 96, 97, 100, 101, 103, 105, 106, 108], "curat": [85, 100], "fix": [85, 99], "level": [85, 98, 101, 110], "5": [85, 88, 90, 92, 93, 95, 97, 100, 101, 103, 108], "improv": [85, 100, 103], "via": [85, 100, 101, 103], "mani": [85, 101], "other": [85, 103, 105, 108], "techniqu": [85, 100], "contribut": 85, "how": [86, 99, 101, 103, 104, 110], "migrat": 86, "version": 86, "0": 86, "from": [86, 88, 89, 91, 92, 100, 101, 108], "pre": [86, 90, 97, 99, 106], "function": [86, 91], "name": 86, "chang": 86, "modul": [86, 101], "new": 86, "remov": 86, "common": [86, 110], "argument": [86, 91], "variabl": 86, "cleanlearn": [87, 99, 101], "tutori": [87, 94, 98, 100, 102], "structur": 88, "tabular": [88, 95], "requir": [88, 89, 91, 92, 93, 95, 96, 103, 104, 105, 106, 108, 109, 110], "depend": [88, 89, 90, 91, 92, 93, 95, 96, 98, 100, 101, 103, 104, 105, 106, 108, 109, 110], "load": [88, 89, 90, 91, 92, 95, 96, 97, 108], "process": [88, 95, 106, 108], "select": [88, 95], "comput": [88, 90, 93, 95, 96, 97, 99, 100, 103, 107], "out": [88, 90, 91, 92, 93, 95, 96, 100, 103, 107], "sampl": [88, 90, 91, 92, 93, 95, 96, 100, 103, 107], "predict": [88, 90, 91, 92, 93, 95, 96, 97, 100, 103, 104, 105, 107], "probabl": [88, 90, 91, 92, 93, 95, 96, 97, 100, 103, 107], "more": [88, 89, 92, 101, 108], "spend": [88, 89, 92, 95, 96, 98, 101, 104, 106, 107, 108], "too": [88, 89, 92, 95, 96, 98, 101, 104, 106, 107, 108], "much": [88, 89, 92, 95, 96, 98, 101, 104, 106, 107, 108], "time": [88, 89, 92, 95, 96, 98, 101, 104, 106, 107, 108], "qualiti": [88, 89, 92, 95, 96, 98, 101, 103, 104, 105, 106, 107, 108, 109, 110], "text": [89, 96, 97, 110], "format": [89, 96, 99, 104, 105], "defin": [89, 93, 96, 97, 108], "potenti": [89, 103, 108], "an": [90, 93, 99], "audio": 90, "import": [90, 91, 92, 93, 98, 101, 103], "them": [90, 98, 100, 101], "speechbrain": 90, "featur": [90, 93, 106], "fit": 90, "linear": 90, "workflow": [91, 97, 101], "audit": [91, 92], "classifi": [91, 92, 97], "instanti": 91, "object": [91, 105], "increment": 91, "specifi": [91, 99], "nondefault": 91, "save": 91, "ad": 91, "A": 92, "unifi": 92, "kind": [92, 105], "skip": [92, 98, 101, 103], "detail": [92, 98, 101, 103], "about": 92, "addit": 92, "inform": [92, 93], "fetch": [93, 98], "normal": 93, "fashion": 93, "mnist": 93, "prepar": [93, 97], "k": [93, 95, 107], "fold": [93, 107], "cross": [93, 107], "embed": [93, 106], "7": [93, 100, 101], "view": 93, "most": [93, 110], "like": 93, "exampl": [93, 99, 101, 106], "sever": 93, "set": [93, 101], "dark": 93, "top": [93, 109], "low": 93, "numer": 95, "categor": [95, 97], "construct": 95, "nearest": 95, "neighbour": 95, "graph": [95, 97], "drift": [96, 104], "miscellan": 97, "acceler": 97, "knn": 97, "obtain": 97, "explan": 97, "vector": 97, "perform": [97, 100], "visual": [97, 101, 105, 106, 109], "synthet": 97, "result": 97, "predefin": 97, "slice": [97, 99], "i": [97, 99, 101, 107], "run": [97, 99], "test": [97, 99, 100, 101, 106], "assumpt": 97, "understand": [97, 98], "natur": 97, "violat": 97, "catch": 97, "valu": 97, "encod": 97, "initi": [97, 103], "6": [97, 100, 101], "analysi": [97, 105], "interpret": 97, "evalu": [98, 100], "health": [98, 101], "8": [98, 100, 101], "popular": 98, "faq": 99, "what": [99, 101, 107], "do": [99, 101], "infer": 99, "correct": [99, 100], "ha": 99, "flag": 99, "should": 99, "v": [99, 100], "big": 99, "limit": 99, "memori": 99, "why": [99, 100], "isn": 99, "t": 99, "work": [99, 101, 103, 110], "me": 99, "differ": [99, 105], "clean": [99, 100, 101], "final": 99, "hyperparamet": [99, 100], "tune": 99, "onli": 99, "one": [99, 101, 104, 109], "doe": [99, 103, 110], "take": 99, "so": 99, "long": 99, "when": [99, 101], "licens": 99, "under": 99, "answer": 99, "question": 99, "split": 100, "did": 100, "you": [100, 101], "make": 100, "thi": [100, 101], "preprocess": 100, "fundament": 100, "problem": 100, "setup": 100, "origin": 100, "baselin": 100, "manual": 100, "address": 100, "algorithm": 100, "better": [100, 103], "strategi": 100, "optim": 100, "9": 100, "conclus": 100, "The": 101, "centric": 101, "ai": 101, "machin": 101, "find_label_issu": 101, "line": 101, "code": 101, "twenti": 101, "lowest": 101, "see": 101, "now": 101, "let": 101, "": 101, "happen": 101, "we": 101, "merg": 101, "seafoam": 101, "green": 101, "yellow": 101, "re": 101, "One": 101, "rule": 101, "overal": [101, 109], "accur": 101, "directli": 101, "fulli": 101, "character": 101, "nois": 101, "matrix": [101, 104], "joint": 101, "prior": 101, "true": 101, "distribut": 101, "flip": 101, "rate": 101, "ani": 101, "again": 101, "support": 101, "lot": 101, "method": 101, "filter_bi": 101, "automat": 101, "everi": 101, "uniqu": 101, "num_label_issu": 101, "threshold": 101, "found": 101, "Not": 101, "sure": 101, "ensembl": 101, "multipl": [101, 103], "predictor": 101, "consensu": 103, "annot": 103, "major": 103, "vote": 103, "statist": 103, "compar": 103, "inspect": 103, "retrain": 103, "further": 103, "multi": 104, "beyond": 104, "mislabel": [104, 109, 110], "given": 104, "hot": 104, "binari": 104, "without": 104, "applic": 104, "real": 104, "download": [105, 109, 110], "objectlab": 105, "exploratori": 105, "pytorch": 106, "timm": 106, "cifar10": 106, "some": 106, "pred_prob": [106, 109, 110], "wai": 108, "semant": 109, "which": 109, "ar": 109, "commonli": 109, "focus": 109, "token": 110, "word": 110, "sentenc": 110, "contain": 110, "particular": 110}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "nbsphinx": 4, "sphinx.ext.viewcode": 1, "sphinx.ext.todo": 2, "sphinx": 58}, "alltitles": {"benchmarking": [[0, "module-cleanlab.benchmarking"]], "noise_generation": [[1, "module-cleanlab.benchmarking.noise_generation"]], "classification": [[2, "module-cleanlab.classification"]], "count": [[3, "module-cleanlab.count"]], "data_valuation": [[4, "module-cleanlab.data_valuation"], [21, "data-valuation"]], "datalab": [[5, "module-cleanlab.datalab.datalab"], [12, "module-cleanlab.datalab"]], "Creating Your Own Issues Manager": [[7, "creating-your-own-issues-manager"]], "Prerequisites": [[7, "prerequisites"]], "Implementing IssueManagers": [[7, "implementing-issuemanagers"]], "Basic Issue Check": [[7, "basic-issue-check"]], "Intermediate Issue Check": [[7, "intermediate-issue-check"]], "Advanced Issue Check": [[7, "advanced-issue-check"]], "Use with Datalab": [[7, "use-with-datalab"]], "Generating Cluster IDs": [[8, "generating-cluster-ids"]], "Datalab guides": [[9, "datalab-guides"]], "Types of issues": [[9, "types-of-issues"]], "Customizing issue types": [[9, "customizing-issue-types"]], "Cleanlab Studio (Easy Mode)": [[9, "cleanlab-studio-easy-mode"], [10, "cleanlab-studio-easy-mode"]], "Datalab Issue Types": [[10, "datalab-issue-types"]], "Types of issues Datalab can detect": [[10, "types-of-issues-datalab-can-detect"]], "Estimates for Each Issue Type": [[10, "estimates-for-each-issue-type"]], "Inputs to Datalab": [[10, "inputs-to-datalab"]], "Label Issue": [[10, "label-issue"]], "is_label_issue": [[10, "is-label-issue"]], "label_score": [[10, "label-score"]], "given_label": [[10, "given-label"], [10, "id6"]], "predicted_label": [[10, "predicted-label"]], "Outlier Issue": [[10, "outlier-issue"]], "is_outlier_issue": [[10, "is-outlier-issue"]], "outlier_score": [[10, "outlier-score"]], "(Near) Duplicate Issue": [[10, "near-duplicate-issue"]], "is_near_duplicate_issue": [[10, "is-near-duplicate-issue"]], "near_duplicate_score": [[10, "near-duplicate-score"]], "near_duplicate_sets": [[10, "near-duplicate-sets"]], "distance_to_nearest_neighbor": [[10, "distance-to-nearest-neighbor"]], "Non-IID Issue": [[10, "non-iid-issue"]], "is_non_iid_issue": [[10, "is-non-iid-issue"]], "non_iid_score": [[10, "non-iid-score"]], "Class Imbalance Issue": [[10, "class-imbalance-issue"]], "is_class_imbalance_issue": [[10, "is-class-imbalance-issue"]], "class_imbalance_score": [[10, "class-imbalance-score"]], "Image-specific Issues": [[10, "image-specific-issues"]], "Spurious Correlations between image-specific properties and labels": [[10, "spurious-correlations-between-image-specific-properties-and-labels"]], "property": [[10, "property"]], "score": [[10, "score"]], "Underperforming Group Issue": [[10, "underperforming-group-issue"]], "is_underperforming_group_issue": [[10, "is-underperforming-group-issue"]], "underperforming_group_score": [[10, "underperforming-group-score"]], "Null Issue": [[10, "null-issue"]], "is_null_issue": [[10, "is-null-issue"]], "null_score": [[10, "null-score"]], "Data Valuation Issue": [[10, "data-valuation-issue"]], "is_data_valuation_issue": [[10, "is-data-valuation-issue"]], "data_valuation_score": [[10, "data-valuation-score"]], "Identifier Column Issue": [[10, "identifier-column-issue"]], "Optional Issue Parameters": [[10, "optional-issue-parameters"]], "Label Issue Parameters": [[10, "label-issue-parameters"]], "Outlier Issue Parameters": [[10, "outlier-issue-parameters"]], "Duplicate Issue Parameters": [[10, "duplicate-issue-parameters"]], "Non-IID Issue Parameters": [[10, "non-iid-issue-parameters"]], "Imbalance Issue Parameters": [[10, "imbalance-issue-parameters"]], "Underperforming Group Issue Parameters": [[10, "underperforming-group-issue-parameters"]], "Null Issue Parameters": [[10, "null-issue-parameters"]], "Data Valuation Issue Parameters": [[10, "data-valuation-issue-parameters"]], "Identifier Column Parameters": [[10, "identifier-column-parameters"]], "Image Issue Parameters": [[10, "image-issue-parameters"]], "Spurious Correlations Issue Parameters": [[10, "spurious-correlations-issue-parameters"]], "Getting Started": [[12, "getting-started"]], "Guides": [[12, "guides"]], "API Reference": [[12, "api-reference"]], "imagelab": [[13, "module-cleanlab.datalab.internal.adapter.imagelab"]], "adapter": [[14, "adapter"]], "data": [[15, "module-cleanlab.datalab.internal.data"]], "data_issues": [[16, "module-cleanlab.datalab.internal.data_issues"]], "factory": [[17, "module-cleanlab.datalab.internal.issue_manager_factory"]], "internal": [[18, "internal"], [47, "internal"]], "issue_finder": [[19, "issue-finder"]], "duplicate": [[22, "module-cleanlab.datalab.internal.issue_manager.duplicate"]], "imbalance": [[23, "module-cleanlab.datalab.internal.issue_manager.imbalance"]], "issue_manager": [[24, "issue-manager"], [25, "module-cleanlab.datalab.internal.issue_manager.issue_manager"]], "Registered issue managers": [[24, "registered-issue-managers"]], "ML task-specific issue managers": [[24, "ml-task-specific-issue-managers"]], "label": [[26, "module-cleanlab.datalab.internal.issue_manager.label"], [28, "module-cleanlab.datalab.internal.issue_manager.multilabel.label"], [33, "module-cleanlab.datalab.internal.issue_manager.regression.label"]], "multilabel": [[27, "multilabel"]], "noniid": [[29, "module-cleanlab.datalab.internal.issue_manager.noniid"]], "null": [[30, "null"]], "outlier": [[31, "module-cleanlab.datalab.internal.issue_manager.outlier"], [57, "module-cleanlab.internal.outlier"], [72, "module-cleanlab.outlier"]], "regression": [[32, "regression"], [74, "regression"]], "Priority Order for finding issues:": [[33, null]], "underperforming_group": [[34, "underperforming-group"]], "model_outputs": [[35, "module-cleanlab.datalab.internal.model_outputs"]], "report": [[36, "report"]], "task": [[37, "task"]], "dataset": [[39, "module-cleanlab.dataset"], [64, "module-cleanlab.multilabel_classification.dataset"]], "cifar_cnn": [[40, "module-cleanlab.experimental.cifar_cnn"]], "coteaching": [[41, "module-cleanlab.experimental.coteaching"]], "experimental": [[42, "experimental"]], "label_issues_batched": [[43, "module-cleanlab.experimental.label_issues_batched"]], "mnist_pytorch": [[44, "module-cleanlab.experimental.mnist_pytorch"]], "span_classification": [[45, "module-cleanlab.experimental.span_classification"]], "filter": [[46, "module-cleanlab.filter"], [65, "module-cleanlab.multilabel_classification.filter"], [68, "filter"], [77, "filter"], [81, "module-cleanlab.token_classification.filter"]], "label_quality_utils": [[48, "module-cleanlab.internal.label_quality_utils"]], "latent_algebra": [[49, "module-cleanlab.internal.latent_algebra"]], "multiannotator_utils": [[50, "module-cleanlab.internal.multiannotator_utils"]], "multilabel_scorer": [[51, "module-cleanlab.internal.multilabel_scorer"]], "multilabel_utils": [[52, "module-cleanlab.internal.multilabel_utils"]], "neighbor": [[53, "neighbor"]], "knn_graph": [[54, "module-cleanlab.internal.neighbor.knn_graph"]], "metric": [[55, "module-cleanlab.internal.neighbor.metric"]], "search": [[56, "module-cleanlab.internal.neighbor.search"]], "token_classification_utils": [[58, "module-cleanlab.internal.token_classification_utils"]], "util": [[59, "module-cleanlab.internal.util"]], "validation": [[60, "module-cleanlab.internal.validation"]], "models": [[61, "models"]], "keras": [[62, "module-cleanlab.models.keras"]], "multiannotator": [[63, "module-cleanlab.multiannotator"]], "multilabel_classification": [[66, "multilabel-classification"]], "rank": [[67, "module-cleanlab.multilabel_classification.rank"], [70, "module-cleanlab.object_detection.rank"], [73, "module-cleanlab.rank"], [79, "module-cleanlab.segmentation.rank"], [83, "module-cleanlab.token_classification.rank"]], "object_detection": [[69, "object-detection"]], "summary": [[71, "summary"], [80, "module-cleanlab.segmentation.summary"], [84, "module-cleanlab.token_classification.summary"]], "regression.learn": [[75, "module-cleanlab.regression.learn"]], "regression.rank": [[76, "module-cleanlab.regression.rank"]], "segmentation": [[78, "segmentation"]], "token_classification": [[82, "token-classification"]], "cleanlab open-source documentation": [[85, "cleanlab-open-source-documentation"]], "Quickstart": [[85, "quickstart"]], "1. Install cleanlab": [[85, "install-cleanlab"]], "2. Check your data for all sorts of issues": [[85, "check-your-data-for-all-sorts-of-issues"]], "3. Handle label errors and train robust models with noisy labels": [[85, "handle-label-errors-and-train-robust-models-with-noisy-labels"]], "4. Dataset curation: fix dataset-level issues": [[85, "dataset-curation-fix-dataset-level-issues"]], "5. Improve your data via many other techniques": [[85, "improve-your-data-via-many-other-techniques"]], "Contributing": [[85, "contributing"]], "Easy Mode": [[85, "easy-mode"], [93, "Easy-Mode"]], "How to migrate to versions >= 2.0.0 from pre 1.0.1": [[86, "how-to-migrate-to-versions-2-0-0-from-pre-1-0-1"]], "Function and class name changes": [[86, "function-and-class-name-changes"]], "Module name changes": [[86, "module-name-changes"]], "New modules": [[86, "new-modules"]], "Removed modules": [[86, "removed-modules"]], "Common argument and variable name changes": [[86, "common-argument-and-variable-name-changes"]], "CleanLearning Tutorials": [[87, "cleanlearning-tutorials"]], "Classification with Structured/Tabular Data and Noisy Labels": [[88, "Classification-with-Structured/Tabular-Data-and-Noisy-Labels"]], "1. Install required dependencies": [[88, "1.-Install-required-dependencies"], [89, "1.-Install-required-dependencies"], [95, "1.-Install-required-dependencies"], [96, "1.-Install-required-dependencies"], [108, "1.-Install-required-dependencies"]], "2. Load and process the data": [[88, "2.-Load-and-process-the-data"], [95, "2.-Load-and-process-the-data"], [108, "2.-Load-and-process-the-data"]], "3. Select a classification model and compute out-of-sample predicted probabilities": [[88, "3.-Select-a-classification-model-and-compute-out-of-sample-predicted-probabilities"], [95, "3.-Select-a-classification-model-and-compute-out-of-sample-predicted-probabilities"]], "4. Use cleanlab to find label issues": [[88, "4.-Use-cleanlab-to-find-label-issues"]], "5. Train a more robust model from noisy labels": [[88, "5.-Train-a-more-robust-model-from-noisy-labels"]], "Spending too much time on data quality?": [[88, "Spending-too-much-time-on-data-quality?"], [89, "Spending-too-much-time-on-data-quality?"], [92, "Spending-too-much-time-on-data-quality?"], [95, "Spending-too-much-time-on-data-quality?"], [96, "Spending-too-much-time-on-data-quality?"], [98, "Spending-too-much-time-on-data-quality?"], [101, "Spending-too-much-time-on-data-quality?"], [104, "Spending-too-much-time-on-data-quality?"], [106, "Spending-too-much-time-on-data-quality?"], [107, "spending-too-much-time-on-data-quality"], [108, "Spending-too-much-time-on-data-quality?"]], "Text Classification with Noisy Labels": [[89, "Text-Classification-with-Noisy-Labels"]], "2. Load and format the text dataset": [[89, "2.-Load-and-format-the-text-dataset"], [96, "2.-Load-and-format-the-text-dataset"]], "3. Define a classification model and use cleanlab to find potential label errors": [[89, "3.-Define-a-classification-model-and-use-cleanlab-to-find-potential-label-errors"]], "4. Train a more robust model from noisy labels": [[89, "4.-Train-a-more-robust-model-from-noisy-labels"], [108, "4.-Train-a-more-robust-model-from-noisy-labels"]], "Detecting Issues in an Audio Dataset with Datalab": [[90, "Detecting-Issues-in-an-Audio-Dataset-with-Datalab"]], "1. Install dependencies and import them": [[90, "1.-Install-dependencies-and-import-them"]], "2. Load the data": [[90, "2.-Load-the-data"]], "3. Use pre-trained SpeechBrain model to featurize audio": [[90, "3.-Use-pre-trained-SpeechBrain-model-to-featurize-audio"]], "4. Fit linear model and compute out-of-sample predicted probabilities": [[90, "4.-Fit-linear-model-and-compute-out-of-sample-predicted-probabilities"]], "5. Use cleanlab to find label issues": [[90, "5.-Use-cleanlab-to-find-label-issues"], [95, "5.-Use-cleanlab-to-find-label-issues"]], "Datalab: Advanced workflows to audit your data": [[91, "Datalab:-Advanced-workflows-to-audit-your-data"]], "Install and import required dependencies": [[91, "Install-and-import-required-dependencies"]], "Create and load the data": [[91, "Create-and-load-the-data"]], "Get out-of-sample predicted probabilities from a classifier": [[91, "Get-out-of-sample-predicted-probabilities-from-a-classifier"]], "Instantiate Datalab object": [[91, "Instantiate-Datalab-object"]], "Functionality 1: Incremental issue search": [[91, "Functionality-1:-Incremental-issue-search"]], "Functionality 2: Specifying nondefault arguments": [[91, "Functionality-2:-Specifying-nondefault-arguments"]], "Functionality 3: Save and load Datalab objects": [[91, "Functionality-3:-Save-and-load-Datalab-objects"]], "Functionality 4: Adding a custom IssueManager": [[91, "Functionality-4:-Adding-a-custom-IssueManager"]], "Datalab: A unified audit to detect all kinds of issues in data and labels": [[92, "Datalab:-A-unified-audit-to-detect-all-kinds-of-issues-in-data-and-labels"]], "1. Install and import required dependencies": [[92, "1.-Install-and-import-required-dependencies"], [93, "1.-Install-and-import-required-dependencies"], [103, "1.-Install-and-import-required-dependencies"]], "2. Create and load the data (can skip these details)": [[92, "2.-Create-and-load-the-data-(can-skip-these-details)"]], "3. Get out-of-sample predicted probabilities from a classifier": [[92, "3.-Get-out-of-sample-predicted-probabilities-from-a-classifier"]], "4. Use Datalab to find issues in the dataset": [[92, "4.-Use-Datalab-to-find-issues-in-the-dataset"]], "5. Learn more about the issues in your dataset": [[92, "5.-Learn-more-about-the-issues-in-your-dataset"]], "Get additional information": [[92, "Get-additional-information"]], "Near duplicate issues": [[92, "Near-duplicate-issues"], [93, "Near-duplicate-issues"]], "Detecting Issues in an Image Dataset with Datalab": [[93, "Detecting-Issues-in-an-Image-Dataset-with-Datalab"]], "2. Fetch and normalize the Fashion-MNIST dataset": [[93, "2.-Fetch-and-normalize-the-Fashion-MNIST-dataset"]], "3. Define a classification model": [[93, "3.-Define-a-classification-model"]], "4. Prepare the dataset for K-fold cross-validation": [[93, "4.-Prepare-the-dataset-for-K-fold-cross-validation"]], "5. Compute out-of-sample predicted probabilities and feature embeddings": [[93, "5.-Compute-out-of-sample-predicted-probabilities-and-feature-embeddings"]], "7. Use cleanlab to find issues": [[93, "7.-Use-cleanlab-to-find-issues"]], "View report": [[93, "View-report"]], "Label issues": [[93, "Label-issues"], [95, "Label-issues"], [96, "Label-issues"]], "View most likely examples with label errors": [[93, "View-most-likely-examples-with-label-errors"]], "Outlier issues": [[93, "Outlier-issues"], [95, "Outlier-issues"], [96, "Outlier-issues"]], "View most severe outliers": [[93, "View-most-severe-outliers"]], "View sets of near duplicate images": [[93, "View-sets-of-near-duplicate-images"]], "Dark images": [[93, "Dark-images"]], "View top examples of dark images": [[93, "View-top-examples-of-dark-images"]], "Low information images": [[93, "Low-information-images"]], "Datalab Tutorials": [[94, "datalab-tutorials"]], "Detecting Issues in Tabular Data\u00a0(Numeric/Categorical columns) with Datalab": [[95, "Detecting-Issues-in-Tabular-Data\u00a0(Numeric/Categorical-columns)-with-Datalab"]], "4. Construct K nearest neighbours graph": [[95, "4.-Construct-K-nearest-neighbours-graph"]], "Near-duplicate issues": [[95, "Near-duplicate-issues"], [96, "Near-duplicate-issues"]], "Detecting Issues in a Text Dataset with Datalab": [[96, "Detecting-Issues-in-a-Text-Dataset-with-Datalab"]], "3. Define a classification model and compute out-of-sample predicted probabilities": [[96, "3.-Define-a-classification-model-and-compute-out-of-sample-predicted-probabilities"]], "4. Use cleanlab to find issues in your dataset": [[96, "4.-Use-cleanlab-to-find-issues-in-your-dataset"]], "Non-IID issues (data drift)": [[96, "Non-IID-issues-(data-drift)"]], "Miscellaneous workflows with Datalab": [[97, "Miscellaneous-workflows-with-Datalab"]], "Accelerate Issue Checks with Pre-computed kNN Graphs": [[97, "Accelerate-Issue-Checks-with-Pre-computed-kNN-Graphs"]], "1. Load and Prepare Your Dataset": [[97, "1.-Load-and-Prepare-Your-Dataset"]], "2. Compute kNN Graph": [[97, "2.-Compute-kNN-Graph"]], "3. Train a Classifier and Obtain Predicted Probabilities": [[97, "3.-Train-a-Classifier-and-Obtain-Predicted-Probabilities"]], "4. Identify Data Issues Using Datalab": [[97, "4.-Identify-Data-Issues-Using-Datalab"]], "Explanation:": [[97, "Explanation:"]], "Data Valuation": [[97, "Data-Valuation"]], "1. Load and Prepare the Dataset": [[97, "1.-Load-and-Prepare-the-Dataset"], [97, "id2"]], "2. Vectorize the Text Data": [[97, "2.-Vectorize-the-Text-Data"]], "3. Perform Data Valuation with Datalab": [[97, "3.-Perform-Data-Valuation-with-Datalab"]], "4. (Optional) Visualize Data Valuation Scores": [[97, "4.-(Optional)-Visualize-Data-Valuation-Scores"]], "Find Underperforming Groups in a Dataset": [[97, "Find-Underperforming-Groups-in-a-Dataset"]], "1. Generate a Synthetic Dataset": [[97, "1.-Generate-a-Synthetic-Dataset"]], "2. Train a Classifier and Obtain Predicted Probabilities": [[97, "2.-Train-a-Classifier-and-Obtain-Predicted-Probabilities"], [97, "id3"]], "3. (Optional) Cluster the Data": [[97, "3.-(Optional)-Cluster-the-Data"]], "4. Identify Underperforming Groups with Datalab": [[97, "4.-Identify-Underperforming-Groups-with-Datalab"], [97, "id4"]], "5. (Optional) Visualize the Results": [[97, "5.-(Optional)-Visualize-the-Results"]], "Predefining Data Slices for Detecting Underperforming Groups": [[97, "Predefining-Data-Slices-for-Detecting-Underperforming-Groups"]], "3. Define a Data Slice": [[97, "3.-Define-a-Data-Slice"]], "Detect if your dataset is non-IID": [[97, "Detect-if-your-dataset-is-non-IID"]], "1. Load Dataset": [[97, "1.-Load-Dataset"]], "2. Run Datalab to test the IID assumption": [[97, "2.-Run-Datalab-to-test-the-IID-assumption"]], "3. (Optional) Understand the nature of IID violations in your dataset": [[97, "3.-(Optional)-Understand-the-nature-of-IID-violations-in-your-dataset"]], "Catch Null Values in a Dataset": [[97, "Catch-Null-Values-in-a-Dataset"]], "1. Load the Dataset": [[97, "1.-Load-the-Dataset"], [97, "id6"]], "2: Encode Categorical Values": [[97, "2:-Encode-Categorical-Values"]], "3. Initialize Datalab": [[97, "3.-Initialize-Datalab"]], "4. Detect Null Values": [[97, "4.-Detect-Null-Values"]], "5. Sort the Dataset by Null Issues": [[97, "5.-Sort-the-Dataset-by-Null-Issues"]], "6. (Optional) Visualize the Results": [[97, "6.-(Optional)-Visualize-the-Results"]], "Detect class imbalance in your dataset": [[97, "Detect-class-imbalance-in-your-dataset"]], "1. Prepare data": [[97, "1.-Prepare-data"]], "2. Detect class imbalance with Datalab": [[97, "2.-Detect-class-imbalance-with-Datalab"]], "3. (Optional) Visualize class imbalance issues": [[97, "3.-(Optional)-Visualize-class-imbalance-issues"]], "Identify Spurious Correlations in Image Datasets": [[97, "Identify-Spurious-Correlations-in-Image-Datasets"]], "2. Run Datalab Analysis": [[97, "2.-Run-Datalab-Analysis"]], "3. Interpret the Results": [[97, "3.-Interpret-the-Results"]], "Understanding Dataset-level Labeling Issues": [[98, "Understanding-Dataset-level-Labeling-Issues"]], "Install dependencies and import them": [[98, "Install-dependencies-and-import-them"], [101, "Install-dependencies-and-import-them"]], "Fetch the data (can skip these details)": [[98, "Fetch-the-data-(can-skip-these-details)"]], "Start of tutorial: Evaluate the health of 8 popular datasets": [[98, "Start-of-tutorial:-Evaluate-the-health-of-8-popular-datasets"]], "FAQ": [[99, "FAQ"]], "What data can cleanlab detect issues in?": [[99, "What-data-can-cleanlab-detect-issues-in?"]], "How do I format classification labels for cleanlab?": [[99, "How-do-I-format-classification-labels-for-cleanlab?"]], "How do I infer the correct labels for examples cleanlab has flagged?": [[99, "How-do-I-infer-the-correct-labels-for-examples-cleanlab-has-flagged?"]], "How should I handle label errors in train vs. test data?": [[99, "How-should-I-handle-label-errors-in-train-vs.-test-data?"]], "How can I find label issues in big datasets with limited memory?": [[99, "How-can-I-find-label-issues-in-big-datasets-with-limited-memory?"]], "Why isn\u2019t CleanLearning working for me?": [[99, "Why-isn\u2019t-CleanLearning-working-for-me?"]], "How can I use different models for data cleaning vs. final training in CleanLearning?": [[99, "How-can-I-use-different-models-for-data-cleaning-vs.-final-training-in-CleanLearning?"]], "How do I hyperparameter tune only the final model trained (and not the one finding label issues) in CleanLearning?": [[99, "How-do-I-hyperparameter-tune-only-the-final-model-trained-(and-not-the-one-finding-label-issues)-in-CleanLearning?"]], "Why does regression.learn.CleanLearning take so long?": [[99, "Why-does-regression.learn.CleanLearning-take-so-long?"]], "How do I specify pre-computed data slices/clusters when detecting the Underperforming Group Issue?": [[99, "How-do-I-specify-pre-computed-data-slices/clusters-when-detecting-the-Underperforming-Group-Issue?"]], "How to handle near-duplicate data identified by Datalab?": [[99, "How-to-handle-near-duplicate-data-identified-by-Datalab?"]], "What ML models should I run cleanlab with? How do I fix the issues cleanlab has identified?": [[99, "What-ML-models-should-I-run-cleanlab-with?-How-do-I-fix-the-issues-cleanlab-has-identified?"]], "What license is cleanlab open-sourced under?": [[99, "What-license-is-cleanlab-open-sourced-under?"]], "Can\u2019t find an answer to your question?": [[99, "Can't-find-an-answer-to-your-question?"]], "Improving ML Performance via Data Curation with Train vs Test Splits": [[100, "Improving-ML-Performance-via-Data-Curation-with-Train-vs-Test-Splits"]], "Why did you make this tutorial?": [[100, "Why-did-you-make-this-tutorial?"]], "1. Install dependencies": [[100, "1.-Install-dependencies"]], "2. Preprocess the data": [[100, "2.-Preprocess-the-data"]], "3. Check for fundamental problems in the train/test setup": [[100, "3.-Check-for-fundamental-problems-in-the-train/test-setup"]], "4. Train model with original (noisy) training data": [[100, "4.-Train-model-with-original-(noisy)-training-data"]], "Compute out-of-sample predicted probabilities for the test data from this baseline model": [[100, "Compute-out-of-sample-predicted-probabilities-for-the-test-data-from-this-baseline-model"]], "5. Check for issues in test data and manually address them": [[100, "5.-Check-for-issues-in-test-data-and-manually-address-them"]], "Use clean test data to evaluate the performance of model trained on noisy training data": [[100, "Use-clean-test-data-to-evaluate-the-performance-of-model-trained-on-noisy-training-data"]], "6. Check for issues in training data and algorithmically correct them": [[100, "6.-Check-for-issues-in-training-data-and-algorithmically-correct-them"]], "7. Train model on cleaned training data": [[100, "7.-Train-model-on-cleaned-training-data"]], "Use clean test data to evaluate the performance of model trained on cleaned training data": [[100, "Use-clean-test-data-to-evaluate-the-performance-of-model-trained-on-cleaned-training-data"]], "8. Identifying better training data curation strategies via hyperparameter optimization techniques": [[100, "8.-Identifying-better-training-data-curation-strategies-via-hyperparameter-optimization-techniques"]], "9. Conclusion": [[100, "9.-Conclusion"]], "The Workflows of Data-centric AI for Classification with Noisy Labels": [[101, "The-Workflows-of-Data-centric-AI-for-Classification-with-Noisy-Labels"]], "Create the data (can skip these details)": [[101, "Create-the-data-(can-skip-these-details)"]], "Workflow 1: Use Datalab to detect many types of issues": [[101, "Workflow-1:-Use-Datalab-to-detect-many-types-of-issues"]], "Workflow 2: Use CleanLearning for more robust Machine Learning": [[101, "Workflow-2:-Use-CleanLearning-for-more-robust-Machine-Learning"]], "Clean Learning = Machine Learning with cleaned data": [[101, "Clean-Learning-=-Machine-Learning-with-cleaned-data"]], "Workflow 3: Use CleanLearning to find_label_issues in one line of code": [[101, "Workflow-3:-Use-CleanLearning-to-find_label_issues-in-one-line-of-code"]], "Visualize the twenty examples with lowest label quality to see if Cleanlab works.": [[101, "Visualize-the-twenty-examples-with-lowest-label-quality-to-see-if-Cleanlab-works."]], "Workflow 4: Use cleanlab to find dataset-level and class-level issues": [[101, "Workflow-4:-Use-cleanlab-to-find-dataset-level-and-class-level-issues"]], "Now, let\u2019s see what happens if we merge classes \u201cseafoam green\u201d and \u201cyellow\u201d": [[101, "Now,-let's-see-what-happens-if-we-merge-classes-%22seafoam-green%22-and-%22yellow%22"]], "Workflow 5: Clean your test set too if you\u2019re doing ML with noisy labels!": [[101, "Workflow-5:-Clean-your-test-set-too-if-you're-doing-ML-with-noisy-labels!"]], "Workflow 6: One score to rule them all \u2013 use cleanlab\u2019s overall dataset health score": [[101, "Workflow-6:-One-score-to-rule-them-all----use-cleanlab's-overall-dataset-health-score"]], "How accurate is this dataset health score?": [[101, "How-accurate-is-this-dataset-health-score?"]], "Workflow(s) 7: Use count, rank, filter modules directly": [[101, "Workflow(s)-7:-Use-count,-rank,-filter-modules-directly"]], "Workflow 7.1 (count): Fully characterize label noise (noise matrix, joint, prior of true labels, \u2026)": [[101, "Workflow-7.1-(count):-Fully-characterize-label-noise-(noise-matrix,-joint,-prior-of-true-labels,-...)"]], "Use cleanlab to estimate and visualize the joint distribution of label noise and noise matrix of label flipping rates:": [[101, "Use-cleanlab-to-estimate-and-visualize-the-joint-distribution-of-label-noise-and-noise-matrix-of-label-flipping-rates:"]], "Workflow 7.2 (filter): Find label issues for any dataset and any model in one line of code": [[101, "Workflow-7.2-(filter):-Find-label-issues-for-any-dataset-and-any-model-in-one-line-of-code"]], "Again, we can visualize the twenty examples with lowest label quality to see if Cleanlab works.": [[101, "Again,-we-can-visualize-the-twenty-examples-with-lowest-label-quality-to-see-if-Cleanlab-works."]], "Workflow 7.2 supports lots of methods to find_label_issues() via the filter_by parameter.": [[101, "Workflow-7.2-supports-lots-of-methods-to-find_label_issues()-via-the-filter_by-parameter."]], "Workflow 7.3 (rank): Automatically rank every example by a unique label quality score. Find errors using cleanlab.count.num_label_issues as a threshold.": [[101, "Workflow-7.3-(rank):-Automatically-rank-every-example-by-a-unique-label-quality-score.-Find-errors-using-cleanlab.count.num_label_issues-as-a-threshold."]], "Again, we can visualize the label issues found to see if Cleanlab works.": [[101, "Again,-we-can-visualize-the-label-issues-found-to-see-if-Cleanlab-works."]], "Not sure when to use Workflow 7.2 or 7.3 to find label issues?": [[101, "Not-sure-when-to-use-Workflow-7.2-or-7.3-to-find-label-issues?"]], "Workflow 8: Ensembling label quality scores from multiple predictors": [[101, "Workflow-8:-Ensembling-label-quality-scores-from-multiple-predictors"]], "Tutorials": [[102, "tutorials"]], "Estimate Consensus and Annotator Quality for Data Labeled by Multiple Annotators": [[103, "Estimate-Consensus-and-Annotator-Quality-for-Data-Labeled-by-Multiple-Annotators"]], "2. Create the data (can skip these details)": [[103, "2.-Create-the-data-(can-skip-these-details)"]], "3. Get initial consensus labels via majority vote and compute out-of-sample predicted probabilities": [[103, "3.-Get-initial-consensus-labels-via-majority-vote-and-compute-out-of-sample-predicted-probabilities"]], "4. Use cleanlab to get better consensus labels and other statistics": [[103, "4.-Use-cleanlab-to-get-better-consensus-labels-and-other-statistics"]], "Comparing improved consensus labels": [[103, "Comparing-improved-consensus-labels"]], "Inspecting consensus quality scores to find potential consensus label errors": [[103, "Inspecting-consensus-quality-scores-to-find-potential-consensus-label-errors"]], "5. Retrain model using improved consensus labels": [[103, "5.-Retrain-model-using-improved-consensus-labels"]], "Further improvements": [[103, "Further-improvements"]], "How does cleanlab.multiannotator work?": [[103, "How-does-cleanlab.multiannotator-work?"]], "Find Label Errors in Multi-Label Classification Datasets": [[104, "Find-Label-Errors-in-Multi-Label-Classification-Datasets"]], "1. Install required dependencies and get dataset": [[104, "1.-Install-required-dependencies-and-get-dataset"]], "2. Format data, labels, and model predictions": [[104, "2.-Format-data,-labels,-and-model-predictions"], [105, "2.-Format-data,-labels,-and-model-predictions"]], "3. Use cleanlab to find label issues": [[104, "3.-Use-cleanlab-to-find-label-issues"], [105, "3.-Use-cleanlab-to-find-label-issues"], [109, "3.-Use-cleanlab-to-find-label-issues"], [110, "3.-Use-cleanlab-to-find-label-issues"]], "Label quality scores": [[104, "Label-quality-scores"]], "Data issues beyond mislabeling (outliers, duplicates, drift, \u2026)": [[104, "Data-issues-beyond-mislabeling-(outliers,-duplicates,-drift,-...)"]], "How to format labels given as a one-hot (multi-hot) binary matrix?": [[104, "How-to-format-labels-given-as-a-one-hot-(multi-hot)-binary-matrix?"]], "Estimate label issues without Datalab": [[104, "Estimate-label-issues-without-Datalab"]], "Application to Real Data": [[104, "Application-to-Real-Data"]], "Finding Label Errors in Object Detection Datasets": [[105, "Finding-Label-Errors-in-Object-Detection-Datasets"]], "1. Install required dependencies and download data": [[105, "1.-Install-required-dependencies-and-download-data"], [109, "1.-Install-required-dependencies-and-download-data"], [110, "1.-Install-required-dependencies-and-download-data"]], "Get label quality scores": [[105, "Get-label-quality-scores"], [109, "Get-label-quality-scores"]], "4. Use ObjectLab to visualize label issues": [[105, "4.-Use-ObjectLab-to-visualize-label-issues"]], "Different kinds of label issues identified by ObjectLab": [[105, "Different-kinds-of-label-issues-identified-by-ObjectLab"]], "Other uses of visualize": [[105, "Other-uses-of-visualize"]], "Exploratory data analysis": [[105, "Exploratory-data-analysis"]], "Detect Outliers with Cleanlab and PyTorch Image Models (timm)": [[106, "Detect-Outliers-with-Cleanlab-and-PyTorch-Image-Models-(timm)"]], "1. Install the required dependencies": [[106, "1.-Install-the-required-dependencies"]], "2. Pre-process the Cifar10 dataset": [[106, "2.-Pre-process-the-Cifar10-dataset"]], "Visualize some of the training and test examples": [[106, "Visualize-some-of-the-training-and-test-examples"]], "3. Use cleanlab and feature embeddings to find outliers in the data": [[106, "3.-Use-cleanlab-and-feature-embeddings-to-find-outliers-in-the-data"]], "4. Use cleanlab and pred_probs to find outliers in the data": [[106, "4.-Use-cleanlab-and-pred_probs-to-find-outliers-in-the-data"]], "Computing Out-of-Sample Predicted Probabilities with Cross-Validation": [[107, "computing-out-of-sample-predicted-probabilities-with-cross-validation"]], "Out-of-sample predicted probabilities?": [[107, "out-of-sample-predicted-probabilities"]], "What is K-fold cross-validation?": [[107, "what-is-k-fold-cross-validation"]], "Find Noisy Labels in Regression Datasets": [[108, "Find-Noisy-Labels-in-Regression-Datasets"]], "3. Define a regression model and use cleanlab to find potential label errors": [[108, "3.-Define-a-regression-model-and-use-cleanlab-to-find-potential-label-errors"]], "5. Other ways to find noisy labels in regression datasets": [[108, "5.-Other-ways-to-find-noisy-labels-in-regression-datasets"]], "Find Label Errors in Semantic Segmentation Datasets": [[109, "Find-Label-Errors-in-Semantic-Segmentation-Datasets"]], "2. Get data, labels, and pred_probs": [[109, "2.-Get-data,-labels,-and-pred_probs"], [110, "2.-Get-data,-labels,-and-pred_probs"]], "Visualize top label issues": [[109, "Visualize-top-label-issues"]], "Classes which are commonly mislabeled overall": [[109, "Classes-which-are-commonly-mislabeled-overall"]], "Focusing on one specific class": [[109, "Focusing-on-one-specific-class"]], "Find Label Errors in Token Classification (Text) Datasets": [[110, "Find-Label-Errors-in-Token-Classification-(Text)-Datasets"]], "Most common word-level token mislabels": [[110, "Most-common-word-level-token-mislabels"]], "Find sentences containing a particular mislabeled word": [[110, "Find-sentences-containing-a-particular-mislabeled-word"]], "Sentence label quality score": [[110, "Sentence-label-quality-score"]], "How does cleanlab.token_classification work?": [[110, "How-does-cleanlab.token_classification-work?"]]}, "indexentries": {"cleanlab.benchmarking": [[0, "module-cleanlab.benchmarking"]], "module": [[0, "module-cleanlab.benchmarking"], [1, "module-cleanlab.benchmarking.noise_generation"], [2, "module-cleanlab.classification"], [3, "module-cleanlab.count"], [4, "module-cleanlab.data_valuation"], [5, "module-cleanlab.datalab.datalab"], [12, "module-cleanlab.datalab"], [13, "module-cleanlab.datalab.internal.adapter.imagelab"], [15, "module-cleanlab.datalab.internal.data"], [16, "module-cleanlab.datalab.internal.data_issues"], [17, "module-cleanlab.datalab.internal.issue_manager_factory"], [18, "module-cleanlab.datalab.internal"], [19, "module-cleanlab.datalab.internal.issue_finder"], [21, "module-cleanlab.datalab.internal.issue_manager.data_valuation"], [22, "module-cleanlab.datalab.internal.issue_manager.duplicate"], [23, "module-cleanlab.datalab.internal.issue_manager.imbalance"], [25, "module-cleanlab.datalab.internal.issue_manager.issue_manager"], [26, "module-cleanlab.datalab.internal.issue_manager.label"], [28, "module-cleanlab.datalab.internal.issue_manager.multilabel.label"], [29, "module-cleanlab.datalab.internal.issue_manager.noniid"], [30, "module-cleanlab.datalab.internal.issue_manager.null"], [31, "module-cleanlab.datalab.internal.issue_manager.outlier"], [33, "module-cleanlab.datalab.internal.issue_manager.regression.label"], [34, "module-cleanlab.datalab.internal.issue_manager.underperforming_group"], [35, "module-cleanlab.datalab.internal.model_outputs"], [36, "module-cleanlab.datalab.internal.report"], [37, "module-cleanlab.datalab.internal.task"], [39, "module-cleanlab.dataset"], [40, "module-cleanlab.experimental.cifar_cnn"], [41, "module-cleanlab.experimental.coteaching"], [42, "module-cleanlab.experimental"], [43, "module-cleanlab.experimental.label_issues_batched"], [44, "module-cleanlab.experimental.mnist_pytorch"], [45, "module-cleanlab.experimental.span_classification"], [46, "module-cleanlab.filter"], [47, "module-cleanlab.internal"], [48, "module-cleanlab.internal.label_quality_utils"], [49, "module-cleanlab.internal.latent_algebra"], [50, "module-cleanlab.internal.multiannotator_utils"], [51, "module-cleanlab.internal.multilabel_scorer"], [52, "module-cleanlab.internal.multilabel_utils"], [53, "module-cleanlab.internal.neighbor"], [54, "module-cleanlab.internal.neighbor.knn_graph"], [55, "module-cleanlab.internal.neighbor.metric"], [56, "module-cleanlab.internal.neighbor.search"], [57, "module-cleanlab.internal.outlier"], [58, "module-cleanlab.internal.token_classification_utils"], [59, "module-cleanlab.internal.util"], [60, "module-cleanlab.internal.validation"], [61, "module-cleanlab.models"], [62, "module-cleanlab.models.keras"], [63, "module-cleanlab.multiannotator"], [64, "module-cleanlab.multilabel_classification.dataset"], [65, "module-cleanlab.multilabel_classification.filter"], [66, "module-cleanlab.multilabel_classification"], [67, "module-cleanlab.multilabel_classification.rank"], [68, "module-cleanlab.object_detection.filter"], [69, "module-cleanlab.object_detection"], [70, "module-cleanlab.object_detection.rank"], [71, "module-cleanlab.object_detection.summary"], [72, "module-cleanlab.outlier"], [73, "module-cleanlab.rank"], [74, "module-cleanlab.regression"], [75, "module-cleanlab.regression.learn"], [76, "module-cleanlab.regression.rank"], [77, "module-cleanlab.segmentation.filter"], [78, "module-cleanlab.segmentation"], [79, "module-cleanlab.segmentation.rank"], [80, "module-cleanlab.segmentation.summary"], [81, "module-cleanlab.token_classification.filter"], [82, "module-cleanlab.token_classification"], [83, "module-cleanlab.token_classification.rank"], [84, "module-cleanlab.token_classification.summary"]], "cleanlab.benchmarking.noise_generation": [[1, "module-cleanlab.benchmarking.noise_generation"]], "generate_n_rand_probabilities_that_sum_to_m() (in module cleanlab.benchmarking.noise_generation)": [[1, "cleanlab.benchmarking.noise_generation.generate_n_rand_probabilities_that_sum_to_m"]], "generate_noise_matrix_from_trace() (in module cleanlab.benchmarking.noise_generation)": [[1, "cleanlab.benchmarking.noise_generation.generate_noise_matrix_from_trace"]], "generate_noisy_labels() (in module cleanlab.benchmarking.noise_generation)": [[1, "cleanlab.benchmarking.noise_generation.generate_noisy_labels"]], "noise_matrix_is_valid() (in module cleanlab.benchmarking.noise_generation)": [[1, "cleanlab.benchmarking.noise_generation.noise_matrix_is_valid"]], "randomly_distribute_n_balls_into_k_bins() (in module cleanlab.benchmarking.noise_generation)": [[1, "cleanlab.benchmarking.noise_generation.randomly_distribute_N_balls_into_K_bins"]], "cleanlearning (class in cleanlab.classification)": [[2, "cleanlab.classification.CleanLearning"]], "__init_subclass__() (cleanlab.classification.cleanlearning class method)": [[2, "cleanlab.classification.CleanLearning.__init_subclass__"]], "cleanlab.classification": [[2, "module-cleanlab.classification"]], "find_label_issues() (cleanlab.classification.cleanlearning method)": [[2, "cleanlab.classification.CleanLearning.find_label_issues"]], "fit() (cleanlab.classification.cleanlearning method)": [[2, "cleanlab.classification.CleanLearning.fit"]], "get_label_issues() (cleanlab.classification.cleanlearning method)": [[2, "cleanlab.classification.CleanLearning.get_label_issues"]], "get_metadata_routing() (cleanlab.classification.cleanlearning method)": [[2, "cleanlab.classification.CleanLearning.get_metadata_routing"]], "get_params() (cleanlab.classification.cleanlearning method)": [[2, "cleanlab.classification.CleanLearning.get_params"]], "predict() (cleanlab.classification.cleanlearning method)": [[2, "cleanlab.classification.CleanLearning.predict"]], "predict_proba() (cleanlab.classification.cleanlearning method)": [[2, "cleanlab.classification.CleanLearning.predict_proba"]], "save_space() (cleanlab.classification.cleanlearning method)": [[2, "cleanlab.classification.CleanLearning.save_space"]], "score() (cleanlab.classification.cleanlearning method)": [[2, "cleanlab.classification.CleanLearning.score"]], "set_fit_request() (cleanlab.classification.cleanlearning method)": [[2, "cleanlab.classification.CleanLearning.set_fit_request"]], "set_params() (cleanlab.classification.cleanlearning method)": [[2, "cleanlab.classification.CleanLearning.set_params"]], "set_score_request() (cleanlab.classification.cleanlearning method)": [[2, "cleanlab.classification.CleanLearning.set_score_request"]], "calibrate_confident_joint() (in module cleanlab.count)": [[3, "cleanlab.count.calibrate_confident_joint"]], "cleanlab.count": [[3, "module-cleanlab.count"]], "compute_confident_joint() (in module cleanlab.count)": [[3, "cleanlab.count.compute_confident_joint"]], "estimate_confident_joint_and_cv_pred_proba() (in module cleanlab.count)": [[3, "cleanlab.count.estimate_confident_joint_and_cv_pred_proba"]], "estimate_cv_predicted_probabilities() (in module cleanlab.count)": [[3, "cleanlab.count.estimate_cv_predicted_probabilities"]], "estimate_joint() (in module cleanlab.count)": [[3, "cleanlab.count.estimate_joint"]], "estimate_latent() (in module cleanlab.count)": [[3, "cleanlab.count.estimate_latent"]], "estimate_noise_matrices() (in module cleanlab.count)": [[3, "cleanlab.count.estimate_noise_matrices"]], "estimate_py_and_noise_matrices_from_probabilities() (in module cleanlab.count)": [[3, "cleanlab.count.estimate_py_and_noise_matrices_from_probabilities"]], "estimate_py_noise_matrices_and_cv_pred_proba() (in module cleanlab.count)": [[3, "cleanlab.count.estimate_py_noise_matrices_and_cv_pred_proba"]], "get_confident_thresholds() (in module cleanlab.count)": [[3, "cleanlab.count.get_confident_thresholds"]], "num_label_issues() (in module cleanlab.count)": [[3, "cleanlab.count.num_label_issues"]], "cleanlab.data_valuation": [[4, "module-cleanlab.data_valuation"]], "data_shapley_knn() (in module cleanlab.data_valuation)": [[4, "cleanlab.data_valuation.data_shapley_knn"]], "datalab (class in cleanlab.datalab.datalab)": [[5, "cleanlab.datalab.datalab.Datalab"]], "class_names (cleanlab.datalab.datalab.datalab property)": [[5, "cleanlab.datalab.datalab.Datalab.class_names"]], "cleanlab.datalab.datalab": [[5, "module-cleanlab.datalab.datalab"]], "find_issues() (cleanlab.datalab.datalab.datalab method)": [[5, "cleanlab.datalab.datalab.Datalab.find_issues"]], "get_info() (cleanlab.datalab.datalab.datalab method)": [[5, "cleanlab.datalab.datalab.Datalab.get_info"]], "get_issue_summary() (cleanlab.datalab.datalab.datalab method)": [[5, "cleanlab.datalab.datalab.Datalab.get_issue_summary"]], "get_issues() (cleanlab.datalab.datalab.datalab method)": [[5, "cleanlab.datalab.datalab.Datalab.get_issues"]], "has_labels (cleanlab.datalab.datalab.datalab property)": [[5, "cleanlab.datalab.datalab.Datalab.has_labels"]], "info (cleanlab.datalab.datalab.datalab property)": [[5, "cleanlab.datalab.datalab.Datalab.info"]], "issue_summary (cleanlab.datalab.datalab.datalab property)": [[5, "cleanlab.datalab.datalab.Datalab.issue_summary"]], "issues (cleanlab.datalab.datalab.datalab property)": [[5, "cleanlab.datalab.datalab.Datalab.issues"]], "labels (cleanlab.datalab.datalab.datalab property)": [[5, "cleanlab.datalab.datalab.Datalab.labels"]], "list_default_issue_types() (cleanlab.datalab.datalab.datalab method)": [[5, "cleanlab.datalab.datalab.Datalab.list_default_issue_types"]], "list_possible_issue_types() (cleanlab.datalab.datalab.datalab method)": [[5, "cleanlab.datalab.datalab.Datalab.list_possible_issue_types"]], "load() (cleanlab.datalab.datalab.datalab static method)": [[5, "cleanlab.datalab.datalab.Datalab.load"]], "report() (cleanlab.datalab.datalab.datalab method)": [[5, "cleanlab.datalab.datalab.Datalab.report"]], "save() (cleanlab.datalab.datalab.datalab method)": [[5, "cleanlab.datalab.datalab.Datalab.save"]], "cleanlab.datalab": [[12, "module-cleanlab.datalab"]], "correlationreporter (class in cleanlab.datalab.internal.adapter.imagelab)": [[13, "cleanlab.datalab.internal.adapter.imagelab.CorrelationReporter"]], "correlationvisualizer (class in cleanlab.datalab.internal.adapter.imagelab)": [[13, "cleanlab.datalab.internal.adapter.imagelab.CorrelationVisualizer"]], "imagelabdataissuesadapter (class in cleanlab.datalab.internal.adapter.imagelab)": [[13, "cleanlab.datalab.internal.adapter.imagelab.ImagelabDataIssuesAdapter"]], "imagelabissuefinderadapter (class in cleanlab.datalab.internal.adapter.imagelab)": [[13, "cleanlab.datalab.internal.adapter.imagelab.ImagelabIssueFinderAdapter"]], "imagelabreporteradapter (class in cleanlab.datalab.internal.adapter.imagelab)": [[13, "cleanlab.datalab.internal.adapter.imagelab.ImagelabReporterAdapter"]], "cleanlab.datalab.internal.adapter.imagelab": [[13, "module-cleanlab.datalab.internal.adapter.imagelab"]], "collect_issues_from_imagelab() (cleanlab.datalab.internal.adapter.imagelab.imagelabdataissuesadapter method)": [[13, "cleanlab.datalab.internal.adapter.imagelab.ImagelabDataIssuesAdapter.collect_issues_from_imagelab"]], "collect_issues_from_issue_manager() (cleanlab.datalab.internal.adapter.imagelab.imagelabdataissuesadapter method)": [[13, "cleanlab.datalab.internal.adapter.imagelab.ImagelabDataIssuesAdapter.collect_issues_from_issue_manager"]], "collect_statistics() (cleanlab.datalab.internal.adapter.imagelab.imagelabdataissuesadapter method)": [[13, "cleanlab.datalab.internal.adapter.imagelab.ImagelabDataIssuesAdapter.collect_statistics"]], "create_imagelab() (in module cleanlab.datalab.internal.adapter.imagelab)": [[13, "cleanlab.datalab.internal.adapter.imagelab.create_imagelab"]], "filter_based_on_max_prevalence() (cleanlab.datalab.internal.adapter.imagelab.imagelabdataissuesadapter method)": [[13, "cleanlab.datalab.internal.adapter.imagelab.ImagelabDataIssuesAdapter.filter_based_on_max_prevalence"]], "find_issues() (cleanlab.datalab.internal.adapter.imagelab.imagelabissuefinderadapter method)": [[13, "cleanlab.datalab.internal.adapter.imagelab.ImagelabIssueFinderAdapter.find_issues"]], "get_available_issue_types() (cleanlab.datalab.internal.adapter.imagelab.imagelabissuefinderadapter method)": [[13, "cleanlab.datalab.internal.adapter.imagelab.ImagelabIssueFinderAdapter.get_available_issue_types"]], "get_info() (cleanlab.datalab.internal.adapter.imagelab.imagelabdataissuesadapter method)": [[13, "cleanlab.datalab.internal.adapter.imagelab.ImagelabDataIssuesAdapter.get_info"]], "get_issue_summary() (cleanlab.datalab.internal.adapter.imagelab.imagelabdataissuesadapter method)": [[13, "cleanlab.datalab.internal.adapter.imagelab.ImagelabDataIssuesAdapter.get_issue_summary"]], "get_issues() (cleanlab.datalab.internal.adapter.imagelab.imagelabdataissuesadapter method)": [[13, "cleanlab.datalab.internal.adapter.imagelab.ImagelabDataIssuesAdapter.get_issues"]], "get_report() (cleanlab.datalab.internal.adapter.imagelab.imagelabreporteradapter method)": [[13, "cleanlab.datalab.internal.adapter.imagelab.ImagelabReporterAdapter.get_report"]], "handle_spurious_correlations() (in module cleanlab.datalab.internal.adapter.imagelab)": [[13, "cleanlab.datalab.internal.adapter.imagelab.handle_spurious_correlations"]], "report() (cleanlab.datalab.internal.adapter.imagelab.correlationreporter method)": [[13, "cleanlab.datalab.internal.adapter.imagelab.CorrelationReporter.report"]], "report() (cleanlab.datalab.internal.adapter.imagelab.imagelabreporteradapter method)": [[13, "cleanlab.datalab.internal.adapter.imagelab.ImagelabReporterAdapter.report"]], "set_health_score() (cleanlab.datalab.internal.adapter.imagelab.imagelabdataissuesadapter method)": [[13, "cleanlab.datalab.internal.adapter.imagelab.ImagelabDataIssuesAdapter.set_health_score"]], "statistics (cleanlab.datalab.internal.adapter.imagelab.imagelabdataissuesadapter property)": [[13, "cleanlab.datalab.internal.adapter.imagelab.ImagelabDataIssuesAdapter.statistics"]], "visualize() (cleanlab.datalab.internal.adapter.imagelab.correlationvisualizer method)": [[13, "cleanlab.datalab.internal.adapter.imagelab.CorrelationVisualizer.visualize"]], "data (class in cleanlab.datalab.internal.data)": [[15, "cleanlab.datalab.internal.data.Data"]], "dataformaterror": [[15, "cleanlab.datalab.internal.data.DataFormatError"]], "datasetdicterror": [[15, "cleanlab.datalab.internal.data.DatasetDictError"]], "datasetloaderror": [[15, "cleanlab.datalab.internal.data.DatasetLoadError"]], "label (class in cleanlab.datalab.internal.data)": [[15, "cleanlab.datalab.internal.data.Label"]], "multiclass (class in cleanlab.datalab.internal.data)": [[15, "cleanlab.datalab.internal.data.MultiClass"]], "multilabel (class in cleanlab.datalab.internal.data)": [[15, "cleanlab.datalab.internal.data.MultiLabel"]], "add_note() (cleanlab.datalab.internal.data.dataformaterror method)": [[15, "cleanlab.datalab.internal.data.DataFormatError.add_note"]], "add_note() (cleanlab.datalab.internal.data.datasetdicterror method)": [[15, "cleanlab.datalab.internal.data.DatasetDictError.add_note"]], "add_note() (cleanlab.datalab.internal.data.datasetloaderror method)": [[15, "cleanlab.datalab.internal.data.DatasetLoadError.add_note"]], "args (cleanlab.datalab.internal.data.dataformaterror attribute)": [[15, "cleanlab.datalab.internal.data.DataFormatError.args"]], "args (cleanlab.datalab.internal.data.datasetdicterror attribute)": [[15, "cleanlab.datalab.internal.data.DatasetDictError.args"]], "args (cleanlab.datalab.internal.data.datasetloaderror attribute)": [[15, "cleanlab.datalab.internal.data.DatasetLoadError.args"]], "class_names (cleanlab.datalab.internal.data.data property)": [[15, "cleanlab.datalab.internal.data.Data.class_names"]], "class_names (cleanlab.datalab.internal.data.label property)": [[15, "cleanlab.datalab.internal.data.Label.class_names"]], "class_names (cleanlab.datalab.internal.data.multiclass property)": [[15, "cleanlab.datalab.internal.data.MultiClass.class_names"]], "class_names (cleanlab.datalab.internal.data.multilabel property)": [[15, "cleanlab.datalab.internal.data.MultiLabel.class_names"]], "cleanlab.datalab.internal.data": [[15, "module-cleanlab.datalab.internal.data"]], "has_labels (cleanlab.datalab.internal.data.data property)": [[15, "cleanlab.datalab.internal.data.Data.has_labels"]], "is_available (cleanlab.datalab.internal.data.label property)": [[15, "cleanlab.datalab.internal.data.Label.is_available"]], "is_available (cleanlab.datalab.internal.data.multiclass property)": [[15, "cleanlab.datalab.internal.data.MultiClass.is_available"]], "is_available (cleanlab.datalab.internal.data.multilabel property)": [[15, "cleanlab.datalab.internal.data.MultiLabel.is_available"]], "with_traceback() (cleanlab.datalab.internal.data.dataformaterror method)": [[15, "cleanlab.datalab.internal.data.DataFormatError.with_traceback"]], "with_traceback() (cleanlab.datalab.internal.data.datasetdicterror method)": [[15, "cleanlab.datalab.internal.data.DatasetDictError.with_traceback"]], "with_traceback() (cleanlab.datalab.internal.data.datasetloaderror method)": [[15, "cleanlab.datalab.internal.data.DatasetLoadError.with_traceback"]], "dataissues (class in cleanlab.datalab.internal.data_issues)": [[16, "cleanlab.datalab.internal.data_issues.DataIssues"]], "cleanlab.datalab.internal.data_issues": [[16, "module-cleanlab.datalab.internal.data_issues"]], "collect_issues_from_imagelab() (cleanlab.datalab.internal.data_issues.dataissues method)": [[16, "cleanlab.datalab.internal.data_issues.DataIssues.collect_issues_from_imagelab"]], "collect_issues_from_issue_manager() (cleanlab.datalab.internal.data_issues.dataissues method)": [[16, "cleanlab.datalab.internal.data_issues.DataIssues.collect_issues_from_issue_manager"]], "collect_statistics() (cleanlab.datalab.internal.data_issues.dataissues method)": [[16, "cleanlab.datalab.internal.data_issues.DataIssues.collect_statistics"]], "get_data_statistics() (in module cleanlab.datalab.internal.data_issues)": [[16, "cleanlab.datalab.internal.data_issues.get_data_statistics"]], "get_info() (cleanlab.datalab.internal.data_issues.dataissues method)": [[16, "cleanlab.datalab.internal.data_issues.DataIssues.get_info"]], "get_issue_summary() (cleanlab.datalab.internal.data_issues.dataissues method)": [[16, "cleanlab.datalab.internal.data_issues.DataIssues.get_issue_summary"]], "get_issues() (cleanlab.datalab.internal.data_issues.dataissues method)": [[16, "cleanlab.datalab.internal.data_issues.DataIssues.get_issues"]], "info (cleanlab.datalab.internal.data_issues.dataissues attribute)": [[16, "cleanlab.datalab.internal.data_issues.DataIssues.info"]], "issue_summary (cleanlab.datalab.internal.data_issues.dataissues attribute)": [[16, "cleanlab.datalab.internal.data_issues.DataIssues.issue_summary"]], "issues (cleanlab.datalab.internal.data_issues.dataissues attribute)": [[16, "cleanlab.datalab.internal.data_issues.DataIssues.issues"]], "set_health_score() (cleanlab.datalab.internal.data_issues.dataissues method)": [[16, "cleanlab.datalab.internal.data_issues.DataIssues.set_health_score"]], "statistics (cleanlab.datalab.internal.data_issues.dataissues property)": [[16, "cleanlab.datalab.internal.data_issues.DataIssues.statistics"]], "registry (in module cleanlab.datalab.internal.issue_manager_factory)": [[17, "cleanlab.datalab.internal.issue_manager_factory.REGISTRY"]], "cleanlab.datalab.internal.issue_manager_factory": [[17, "module-cleanlab.datalab.internal.issue_manager_factory"]], "list_default_issue_types() (in module cleanlab.datalab.internal.issue_manager_factory)": [[17, "cleanlab.datalab.internal.issue_manager_factory.list_default_issue_types"]], "list_possible_issue_types() (in module cleanlab.datalab.internal.issue_manager_factory)": [[17, "cleanlab.datalab.internal.issue_manager_factory.list_possible_issue_types"]], "register() (in module cleanlab.datalab.internal.issue_manager_factory)": [[17, "cleanlab.datalab.internal.issue_manager_factory.register"]], "cleanlab.datalab.internal": [[18, "module-cleanlab.datalab.internal"]], "issuefinder (class in cleanlab.datalab.internal.issue_finder)": [[19, "cleanlab.datalab.internal.issue_finder.IssueFinder"]], "cleanlab.datalab.internal.issue_finder": [[19, "module-cleanlab.datalab.internal.issue_finder"]], "find_issues() (cleanlab.datalab.internal.issue_finder.issuefinder method)": [[19, "cleanlab.datalab.internal.issue_finder.IssueFinder.find_issues"]], "get_available_issue_types() (cleanlab.datalab.internal.issue_finder.issuefinder method)": [[19, "cleanlab.datalab.internal.issue_finder.IssueFinder.get_available_issue_types"]], "default_threshold (cleanlab.datalab.internal.issue_manager.data_valuation.datavaluationissuemanager attribute)": [[21, "cleanlab.datalab.internal.issue_manager.data_valuation.DataValuationIssueManager.DEFAULT_THRESHOLD"]], "datavaluationissuemanager (class in cleanlab.datalab.internal.issue_manager.data_valuation)": [[21, "cleanlab.datalab.internal.issue_manager.data_valuation.DataValuationIssueManager"]], "cleanlab.datalab.internal.issue_manager.data_valuation": [[21, "module-cleanlab.datalab.internal.issue_manager.data_valuation"]], "collect_info() (cleanlab.datalab.internal.issue_manager.data_valuation.datavaluationissuemanager method)": [[21, "cleanlab.datalab.internal.issue_manager.data_valuation.DataValuationIssueManager.collect_info"]], "description (cleanlab.datalab.internal.issue_manager.data_valuation.datavaluationissuemanager attribute)": [[21, "cleanlab.datalab.internal.issue_manager.data_valuation.DataValuationIssueManager.description"]], "find_issues() (cleanlab.datalab.internal.issue_manager.data_valuation.datavaluationissuemanager method)": [[21, "cleanlab.datalab.internal.issue_manager.data_valuation.DataValuationIssueManager.find_issues"]], "info (cleanlab.datalab.internal.issue_manager.data_valuation.datavaluationissuemanager attribute)": [[21, "cleanlab.datalab.internal.issue_manager.data_valuation.DataValuationIssueManager.info"]], "issue_name (cleanlab.datalab.internal.issue_manager.data_valuation.datavaluationissuemanager attribute)": [[21, "cleanlab.datalab.internal.issue_manager.data_valuation.DataValuationIssueManager.issue_name"]], "issue_score_key (cleanlab.datalab.internal.issue_manager.data_valuation.datavaluationissuemanager attribute)": [[21, "cleanlab.datalab.internal.issue_manager.data_valuation.DataValuationIssueManager.issue_score_key"]], "issues (cleanlab.datalab.internal.issue_manager.data_valuation.datavaluationissuemanager attribute)": [[21, "cleanlab.datalab.internal.issue_manager.data_valuation.DataValuationIssueManager.issues"]], "make_summary() (cleanlab.datalab.internal.issue_manager.data_valuation.datavaluationissuemanager class method)": [[21, "cleanlab.datalab.internal.issue_manager.data_valuation.DataValuationIssueManager.make_summary"]], "report() (cleanlab.datalab.internal.issue_manager.data_valuation.datavaluationissuemanager class method)": [[21, "cleanlab.datalab.internal.issue_manager.data_valuation.DataValuationIssueManager.report"]], "summary (cleanlab.datalab.internal.issue_manager.data_valuation.datavaluationissuemanager attribute)": [[21, "cleanlab.datalab.internal.issue_manager.data_valuation.DataValuationIssueManager.summary"]], "verbosity_levels (cleanlab.datalab.internal.issue_manager.data_valuation.datavaluationissuemanager attribute)": [[21, "cleanlab.datalab.internal.issue_manager.data_valuation.DataValuationIssueManager.verbosity_levels"]], "nearduplicateissuemanager (class in cleanlab.datalab.internal.issue_manager.duplicate)": [[22, "cleanlab.datalab.internal.issue_manager.duplicate.NearDuplicateIssueManager"]], "cleanlab.datalab.internal.issue_manager.duplicate": [[22, "module-cleanlab.datalab.internal.issue_manager.duplicate"]], "collect_info() (cleanlab.datalab.internal.issue_manager.duplicate.nearduplicateissuemanager method)": [[22, "cleanlab.datalab.internal.issue_manager.duplicate.NearDuplicateIssueManager.collect_info"]], "description (cleanlab.datalab.internal.issue_manager.duplicate.nearduplicateissuemanager attribute)": [[22, "cleanlab.datalab.internal.issue_manager.duplicate.NearDuplicateIssueManager.description"]], "find_issues() (cleanlab.datalab.internal.issue_manager.duplicate.nearduplicateissuemanager method)": [[22, "cleanlab.datalab.internal.issue_manager.duplicate.NearDuplicateIssueManager.find_issues"]], "info (cleanlab.datalab.internal.issue_manager.duplicate.nearduplicateissuemanager attribute)": [[22, "cleanlab.datalab.internal.issue_manager.duplicate.NearDuplicateIssueManager.info"]], "issue_name (cleanlab.datalab.internal.issue_manager.duplicate.nearduplicateissuemanager attribute)": [[22, "cleanlab.datalab.internal.issue_manager.duplicate.NearDuplicateIssueManager.issue_name"]], "issue_score_key (cleanlab.datalab.internal.issue_manager.duplicate.nearduplicateissuemanager attribute)": [[22, "cleanlab.datalab.internal.issue_manager.duplicate.NearDuplicateIssueManager.issue_score_key"]], "issues (cleanlab.datalab.internal.issue_manager.duplicate.nearduplicateissuemanager attribute)": [[22, "cleanlab.datalab.internal.issue_manager.duplicate.NearDuplicateIssueManager.issues"]], "make_summary() (cleanlab.datalab.internal.issue_manager.duplicate.nearduplicateissuemanager class method)": [[22, "cleanlab.datalab.internal.issue_manager.duplicate.NearDuplicateIssueManager.make_summary"]], "near_duplicate_sets (cleanlab.datalab.internal.issue_manager.duplicate.nearduplicateissuemanager attribute)": [[22, "cleanlab.datalab.internal.issue_manager.duplicate.NearDuplicateIssueManager.near_duplicate_sets"]], "report() (cleanlab.datalab.internal.issue_manager.duplicate.nearduplicateissuemanager class method)": [[22, "cleanlab.datalab.internal.issue_manager.duplicate.NearDuplicateIssueManager.report"]], "summary (cleanlab.datalab.internal.issue_manager.duplicate.nearduplicateissuemanager attribute)": [[22, "cleanlab.datalab.internal.issue_manager.duplicate.NearDuplicateIssueManager.summary"]], "verbosity_levels (cleanlab.datalab.internal.issue_manager.duplicate.nearduplicateissuemanager attribute)": [[22, "cleanlab.datalab.internal.issue_manager.duplicate.NearDuplicateIssueManager.verbosity_levels"]], "classimbalanceissuemanager (class in cleanlab.datalab.internal.issue_manager.imbalance)": [[23, "cleanlab.datalab.internal.issue_manager.imbalance.ClassImbalanceIssueManager"]], "cleanlab.datalab.internal.issue_manager.imbalance": [[23, "module-cleanlab.datalab.internal.issue_manager.imbalance"]], "collect_info() (cleanlab.datalab.internal.issue_manager.imbalance.classimbalanceissuemanager method)": [[23, "cleanlab.datalab.internal.issue_manager.imbalance.ClassImbalanceIssueManager.collect_info"]], "description (cleanlab.datalab.internal.issue_manager.imbalance.classimbalanceissuemanager attribute)": [[23, "cleanlab.datalab.internal.issue_manager.imbalance.ClassImbalanceIssueManager.description"]], "find_issues() (cleanlab.datalab.internal.issue_manager.imbalance.classimbalanceissuemanager method)": [[23, "cleanlab.datalab.internal.issue_manager.imbalance.ClassImbalanceIssueManager.find_issues"]], "info (cleanlab.datalab.internal.issue_manager.imbalance.classimbalanceissuemanager attribute)": [[23, "cleanlab.datalab.internal.issue_manager.imbalance.ClassImbalanceIssueManager.info"]], "issue_name (cleanlab.datalab.internal.issue_manager.imbalance.classimbalanceissuemanager attribute)": [[23, "cleanlab.datalab.internal.issue_manager.imbalance.ClassImbalanceIssueManager.issue_name"]], "issue_score_key (cleanlab.datalab.internal.issue_manager.imbalance.classimbalanceissuemanager attribute)": [[23, "cleanlab.datalab.internal.issue_manager.imbalance.ClassImbalanceIssueManager.issue_score_key"]], "issues (cleanlab.datalab.internal.issue_manager.imbalance.classimbalanceissuemanager attribute)": [[23, "cleanlab.datalab.internal.issue_manager.imbalance.ClassImbalanceIssueManager.issues"]], "make_summary() (cleanlab.datalab.internal.issue_manager.imbalance.classimbalanceissuemanager class method)": [[23, "cleanlab.datalab.internal.issue_manager.imbalance.ClassImbalanceIssueManager.make_summary"]], "report() (cleanlab.datalab.internal.issue_manager.imbalance.classimbalanceissuemanager class method)": [[23, "cleanlab.datalab.internal.issue_manager.imbalance.ClassImbalanceIssueManager.report"]], "summary (cleanlab.datalab.internal.issue_manager.imbalance.classimbalanceissuemanager attribute)": [[23, "cleanlab.datalab.internal.issue_manager.imbalance.ClassImbalanceIssueManager.summary"]], "verbosity_levels (cleanlab.datalab.internal.issue_manager.imbalance.classimbalanceissuemanager attribute)": [[23, "cleanlab.datalab.internal.issue_manager.imbalance.ClassImbalanceIssueManager.verbosity_levels"]], "issuemanager (class in cleanlab.datalab.internal.issue_manager.issue_manager)": [[25, "cleanlab.datalab.internal.issue_manager.issue_manager.IssueManager"]], "cleanlab.datalab.internal.issue_manager.issue_manager": [[25, "module-cleanlab.datalab.internal.issue_manager.issue_manager"]], "collect_info() (cleanlab.datalab.internal.issue_manager.issue_manager.issuemanager method)": [[25, "cleanlab.datalab.internal.issue_manager.issue_manager.IssueManager.collect_info"]], "description (cleanlab.datalab.internal.issue_manager.issue_manager.issuemanager attribute)": [[25, "cleanlab.datalab.internal.issue_manager.issue_manager.IssueManager.description"]], "find_issues() (cleanlab.datalab.internal.issue_manager.issue_manager.issuemanager method)": [[25, "cleanlab.datalab.internal.issue_manager.issue_manager.IssueManager.find_issues"]], "info (cleanlab.datalab.internal.issue_manager.issue_manager.issuemanager attribute)": [[25, "cleanlab.datalab.internal.issue_manager.issue_manager.IssueManager.info"]], "issue_name (cleanlab.datalab.internal.issue_manager.issue_manager.issuemanager attribute)": [[25, "cleanlab.datalab.internal.issue_manager.issue_manager.IssueManager.issue_name"]], "issue_score_key (cleanlab.datalab.internal.issue_manager.issue_manager.issuemanager attribute)": [[25, "cleanlab.datalab.internal.issue_manager.issue_manager.IssueManager.issue_score_key"]], "issues (cleanlab.datalab.internal.issue_manager.issue_manager.issuemanager attribute)": [[25, "cleanlab.datalab.internal.issue_manager.issue_manager.IssueManager.issues"]], "make_summary() (cleanlab.datalab.internal.issue_manager.issue_manager.issuemanager class method)": [[25, "cleanlab.datalab.internal.issue_manager.issue_manager.IssueManager.make_summary"]], "report() (cleanlab.datalab.internal.issue_manager.issue_manager.issuemanager class method)": [[25, "cleanlab.datalab.internal.issue_manager.issue_manager.IssueManager.report"]], "summary (cleanlab.datalab.internal.issue_manager.issue_manager.issuemanager attribute)": [[25, "cleanlab.datalab.internal.issue_manager.issue_manager.IssueManager.summary"]], "verbosity_levels (cleanlab.datalab.internal.issue_manager.issue_manager.issuemanager attribute)": [[25, "cleanlab.datalab.internal.issue_manager.issue_manager.IssueManager.verbosity_levels"]], "labelissuemanager (class in cleanlab.datalab.internal.issue_manager.label)": [[26, "cleanlab.datalab.internal.issue_manager.label.LabelIssueManager"]], "cleanlab.datalab.internal.issue_manager.label": [[26, "module-cleanlab.datalab.internal.issue_manager.label"]], "collect_info() (cleanlab.datalab.internal.issue_manager.label.labelissuemanager method)": [[26, "cleanlab.datalab.internal.issue_manager.label.LabelIssueManager.collect_info"]], "description (cleanlab.datalab.internal.issue_manager.label.labelissuemanager attribute)": [[26, "cleanlab.datalab.internal.issue_manager.label.LabelIssueManager.description"]], "find_issues() (cleanlab.datalab.internal.issue_manager.label.labelissuemanager method)": [[26, "cleanlab.datalab.internal.issue_manager.label.LabelIssueManager.find_issues"]], "get_health_summary() (cleanlab.datalab.internal.issue_manager.label.labelissuemanager method)": [[26, "cleanlab.datalab.internal.issue_manager.label.LabelIssueManager.get_health_summary"]], "health_summary_parameters (cleanlab.datalab.internal.issue_manager.label.labelissuemanager attribute)": [[26, "cleanlab.datalab.internal.issue_manager.label.LabelIssueManager.health_summary_parameters"]], "info (cleanlab.datalab.internal.issue_manager.label.labelissuemanager attribute)": [[26, "cleanlab.datalab.internal.issue_manager.label.LabelIssueManager.info"]], "issue_name (cleanlab.datalab.internal.issue_manager.label.labelissuemanager attribute)": [[26, "cleanlab.datalab.internal.issue_manager.label.LabelIssueManager.issue_name"]], "issue_score_key (cleanlab.datalab.internal.issue_manager.label.labelissuemanager attribute)": [[26, "cleanlab.datalab.internal.issue_manager.label.LabelIssueManager.issue_score_key"]], "issues (cleanlab.datalab.internal.issue_manager.label.labelissuemanager attribute)": [[26, "cleanlab.datalab.internal.issue_manager.label.LabelIssueManager.issues"]], "make_summary() (cleanlab.datalab.internal.issue_manager.label.labelissuemanager class method)": [[26, "cleanlab.datalab.internal.issue_manager.label.LabelIssueManager.make_summary"]], "report() (cleanlab.datalab.internal.issue_manager.label.labelissuemanager class method)": [[26, "cleanlab.datalab.internal.issue_manager.label.LabelIssueManager.report"]], "summary (cleanlab.datalab.internal.issue_manager.label.labelissuemanager attribute)": [[26, "cleanlab.datalab.internal.issue_manager.label.LabelIssueManager.summary"]], "verbosity_levels (cleanlab.datalab.internal.issue_manager.label.labelissuemanager attribute)": [[26, "cleanlab.datalab.internal.issue_manager.label.LabelIssueManager.verbosity_levels"]], "multilabelissuemanager (class in cleanlab.datalab.internal.issue_manager.multilabel.label)": [[28, "cleanlab.datalab.internal.issue_manager.multilabel.label.MultilabelIssueManager"]], "cleanlab.datalab.internal.issue_manager.multilabel.label": [[28, "module-cleanlab.datalab.internal.issue_manager.multilabel.label"]], "collect_info() (cleanlab.datalab.internal.issue_manager.multilabel.label.multilabelissuemanager method)": [[28, "cleanlab.datalab.internal.issue_manager.multilabel.label.MultilabelIssueManager.collect_info"]], "description (cleanlab.datalab.internal.issue_manager.multilabel.label.multilabelissuemanager attribute)": [[28, "cleanlab.datalab.internal.issue_manager.multilabel.label.MultilabelIssueManager.description"]], "find_issues() (cleanlab.datalab.internal.issue_manager.multilabel.label.multilabelissuemanager method)": [[28, "cleanlab.datalab.internal.issue_manager.multilabel.label.MultilabelIssueManager.find_issues"]], "info (cleanlab.datalab.internal.issue_manager.multilabel.label.multilabelissuemanager attribute)": [[28, "cleanlab.datalab.internal.issue_manager.multilabel.label.MultilabelIssueManager.info"]], "issue_name (cleanlab.datalab.internal.issue_manager.multilabel.label.multilabelissuemanager attribute)": [[28, "cleanlab.datalab.internal.issue_manager.multilabel.label.MultilabelIssueManager.issue_name"]], "issue_score_key (cleanlab.datalab.internal.issue_manager.multilabel.label.multilabelissuemanager attribute)": [[28, "cleanlab.datalab.internal.issue_manager.multilabel.label.MultilabelIssueManager.issue_score_key"]], "issues (cleanlab.datalab.internal.issue_manager.multilabel.label.multilabelissuemanager attribute)": [[28, "cleanlab.datalab.internal.issue_manager.multilabel.label.MultilabelIssueManager.issues"]], "make_summary() (cleanlab.datalab.internal.issue_manager.multilabel.label.multilabelissuemanager class method)": [[28, "cleanlab.datalab.internal.issue_manager.multilabel.label.MultilabelIssueManager.make_summary"]], "report() (cleanlab.datalab.internal.issue_manager.multilabel.label.multilabelissuemanager class method)": [[28, "cleanlab.datalab.internal.issue_manager.multilabel.label.MultilabelIssueManager.report"]], "summary (cleanlab.datalab.internal.issue_manager.multilabel.label.multilabelissuemanager attribute)": [[28, "cleanlab.datalab.internal.issue_manager.multilabel.label.MultilabelIssueManager.summary"]], "verbosity_levels (cleanlab.datalab.internal.issue_manager.multilabel.label.multilabelissuemanager attribute)": [[28, "cleanlab.datalab.internal.issue_manager.multilabel.label.MultilabelIssueManager.verbosity_levels"]], "noniidissuemanager (class in cleanlab.datalab.internal.issue_manager.noniid)": [[29, "cleanlab.datalab.internal.issue_manager.noniid.NonIIDIssueManager"]], "cleanlab.datalab.internal.issue_manager.noniid": [[29, "module-cleanlab.datalab.internal.issue_manager.noniid"]], "collect_info() (cleanlab.datalab.internal.issue_manager.noniid.noniidissuemanager method)": [[29, "cleanlab.datalab.internal.issue_manager.noniid.NonIIDIssueManager.collect_info"]], "description (cleanlab.datalab.internal.issue_manager.noniid.noniidissuemanager attribute)": [[29, "cleanlab.datalab.internal.issue_manager.noniid.NonIIDIssueManager.description"]], "find_issues() (cleanlab.datalab.internal.issue_manager.noniid.noniidissuemanager method)": [[29, "cleanlab.datalab.internal.issue_manager.noniid.NonIIDIssueManager.find_issues"]], "info (cleanlab.datalab.internal.issue_manager.noniid.noniidissuemanager attribute)": [[29, "cleanlab.datalab.internal.issue_manager.noniid.NonIIDIssueManager.info"]], "issue_name (cleanlab.datalab.internal.issue_manager.noniid.noniidissuemanager attribute)": [[29, "cleanlab.datalab.internal.issue_manager.noniid.NonIIDIssueManager.issue_name"]], "issue_score_key (cleanlab.datalab.internal.issue_manager.noniid.noniidissuemanager attribute)": [[29, "cleanlab.datalab.internal.issue_manager.noniid.NonIIDIssueManager.issue_score_key"]], "issues (cleanlab.datalab.internal.issue_manager.noniid.noniidissuemanager attribute)": [[29, "cleanlab.datalab.internal.issue_manager.noniid.NonIIDIssueManager.issues"]], "make_summary() (cleanlab.datalab.internal.issue_manager.noniid.noniidissuemanager class method)": [[29, "cleanlab.datalab.internal.issue_manager.noniid.NonIIDIssueManager.make_summary"]], "report() (cleanlab.datalab.internal.issue_manager.noniid.noniidissuemanager class method)": [[29, "cleanlab.datalab.internal.issue_manager.noniid.NonIIDIssueManager.report"]], "simplified_kolmogorov_smirnov_test() (in module cleanlab.datalab.internal.issue_manager.noniid)": [[29, "cleanlab.datalab.internal.issue_manager.noniid.simplified_kolmogorov_smirnov_test"]], "summary (cleanlab.datalab.internal.issue_manager.noniid.noniidissuemanager attribute)": [[29, "cleanlab.datalab.internal.issue_manager.noniid.NonIIDIssueManager.summary"]], "verbosity_levels (cleanlab.datalab.internal.issue_manager.noniid.noniidissuemanager attribute)": [[29, "cleanlab.datalab.internal.issue_manager.noniid.NonIIDIssueManager.verbosity_levels"]], "nullissuemanager (class in cleanlab.datalab.internal.issue_manager.null)": [[30, "cleanlab.datalab.internal.issue_manager.null.NullIssueManager"]], "cleanlab.datalab.internal.issue_manager.null": [[30, "module-cleanlab.datalab.internal.issue_manager.null"]], "collect_info() (cleanlab.datalab.internal.issue_manager.null.nullissuemanager method)": [[30, "cleanlab.datalab.internal.issue_manager.null.NullIssueManager.collect_info"]], "description (cleanlab.datalab.internal.issue_manager.null.nullissuemanager attribute)": [[30, "cleanlab.datalab.internal.issue_manager.null.NullIssueManager.description"]], "find_issues() (cleanlab.datalab.internal.issue_manager.null.nullissuemanager method)": [[30, "cleanlab.datalab.internal.issue_manager.null.NullIssueManager.find_issues"]], "info (cleanlab.datalab.internal.issue_manager.null.nullissuemanager attribute)": [[30, "cleanlab.datalab.internal.issue_manager.null.NullIssueManager.info"]], "issue_name (cleanlab.datalab.internal.issue_manager.null.nullissuemanager attribute)": [[30, "cleanlab.datalab.internal.issue_manager.null.NullIssueManager.issue_name"]], "issue_score_key (cleanlab.datalab.internal.issue_manager.null.nullissuemanager attribute)": [[30, "cleanlab.datalab.internal.issue_manager.null.NullIssueManager.issue_score_key"]], "issues (cleanlab.datalab.internal.issue_manager.null.nullissuemanager attribute)": [[30, "cleanlab.datalab.internal.issue_manager.null.NullIssueManager.issues"]], "make_summary() (cleanlab.datalab.internal.issue_manager.null.nullissuemanager class method)": [[30, "cleanlab.datalab.internal.issue_manager.null.NullIssueManager.make_summary"]], "report() (cleanlab.datalab.internal.issue_manager.null.nullissuemanager class method)": [[30, "cleanlab.datalab.internal.issue_manager.null.NullIssueManager.report"]], "summary (cleanlab.datalab.internal.issue_manager.null.nullissuemanager attribute)": [[30, "cleanlab.datalab.internal.issue_manager.null.NullIssueManager.summary"]], "verbosity_levels (cleanlab.datalab.internal.issue_manager.null.nullissuemanager attribute)": [[30, "cleanlab.datalab.internal.issue_manager.null.NullIssueManager.verbosity_levels"]], "default_thresholds (cleanlab.datalab.internal.issue_manager.outlier.outlierissuemanager attribute)": [[31, "cleanlab.datalab.internal.issue_manager.outlier.OutlierIssueManager.DEFAULT_THRESHOLDS"]], "outlierissuemanager (class in cleanlab.datalab.internal.issue_manager.outlier)": [[31, "cleanlab.datalab.internal.issue_manager.outlier.OutlierIssueManager"]], "cleanlab.datalab.internal.issue_manager.outlier": [[31, "module-cleanlab.datalab.internal.issue_manager.outlier"]], "collect_info() (cleanlab.datalab.internal.issue_manager.outlier.outlierissuemanager method)": [[31, "cleanlab.datalab.internal.issue_manager.outlier.OutlierIssueManager.collect_info"]], "description (cleanlab.datalab.internal.issue_manager.outlier.outlierissuemanager attribute)": [[31, "cleanlab.datalab.internal.issue_manager.outlier.OutlierIssueManager.description"]], "find_issues() (cleanlab.datalab.internal.issue_manager.outlier.outlierissuemanager method)": [[31, "cleanlab.datalab.internal.issue_manager.outlier.OutlierIssueManager.find_issues"]], "info (cleanlab.datalab.internal.issue_manager.outlier.outlierissuemanager attribute)": [[31, "cleanlab.datalab.internal.issue_manager.outlier.OutlierIssueManager.info"]], "issue_name (cleanlab.datalab.internal.issue_manager.outlier.outlierissuemanager attribute)": [[31, "cleanlab.datalab.internal.issue_manager.outlier.OutlierIssueManager.issue_name"]], "issue_score_key (cleanlab.datalab.internal.issue_manager.outlier.outlierissuemanager attribute)": [[31, "cleanlab.datalab.internal.issue_manager.outlier.OutlierIssueManager.issue_score_key"]], "issues (cleanlab.datalab.internal.issue_manager.outlier.outlierissuemanager attribute)": [[31, "cleanlab.datalab.internal.issue_manager.outlier.OutlierIssueManager.issues"]], "make_summary() (cleanlab.datalab.internal.issue_manager.outlier.outlierissuemanager class method)": [[31, "cleanlab.datalab.internal.issue_manager.outlier.OutlierIssueManager.make_summary"]], "metric (cleanlab.datalab.internal.issue_manager.outlier.outlierissuemanager attribute)": [[31, "cleanlab.datalab.internal.issue_manager.outlier.OutlierIssueManager.metric"]], "ood (cleanlab.datalab.internal.issue_manager.outlier.outlierissuemanager attribute)": [[31, "cleanlab.datalab.internal.issue_manager.outlier.OutlierIssueManager.ood"]], "report() (cleanlab.datalab.internal.issue_manager.outlier.outlierissuemanager class method)": [[31, "cleanlab.datalab.internal.issue_manager.outlier.OutlierIssueManager.report"]], "summary (cleanlab.datalab.internal.issue_manager.outlier.outlierissuemanager attribute)": [[31, "cleanlab.datalab.internal.issue_manager.outlier.OutlierIssueManager.summary"]], "verbosity_levels (cleanlab.datalab.internal.issue_manager.outlier.outlierissuemanager attribute)": [[31, "cleanlab.datalab.internal.issue_manager.outlier.OutlierIssueManager.verbosity_levels"]], "regressionlabelissuemanager (class in cleanlab.datalab.internal.issue_manager.regression.label)": [[33, "cleanlab.datalab.internal.issue_manager.regression.label.RegressionLabelIssueManager"]], "cleanlab.datalab.internal.issue_manager.regression.label": [[33, "module-cleanlab.datalab.internal.issue_manager.regression.label"]], "collect_info() (cleanlab.datalab.internal.issue_manager.regression.label.regressionlabelissuemanager method)": [[33, "cleanlab.datalab.internal.issue_manager.regression.label.RegressionLabelIssueManager.collect_info"]], "description (cleanlab.datalab.internal.issue_manager.regression.label.regressionlabelissuemanager attribute)": [[33, "cleanlab.datalab.internal.issue_manager.regression.label.RegressionLabelIssueManager.description"]], "find_issues() (cleanlab.datalab.internal.issue_manager.regression.label.regressionlabelissuemanager method)": [[33, "cleanlab.datalab.internal.issue_manager.regression.label.RegressionLabelIssueManager.find_issues"]], "find_issues_with_features() (in module cleanlab.datalab.internal.issue_manager.regression.label)": [[33, "cleanlab.datalab.internal.issue_manager.regression.label.find_issues_with_features"]], "find_issues_with_predictions() (in module cleanlab.datalab.internal.issue_manager.regression.label)": [[33, "cleanlab.datalab.internal.issue_manager.regression.label.find_issues_with_predictions"]], "info (cleanlab.datalab.internal.issue_manager.regression.label.regressionlabelissuemanager attribute)": [[33, "cleanlab.datalab.internal.issue_manager.regression.label.RegressionLabelIssueManager.info"]], "issue_name (cleanlab.datalab.internal.issue_manager.regression.label.regressionlabelissuemanager attribute)": [[33, "cleanlab.datalab.internal.issue_manager.regression.label.RegressionLabelIssueManager.issue_name"]], "issue_score_key (cleanlab.datalab.internal.issue_manager.regression.label.regressionlabelissuemanager attribute)": [[33, "cleanlab.datalab.internal.issue_manager.regression.label.RegressionLabelIssueManager.issue_score_key"]], "issues (cleanlab.datalab.internal.issue_manager.regression.label.regressionlabelissuemanager attribute)": [[33, "cleanlab.datalab.internal.issue_manager.regression.label.RegressionLabelIssueManager.issues"]], "make_summary() (cleanlab.datalab.internal.issue_manager.regression.label.regressionlabelissuemanager class method)": [[33, "cleanlab.datalab.internal.issue_manager.regression.label.RegressionLabelIssueManager.make_summary"]], "report() (cleanlab.datalab.internal.issue_manager.regression.label.regressionlabelissuemanager class method)": [[33, "cleanlab.datalab.internal.issue_manager.regression.label.RegressionLabelIssueManager.report"]], "summary (cleanlab.datalab.internal.issue_manager.regression.label.regressionlabelissuemanager attribute)": [[33, "cleanlab.datalab.internal.issue_manager.regression.label.RegressionLabelIssueManager.summary"]], "verbosity_levels (cleanlab.datalab.internal.issue_manager.regression.label.regressionlabelissuemanager attribute)": [[33, "cleanlab.datalab.internal.issue_manager.regression.label.RegressionLabelIssueManager.verbosity_levels"]], "no_underperforming_cluster_id (cleanlab.datalab.internal.issue_manager.underperforming_group.underperforminggroupissuemanager attribute)": [[34, "cleanlab.datalab.internal.issue_manager.underperforming_group.UnderperformingGroupIssueManager.NO_UNDERPERFORMING_CLUSTER_ID"]], "outlier_cluster_labels (cleanlab.datalab.internal.issue_manager.underperforming_group.underperforminggroupissuemanager attribute)": [[34, "cleanlab.datalab.internal.issue_manager.underperforming_group.UnderperformingGroupIssueManager.OUTLIER_CLUSTER_LABELS"]], "underperforminggroupissuemanager (class in cleanlab.datalab.internal.issue_manager.underperforming_group)": [[34, "cleanlab.datalab.internal.issue_manager.underperforming_group.UnderperformingGroupIssueManager"]], "cleanlab.datalab.internal.issue_manager.underperforming_group": [[34, "module-cleanlab.datalab.internal.issue_manager.underperforming_group"]], "collect_info() (cleanlab.datalab.internal.issue_manager.underperforming_group.underperforminggroupissuemanager method)": [[34, "cleanlab.datalab.internal.issue_manager.underperforming_group.UnderperformingGroupIssueManager.collect_info"]], "description (cleanlab.datalab.internal.issue_manager.underperforming_group.underperforminggroupissuemanager attribute)": [[34, "cleanlab.datalab.internal.issue_manager.underperforming_group.UnderperformingGroupIssueManager.description"]], "filter_cluster_ids() (cleanlab.datalab.internal.issue_manager.underperforming_group.underperforminggroupissuemanager method)": [[34, "cleanlab.datalab.internal.issue_manager.underperforming_group.UnderperformingGroupIssueManager.filter_cluster_ids"]], "find_issues() (cleanlab.datalab.internal.issue_manager.underperforming_group.underperforminggroupissuemanager method)": [[34, "cleanlab.datalab.internal.issue_manager.underperforming_group.UnderperformingGroupIssueManager.find_issues"]], "get_underperforming_clusters() (cleanlab.datalab.internal.issue_manager.underperforming_group.underperforminggroupissuemanager method)": [[34, "cleanlab.datalab.internal.issue_manager.underperforming_group.UnderperformingGroupIssueManager.get_underperforming_clusters"]], "info (cleanlab.datalab.internal.issue_manager.underperforming_group.underperforminggroupissuemanager attribute)": [[34, "cleanlab.datalab.internal.issue_manager.underperforming_group.UnderperformingGroupIssueManager.info"]], "issue_name (cleanlab.datalab.internal.issue_manager.underperforming_group.underperforminggroupissuemanager attribute)": [[34, "cleanlab.datalab.internal.issue_manager.underperforming_group.UnderperformingGroupIssueManager.issue_name"]], "issue_score_key (cleanlab.datalab.internal.issue_manager.underperforming_group.underperforminggroupissuemanager attribute)": [[34, "cleanlab.datalab.internal.issue_manager.underperforming_group.UnderperformingGroupIssueManager.issue_score_key"]], "issues (cleanlab.datalab.internal.issue_manager.underperforming_group.underperforminggroupissuemanager attribute)": [[34, "cleanlab.datalab.internal.issue_manager.underperforming_group.UnderperformingGroupIssueManager.issues"]], "make_summary() (cleanlab.datalab.internal.issue_manager.underperforming_group.underperforminggroupissuemanager class method)": [[34, "cleanlab.datalab.internal.issue_manager.underperforming_group.UnderperformingGroupIssueManager.make_summary"]], "perform_clustering() (cleanlab.datalab.internal.issue_manager.underperforming_group.underperforminggroupissuemanager method)": [[34, "cleanlab.datalab.internal.issue_manager.underperforming_group.UnderperformingGroupIssueManager.perform_clustering"]], "report() (cleanlab.datalab.internal.issue_manager.underperforming_group.underperforminggroupissuemanager class method)": [[34, "cleanlab.datalab.internal.issue_manager.underperforming_group.UnderperformingGroupIssueManager.report"]], "summary (cleanlab.datalab.internal.issue_manager.underperforming_group.underperforminggroupissuemanager attribute)": [[34, "cleanlab.datalab.internal.issue_manager.underperforming_group.UnderperformingGroupIssueManager.summary"]], "verbosity_levels (cleanlab.datalab.internal.issue_manager.underperforming_group.underperforminggroupissuemanager attribute)": [[34, "cleanlab.datalab.internal.issue_manager.underperforming_group.UnderperformingGroupIssueManager.verbosity_levels"]], "modeloutput (class in cleanlab.datalab.internal.model_outputs)": [[35, "cleanlab.datalab.internal.model_outputs.ModelOutput"]], "multiclasspredprobs (class in cleanlab.datalab.internal.model_outputs)": [[35, "cleanlab.datalab.internal.model_outputs.MultiClassPredProbs"]], "multilabelpredprobs (class in cleanlab.datalab.internal.model_outputs)": [[35, "cleanlab.datalab.internal.model_outputs.MultiLabelPredProbs"]], "regressionpredictions (class in cleanlab.datalab.internal.model_outputs)": [[35, "cleanlab.datalab.internal.model_outputs.RegressionPredictions"]], "argument (cleanlab.datalab.internal.model_outputs.multiclasspredprobs attribute)": [[35, "cleanlab.datalab.internal.model_outputs.MultiClassPredProbs.argument"]], "argument (cleanlab.datalab.internal.model_outputs.multilabelpredprobs attribute)": [[35, "cleanlab.datalab.internal.model_outputs.MultiLabelPredProbs.argument"]], "argument (cleanlab.datalab.internal.model_outputs.regressionpredictions attribute)": [[35, "cleanlab.datalab.internal.model_outputs.RegressionPredictions.argument"]], "cleanlab.datalab.internal.model_outputs": [[35, "module-cleanlab.datalab.internal.model_outputs"]], "collect() (cleanlab.datalab.internal.model_outputs.modeloutput method)": [[35, "cleanlab.datalab.internal.model_outputs.ModelOutput.collect"]], "collect() (cleanlab.datalab.internal.model_outputs.multiclasspredprobs method)": [[35, "cleanlab.datalab.internal.model_outputs.MultiClassPredProbs.collect"]], "collect() (cleanlab.datalab.internal.model_outputs.multilabelpredprobs method)": [[35, "cleanlab.datalab.internal.model_outputs.MultiLabelPredProbs.collect"]], "collect() (cleanlab.datalab.internal.model_outputs.regressionpredictions method)": [[35, "cleanlab.datalab.internal.model_outputs.RegressionPredictions.collect"]], "data (cleanlab.datalab.internal.model_outputs.modeloutput attribute)": [[35, "cleanlab.datalab.internal.model_outputs.ModelOutput.data"]], "data (cleanlab.datalab.internal.model_outputs.multiclasspredprobs attribute)": [[35, "cleanlab.datalab.internal.model_outputs.MultiClassPredProbs.data"]], "data (cleanlab.datalab.internal.model_outputs.multilabelpredprobs attribute)": [[35, "cleanlab.datalab.internal.model_outputs.MultiLabelPredProbs.data"]], "data (cleanlab.datalab.internal.model_outputs.regressionpredictions attribute)": [[35, "cleanlab.datalab.internal.model_outputs.RegressionPredictions.data"]], "validate() (cleanlab.datalab.internal.model_outputs.modeloutput method)": [[35, "cleanlab.datalab.internal.model_outputs.ModelOutput.validate"]], "validate() (cleanlab.datalab.internal.model_outputs.multiclasspredprobs method)": [[35, "cleanlab.datalab.internal.model_outputs.MultiClassPredProbs.validate"]], "validate() (cleanlab.datalab.internal.model_outputs.multilabelpredprobs method)": [[35, "cleanlab.datalab.internal.model_outputs.MultiLabelPredProbs.validate"]], "validate() (cleanlab.datalab.internal.model_outputs.regressionpredictions method)": [[35, "cleanlab.datalab.internal.model_outputs.RegressionPredictions.validate"]], "reporter (class in cleanlab.datalab.internal.report)": [[36, "cleanlab.datalab.internal.report.Reporter"]], "cleanlab.datalab.internal.report": [[36, "module-cleanlab.datalab.internal.report"]], "get_report() (cleanlab.datalab.internal.report.reporter method)": [[36, "cleanlab.datalab.internal.report.Reporter.get_report"]], "report() (cleanlab.datalab.internal.report.reporter method)": [[36, "cleanlab.datalab.internal.report.Reporter.report"]], "classification (cleanlab.datalab.internal.task.task attribute)": [[37, "cleanlab.datalab.internal.task.Task.CLASSIFICATION"]], "multilabel (cleanlab.datalab.internal.task.task attribute)": [[37, "cleanlab.datalab.internal.task.Task.MULTILABEL"]], "regression (cleanlab.datalab.internal.task.task attribute)": [[37, "cleanlab.datalab.internal.task.Task.REGRESSION"]], "task (class in cleanlab.datalab.internal.task)": [[37, "cleanlab.datalab.internal.task.Task"]], "__contains__() (cleanlab.datalab.internal.task.task class method)": [[37, "cleanlab.datalab.internal.task.Task.__contains__"]], "__getitem__() (cleanlab.datalab.internal.task.task class method)": [[37, "cleanlab.datalab.internal.task.Task.__getitem__"]], "__iter__() (cleanlab.datalab.internal.task.task class method)": [[37, "cleanlab.datalab.internal.task.Task.__iter__"]], "__len__() (cleanlab.datalab.internal.task.task class method)": [[37, "cleanlab.datalab.internal.task.Task.__len__"]], "cleanlab.datalab.internal.task": [[37, "module-cleanlab.datalab.internal.task"]], "from_str() (cleanlab.datalab.internal.task.task class method)": [[37, "cleanlab.datalab.internal.task.Task.from_str"]], "is_classification (cleanlab.datalab.internal.task.task property)": [[37, "cleanlab.datalab.internal.task.Task.is_classification"]], "is_multilabel (cleanlab.datalab.internal.task.task property)": [[37, "cleanlab.datalab.internal.task.Task.is_multilabel"]], "is_regression (cleanlab.datalab.internal.task.task property)": [[37, "cleanlab.datalab.internal.task.Task.is_regression"]], "cleanlab.dataset": [[39, "module-cleanlab.dataset"]], "find_overlapping_classes() (in module cleanlab.dataset)": [[39, "cleanlab.dataset.find_overlapping_classes"]], "health_summary() (in module cleanlab.dataset)": [[39, "cleanlab.dataset.health_summary"]], "overall_label_health_score() (in module cleanlab.dataset)": [[39, "cleanlab.dataset.overall_label_health_score"]], "rank_classes_by_label_quality() (in module cleanlab.dataset)": [[39, "cleanlab.dataset.rank_classes_by_label_quality"]], "cnn (class in cleanlab.experimental.cifar_cnn)": [[40, "cleanlab.experimental.cifar_cnn.CNN"]], "t_destination (cleanlab.experimental.cifar_cnn.cnn attribute)": [[40, "cleanlab.experimental.cifar_cnn.CNN.T_destination"]], "__call__() (cleanlab.experimental.cifar_cnn.cnn method)": [[40, "cleanlab.experimental.cifar_cnn.CNN.__call__"]], "add_module() (cleanlab.experimental.cifar_cnn.cnn method)": [[40, "cleanlab.experimental.cifar_cnn.CNN.add_module"]], "apply() (cleanlab.experimental.cifar_cnn.cnn method)": [[40, "cleanlab.experimental.cifar_cnn.CNN.apply"]], "bfloat16() (cleanlab.experimental.cifar_cnn.cnn method)": [[40, "cleanlab.experimental.cifar_cnn.CNN.bfloat16"]], "buffers() (cleanlab.experimental.cifar_cnn.cnn method)": [[40, "cleanlab.experimental.cifar_cnn.CNN.buffers"]], "call_bn() (in module cleanlab.experimental.cifar_cnn)": [[40, "cleanlab.experimental.cifar_cnn.call_bn"]], "call_super_init (cleanlab.experimental.cifar_cnn.cnn attribute)": [[40, "cleanlab.experimental.cifar_cnn.CNN.call_super_init"]], "children() (cleanlab.experimental.cifar_cnn.cnn method)": [[40, "cleanlab.experimental.cifar_cnn.CNN.children"]], "cleanlab.experimental.cifar_cnn": [[40, "module-cleanlab.experimental.cifar_cnn"]], "compile() (cleanlab.experimental.cifar_cnn.cnn method)": [[40, "cleanlab.experimental.cifar_cnn.CNN.compile"]], "cpu() (cleanlab.experimental.cifar_cnn.cnn method)": [[40, "cleanlab.experimental.cifar_cnn.CNN.cpu"]], "cuda() (cleanlab.experimental.cifar_cnn.cnn method)": [[40, "cleanlab.experimental.cifar_cnn.CNN.cuda"]], "double() (cleanlab.experimental.cifar_cnn.cnn method)": [[40, "cleanlab.experimental.cifar_cnn.CNN.double"]], "dump_patches (cleanlab.experimental.cifar_cnn.cnn attribute)": [[40, "cleanlab.experimental.cifar_cnn.CNN.dump_patches"]], "eval() (cleanlab.experimental.cifar_cnn.cnn method)": [[40, "cleanlab.experimental.cifar_cnn.CNN.eval"]], "extra_repr() (cleanlab.experimental.cifar_cnn.cnn method)": [[40, "cleanlab.experimental.cifar_cnn.CNN.extra_repr"]], "float() (cleanlab.experimental.cifar_cnn.cnn method)": [[40, "cleanlab.experimental.cifar_cnn.CNN.float"]], "forward() (cleanlab.experimental.cifar_cnn.cnn method)": [[40, "cleanlab.experimental.cifar_cnn.CNN.forward"], [40, "id0"]], "get_buffer() (cleanlab.experimental.cifar_cnn.cnn method)": [[40, "cleanlab.experimental.cifar_cnn.CNN.get_buffer"]], "get_extra_state() (cleanlab.experimental.cifar_cnn.cnn method)": [[40, "cleanlab.experimental.cifar_cnn.CNN.get_extra_state"]], "get_parameter() (cleanlab.experimental.cifar_cnn.cnn method)": [[40, "cleanlab.experimental.cifar_cnn.CNN.get_parameter"]], "get_submodule() (cleanlab.experimental.cifar_cnn.cnn method)": [[40, "cleanlab.experimental.cifar_cnn.CNN.get_submodule"]], "half() (cleanlab.experimental.cifar_cnn.cnn method)": [[40, "cleanlab.experimental.cifar_cnn.CNN.half"]], "ipu() (cleanlab.experimental.cifar_cnn.cnn method)": [[40, "cleanlab.experimental.cifar_cnn.CNN.ipu"]], "load_state_dict() (cleanlab.experimental.cifar_cnn.cnn method)": [[40, "cleanlab.experimental.cifar_cnn.CNN.load_state_dict"]], "modules() (cleanlab.experimental.cifar_cnn.cnn method)": [[40, "cleanlab.experimental.cifar_cnn.CNN.modules"]], "named_buffers() (cleanlab.experimental.cifar_cnn.cnn method)": [[40, "cleanlab.experimental.cifar_cnn.CNN.named_buffers"]], "named_children() (cleanlab.experimental.cifar_cnn.cnn method)": [[40, "cleanlab.experimental.cifar_cnn.CNN.named_children"]], "named_modules() (cleanlab.experimental.cifar_cnn.cnn method)": [[40, "cleanlab.experimental.cifar_cnn.CNN.named_modules"]], "named_parameters() (cleanlab.experimental.cifar_cnn.cnn method)": [[40, "cleanlab.experimental.cifar_cnn.CNN.named_parameters"]], "parameters() (cleanlab.experimental.cifar_cnn.cnn method)": [[40, "cleanlab.experimental.cifar_cnn.CNN.parameters"]], "register_backward_hook() (cleanlab.experimental.cifar_cnn.cnn method)": [[40, "cleanlab.experimental.cifar_cnn.CNN.register_backward_hook"]], "register_buffer() (cleanlab.experimental.cifar_cnn.cnn method)": [[40, "cleanlab.experimental.cifar_cnn.CNN.register_buffer"]], "register_forward_hook() (cleanlab.experimental.cifar_cnn.cnn method)": [[40, "cleanlab.experimental.cifar_cnn.CNN.register_forward_hook"]], "register_forward_pre_hook() (cleanlab.experimental.cifar_cnn.cnn method)": [[40, "cleanlab.experimental.cifar_cnn.CNN.register_forward_pre_hook"]], "register_full_backward_hook() (cleanlab.experimental.cifar_cnn.cnn method)": [[40, "cleanlab.experimental.cifar_cnn.CNN.register_full_backward_hook"]], "register_full_backward_pre_hook() (cleanlab.experimental.cifar_cnn.cnn method)": [[40, "cleanlab.experimental.cifar_cnn.CNN.register_full_backward_pre_hook"]], "register_load_state_dict_post_hook() (cleanlab.experimental.cifar_cnn.cnn method)": [[40, "cleanlab.experimental.cifar_cnn.CNN.register_load_state_dict_post_hook"]], "register_module() (cleanlab.experimental.cifar_cnn.cnn method)": [[40, "cleanlab.experimental.cifar_cnn.CNN.register_module"]], "register_parameter() (cleanlab.experimental.cifar_cnn.cnn method)": [[40, "cleanlab.experimental.cifar_cnn.CNN.register_parameter"]], "register_state_dict_pre_hook() (cleanlab.experimental.cifar_cnn.cnn method)": [[40, "cleanlab.experimental.cifar_cnn.CNN.register_state_dict_pre_hook"]], "requires_grad_() (cleanlab.experimental.cifar_cnn.cnn method)": [[40, "cleanlab.experimental.cifar_cnn.CNN.requires_grad_"]], "set_extra_state() (cleanlab.experimental.cifar_cnn.cnn method)": [[40, "cleanlab.experimental.cifar_cnn.CNN.set_extra_state"]], "share_memory() (cleanlab.experimental.cifar_cnn.cnn method)": [[40, "cleanlab.experimental.cifar_cnn.CNN.share_memory"]], "state_dict() (cleanlab.experimental.cifar_cnn.cnn method)": [[40, "cleanlab.experimental.cifar_cnn.CNN.state_dict"]], "to() (cleanlab.experimental.cifar_cnn.cnn method)": [[40, "cleanlab.experimental.cifar_cnn.CNN.to"]], "to_empty() (cleanlab.experimental.cifar_cnn.cnn method)": [[40, "cleanlab.experimental.cifar_cnn.CNN.to_empty"]], "train() (cleanlab.experimental.cifar_cnn.cnn method)": [[40, "cleanlab.experimental.cifar_cnn.CNN.train"]], "training (cleanlab.experimental.cifar_cnn.cnn attribute)": [[40, "cleanlab.experimental.cifar_cnn.CNN.training"]], "type() (cleanlab.experimental.cifar_cnn.cnn method)": [[40, "cleanlab.experimental.cifar_cnn.CNN.type"]], "xpu() (cleanlab.experimental.cifar_cnn.cnn method)": [[40, "cleanlab.experimental.cifar_cnn.CNN.xpu"]], "zero_grad() (cleanlab.experimental.cifar_cnn.cnn method)": [[40, "cleanlab.experimental.cifar_cnn.CNN.zero_grad"]], "adjust_learning_rate() (in module cleanlab.experimental.coteaching)": [[41, "cleanlab.experimental.coteaching.adjust_learning_rate"]], "cleanlab.experimental.coteaching": [[41, "module-cleanlab.experimental.coteaching"]], "evaluate() (in module cleanlab.experimental.coteaching)": [[41, "cleanlab.experimental.coteaching.evaluate"]], "forget_rate_scheduler() (in module cleanlab.experimental.coteaching)": [[41, "cleanlab.experimental.coteaching.forget_rate_scheduler"]], "initialize_lr_scheduler() (in module cleanlab.experimental.coteaching)": [[41, "cleanlab.experimental.coteaching.initialize_lr_scheduler"]], "loss_coteaching() (in module cleanlab.experimental.coteaching)": [[41, "cleanlab.experimental.coteaching.loss_coteaching"]], "train() (in module cleanlab.experimental.coteaching)": [[41, "cleanlab.experimental.coteaching.train"]], "cleanlab.experimental": [[42, "module-cleanlab.experimental"]], "labelinspector (class in cleanlab.experimental.label_issues_batched)": [[43, "cleanlab.experimental.label_issues_batched.LabelInspector"]], "adj_confident_thresholds_shared (in module cleanlab.experimental.label_issues_batched)": [[43, "cleanlab.experimental.label_issues_batched.adj_confident_thresholds_shared"]], "cleanlab.experimental.label_issues_batched": [[43, "module-cleanlab.experimental.label_issues_batched"]], "find_label_issues_batched() (in module cleanlab.experimental.label_issues_batched)": [[43, "cleanlab.experimental.label_issues_batched.find_label_issues_batched"]], "get_confident_thresholds() (cleanlab.experimental.label_issues_batched.labelinspector method)": [[43, "cleanlab.experimental.label_issues_batched.LabelInspector.get_confident_thresholds"]], "get_label_issues() (cleanlab.experimental.label_issues_batched.labelinspector method)": [[43, "cleanlab.experimental.label_issues_batched.LabelInspector.get_label_issues"]], "get_num_issues() (cleanlab.experimental.label_issues_batched.labelinspector method)": [[43, "cleanlab.experimental.label_issues_batched.LabelInspector.get_num_issues"]], "get_quality_scores() (cleanlab.experimental.label_issues_batched.labelinspector method)": [[43, "cleanlab.experimental.label_issues_batched.LabelInspector.get_quality_scores"]], "labels_shared (in module cleanlab.experimental.label_issues_batched)": [[43, "cleanlab.experimental.label_issues_batched.labels_shared"]], "pred_probs_shared (in module cleanlab.experimental.label_issues_batched)": [[43, "cleanlab.experimental.label_issues_batched.pred_probs_shared"]], "score_label_quality() (cleanlab.experimental.label_issues_batched.labelinspector method)": [[43, "cleanlab.experimental.label_issues_batched.LabelInspector.score_label_quality"]], "split_arr() (in module cleanlab.experimental.label_issues_batched)": [[43, "cleanlab.experimental.label_issues_batched.split_arr"]], "update_confident_thresholds() (cleanlab.experimental.label_issues_batched.labelinspector method)": [[43, "cleanlab.experimental.label_issues_batched.LabelInspector.update_confident_thresholds"]], "cnn (class in cleanlab.experimental.mnist_pytorch)": [[44, "cleanlab.experimental.mnist_pytorch.CNN"]], "simplenet (class in cleanlab.experimental.mnist_pytorch)": [[44, "cleanlab.experimental.mnist_pytorch.SimpleNet"]], "t_destination (cleanlab.experimental.mnist_pytorch.simplenet attribute)": [[44, "cleanlab.experimental.mnist_pytorch.SimpleNet.T_destination"]], "__call__() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[44, "cleanlab.experimental.mnist_pytorch.SimpleNet.__call__"]], "__init_subclass__() (cleanlab.experimental.mnist_pytorch.cnn class method)": [[44, "cleanlab.experimental.mnist_pytorch.CNN.__init_subclass__"]], "add_module() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[44, "cleanlab.experimental.mnist_pytorch.SimpleNet.add_module"]], "apply() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[44, "cleanlab.experimental.mnist_pytorch.SimpleNet.apply"]], "batch_size (cleanlab.experimental.mnist_pytorch.cnn attribute)": [[44, "cleanlab.experimental.mnist_pytorch.CNN.batch_size"]], "bfloat16() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[44, "cleanlab.experimental.mnist_pytorch.SimpleNet.bfloat16"]], "buffers() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[44, "cleanlab.experimental.mnist_pytorch.SimpleNet.buffers"]], "call_super_init (cleanlab.experimental.mnist_pytorch.simplenet attribute)": [[44, "cleanlab.experimental.mnist_pytorch.SimpleNet.call_super_init"]], "children() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[44, "cleanlab.experimental.mnist_pytorch.SimpleNet.children"]], "cleanlab.experimental.mnist_pytorch": [[44, "module-cleanlab.experimental.mnist_pytorch"]], "compile() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[44, "cleanlab.experimental.mnist_pytorch.SimpleNet.compile"]], "cpu() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[44, "cleanlab.experimental.mnist_pytorch.SimpleNet.cpu"]], "cuda() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[44, "cleanlab.experimental.mnist_pytorch.SimpleNet.cuda"]], "dataset (cleanlab.experimental.mnist_pytorch.cnn attribute)": [[44, "cleanlab.experimental.mnist_pytorch.CNN.dataset"]], "double() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[44, "cleanlab.experimental.mnist_pytorch.SimpleNet.double"]], "dump_patches (cleanlab.experimental.mnist_pytorch.simplenet attribute)": [[44, "cleanlab.experimental.mnist_pytorch.SimpleNet.dump_patches"]], "epochs (cleanlab.experimental.mnist_pytorch.cnn attribute)": [[44, "cleanlab.experimental.mnist_pytorch.CNN.epochs"]], "eval() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[44, "cleanlab.experimental.mnist_pytorch.SimpleNet.eval"]], "extra_repr() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[44, "cleanlab.experimental.mnist_pytorch.SimpleNet.extra_repr"]], "fit() (cleanlab.experimental.mnist_pytorch.cnn method)": [[44, "cleanlab.experimental.mnist_pytorch.CNN.fit"], [44, "id0"]], "float() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[44, "cleanlab.experimental.mnist_pytorch.SimpleNet.float"]], "forward() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[44, "cleanlab.experimental.mnist_pytorch.SimpleNet.forward"]], "get_buffer() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[44, "cleanlab.experimental.mnist_pytorch.SimpleNet.get_buffer"]], "get_extra_state() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[44, "cleanlab.experimental.mnist_pytorch.SimpleNet.get_extra_state"]], "get_metadata_routing() (cleanlab.experimental.mnist_pytorch.cnn method)": [[44, "cleanlab.experimental.mnist_pytorch.CNN.get_metadata_routing"]], "get_mnist_dataset() (in module cleanlab.experimental.mnist_pytorch)": [[44, "cleanlab.experimental.mnist_pytorch.get_mnist_dataset"]], "get_parameter() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[44, "cleanlab.experimental.mnist_pytorch.SimpleNet.get_parameter"]], "get_params() (cleanlab.experimental.mnist_pytorch.cnn method)": [[44, "cleanlab.experimental.mnist_pytorch.CNN.get_params"]], "get_sklearn_digits_dataset() (in module cleanlab.experimental.mnist_pytorch)": [[44, "cleanlab.experimental.mnist_pytorch.get_sklearn_digits_dataset"]], "get_submodule() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[44, "cleanlab.experimental.mnist_pytorch.SimpleNet.get_submodule"]], "half() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[44, "cleanlab.experimental.mnist_pytorch.SimpleNet.half"]], "ipu() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[44, "cleanlab.experimental.mnist_pytorch.SimpleNet.ipu"]], "load_state_dict() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[44, "cleanlab.experimental.mnist_pytorch.SimpleNet.load_state_dict"]], "loader (cleanlab.experimental.mnist_pytorch.cnn attribute)": [[44, "cleanlab.experimental.mnist_pytorch.CNN.loader"]], "log_interval (cleanlab.experimental.mnist_pytorch.cnn attribute)": [[44, "cleanlab.experimental.mnist_pytorch.CNN.log_interval"]], "lr (cleanlab.experimental.mnist_pytorch.cnn attribute)": [[44, "cleanlab.experimental.mnist_pytorch.CNN.lr"]], "modules() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[44, "cleanlab.experimental.mnist_pytorch.SimpleNet.modules"]], "momentum (cleanlab.experimental.mnist_pytorch.cnn attribute)": [[44, "cleanlab.experimental.mnist_pytorch.CNN.momentum"]], "named_buffers() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[44, "cleanlab.experimental.mnist_pytorch.SimpleNet.named_buffers"]], "named_children() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[44, "cleanlab.experimental.mnist_pytorch.SimpleNet.named_children"]], "named_modules() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[44, "cleanlab.experimental.mnist_pytorch.SimpleNet.named_modules"]], "named_parameters() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[44, "cleanlab.experimental.mnist_pytorch.SimpleNet.named_parameters"]], "no_cuda (cleanlab.experimental.mnist_pytorch.cnn attribute)": [[44, "cleanlab.experimental.mnist_pytorch.CNN.no_cuda"]], "parameters() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[44, "cleanlab.experimental.mnist_pytorch.SimpleNet.parameters"]], "predict() (cleanlab.experimental.mnist_pytorch.cnn method)": [[44, "cleanlab.experimental.mnist_pytorch.CNN.predict"], [44, "id1"]], "predict_proba() (cleanlab.experimental.mnist_pytorch.cnn method)": [[44, "cleanlab.experimental.mnist_pytorch.CNN.predict_proba"], [44, "id4"]], "register_backward_hook() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[44, "cleanlab.experimental.mnist_pytorch.SimpleNet.register_backward_hook"]], "register_buffer() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[44, "cleanlab.experimental.mnist_pytorch.SimpleNet.register_buffer"]], "register_forward_hook() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[44, "cleanlab.experimental.mnist_pytorch.SimpleNet.register_forward_hook"]], "register_forward_pre_hook() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[44, "cleanlab.experimental.mnist_pytorch.SimpleNet.register_forward_pre_hook"]], "register_full_backward_hook() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[44, "cleanlab.experimental.mnist_pytorch.SimpleNet.register_full_backward_hook"]], "register_full_backward_pre_hook() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[44, "cleanlab.experimental.mnist_pytorch.SimpleNet.register_full_backward_pre_hook"]], "register_load_state_dict_post_hook() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[44, "cleanlab.experimental.mnist_pytorch.SimpleNet.register_load_state_dict_post_hook"]], "register_module() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[44, "cleanlab.experimental.mnist_pytorch.SimpleNet.register_module"]], "register_parameter() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[44, "cleanlab.experimental.mnist_pytorch.SimpleNet.register_parameter"]], "register_state_dict_pre_hook() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[44, "cleanlab.experimental.mnist_pytorch.SimpleNet.register_state_dict_pre_hook"]], "requires_grad_() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[44, "cleanlab.experimental.mnist_pytorch.SimpleNet.requires_grad_"]], "seed (cleanlab.experimental.mnist_pytorch.cnn attribute)": [[44, "cleanlab.experimental.mnist_pytorch.CNN.seed"]], "set_extra_state() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[44, "cleanlab.experimental.mnist_pytorch.SimpleNet.set_extra_state"]], "set_fit_request() (cleanlab.experimental.mnist_pytorch.cnn method)": [[44, "cleanlab.experimental.mnist_pytorch.CNN.set_fit_request"]], "set_params() (cleanlab.experimental.mnist_pytorch.cnn method)": [[44, "cleanlab.experimental.mnist_pytorch.CNN.set_params"]], "set_predict_proba_request() (cleanlab.experimental.mnist_pytorch.cnn method)": [[44, "cleanlab.experimental.mnist_pytorch.CNN.set_predict_proba_request"]], "set_predict_request() (cleanlab.experimental.mnist_pytorch.cnn method)": [[44, "cleanlab.experimental.mnist_pytorch.CNN.set_predict_request"]], "share_memory() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[44, "cleanlab.experimental.mnist_pytorch.SimpleNet.share_memory"]], "state_dict() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[44, "cleanlab.experimental.mnist_pytorch.SimpleNet.state_dict"]], "test_batch_size (cleanlab.experimental.mnist_pytorch.cnn attribute)": [[44, "cleanlab.experimental.mnist_pytorch.CNN.test_batch_size"]], "to() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[44, "cleanlab.experimental.mnist_pytorch.SimpleNet.to"]], "to_empty() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[44, "cleanlab.experimental.mnist_pytorch.SimpleNet.to_empty"]], "train() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[44, "cleanlab.experimental.mnist_pytorch.SimpleNet.train"]], "training (cleanlab.experimental.mnist_pytorch.simplenet attribute)": [[44, "cleanlab.experimental.mnist_pytorch.SimpleNet.training"]], "type() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[44, "cleanlab.experimental.mnist_pytorch.SimpleNet.type"]], "xpu() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[44, "cleanlab.experimental.mnist_pytorch.SimpleNet.xpu"]], "zero_grad() (cleanlab.experimental.mnist_pytorch.simplenet method)": [[44, "cleanlab.experimental.mnist_pytorch.SimpleNet.zero_grad"]], "cleanlab.experimental.span_classification": [[45, "module-cleanlab.experimental.span_classification"]], "display_issues() (in module cleanlab.experimental.span_classification)": [[45, "cleanlab.experimental.span_classification.display_issues"]], "find_label_issues() (in module cleanlab.experimental.span_classification)": [[45, "cleanlab.experimental.span_classification.find_label_issues"]], "get_label_quality_scores() (in module cleanlab.experimental.span_classification)": [[45, "cleanlab.experimental.span_classification.get_label_quality_scores"]], "cleanlab.filter": [[46, "module-cleanlab.filter"]], "find_label_issues() (in module cleanlab.filter)": [[46, "cleanlab.filter.find_label_issues"]], "find_label_issues_using_argmax_confusion_matrix() (in module cleanlab.filter)": [[46, "cleanlab.filter.find_label_issues_using_argmax_confusion_matrix"]], "find_predicted_neq_given() (in module cleanlab.filter)": [[46, "cleanlab.filter.find_predicted_neq_given"]], "pred_probs_by_class (in module cleanlab.filter)": [[46, "cleanlab.filter.pred_probs_by_class"]], "prune_count_matrix_cols (in module cleanlab.filter)": [[46, "cleanlab.filter.prune_count_matrix_cols"]], "cleanlab.internal": [[47, "module-cleanlab.internal"]], "cleanlab.internal.label_quality_utils": [[48, "module-cleanlab.internal.label_quality_utils"]], "get_normalized_entropy() (in module cleanlab.internal.label_quality_utils)": [[48, "cleanlab.internal.label_quality_utils.get_normalized_entropy"]], "cleanlab.internal.latent_algebra": [[49, "module-cleanlab.internal.latent_algebra"]], "compute_inv_noise_matrix() (in module cleanlab.internal.latent_algebra)": [[49, "cleanlab.internal.latent_algebra.compute_inv_noise_matrix"]], "compute_noise_matrix_from_inverse() (in module cleanlab.internal.latent_algebra)": [[49, "cleanlab.internal.latent_algebra.compute_noise_matrix_from_inverse"]], "compute_ps_py_inv_noise_matrix() (in module cleanlab.internal.latent_algebra)": [[49, "cleanlab.internal.latent_algebra.compute_ps_py_inv_noise_matrix"]], "compute_py() (in module cleanlab.internal.latent_algebra)": [[49, "cleanlab.internal.latent_algebra.compute_py"]], "compute_py_inv_noise_matrix() (in module cleanlab.internal.latent_algebra)": [[49, "cleanlab.internal.latent_algebra.compute_py_inv_noise_matrix"]], "compute_pyx() (in module cleanlab.internal.latent_algebra)": [[49, "cleanlab.internal.latent_algebra.compute_pyx"]], "assert_valid_inputs_multiannotator() (in module cleanlab.internal.multiannotator_utils)": [[50, "cleanlab.internal.multiannotator_utils.assert_valid_inputs_multiannotator"]], "assert_valid_pred_probs() (in module cleanlab.internal.multiannotator_utils)": [[50, "cleanlab.internal.multiannotator_utils.assert_valid_pred_probs"]], "check_consensus_label_classes() (in module cleanlab.internal.multiannotator_utils)": [[50, "cleanlab.internal.multiannotator_utils.check_consensus_label_classes"]], "cleanlab.internal.multiannotator_utils": [[50, "module-cleanlab.internal.multiannotator_utils"]], "compute_soft_cross_entropy() (in module cleanlab.internal.multiannotator_utils)": [[50, "cleanlab.internal.multiannotator_utils.compute_soft_cross_entropy"]], "find_best_temp_scaler() (in module cleanlab.internal.multiannotator_utils)": [[50, "cleanlab.internal.multiannotator_utils.find_best_temp_scaler"]], "format_multiannotator_labels() (in module cleanlab.internal.multiannotator_utils)": [[50, "cleanlab.internal.multiannotator_utils.format_multiannotator_labels"]], "temp_scale_pred_probs() (in module cleanlab.internal.multiannotator_utils)": [[50, "cleanlab.internal.multiannotator_utils.temp_scale_pred_probs"]], "aggregator (class in cleanlab.internal.multilabel_scorer)": [[51, "cleanlab.internal.multilabel_scorer.Aggregator"]], "confidence_weighted_entropy (cleanlab.internal.multilabel_scorer.classlabelscorer attribute)": [[51, "cleanlab.internal.multilabel_scorer.ClassLabelScorer.CONFIDENCE_WEIGHTED_ENTROPY"]], "classlabelscorer (class in cleanlab.internal.multilabel_scorer)": [[51, "cleanlab.internal.multilabel_scorer.ClassLabelScorer"]], "multilabelscorer (class in cleanlab.internal.multilabel_scorer)": [[51, "cleanlab.internal.multilabel_scorer.MultilabelScorer"]], "normalized_margin (cleanlab.internal.multilabel_scorer.classlabelscorer attribute)": [[51, "cleanlab.internal.multilabel_scorer.ClassLabelScorer.NORMALIZED_MARGIN"]], "self_confidence (cleanlab.internal.multilabel_scorer.classlabelscorer attribute)": [[51, "cleanlab.internal.multilabel_scorer.ClassLabelScorer.SELF_CONFIDENCE"]], "__call__() (cleanlab.internal.multilabel_scorer.aggregator method)": [[51, "cleanlab.internal.multilabel_scorer.Aggregator.__call__"]], "__call__() (cleanlab.internal.multilabel_scorer.classlabelscorer method)": [[51, "cleanlab.internal.multilabel_scorer.ClassLabelScorer.__call__"]], "__call__() (cleanlab.internal.multilabel_scorer.multilabelscorer method)": [[51, "cleanlab.internal.multilabel_scorer.MultilabelScorer.__call__"]], "__contains__() (cleanlab.internal.multilabel_scorer.classlabelscorer class method)": [[51, "cleanlab.internal.multilabel_scorer.ClassLabelScorer.__contains__"]], "__getitem__() (cleanlab.internal.multilabel_scorer.classlabelscorer class method)": [[51, "cleanlab.internal.multilabel_scorer.ClassLabelScorer.__getitem__"]], "__iter__() (cleanlab.internal.multilabel_scorer.classlabelscorer class method)": [[51, "cleanlab.internal.multilabel_scorer.ClassLabelScorer.__iter__"]], "__len__() (cleanlab.internal.multilabel_scorer.classlabelscorer class method)": [[51, "cleanlab.internal.multilabel_scorer.ClassLabelScorer.__len__"]], "aggregate() (cleanlab.internal.multilabel_scorer.multilabelscorer method)": [[51, "cleanlab.internal.multilabel_scorer.MultilabelScorer.aggregate"]], "cleanlab.internal.multilabel_scorer": [[51, "module-cleanlab.internal.multilabel_scorer"]], "exponential_moving_average() (in module cleanlab.internal.multilabel_scorer)": [[51, "cleanlab.internal.multilabel_scorer.exponential_moving_average"]], "from_str() (cleanlab.internal.multilabel_scorer.classlabelscorer class method)": [[51, "cleanlab.internal.multilabel_scorer.ClassLabelScorer.from_str"]], "get_class_label_quality_scores() (cleanlab.internal.multilabel_scorer.multilabelscorer method)": [[51, "cleanlab.internal.multilabel_scorer.MultilabelScorer.get_class_label_quality_scores"]], "get_cross_validated_multilabel_pred_probs() (in module cleanlab.internal.multilabel_scorer)": [[51, "cleanlab.internal.multilabel_scorer.get_cross_validated_multilabel_pred_probs"]], "get_label_quality_scores() (in module cleanlab.internal.multilabel_scorer)": [[51, "cleanlab.internal.multilabel_scorer.get_label_quality_scores"]], "multilabel_py() (in module cleanlab.internal.multilabel_scorer)": [[51, "cleanlab.internal.multilabel_scorer.multilabel_py"]], "possible_methods (cleanlab.internal.multilabel_scorer.aggregator attribute)": [[51, "cleanlab.internal.multilabel_scorer.Aggregator.possible_methods"]], "softmin() (in module cleanlab.internal.multilabel_scorer)": [[51, "cleanlab.internal.multilabel_scorer.softmin"]], "cleanlab.internal.multilabel_utils": [[52, "module-cleanlab.internal.multilabel_utils"]], "get_onehot_num_classes() (in module cleanlab.internal.multilabel_utils)": [[52, "cleanlab.internal.multilabel_utils.get_onehot_num_classes"]], "int2onehot() (in module cleanlab.internal.multilabel_utils)": [[52, "cleanlab.internal.multilabel_utils.int2onehot"]], "onehot2int() (in module cleanlab.internal.multilabel_utils)": [[52, "cleanlab.internal.multilabel_utils.onehot2int"]], "stack_complement() (in module cleanlab.internal.multilabel_utils)": [[52, "cleanlab.internal.multilabel_utils.stack_complement"]], "cleanlab.internal.neighbor": [[53, "module-cleanlab.internal.neighbor"]], "default_k (in module cleanlab.internal.neighbor.knn_graph)": [[54, "cleanlab.internal.neighbor.knn_graph.DEFAULT_K"]], "cleanlab.internal.neighbor.knn_graph": [[54, "module-cleanlab.internal.neighbor.knn_graph"]], "construct_knn_graph_from_index() (in module cleanlab.internal.neighbor.knn_graph)": [[54, "cleanlab.internal.neighbor.knn_graph.construct_knn_graph_from_index"]], "correct_knn_distances_and_indices() (in module cleanlab.internal.neighbor.knn_graph)": [[54, "cleanlab.internal.neighbor.knn_graph.correct_knn_distances_and_indices"]], "correct_knn_distances_and_indices_with_exact_duplicate_sets_inplace() (in module cleanlab.internal.neighbor.knn_graph)": [[54, "cleanlab.internal.neighbor.knn_graph.correct_knn_distances_and_indices_with_exact_duplicate_sets_inplace"]], "correct_knn_graph() (in module cleanlab.internal.neighbor.knn_graph)": [[54, "cleanlab.internal.neighbor.knn_graph.correct_knn_graph"]], "create_knn_graph_and_index() (in module cleanlab.internal.neighbor.knn_graph)": [[54, "cleanlab.internal.neighbor.knn_graph.create_knn_graph_and_index"]], "features_to_knn() (in module cleanlab.internal.neighbor.knn_graph)": [[54, "cleanlab.internal.neighbor.knn_graph.features_to_knn"]], "high_dimension_cutoff (in module cleanlab.internal.neighbor.metric)": [[55, "cleanlab.internal.neighbor.metric.HIGH_DIMENSION_CUTOFF"]], "row_count_cutoff (in module cleanlab.internal.neighbor.metric)": [[55, "cleanlab.internal.neighbor.metric.ROW_COUNT_CUTOFF"]], "cleanlab.internal.neighbor.metric": [[55, "module-cleanlab.internal.neighbor.metric"]], "decide_default_metric() (in module cleanlab.internal.neighbor.metric)": [[55, "cleanlab.internal.neighbor.metric.decide_default_metric"]], "decide_euclidean_metric() (in module cleanlab.internal.neighbor.metric)": [[55, "cleanlab.internal.neighbor.metric.decide_euclidean_metric"]], "cleanlab.internal.neighbor.search": [[56, "module-cleanlab.internal.neighbor.search"]], "construct_knn() (in module cleanlab.internal.neighbor.search)": [[56, "cleanlab.internal.neighbor.search.construct_knn"]], "cleanlab.internal.outlier": [[57, "module-cleanlab.internal.outlier"]], "correct_precision_errors() (in module cleanlab.internal.outlier)": [[57, "cleanlab.internal.outlier.correct_precision_errors"]], "transform_distances_to_scores() (in module cleanlab.internal.outlier)": [[57, "cleanlab.internal.outlier.transform_distances_to_scores"]], "cleanlab.internal.token_classification_utils": [[58, "module-cleanlab.internal.token_classification_utils"]], "color_sentence() (in module cleanlab.internal.token_classification_utils)": [[58, "cleanlab.internal.token_classification_utils.color_sentence"]], "filter_sentence() (in module cleanlab.internal.token_classification_utils)": [[58, "cleanlab.internal.token_classification_utils.filter_sentence"]], "get_sentence() (in module cleanlab.internal.token_classification_utils)": [[58, "cleanlab.internal.token_classification_utils.get_sentence"]], "mapping() (in module cleanlab.internal.token_classification_utils)": [[58, "cleanlab.internal.token_classification_utils.mapping"]], "merge_probs() (in module cleanlab.internal.token_classification_utils)": [[58, "cleanlab.internal.token_classification_utils.merge_probs"]], "process_token() (in module cleanlab.internal.token_classification_utils)": [[58, "cleanlab.internal.token_classification_utils.process_token"]], "append_extra_datapoint() (in module cleanlab.internal.util)": [[59, "cleanlab.internal.util.append_extra_datapoint"]], "cleanlab.internal.util": [[59, "module-cleanlab.internal.util"]], "clip_noise_rates() (in module cleanlab.internal.util)": [[59, "cleanlab.internal.util.clip_noise_rates"]], "clip_values() (in module cleanlab.internal.util)": [[59, "cleanlab.internal.util.clip_values"]], "compress_int_array() (in module cleanlab.internal.util)": [[59, "cleanlab.internal.util.compress_int_array"]], "confusion_matrix() (in module cleanlab.internal.util)": [[59, "cleanlab.internal.util.confusion_matrix"]], "csr_vstack() (in module cleanlab.internal.util)": [[59, "cleanlab.internal.util.csr_vstack"]], "estimate_pu_f1() (in module cleanlab.internal.util)": [[59, "cleanlab.internal.util.estimate_pu_f1"]], "extract_indices_tf() (in module cleanlab.internal.util)": [[59, "cleanlab.internal.util.extract_indices_tf"]], "force_two_dimensions() (in module cleanlab.internal.util)": [[59, "cleanlab.internal.util.force_two_dimensions"]], "format_labels() (in module cleanlab.internal.util)": [[59, "cleanlab.internal.util.format_labels"]], "get_missing_classes() (in module cleanlab.internal.util)": [[59, "cleanlab.internal.util.get_missing_classes"]], "get_num_classes() (in module cleanlab.internal.util)": [[59, "cleanlab.internal.util.get_num_classes"]], "get_unique_classes() (in module cleanlab.internal.util)": [[59, "cleanlab.internal.util.get_unique_classes"]], "is_tensorflow_dataset() (in module cleanlab.internal.util)": [[59, "cleanlab.internal.util.is_tensorflow_dataset"]], "is_torch_dataset() (in module cleanlab.internal.util)": [[59, "cleanlab.internal.util.is_torch_dataset"]], "num_unique_classes() (in module cleanlab.internal.util)": [[59, "cleanlab.internal.util.num_unique_classes"]], "print_inverse_noise_matrix() (in module cleanlab.internal.util)": [[59, "cleanlab.internal.util.print_inverse_noise_matrix"]], "print_joint_matrix() (in module cleanlab.internal.util)": [[59, "cleanlab.internal.util.print_joint_matrix"]], "print_noise_matrix() (in module cleanlab.internal.util)": [[59, "cleanlab.internal.util.print_noise_matrix"]], "print_square_matrix() (in module cleanlab.internal.util)": [[59, "cleanlab.internal.util.print_square_matrix"]], "remove_noise_from_class() (in module cleanlab.internal.util)": [[59, "cleanlab.internal.util.remove_noise_from_class"]], "round_preserving_row_totals() (in module cleanlab.internal.util)": [[59, "cleanlab.internal.util.round_preserving_row_totals"]], "round_preserving_sum() (in module cleanlab.internal.util)": [[59, "cleanlab.internal.util.round_preserving_sum"]], "smart_display_dataframe() (in module cleanlab.internal.util)": [[59, "cleanlab.internal.util.smart_display_dataframe"]], "subset_x_y() (in module cleanlab.internal.util)": [[59, "cleanlab.internal.util.subset_X_y"]], "subset_data() (in module cleanlab.internal.util)": [[59, "cleanlab.internal.util.subset_data"]], "subset_labels() (in module cleanlab.internal.util)": [[59, "cleanlab.internal.util.subset_labels"]], "train_val_split() (in module cleanlab.internal.util)": [[59, "cleanlab.internal.util.train_val_split"]], "unshuffle_tensorflow_dataset() (in module cleanlab.internal.util)": [[59, "cleanlab.internal.util.unshuffle_tensorflow_dataset"]], "value_counts() (in module cleanlab.internal.util)": [[59, "cleanlab.internal.util.value_counts"]], "value_counts_fill_missing_classes() (in module cleanlab.internal.util)": [[59, "cleanlab.internal.util.value_counts_fill_missing_classes"]], "assert_indexing_works() (in module cleanlab.internal.validation)": [[60, "cleanlab.internal.validation.assert_indexing_works"]], "assert_nonempty_input() (in module cleanlab.internal.validation)": [[60, "cleanlab.internal.validation.assert_nonempty_input"]], "assert_valid_class_labels() (in module cleanlab.internal.validation)": [[60, "cleanlab.internal.validation.assert_valid_class_labels"]], "assert_valid_inputs() (in module cleanlab.internal.validation)": [[60, "cleanlab.internal.validation.assert_valid_inputs"]], "cleanlab.internal.validation": [[60, "module-cleanlab.internal.validation"]], "labels_to_array() (in module cleanlab.internal.validation)": [[60, "cleanlab.internal.validation.labels_to_array"]], "labels_to_list_multilabel() (in module cleanlab.internal.validation)": [[60, "cleanlab.internal.validation.labels_to_list_multilabel"]], "cleanlab.models": [[61, "module-cleanlab.models"]], "keraswrappermodel (class in cleanlab.models.keras)": [[62, "cleanlab.models.keras.KerasWrapperModel"]], "keraswrappersequential (class in cleanlab.models.keras)": [[62, "cleanlab.models.keras.KerasWrapperSequential"]], "cleanlab.models.keras": [[62, "module-cleanlab.models.keras"]], "fit() (cleanlab.models.keras.keraswrappermodel method)": [[62, "cleanlab.models.keras.KerasWrapperModel.fit"]], "fit() (cleanlab.models.keras.keraswrappersequential method)": [[62, "cleanlab.models.keras.KerasWrapperSequential.fit"]], "get_params() (cleanlab.models.keras.keraswrappermodel method)": [[62, "cleanlab.models.keras.KerasWrapperModel.get_params"]], "get_params() (cleanlab.models.keras.keraswrappersequential method)": [[62, "cleanlab.models.keras.KerasWrapperSequential.get_params"]], "predict() (cleanlab.models.keras.keraswrappermodel method)": [[62, "cleanlab.models.keras.KerasWrapperModel.predict"]], "predict() (cleanlab.models.keras.keraswrappersequential method)": [[62, "cleanlab.models.keras.KerasWrapperSequential.predict"]], "predict_proba() (cleanlab.models.keras.keraswrappermodel method)": [[62, "cleanlab.models.keras.KerasWrapperModel.predict_proba"]], "predict_proba() (cleanlab.models.keras.keraswrappersequential method)": [[62, "cleanlab.models.keras.KerasWrapperSequential.predict_proba"]], "set_params() (cleanlab.models.keras.keraswrappermodel method)": [[62, "cleanlab.models.keras.KerasWrapperModel.set_params"]], "set_params() (cleanlab.models.keras.keraswrappersequential method)": [[62, "cleanlab.models.keras.KerasWrapperSequential.set_params"]], "summary() (cleanlab.models.keras.keraswrappermodel method)": [[62, "cleanlab.models.keras.KerasWrapperModel.summary"]], "summary() (cleanlab.models.keras.keraswrappersequential method)": [[62, "cleanlab.models.keras.KerasWrapperSequential.summary"]], "cleanlab.multiannotator": [[63, "module-cleanlab.multiannotator"]], "convert_long_to_wide_dataset() (in module cleanlab.multiannotator)": [[63, "cleanlab.multiannotator.convert_long_to_wide_dataset"]], "get_active_learning_scores() (in module cleanlab.multiannotator)": [[63, "cleanlab.multiannotator.get_active_learning_scores"]], "get_active_learning_scores_ensemble() (in module cleanlab.multiannotator)": [[63, "cleanlab.multiannotator.get_active_learning_scores_ensemble"]], "get_label_quality_multiannotator() (in module cleanlab.multiannotator)": [[63, "cleanlab.multiannotator.get_label_quality_multiannotator"]], "get_label_quality_multiannotator_ensemble() (in module cleanlab.multiannotator)": [[63, "cleanlab.multiannotator.get_label_quality_multiannotator_ensemble"]], "get_majority_vote_label() (in module cleanlab.multiannotator)": [[63, "cleanlab.multiannotator.get_majority_vote_label"]], "cleanlab.multilabel_classification.dataset": [[64, "module-cleanlab.multilabel_classification.dataset"]], "common_multilabel_issues() (in module cleanlab.multilabel_classification.dataset)": [[64, "cleanlab.multilabel_classification.dataset.common_multilabel_issues"]], "multilabel_health_summary() (in module cleanlab.multilabel_classification.dataset)": [[64, "cleanlab.multilabel_classification.dataset.multilabel_health_summary"]], "overall_multilabel_health_score() (in module cleanlab.multilabel_classification.dataset)": [[64, "cleanlab.multilabel_classification.dataset.overall_multilabel_health_score"]], "rank_classes_by_multilabel_quality() (in module cleanlab.multilabel_classification.dataset)": [[64, "cleanlab.multilabel_classification.dataset.rank_classes_by_multilabel_quality"]], "cleanlab.multilabel_classification.filter": [[65, "module-cleanlab.multilabel_classification.filter"]], "find_label_issues() (in module cleanlab.multilabel_classification.filter)": [[65, "cleanlab.multilabel_classification.filter.find_label_issues"]], "find_multilabel_issues_per_class() (in module cleanlab.multilabel_classification.filter)": [[65, "cleanlab.multilabel_classification.filter.find_multilabel_issues_per_class"]], "cleanlab.multilabel_classification": [[66, "module-cleanlab.multilabel_classification"]], "cleanlab.multilabel_classification.rank": [[67, "module-cleanlab.multilabel_classification.rank"]], "get_label_quality_scores() (in module cleanlab.multilabel_classification.rank)": [[67, "cleanlab.multilabel_classification.rank.get_label_quality_scores"]], "get_label_quality_scores_per_class() (in module cleanlab.multilabel_classification.rank)": [[67, "cleanlab.multilabel_classification.rank.get_label_quality_scores_per_class"]], "cleanlab.object_detection.filter": [[68, "module-cleanlab.object_detection.filter"]], "find_label_issues() (in module cleanlab.object_detection.filter)": [[68, "cleanlab.object_detection.filter.find_label_issues"]], "cleanlab.object_detection": [[69, "module-cleanlab.object_detection"]], "cleanlab.object_detection.rank": [[70, "module-cleanlab.object_detection.rank"]], "compute_badloc_box_scores() (in module cleanlab.object_detection.rank)": [[70, "cleanlab.object_detection.rank.compute_badloc_box_scores"]], "compute_overlooked_box_scores() (in module cleanlab.object_detection.rank)": [[70, "cleanlab.object_detection.rank.compute_overlooked_box_scores"]], "compute_swap_box_scores() (in module cleanlab.object_detection.rank)": [[70, "cleanlab.object_detection.rank.compute_swap_box_scores"]], "get_label_quality_scores() (in module cleanlab.object_detection.rank)": [[70, "cleanlab.object_detection.rank.get_label_quality_scores"]], "issues_from_scores() (in module cleanlab.object_detection.rank)": [[70, "cleanlab.object_detection.rank.issues_from_scores"]], "pool_box_scores_per_image() (in module cleanlab.object_detection.rank)": [[70, "cleanlab.object_detection.rank.pool_box_scores_per_image"]], "bounding_box_size_distribution() (in module cleanlab.object_detection.summary)": [[71, "cleanlab.object_detection.summary.bounding_box_size_distribution"]], "calculate_per_class_metrics() (in module cleanlab.object_detection.summary)": [[71, "cleanlab.object_detection.summary.calculate_per_class_metrics"]], "class_label_distribution() (in module cleanlab.object_detection.summary)": [[71, "cleanlab.object_detection.summary.class_label_distribution"]], "cleanlab.object_detection.summary": [[71, "module-cleanlab.object_detection.summary"]], "get_average_per_class_confusion_matrix() (in module cleanlab.object_detection.summary)": [[71, "cleanlab.object_detection.summary.get_average_per_class_confusion_matrix"]], "get_sorted_bbox_count_idxs() (in module cleanlab.object_detection.summary)": [[71, "cleanlab.object_detection.summary.get_sorted_bbox_count_idxs"]], "object_counts_per_image() (in module cleanlab.object_detection.summary)": [[71, "cleanlab.object_detection.summary.object_counts_per_image"]], "plot_class_distribution() (in module cleanlab.object_detection.summary)": [[71, "cleanlab.object_detection.summary.plot_class_distribution"]], "plot_class_size_distributions() (in module cleanlab.object_detection.summary)": [[71, "cleanlab.object_detection.summary.plot_class_size_distributions"]], "visualize() (in module cleanlab.object_detection.summary)": [[71, "cleanlab.object_detection.summary.visualize"]], "outofdistribution (class in cleanlab.outlier)": [[72, "cleanlab.outlier.OutOfDistribution"]], "cleanlab.outlier": [[72, "module-cleanlab.outlier"]], "fit() (cleanlab.outlier.outofdistribution method)": [[72, "cleanlab.outlier.OutOfDistribution.fit"]], "fit_score() (cleanlab.outlier.outofdistribution method)": [[72, "cleanlab.outlier.OutOfDistribution.fit_score"]], "score() (cleanlab.outlier.outofdistribution method)": [[72, "cleanlab.outlier.OutOfDistribution.score"]], "cleanlab.rank": [[73, "module-cleanlab.rank"]], "find_top_issues() (in module cleanlab.rank)": [[73, "cleanlab.rank.find_top_issues"]], "get_confidence_weighted_entropy_for_each_label() (in module cleanlab.rank)": [[73, "cleanlab.rank.get_confidence_weighted_entropy_for_each_label"]], "get_label_quality_ensemble_scores() (in module cleanlab.rank)": [[73, "cleanlab.rank.get_label_quality_ensemble_scores"]], "get_label_quality_scores() (in module cleanlab.rank)": [[73, "cleanlab.rank.get_label_quality_scores"]], "get_normalized_margin_for_each_label() (in module cleanlab.rank)": [[73, "cleanlab.rank.get_normalized_margin_for_each_label"]], "get_self_confidence_for_each_label() (in module cleanlab.rank)": [[73, "cleanlab.rank.get_self_confidence_for_each_label"]], "order_label_issues() (in module cleanlab.rank)": [[73, "cleanlab.rank.order_label_issues"]], "cleanlab.regression": [[74, "module-cleanlab.regression"]], "cleanlearning (class in cleanlab.regression.learn)": [[75, "cleanlab.regression.learn.CleanLearning"]], "__init_subclass__() (cleanlab.regression.learn.cleanlearning class method)": [[75, "cleanlab.regression.learn.CleanLearning.__init_subclass__"]], "cleanlab.regression.learn": [[75, "module-cleanlab.regression.learn"]], "find_label_issues() (cleanlab.regression.learn.cleanlearning method)": [[75, "cleanlab.regression.learn.CleanLearning.find_label_issues"]], "fit() (cleanlab.regression.learn.cleanlearning method)": [[75, "cleanlab.regression.learn.CleanLearning.fit"]], "get_aleatoric_uncertainty() (cleanlab.regression.learn.cleanlearning method)": [[75, "cleanlab.regression.learn.CleanLearning.get_aleatoric_uncertainty"]], "get_epistemic_uncertainty() (cleanlab.regression.learn.cleanlearning method)": [[75, "cleanlab.regression.learn.CleanLearning.get_epistemic_uncertainty"]], "get_label_issues() (cleanlab.regression.learn.cleanlearning method)": [[75, "cleanlab.regression.learn.CleanLearning.get_label_issues"]], "get_metadata_routing() (cleanlab.regression.learn.cleanlearning method)": [[75, "cleanlab.regression.learn.CleanLearning.get_metadata_routing"]], "get_params() (cleanlab.regression.learn.cleanlearning method)": [[75, "cleanlab.regression.learn.CleanLearning.get_params"]], "predict() (cleanlab.regression.learn.cleanlearning method)": [[75, "cleanlab.regression.learn.CleanLearning.predict"]], "save_space() (cleanlab.regression.learn.cleanlearning method)": [[75, "cleanlab.regression.learn.CleanLearning.save_space"]], "score() (cleanlab.regression.learn.cleanlearning method)": [[75, "cleanlab.regression.learn.CleanLearning.score"]], "set_fit_request() (cleanlab.regression.learn.cleanlearning method)": [[75, "cleanlab.regression.learn.CleanLearning.set_fit_request"]], "set_params() (cleanlab.regression.learn.cleanlearning method)": [[75, "cleanlab.regression.learn.CleanLearning.set_params"]], "set_score_request() (cleanlab.regression.learn.cleanlearning method)": [[75, "cleanlab.regression.learn.CleanLearning.set_score_request"]], "cleanlab.regression.rank": [[76, "module-cleanlab.regression.rank"]], "get_label_quality_scores() (in module cleanlab.regression.rank)": [[76, "cleanlab.regression.rank.get_label_quality_scores"]], "cleanlab.segmentation.filter": [[77, "module-cleanlab.segmentation.filter"]], "find_label_issues() (in module cleanlab.segmentation.filter)": [[77, "cleanlab.segmentation.filter.find_label_issues"]], "cleanlab.segmentation": [[78, "module-cleanlab.segmentation"]], "cleanlab.segmentation.rank": [[79, "module-cleanlab.segmentation.rank"]], "get_label_quality_scores() (in module cleanlab.segmentation.rank)": [[79, "cleanlab.segmentation.rank.get_label_quality_scores"]], "issues_from_scores() (in module cleanlab.segmentation.rank)": [[79, "cleanlab.segmentation.rank.issues_from_scores"]], "cleanlab.segmentation.summary": [[80, "module-cleanlab.segmentation.summary"]], "common_label_issues() (in module cleanlab.segmentation.summary)": [[80, "cleanlab.segmentation.summary.common_label_issues"]], "display_issues() (in module cleanlab.segmentation.summary)": [[80, "cleanlab.segmentation.summary.display_issues"]], "filter_by_class() (in module cleanlab.segmentation.summary)": [[80, "cleanlab.segmentation.summary.filter_by_class"]], "cleanlab.token_classification.filter": [[81, "module-cleanlab.token_classification.filter"]], "find_label_issues() (in module cleanlab.token_classification.filter)": [[81, "cleanlab.token_classification.filter.find_label_issues"]], "cleanlab.token_classification": [[82, "module-cleanlab.token_classification"]], "cleanlab.token_classification.rank": [[83, "module-cleanlab.token_classification.rank"]], "get_label_quality_scores() (in module cleanlab.token_classification.rank)": [[83, "cleanlab.token_classification.rank.get_label_quality_scores"]], "issues_from_scores() (in module cleanlab.token_classification.rank)": [[83, "cleanlab.token_classification.rank.issues_from_scores"]], "cleanlab.token_classification.summary": [[84, "module-cleanlab.token_classification.summary"]], "common_label_issues() (in module cleanlab.token_classification.summary)": [[84, "cleanlab.token_classification.summary.common_label_issues"]], "display_issues() (in module cleanlab.token_classification.summary)": [[84, "cleanlab.token_classification.summary.display_issues"]], "filter_by_token() (in module cleanlab.token_classification.summary)": [[84, "cleanlab.token_classification.summary.filter_by_token"]]}})